//Generated by NMSgen CSharpInterpreter

#pragma once

#include <string>
#include <vector>
#include <algorithm>

struct NMSTemplate { friend bool operator==(const NMSTemplate& a, const NMSTemplate& b) {return true;} };

namespace NMS_GameComponents
{

struct GcBaseStatCondition
{
	enum class BaseStatEnum : uint32_t
	{
		HasTeleporter = 0,
		HasMainframe = 1,
	};

	NMS_GameComponents::GcBaseStatCondition::BaseStatEnum BaseStat;
	bool StatValue;

	friend bool operator==(const GcBaseStatCondition& lhs, const GcBaseStatCondition& rhs) 
	{
		return lhs.BaseStat == rhs.BaseStat &&
		lhs.StatValue == rhs.StatValue;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Colour
{
	float R;
	float G;
	float B;
	float A;

	friend bool operator==(const Colour& lhs, const Colour& rhs) 
	{
		return lhs.R == rhs.R &&
		lhs.G == rhs.G &&
		lhs.B == rhs.B &&
		lhs.A == rhs.A;
	}
};


} //namespace NMS

namespace NMS_Toolkit
{

struct TkAllowedWaterConditions
{
	float ConditionWeights[15];

	friend bool operator==(const TkAllowedWaterConditions& lhs, const TkAllowedWaterConditions& rhs) 
	{
		return std::equal(std::begin(lhs.ConditionWeights), std::end(lhs.ConditionWeights), std::begin(rhs.ConditionWeights));
	}
};

//Dependency: TkAllowedWaterConditions
struct TkBiomeSpecificWaterConditions
{
	NMS_Toolkit::TkAllowedWaterConditions WaterConditionUsage[2];

	friend bool operator==(const TkBiomeSpecificWaterConditions& lhs, const TkBiomeSpecificWaterConditions& rhs) 
	{
		return std::equal(std::begin(lhs.WaterConditionUsage), std::end(lhs.WaterConditionUsage), std::begin(rhs.WaterConditionUsage));
	}
};


} //namespace NMS_Toolkit

namespace NMS
{

struct NMSString0x80
{
	//max length: 128
	std::string Value;

	friend bool operator==(const NMSString0x80& lhs, const NMSString0x80& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x80
struct GcJudgementMessageOptions
{
	NMS::NMSString0x80 MessageInSettlement;
	NMS::NMSString0x80 MessageInSettlementSystem;
	NMS::NMSString0x80 MessageOutOfSettlementSystem;

	friend bool operator==(const GcJudgementMessageOptions& lhs, const GcJudgementMessageOptions& rhs) 
	{
		return lhs.MessageInSettlement == rhs.MessageInSettlement &&
		lhs.MessageInSettlementSystem == rhs.MessageInSettlementSystem &&
		lhs.MessageOutOfSettlementSystem == rhs.MessageOutOfSettlementSystem;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct VariableSizeString
{
	//max length: 2048
	std::string Value;

	friend bool operator==(const VariableSizeString& lhs, const VariableSizeString& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcJudgementMessageOptions
//Dependency: VariableSizeString
struct GcMissionSequenceCompleteSettlementJudgement
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcJudgementMessageOptions MessageOptions[12];
	NMS_GameComponents::GcJudgementMessageOptions MessageNoOffice;
	bool FormatObjectives;

	friend bool operator==(const GcMissionSequenceCompleteSettlementJudgement& lhs, const GcMissionSequenceCompleteSettlementJudgement& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		std::equal(std::begin(lhs.MessageOptions), std::end(lhs.MessageOptions), std::begin(rhs.MessageOptions)) &&
		lhs.MessageNoOffice == rhs.MessageNoOffice &&
		lhs.FormatObjectives == rhs.FormatObjectives;
	}
};

struct GcAISpaceshipRoles
{
	enum class AIShipRoleEnum : uint32_t
	{
		Standard = 0,
		PlayerSquadron = 1,
		Freighter = 2,
		CapitalFreighter = 3,
		SmallFreighter = 4,
		TinyFreighter = 5,
		Frigate = 6,
	};

	NMS_GameComponents::GcAISpaceshipRoles::AIShipRoleEnum AIShipRole;

	friend bool operator==(const GcAISpaceshipRoles& lhs, const GcAISpaceshipRoles& rhs) 
	{
		return lhs.AIShipRole == rhs.AIShipRole;
	}
};

struct GcSpaceshipClasses
{
	enum class ShipClassEnum : uint32_t
	{
		Freighter = 0,
		Dropship = 1,
		Fighter = 2,
		Scientific = 3,
		Shuttle = 4,
		PlayerFreighter = 5,
		Royal = 6,
		Alien = 7,
		Sail = 8,
		Robot = 9,
	};

	NMS_GameComponents::GcSpaceshipClasses::ShipClassEnum ShipClass;

	friend bool operator==(const GcSpaceshipClasses& lhs, const GcSpaceshipClasses& rhs) 
	{
		return lhs.ShipClass == rhs.ShipClass;
	}
};

struct GcFrigateClass
{
	enum class FrigateClassEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomacy = 3,
		Support = 4,
		Normandy = 5,
		DeepSpace = 6,
		DeepSpaceCommon = 7,
		Pirate = 8,
		GhostShip = 9,
	};

	NMS_GameComponents::GcFrigateClass::FrigateClassEnum FrigateClass;

	friend bool operator==(const GcFrigateClass& lhs, const GcFrigateClass& rhs) 
	{
		return lhs.FrigateClass == rhs.FrigateClass;
	}
};

//Dependency: GcAISpaceshipRoles
//Dependency: GcSpaceshipClasses
//Dependency: GcFrigateClass
//Dependency: VariableSizeString
struct GcAISpaceshipModelData
{
	NMS::VariableSizeString Filename;
	NMS_GameComponents::GcAISpaceshipRoles AIRole;
	NMS_GameComponents::GcSpaceshipClasses Class;
	NMS_GameComponents::GcFrigateClass FrigateClass;

	friend bool operator==(const GcAISpaceshipModelData& lhs, const GcAISpaceshipModelData& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.AIRole == rhs.AIRole &&
		lhs.Class == rhs.Class &&
		lhs.FrigateClass == rhs.FrigateClass;
	}
};

//Dependency: GcAISpaceshipModelData
struct GcAISpaceshipModelDataArray
{
	std::vector<NMS_GameComponents::GcAISpaceshipModelData> Spaceships;

	friend bool operator==(const GcAISpaceshipModelDataArray& lhs, const GcAISpaceshipModelDataArray& rhs) 
	{
		return lhs.Spaceships == rhs.Spaceships;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x20A
{
	//max length: 32
	std::string Value;

	friend bool operator==(const NMSString0x20A& lhs, const NMSString0x20A& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcWeightedMaterialId
{
	NMS::NMSString0x20A DecorationId;
	NMS::NMSString0x20A Id;
	float RelativeProbability;

	friend bool operator==(const GcWeightedMaterialId& lhs, const GcWeightedMaterialId& rhs) 
	{
		return lhs.DecorationId == rhs.DecorationId &&
		lhs.Id == rhs.Id &&
		lhs.RelativeProbability == rhs.RelativeProbability;
	}
};

struct GcBuildingClassification
{
	enum class BuildingClassEnum : uint32_t
	{
		None = 0,
		TerrainResource = 1,
		Shelter = 2,
		Abandoned = 3,
		Terminal = 4,
		Shop = 5,
		Outpost = 6,
		Waypoint = 7,
		Beacon = 8,
		RadioTower = 9,
		Observatory = 10,
		Depot = 11,
		Factory = 12,
		Harvester = 13,
		Plaque = 14,
		Monolith = 15,
		Portal = 16,
		Ruin = 17,
		Debris = 18,
		DamagedMachine = 19,
		DistressSignal = 20,
		LandingPad = 21,
		Base = 22,
		MissionTower = 23,
		CrashedFreighter = 24,
		GraveInCave = 25,
		StoryGlitch = 26,
		TreasureRuins = 27,
		GameStartSpawn = 28,
		WaterCrashedFreighter = 29,
		WaterTreasureRuins = 30,
		WaterAbandoned = 31,
		WaterDistressSignal = 32,
		NPCDistressSignal = 33,
		NPCDebris = 34,
		LargeBuilding = 35,
		Settlement_Hub = 36,
		Settlement_LandingZone = 37,
		Settlement_Bar = 38,
		Settlement_Tower = 39,
		Settlement_Market = 40,
		Settlement_Small = 41,
		Settlement_SmallIndustrial = 42,
		Settlement_Medium = 43,
		Settlement_Large = 44,
		Settlement_Monument = 45,
		Settlement_SheriffsOffice = 46,
		Settlement_Double = 47,
		Settlement_Farm = 48,
		Settlement_Factory = 49,
		Settlement_Clump = 50,
		DroneHive = 51,
		SentinelDistressSignal = 52,
		AbandonedRobotCamp = 53,
		RobotHead = 54,
		DigSite = 55,
		AncientGuardian = 56,
		Settlement_Hub_Builders = 57,
		Settlement_FishPond = 58,
		Settlement_Builders_RoboArm = 59,
	};

	NMS_GameComponents::GcBuildingClassification::BuildingClassEnum BuildingClass;

	friend bool operator==(const GcBuildingClassification& lhs, const GcBuildingClassification& rhs) 
	{
		return lhs.BuildingClass == rhs.BuildingClass;
	}
};

//Dependency: GcWeightedMaterialId
//Dependency: GcBuildingClassification
struct GcBuildingMaterialOverride
{
	std::vector<NMS_GameComponents::GcWeightedMaterialId> Materials;
	NMS_GameComponents::GcBuildingClassification Building;

	friend bool operator==(const GcBuildingMaterialOverride& lhs, const GcBuildingMaterialOverride& rhs) 
	{
		return lhs.Materials == rhs.Materials &&
		lhs.Building == rhs.Building;
	}
};

//Dependency: GcBuildingMaterialOverride
//Dependency: GcWeightedMaterialId
struct GcSettlementMaterialData
{
	std::vector<NMS_GameComponents::GcBuildingMaterialOverride> BuildingMaterials;
	std::vector<NMS_GameComponents::GcBuildingMaterialOverride> BuildingPalettes;
	std::vector<NMS_GameComponents::GcWeightedMaterialId> DefaultMaterials;
	std::vector<NMS_GameComponents::GcWeightedMaterialId> DefaultPalettes;

	friend bool operator==(const GcSettlementMaterialData& lhs, const GcSettlementMaterialData& rhs) 
	{
		return lhs.BuildingMaterials == rhs.BuildingMaterials &&
		lhs.BuildingPalettes == rhs.BuildingPalettes &&
		lhs.DefaultMaterials == rhs.DefaultMaterials &&
		lhs.DefaultPalettes == rhs.DefaultPalettes;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x10
{
	//max length: 16
	std::string Value;

	friend bool operator==(const NMSString0x10& lhs, const NMSString0x10& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcUnlockableItemTreeNode
{
	std::vector<NMS_GameComponents::GcUnlockableItemTreeNode> Children;
	NMS::NMSString0x10 Unlockable;

	friend bool operator==(const GcUnlockableItemTreeNode& lhs, const GcUnlockableItemTreeNode& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.Unlockable == rhs.Unlockable;
	}
};

//Dependency: GcUnlockableItemTreeNode
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableItemTree
{
	NMS_GameComponents::GcUnlockableItemTreeNode Root;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 CostTypeID;

	friend bool operator==(const GcUnlockableItemTree& lhs, const GcUnlockableItemTree& rhs) 
	{
		return lhs.Root == rhs.Root &&
		lhs.Title == rhs.Title &&
		lhs.CostTypeID == rhs.CostTypeID;
	}
};

//Dependency: GcUnlockableItemTree
//Dependency: NMSString0x20A
struct GcUnlockableItemTrees
{
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcUnlockableItemTree> Trees;

	friend bool operator==(const GcUnlockableItemTrees& lhs, const GcUnlockableItemTrees& rhs) 
	{
		return lhs.Title == rhs.Title &&
		lhs.Trees == rhs.Trees;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct halfVector4
{

	friend bool operator==(const halfVector4& lhs, const halfVector4& rhs) 
	{
		return true;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcRealityCommonFactions
{
	enum class AIFactionEnum : uint32_t
	{
		Player = 0,
		Civilian = 1,
		Pirate = 2,
		Police = 3,
		Creature = 4,
	};

	NMS_GameComponents::GcRealityCommonFactions::AIFactionEnum AIFaction;

	friend bool operator==(const GcRealityCommonFactions& lhs, const GcRealityCommonFactions& rhs) 
	{
		return lhs.AIFaction == rhs.AIFaction;
	}
};

//Dependency: GcRealityCommonFactions
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForShips
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageLowShield;
	int32_t Count;
	NMS_GameComponents::GcRealityCommonFactions Type;

	friend bool operator==(const GcMissionSequenceWaitForShips& lhs, const GcMissionSequenceWaitForShips& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageLowShield == rhs.MessageLowShield &&
		lhs.Count == rhs.Count &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: NMSString0x10
struct GcAnimFrameEvent
{
	NMS::NMSString0x10 Anim;
	int32_t FrameStart;
	bool StartFromEnd;

	friend bool operator==(const GcAnimFrameEvent& lhs, const GcAnimFrameEvent& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.FrameStart == rhs.FrameStart &&
		lhs.StartFromEnd == rhs.StartFromEnd;
	}
};

struct GcBasePartAudioLocation
{
	enum class BasePartAudioLocationEnum : uint32_t
	{
		None = 0,
		Freighter_SpaceWalk = 1,
		Freighter_BioRoom = 2,
		Freighter_TechRoom = 3,
		Freighter_IndustrialRoom = 4,
	};

	NMS_GameComponents::GcBasePartAudioLocation::BasePartAudioLocationEnum BasePartAudioLocation;

	friend bool operator==(const GcBasePartAudioLocation& lhs, const GcBasePartAudioLocation& rhs) 
	{
		return lhs.BasePartAudioLocation == rhs.BasePartAudioLocation;
	}
};

struct GcInventoryIndex
{
	int32_t X;
	int32_t Y;

	friend bool operator==(const GcInventoryIndex& lhs, const GcInventoryIndex& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y;
	}
};

struct GcInventorySpecialSlotType
{
	enum class InventorySpecialSlotTypeEnum : uint32_t
	{
		Broken = 0,
		TechOnly = 1,
		Cargo = 2,
		BlockedByBrokenTech = 3,
		TechBonus = 4,
	};

	NMS_GameComponents::GcInventorySpecialSlotType::InventorySpecialSlotTypeEnum InventorySpecialSlotType;

	friend bool operator==(const GcInventorySpecialSlotType& lhs, const GcInventorySpecialSlotType& rhs) 
	{
		return lhs.InventorySpecialSlotType == rhs.InventorySpecialSlotType;
	}
};

//Dependency: GcInventoryIndex
//Dependency: GcInventorySpecialSlotType
struct GcInventorySpecialSlot
{
	NMS_GameComponents::GcInventoryIndex Index;
	NMS_GameComponents::GcInventorySpecialSlotType Type;

	friend bool operator==(const GcInventorySpecialSlot& lhs, const GcInventorySpecialSlot& rhs) 
	{
		return lhs.Index == rhs.Index &&
		lhs.Type == rhs.Type;
	}
};

struct GcStatType
{
	enum class StatTypeEnum : uint32_t
	{
		Int = 0,
		Float = 1,
		AvgRate = 2,
	};

	NMS_GameComponents::GcStatType::StatTypeEnum StatType;

	friend bool operator==(const GcStatType& lhs, const GcStatType& rhs) 
	{
		return lhs.StatType == rhs.StatType;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcResource
{
	int32_t ResourceID;

	friend bool operator==(const GcResource& lhs, const GcResource& rhs) 
	{
		return lhs.ResourceID == rhs.ResourceID;
	}
};


} //namespace NMS

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkTextureResource
{
	NMS::VariableSizeString Filename;
	NMS::GcResource ResHandle;

	friend bool operator==(const TkTextureResource& lhs, const TkTextureResource& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.ResHandle == rhs.ResHandle;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcStatType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcJourneyMedal
{
	NMS::NMSString0x20A MedalProgressText;
	NMS::NMSString0x20A MedalTitle;
	NMS::NMSString0x20A PinnedDescription;
	NMS_Toolkit::TkTextureResource IconBronze;
	NMS_Toolkit::TkTextureResource IconGold;
	NMS_Toolkit::TkTextureResource IconNone;
	NMS_Toolkit::TkTextureResource IconSilver;
	NMS::NMSString0x10 LevelledStatID;
	NMS::NMSString0x10 PinnedMission;
	NMS_GameComponents::GcStatType StatType;
	bool OverallJourneyDummy;

	friend bool operator==(const GcJourneyMedal& lhs, const GcJourneyMedal& rhs) 
	{
		return lhs.MedalProgressText == rhs.MedalProgressText &&
		lhs.MedalTitle == rhs.MedalTitle &&
		lhs.PinnedDescription == rhs.PinnedDescription &&
		lhs.IconBronze == rhs.IconBronze &&
		lhs.IconGold == rhs.IconGold &&
		lhs.IconNone == rhs.IconNone &&
		lhs.IconSilver == rhs.IconSilver &&
		lhs.LevelledStatID == rhs.LevelledStatID &&
		lhs.PinnedMission == rhs.PinnedMission &&
		lhs.StatType == rhs.StatType &&
		lhs.OverallJourneyDummy == rhs.OverallJourneyDummy;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Colour32
{
	uint8_t R;
	uint8_t G;
	uint8_t B;
	uint8_t A;

	friend bool operator==(const Colour32& lhs, const Colour32& rhs) 
	{
		return lhs.R == rhs.R &&
		lhs.G == rhs.G &&
		lhs.B == rhs.B &&
		lhs.A == rhs.A;
	}
};

struct Vector3f
{
	float X;
	float Y;
	float Z;

	friend bool operator==(const Vector3f& lhs, const Vector3f& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y &&
		lhs.Z == rhs.Z;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Vector3f
struct GcPlayerCharacterIKOverrideData
{
	NMS::Vector3f RotStrengths;
	float Strength;
	bool Enabled;

	friend bool operator==(const GcPlayerCharacterIKOverrideData& lhs, const GcPlayerCharacterIKOverrideData& rhs) 
	{
		return lhs.RotStrengths == rhs.RotStrengths &&
		lhs.Strength == rhs.Strength &&
		lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: NMSString0x10
struct GcPlayerCharacterAnimationOverrideData
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData Data;
	NMS::NMSString0x10 AnimName;

	friend bool operator==(const GcPlayerCharacterAnimationOverrideData& lhs, const GcPlayerCharacterAnimationOverrideData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.AnimName == rhs.AnimName;
	}
};

struct GcPlayerCharacterStateType
{
	enum class CharacterStateEnum : uint32_t
	{
		Idle = 0,
		Jog = 1,
		JogUphill = 2,
		JogDownhill = 3,
		SteepSlope = 4,
		Sliding = 5,
		Run = 6,
		Airborne = 7,
		JetpackBoost = 8,
		RocketBoots = 9,
		Riding = 10,
		Swimming = 11,
		SwimmingJetpack = 12,
		Death = 13,
		FullBodyOverride = 14,
		InSpace = 15,
		LowGWalk = 16,
		LowGRun = 17,
		Fishing = 18,
	};

	NMS_GameComponents::GcPlayerCharacterStateType::CharacterStateEnum CharacterState;

	friend bool operator==(const GcPlayerCharacterStateType& lhs, const GcPlayerCharacterStateType& rhs) 
	{
		return lhs.CharacterState == rhs.CharacterState;
	}
};

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: GcPlayerCharacterAnimationOverrideData
//Dependency: GcPlayerCharacterStateType
struct GcPlayerCharacterIKStateData
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData Data;
	std::vector<NMS_GameComponents::GcPlayerCharacterAnimationOverrideData> AnimOverrides;
	NMS_GameComponents::GcPlayerCharacterStateType State;

	friend bool operator==(const GcPlayerCharacterIKStateData& lhs, const GcPlayerCharacterIKStateData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.AnimOverrides == rhs.AnimOverrides &&
		lhs.State == rhs.State;
	}
};

struct GcCreatureIkType
{
	enum class CreatureIkTypeEnum : uint32_t
	{
		Foot = 0,
		Hinge_X = 1,
		Hinge_Y = 2,
		Hinge_Z = 3,
		Locked = 4,
		Head = 5,
		Toe = 6,
		SpaceshipFoot = 7,
		SpaceshipToe = 8,
	};

	NMS_GameComponents::GcCreatureIkType::CreatureIkTypeEnum CreatureIkType;

	friend bool operator==(const GcCreatureIkType& lhs, const GcCreatureIkType& rhs) 
	{
		return lhs.CreatureIkType == rhs.CreatureIkType;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x100
{
	//max length: 256
	std::string Value;

	friend bool operator==(const NMSString0x100& lhs, const NMSString0x100& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: NMSString0x10
//Dependency: GcPlayerCharacterIKStateData
//Dependency: GcCreatureIkType
//Dependency: NMSString0x100
struct GcIKConstraint
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData DefaultState;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcPlayerCharacterIKStateData> States;
	NMS_GameComponents::GcCreatureIkType Type;
	NMS::NMSString0x100 JointName;

	friend bool operator==(const GcIKConstraint& lhs, const GcIKConstraint& rhs) 
	{
		return lhs.DefaultState == rhs.DefaultState &&
		lhs.Id == rhs.Id &&
		lhs.States == rhs.States &&
		lhs.Type == rhs.Type &&
		lhs.JointName == rhs.JointName;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x40
{
	//max length: 64
	std::string Value;

	friend bool operator==(const NMSString0x40& lhs, const NMSString0x40& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x40
struct GcAdvancedTweaks
{
	std::vector<NMS::NMSString0x40> NodesThatMustBePresent;
	std::vector<NMS::NMSString0x40> NodesToHide;
	float EdgeMultiplierForTangentI;
	float EdgeMultiplierForTangentJ;
	float ParticleKillSpeed;
	float ParticleKillSpeedWrtFixed;
	float RenderNormalMultiplier;
	float StretchUvsToHideTextureEdges;
	bool LeaveRenderedTrianglesUnaffected;

	friend bool operator==(const GcAdvancedTweaks& lhs, const GcAdvancedTweaks& rhs) 
	{
		return lhs.NodesThatMustBePresent == rhs.NodesThatMustBePresent &&
		lhs.NodesToHide == rhs.NodesToHide &&
		lhs.EdgeMultiplierForTangentI == rhs.EdgeMultiplierForTangentI &&
		lhs.EdgeMultiplierForTangentJ == rhs.EdgeMultiplierForTangentJ &&
		lhs.ParticleKillSpeed == rhs.ParticleKillSpeed &&
		lhs.ParticleKillSpeedWrtFixed == rhs.ParticleKillSpeedWrtFixed &&
		lhs.RenderNormalMultiplier == rhs.RenderNormalMultiplier &&
		lhs.StretchUvsToHideTextureEdges == rhs.StretchUvsToHideTextureEdges &&
		lhs.LeaveRenderedTrianglesUnaffected == rhs.LeaveRenderedTrianglesUnaffected;
	}
};

struct GcDefaultMissionProductEnum
{
	enum class DefaultProductTypeEnum : uint32_t
	{
		None = 0,
		PrimaryProduct = 1,
		SecondaryProduct = 2,
	};

	NMS_GameComponents::GcDefaultMissionProductEnum::DefaultProductTypeEnum DefaultProductType;

	friend bool operator==(const GcDefaultMissionProductEnum& lhs, const GcDefaultMissionProductEnum& rhs) 
	{
		return lhs.DefaultProductType == rhs.DefaultProductType;
	}
};

struct GcDifficultySettingEnum
{
	enum class DifficultySettingEnum : uint32_t
	{
		SettingsLocked = 0,
		InventoriesAlwaysInRange = 1,
		AllSlotsUnlocked = 2,
		WarpDriveRequirements = 3,
		CraftingIsFree = 4,
		TutorialEnabled = 5,
		StartWithAllItemsKnown = 6,
		BaseAutoPower = 7,
		DeathConsequences = 8,
		DamageReceived = 9,
		DamageGiven = 10,
		ActiveSurvivalBars = 11,
		HazardDrain = 12,
		EnergyDrain = 13,
		SubstanceCollection = 14,
		InventoryStackLimits = 15,
		ChargingRequirements = 16,
		FuelUse = 17,
		LaunchFuelCost = 18,
		CurrencyCost = 19,
		ScannerRecharge = 20,
		ReputationGain = 21,
		CreatureHostility = 22,
		SpaceCombat = 23,
		GroundCombat = 24,
		ItemShopAvailablity = 25,
		SprintingCost = 26,
		BreakTechOnDamage = 27,
		Fishing = 28,
		NPCPopulation = 29,
	};

	NMS_GameComponents::GcDifficultySettingEnum::DifficultySettingEnum DifficultySetting;

	friend bool operator==(const GcDifficultySettingEnum& lhs, const GcDifficultySettingEnum& rhs) 
	{
		return lhs.DifficultySetting == rhs.DifficultySetting;
	}
};

//Dependency: GcDifficultySettingEnum
struct GcDifficultySettingUIOption
{
	std::vector<NMS_GameComponents::GcDifficultySettingEnum> AlsoChangeOptions;
	NMS_GameComponents::GcDifficultySettingEnum MainOption;

	friend bool operator==(const GcDifficultySettingUIOption& lhs, const GcDifficultySettingUIOption& rhs) 
	{
		return lhs.AlsoChangeOptions == rhs.AlsoChangeOptions &&
		lhs.MainOption == rhs.MainOption;
	}
};

//Dependency: GcDifficultySettingUIOption
//Dependency: NMSString0x20A
struct GcDifficultyOptionUIGroup
{
	NMS::NMSString0x20A HeadingLocID;
	std::vector<NMS_GameComponents::GcDifficultySettingUIOption> DifficultyOptions;

	friend bool operator==(const GcDifficultyOptionUIGroup& lhs, const GcDifficultyOptionUIGroup& rhs) 
	{
		return lhs.HeadingLocID == rhs.HeadingLocID &&
		lhs.DifficultyOptions == rhs.DifficultyOptions;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct HashedString
{
	//max length: 32
	std::string Value;
	uint64_t Offset;
	uint32_t Length;
	uint32_t Padding0xC;
	uint32_t Padding0x14;

	friend bool operator==(const HashedString& lhs, const HashedString& rhs) 
	{
		return lhs.Value == rhs.Value &&
		lhs.Offset == rhs.Offset &&
		lhs.Length == rhs.Length &&
		lhs.Padding0xC == rhs.Padding0xC &&
		lhs.Padding0x14 == rhs.Padding0x14;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcMissionConditionTest
{
	enum class ConditionTestEnum : uint32_t
	{
		AnyFalse = 0,
		AllFalse = 1,
		AnyTrue = 2,
		AllTrue = 3,
	};

	NMS_GameComponents::GcMissionConditionTest::ConditionTestEnum ConditionTest;

	friend bool operator==(const GcMissionConditionTest& lhs, const GcMissionConditionTest& rhs) 
	{
		return lhs.ConditionTest == rhs.ConditionTest;
	}
};

//Dependency: GcMissionConditionTest
//Dependency: NMSString0x20A
struct GcCostGroup
{
	NMS::NMSString0x20A Text;
	std::vector<NMSTemplate> Costs;
	int32_t HideOptionIfCantAffordIndex;
	int32_t TakeTextFromIndex;
	NMS_GameComponents::GcMissionConditionTest Test;

	friend bool operator==(const GcCostGroup& lhs, const GcCostGroup& rhs) 
	{
		return lhs.Text == rhs.Text &&
		lhs.Costs == rhs.Costs &&
		lhs.HideOptionIfCantAffordIndex == rhs.HideOptionIfCantAffordIndex &&
		lhs.TakeTextFromIndex == rhs.TakeTextFromIndex &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForDepots
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;

	friend bool operator==(const GcMissionSequenceWaitForDepots& lhs, const GcMissionSequenceWaitForDepots& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct OptionalVariableSizeString
{
	//max length: 16
	std::string Value;

	friend bool operator==(const OptionalVariableSizeString& lhs, const OptionalVariableSizeString& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcGalaxyWaypointTypes
{
	enum class GalaxyWaypointTypeEnum : uint32_t
	{
		User = 0,
		Gameplay_AtlasStation = 1,
		Gameplay_DistressBeacon = 2,
		Gameplay_BlackHole = 3,
		Gameplay_Mission = 4,
		Gameplay_SeasonParty = 5,
	};

	NMS_GameComponents::GcGalaxyWaypointTypes::GalaxyWaypointTypeEnum GalaxyWaypointType;

	friend bool operator==(const GcGalaxyWaypointTypes& lhs, const GcGalaxyWaypointTypes& rhs) 
	{
		return lhs.GalaxyWaypointType == rhs.GalaxyWaypointType;
	}
};

struct GcGalaxySolarSystemOrbitParams
{
	float FirstOrbitRadiusMax;
	float FirstOrbitRadiusMin;
	float OrbitLineWidth;
	float OrbitRadiusOffsetMax;
	float OrbitRadiusOffsetMin;
	float OrbitRotationSpeedMax;
	float OrbitRotationSpeedMin;

	friend bool operator==(const GcGalaxySolarSystemOrbitParams& lhs, const GcGalaxySolarSystemOrbitParams& rhs) 
	{
		return lhs.FirstOrbitRadiusMax == rhs.FirstOrbitRadiusMax &&
		lhs.FirstOrbitRadiusMin == rhs.FirstOrbitRadiusMin &&
		lhs.OrbitLineWidth == rhs.OrbitLineWidth &&
		lhs.OrbitRadiusOffsetMax == rhs.OrbitRadiusOffsetMax &&
		lhs.OrbitRadiusOffsetMin == rhs.OrbitRadiusOffsetMin &&
		lhs.OrbitRotationSpeedMax == rhs.OrbitRotationSpeedMax &&
		lhs.OrbitRotationSpeedMin == rhs.OrbitRotationSpeedMin;
	}
};

struct GcDamageGivenDifficultyOption
{
	enum class DamageGivenDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcDamageGivenDifficultyOption::DamageGivenDifficultyEnum DamageGivenDifficulty;

	friend bool operator==(const GcDamageGivenDifficultyOption& lhs, const GcDamageGivenDifficultyOption& rhs) 
	{
		return lhs.DamageGivenDifficulty == rhs.DamageGivenDifficulty;
	}
};

struct GcCreatureHostilityDifficultyOption
{
	enum class CreatureHostilityDifficultyEnum : uint32_t
	{
		NeverAttack = 0,
		AttackIfProvoked = 1,
		FullEcosystem = 2,
	};

	NMS_GameComponents::GcCreatureHostilityDifficultyOption::CreatureHostilityDifficultyEnum CreatureHostilityDifficulty;

	friend bool operator==(const GcCreatureHostilityDifficultyOption& lhs, const GcCreatureHostilityDifficultyOption& rhs) 
	{
		return lhs.CreatureHostilityDifficulty == rhs.CreatureHostilityDifficulty;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

//Dependency: OptionalVariableSizeString
struct LinkableNMSTemplate
{
	NMSTemplate Template;
	NMS::OptionalVariableSizeString Linked;

	friend bool operator==(const LinkableNMSTemplate& lhs, const LinkableNMSTemplate& rhs) 
	{
		return lhs.Template == rhs.Template &&
		lhs.Linked == rhs.Linked;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: NMSString0x10
struct GcScanEffectData
{
	enum class ScanEffectTypeEnum : uint32_t
	{
		Building = 0,
		TargetShip = 1,
		Creature = 2,
		Ground = 3,
		Objects = 4,
	};

	NMS::Colour Colour;
	NMS::NMSString0x10 Id;
	float BasecolourIntensity;
	float FadeInTime;
	float FadeOutTime;
	float FresnelIntensity;
	float GlowIntensity;
	NMS_GameComponents::GcScanEffectData::ScanEffectTypeEnum ScanEffectType;
	float ScanlinesSeparation;
	float WaveOffset;
	bool FixedUpAxis;
	bool ModelFade;
	bool Transparent;
	bool WaveActive;

	friend bool operator==(const GcScanEffectData& lhs, const GcScanEffectData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Id == rhs.Id &&
		lhs.BasecolourIntensity == rhs.BasecolourIntensity &&
		lhs.FadeInTime == rhs.FadeInTime &&
		lhs.FadeOutTime == rhs.FadeOutTime &&
		lhs.FresnelIntensity == rhs.FresnelIntensity &&
		lhs.GlowIntensity == rhs.GlowIntensity &&
		lhs.ScanEffectType == rhs.ScanEffectType &&
		lhs.ScanlinesSeparation == rhs.ScanlinesSeparation &&
		lhs.WaveOffset == rhs.WaveOffset &&
		lhs.FixedUpAxis == rhs.FixedUpAxis &&
		lhs.ModelFade == rhs.ModelFade &&
		lhs.Transparent == rhs.Transparent &&
		lhs.WaveActive == rhs.WaveActive;
	}
};

struct GcHand
{
	enum class HandEnum : uint32_t
	{
		Right = 0,
		Left = 1,
	};

	NMS_GameComponents::GcHand::HandEnum Hand;

	friend bool operator==(const GcHand& lhs, const GcHand& rhs) 
	{
		return lhs.Hand == rhs.Hand;
	}
};

//Dependency: GcScanEffectData
//Dependency: GcHand
//Dependency: VariableSizeString
//Dependency: NMSString0x40
struct GcPlayerEmotePropData
{
	NMS_GameComponents::GcScanEffectData ScanEffect;
	NMS::VariableSizeString Model;
	float DelayTime;
	NMS_GameComponents::GcHand Hand;
	float Scale;
	NMS::NMSString0x40 ScanEffectNodeName;
	bool IsHologram;

	friend bool operator==(const GcPlayerEmotePropData& lhs, const GcPlayerEmotePropData& rhs) 
	{
		return lhs.ScanEffect == rhs.ScanEffect &&
		lhs.Model == rhs.Model &&
		lhs.DelayTime == rhs.DelayTime &&
		lhs.Hand == rhs.Hand &&
		lhs.Scale == rhs.Scale &&
		lhs.ScanEffectNodeName == rhs.ScanEffectNodeName &&
		lhs.IsHologram == rhs.IsHologram;
	}
};

//Dependency: VariableSizeString
struct GcNumberedTextList
{
	NMS::VariableSizeString Format;
	int32_t Count;

	friend bool operator==(const GcNumberedTextList& lhs, const GcNumberedTextList& rhs) 
	{
		return lhs.Format == rhs.Format &&
		lhs.Count == rhs.Count;
	}
};

struct GcExpeditionCategory
{
	enum class ExpeditionCategoryEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomacy = 3,
		Balanced = 4,
	};

	NMS_GameComponents::GcExpeditionCategory::ExpeditionCategoryEnum ExpeditionCategory;

	friend bool operator==(const GcExpeditionCategory& lhs, const GcExpeditionCategory& rhs) 
	{
		return lhs.ExpeditionCategory == rhs.ExpeditionCategory;
	}
};

struct GcMissionType
{
	enum class MissionTypeEnum : uint32_t
	{
		SpaceCombat = 0,
		GroundCombat = 1,
		Research = 2,
		MissingPerson = 3,
		Repair = 4,
		Cargo = 5,
		Piracy = 6,
		Photo = 7,
		Feeding = 8,
		Planting = 9,
		Construction = 10,
		LocalCorrupted = 11,
		LocalCorruptedCombat = 12,
		LocalSalvage = 13,
		LocalBiomePlants = 14,
		LocalExtreme = 15,
		LocalBones = 16,
		LocalInfested = 17,
		LocalPlanetaryPirates = 18,
		LocalPredators = 19,
		LocalSentinels = 20,
		BuildersLanguage = 21,
		Fishing = 22,
	};

	NMS_GameComponents::GcMissionType::MissionTypeEnum MissionType;

	friend bool operator==(const GcMissionType& lhs, const GcMissionType& rhs) 
	{
		return lhs.MissionType == rhs.MissionType;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x20
{
	//max length: 32
	std::string Value;

	friend bool operator==(const NMSString0x20& lhs, const NMSString0x20& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcNumberedTextList
//Dependency: GcExpeditionCategory
//Dependency: GcMissionType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcExpeditionInterventionEventData
{
	NMS::NMSString0x20A ID;
	NMS_GameComponents::GcNumberedTextList InteractionID;
	NMS::NMSString0x10 AvoidanceFailureReward;
	NMS::NMSString0x10 AvoidanceSuccessReward;
	NMS::NMSString0x10 FailureReward;
	NMS::NMSString0x10 SuccessReward;
	NMS_GameComponents::GcExpeditionCategory ExpeditionCategory;
	int32_t FailureDamageChance;
	NMS_GameComponents::GcMissionType MissionType;
	int32_t SelectionWeight;
	NMS::NMSString0x20 AvoidanceFailureLogEntry;
	NMS::NMSString0x20 AvoidanceSuccessLogEntry;
	NMS::NMSString0x20 FailureLogEntry;
	NMS::NMSString0x20 SuccessLogEntry;

	friend bool operator==(const GcExpeditionInterventionEventData& lhs, const GcExpeditionInterventionEventData& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.InteractionID == rhs.InteractionID &&
		lhs.AvoidanceFailureReward == rhs.AvoidanceFailureReward &&
		lhs.AvoidanceSuccessReward == rhs.AvoidanceSuccessReward &&
		lhs.FailureReward == rhs.FailureReward &&
		lhs.SuccessReward == rhs.SuccessReward &&
		lhs.ExpeditionCategory == rhs.ExpeditionCategory &&
		lhs.FailureDamageChance == rhs.FailureDamageChance &&
		lhs.MissionType == rhs.MissionType &&
		lhs.SelectionWeight == rhs.SelectionWeight &&
		lhs.AvoidanceFailureLogEntry == rhs.AvoidanceFailureLogEntry &&
		lhs.AvoidanceSuccessLogEntry == rhs.AvoidanceSuccessLogEntry &&
		lhs.FailureLogEntry == rhs.FailureLogEntry &&
		lhs.SuccessLogEntry == rhs.SuccessLogEntry;
	}
};

struct GcCombatEffectType
{
	enum class CombatEffectTypeEnum : uint32_t
	{
		None = 0,
		Fire = 1,
		Stun = 2,
		Slow = 3,
		ElectricDOT = 4,
		SpookyLight = 5,
	};

	NMS_GameComponents::GcCombatEffectType::CombatEffectTypeEnum CombatEffectType;

	friend bool operator==(const GcCombatEffectType& lhs, const GcCombatEffectType& rhs) 
	{
		return lhs.CombatEffectType == rhs.CombatEffectType;
	}
};

struct GcAudioWwiseEvents
{
	enum class AkEventEnum : uint32_t
	{
		INVALID_EVENT = 0,
		ABANDONED_DOOR_UNLOCK = 642510125,
		ABANDONED_FIEND_IDLE = 410904609,
		ABANDONED_FIEND_ROAR = 3594534895,
		ABANDONED_FIEND_RUN = 4101509102,
		ABANDONED_FIEND_SPIT = 2171945049,
		ABANDONED_FIEND_WALK = 3364949456,
		ABANDONED_JELLYFISH_DEATH = 1134430303,
		ABANDONED_JELLYFISH_SWIM = 1305953951,
		AF_CAPSULE = 1289565016,
		AF_DOOR_PRESSURISING = 619175826,
		AF_DOOR_PRESSURISING1 = 2869228263,
		AF_DOOR_PRESSURISING2 = 2869228260,
		AF_DOOR_PRESSURISING3 = 2869228261,
		AF_EXPLODINGCAPSULE = 1602884676,
		AF_FAN = 2783983378,
		AF_ROTATINGDEVICE = 2612871125,
		AMB_ABANDONEDBUILDING = 1285060758,
		AMB_ABANDONEDBUILDING_STOP = 176757445,
		AMB_ANCIENTGUARDIAN = 2933092947,
		AMB_BLACKHOLE = 2055672013,
		AMB_BUILDING_START = 339664199,
		AMB_BUILDING_STOP = 1558548461,
		AMB_FREIGHTER_INTERNAL = 1597120850,
		AMB_FRIGATE = 3281515910,
		AMB_NEBULA_STORM = 2601939637,
		AMB_NEXUS = 2975799955,
		AMB_PLANET_ALL = 2969493440,
		AMB_PLANET_ALL_STOP = 2265604591,
		AMB_RAIN_SURFACE = 3574681672,
		AMB_RAIN_SURFACE_STOP = 824457831,
		AMB_SETTLEMENT_HUB = 696195043,
		AMB_SPACESTATION_HANGER = 3963562130,
		AMB_WEATHER_THUNDER = 3934991865,
		AMB_WEATHER_THUNDER_STOP = 2053666444,
		AMBIENT_EMPHASISER = 1656056005,
		ANIMATEDDOOR_CLOSE = 3509973715,
		ANIMATEDDOOR_OPEN = 2478378341,
		ANOMALY_CORE = 2516442138,
		ANOMALY_DOOR_CLOSE = 3888600666,
		ANOMALY_DOOR_OPEN = 4084656478,
		ANOMALY_MAINAIRLOCK_CLOSE = 2543008824,
		ANOMALY_MAINAIRLOCK_OPEN = 2050087292,
		ANOMALY_SIMULATION_CONSOLE_END = 3365919014,
		ANOMALY_SIMULATION_CONSOLE_FLASH = 1297243995,
		ANOMALY_SIMULATION_CONSOLE_START = 577663245,
		ANOMALY_SIMULATION_LIGHTSOFF = 1547086885,
		ANOMALY_SIMULATION_LIGHTSON = 850401433,
		ANOMALY_SIMULATION_REVEAL_OPEN = 2936469701,
		ANOMALY_SIMULATION_TERMINAL_DIE = 3601682466,
		ANOMALY_WEAPONCRATE_CLOSE = 3814073573,
		ANOMALY_WEAPONCRATE_OPEN = 2316777199,
		ANTATTACK2 = 1540086934,
		ANTELOPE2LEGPOUNCE1 = 652179040,
		ANTELOPEATTACK3 = 3625649098,
		ANTELOPEROAR = 3406035547,
		ANTELOPESHAKE = 101577563,
		ANTELOPETWOLEGATTACK = 4149002821,
		ANTELOPETWOLEGATTACK2 = 2463486637,
		ANTELOPETWOLEGATTACK3 = 2463486636,
		ANTELOPETWOLEGPOUNCE2 = 1664810287,
		ANTELOPETWOLEGPOUNCE3 = 1664810286,
		ANTELOPETWOLEGROAR = 2729766737,
		ANTELOPETWOPERFORM = 371707126,
		ANTPOUNCE1 = 768877531,
		ANTPOUNCE02 = 4277432348,
		ANTPOUNCE03 = 4277432349,
		ARTHROPOD_ATTACK01 = 3203370656,
		ARTHROPOD_EAT = 2231055101,
		ARTHROPOD_POUNCE = 1825148307,
		ARTHROPOD_QUEEN_ATTACK01 = 3519346061,
		ARTHROPOD_QUEEN_BIRTHING = 2415058117,
		ARTHROPOD_QUEEN_BOUNCE = 1351939280,
		ARTHROPOD_QUEEN_EAT = 2300224902,
		ARTHROPOD_QUEEN_GROUNDAPPEAR = 4289375962,
		ARTHROPOD_QUEEN_POUNCE01 = 2900057823,
		ARTHROPOD_QUEEN_ROAR = 850787572,
		ARTHROPOD_QUEEN_SPIT = 3379658970,
		ASTEROID_EXPLODE = 4179480828,
		ASTEROID_HIT = 4266722844,
		ATLAS_ARCH = 2756267813,
		ATLAS_BALLOFLIGHT = 165925067,
		ATLAS_CORE = 3156009720,
		ATLAS_CORE_ACTIVATE = 2439676256,
		ATLAS_CORE_INTERACT = 1194642533,
		ATLAS_GALAXY_SPIN_LP = 1754759127,
		ATLAS_GALAXYBEAM = 3317001044,
		ATLAS_GALAXYSTART_MULTIPLE = 2749352082,
		ATLAS_GALAXYSTART_SINGLE = 493558118,
		ATLAS_INTERFACE_GALAXY_SPIN = 3252185904,
		ATLAS_INTERFACE_TRIGGER = 4238798851,
		ATLAS_ORB_FLARE = 2736877861,
		ATLAS_ORB_ILLUMINATE = 389479645,
		ATLAS_PLINTH_RISE = 2221210384,
		ATLAS_SEED_01 = 2192726712,
		ATLAS_SEED_02 = 2192726715,
		ATLAS_SEED_03 = 2192726714,
		ATLAS_SEED_04 = 2192726717,
		ATLAS_SEED_05 = 2192726716,
		ATLAS_SPHERE_PULSE = 1867798324,
		ATLAS_SPHERE_SPARK = 3237560904,
		ATLAS_SPHERE_WIND = 1509244359,
		ATLAS_VANISH = 31178572,
		ATLASCORRUPTED_LP = 1093824629,
		ATLASCORRUPTED_LP_STOP = 661544472,
		ATLASCORRUPTED_START = 3956103475,
		ATLASINTERACT_CLOSE = 4209843593,
		ATLASINTERACT_OPEN = 4291155803,
		ATLASSTARTSCENEORB_ACTIVATE = 1063302551,
		ATLASSTARTSCENEORB_ACTIVATEIDLE = 282917841,
		ATLASSTARTSCENEORB_DISMISS = 1062916464,
		ATLASSTARTSCENEORB_END = 1213573187,
		ATLASSTARTSCENEORB_IDLE = 1092865242,
		BASE_AQUARIUM = 77795248,
		BASE_BATTERY_CHARGING = 2081665978,
		BASE_BATTERY_DISCHARGING = 588144724,
		BASE_BATTERY_FULLYCHARGED = 922074591,
		BASE_BATTERY_FULLYDISCHARGED = 3305252781,
		BASE_BIOFUELCHARGED = 3829092815,
		BASE_BIOFUELDISCHARGED = 234180189,
		BASE_BIOFUELRUNNING = 3196711758,
		BASE_CALCISHROOM = 3754299263,
		BASE_CUBEGADGET = 905013626,
		BASE_CYCLONIC_LATHE = 3964544424,
		BASE_DOOR_CLOSE = 4123032396,
		BASE_DOOR_OPEN = 2878210264,
		BASE_ELECTRICALWIRING_DELETE = 2491489993,
		BASE_ELECTRICALWIRING_PLACE = 495041649,
		BASE_ELECTRICCUBE = 2018672611,
		BASE_FORCEFIELD_DOOR = 3467740713,
		BASE_GARAGE_DOOR_CLOSE = 959796828,
		BASE_GARAGE_DOOR_OPEN = 462303560,
		BASE_GASEXTRACTOR = 1867920968,
		BASE_GASEXTRACTOR_OFF = 1651550158,
		BASE_LARGEMONITORSTATION = 457136408,
		BASE_LIGHTBOX = 3662433178,
		BASE_MINERALEXTRACTOR = 1152204915,
		BASE_MINERALEXTRACTOR_OFF = 481442981,
		BASE_MONITORSTATION = 1882962519,
		BASE_OSCILLOSCOPE = 2248393238,
		BASE_PIPE_DELETE = 2557514445,
		BASE_PIPE_PLACE = 671919277,
		BASE_POCKETREALITYGENERATOR = 2514072408,
		BASE_POWER_CONNECT = 2832992131,
		BASE_POWER_OFF = 2659594190,
		BASE_POWER_ON = 1917287088,
		BASE_POWER_POWERDOWN = 2968271706,
		BASE_POWER_POWERUP = 1713882617,
		BASE_POWER_SWITCH_OFF = 1808843805,
		BASE_POWER_SWITCH_ON = 3985351281,
		BASE_POWERFLOW_OFF = 2967816550,
		BASE_POWERFLOW_ON = 2117546760,
		BASE_SERVER = 1842991380,
		BASE_SOL_CLOSE = 2594776780,
		BASE_SOL_OPEN = 1409013592,
		BASE_SOLARPANEL_CLOSE = 3472898859,
		BASE_SOLARPANEL_OPEN = 4064347757,
		BASE_SPHERECREATE = 810492146,
		BASE_SPHEREROLL = 1563275903,
		BASEBEACON = 2731684274,
		BASEBUILD_ITEM_BEACON = 3759265155,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION = 2445487892,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION_ACCEPT = 4284763887,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION_CANCEL = 408276461,
		BASEBUILD_ITEM_CONSTRUCTIONTERMINAL = 1609931684,
		BASEBUILD_ITEM_PLANTINCUBATOR = 3982030399,
		BASEBUILD_ITEM_SCIENCETERMINAL = 2569215859,
		BASEBUILD_ITEM_SIGNALBOOSTER_LOOP = 4148625186,
		BASEBUILD_ITEM_SIGNALBOOSTER_START = 3715123596,
		BASEBUILD_ITEM_TERMINALGENERIC = 3370316570,
		BASEBUILD_ITEM_WEAPONTERMINAL = 2975504823,
		BASESHOP_OPEN = 3235315269,
		BASETERMINAL = 1912419070,
		BEACON_TRIGGER_START = 2609690989,
		BEACON_TRIGGER_STOP = 2174397615,
		BEAMSTONE = 2395557887,
		BEETLE_FLY = 3113267994,
		BEETLE_WALK = 2328912828,
		BINOCULARS_ENTER = 2681519212,
		BINOCULARS_EXIT = 1055620270,
		BINOCULARS_ZOOM01 = 12375898,
		BINOCULARS_ZOOM02 = 12375897,
		BINOCULARS_ZOOM03 = 12375896,
		BLACKHOLE_WARP = 1335717601,
		BLD_ALARM_LP = 750785822,
		BLD_ALARM_LP_STOP = 1119458557,
		BLD_AMB_ATM = 381794725,
		BLD_AMB_DEBRISLARGE = 4234591687,
		BLD_AMB_DEPOTS = 127138094,
		BLD_AMB_DEPOTS_STOP = 1788608813,
		BLD_BLACKBOX_OPEN = 1002359359,
		BLD_DAMAGEDMACH_BEAM = 3850508068,
		BLD_DEBRISLARGE_OPEN = 1747581601,
		BLD_DMG_MACH_POD_LP = 1345679995,
		BLD_DOOR_EXPLODE = 2149245338,
		BLD_HOLOGRAM_APPEAR = 1655574179,
		BLD_LIGHTS = 412286519,
		BLD_POD_DOOR_CLOSE = 2732351493,
		BLD_POD_DOOR_OPEN = 80017039,
		BLD_POD_SHUTDOWN = 1875984994,
		BLD_POD_STARTUP = 1548441119,
		BLD_RUIN_MONOLITH = 517735361,
		BLD_RUIN_PLAQUE = 1562405909,
		BLD_SC_FACT_INT = 3137908029,
		BLD_SC_OBS_IN = 3036991769,
		BLD_SCIENTIFIC_DOOR_CLOSE = 1083580215,
		BLD_SCIENTIFIC_DOOR_OPEN = 3898024577,
		BLD_SCIENTIFIC_FACTORY_ROOF = 4701189,
		BLD_SCIENTIFIC_PISTON = 803968741,
		BLD_SCIENTIFIC_WINDOW_CLOSE = 502034775,
		BLD_SCIENTIFIC_WINDOW_OPEN = 459366177,
		BLD_SERVER = 2470221145,
		BLD_TONEINT_GENERIC_01 = 544908605,
		BLD_TONEINT_GENERIC_02 = 544908606,
		BLD_TONEINT_GENERIC_03 = 544908607,
		BLD_TONEINT_GENERIC_04 = 544908600,
		BLD_TONEINT_GENERIC_05 = 544908601,
		BLD_TONEINT_GENERIC_06 = 544908602,
		BLD_TONEINT_GENERIC_07 = 544908603,
		BLD_TONEINT_GENERIC_08 = 544908596,
		BLD_TONEINT_GENERIC_09 = 544908597,
		BLD_TONEINT_GENERIC_10 = 561686191,
		BLD_TONEINT_GENERIC_11 = 561686190,
		BLD_TONEINT_GENERIC_12 = 561686189,
		BLD_TONEINT_GENERIC_13 = 561686188,
		BLD_TONEINT_GENERIC_14 = 561686187,
		BLD_TONEINT_GENERIC_15 = 561686186,
		BLD_TONEINT_GENERIC_16 = 561686185,
		BLD_TONEINT_GENERIC_17 = 561686184,
		BLD_TONEINT_GENERIC_18 = 561686183,
		BLD_TONEINT_HANGER_START_01 = 217123016,
		BLD_TONEINT_HANGER_STOP_01 = 1950752640,
		BLD_TR_HAR_INT = 1010610848,
		BLD_TRADER_DOOR_CLOSE = 242548278,
		BLD_TRADER_DOOR_OPEN = 2826362082,
		BLD_TRADER_FACTORY_ROOF = 232363872,
		BLD_TRADER_RADIOTOWEREFFECT = 3665937068,
		BLD_WARRIOR_DOOR_CLOSE = 1114864716,
		BLD_WARRIOR_DOOR_OPEN = 1144232920,
		BLD_WARRIOR_FACTORY_ROOF = 867791422,
		BLD_WARRIOR_ROOF_OBS = 127805988,
		BLD_WARRIOR_SATELLITE = 2636829060,
		BLD_WARRIOR_WALLEX_CAP = 796125363,
		BLD_WORDSTATION = 1588450116,
		BLOB_TERRARIUM = 2204250590,
		BLOBATTACK = 4147811260,
		BLOBATTACK2 = 3979776198,
		BLOBATTACK3 = 3979776199,
		BLOBROAR = 1950090148,
		BRIDGETERMINAL_CLOSE = 3285412579,
		BRIDGETERMINAL_OPEN = 2725140437,
		BRIDGETERMINALSCREEN = 3075773782,
		BUGFIEND_ATTACK01 = 1394392069,
		BUGFIEND_EAT = 2470439070,
		BUGFIEND_GROUNDAPPEAR = 2500767650,
		BUGFIEND_PAIN01 = 2469122849,
		BUGFIEND_POUNCE01 = 1970527591,
		BUGFIEND_SPIT = 2812242578,
		BUGFIEND_STUNNED = 1204941377,
		BUGGY_BOOST_START = 2829911344,
		BUGGY_BOOST_STOP = 1503147676,
		BUGGY_HORN_START = 4067927030,
		BUGGY_HORN_STOP = 420903030,
		BUGGY_IDLE_EXTERIOR = 1868431803,
		BUGGY_IMPACTS = 2051012561,
		BUGGY_JUMP = 1085198708,
		BUGGY_START = 1464773060,
		BUGGY_STOP = 2599649656,
		BUGGY_SUSPENSION = 2574892627,
		BURNING_BARREL = 4065151541,
		BUTTERFLY = 222366258,
		BYTEBEAT = 1035353295,
		BYTEBEAT_BAR = 2397974629,
		BYTEBEAT_BAR_STOP = 1261594536,
		BYTEBEAT_PLAYER = 502462901,
		BYTEBEAT_STOP = 2468685818,
		CAPSULE_COLLECT = 3159746737,
		CAPSULE_PANEL_OPEN = 3915151496,
		CATALTATTACK = 2597596004,
		CATALTATTACK2 = 536890974,
		CATALTATTACK3 = 536890975,
		CATALTHAPPY = 1635371674,
		CATALTPERFORM01 = 804580326,
		CATALTROAR = 2479264748,
		CATATTACK1 = 77265416,
		CATATTACK2 = 77265419,
		CATATTACK3 = 77265418,
		CATLARGEATTACK = 2892546116,
		CATPERFORM01 = 1962265779,
		CATPOUNCE = 597134041,
		CATROAR = 2369804059,
		CHARACTEREDITOR_SELECT = 3794410944,
		CHARACTEREDITOR_WOOSH = 458434848,
		CHAT = 4140304027,
		CLAMCLOSE = 2654204538,
		CLAMOPEN = 2636171774,
		CLAMSHELL_IDLE = 2305567501,
		CLAMSHELL_OPEN = 66118335,
		COLLECTABLE_RECEIVED = 3261528369,
		COMMS_CHATTER_FREIGHTER = 3756665911,
		COMMS_CHATTER_PIRATES_AMBIENT = 1216580404,
		COMMS_CHATTER_PIRATES_HIT = 2177676691,
		COMMS_CHATTER_POLICE = 3578259387,
		COMMS_CHATTER_POLICE_HIT = 1077964857,
		COMMS_CHATTER_STOP_ALL = 1346411037,
		COMMUNICATOR_CLOSE = 757927345,
		COMMUNICATOR_HAIL = 2069001373,
		COMMUNICATOR_OPEN = 1102444595,
		COMPUTER_TEXT = 791634652,
		COMPUTER_TEXT_STOP = 4263083179,
		COMPUTER_TEXT_TYPE = 684979843,
		COMPUTER_TEXT_TYPE_STOP = 3799116526,
		COOKER_CLOSE = 3730210249,
		COOKER_COOKING = 336188789,
		COOKER_END = 4193619414,
		COOKER_OPEN = 3338888091,
		CORETERMINAL_COLLECTDATA = 94949887,
		CORRUPTED_PILLAR = 4172114174,
		CORRUPTED_PILLAR_FR0 = 587914587,
		CORRUPTED_PILLAR_FR226 = 2342734269,
		CORRUPTEDQUAD_AMBIENT_TONE = 1194772446,
		CORRUPTEDQUAD_DIE = 2816694541,
		CORRUPTEDQUAD_EMOTE_LP = 2971412038,
		CORRUPTEDQUAD_EMOTE_LP_STOP = 2659100949,
		CORRUPTEDQUAD_EVADE = 3309700520,
		CORRUPTEDQUAD_POUNCE = 1980755735,
		CORRUPTEDQUAD_POUNCEBACK = 2710332710,
		CORRUPTEDQUAD_STUNNED = 1908209346,
		CORRUPTMONOLITH_BASE = 3996975076,
		CORRUPTMONOLITH_BURST = 3809413719,
		CORRUPTMONOLITH_CLOSE = 1655377173,
		CORRUPTMONOLITH_SPARK = 1534950826,
		COWATTACK1 = 4067424511,
		COWATTACK2 = 4067424508,
		COWATTACK2HIND = 4275645231,
		COWATTACK3 = 4067424509,
		COWATTACK3HIND = 2626429106,
		COWATTACKHIND = 781478521,
		COWFLOATHAPPY = 3196693770,
		COWFLOATSAD = 838550652,
		COWHAPPYHIND = 3566067199,
		COWHINDPERFORM01 = 3595464745,
		COWHINDROAR01 = 563603328,
		COWPERFORM01 = 2716157744,
		COWPOUNCE1 = 834708601,
		COWROAR = 3807503574,
		CRASHED_FREIGHTER = 2792539788,
		CRATE_WEAPON = 340488265,
		CRATE_WEAPON_CLOSE = 2060217696,
		CRATELOCKOPEN = 4158575759,
		CRATEM_OPEN = 3053640262,
		CREATURE_BITE = 2822601387,
		CREATURE_JUMPSWIPE = 3300279125,
		CREATURE_POOP = 1476152087,
		CREATURE_ROAR = 1491832973,
		CREATURE_STEP_BLOB = 2317876667,
		CREATURE_STEP_BLOB_WALK = 1887236481,
		CREATURE_STEPS = 711944018,
		CREATURE_SWIPE = 1685683705,
		CREATURE_VOCALS_SQUAWK_AGGRESSION = 1979032685,
		CREATURE_VOCALS_SQUAWK_ATTACK = 601203825,
		CREATURE_VOCALS_SQUAWK_DIE = 962565769,
		CREATURE_VOCALS_SQUAWK_FLEE = 250702265,
		CREATURE_VOCALS_SQUAWK_IDLE = 1842302347,
		CREATURE_VOCALS_SQUAWK_PAIN = 1820869333,
		CREATURE_VOCALS_SQUAWK_ROAR = 2161123877,
		CREATURE_VOCALS_SQUAWK_ROAR_ANGRY = 1341767535,
		CREATURE_VOCALS_SQUAWK_ROAR_HAPPY = 2455663178,
		CREATURE_VOCALS_SQUAWK_ROAR_NEUTRAL = 2833805173,
		CREATURE_VOCALS_SQUAWK_SNORE = 2382273050,
		CRT_BIRD_FLAP = 907775926,
		CRT_COW_WINGFLAP = 1805115425,
		CRT_GRUNT_WINGFLAPRUN = 129427747,
		CRT_GRUNT_WINGFLAPWALK = 507729407,
		CRYOCHAMBER = 3453217060,
		CRYOCHAMBER_CLOSE = 719106397,
		CRYSTAL_RARE_EXPLODE = 2692246182,
		CRYSTAL_RARE_LP = 2262673863,
		CRYSTALALTAR_COLLECT = 1142615968,
		CRYSTALALTAR_LOOP = 3807036732,
		CUSTOMISE_ACTIVATE = 3788299127,
		CUSTOMISE_END = 1934037667,
		CUSTOMISE_IDLE = 951310522,
		DEATH_DAMAGE = 1634760423,
		DEATH_DAMAGE_REBUILD = 807767091,
		DEATHMARKER_PULSE = 1475987097,
		DEATHMARKER_TRANSFORM = 106032502,
		DEATHSHOUT = 3953313476,
		DISCOVER_PLANET = 1914115581,
		DISCOVERY_UPLOADED = 4174773896,
		DOOR_BROKEN_SPARKS = 2772005240,
		DRAGONFLY = 3028993147,
		DRAGONFLY_BOOST_START = 3350056110,
		DRAGONFLY_BOOST_STOP = 226293902,
		DRAGONFLY_HORN_START = 201771252,
		DRAGONFLY_HORN_STOP = 3311233384,
		DRAGONFLY_IDLE_EXTERIOR = 2179160221,
		DRAGONFLY_IMPACTS = 2777340995,
		DRAGONFLY_JUMP = 3497672358,
		DRAGONFLY_START = 3980929494,
		DRAGONFLY_STOP = 3027774934,
		DRAGONFLY_SUSPENSION = 1862605769,
		DRILL_IN = 2280057738,
		DRILL_LP = 2229725019,
		DRILL_LP_STOP = 1512357622,
		DRILL_OUT = 2508224485,
		DRONE_ALERT = 2055526214,
		DRONE_ARMOURED_BRACE = 1518199151,
		DRONE_ARMOURED_UNBRACE = 3596431812,
		DRONE_ATTACK = 592387840,
		DRONE_ATTACK_STOP = 2796584751,
		DRONE_DEBRIS = 1020089297,
		DRONE_DIE = 1999325246,
		DRONE_EMOTE_LP = 3590180063,
		DRONE_EMOTE_LP_STOP = 3164382570,
		DRONE_EMOTE_ONESHOT = 109641857,
		DRONE_ENGINE = 2131109290,
		DRONE_ENGINE_CORRUPTED = 2715012487,
		DRONE_FRIENDLY_COMBAT = 3791091580,
		DRONE_FRIENDLY_COMBAT_STOP = 2054085643,
		DRONE_FRIENDLY_DEVICE_OFF = 3998648232,
		DRONE_FRIENDLY_DEVICE_ON = 2986275250,
		DRONE_FRIENDLY_SUMMONED = 1073667706,
		DRONE_FRIENDLY_UNSUMMONED = 3281142011,
		DRONE_FRIENDLY_WANTED = 812141993,
		DRONE_FRIENDLY_WANTED_END = 2737261387,
		DRONE_INVESTIGATING = 461618248,
		DRONE_LASER = 2650146373,
		DRONE_MEDIC_ATTACK = 258673257,
		DRONE_MEDIC_DISENGAGE = 1173673882,
		DRONE_MEDIC_ENGAGE = 685642744,
		DRONE_MEDIC_FIX = 3057298250,
		DRONE_MEDIC_IDLE = 1569175891,
		DRONE_RECHARGE = 181141787,
		DRONE_SCAN_START = 3571083530,
		DRONE_SCAN_STOP = 1091261538,
		DRONE_SEARCHING = 1858415680,
		DRONE_SHIELD_ACTIVATE = 892400501,
		DRONE_SHIELD_DEACTIVATE = 2864522852,
		DRONE_SHIELD_GLITCH = 2413934129,
		DRONE_SUMMONER_ALARM = 4056835042,
		DRONE_SUMMONER_SIGNAL = 3866942231,
		DRONE_SUMMONER_UNSIGNAL = 1487857538,
		DRONE_SUSPICIOUS = 3066956501,
		E3_ZOOMIN = 3187868944,
		E3_ZOOMOUT = 365355383,
		EGG_MACHINE_AMBIENT_LP = 2078783418,
		EGG_MACHINE_CLOSE = 1798922135,
		EGG_MACHINE_COOK = 3132627921,
		EGG_MACHINE_FINISH = 3585087032,
		EGG_MACHINE_OPEN = 2506054497,
		EGG_MACHINE_START = 2534802791,
		EGGOPENS = 2421737719,
		EGGRESOURCE_COLLECT = 1564787531,
		ENGINEREACTOR_OFF_IDLE = 4079097354,
		EQUIP_DAMAGED = 4117517243,
		EXOCRAFT_SUMMONING_STATION = 703529186,
		EXPL_DEPOT = 349257017,
		EXPL_ELECTRICAL_STUN = 3470665538,
		EXPL_ELECTRICAL_STUN_STOP = 1353451713,
		EXPL_FIREWORK = 209237086,
		EXPL_FIREWORK_LAUNCH = 540557536,
		EXPL_FIREWORK_LAUNCH_SLIME = 58672657,
		EXPL_FIREWORK_SLIME = 3630781871,
		EXPL_FIREWORK_TAIL = 2941531479,
		EXPL_FIREWORK_TAIL_SLIME = 1717942922,
		EXPL_FREIGHTER = 952311831,
		EXPL_FREIGHTER_BUILDUP = 3440011769,
		EXPL_FREIGHTER_CONTAINER_LARGE = 2565077707,
		EXPL_FREIGHTER_CONTAINER_SMALL = 2396497463,
		EXPL_FREIGHTER_ONE_SHOTS = 965308984,
		EXPL_FREIGHTER_ROD = 4262844757,
		EXPL_NEWSTARSYSTEM = 3563599418,
		EXPL_ROCK = 3050083982,
		EXPL_SHIELD_GENERATOR = 2795877332,
		EXPL_SHIP_SMALL = 755532987,
		EXPL_SHIPS_LARGE = 3143410778,
		EXPL_SHIPS_MED = 1636690473,
		EXPL_SHIPS_SMALL = 3101275974,
		EXPL_SMALL_SPACE_GENERIC = 3353181699,
		EXPL_SPACE_MEMORYBOAT = 3338824747,
		EXPL_TORPEDO = 1969561330,
		EXPLODINGBARREL = 2813215145,
		EXPLORERANGRYIPAD = 2981959467,
		EXPLORERCHATTER = 3787776123,
		EXPLORERHAPPYIPAD = 3347474830,
		EXPLORERHAPPYIPAD2 = 2794990264,
		EXPLORERHAPPYIPAD3 = 2794990265,
		EXPLORERIPADGREET = 3225378119,
		EXPLORERIPADGREET2 = 3938440951,
		EXPLORERIPADGREET3 = 3938440950,
		EXPLORERIPADGREET4 = 3938440945,
		EXPLORERNEUTRALIPAD = 2276336817,
		EXPLOSION_RESOURCE_GATHER = 1113666341,
		EYESTALK = 867129537,
		FEEDERDISPENSE = 1915160809,
		FIBREGLASS_DOOR1_SETTLEMENT_CLOSE = 27344640,
		FIBREGLASS_DOOR1_SETTLEMENT_OPEN = 1255863092,
		FIBREGLASS_DOOR2_SETTLEMENT_CLOSE = 2416244317,
		FIBREGLASS_DOOR2_SETTLEMENT_OPEN = 1310720887,
		FIEND_ATTACK = 1321023120,
		FIEND_BURY = 2805110636,
		FIEND_DIE = 92269166,
		FIEND_GROUNDAPPEAR = 2587993966,
		FIEND_GROUNDEFFECT = 3893798086,
		FIEND_IDLE = 2475891066,
		FIEND_POUNCE = 1958430642,
		FIEND_ROAR = 2241239504,
		FIEND_SPIT = 4198153334,
		FIREPLACE_LP = 1235193281,
		FIRESTORM = 675401316,
		FIRESTORM_STOP = 923373187,
		FISHCAUGHT = 1360909815,
		FISHFIEND_DIE = 1854084912,
		FISHFIEND_EAT = 1518679556,
		FISHFIEND_SPAWN = 473811295,
		FISHING_PLATFORM_LP = 188562228,
		FISHING_PLATFORM_OPEN = 260154296,
		FISHSPARKLE = 720869351,
		FISHSTRUGGLE = 2578762934,
		FLOATING_GASBAG_EXPLODE = 1569840055,
		FLOATINGFERN = 588457764,
		FLOATNIBBLE = 57112251,
		FLOATRIPPLE = 2986464699,
		FLOATSPLASH = 3796193508,
		FOLEY_STOP_ALL = 2930145345,
		FOOT_LOCKER_OPEN = 2937236815,
		FOOTSTEP = 1866025847,
		FOOTSTEP_FALLLAND = 4289240962,
		FORFANGRY01 = 1100757146,
		FORFCHATTER01 = 3835121742,
		FORFGREET01 = 2570377158,
		FORFHAPPY01 = 4245599,
		FOSSIL_COLLECT = 3241914726,
		FOURTHRACE_APOLLO_ANGRY00 = 2888197550,
		FOURTHRACE_APOLLO_CHATTER00 = 1934909318,
		FOURTHRACE_APOLLO_GREET00 = 3998886434,
		FOURTHRACE_APOLLO_GREET01 = 3998886435,
		FOURTHRACE_APOLLO_GREET02 = 3998886432,
		FOURTHRACE_APOLLO_GREET03 = 3998886433,
		FOURTHRACE_APOLLO_GREET04 = 3998886438,
		FOURTHRACE_APOLLO_HAPPY00 = 3511603975,
		FOURTHRACE_APOLLO_HAPPY01 = 3511603974,
		FOURTHRACE_APOLLO_HAPPY02 = 3511603973,
		FOURTHRACE_APOLLO_IDLE00 = 1953921021,
		FOURTHRACE_ARTEMIS_ANGRY00 = 514172700,
		FOURTHRACE_ARTEMIS_CHATTER00 = 509048624,
		FOURTHRACE_ARTEMIS_GREET00 = 363480308,
		FOURTHRACE_ARTEMIS_GREET01 = 363480309,
		FOURTHRACE_ARTEMIS_GREET02 = 363480310,
		FOURTHRACE_ARTEMIS_GREET03 = 363480311,
		FOURTHRACE_ARTEMIS_GREET04 = 363480304,
		FOURTHRACE_ARTEMIS_HAPPY00 = 1938366649,
		FOURTHRACE_ARTEMIS_HAPPY01 = 1938366648,
		FOURTHRACE_ARTEMIS_HAPPY02 = 1938366651,
		FOURTHRACE_ARTEMIS_IDLE00 = 2490081971,
		FOURTHRACE_NULL_ANGRY00 = 2903957936,
		FOURTHRACE_NULL_CHATTER00 = 3569598604,
		FOURTHRACE_NULL_GREET00 = 2517343080,
		FOURTHRACE_NULL_GREET01 = 2517343081,
		FOURTHRACE_NULL_GREET02 = 2517343082,
		FOURTHRACE_NULL_GREET03 = 2517343083,
		FOURTHRACE_NULL_GREET04 = 2517343084,
		FOURTHRACE_NULL_HAPPY00 = 3181214893,
		FOURTHRACE_NULL_HAPPY01 = 3181214892,
		FOURTHRACE_NULL_HAPPY02 = 3181214895,
		FOURTHRACE_NULL_IDLE00 = 3316901463,
		FOURTHRACE_PROC_ANGRY00 = 2795243455,
		FOURTHRACE_PROC_CHATTER00 = 1605418795,
		FOURTHRACE_PROC_GREET00 = 1243244491,
		FOURTHRACE_PROC_GREET01 = 1243244490,
		FOURTHRACE_PROC_GREET02 = 1243244489,
		FOURTHRACE_PROC_GREET03 = 1243244488,
		FOURTHRACE_PROC_GREET04 = 1243244495,
		FOURTHRACE_PROC_HAPPY00 = 1946340818,
		FOURTHRACE_PROC_HAPPY01 = 1946340819,
		FOURTHRACE_PROC_HAPPY02 = 1946340816,
		FOURTHRACE_PROC_IDLE00 = 362011646,
		FRACTALCUBE = 3069279419,
		FREIGHTER_ALARM = 284312429,
		FREIGHTER_ALARM_START = 722568716,
		FREIGHTER_BRIDGE = 2380244041,
		FREIGHTER_CALL = 3123437914,
		FREIGHTER_CORRIDOR = 2097288684,
		FREIGHTER_DOOR_INTERNAL_CLOSE = 4199127191,
		FREIGHTER_DOOR_INTERNAL_OPEN = 1062592097,
		FREIGHTER_DOOR_REINFORCED_CLOSE = 1306907177,
		FREIGHTER_DOOR_REINFORCED_OPEN = 382083451,
		FREIGHTER_DRONE = 2760474932,
		FREIGHTER_ELEVATOR = 489088848,
		FREIGHTER_HANGAR = 3278121963,
		FREIGHTER_HANGARDOOR_CLOSE = 2846845302,
		FREIGHTER_HANGARDOOR_OPEN = 4130373410,
		FREIGHTER_LOWSHIELD_ALARM = 4013381861,
		FREIGHTER_REFINER_ROOM = 2183233433,
		FREIGHTER_REFINER_RUNNING = 584112333,
		FREIGHTER_SHIELD_LP = 281067852,
		FREIGHTER_SHIELD_LP_STOP = 2381396731,
		FREIGHTER_SHIELD_ONESHOT = 51835396,
		FREIGHTER_STELLAREXTRACTOR = 92303359,
		FREIGHTER_STORAGE_TERMINAL = 1360884328,
		FREIGHTER_TELEPORT = 3705218111,
		FREIGHTER_TELEPORTER = 3453226538,
		FRIGATE_LIVING_DEVOUR = 504452073,
		FRIGATE_LIVING_REVEAL = 1078315443,
		FRIGATE_LIVING_TALK = 31778742,
		FRIGATE_LIVING_WARPIN = 425072055,
		GAS_BASTARD_POP = 1051272552,
		GEMCRYSTAL_COLLECT = 2890792835,
		GLITCHY_MONITOR = 503621724,
		GRABBYPLANT_ATTACK_END = 1749990328,
		GRABBYPLANT_ATTACK_LP = 279061285,
		GRABBYPLANT_DIE = 3623548220,
		GRAV_BALLS = 3341431912,
		GRAV_BALLS_STOP = 2920453447,
		GROUND_SIZZLE = 1467871242,
		GROUND_SIZZLE_STOP = 464280121,
		GROUNDWORM_CLOSE = 1836038144,
		GROUNDWORM_KILL = 3393815172,
		GROUNDWORM_OPEN = 620901940,
		GRUNTATTACK2 = 3733618017,
		GRUNTATTACK3 = 3733618016,
		GRUNTFLOATHAPPY = 4290629701,
		GRUNTFLOATSLEEP = 2664502518,
		GRUNTPOUNCE = 191267115,
		GRUNTROAR = 2357944437,
		HARRYTEST = 3510517901,
		HAZ_CRIT_COLD = 1276438582,
		HAZ_CRIT_HEAT = 2860017406,
		HAZ_CRIT_O2 = 3181938407,
		HAZ_CRIT_RAD = 1479268681,
		HAZ_CRIT_RAD_FALLING = 1866008241,
		HAZ_CRIT_RAD_STABLE = 2908898829,
		HAZ_CRIT_SHIELD = 1178838907,
		HAZ_CRIT_SHIELD_FALLING = 275059059,
		HAZ_CRIT_SHIELD_STABLE = 659288159,
		HAZ_CRIT_THERM_FALLING = 4128053670,
		HAZ_CRIT_TOXIC = 2733524485,
		HAZ_CRIT_TOXIC_FALLING = 3340557645,
		HAZ_CRIT_TOXIC_STABLE = 1437305169,
		HAZARDPLANT_CLOSE = 2350082741,
		HAZARDPLANT_IDLE = 2850491053,
		HAZARDPLANT_OPEN = 611145055,
		HAZARDPLANT_OPENIDLE = 2466822905,
		HEATER_OFF = 3581645832,
		HEATER_ON = 1313347218,
		HEXAGON = 107856943,
		HOLOHUB_END = 3481540492,
		HOLOHUB_LADDER_END = 925613463,
		HOLOHUB_LADDER_START = 4017144196,
		HOLOHUB_START = 3591292911,
		HOVERCRAFT_BOOST_START = 4044751388,
		HOVERCRAFT_BOOST_STOP = 3260481264,
		HOVERCRAFT_HORN_START = 2776795426,
		HOVERCRAFT_HORN_STOP = 1860965658,
		HOVERCRAFT_IDLE_EXTERIOR = 691817511,
		HOVERCRAFT_IMPACTS = 4130874493,
		HOVERCRAFT_JUMP = 1629454712,
		HOVERCRAFT_START = 414245808,
		HOVERCRAFT_STOP = 1225387548,
		HOVERCRAFT_SUSPENSION = 648046031,
		HUD_JUMP_ENGAGE = 986240791,
		HUD_JUMPING = 69438469,
		IDENTIFY_SCAN_OFF = 2387818357,
		IDENTIFY_SCAN_ON = 3315033225,
		IMPACT_CREATURE_SQUISH = 2903807147,
		IMPACTS_GROUND_GENERIC_SMALL = 2019205434,
		INTERACT_COLLECT = 766530384,
		INTERACTION_CARGOBAY = 559147438,
		INTERACTION_CARGOBAYSTUCK = 2205427274,
		INTERACTION_CARGOCONTLOAD = 4015136470,
		INTERACTION_ENGINEREACTOR = 307622734,
		INTERACTION_MAINTPOINT = 4267244527,
		INTERACTION_TURRETSHELLS = 2834891617,
		INTERACTION_TURRETTURN = 3675638357,
		INTERACTIVECASE_OPEN = 3894284866,
		JELLYFISH_DIE = 2365800878,
		JELLYFISH_SPAWN = 1291269561,
		JELLYFISH_SWIM = 1844848624,
		JELLYFISHBOSS_APPEAR = 1261478350,
		JELLYFISHBOSS_ORBATTACK = 623681040,
		JELLYFISHBOSS_SWIM = 4045770389,
		JETPACK_BOOST_PICKUP = 375575720,
		JETPACK_BOOST_START = 1508816120,
		JETPACK_BOOST_STOP = 3872165892,
		JETPACK_BOOST_TIMEOUT = 1027507557,
		JETPACK_DEPLETED = 70853637,
		JETPACK_START = 3208028412,
		JETPACK_STOP = 899103824,
		JETPACK_WATER_TRANSITION_INTO_ATMOS = 1052751609,
		JETPACK_WATER_TRANSITION_INTO_WATER = 549373334,
		KEYCONTAINER = 4095839047,
		LANDING_PLATFORM_CLOSE = 2236028909,
		LANDING_PLATFORM_OPEN = 2023300135,
		LANDINGBAY_ACTIVATE = 941009430,
		LANDINGBAY_DEACTIVATE = 2235131831,
		LANDSQUID_APPEAR = 1011705184,
		LANDSQUID_DISAPPEAR = 731110914,
		LANDSQUID_KAMIKAZE = 4275880726,
		LANDSQUID_KAMIKAZE_STOP = 1589074501,
		LANDSQUID_KILL = 847100111,
		LANDSQUID_SPIT = 1710430429,
		LANDSQUID_SWIM = 1709591771,
		LANTERNCLOSE = 2156834357,
		LANTERNOPEN = 2331849695,
		LAVA_VOLCANO_AMBIENT = 1292840173,
		LAVA_VOLCANO_ERUPT = 3776022315,
		LAVA_VOLCANO_EXPLODE = 2192977534,
		LIGHTNING = 3334464137,
		LOCKER_OPEN = 811376648,
		LOWERORDERANGRYIPAD = 2813675567,
		LOWERORDERCHATTERIPAD = 1046507451,
		LOWERORDERGREET1IPAD = 413175152,
		LOWERORDERGREET2IPAD = 2953539971,
		LOWERORDERGREET3IPAD = 3579432354,
		LOWERORDERGREET4IPAD = 1325477477,
		LOWERORDERGREET5IPAD = 963005508,
		LOWERORDERHAPPY2IPAD = 843951668,
		LOWERORDERHAPPY3IPAD = 3439259093,
		LOWERORDERHAPPY4IPAD = 2471911250,
		LOWERORDERHAPPYIPAD = 2236075986,
		MAINTENANCE_BROKEN = 15656046,
		MANTARAY_ATTACK = 1961811905,
		MANTARAY_FASTSWIM = 4126223247,
		MANTARAY_SWIM = 4176963809,
		MAP_STAR_WOOSH = 3162157229,
		MAP_WAYPOINT_TONE_LP = 3444335899,
		MECH_EXIT = 3167056125,
		MECH_IDLE = 3137477943,
		MECH_JETPACK_LANDING = 1376545177,
		MECH_JETPACK_LANDING_INTRO = 2978160650,
		MECH_JETPACK_LANDING_SKID = 403343781,
		MECH_JETPACK_LP = 3729982900,
		MECH_JETPACK_LP_END = 2801593130,
		MECH_JETPACK_RETRIGGER = 1994443637,
		MECH_JETPACK_STARTUP = 23864475,
		MECH_JETPACK_TRIGGER = 217569044,
		MECH_MOVE_RUN = 3620021148,
		MECH_MOVE_WALK = 2473316010,
		MECH_SENTINEL_STEP_RUN = 8769932,
		MECH_SENTINEL_STEP_WALK = 2828199962,
		MECH_STEP_RUN = 3758679757,
		MECH_STEP_WALK = 1432958557,
		MECH_STONE_STEP_RUN = 3121287963,
		MECH_STONE_STEP_WALK = 2923978487,
		MESSAGEMODULE_IDLE = 1949597471,
		MESSAGEMODULE_START = 2527827351,
		METALFORMATION_COLLECT = 790946364,
		METEORITE_EXPLODE = 3628527645,
		METEORITE_INCOMING = 3485432110,
		MILK_BOTTLING = 1158791598,
		MILK_PUMPING = 2277869711,
		MINIDRONE_ACTIVE = 2668890899,
		MINIDRONE_IDLE = 2790384423,
		MINIDRONE_SHOOT = 3785627830,
		MINIWORM_BURSTOUT = 274707258,
		MINIWORM_DEATH = 697752394,
		MINIWORM_IDLE = 2352728546,
		MINIWORM_LUNGE = 2971229129,
		MINIWORM_LURKING = 1924109804,
		MINIWORM_RETRACT = 2548776003,
		MINIWORM_ROAR = 2699711464,
		MOLE = 3178980848,
		MONOLITH_BEAM_START = 571963192,
		MONOLITH_INTERACTIONPLATFORM_START = 835980732,
		MONUMENT = 2595720378,
		MOTION_PS5_01 = 328897772,
		MOTION_PS5_STOP = 3974206461,
		MSTRUCTURE = 48522517,
		MUS_AMBIENT_MODE = 3946584727,
		MUS_AMBIENT_MODE_STOP = 2955514930,
		MUS_ATLASSTATION = 3536389074,
		MUS_COMMUNITYRESEARCH = 3293233043,
		MUS_CORRUPTED_LP = 2633597366,
		MUS_CORRUPTED_LP_STOP_FAST = 640712538,
		MUS_CORRUPTED_LP_STOP_SLOW = 3118164007,
		MUS_CORRUPTED_MUSICCUE = 2714381840,
		MUS_CORRUPTED_STING_LONG = 2307234050,
		MUS_ENCLAVE_DISCOVER = 4232840109,
		MUS_ENDING = 873791384,
		MUS_EXPEDITION_START = 1760008293,
		MUS_FIRSTTIMESPACESTATION = 474446100,
		MUS_FIRSTTIMEWARP = 34608572,
		MUS_FISHING = 1771682885,
		MUS_FISHING_STOP = 2134142408,
		MUS_GAMESTART = 1849779297,
		MUS_GAMESTART_LUSHWALK = 3830983247,
		MUS_GAMESTART_LUSHWALK_STOP = 1474007162,
		MUS_GAMESTART_STOP = 736660580,
		MUS_LEVEL_UP = 3686365187,
		MUS_LOADING01 = 1487083614,
		MUS_LOADING02 = 1487083613,
		MUS_LOADING03 = 1487083612,
		MUS_LOADING04 = 1487083611,
		MUS_LOADING05 = 1487083610,
		MUS_LOADING06 = 1487083609,
		MUS_LOADING07 = 1487083608,
		MUS_LOADING08 = 1487083607,
		MUS_LOADING09 = 1487083606,
		MUS_LOADING10 = 1470306028,
		MUS_LOADING11 = 1470306029,
		MUS_LOADING12 = 1470306030,
		MUS_LOADING13 = 1470306031,
		MUS_LOADING14 = 1470306024,
		MUS_LOADING15 = 1470306025,
		MUS_LOADING16 = 1470306026,
		MUS_LOADING17 = 1470306027,
		MUS_LOADING18 = 1470306020,
		MUS_LOADING19 = 1470306021,
		MUS_LOADING20 = 1520638885,
		MUS_LOADING21 = 1520638884,
		MUS_LOADING22 = 1520638887,
		MUS_LOADING23 = 1520638886,
		MUS_LOADING24 = 1520638881,
		MUS_LOADING25 = 1520638880,
		MUS_LOADING26 = 1520638883,
		MUS_LOADING27 = 1520638882,
		MUS_LOADING28 = 1520638893,
		MUS_LOADING29 = 1520638892,
		MUS_LOADING30 = 1503861298,
		MUS_LOADING31 = 1503861299,
		MUS_LOADING32 = 1503861296,
		MUS_LOADING33 = 1503861297,
		MUS_LOADING34 = 1503861302,
		MUS_LOADING35 = 1503861303,
		MUS_LOADING36 = 1503861300,
		MUS_LOADING37 = 1503861301,
		MUS_LOADING38 = 1503861306,
		MUS_LOADING39 = 1503861307,
		MUS_LOADING40 = 1419973139,
		MUS_LOADING41 = 1419973138,
		MUS_LOADING42 = 1419973137,
		MUS_LOADING43 = 1419973136,
		MUS_LOADING44 = 1419973143,
		MUS_LOADING45 = 1419973142,
		MUS_LOADING46 = 1419973141,
		MUS_LOADING47 = 1419973140,
		MUS_LOADING48 = 1419973147,
		MUS_LOADING49 = 1419973146,
		MUS_LOADING50 = 1403195552,
		MUS_LOADING51 = 1403195553,
		MUS_LOADING52 = 1403195554,
		MUS_LOADING_STOP = 512165634,
		MUS_MILESTONE_COMPLETE = 3512432505,
		MUS_MILESTONE_REWARDS = 1925711792,
		MUS_MONOLITH = 416655437,
		MUS_MONOLITH_STOP = 302934592,
		MUS_ONE_SINGLE_STAR = 2009001049,
		MUS_RECURSIVE_SIMULATION = 3854664283,
		MUS_SPACEVIRGIN = 777096854,
		MUS_STATUS_UPDATE = 2660192621,
		MUS_STORYMODE_MUSICCUE_01 = 3240878588,
		MUS_STORYMODE_MUSICCUE_02 = 3240878591,
		MUS_STORYMODE_MUSICCUE_03 = 3240878590,
		MUS_STORYMODE_MUSICCUE_04 = 3240878585,
		MUS_STORYMODE_MUSICCUE_05 = 3240878584,
		MUS_STORYMODE_MUSICCUE_06_LP = 3276141938,
		MUS_STORYMODE_MUSICCUE_06_LP_STOP = 938098129,
		MUS_STORYMODE_MUSICCUE_07 = 3240878586,
		MUS_STORYMODE_MUSICCUE_08_LP = 832075396,
		MUS_STORYMODE_MUSICCUE_08_LP_STOP = 1329638883,
		MUS_STORYMODE_MUSICCUE_09 = 3240878580,
		MUS_STORYMODE_MUSICCUE_10_LP = 232039165,
		MUS_STORYMODE_MUSICCUE_10_LP_STOP = 564448080,
		MUS_STORYMODE_MUSICCUE_11_LP = 1472125922,
		MUS_STORYMODE_MUSICCUE_11_LP_STOP = 142497,
		MUS_STORYMODE_MUSICCUE_12_LP = 270829563,
		MUS_STORYMODE_MUSICCUE_12_LP_STOP = 2823854166,
		MUS_STORYMODE_MUSICCUE_13_LP = 2605472160,
		MUS_STORYMODE_MUSICCUE_13_LP_STOP = 3050094479,
		MUS_STORYMODE_MUSICCUE_14 = 3224100878,
		MUS_STORYMODE_MUSICCUE_15 = 3224100879,
		MUS_STORYMODE_MUSICCUE_16 = 3224100876,
		MUS_STORYMODE_MUSICCUE_17 = 3224100877,
		MUS_STORYMODE_MUSICCUE_18 = 3224100866,
		MUS_STORYMODE_MUSICCUE_19 = 3224100867,
		MUS_STORYMODE_MUSICCUE_20 = 3207323287,
		MUS_STORYMODE_MUSICCUE_21 = 3207323286,
		MUS_STORYMODE_MUSICCUE_22_LP = 284882276,
		MUS_STORYMODE_MUSICCUE_22_LP_STOP = 1189299075,
		MUS_STORYMODE_MUSICCUE_23 = 3207323284,
		MUS_STORYMODE_MUSICCUE_24 = 3207323283,
		MUS_STORYMODE_MUSICCUE_25 = 3207323282,
		MUS_STORYMODE_MUSICCUE_26 = 3207323281,
		MUS_STORYMODE_MUSICCUE_27 = 3207323280,
		MUS_STORYMODE_MUSICCUE_28 = 3207323295,
		MUS_STORYMODE_MUSICCUE_29 = 3207323294,
		MUS_STORYMODE_MUSICCUE_30 = 3190545700,
		MUS_STORYMODE_MUSICCUE_31 = 3190545701,
		MUS_STORYMODE_MUSICCUE_32 = 3190545702,
		MUS_STORYMODE_MUSICCUE_33 = 3190545703,
		MUS_STORYMODE_STOPALL = 1427757253,
		MUS_THE_APPEARANCE_OF_A_STAR_SYSTEM = 1590140060,
		MUS_UNKNOWN_SYSTEM_X349866 = 104320216,
		MUS_XBOX_SPLASHSCREEN = 2578439328,
		MUS_XBOX_SPLASHSCREEN_STOP = 2314111119,
		NADA_CHATTER_11 = 4156251126,
		NADA_CHATTER_12 = 4156251125,
		NADA_CHATTER_13 = 4156251124,
		NADA_GREET_08 = 2107413004,
		NADA_GREET_09 = 2107413005,
		NEW_TECH = 3402123552,
		NEW_WEAPON = 3824850844,
		NEXUS_BRIDGEENGINE_IDLE = 2954515553,
		NEXUS_BUBBLINGTUBE_SMALL = 1230965380,
		NEXUS_CONTROLROOM_CENTRE = 3655889897,
		NEXUS_CONTROLROOM_HOLOGRAM = 2985364941,
		NEXUS_COOKINGFOOD = 1781334879,
		NEXUS_EXTERIORLEG = 2734286413,
		NEXUS_FUELPUMP = 3377038431,
		NEXUS_LANDING_RINGS = 1918321330,
		NEXUS_MARKETDOOR_CLOSE = 2569414916,
		NEXUS_MARKETDOOR_OPEN = 2167432704,
		NEXUS_MIDDLEDRONE_IDLE = 799164121,
		NEXUS_PLANTGROWBOX = 122227492,
		NEXUS_ROBOARM_MOVE1 = 580678156,
		NEXUS_ROBOARM_MOVE1_REV = 567275794,
		NEXUS_ROTATINGSIGN = 2103081834,
		NEXUS_SMALLDRONE_FRAME0 = 791204106,
		NEXUS_SMALLDRONE_FRAME192 = 645078922,
		NEXUS_SMALLDRONE_FRAME289 = 2775292121,
		NEXUS_SMALLDRONE_FRAME512 = 3061644534,
		NEXUS_SMALLDRONE_FRAME640 = 561337920,
		NEXUS_SMALLDRONE_FRAME879 = 2757528826,
		NEXUS_SMALLDRONE_LP = 1824599151,
		NEXUS_TELEPORTER = 2913667825,
		NEXUS_VENT = 608215292,
		NEXUS_WALLFAN = 530739072,
		NORMANDY_BEACON = 3432013262,
		NOTIFY_ADDITIONALRESOURCES = 4102423381,
		NOTIFY_AREANOTCLEAR = 19506176,
		NOTIFY_ASSISTANT = 1141325151,
		NOTIFY_ATTACKSHIPSENGAGED = 2548397185,
		NOTIFY_BASEOUTRANGE = 3260384977,
		NOTIFY_BASEOUTRANGE_RETURN = 2643024558,
		NOTIFY_BUILDLIMIT = 2244547084,
		NOTIFY_CIVILIANFREIGHTER_DESTROYED = 1977013082,
		NOTIFY_CRITIAL_ENERGY = 2943062140,
		NOTIFY_CRITIAL_HIT = 3034335991,
		NOTIFY_CRITICAL_COLD = 892660151,
		NOTIFY_CRITICAL_HEAT = 4003460323,
		NOTIFY_CRITICAL_NOOXYGEN = 4145593944,
		NOTIFY_CRITICAL_RAD = 1721024114,
		NOTIFY_CRITICAL_TOXIC = 3893114722,
		NOTIFY_DAMAGESUSTAINED = 1891803194,
		NOTIFY_DAMAGEVEHICLE = 2370641510,
		NOTIFY_DAMAGEVEHICLESUSTAINED = 446681206,
		NOTIFY_ENERGY_PERCENT = 3838732551,
		NOTIFY_EXTERNALVIEW = 2956756207,
		NOTIFY_EXTREMEHAZARDPLANET = 4097271277,
		NOTIFY_EXTREMESENTINELPLANET = 2211008373,
		NOTIFY_FREIGHTERACQUIRED = 1606633491,
		NOTIFY_FREIGHTERWARP = 2197622737,
		NOTIFY_FUELDEPLETED = 4012900596,
		NOTIFY_FUELREQUIRED = 3902292714,
		NOTIFY_GAS_PLANT = 973468374,
		NOTIFY_HAZ_CAVE_COLD = 4078635131,
		NOTIFY_HAZ_CAVE_HEAT = 3299690607,
		NOTIFY_HAZ_CAVE_RADIATION = 4052699366,
		NOTIFY_HAZ_CAVE_TOXIC = 3337728422,
		NOTIFY_HAZ_CRIT_COLD = 3185782198,
		NOTIFY_HAZ_CRIT_HEAT = 474393726,
		NOTIFY_HAZ_CRIT_RADIATION = 484434477,
		NOTIFY_HAZ_CRIT_TOXIC = 1252372101,
		NOTIFY_HAZ_NIGHT_COLD = 3649334222,
		NOTIFY_HAZ_NIGHT_HEAT = 4155971206,
		NOTIFY_HAZ_NIGHT_RADIATION = 2430961461,
		NOTIFY_HAZ_NIGHT_TOXIC = 1900849373,
		NOTIFY_HAZ_TEMP_STABLE = 3043790127,
		NOTIFY_HAZ_WATER_COLD = 2178840095,
		NOTIFY_HAZ_WATER_HEAT = 1539850459,
		NOTIFY_HAZ_WATER_TOXIC = 1853471466,
		NOTIFY_HIT_COLD = 3549052141,
		NOTIFY_HIT_ENERGY = 2258430031,
		NOTIFY_HIT_HEAT = 3912212713,
		NOTIFY_HIT_RAD = 392980480,
		NOTIFY_HIT_TOXIC = 2606967900,
		NOTIFY_HOMEPLANET = 2756406194,
		NOTIFY_HOMEPLANETESTABLISHED = 1686813932,
		NOTIFY_HOSTILES = 435489312,
		NOTIFY_HOSTILES_DEFEATED = 1485219709,
		NOTIFY_HOSTILESYSTEM = 3859685630,
		NOTIFY_HOSTILESYSTEMENGAGE = 1096934455,
		NOTIFY_HOSTILESYSTEMWEAPONS = 3809709865,
		NOTIFY_HOT_ROCK = 539140398,
		NOTIFY_INSUFFICIENTRESOURCES = 2278382747,
		NOTIFY_INTERNALVIEW = 3852809789,
		NOTIFY_INV_TRANSFERRED = 4112096461,
		NOTIFY_INVENTORY_SHIP_FULL = 2146088396,
		NOTIFY_INVENTORY_SUIT_FULL = 1470641535,
		NOTIFY_ITEM_RECEIVED = 1689829510,
		NOTIFY_LANDING = 38032730,
		NOTIFY_LANDINGSEQUENCE = 4162222341,
		NOTIFY_LIFESUPPORTFALLING = 2980670373,
		NOTIFY_LOW_ENERGY = 2439887260,
		NOTIFY_MISSILEDESTROYED = 3197905056,
		NOTIFY_MISSILEENEMY = 3231723941,
		NOTIFY_MISSILEENEMYINBOUND = 3486162444,
		NOTIFY_MISSILEINBOUND = 2323987462,
		NOTIFY_MISSILEINCOMING = 293295311,
		NOTIFY_MISSILEINCOMINGDESTROYED = 3652987612,
		NOTIFY_MISSILEINCOMINGNEUTRALISED = 2416665171,
		NOTIFY_MISSILELOCKED = 2998336757,
		NOTIFY_MISSILENEUTRALISED = 2984675695,
		NOTIFY_MISSILEREADY = 40912920,
		NOTIFY_MISSILESDESTROYED = 4272024371,
		NOTIFY_MISSILESINCOMINGDESTROYED = 2017771139,
		NOTIFY_MISSILESINCOMINGNEUTRALISED = 811372744,
		NOTIFY_MISSILESNEUTRALISED = 667949112,
		NOTIFY_NEW_SHIP = 1312806878,
		NOTIFY_NEW_SLOT = 1346950468,
		NOTIFY_NEW_SYSTEM = 3943299355,
		NOTIFY_NEW_WEAPON = 4191451164,
		NOTIFY_NEWASSISTANT = 2826929951,
		NOTIFY_NEWASSISTANTACQUIRED = 3837139263,
		NOTIFY_NEWBOUNTY = 785605828,
		NOTIFY_NEWFREIGHTERACQUIRED = 2302920659,
		NOTIFY_OBJECTIVE_COMPLETE = 3145604772,
		NOTIFY_PIRATEENGINES = 4058169279,
		NOTIFY_PIRATESLARGE = 2368868150,
		NOTIFY_PIRATESSPOTTED = 419444632,
		NOTIFY_PRO_OFFLINE = 1575856134,
		NOTIFY_PRO_PERCENT = 426122696,
		NOTIFY_PRODUCT_RECEIVED = 917892820,
		NOTIFY_PULSE = 4255502616,
		NOTIFY_PULSEOFFATMOS = 713762635,
		NOTIFY_PULSEOFFFUEL = 2949320551,
		NOTIFY_PULSEOFFLARGESHIP = 1659178466,
		NOTIFY_PULSEOFFLOCAL = 3291134448,
		NOTIFY_PULSEOFFPLANET = 620537849,
		NOTIFY_PULSEOFFSTATION = 3488717209,
		NOTIFY_RADLEAK_DAMAGE = 982683537,
		NOTIFY_RADPRO_OFFLINE = 107759759,
		NOTIFY_REFUELVEHICLE = 2046883022,
		NOTIFY_SENTINELSARRIVED = 1476905923,
		NOTIFY_SENTINELSDEACTIVATED = 3190793762,
		NOTIFY_SENTINELSTARSHIPS = 3594927926,
		NOTIFY_SENTINELSTARSHIPSCOMBAT = 2522764794,
		NOTIFY_SHIELD_DOWN = 1176087477,
		NOTIFY_TARGETACQUIRED = 1194636774,
		NOTIFY_TARGETLOCKED = 584356060,
		NOTIFY_TECHNOLOGYCRITICALLYDAMAGED = 2375715218,
		NOTIFY_THRUSTERSOFFATMOS = 2061086258,
		NOTIFY_THRUSTERSOFFLARGESHIP = 3518228531,
		NOTIFY_THRUSTERSOFFLOCAL = 543940437,
		NOTIFY_THRUSTERSOFFSTATION = 4289616824,
		NOTIFY_TOXICPRO_OFFLINE = 86795735,
		NOTIFY_TRANSFERRED = 2986048385,
		NOTIFY_TRANSFERRED_ELEMENT = 2465459844,
		NOTIFY_TRANSFERRED_PRODUCT = 465183449,
		NOTIFY_UNITS_DEPLETED = 457440512,
		NOTIFY_UNITS_INSUFFICIENT = 2011857548,
		NOTIFY_UNITS_RECEIVED = 3802609344,
		NOTIFY_VEHICLE = 3810439335,
		NOTIFY_VEHICLEACQUIRED = 2042603735,
		NOTIFY_VEHICLEDEPOLYED = 1439371671,
		NOTIFY_VEHICLEMOBILISED = 581759323,
		NOTIFY_VEHICLESUMMONED = 3774062441,
		NOTIFY_WARNING = 3960755587,
		NOTIFY_WARP = 639589435,
		NOTIFY_WARPING = 1725123493,
		NPC_CLOTHING_1H_INTERACT_IPAD01 = 1520735370,
		NPC_CLOTHING_1H_INTERACT_IPAD02 = 1520735369,
		NPC_CLOTHING_1H_SITTING_INTERACT_IPAD01 = 4051723187,
		NPC_CLOTHING_1H_SITTING_INTERACT_IPAD02 = 4051723184,
		NPC_CONSTRUCTION_TERMINAL = 338948561,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC01 = 3594942043,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC02 = 3594942040,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC03 = 3594942041,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC04 = 3594942046,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC05 = 3594942047,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKDOWN01 = 1565560004,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT01 = 2470846455,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT02 = 2470846452,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT03 = 2470846453,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT01 = 128109292,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT02 = 128109295,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT03 = 128109294,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKUP01 = 3697288283,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_IN = 1830540895,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_LP = 1880873626,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_OUT = 181850354,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_IN = 2845324803,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_LP = 2761436926,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_OUT = 378414078,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_IN = 1434675654,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_LP = 1518563831,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_OUT = 2129573833,
		NPC_FOLEY_CLOTHING_0H_INT_RT_03 = 4133477981,
		NPC_FOLEY_CLOTHING_0H_INT_RT_04 = 4133477978,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_01 = 4136726391,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_02 = 4136726388,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_03 = 4136726389,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_04 = 4136726386,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_05 = 4136726387,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_06 = 4136726384,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_07 = 4136726385,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_08 = 4136726398,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_09 = 4136726399,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_10 = 4153503977,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_11 = 4153503976,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_12 = 4153503979,
		NPC_FOLEY_CLOTHING_0H_SHUTDWN_IN = 2989995522,
		NPC_FOLEY_CLOTHING_0H_SHUTDWN_OUT = 2595166525,
		NPC_FOLEY_CLOTHING_0H_SIT_ANGRY01 = 1963111058,
		NPC_FOLEY_CLOTHING_0H_SIT_ANGRY02 = 1963111057,
		NPC_FOLEY_CLOTHING_0H_SIT_CHATTER01 = 2112363894,
		NPC_FOLEY_CLOTHING_0H_SIT_CHATTER02 = 2112363893,
		NPC_FOLEY_CLOTHING_0H_SIT_GREET01 = 3304108126,
		NPC_FOLEY_CLOTHING_0H_SIT_GREET02 = 3304108125,
		NPC_FOLEY_CLOTHING_0H_SIT_HAPPY01 = 3660423735,
		NPC_FOLEY_CLOTHING_0H_SIT_HAPPY02 = 3660423732,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_L01 = 2971324469,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_L02 = 2971324470,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_R01 = 889325531,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_R02 = 889325528,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOKARND = 146552510,
		NPC_FOLEY_CLOTHING_0H_SIT_NEUTRAL01 = 4258607936,
		NPC_FOLEY_CLOTHING_0H_SIT_NEUTRAL02 = 4258607939,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE01 = 405201531,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE02 = 405201528,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE03 = 405201529,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE04 = 405201534,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE05 = 405201535,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE06 = 405201532,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE07 = 405201533,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_INTO = 1270088578,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_OUTOF = 3456531571,
		NPC_FOLEY_CLOTHING_0H_SIT_STRETCH = 1813167715,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY01 = 1154166758,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY02 = 1154166757,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY05 = 1154166754,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY_LP01 = 3489990847,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY_LP02 = 3489990844,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER01 = 2627504674,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER02 = 2627504673,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER03 = 2627504672,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER04 = 2627504679,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER05 = 2627504678,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER06 = 2627504677,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER07 = 2627504676,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER08 = 2627504683,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER09 = 2627504682,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER10 = 2610727088,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER14 = 2610727092,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET01 = 1271614514,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET02 = 1271614513,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET03 = 1271614512,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET04 = 1271614519,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET05 = 1271614518,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET06 = 1271614517,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET07 = 1271614516,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY01 = 2903578779,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY02 = 2903578776,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY03 = 2903578777,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY04 = 2903578782,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY05 = 2903578783,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY06 = 2903578780,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY07 = 2903578781,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY08 = 2903578770,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY09 = 2903578771,
		NPC_FOLEY_CLOTHING_0H_STAND_NEUTRAL01 = 1786697628,
		NPC_FOLEY_CLOTHING_0H_STAND_NEUTRAL02 = 1786697631,
		NPC_FOLEY_CLOTHING_0H_TURN_L_120 = 1632991013,
		NPC_FOLEY_CLOTHING_0H_TURN_R_120 = 2040319319,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD03 = 2653185640,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD04 = 2653185647,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD05 = 2653185646,
		NPC_FOLEY_CLOTHING_1H_SAD_LP01 = 462002192,
		NPC_FOLEY_CLOTHING_1H_STAND_ANGRY03 = 1644508259,
		NPC_FOLEY_CLOTHING_1H_STAND_ANGRY04 = 1644508260,
		NPC_FOLEY_CLOTHING_1H_STAND_NEUTRAL03 = 3096829033,
		NPC_FOLEY_CLOTHING_1H_STAND_NEUTRAL04 = 3096829038,
		NPC_FOLEY_CLOTHING_1H_UNSHEATH_IPAD = 977559,
		NPC_FOOTSTEPS_GENERIC = 3958095652,
		NPC_HANDHOLOGRAM = 2188194579,
		NPC_ROBOT_FOOTSTEP = 120238672,
		NPC_SCIENCE_WORKSTATION_ARMS = 719626965,
		NPC_SHIP_ENGINE_FREIGHTER_FRONT = 2823576857,
		NPC_SHIP_ENGINES = 2992898347,
		NPC_SHIP_IDLE = 609381404,
		NPC_SHIP_LAND = 2277641193,
		NPC_SHIP_LAND_IMPACT = 3556618810,
		NPC_SHIP_LAND_ROTATE = 4201461385,
		NPC_SHIP_LAND_ROTATE_STOP = 3073818940,
		NPC_SHIP_LASER = 2452600139,
		NPC_SHIP_LASERS01 = 1911067891,
		NPC_SHIP_LASERS02 = 1911067888,
		NPC_SHIP_LASERS03 = 1911067889,
		NPC_SHIP_LASERS04 = 1911067894,
		NPC_SHIP_POLICE_SIREN = 3466911794,
		NPC_SHIP_POLICE_SIREN_STOP = 4220820369,
		NPC_SHIP_SCAN_PULSE = 3624603939,
		NPC_SHIP_SPACESTATION_FLYIN = 4148605495,
		NPC_SHIP_TAKEOFF = 2861420794,
		NPC_SHIPS_WARPIN = 2736218626,
		NPC_SHIPS_WARPOUT = 3402292541,
		NPC_SHIPSMALL_WARPIN = 3222301780,
		NPC_SHIPSMALL_WARPOUT = 2764795891,
		NPC_SPEECH_CHATTER = 3832504929,
		NPC_TALK_STOP = 3835799014,
		NPC_VOCAL_1H_ANGRY_STAND_03 = 2673672169,
		NPC_VOCAL_1H_ANGRY_STAND_04 = 2673672174,
		NPC_VOCAL_1H_NEUTRAL_STAND_03 = 89235415,
		NPC_VOCAL_ANGRY_STAND01 = 922409450,
		NPC_VOCAL_ANGRY_STAND02 = 922409449,
		NPC_VOCAL_CHATTER_STAND_01 = 2352053023,
		NPC_VOCAL_CHATTER_STAND_02 = 2352053020,
		NPC_VOCAL_CHATTER_STAND_03 = 2352053021,
		NPC_VOCAL_CHATTER_STAND_04 = 2352053018,
		NPC_VOCAL_GREET_STAND_01 = 893852059,
		NPC_VOCAL_GREET_STAND_02 = 893852056,
		NPC_VOCAL_GREET_STAND_03 = 893852057,
		NPC_VOCAL_GREET_STAND_04 = 893852062,
		NPC_VOCAL_GREET_STAND_06 = 893852060,
		NPC_VOCAL_GREET_STAND_07 = 893852061,
		NPC_VOCAL_HAPPY_STAND_01 = 3958863996,
		NPC_VOCAL_HAPPY_STAND_02 = 3958863999,
		NPC_VOCAL_HAPPY_STAND_03 = 3958863998,
		NPC_VOCAL_HAPPY_STAND_04 = 3958863993,
		NPC_VOCAL_HAPPY_STAND_05 = 3958863992,
		NPC_VOCAL_HAPPY_STAND_06 = 3958863995,
		NPC_VOCAL_HAPPY_STAND_07 = 3958863994,
		NPC_VOCAL_HAPPY_STAND_08 = 3958863989,
		NPC_VOCAL_IDLE_BASIC01 = 132860787,
		NPC_VOCAL_NEUTRAL_STAND_01 = 3829808777,
		NPC_VOCAL_NEUTRAL_STAND_02 = 3829808778,
		NPC_VOCAL_SIT_ANGRY_01 = 466021175,
		NPC_VOCAL_SIT_ANGRY_02 = 466021172,
		NPC_VOCAL_SIT_CHATTER_01 = 3127959995,
		NPC_VOCAL_SIT_CHATTER_02 = 3127959992,
		NPC_VOCAL_SIT_GREET_01 = 1022758643,
		NPC_VOCAL_SIT_GREET_02 = 1022758640,
		NPC_VOCAL_SIT_HAPPY_01 = 2412778492,
		NPC_VOCAL_SIT_HAPPY_02 = 2412778495,
		NPC_WPN_FREIGHTER_GUN = 3690376612,
		NPC_WPN_FREIGHTER_LASER = 2280127943,
		NPC_WPN_FREIGHTER_LASER_END = 2522497737,
		NPC_WPN_FREIGHTER_TURRET_FIRE = 714228867,
		NPC_WPN_FREIGHTER_TURRET_ROTATE = 3779495726,
		NPC_WPN_FREIGHTER_TURRET_ROTATE_STOP = 1694509869,
		NPC_WPN_SMALLSHIP_LASER = 3708135956,
		NPC_WPN_SMALLSHIP_LASER_STOP = 4205087763,
		NPC_WPN_TORPEDO_LAUNCH = 994366060,
		NPC_WPN_TORPEDO_LP_STOP = 2832207160,
		NPC_WPN_TURRET_START = 1790284754,
		NPC_WPN_TURRET_STOP = 1011913610,
		OBJ_ATMOSPHERE_HARVESTER = 1898210056,
		OBJ_BARREL_MED = 3381999112,
		OBJ_CRATE_LARGE = 1631268160,
		OBJ_CRATE_MED = 3320101575,
		OBJ_CRATE_SMALLA = 1805144553,
		OBJ_CRATE_SMALLB = 1805144554,
		OBJ_FLAG = 1301314313,
		OBJ_HARVESTER = 1083822995,
		OBJ_HEALTHSTATION_OFF = 2004120533,
		OBJ_HEALTHSTATION_ON = 3528563049,
		OBJ_MINING_AMU = 1594151933,
		OBJ_MINING_GAS_HARVESTER = 3531133710,
		OBJ_MONOLITH = 2951877355,
		OBJ_PLAQUE = 1850387851,
		OBJ_PORTABLEREFINERY_START = 831490627,
		OBJ_PORTABLEREFINERY_STOP = 3307427009,
		OBJ_REFINERYLARGE_IDLE = 877416377,
		OBJ_REFINERYLARGE_START = 2814564013,
		OBJ_REFINERYLARGE_STOP = 658878447,
		OBJ_REFINERYMEDIUM_IDLE = 4030199823,
		OBJ_REFINERYMEDIUM_START = 3263161063,
		OBJ_REFINERYMEDIUM_STOP = 1244745997,
		OBJ_ROBOTHEAD = 2439061163,
		OBJ_ROBOTHEAD_HAND = 3142177429,
		OBJ_RUINS_RESOURCE_LP = 1465094534,
		OBJ_SHIELD_REPAIRER_OFF = 759403879,
		OBJ_SHIELD_REPAIRER_ON = 1562082195,
		OBJ_SPINNINGCHAIR = 835853928,
		OBJ_SPINNINGGLOBE = 774833132,
		OBJ_SPINNINGSHAPE = 1809435248,
		OBJ_STANDINGSTONE_ACTIVATE = 2571925458,
		OBJ_STANDINGSTONE_RARE = 2757769585,
		OBJ_STANDINGSTONES = 1558870021,
		OBJ_WAYPOINT = 3943441730,
		OBJECT_ANALYSING = 418328775,
		OBJECT_OF_INTEREST = 2086787269,
		OBSERVATORY_HOLOGRAM = 1166522403,
		OCTO_IDLE_FR1 = 1233315629,
		OCTO_IDLE_FR145 = 288773740,
		OCTO_IDLE_FR353 = 473621739,
		OCTO_IDLE_FR575 = 2653726401,
		OCTO_IDLE_FR780 = 2435911579,
		OCTO_SPRINGWALK_FR1 = 1067673959,
		OCTO_SPRINGWALK_FR161 = 84882648,
		OCTO_WALK_FR1 = 3622574264,
		OCTO_WALK_FR145 = 2299379873,
		OCTO_WALK_FR353 = 236130066,
		OCTO_WALK_FR575 = 4229394380,
		OCTO_WALK_FR780 = 2166144694,
		OILSTREAM = 1618707159,
		ORBIDLE = 3764541074,
		ORBIDLE_LOOP = 2865933459,
		PARTICLES_DUSTDEVIL = 1941594313,
		PARTICLES_DUSTDEVIL_STOP = 2294290300,
		PARTICLES_ELECTRICAL_SPARKS = 4237424320,
		PARTICLES_ELECTRICAL_SPARKS_STOP = 3832932079,
		PARTICLES_ELECTRICALANOMALY = 2499651046,
		PARTICLES_ELECTRICALANOMALY_STOP = 1194776565,
		PARTICLES_GEOTHERMAL = 985761321,
		PARTICLES_GEOTHERMAL_EXPLODE = 744291083,
		PARTICLES_GEOTHERMAL_STOP = 1352304924,
		PARTICLES_GRAVITYINVERSION = 3426237444,
		PARTICLES_GRAVITYINVERSION_STOP = 1027251811,
		PARTICLES_LAVAVENT = 3624406402,
		PARTICLES_LAVAVENT_EXPLODE = 259186724,
		PARTICLES_LAVAVENT_STOP = 3258321921,
		PARTICLES_RADIOANOMALY = 1928620129,
		PARTICLES_RADIOANOMALY_STOP = 39884900,
		PARTICLES_SPARKS_COMMON = 2306054985,
		PARTICLES_SPARKS_COMMON_STOP = 2643535612,
		PARTICLES_TOXICCLOUD = 309912793,
		PARTICLES_TOXICCLOUD_STOP = 2986720428,
		PET_EGG_INDUCE = 2543707401,
		PET_EGGSPLOSION = 2269848595,
		PET_UI_ADOPT = 3125690798,
		PET_UI_CALLPET = 84363355,
		PET_UI_COLLECT_EGGS = 599273263,
		PET_UI_CUSTOM_FLANK = 3144257706,
		PET_UI_CUSTOM_SELECT = 2139377788,
		PET_UI_DISMISS = 1737996284,
		PET_UI_EGG_HATCH = 2462078364,
		PET_UI_FOOD_PELLET = 1622626497,
		PET_UI_MENU_HOVER = 1690108398,
		PET_UI_PAT = 4272927287,
		PET_UI_SUMMON = 1903123353,
		PET_UI_TREAT = 684501600,
		PILGRIM_BOOST_START = 1567778204,
		PILGRIM_BOOST_STOP = 179649904,
		PILGRIM_HORN_START = 3990931362,
		PILGRIM_HORN_STOP = 3734367386,
		PILGRIM_IDLE_EXTERIOR = 1770789799,
		PILGRIM_IMPACTS = 2106413053,
		PILGRIM_JUMP = 3872936952,
		PILGRIM_START = 446972720,
		PILGRIM_STOP = 3468869788,
		PILGRIM_SUSPENSION = 1862181967,
		PIPE_SMOKE = 228373679,
		PIPE_SMOKE_STOP = 3361564826,
		PIRATE_SALVAGE_CHAIR_SPIN = 2208077417,
		PIRATE_STATION_GENERATOR = 3290547925,
		PIRATE_STATIONCORE = 3982679414,
		PL_BREATHING_START = 2373909751,
		PL_BREATHING_STOP = 1942603101,
		PL_CAMOUFLAGE_IN = 1315710186,
		PL_CAMOUFLAGE_OUT = 2033727173,
		PL_DAMAGE_WARNING_LOW_HEALTH_LP = 2598974765,
		PL_DAMAGE_WARNING_LOW_HEALTH_LP_STOP = 450279776,
		PL_DAMAGE_WARNING_SHIELD_LOSS = 96350340,
		PL_FISHING_LINE_PULL = 1095278999,
		PL_FISHING_LINE_PULL_STOP = 3324340530,
		PL_FOLEY_BODYHITS = 2438984430,
		PL_FOLEY_CLOTHING_0H_SWIM_BACK = 1038765912,
		PL_FOLEY_CLOTHING_0H_SWIM_FORWARD = 4206703060,
		PL_FOLEY_CLOTHING_0H_SWIM_IDLE = 1353179343,
		PL_FOLEY_CLOTHING_0H_SWIM_LEFT_RIGHT = 3128264693,
		PL_FOLEY_CLOTHING_1H_MULTITOOL_MELEE = 2643905937,
		PL_FOLEY_CLOTHING_1H_OVERHEAT = 280263987,
		PL_FOLEY_CLOTHING_1H_RELOAD = 3642856824,
		PL_FOLEY_CLOTHING_2H_MULTITOOL_MELEE = 3593885660,
		PL_FOLEY_CLOTHING_2H_MULTITOOLRELOAD = 808851594,
		PL_FOLEY_CLOTHING_DEATH_KNEES = 3309322022,
		PL_FOLEY_CLOTHING_DEATH_SWIM = 100439254,
		PL_FOLEY_CLOTHING_EMOTE_CALLPET = 2140299943,
		PL_FOLEY_CLOTHING_EMOTE_DANCEINTO = 2218510691,
		PL_FOLEY_CLOTHING_EMOTE_FALLKNEESINTO = 2659304515,
		PL_FOLEY_CLOTHING_EMOTE_FALLKNEESLP = 138819341,
		PL_FOLEY_CLOTHING_EMOTE_FEED = 385080696,
		PL_FOLEY_CLOTHING_EMOTE_GREET_WAVE = 1159549325,
		PL_FOLEY_CLOTHING_EMOTE_HEROICINTO = 1819879650,
		PL_FOLEY_CLOTHING_EMOTE_LOOKDISTANCEINTO = 248100302,
		PL_FOLEY_CLOTHING_EMOTE_MINDBLOWN = 2361907150,
		PL_FOLEY_CLOTHING_EMOTE_NEG_FINGERWAG = 3343801081,
		PL_FOLEY_CLOTHING_EMOTE_POINT = 2256924678,
		PL_FOLEY_CLOTHING_EMOTE_RELAXINTO = 2857048748,
		PL_FOLEY_CLOTHING_EMOTE_SITINTO = 1906501494,
		PL_FOLEY_CLOTHING_EMOTE_STROKE = 542561232,
		PL_FOLEY_CLOTHING_EMOTE_THUMBSUP = 456024040,
		PL_FOLEY_CLOTHING_EMOTE_WONDER = 2429852101,
		PL_FOLEY_CLOTHING_FALL_CONTROL = 2859952874,
		PL_FOLEY_CLOTHING_FALL_PANIC = 3800802684,
		PL_FOLEY_CLOTHING_IDLE_WEIGHT_SHIFT = 1213548305,
		PL_FOLEY_CLOTHING_JOG_TO_IDLE = 824352504,
		PL_FOLEY_CLOTHING_LADDER_CYCLE_DOWN = 173215931,
		PL_FOLEY_CLOTHING_LADDER_CYCLE_UP = 1027465052,
		PL_FOLEY_CLOTHING_LADDER_DISMOUNT_BOTTOM = 2415414161,
		PL_FOLEY_CLOTHING_LADDER_DISMOUNT_TOP = 3047552345,
		PL_FOLEY_CLOTHING_LADDER_MOUNT_BOTTOM = 4109200797,
		PL_FOLEY_CLOTHING_LADDER_MOUNT_TOP = 4262944789,
		PL_FOLEY_CLOTHING_LOCO = 3080627722,
		PL_FOLEY_CLOTHING_MULTITOOL_DRAW = 2603331957,
		PL_FOLEY_CLOTHING_MULTITOOL_HOLSTER = 2858807508,
		PL_FOLEY_CLOTHING_MULTITOOL_OVERHEAT = 466758131,
		PL_FOLEY_CLOTHING_MULTITOOL_RELOAD = 96586040,
		PL_FOLEY_CLOTHING_RUN_TO_IDLE = 1933902727,
		PL_FOLEY_CLOTHING_SWIM_STOPALL = 2140187239,
		PL_FOLEY_EMOTE_DANCELOOP = 3627207378,
		PL_FOLEY_EMOTE_HELP = 1051463538,
		PL_FOLEY_EMOTE_JOY = 191224083,
		PL_FOLEY_EMOTE_LAUGH = 2503734830,
		PL_FOLEY_EMOTE_NEEDRESOURCE = 4130226675,
		PL_FOLEY_EMOTE_OVERHERE = 2064047647,
		PL_FOLEY_EMOTE_UNDERWATER_OK = 3238082025,
		PL_FOLEY_EMOTE_UNDERWATER_THUMBSDOWN = 2450264440,
		PL_FOLEY_EMOTE_UNDERWATER_THUMBSUP = 3342000667,
		PL_FOLEY_FISHING_CASTOFF = 2292134671,
		PL_FOLEY_FISHING_FLICK = 873824070,
		PL_FOLEY_FISHING_LAND_FISH = 570069063,
		PL_FOLEY_FISHING_LINE_STOP = 2161768674,
		PL_FOLEY_FISHING_REEL_IN = 918401693,
		PL_FOLEY_FISHING_STOP = 1702997973,
		PL_FOLEY_SLOPE_SLIDE_START = 3642926038,
		PL_FOLEY_SLOPE_SLIDE_STOP = 3794275286,
		PL_HAZARD_CRITICAL_HIT = 2512146226,
		PL_HAZARD_RECOVERY = 10119030,
		PL_HAZARD_WARNING = 3503917281,
		PL_HEALTH = 2958097014,
		PL_OUTOFBREATH = 717881129,
		PL_PROTECTION_CHARGE = 3792407780,
		PL_PROTECTION_END = 946174759,
		PL_PROTECTION_LP = 486766964,
		PL_RUN_FAIL = 3575500622,
		PL_SHIELD_CHARGE = 2526386378,
		PL_SHIELD_HIT = 399723077,
		PL_SHIELD_LOWSWEEP = 3418178756,
		PL_SHIELD_SHIP_HIT_BIG = 1961569617,
		PL_SHIELD_SHIP_HIT_SMALL = 1988856382,
		PL_SHIP_BOOST_FAIL = 2588813245,
		PL_SHIP_BOOST_POWERUP = 1657654747,
		PL_SHIP_BOOST_START = 3451007219,
		PL_SHIP_BOOST_STOP = 1795901233,
		PL_SHIP_BURN = 184967358,
		PL_SHIP_BURN_STOP = 2508222941,
		PL_SHIP_COCKPIT_RAIN = 595633637,
		PL_SHIP_COCKPIT_RAIN_STOP = 3151521832,
		PL_SHIP_ENGINES_START = 2143139063,
		PL_SHIP_ENGINES_START_REMOTE = 955953444,
		PL_SHIP_ENGINES_STOP = 3903008093,
		PL_SHIP_ENGINES_STOP_REMOTE = 1189088138,
		PL_SHIP_ENTER = 399772157,
		PL_SHIP_EXIT = 791828913,
		PL_SHIP_GROUND_IMPACT = 753242713,
		PL_SHIP_HASLANDED = 3045449811,
		PL_SHIP_HASLANDED_RACER = 249537421,
		PL_SHIP_HYPERSPACE_END = 3249434187,
		PL_SHIP_HYPERSPACE_START = 1252313904,
		PL_SHIP_IDLE = 4232742771,
		PL_SHIP_LANDING = 3008723446,
		PL_SHIP_MINIWARP_COUNTDOWN = 1348784714,
		PL_SHIP_MINIWARP_END = 1404352244,
		PL_SHIP_MINIWARP_JUMP = 2773095001,
		PL_SHIP_RACER_LANDING = 599003000,
		PL_SHIP_RACER_TAKEOFF = 3039653349,
		PL_SHIP_ROBOT_CARRIAGELOCK_LANDING = 3975579001,
		PL_SHIP_ROBOT_CARRIAGELOCK_TAKEOFF = 431248304,
		PL_SHIP_ROBOT_CHUNKYLEGS_LANDING = 3975438873,
		PL_SHIP_ROBOT_CHUNKYLEGS_TAKEOFF = 431108432,
		PL_SHIP_ROBOT_FLIPWINGS_LANDING = 1176418337,
		PL_SHIP_ROBOT_FLIPWINGS_TAKEOFF = 247945464,
		PL_SHIP_ROBOT_HUGGINGWALLWINGS_LANDING = 493620689,
		PL_SHIP_ROBOT_HUGGINGWALLWINGS_TAKEOFF = 3731903624,
		PL_SHIP_ROBOT_LANDINGGEAR_LANDING = 2545474430,
		PL_SHIP_ROBOT_LANDINGGEAR_TAKEOFF = 12163343,
		PL_SHIP_ROBOT_NEEDLEWINGS_LANDING = 818318901,
		PL_SHIP_ROBOT_NEEDLEWINGS_TAKEOFF = 488362556,
		PL_SHIP_ROBOT_SKIRTWINGS_LANDING = 3211787981,
		PL_SHIP_ROBOT_SKIRTWINGS_TAKEOFF = 1326008884,
		PL_SHIP_ROBOT_TOPWINGS_LANDING = 1050661021,
		PL_SHIP_ROBOT_TOPWINGS_TAKEOFF = 1226065316,
		PL_SHIP_ROBOT_WALLWINGS_LANDING = 3226207038,
		PL_SHIP_ROBOT_WALLWINGS_TAKEOFF = 651319503,
		PL_SHIP_SCANNED = 3802358087,
		PL_SHIP_SHIELD_DOWN = 2110115305,
		PL_SHIP_SPACESTATION_LAUNCH_END = 2186025677,
		PL_SHIP_SPARKS = 977386059,
		PL_SHIP_SPARKS_STOP = 1578311622,
		PL_SHIP_START_ACTIVE = 1408582212,
		PL_SHIP_TAKEOFF = 514090887,
		PL_SHIP_TAKEOFF_WHENREMAININSHIP = 1741087261,
		PL_SHIP_THRUST_ONESHOTS = 3661739297,
		PL_SHIP_THRUST_REVERSE_ONESHOTS = 3071568048,
		PL_SHIP_TRANSITION_TO_PLANET_END = 271192019,
		PL_SHIP_TRANSITION_TO_PLANET_START = 1720965224,
		PL_SHIP_TRANSITION_TO_SPACE_END = 260820793,
		PL_SHIP_TRANSITION_TO_SPACE_START = 3056629338,
		PL_SHIP_VR_EXIT = 2290175096,
		PL_SHIP_VR_EXIT_STOP = 4216455863,
		PL_SHIP_WARP = 2367794895,
		PL_SUIT_START = 2721016034,
		PL_SUIT_STARTUP = 1748081337,
		PL_SUIT_STARTUP_CONFIRM = 3409426940,
		PL_SUIT_STARTUP_INTERACT_TIMER = 1012345556,
		PL_SUIT_STARTUP_INTERACT_TIMER_STOP = 3518049491,
		PL_SUIT_STOP = 2716090586,
		PL_SURVEYING = 1689446954,
		PL_SURVEYING_C = 3293464112,
		PL_SURVEYING_DISCOVER = 1560049920,
		PL_SURVEYING_HIGHLIGHT = 1561117923,
		PL_SURVEYING_L = 3293464127,
		PL_SURVEYING_R = 3293464097,
		PL_SURVEYING_SWITCHTO = 318421178,
		PL_TELEPORT_WARP_END = 3402827328,
		PL_TELEPORT_WARP_START = 3314899483,
		PL_VEHICLE_REMOTE_BOOST = 202932265,
		PL_VEHICLE_REMOTE_DESTRUCTIBLE = 4100343898,
		PL_VEHICLE_REMOTE_ENGINE = 2885382678,
		PL_VEHICLE_REMOTE_HORN = 3371701339,
		PL_VEHICLE_REMOTE_IDLE = 669762998,
		PL_VEHICLE_REMOTE_IMPACTS = 4189153617,
		PL_VEHICLE_REMOTE_JUMP = 2471146996,
		PL_VEHICLE_REMOTE_START = 3803668292,
		PL_VEHICLE_REMOTE_STOP = 3985597944,
		PL_VEHICLE_REMOTE_SURFACE = 997646265,
		PL_VEHICLE_REMOTE_SUSPENSION = 991067859,
		PL_WOUND = 2192195653,
		PL_WPN_SHIP_MISSILE_SHOOT = 1078756643,
		PLACEMARKER_FLARE = 2772020849,
		PLACEMARKER_IMPACT = 1606985057,
		PLACEMARKER_LP = 906588535,
		PLACEMARKER_LP_STOP = 3992295250,
		PLACEMARKER_WOOSH = 3391103609,
		PLANT_ATTACK = 1298875651,
		PLANT_CLOSE = 2117620981,
		PLANT_GASGIANT_STEAMER = 698184181,
		PLANT_GATHER_ALOEFLESH = 1968897852,
		PLANT_GATHER_FIREBERRY = 2266430979,
		PLANT_GATHER_FROZENTUBERS = 217940900,
		PLANT_GATHER_GRAHFRUIT = 538135969,
		PLANT_GATHER_HEPTAWHEAT = 356502074,
		PLANT_GATHER_IMPULSEBEANS = 2422461359,
		PLANT_GATHER_JADEPEAS = 1322806538,
		PLANT_GATHER_PULPYROOTS = 3472181036,
		PLANT_GATHER_SWEETROOT = 1747268291,
		PLANT_ILLUMINATED = 1114436071,
		PLANT_ILLUMINATED_STOP = 2437626530,
		PLANT_RADIOACTIVE_STEAMER = 2955905370,
		PLANTCAT_ATTACK01 = 943544470,
		PLANTCAT_ATTACK02 = 943544469,
		PLANTCAT_ATTACK03 = 943544468,
		PLANTCAT_DEATH = 1137032495,
		PLANTCAT_DETBARK01 = 1715395753,
		PLANTCAT_EAT_FR1 = 3039316223,
		PLANTCAT_EAT_FR160 = 3662502513,
		PLANTCAT_HAPPY01_FR1 = 411786158,
		PLANTCAT_HAPPY01_FR111 = 4147474160,
		PLANTCAT_PAIN = 2255048231,
		PLANTCAT_PERFORM02 = 3279770388,
		PLANTCAT_PERFORM03 = 3279770389,
		PLANTCAT_PERFORM04 = 3279770386,
		PLANTCAT_PERFORMATK = 521335180,
		PLANTCAT_POUNCE = 1849217989,
		PLANTCAT_ROAR = 1862874271,
		PLANTCAT_SAD01 = 3888947508,
		PLANTCAT_SLEEPEND = 1991187183,
		PLANTCAT_SLEEPSTART = 2446705740,
		PLAQUE_END = 170445927,
		PLAQUE_LOOP = 2216543882,
		PLAQUE_START = 306803540,
		PLAY_BASE_POWER_CONNECT = 317299172,
		PLAY_MAP_CENTRECHORD_01_INDEX_01_MAP_CENTRECHORD_01 = 3601292498,
		PLAY_MAP_CENTRECHORD_02_INDEX_01_MAP_CENTRECHORD_02 = 306860026,
		PLAY_MAP_DRONENOISE_01_INDEX_01_MAP_SPACE_NOISE_DRONE = 4067482608,
		PLAY_MAP_DRONENOISE_02_INDEX_01_MAP_SPACE_NOISE_DRONE_RR = 1472729552,
		PLAY_MAP_DRONETONE_01_INDEX_01_MUS_MAP1_DRONE_E = 776510771,
		PLAY_MAP_PIANO_INDEX_01_MUS_MAP01_PIANO_01 = 3114147655,
		PLAY_MAP_SINGLES_01_INDEX_01_MUS_MAP01_SINGLES1_04 = 1632615509,
		PLAY_MAP_SINGLES_02_INDEX_01_MUS_MAP01_SINGLES2_09 = 2137135100,
		PLAY_MAP_ZONE01_INDEX_01_MAP_ZONE01 = 1493737966,
		PLAY_MAP_ZONE02_INDEX_01_MAP_ZONE02 = 2189323162,
		PLAY_MAP_ZONE02_SINGLES_INDEX_01_ZONE02_SINGLES02 = 2073155049,
		PLAY_PL_BASS_INDEX_01_MONOLITH_BOWEDBASSGTR_GMIN_6 = 1742782413,
		PLAY_PL_BASS_INDEX_07_MONOLITH_BOWEDBASSGTR_GMIN_1 = 2118527992,
		PLAY_PL_BASS_INDEX_26_MELB_PLANETBASS_8 = 1448714392,
		PLAY_PL_CELLO_INDEX_07_EOTWS_CELLO_1 = 3232248294,
		PLAY_PL_DRONE_01_INDEX_01_EQUINOXSOFT_EMIN_2 = 1073890527,
		PLAY_PL_DRONE_01_INDEX_03_SM_VOX_GRANULAR_DMIN_1 = 3726505767,
		PLAY_PL_DRONE_01_INDEX_08_ASCENSION_SPACE_6 = 2077639119,
		PLAY_PL_DRONE_01_INDEX_10_TETSUO_VOXTEXTURE_1 = 3243686488,
		PLAY_PL_DRONE_01_INDEX_13_BEYOND_PLANETDRONE_9 = 1341298234,
		PLAY_PL_DRONE_01_INDEX_14_EOTWSALT_STRINGHOLD_7 = 1774780321,
		PLAY_PL_DRONE_01_INDEX_16_BOREALIS_GTRDELAY_AMIN_7 = 322796441,
		PLAY_PL_DRONE_01_INDEX_18_NMS2017_MIDS_52 = 2190106001,
		PLAY_PL_DRONE_01_INDEX_20_TUNG_PLANET_TEXTURE_2 = 3961650110,
		PLAY_PL_DRONE_01_INDEX_21_OCT_TEXTURE_39 = 4100350270,
		PLAY_PL_DRONE_01_INDEX_23_ECHO_PLANETLOWEND_15 = 3382037007,
		PLAY_PL_DRONE_01_INDEX_24_DOMO_PLANETIRIS_2 = 1448240474,
		PLAY_PL_DRONE_01_INDEX_25_SCRAPER_PLANETROOTS_6 = 1817747444,
		PLAY_PL_DRONE_01_INDEX_27_OVERSEER_PLANETACOUSTICBED_5 = 3687781679,
		PLAY_PL_DRONE_01_INDEX_28_SCRAPER_PLANETROOTS_11 = 2648708807,
		PLAY_PL_DRONE_02_INDEX_01_TOMORROW_FM_1 = 1472803101,
		PLAY_PL_DRONE_02_INDEX_08_TOMORROW_FM_CHOPPED_1 = 277324806,
		PLAY_PL_DRONE_02_INDEX_14_EOTWSALT_STRINGLOOP_3 = 3977495409,
		PLAY_PL_DRONE_02_INDEX_18_NMS2017_POLYHIGH_1 = 1196679577,
		PLAY_PL_DRONE_02_INDEX_25_SCRAPER_PLANETWEIRDARP_1 = 3267639477,
		PLAY_PL_DRONE_02_INDEX_28_SCRAPER_PLANETGTRTEXTURE_8 = 2902217127,
		PLAY_PL_FX_01_INDEX_01_BOWEDCYMBAL_CLEAN_6 = 1485806021,
		PLAY_PL_FX_01_INDEX_03_SM_ATMOS_DMIN_4 = 1177923396,
		PLAY_PL_FX_01_INDEX_06_EV_PLANETNOISE_9 = 1549168942,
		PLAY_PL_FX_01_INDEX_14_EOTWSALT_CRACKLE_2 = 38901843,
		PLAY_PL_FX_01_INDEX_15_HAUNTED_ARCTIC_EMIN_3 = 109968494,
		PLAY_PL_FX_01_INDEX_17_APORIA_PLANET_ROBOT_14 = 3771823134,
		PLAY_PL_FX_01_INDEX_18_NMS2017_IMPACTS_3 = 2616376169,
		PLAY_PL_FX_01_INDEX_19_TUES_PLANETTREMOR_17 = 2370070298,
		PLAY_PL_FX_01_INDEX_25_DASKA_PLANETTHUD = 4176156255,
		PLAY_PL_FX_01_INDEX_27_OVERSEER_PLANETTHUMPS_9 = 319943388,
		PLAY_PL_FX_02_INDEX_03_BOWEDCYMBAL_CHOPDISTORT_22 = 2405430794,
		PLAY_PL_FX_03_INDEX_03_SM_HHPATTER_6 = 744004353,
		PLAY_PL_GUITAR_01_INDEX_01_MONOLITH_PLANET_GTRSOUNDSCAPE_5 = 3482103253,
		PLAY_PL_GUITAR_01_INDEX_02_ASIM_PLANET_PAULGTR_5 = 1874757831,
		PLAY_PL_GUITAR_01_INDEX_03_SM_PLANET_ATMOSGTR_DMIN_3 = 2268213627,
		PLAY_PL_GUITAR_01_INDEX_04_BLUEPRINT_BOWEDGTR_EMIN_31 = 142809987,
		PLAY_PL_GUITAR_01_INDEX_06_EV_PLANETGTR_5 = 4146100305,
		PLAY_PL_GUITAR_01_INDEX_12_ATWOOD_GTRVERB_7 = 2913554562,
		PLAY_PL_GUITAR_01_INDEX_13_LULL_GTR_16 = 3500995777,
		PLAY_PL_GUITAR_01_INDEX_15_HAUNTED_GTRSHARK_EMIN_4 = 1311004613,
		PLAY_PL_GUITAR_01_INDEX_16_MONOALT_PLANETMALLETFX_6 = 626663260,
		PLAY_PL_GUITAR_01_INDEX_19_TUES_PLANETGTR_3 = 1299893599,
		PLAY_PL_GUITAR_01_INDEX_22_VOSTOK_BOWEDGTR_1 = 3831365145,
		PLAY_PL_GUITAR_01_INDEX_23_ECHO_PLANETGTRBED_9 = 3156630479,
		PLAY_PL_GUITAR_01_INDEX_25_DASHKA_JOEGTR_5 = 152461295,
		PLAY_PL_GUITAR_01_INDEX_26_MELB_PLANETGTR_3 = 2050966288,
		PLAY_PL_GUITAR_02_INDEX_02_ASIM_PLANET_MALLETGTR_BMIN_4 = 2851439297,
		PLAY_PL_GUITAR_02_INDEX_04_BLUEPRINT_GTRTEXTURE_EMIN_5 = 259776083,
		PLAY_PL_GUITAR_02_INDEX_22_VOSTOK_BOWEDGTRREV_18 = 1239261485,
		PLAY_PL_GUITAR_03_INDEX_02_ASIM_PLANET_MALLETGTRTWO_BMIN_2 = 1815063544,
		PLAY_PL_GUITAR_04_INDEX_02_ASIM_PLANET_JOEGTRWASHSOFT_BMIN_4 = 1731256341,
		PLAY_PL_GUITARDRONE_INDEX_01_DEPARTURE_GTR_EMIN_1 = 3840753179,
		PLAY_PL_GUITARDRONE_INDEX_08_DEPARTURE_GTR_EMIN_1 = 2185115432,
		PLAY_PL_GUITARFAST_INDEX_01_CELESTIAL_GTRLOOP_2 = 805925424,
		PLAY_PL_GUITARFAST_INDEX_08_CELESTIAL_GTRLOOP_3 = 1025492252,
		PLAY_PL_HIGHCELLO_INDEX_09_RIPLEY_CELLOHIGHER_1 = 2232746678,
		PLAY_PL_HIGHSYNTH_INDEX_08_CELESTIAL_HIGH_2 = 3025435844,
		PLAY_PL_HIGHSYNTH_INDEX_19_TUES_PLANETHIGH_2 = 4159173745,
		PLAY_PL_HIGHSYNTH_INDEX_20_TUNG_PLANET_PIANOHIGHINT_21 = 3932819286,
		PLAY_PL_HIGHSYNTH_INDEX_24_DOMO_PLANETHIGHINTEREST_2 = 297686181,
		PLAY_PL_HIGHSYNTH_INDEX_25_SCRAPER_PLANETGTRMELS_4 = 108415221,
		PLAY_PL_HIGHSYNTH_INDEX_27_OVERSEER_PLANETHIGHINTEREST_5 = 4020044181,
		PLAY_PL_MELODY_HI_INDEX_01_MONLITH_PLANET_PIANOMELVERB_1 = 3540468576,
		PLAY_PL_MELODY_HI_INDEX_02_ASIM_PLANETJUNO_BMIN_7 = 2798552724,
		PLAY_PL_MELODY_HI_INDEX_03_SM_PIANOHIGH_DMIN_5 = 2838209304,
		PLAY_PL_MELODY_HI_INDEX_05_REDPARA_CELESTA_9 = 2126566076,
		PLAY_PL_MELODY_HI_INDEX_06_EV_HIGHINTEREST_1 = 585835874,
		PLAY_PL_MELODY_HI_INDEX_10_TETSUO_PLANETHI_1 = 3025157699,
		PLAY_PL_MELODY_HI_INDEX_11_AKIRA_PLANETPIANO_1 = 3451467314,
		PLAY_PL_MELODY_HI_INDEX_13_LULL_PIANO_8 = 4135122428,
		PLAY_PL_MELODY_HI_INDEX_14_EOTWS_PIANOLOOP_4 = 3206962458,
		PLAY_PL_MELODY_HI_INDEX_15_HAUNTED_SHARKUPCLOSE_EMIN_7 = 3669413696,
		PLAY_PL_MELODY_HI_INDEX_16_MONOALT_REVPIANO_11 = 2116270751,
		PLAY_PL_MELODY_HI_INDEX_18_NMS2017_MODMELS_2 = 3502208466,
		PLAY_PL_MELODY_HI_INDEX_21_OCT_HIGHMEL_11 = 2107005141,
		PLAY_PL_MELODY_HI_INDEX_22_VOSTOK_PLANETHIGH_7 = 3763954971,
		PLAY_PL_MELODY_HI_INDEX_25_DASKA_PLANETHIGHINTEREST_12 = 4234615294,
		PLAY_PL_MELODY_HI_INDEX_27_OVERSEER_PLANETACOUSTIC_13 = 972489965,
		PLAY_PL_MELODY_HI_INDEX_28_SCRAPER_PLANETGTRMELS_7 = 1629727811,
		PLAY_PL_MELODY_INDEX_25_DASHKA_PLANETLOOPS_6 = 2439054922,
		PLAY_PL_MELODY_INDEX_28_SCRAPER_PLANETWEIRDARP_2 = 290164238,
		PLAY_PL_MUSICBOX_INDEX_01_MUSICBOXLONG_EMIN = 1556973833,
		PLAY_PL_MUSICBOX_INDEX_08_MUSICBOXLONG_EMIN = 2676308404,
		PLAY_PL_PIANO_INDEX_09_RIPLEY_PIANOHI_1 = 1471216650,
		PLAY_PL_PIANO_INDEX_11_AKIRA_PLANETPIANOREV_18 = 4146872444,
		PLAY_PL_PIANO_INDEX_12_ATWOOD_PIANO_5 = 1847814226,
		PLAY_PL_PIANO_INDEX_17_APORIA_PLANETSINEKEYS_2 = 2212582306,
		PLAY_PL_PIANO_INDEX_20_TUNG_PLANET_PIANO_2 = 512129911,
		PLAY_PL_PIANO_INDEX_22_VOSTOK_PLANETKEYS_19 = 4081904771,
		PLAY_PL_PIANO_INDEX_23_ECHO_PIANOHIGH_2 = 671813290,
		PLAY_PL_PIANO_INDEX_24_DOMO_PLANETBURN_3 = 3899933802,
		PLAY_PL_STRINGS_INDEX_09_RIPLEY_CELLO_1 = 1638884626,
		PLAY_PL_STRINGS_INDEX_17_APORIA_PLANETSOFTBED_2 = 2539644305,
		PLAY_PL_SYNTH_INDEX_01_CELESTIAL_MOD_1 = 3245606980,
		PLAY_PL_SYNTH_INDEX_05_REDPARA_SPACEFROST_AMIN_1 = 2341020961,
		PLAY_PL_SYNTH_INDEX_08_CELESTIAL_MOD_8 = 1882211360,
		PLAY_PL_SYNTH_INDEX_13_BEYOND_SLOWSYNTH_6 = 3084446878,
		PLAY_PL_SYNTH_INDEX_15_HAUNTED_DIGITALSHARK_EMIN_2 = 1208914976,
		PLAY_PL_SYNTH_INDEX_17_APORIA_PLANETREAMPTEXTURE_22 = 2241032768,
		PLAY_PL_SYNTH_INDEX_21_OCT_SLOWMEL_25 = 3004096831,
		PLAY_PL_SYNTH_INDEX_25_DASHKA_PLANETCOUNTER_314 = 1578551773,
		PLAY_PL_SYNTH_INDEX_26_MELB_PLANETBURNT_4 = 288763005,
		PLAY_PL_VOCAL_INDEX_10_TETSUO_VOXSOFT_1 = 433545354,
		PLAY_PL_VOX_INDEX_03_SM_VOX_DMIN_3 = 3601640217,
		PLAY_PL_VOX_INDEX_13_LULL_VOX_16 = 2335840534,
		PLAY_SP_ARP_HI_INDEX_01_MONOLITH_SPACE_ARP_GMIN_11 = 3257820699,
		PLAY_SP_ARP_HI_INDEX_02_ASIMOVARP_A1 = 4061942481,
		PLAY_SP_ARP_HI_INDEX_03_SUPERMOON_17 = 1323076246,
		PLAY_SP_ARP_HI_INDEX_04_BLUEPRINT_ARPEMIN_128BPM_3 = 865575101,
		PLAY_SP_ARP_HI_INDEX_05_REDPARA_SPACEARP_AMIN_7 = 121292172,
		PLAY_SP_ARP_HI_INDEX_07_ARPEOTWS_A11 = 1029083858,
		PLAY_SP_ARP_HI_INDEX_08_HUSK_7 = 2786353027,
		PLAY_SP_ARP_HI_INDEX_09_RIPLEY_12 = 2855205414,
		PLAY_SP_ARP_HI_INDEX_10_ARPTETSUO_B9 = 890066908,
		PLAY_SP_ARP_HI_INDEX_12_ATWOOD_10 = 3207920743,
		PLAY_SP_ARP_HI_INDEX_13_ARPBEYOND_A9 = 66715489,
		PLAY_SP_ARP_HI_INDEX_14_EOTWSALT_11 = 1119535793,
		PLAY_SP_ARP_HI_INDEX_15_MACREADY_4 = 374359247,
		PLAY_SP_ARP_HI_INDEX_16_MONOALT_7 = 579561383,
		PLAY_SP_ARP_HI_INDEX_21_OCT_ARPS_10 = 318987984,
		PLAY_SP_ARP_HI_INDEX_25_DASHKA_SPACEGTR_8 = 2128050728,
		PLAY_SP_BASS_INDEX_01_SPARKGROWLER_EMIN_4 = 3745907121,
		PLAY_SP_BASS_INDEX_02_SKANNERLOW_EMIN_4 = 3606894743,
		PLAY_SP_BASS_INDEX_07_EOTWS_REAMP_1 = 1738952747,
		PLAY_SP_BASS_INDEX_09_RIPLEY_SPACEBASS_EMIN_1 = 215196296,
		PLAY_SP_BASS_INDEX_17_APORIA_SPACEBASS_6 = 3035780867,
		PLAY_SP_BASS_INDEX_18_NMS2017_SPACEBASS_7 = 1781464191,
		PLAY_SP_BASS_INDEX_20_TUNG_SPACEBASS2 = 4007455586,
		PLAY_SP_BASS_INDEX_25_DASHKA_SPACEBASS_3 = 3573155061,
		PLAY_SP_BASS_INDEX_26_MELB_SPACELOWS_5 = 1678816486,
		PLAY_SP_BASS_INDEX_28_SCRAPER_SPACEROOTS_7 = 3110525856,
		PLAY_SP_CHORDS_INDEX_03_SM_CLUSTERKEYS_DMIN_2 = 68556826,
		PLAY_SP_CHORDS_INDEX_17_APORIA_SPACECHORDS_16 = 36045234,
		PLAY_SP_CHORDS_INDEX_18_NMS2017_SPACECHORDSYNTH_10 = 256887816,
		PLAY_SP_DRONE_01_INDEX_01_MONOLITH_WANTEDGTRDRONES_GMIN_3 = 1626013488,
		PLAY_SP_DRONE_01_INDEX_02_ASIM_KORGSPACESYNTH_BMIN_9 = 934104092,
		PLAY_SP_DRONE_01_INDEX_04_BLUEPRINT_MOPHODRONE_EMIN_4 = 3911126271,
		PLAY_SP_DRONE_01_INDEX_05_REDPARA_SPACEPULSE_AMIN_7 = 2778763669,
		PLAY_SP_DRONE_01_INDEX_06_EV_SPACEDRONEONE_ENEUTRAL_2 = 176633303,
		PLAY_SP_DRONE_01_INDEX_12_ATWOOD_DRONESUB_1 = 231389689,
		PLAY_SP_DRONE_01_INDEX_13_BEYOND_SPACEKORG_13 = 2621887011,
		PLAY_SP_DRONE_01_INDEX_16_MONOALT_SPACEDRONE_5 = 2863062915,
		PLAY_SP_DRONE_01_INDEX_20_TUNG_SPACEMODAL_14 = 456995189,
		PLAY_SP_DRONE_01_INDEX_22_VOSTOK_SPACETEXTURE_33 = 3033568150,
		PLAY_SP_DRONE_01_INDEX_24_DOMO_SPACEDRONE_15 = 2968314560,
		PLAY_SP_DRONE_01_INDEX_25_DASHKA_SPACEAMBIENCE_7 = 3301851785,
		PLAY_SP_DRONE_02_INDEX_06_EV_SPACEDRONETWO_ENEUTRAL_4 = 1970297818,
		PLAY_SP_DRONE_02_INDEX_22_VOSTOK_SPACEGRAIN_6 = 670464751,
		PLAY_SP_DRONE_03_INDEX_22_VOSTOK_LOW_2 = 290952825,
		PLAY_SP_FX_01_INDEX_02_BOWEDCYMBAL_CLEAN_22 = 3168157901,
		PLAY_SP_FX_01_INDEX_14_EOTWS2_SPACECHIME_1 = 4028909353,
		PLAY_SP_FX_01_INDEX_22_VOSTOK_ECHO_6 = 786384974,
		PLAY_SP_FX_01_INDEX_28_SCRAPER_VERBAMBIENCE_7 = 1836100471,
		PLAY_SP_GUITAR_INDEX_07_EOTWS_GTRCLEANNOTES_16 = 2866950636,
		PLAY_SP_GUITAR_INDEX_09_RIPLEY_SPACEGTRHI_1 = 3905121782,
		PLAY_SP_GUITAR_INDEX_21_OCT_SPACEGTR_31 = 165317463,
		PLAY_SP_HARP_INDEX_01_ASCENSION_HARP_3 = 2757506388,
		PLAY_SP_HARP_INDEX_08_ASCENSION_HARP_4 = 4047888064,
		PLAY_SP_LOWATMOS_INDEX_01_ASCENSION_LONGRISE_2 = 3060576940,
		PLAY_SP_LOWATMOS_INDEX_08_ASCENSION_LONGRISE_2 = 1764301815,
		PLAY_SP_MELODY_HI_INDEX_02_ASIM_SPACEDUDE_9 = 2464339904,
		PLAY_SP_MELODY_HI_INDEX_06_EV_SPACEPIANO_3_REV = 4242784146,
		PLAY_SP_MELODY_HI_INDEX_11_AKIRA_DULCECLUSTER_7 = 1200277777,
		PLAY_SP_MELODY_HI_INDEX_12_ATWOOD_SPACEHIGHINTEREST_2 = 4158441750,
		PLAY_SP_MELODY_HI_INDEX_13_BEYOND_HIGHMELODY_12 = 3656904909,
		PLAY_SP_MELODY_HI_INDEX_16_MONOALT_VIOLIN_2 = 1115819669,
		PLAY_SP_MELODY_HI_INDEX_19_TUES_SPACEHIGHONESHOTS_11 = 1767323249,
		PLAY_SP_MELODY_HI_INDEX_23_ECHO_SPACEHIGHINTERESTREV_1 = 147035401,
		PLAY_SP_MELODY_HI_INDEX_27_OVERSEER_SPACEHIGHINTEREST_10 = 2598359622,
		PLAY_SP_MELODY_INDEX_01_ASCENSION_ELEKTRIK_EMIN_1 = 1437448673,
		PLAY_SP_MELODY_INDEX_03_SM_JUNOCHORDS_DMIN_18 = 763919093,
		PLAY_SP_MELODY_INDEX_04_BLUEPRINT_ORGANSCATTER_EMIN_10 = 801292362,
		PLAY_SP_MELODY_INDEX_08_ASCENSION_ELEKTRIK_EMIN_1 = 3230263864,
		PLAY_SP_MELODY_INDEX_11_AKIRA_SPACEORGAN_15 = 2506964256,
		PLAY_SP_MELODY_INDEX_15_MAC_SPACEPADS_4 = 1156188012,
		PLAY_SP_MELODY_INDEX_19_TUES_MUSICBOX_12 = 3738192585,
		PLAY_SP_MELODY_INDEX_23_ECHO_SPACETHUD_19 = 3666107162,
		PLAY_SP_MELODY_INDEX_26_MELB_SPACEMELS_3 = 3340502265,
		PLAY_SP_MISC_HI_INDEX_01_MONOLITH_MISC_GMIN_1 = 1563413319,
		PLAY_SP_MISC_HI_INDEX_20_TUNG_SPACEHIGHINTEREST_13 = 154854099,
		PLAY_SP_MISC_HI_INDEX_22_VOSTOK_SPACEHIGHINT_60 = 2169191362,
		PLAY_SP_MISC_HI_INDEX_23_ECHO_WANTEDCELESTA_3 = 4287225002,
		PLAY_SP_MISC_HI_INDEX_24_DOMO_SPACEHIGHINTEREST_9 = 699090183,
		PLAY_SP_SYNTH_INDEX_01_ASCENSION_SYNTHSTAB_6 = 3902029433,
		PLAY_SP_SYNTH_INDEX_08_ASCENSION_SYNTHSTAB_9 = 3601458763,
		PLAY_SP_SYNTH_INDEX_11_AKIRA_SPACESYNTH_9 = 3500246388,
		PLAY_SP_SYNTH_INDEX_13_BEYOND_SLOWSYNTH_6 = 496248595,
		PLAY_SP_SYNTH_INDEX_14_EOTWS2_SPACESTABS_5 = 2810302312,
		PLAY_SP_SYNTH_INDEX_19_TUES_JUNO_6 = 4204259326,
		PLAY_SP_SYNTH_INDEX_21_OCT_SPACEKEYS_14 = 4267863481,
		PLAY_SP_SYNTH_INDEX_22_VOSTOK_ECHOREV_7 = 3570543724,
		PLAY_SP_SYNTH_INDEX_23_ECHO_SPACEPOLY_7 = 4206230308,
		PLAY_SP_SYNTH_INDEX_24_DOMO_SPACEARP_22 = 2727312055,
		PLAY_SP_SYNTH_INDEX_27_OVERSEER_SPACESYNTH_6 = 1536842869,
		PLAY_SP_SYNTHHIGH_INDEX_10_TETSUO_MOPHOHIGHINTEREST_1 = 2918800504,
		PLAY_SP_SYNTHHIGH_INDEX_13_BEYOND_HIGHMELODY_14 = 2830567039,
		PLAY_SP_SYNTHHIGH_INDEX_17_APORIA_SPACE_HIGHINTEREST_3 = 969213273,
		PLAY_SP_SYNTHHIGH_INDEX_26_MELB_SPACEHIGHINTEREST6 = 2608278348,
		PLAY_SP_SYNTHHIGH_INDEX_28_SCRAPER_SPACEARPS_5 = 119921096,
		PLAY_SP_SYNTHINTERFERENCE_INDEX_10_TETSUO_SPACEHIGHINTEREST_1 = 1888655209,
		PLAY_SP_SYNTHPADS_INDEX_10_TETSUO_SPACEPADS_17 = 53427294,
		PLAY_SP_SYNTHPADS_INDEX_14_EOTWS2_SPACEPADS_3 = 1694216399,
		PLAY_SP_SYNTHPADS_INDEX_27_OVERSEER_SPACEDRIFTS_10 = 1095772158,
		PLAY_VO_WARNINGDRONE_ACTIVATED = 2976777968,
		PLAY_VO_WARNINGDRONE_COMBAT = 2816386511,
		PLAY_VO_WARNINGDRONE_ENGAGED = 3437182990,
		PLAY_VO_WARNINGSENTINELELITE = 808375119,
		PLAY_VO_WARNINGSENTINELINCOMING = 1467584186,
		PLAY_VO_WARNINGWALKER = 1932832400,
		PLAY_WT_ARP_INDEX_05_REDPARA_SPACEARP_AMIN_3 = 3903585956,
		PLAY_WT_ARP_INDEX_06_EV_WANTEDARPS_4 = 687937090,
		PLAY_WT_ARP_INDEX_08_MONOLITH_SPACE_ARP_GMIN_4 = 2042481618,
		PLAY_WT_ARP_INDEX_17_APORIA_WANTEDARPS_1 = 2171259124,
		PLAY_WT_ARP_INDEX_19_TUES_WANTEDARP_2 = 815167967,
		PLAY_WT_ARP_INDEX_23_ECHO_WANTEDCELESTA_3 = 3660900695,
		PLAY_WT_BASS_INDEX_02_SKANNERLOW_EMIN_1 = 3462907642,
		PLAY_WT_BASS_INDEX_03_SM_WANTED_BASSSEQ_118BPM_DMIN_2 = 4115586420,
		PLAY_WT_BASS_INDEX_08_MONOLITH_WANTED_SYNTHLOW_1 = 381587121,
		PLAY_WT_BASS_INDEX_20_TUNG_PLANET_PIANOLOWINT2 = 3901995434,
		PLAY_WT_BASS_INDEX_22_VOSTOK_WANTEDSTABS_3 = 2174492689,
		PLAY_WT_BASS_INDEX_25_DASHKA_WANTEDBASSSYNTH_5 = 1389552814,
		PLAY_WT_BASS_INDEX_26_MELB_PLANETBASS_2 = 1028898275,
		PLAY_WT_BASS_INDEX_27_OVERSEER_WANTEDBASS_2 = 535467764,
		PLAY_WT_DRONE_02_INDEX_08_DEPARTURE_NOISE_EMIN_1 = 2101320039,
		PLAY_WT_DRONE_02_INDEX_09_RIPLEY_GRAIN__1 = 762929575,
		PLAY_WT_DRONE_INDEX_03_DEPARTURE_GTR_EMIN_9 = 1830718450,
		PLAY_WT_DRONE_INDEX_04_DEPARTURE_NOISE_EMIN_5 = 3543813370,
		PLAY_WT_DRONE_INDEX_07_EOTWS_GRAINSPACE_1 = 3638589302,
		PLAY_WT_DRONE_INDEX_08_BOREALIS_GTRFEEDBACK_AMIN_1 = 2102683001,
		PLAY_WT_DRONE_INDEX_09_SM_ATMOS_DMIN_1 = 3922581774,
		PLAY_WT_DRONE_INDEX_10_TETSUO_GRAINSPACE_1 = 2913040954,
		PLAY_WT_DRONE_INDEX_11_AKIRA_PLANETGRAIN_17 = 1789593018,
		PLAY_WT_DRONE_INDEX_12_ATWOOD_DRONEGTR_16 = 2451145538,
		PLAY_WT_DRONE_INDEX_14_DEPARTURE_GTR_EMIN_1 = 3271330686,
		PLAY_WT_DRONE_INDEX_15_MAC_MAINPADSFULL_CSHARP_MIN_2 = 247783589,
		PLAY_WT_DRONE_INDEX_16_MONOALT_GRAIN_10 = 925990122,
		PLAY_WT_DRONE_INDEX_22_VOSTOK_ECHOREV_7 = 1698008700,
		PLAY_WT_DRONE_INDEX_24_DOMO_WANTEDBACKGROUND_2 = 3986737055,
		PLAY_WT_DRUMS_INDEX_01_MONOLITH_WANTED_DRUMLOOPS_20 = 2540424258,
		PLAY_WT_DRUMS_INDEX_02_ASIM_DRUMSDIRTY_128BPM_6 = 3523044906,
		PLAY_WT_DRUMS_INDEX_03_SM_WANTED_DRUMLOOPS_15 = 2796988808,
		PLAY_WT_DRUMS_INDEX_04_BLUEPRINT_DRMSGLITCHYBEATS_128BPM_5 = 3586954620,
		PLAY_WT_DRUMS_INDEX_05_REDPARA_WANTEDDRUMLOOPS_1 = 2293835967,
		PLAY_WT_DRUMS_INDEX_06_EV_DRUMLOOPS_138BPM_9 = 1071383,
		PLAY_WT_DRUMS_INDEX_07_EOTWS_WANTEDBEATS_1 = 223065998,
		PLAY_WT_DRUMS_INDEX_08_HUSKWANTEDBEATS11 = 3047651065,
		PLAY_WT_DRUMS_INDEX_09_RIPLEY_DRUMLOOPS_120BPM_1 = 4288704429,
		PLAY_WT_DRUMS_INDEX_10_TETSUO_DRUMLOOPS_1 = 3373906461,
		PLAY_WT_DRUMS_INDEX_11_AKIRAWANTEDBEATS3 = 3005214281,
		PLAY_WT_DRUMS_INDEX_12_ATWOOD_WANTEDARPBEATS_24 = 3032050364,
		PLAY_WT_DRUMS_INDEX_13_BEYONDTOMORROW1 = 1367908627,
		PLAY_WT_DRUMS_INDEX_14_EOTWS_WANTEDDRUMS_2 = 2597203141,
		PLAY_WT_DRUMS_INDEX_15_MAC_DRUMLOOP_5 = 1673345798,
		PLAY_WT_DRUMS_INDEX_16_MONOALT_WANTEDLOOPS_8 = 3271557999,
		PLAY_WT_DRUMS_INDEX_17_APORIA_WANTEDBEATS_2 = 509480090,
		PLAY_WT_DRUMS_INDEX_18_NMS2017_WANTEDSYNTHBEATS_1 = 2578763048,
		PLAY_WT_DRUMS_INDEX_19_TUES_WANTEDBEATS4 = 2886905344,
		PLAY_WT_DRUMS_INDEX_20_TUNG_WANTEDBEATS_3 = 3982631043,
		PLAY_WT_DRUMS_INDEX_21_OCT_WANTEDBEATS_1 = 1938498382,
		PLAY_WT_DRUMS_INDEX_22_VOSTOK_WANTEDDRUMS_2 = 1743004274,
		PLAY_WT_DRUMS_INDEX_23_ECHO_WANTEDLOOPS_2 = 1869844574,
		PLAY_WT_DRUMS_INDEX_24_DOMO_WANTEDDRUMS_3 = 3225074748,
		PLAY_WT_DRUMS_INDEX_25_DASHKA_WANTEDBEATS_3 = 822494656,
		PLAY_WT_DRUMS_INDEX_26_MELB_WANTEDBEATS_6 = 2429661520,
		PLAY_WT_DRUMS_INDEX_27_OVERSEER_WANTEDDRUMS_6 = 332577596,
		PLAY_WT_DRUMS_INDEX_28_SCRAPER_WANTEDBEATS_8 = 16089482,
		PLAY_WT_FX_01_INDEX_03_SM_ATMOS_DMIN_5 = 3011401550,
		PLAY_WT_FX_01_INDEX_04_BLUEPRINT_MOPHOSTUTTER_EMIN_4 = 1799728648,
		PLAY_WT_FX_01_INDEX_17_APORIA_SPACEBOWS_49 = 2489436955,
		PLAY_WT_FX_01_INDEX_19_TUES_SONIC_2 = 2509018552,
		PLAY_WT_FX_01_INDEX_25_DASHKA_WANTEDNOISE_5 = 713871256,
		PLAY_WT_GUITAR_INDEX_02_ASIM_JOEGTRLOUD_BMIN_18 = 51768442,
		PLAY_WT_GUITAR_INDEX_04_BLUEPRINT_GTRBUILD_EMIN_9 = 4264406116,
		PLAY_WT_GUITAR_INDEX_05_REDPARA_GTRTREM_9 = 4077834583,
		PLAY_WT_GUITAR_INDEX_10_TETSUO_GTR1 = 1043990553,
		PLAY_WT_GUITAR_INDEX_15_MAC_GTRMEL_2 = 3163131119,
		PLAY_WT_GUITAR_INDEX_17_APORIA_WANTEDSTABS_1 = 757407008,
		PLAY_WT_GUITAR_INDEX_18_NMS2017_EBOWGTR_5 = 4220221827,
		PLAY_WT_GUITAR_INDEX_19_TUES_WANTEDGTR_3 = 3043716285,
		PLAY_WT_GUITAR_INDEX_20_TUNG_WANTEDGTRS_5 = 3122446025,
		PLAY_WT_GUITAR_INDEX_21_OCT_WANTEDGTR_32 = 2216784749,
		PLAY_WT_GUITAR_INDEX_23_ECHO_WANTEDGTRS_1 = 464614527,
		PLAY_WT_GUITAR_INDEX_26_MELB_PLANETGTR_2 = 2935906234,
		PLAY_WT_GUITAR_INDEX_27_OVERSEER_WANTEDGTR_7 = 124980078,
		PLAY_WT_GUITARS_02_INDEX_04_BLUEPRINT_GTREND_EMIN_6 = 947831786,
		PLAY_WT_GUITARS_02_INDEX_05_REDPARA_EBOWDRONE_5 = 632942917,
		PLAY_WT_GUITARS_02_INDEX_17_APORIA_WANTEDGTRS_1 = 198676045,
		PLAY_WT_GUITARS_02_INDEX_20_TUNG_WANTEDBASS_3 = 2086797210,
		PLAY_WT_GUITARS_02_INDEX_26_MELB_DIST_2 = 2620286753,
		PLAY_WT_MELODY_INDEX_03_SM_JOEGTRBURTS_DMIN_19 = 1111964372,
		PLAY_WT_MELODY_INDEX_04_KOAECAX_SLOWSYNTH_2 = 5990982,
		PLAY_WT_MELODY_INDEX_06_EV_PIANOWANTED_AMIN_12 = 371871443,
		PLAY_WT_MELODY_INDEX_07_EOTWS_PLANETHIINTEREST_1 = 905937072,
		PLAY_WT_MELODY_INDEX_12_ATWOOD_CRACKLE_5 = 3442611096,
		PLAY_WT_MELODY_INDEX_18_NMS2017_WANTEDLOOPS_3 = 379672213,
		PLAY_WT_MELODY_INDEX_21_OCT_WANTEDMELS_4 = 3107795080,
		PLAY_WT_MELODY_INDEX_23_ECHO_SPACEHIGHINTEREST_1 = 29848260,
		PLAY_WT_MELODY_INDEX_24_DOMO_WANTEDMELS_1 = 4142586611,
		PLAY_WT_MELODY_INDEX_25_DASHKA_SPACEPIANO_6 = 3096393545,
		PLAY_WT_MELODY_INDEX_27_OVERSEER_WANTEDMELS_4 = 2231062661,
		PLAY_WT_MELODY_INDEX_28_SCRAPER_WANTEDMELS_10 = 1106905062,
		PLAY_WT_NOISE_INDEX_01_MONOLITH_WANTED_NOISEONESHOTS_2 = 132903593,
		PLAY_WT_ONESHOTS_INDEX_01_MONOLITH_WANTED_FASTONESHOTS_13 = 641006944,
		PLAY_WT_ONESHOTS_INDEX_03_TOMORROW_FM_CHOPPED_5 = 1995099564,
		PLAY_WT_ONESHOTS_INDEX_04_BLUEPRINT_JOESTUTTER_EMIN_11 = 2965534666,
		PLAY_WT_ONESHOTS_INDEX_05_REDPARA_WANTEDSONGONESHOT_2 = 2159036964,
		PLAY_WT_ONESHOTS_INDEX_11_BLUEPRINT_GTREND_EMIN_5 = 1890245284,
		PLAY_WT_ONESHOTS_INDEX_14_EOTWS_WANTEDBURN_4 = 1933445445,
		PLAY_WT_ONESHOTS_INDEX_17_APORIA_PLANETSTABS_37 = 1356286117,
		PLAY_WT_ONESHOTS_INDEX_20_TUNG_SPACEHIGHINTEREST_16 = 4096620077,
		PLAY_WT_ORGAN_INDEX_06_EV_ORGANWANTED_AMIN_4 = 3639238911,
		PLAY_WT_PADS_INDEX_04_BLUEPRINT_INTROPADS_EMIN_48 = 2417063694,
		PLAY_WT_PADS_INDEX_13_BEYOND_WANTEDPADS_6 = 3297803837,
		PLAY_WT_SYNTH_INDEX_17_APORIA_SPACECHORDS_1 = 2046073511,
		PLAY_WT_SYNTH_INDEX_20_TUNG_SPACEMODAL_2 = 4051696474,
		PLAY_WT_SYNTH_INDEX_26_MELB_WANTEDKEYS_5 = 2244231755,
		PLAYER_DIE = 1542330065,
		PLAYER_DIE_SURFACE = 1048639253,
		PLAYER_ORB = 1157180176,
		PLAYER_SHIP_TRANSITION = 1278267371,
		PLAYER_WATER_TRANSITION_INTO_ATMOS = 3534087874,
		PLAYER_WATER_TRANSITION_INTO_WATER = 282747473,
		PLOUGH = 1944056996,
		POD_BEAT = 1540885285,
		POD_BURST = 2536627301,
		POD_SHAKE = 3522626797,
		POI_ASTEROID_BEACON = 1577606680,
		POI_ATLAS_BEACON_01 = 551943340,
		POI_ATLAS_BEACON_02 = 551943343,
		POI_BONES = 3560744339,
		POI_CRYSTALS = 859711595,
		POI_CUBE_STATION = 3231709240,
		POI_DERELICT_01 = 631327698,
		POI_DERELICT_02 = 631327697,
		POI_DERELICT_03 = 631327696,
		POI_EYE = 3305341845,
		POI_EYE_BEAM_END = 2241045207,
		POI_EYE_BEAM_LP = 1387207012,
		POI_GAS_BRAIN = 2706943988,
		POI_GEKHEAD = 3165270075,
		POI_GYRO_BALL = 2410364041,
		POI_HORROR = 4091138034,
		POI_JELLYFISH = 1958545432,
		POI_JELLYFISH_SPACE_SWIM = 2883272550,
		POI_LINE_GEO = 527001218,
		POI_MEMORYLIFEBOAT_FLARE = 1814221006,
		POI_MEMORYLIFEBOAT_IDLE = 1440055604,
		POI_NEURON = 994955047,
		POI_RADIO_PILLAR = 1691095874,
		POI_RELAYBEACON = 461236281,
		POI_RELICGATE = 1675951782,
		POI_SPACE_EGG = 2554222458,
		POI_SPACECLOCK = 955198338,
		POI_SPINNER = 4056555781,
		POI_WEIRD_METAL = 4281289809,
		POLICE_CHATTER_START = 570698736,
		POLICE_CHATTER_STOP = 2256887644,
		POLICE_INCOMING = 3808275034,
		PORTAL_ACTIVATE_NORMAL = 3360645137,
		PORTAL_CAMERA_TOTERMINAL = 1290934733,
		PORTAL_CORRUPTED_AMBIENT_LP = 3460628878,
		PORTAL_CORRUPTED_AWAKEN = 3947792144,
		PORTAL_CORRUPTED_RUMBLE_BUILD = 3073565511,
		PORTAL_CORRUPTED_RUMBLE_LP = 2734753225,
		PORTAL_CORRUPTED_STOP = 1387433489,
		PORTAL_DIAL_SPIN_START = 2594292902,
		PORTAL_DIAL_SPIN_STOP = 4164019174,
		PORTAL_EXPLOSION = 3100297435,
		PORTAL_JUMP_NORMAL_END = 548019122,
		PORTAL_JUMP_NORMAL_END_AMBIENCES = 1729349860,
		PORTAL_JUMP_NORMAL_START = 3820363409,
		PORTAL_JUMP_STORY_END = 526888118,
		PORTAL_JUMP_STORY_START = 2695577501,
		PORTAL_PILLARSATTACH = 2012126694,
		PORTAL_PILLARSDETACH = 737286440,
		PORTAL_PILLARSLOCK = 1267518560,
		PORTAL_PILLARSUNLOCK = 2153823061,
		PORTAL_RUNE_SELECT = 1123182233,
		PORTAL_RUNE_UNAVAILABLE = 1048695189,
		PORTAL_RUNES_APPEAR = 690403667,
		PORTAL_STOP_ALL = 1286595626,
		PORTAL_TERMINAL_CLOSE = 2900944611,
		PORTAL_TERMINAL_OPEN = 123759573,
		PORTAL_WEIRD_BUILDUP = 3508454847,
		POWER_SWITCH_AUTOSWITCH_OFF = 837237653,
		POWER_SWITCH_AUTOSWITCH_ON = 2046941225,
		POWER_SWITCH_BUTTON_OFF = 244684404,
		POWER_SWITCH_BUTTON_ON = 3177620718,
		POWER_SWITCH_FLOOR_OFF = 2284693082,
		POWER_SWITCH_FLOOR_ON = 1281070684,
		POWER_SWITCH_PROXIMITY_OFF = 2770143255,
		POWER_SWITCH_PROXIMITY_ON = 950935651,
		POWERMODULE_NOTE_A = 1714182503,
		POWERMODULE_NOTE_A_STOP = 1716228386,
		POWERMODULE_NOTE_B = 1714182500,
		POWERMODULE_NOTE_B_STOP = 440299395,
		POWERMODULE_NOTE_C = 1714182501,
		POWERMODULE_NOTE_C_STOP = 1005232808,
		POWERMODULE_NOTE_D = 1714182498,
		POWERMODULE_NOTE_D_STOP = 968312097,
		POWERMODULE_NOTE_E = 1714182499,
		POWERMODULE_NOTE_E_STOP = 1573542158,
		POWERMODULE_NOTE_F = 1714182496,
		POWERMODULE_NOTE_F_STOP = 3634175311,
		POWERMODULE_NOTE_G = 1714182497,
		POWERMODULE_NOTE_G_STOP = 13904740,
		PROTOROLLER = 2566437297,
		PROTOROLLER_STOP = 3300685012,
		PS5_VIBRATION_TONE = 3479050115,
		PS5_VIBRATION_TONE_STOP = 2479885806,
		PULSE_EMPHASISER = 583987252,
		QUAD_ATTACK = 2379114231,
		QUAD_CROUCHTOSTAND = 2677755542,
		QUAD_DIE = 2644811907,
		QUAD_EMOTE_LP = 1646266224,
		QUAD_EMOTE_LP_STOP = 4190679167,
		QUAD_EVADE = 4159430602,
		QUAD_GUN = 3114732543,
		QUAD_HOP = 3214559584,
		QUAD_IDLE = 2937386393,
		QUAD_LASER = 3328691260,
		QUAD_LASER_STOP = 1220331979,
		QUAD_POUNCE = 1294057325,
		QUAD_POUNCE_BACK = 3406344785,
		QUAD_POUNCE_FORWARD = 1973492231,
		QUAD_SCAN = 3358222432,
		QUAD_SCAN_STOP = 3159067215,
		QUAD_STEP = 2886624525,
		QUAD_TONE = 2684000083,
		RACING_DOME_NOTIFIER = 1920540000,
		RADIO_CHATTER = 2120624028,
		RADIO_CHATTER_STOP = 1725914731,
		RECIPE_RECEIVE = 3688357373,
		RESOURCE_GATHER = 2251504665,
		RIVER = 3605787649,
		ROBOT_GUNMELEE_IMPACTS = 1144432308,
		ROBOT_LASER_IMPACTS = 1238539687,
		ROBOT_METAL_IMPACTS = 225804991,
		ROBOT_NARRATION_SINGALONG = 2344326313,
		ROBOT_NARRATION_SINGALONG_STOP = 3466138780,
		ROBOT_SHIP_TALK = 2337036937,
		ROBOT_SHIP_TALK_STOP = 1881877820,
		ROCKCREATURE_TRANSFORM = 1310991260,
		RODENTATTACK1 = 219682336,
		RODENTATTACK2 = 219682339,
		RODENTATTACK3 = 219682338,
		RODENTPOUNCE = 3976265745,
		RODENTPOUNCE2 = 697506545,
		RODENTROAR = 4258467331,
		ROLLER = 4054296493,
		ROUNDTABLE_CLOSE = 3053565700,
		ROUNDTABLE_OPEN = 3554107392,
		ROVER_BOOST_START = 3526012810,
		ROVER_BOOST_STOP = 1767900130,
		ROVER_HORN_START = 1299366960,
		ROVER_HORN_STOP = 135191452,
		ROVER_IDLE_EXTERIOR = 3441063321,
		ROVER_IMPACTS = 4197774095,
		ROVER_JUMP = 2301006026,
		ROVER_START = 3960568722,
		ROVER_STOP = 3215405642,
		ROVER_SUSPENSION = 1935935285,
		RUININTERACTION_ACTIVE = 2322525926,
		RUININTERACTION_END = 1654540399,
		RUININTERACTION_IDLE = 2260859310,
		SANDWORM_INTOGROUND = 2251455322,
		SANDWORM_LP = 1848982545,
		SANDWORM_LP_STOP = 2865278324,
		SANDWORM_OUTOFGROUND = 3841881461,
		SANDWORM_UNDERGROUND_WAIL_LP = 2995948895,
		SC_TR_HARV = 842321922,
		SCAN_OFF = 1895681704,
		SCAN_ON = 2149772978,
		SCRAP_DESTROY = 2396188467,
		SEAHORSE_SWIM = 2286696,
		SEAURCHINCLOSE = 967767057,
		SEAURCHINEXTEND = 2047101075,
		SENTINEL_CRYSTAL = 3531027850,
		SENTINEL_CRYSTAL_SMALL = 4011512006,
		SENTINEL_HIVE_LP = 2857828625,
		SENTINEL_HIVE_NODE = 294290669,
		SENTINEL_HIVE_TERMINAL = 324186281,
		SENTINEL_MECH_JUMP = 3563701918,
		SENTINEL_MECH_LAND = 1626353097,
		SENTINEL_MECH_WPN_FIRE = 591770082,
		SENTINEL_MECH_WPN_FIRE_STOP = 118566561,
		SENTINEL_MECH_WPN_GRENADE = 3975516232,
		SENTINEL_MECH_WPN_GUN = 4154493600,
		SENTINELS_INCOMING1 = 1482865360,
		SENTINELS_INCOMING2 = 1482865363,
		SENTINELS_INCOMING3 = 1482865362,
		SENTINELS_INCOMING4 = 1482865365,
		SENTINELS_INCOMING5 = 1482865364,
		SENTINENCEECHO_REVEAL = 180910584,
		SETTLEMENT_ALARM = 966847506,
		SETTLEMENT_ALARM_SHIP = 2648944667,
		SETTLEMENT_ANTENNA = 1960970972,
		SETTLEMENT_ANTENNA0 = 3688306788,
		SETTLEMENT_ANTENNA1 = 3688306789,
		SETTLEMENT_ANTENNA2 = 3688306790,
		SETTLEMENT_ANTENNA3_LOOP = 2129238684,
		SETTLEMENT_ANTENNA3_SPIN = 492753242,
		SETTLEMENT_CONSTRUCTION_TERMINAL = 1218563483,
		SETTLEMENT_FURNACE = 582422645,
		SETTLEMENT_GENERATOR = 2098320458,
		SETTLEMENT_GLOWGLOBE = 254379439,
		SETTLEMENT_LIGHTOUTDOOR = 2355899779,
		SETTLEMENT_MEDIBAY_LP = 4022718587,
		SETTLEMENT_PUMP = 3270980965,
		SETTLEMENT_ROBOTARM = 207414385,
		SETTLEMENT_TERMINAL = 3177730335,
		SETTLEMENT_WATERTOWER = 319911827,
		SFX_FADEDOWN = 3983193067,
		SFX_FADEUP = 1911123884,
		SHARK_LP = 682654775,
		SHIP_ALIEN_LANDING = 1324829291,
		SHIP_ALIEN_NOSTRILFLARE = 1660970061,
		SHIP_ALIEN_TAKEOFF = 221805542,
		SHIP_NORMANDY_ENGINES = 1652446832,
		SHIP_NORMANDY_REVEAL = 2213475144,
		SHIP_PIRATE_LANDING_WINGS = 1307028832,
		SHIP_PIRATE_SAILS_ROUNDSAILS_FOLD = 3164352659,
		SHIP_PIRATE_SAILS_ROUNDSAILS_UNFOLD = 790642474,
		SHIP_PIRATE_SAILS_SQUARE_FOLD = 2329808098,
		SHIP_PIRATE_SAILS_SQUARE_UNFOLD = 149909671,
		SHIP_PIRATE_SAILS_TRIANGLE_FOLD = 2528284669,
		SHIP_PIRATE_SAILS_TRIANGLE_UNFOLD = 442931416,
		SHIP_PIRATE_TAKEOFF_WINGS = 2197480917,
		SHIP_ROYAL_ENGINEC_LANDING = 2745991531,
		SHIP_ROYAL_ENGINEC_TAKEOFF = 1642967782,
		SHIP_ROYAL_LANDINGGEAR_LANDING = 1585841874,
		SHIP_ROYAL_LANDINGGEAR_TAKEOFF = 1101552643,
		SHIP_ROYAL_WINGSA_LANDING = 1356864679,
		SHIP_ROYAL_WINGSA_TAKEOFF = 3162439074,
		SHIP_ROYAL_WINGSB_LANDING = 1341704276,
		SHIP_ROYAL_WINGSB_TAKEOFF = 3382074657,
		SHIP_ROYAL_WINGSC_LANDING = 2597010733,
		SHIP_ROYAL_WINGSC_TAKEOFF = 3158279828,
		SHIP_SQUID_LANDINGGEAR_LANDING = 2813396705,
		SHIP_SQUID_LANDINGGEAR_TAKEOFF = 3839530168,
		SHIP_SQUID_NOSE_LANDING = 213968194,
		SHIP_SQUID_NOSE_TAKEOFF = 3807021139,
		SHIP_TOUCHDOWN_IMPACT = 4032126704,
		SHIPREPAIR_IDLE = 751951229,
		SHORELINE = 27371874,
		SHUTTLE_CLOSE = 2821071217,
		SHUTTLE_MAINTHRUSTER = 2344195895,
		SHUTTLE_OPEN = 3626448883,
		SHUTTLE_THRUSTERS_STOP = 1645327086,
		SHUTTLE_TOPTHRUSTER = 1609123203,
		SIGNALSCANNER = 806234925,
		SILO_LOOSECLOTH = 1206605935,
		SIXLEGCATPERFORM01 = 3519706211,
		SIXLEGGEDCOWPERFORM01 = 4195558370,
		SLIMEDOOR_BREAKA = 719481504,
		SLIMEDOOR_BREAKB = 719481507,
		SLIMEDOOR_BREAKC = 719481506,
		SLIMEDOOR_BREAKD = 719481509,
		SMALLPROPC = 2418514844,
		SPACE_STATION_EXTERIOR = 299327257,
		SPACE_STATION_INTERIOR_01 = 3524134059,
		SPACE_STATION_INTERIOR_01_STOP = 3862706406,
		SPACESTATION_ATLAS_DOOR_CLOSE = 4089232747,
		SPACESTATION_ATLAS_DOOR_OPEN = 291412141,
		SPACESTATION_ENGINES_INTERIOR = 1882835862,
		SPACESTATION_PLANET_HOLOGRAM = 1758701798,
		SPARKS = 2439012415,
		SPGEK_CHATTER = 177551289,
		SPGEK_CHATTER_STOP = 1850573900,
		SPIDERATTACK = 1083233890,
		SPIDERATTACK2 = 100760692,
		SPIDERATTACK3 = 100760693,
		SPIDERFLOATSAD = 4035071540,
		SPIDERPERFORM01 = 3073496632,
		SPIDERPOUNCE = 1563940176,
		SPIDERROAR = 1897433086,
		SPKORVAX_CHATTER = 670047555,
		SPKORVAX_CHATTER_STOP = 3224180142,
		SPOOKHEATER_IDLE = 3104408719,
		SPOOKHEATER_LP = 786723625,
		SPOOKHEATER_START = 1684017255,
		SPOOKYTENTACLES = 1798864599,
		SPOOKYTENTACLES_STOP = 4050532722,
		SPORE = 287737412,
		SPOREBAG_IDLE = 4157250455,
		SPOREBAG_WOBBLE = 1520474518,
		SPOREBAGEXPLODE = 1662669133,
		SPOREVENT_IDLE = 1502432274,
		SPOREVENT_INFLATE = 2453750081,
		SPVYKEEN_CHATTER = 460833812,
		SPVYKEEN_CHATTER_STOP = 650402323,
		STARSHIP_OUTFITTING_LP = 4082362318,
		STARSHIP_VIEW_SWITCH_EXTERIOR = 254916497,
		STARSHIP_VIEW_SWITCH_INTERIOR = 1387569711,
		STATION_CONSOLE_SWITCH = 2631526756,
		STATIONB_CRANELOADCARGO_FR1 = 4115657195,
		STATIONB_CRANELOADCARGO_FR446 = 3807482764,
		STATIONB_ORB_IDLE = 505648450,
		STATIONB_ORB_LOOM = 3727923755,
		STATIONB_ORB_RETRACT = 2712203811,
		STATIONB_ORB_ZOOM = 2615748917,
		STING_LOGO = 3995851678,
		STONE_DOOR1_SETTLEMENT_CLOSE = 3128248579,
		STONE_DOOR1_SETTLEMENT_OPEN = 639879541,
		STONEFLOATER_CORE_EXPLODE = 1633103673,
		STONEFLOATER_LEFT_RIGHT_THROW = 1499603803,
		STONEFLOATER_MELEE = 2233207830,
		STONEFLOATER_SPAWN = 2362813131,
		STONEFLOATER_SPIN = 876491334,
		STONEFLOATER_THROW = 3372862510,
		STOP_MAP_CENTRECHORD_01_INDEX_01_MAP_CENTRECHORD_01 = 609003312,
		STOP_MAP_CENTRECHORD_02_INDEX_01_MAP_CENTRECHORD_02 = 2810844184,
		STOP_MAP_DRONENOISE_01_INDEX_01_MAP_SPACE_NOISE_DRONE = 1411731682,
		STOP_MAP_DRONENOISE_02_INDEX_01_MAP_SPACE_NOISE_DRONE_RR = 159584654,
		STOP_MAP_DRONETONE_01_INDEX_01_MUS_MAP1_DRONE_E = 949166737,
		STOP_MAP_PIANO_INDEX_01_MUS_MAP01_PIANO_01 = 1858104029,
		STOP_MAP_SINGLES_01_INDEX_01_MUS_MAP01_SINGLES1_04 = 3605227175,
		STOP_MAP_SINGLES_02_INDEX_01_MUS_MAP01_SINGLES2_09 = 3642758646,
		STOP_MAP_ZONE01_INDEX_01_MAP_ZONE01 = 418962276,
		STOP_MAP_ZONE02_INDEX_01_MAP_ZONE02 = 1420385216,
		STOP_SP_ARP_HI_INDEX_02_ASIMOVARP_A1 = 1702590803,
		STOP_SP_ARP_HI_INDEX_03_SUPERMOON_17 = 3235806432,
		STOP_SP_ARP_HI_INDEX_04_BLUEPRINT_ARPEMIN_128BPM_3 = 2924318635,
		STOP_SP_ARP_HI_INDEX_05_REDPARA_SPACEARP_AMIN_7 = 1601868466,
		STOP_SP_ARP_HI_INDEX_07_ARPEOTWS_A11 = 934366420,
		STOP_SP_ARP_HI_INDEX_08_HUSK_7 = 1162206253,
		STOP_SP_ARP_HI_INDEX_09_RIPLEY_12 = 3433850568,
		STOP_SP_ARP_HI_INDEX_10_ARPTETSUO_B9 = 997454834,
		STOP_SP_ARP_HI_INDEX_12_ATWOOD_10 = 3376192409,
		STOP_SP_ARP_HI_INDEX_13_ARPBEYOND_A9 = 3540222211,
		STOP_SP_ARP_HI_INDEX_14_EOTWSALT_11 = 1804610823,
		STOP_SP_ARP_HI_INDEX_15_MACREADY_4 = 2774297237,
		STOP_SP_ARP_HI_INDEX_16_MONOALT_7 = 1217587597,
		STOP_WT_DRUMS_INDEX_01_MONOLITH_WANTED_DRUMLOOPS_20 = 165328332,
		STOP_WT_DRUMS_INDEX_02_ASIM_DRUMSDIRTY_128BPM_6 = 2381251412,
		STOP_WT_DRUMS_INDEX_03_SM_WANTED_DRUMLOOPS_15 = 3179618362,
		STOP_WT_DRUMS_INDEX_04_BLUEPRINT_DRMSGLITCHYBEATS_128BPM_5 = 3588124590,
		STOP_WT_DRUMS_INDEX_05_REDPARA_WANTEDDRUMLOOPS_1 = 3264597457,
		STOP_WT_DRUMS_INDEX_06_EV_DRUMLOOPS_138BPM_9 = 188932445,
		STOP_WT_DRUMS_INDEX_07_EOTWS_WANTEDBEATS_1 = 434458312,
		STOP_WT_DRUMS_INDEX_08_HUSKWANTEDBEATS11 = 3935322051,
		STOP_WT_DRUMS_INDEX_09_RIPLEY_DRUMLOOPS_120BPM_1 = 1111487,
		STOP_WT_DRUMS_INDEX_10_TETSUO_DRUMLOOPS_1 = 673599155,
		STOP_WT_DRUMS_INDEX_11_AKIRAWANTEDBEATS3 = 887794623,
		STOP_WT_DRUMS_INDEX_12_ATWOOD_WANTEDARPBEATS_24 = 3391312602,
		STOP_WT_DRUMS_INDEX_13_BEYONDTOMORROW1 = 2313425453,
		STOP_WT_DRUMS_INDEX_14_EOTWS_WANTEDDRUMS_2 = 790882567,
		STOP_WT_DRUMS_INDEX_15_MAC_DRUMLOOP_5 = 2908125108,
		STOP_WT_DRUMS_INDEX_16_MONOALT_WANTEDLOOPS_8 = 2258686837,
		STOP_WT_DRUMS_INDEX_17_APORIA_WANTEDBEATS_2 = 3695232200,
		STOP_WT_DRUMS_INDEX_18_NMS2017_WANTEDSYNTHBEATS_1 = 3328109910,
		STOP_WT_DRUMS_INDEX_19_TUES_WANTEDBEATS4 = 1695477586,
		STOP_WT_DRUMS_INDEX_20_TUNG_WANTEDBEATS_3 = 2975026641,
		STOP_WT_DRUMS_INDEX_21_OCT_WANTEDBEATS_1 = 124962492,
		STOP_WT_DRUMS_INDEX_22_VOSTOK_WANTEDDRUMS_2 = 3522344384,
		STOP_WT_DRUMS_INDEX_23_ECHO_WANTEDLOOPS_2 = 4247467284,
		STOP_WT_DRUMS_INDEX_24_DOMO_WANTEDDRUMS_3 = 3388069506,
		STOP_WT_DRUMS_INDEX_25_DASHKA_WANTEDBEATS_3 = 546355550,
		STOP_WT_DRUMS_INDEX_26_MELB_WANTEDBEATS_6 = 4203938678,
		STOP_WT_DRUMS_INDEX_27_OVERSEER_WANTEDDRUMS_6 = 3529698098,
		STOP_WT_DRUMS_INDEX_28_SCRAPER_WANTEDBEATS_8 = 3138963968,
		STORMCRYSTAL = 3099141526,
		STRIDERATTACK = 1884909260,
		STRIDERATTACK2 = 2831772438,
		STRIDERATTACK3 = 2831772439,
		STRIDERROAR = 1822410676,
		SUBMARINE_BOOST_START = 841460250,
		SUBMARINE_BOOST_STOP = 2253481394,
		SUBMARINE_HORN_START = 893978368,
		SUBMARINE_HORN_STOP = 836913580,
		SUBMARINE_IDLE_EXTERIOR = 1760319209,
		SUBMARINE_IMPACTS = 2203081759,
		SUBMARINE_JUMP = 718058842,
		SUBMARINE_START = 2336426498,
		SUBMARINE_STOP = 4232495994,
		SUBMARINE_SUBMERGE = 1947762264,
		SUBMARINE_SURFACE = 3507421351,
		SUBMARINE_SUSPENSION = 3356903013,
		SUIT_INIT_END = 161497825,
		SUIT_INIT_JETPACK = 3286703312,
		SUIT_INIT_LIFESUPPORT = 813596697,
		SUIT_INIT_SCANNER = 3862412372,
		SUIT_INIT_STARTUP = 2078447401,
		SUIT_UPGRADE_TERMINAL_INTERACT = 258603543,
		SUIT_UPGRADE_TERMINAL_LP = 3856985561,
		SUITBOOT_FINISHED = 799059747,
		SUITBOOT_FREIGHTERINTRO_01 = 2134027251,
		SUITBOOT_FREIGHTERINTRO_02 = 2134027248,
		SUITBOOT_FREIGHTERINTRO_03 = 2134027249,
		SUITBOOT_FREIGHTERINTRO_04 = 2134027254,
		SUITBOOT_FREIGHTERINTRO_05 = 2134027255,
		SUITBOOT_FREIGHTERINTRO_06 = 2134027252,
		SUITBOOT_FREIGHTERINTRO_07 = 2134027253,
		SUITBOOT_INIT = 1406265891,
		SUITBOOT_JETPACK = 3493785085,
		SUITBOOT_LIFESUPPORT = 2266384552,
		SUITBOOT_SCANNER = 3066321237,
		SUITBOOT_SHIELD = 1995270154,
		SUITBOOT_WEAPON = 431752453,
		SUMMONSHIPBEACON_CLOSE = 2321196019,
		SUMMONSHIPBEACON_OPEN = 2531659013,
		TELEPORT = 530129416,
		TELEPORT_ACTIVATED_LOOP = 3079989133,
		TELEPORT_END = 3723096942,
		TELEPORT_LOOP_STOP = 3704808700,
		TELEPORT_START = 650852485,
		TENTACLE_IN = 3547594691,
		TENTACLE_LP = 3463706558,
		TENTACLE_OUT = 3146562750,
		TENTPLANT_CLOSE = 1112057648,
		TENTPLANT_OPEN = 3988975428,
		TERMINAL_ABANDONED_GROWTH = 4149453994,
		TERMINAL_ABANDONED_GROWTH_CLOSE = 1077121491,
		TERMINAL_ABANDONED_GROWTH_OPEN = 159666789,
		TERMINAL_ABANDONED_OPEN = 692858459,
		TERMINAL_BOOTUP = 406501363,
		TERMINAL_INDOORS = 1631121032,
		TERMINAL_INTERACT = 1132985582,
		TERMINAL_OUTDOORS = 3297594443,
		TERRAIN_CREATE = 2694184399,
		TERRAIN_DESTROY = 3593801287,
		TERRAIN_UNDO = 518691445,
		TIMBER_DOOR1_SETTLEMENT_CLOSE = 1134973227,
		TIMBER_DOOR1_SETTLEMENT_OPEN = 413685869,
		TIMBER_DOOR2_SETTLEMENT_CLOSE = 3443058714,
		TIMBER_DOOR2_SETTLEMENT_OPEN = 1721306142,
		TORCH_OFF = 122467803,
		TORCH_ON = 2883861863,
		TORNADO = 2586554088,
		TORNADO_STOP = 3131860167,
		TREXATTACK = 1272900592,
		TREXATTACK2 = 1609394914,
		TREXATTACK3 = 1609394915,
		TREXHAPPY = 2295281582,
		TREXPERFORM03 = 3371934392,
		TREXROAR = 2880005424,
		TRIATTACK = 1551704004,
		TRIATTACK2 = 1559822782,
		TRIATTACK3 = 1559822783,
		TRIPERFORM01 = 4069850822,
		TRIROAR = 3523086412,
		TURRET_DEPLOY = 1305807563,
		TURRET_INACTIVE_IDLE = 435503774,
		TURRET_LASER = 3517346539,
		TURRET_LASER_STOP = 1056229158,
		TURRET_RETRACT = 2184733109,
		TURRET_SHOOT = 2888394459,
		TUT_ELEMENT_TRANSFER_SUCCESS = 4008949373,
		TXT_RADIONOISE = 2434536403,
		TXT_SPECIAL_CHIME = 1782038646,
		TXT_STATICNOISE_END = 3293272248,
		TXT_STATICNOISE_START = 1438761059,
		UI_ACTION_CONFIRMED = 414108918,
		UI_ALERT_DAMAGE_WARNING_CRITICAL_LP = 2613665542,
		UI_ALERT_DAMAGE_WARNING_CRITICAL_LP_STOP = 3895653333,
		UI_ALERT_POLICE = 2320709165,
		UI_ALIEN_RESPONSE = 2475545571,
		UI_BADGE = 3526135975,
		UI_BARTER_SUCCESS = 3282524670,
		UI_BASEBUILD_CALLFREIGHTER = 2117072262,
		UI_BASEBUILD_CHANGECATEGORY = 2133792826,
		UI_BASEBUILD_CHANGESELECTION = 3377512016,
		UI_BASEBUILD_DELETE = 2952796143,
		UI_BASEBUILD_INVALIDPOSITION = 4059944170,
		UI_BASEBUILD_MENU_CLOSE = 2088534494,
		UI_BASEBUILD_MENU_OPEN = 1093324154,
		UI_BASEBUILD_PLACEBUILDING = 1589148399,
		UI_BASEBUILD_REPAIRTECH = 2871826949,
		UI_BASEBUILD_REPAIRTECH_ERROR = 3778035298,
		UI_BASEBUILD_ROTATE = 4019996011,
		UI_BASEBUILD_ROTATE_LOOP_START = 3980637285,
		UI_BASEBUILD_ROTATE_LOOP_STOP = 3979254151,
		UI_BASEBUILD_SETCOLOUR = 2774370610,
		UI_BASEBUILD_SNAP = 2040747090,
		UI_BEACON_DISCOVER = 1975101476,
		UI_BIOSHIP_ADDORGAN = 4111887813,
		UI_BLUEPRINT_KNOWN = 1834761571,
		UI_BUILD_ERROR = 1974231569,
		UI_BUY = 3247222218,
		UI_CHOICETEXT_WOOSH = 2373818691,
		UI_CLICK_GENERIC = 290149060,
		UI_COMBAT_UNIT_DEPLOYED_01 = 572186546,
		UI_COMBAT_UNIT_DEPLOYED_02 = 572186545,
		UI_COMBAT_UNIT_DEPLOYED_03 = 572186544,
		UI_COMMUNICATOR_HAIL_ALARM = 2181752810,
		UI_CREDITS_INCREASE = 303576711,
		UI_CRITICAL_HIT = 2368764731,
		UI_DECISIONTEXT_MOUSEOVER = 696694815,
		UI_DESTINATION_REACHED = 1818533469,
		UI_DISMANTLE = 2261736867,
		UI_DUMMY_EVENT = 3603524867,
		UI_EPIC_ITEM = 4219387885,
		UI_ERROR = 1009189048,
		UI_FRIGATE_LIVING_FEED = 90675821,
		UI_FRONTEND_BACK = 2654147108,
		UI_FRONTEND_ENTER = 2852869421,
		UI_FRONTEND_EXIT = 3376480577,
		UI_FRONTEND_PRODUCTSBUILD = 472585883,
		UI_FRONTEND_SELECTGENERIC = 3635375988,
		UI_FRONTEND_TECHBUILD = 3396963939,
		UI_FRONTEND_TEXTOVERLAY_DISCOVERY = 408793035,
		UI_FRONTEND_TEXTOVERLAY_EMPTY = 3154678550,
		UI_FRONTEND_TEXTOVERLAY_SUBSTANCE = 306235403,
		UI_FRONTEND_TEXTOVERLAY_TECH = 343158839,
		UI_FRONTEND_TRANSFER = 1148272344,
		UI_GAMEMODE_ERASE_COMPLETE = 249451172,
		UI_GAMEMODE_ERASE_ERROR = 1752181397,
		UI_GAMEMODE_HOVER = 3993814526,
		UI_GAMEMODE_SELECT = 781172048,
		UI_GAMEMODE_WARNING = 800133804,
		UI_GLITCHED_MEMORY = 1619887904,
		UI_HEALTH_INCREASE = 3537297379,
		UI_INCOMING_FRIGATE_LIVING_WARNING = 4192213380,
		UI_INCOMING_MESSAGE = 1782162542,
		UI_INCOMING_NORMANDY_WARNING = 518076034,
		UI_INCOMING_STARSHIP_WARNING = 263205366,
		UI_INSUFFICIENT_FUEL = 808072914,
		UI_INSUFFICIENT_STANDING = 3298470450,
		UI_INSUFFICIENT_TECH_FRAGMENTS = 2584560788,
		UI_INTERACT_TIMER = 103385342,
		UI_INTERACT_TIMER_STOP = 1484538141,
		UI_INTERACTIVEFLORA_COLLECT = 3401748187,
		UI_ITEM_TELEPORTTOSHIP = 2268658758,
		UI_ITEM_TRANSFERTOSUIT = 1340061303,
		UI_JUICYGRUB = 2639969652,
		UI_KEYBINDING = 173284918,
		UI_KNOWLEDGE_EXPANDED = 1864736154,
		UI_LANDINGPOST_LOCKON = 843127146,
		UI_LAUNCH_CONFIRMATION = 2719476233,
		UI_LAUNCH_NOTIFICATION = 786358347,
		UI_LEVEL_UP_TEXT = 2720858558,
		UI_MANAGE_EXOSUIT_INVENTORY = 2820680502,
		UI_MAP_ENTRY = 2763231777,
		UI_MAP_EXIT = 2991743527,
		UI_MAP_FILTER_CHANGE = 1471906256,
		UI_MAP_HIGHLIGHT_HOVER = 2838564814,
		UI_MAP_INFO = 4204003495,
		UI_MAP_INTERACT_TIMER = 982578715,
		UI_MAP_LINES = 1105933428,
		UI_MAP_MENUDOWN = 2892924582,
		UI_MAP_MENUUP = 367452365,
		UI_MAP_NAV_MODE_BACK = 1815586734,
		UI_MAP_NAV_MODE_NEXT = 1708280704,
		UI_MAP_NAV_MODE_SWITCH_FAIL = 2157663446,
		UI_MAP_NAV_PATH_BACK = 2830722782,
		UI_MAP_NAV_PATH_NEXT = 2186636272,
		UI_MAP_PLANET_HOVER = 1578225138,
		UI_MAP_PLANET_SELECT = 206169972,
		UI_MAP_PLANET_UNSELECT = 23895309,
		UI_MAP_POINT_SELECT = 2617200518,
		UI_MAP_SELECT = 1335995103,
		UI_MAP_TEXT = 28170026,
		UI_MAP_TEXT_OUT = 3154603751,
		UI_MAP_WAYPOINT_ADDED = 3837776649,
		UI_MAP_WAYPOINT_DELETED = 333420632,
		UI_MAP_WAYPOINT_ERROR = 3203127381,
		UI_MARKER = 721935692,
		UI_MENU_BUILD_TAB = 2043548298,
		UI_MENU_INCORRECT = 526430491,
		UI_MENU_OPTION_SWITCH = 4281318564,
		UI_MESSAGE_GENERIC = 974424781,
		UI_MISSION_NEWSECONDARY_COMPLETE = 3635392031,
		UI_MISSION_NEWSECONDARY_OBJECTIVE = 732730851,
		UI_MISSION_NOTIFYSCAN = 1932812103,
		UI_MISSION_NOTIFYSCAN_END = 3295362121,
		UI_MISSIONPRIMARY_UPDATE = 4073624774,
		UI_NANITES_INSUFFICIENT = 2436124684,
		UI_NANITES_RECEIVED = 4001836096,
		UI_NEW_DISCOVERY = 2669263559,
		UI_NEW_SUIT_SLOT = 477984115,
		UI_NEW_TECH = 3230149307,
		UI_NEWTECH_WOOSH = 3356802997,
		UI_NEXT_MESSAGE = 819219473,
		UI_NOWHERETOLAND = 3238843736,
		UI_NPC_SHIP_HIT_ALERT = 2898295217,
		UI_NPC_SHIP_INTERACTION = 1001143561,
		UI_OXYGEN_REPLENISHED = 3184286286,
		UI_PAGE_CHANGE = 3428947486,
		UI_PHOTOMODE_CAMERAPLACE_END = 2230641370,
		UI_PHOTOMODE_CAMERAPLACE_START = 1222919881,
		UI_PHOTOMODE_IN = 63226467,
		UI_PHOTOMODE_OUT = 1789861598,
		UI_PHOTOMODE_TAKEPHOTO = 200908601,
		UI_PHOTOMODE_VALUEDOWN = 366058609,
		UI_PHOTOMODE_VALUEUP = 2322337430,
		UI_PICKUP_LOOT = 1554598435,
		UI_PICKUP_NITROGENPLANT = 1694903770,
		UI_PICKUP_PLANT = 1685079420,
		UI_PICKUP_RESOURCE = 2815161641,
		UI_PIRATES_WARNING = 3383726405,
		UI_PIRATES_WARNING_STOP = 2968038600,
		UI_PLACEMARKER = 3983888049,
		UI_PRODUCT_CREATED = 1888798398,
		UI_PROTECTION_OFFLINE = 3777853139,
		UI_PULSEDRIVE_OFFLINE = 554423067,
		UI_PURCHASE = 1378023143,
		UI_QUICKMENU_CLOSE = 1512935547,
		UI_QUICKMENU_NOCHARGE = 4153767524,
		UI_QUICKMENU_OPEN = 4258157981,
		UI_QUICKMENU_TAB = 986310006,
		UI_QUICKMENU_TECHCHARGE = 1065379769,
		UI_RARE_ITEM = 3948695812,
		UI_RECORD_UPLOADED = 3550585484,
		UI_REFINERY_DECREASE = 2342925785,
		UI_REFINERY_INCREASE = 2726559881,
		UI_RETICULE_LOCK = 3536167353,
		UI_RETICULE_ONTARGET = 2810498048,
		UI_SAVE = 272763609,
		UI_SCAN_PORTAL = 4054484686,
		UI_SELECT_GENERIC = 2935274652,
		UI_SENTINELDETECTOR = 4127338044,
		UI_SENTINELFORCES_ALERTED = 3747732370,
		UI_SENTINELFORCES_DEACTIVATED = 91057941,
		UI_SENTINELINVESTIGATORS_INCOMING = 1238818803,
		UI_SERVER_FOUND = 4027298922,
		UI_SERVER_SCANDISCOVERIES = 3974143045,
		UI_SERVER_SEARCHING_START = 1345310275,
		UI_SERVER_SELECT = 1338284846,
		UI_SERVER_SELECT_POPUP = 1830428773,
		UI_SETTLEMENT_BUILDINGCOMPLETE = 3073272543,
		UI_SETTLEMENT_DECISION = 3979660232,
		UI_SETTLEMENT_FLOORCOMPLETE = 3571912641,
		UI_SETTLEMENT_INVEST = 477732489,
		UI_SHIP_CUSTOMISATION_ASSEMBLE = 2376488592,
		UI_SHIP_CUSTOMISATION_CHANGE_SHIP = 2839178421,
		UI_SHIP_CUSTOMISATION_REMOVE = 3945198120,
		UI_SHIP_CUSTOMISATION_SELECT = 2130795848,
		UI_SHOP_ITEMS_MENU = 102310535,
		UI_SHOP_SCROLL_DOWN = 2270127805,
		UI_SHOP_SCROLL_UP = 2001239178,
		UI_SHOP_SWITCH_BUYSELL = 4019570460,
		UI_SHOP_SWITCH_INVENTORY = 3514066980,
		UI_SLEEP = 1911634139,
		UI_SPECIALS_INSUFFICIENT = 3495174572,
		UI_SPOOKYMESSAGE = 2049481054,
		UI_STANDING_DECREASED = 3347164623,
		UI_STANDING_INCREASED = 1298025503,
		UI_STAT_CHANGE = 3190835499,
		UI_TARGET_ONSCREEN = 2619419727,
		UI_TECH_BROKEN = 2132680226,
		UI_TECH_INSTALLED = 1955321165,
		UI_TERRAIN_CHANGESIZE = 4106667827,
		UI_TEXT_WOOSH = 2567758798,
		UI_TEXTENTRY = 3996708793,
		UI_TIP = 3781148677,
		UI_TRADING_MESSAGE = 2952981261,
		UI_TRADING_TEXT = 1880488429,
		UI_TRADING_TEXT_ONESHOT = 2717301988,
		UI_TRADING_TEXT_STOP = 3821385760,
		UI_TRADING_TEXT_TRANSLATE = 1076027498,
		UI_UNITS_RECEIVED = 2307708267,
		UI_VEGETABLE_COLLECT = 4237605284,
		UI_VR_HANDMENU_CLOSE = 911012006,
		UI_VR_HANDMENU_HIGHLIGHT = 3866257518,
		UI_VR_HANDMENU_OPEN = 288102642,
		UI_VR_HANDMENU_OPENLP = 3504143902,
		UI_VR_WRISTMENU_HIGHLIGHT = 2984279906,
		UI_VR_WRISTMENU_IN = 4232244903,
		UI_VR_WRISTMENU_OUT = 3714209050,
		UI_VR_WRISTMENU_SELECT = 1391173718,
		UI_VR_WRISTMENU_TOUCH = 163825071,
		UI_WAKEUP = 1465978177,
		UI_WANTED_INCREASE = 2159694266,
		UI_WANTED_INCREASE_01 = 2554339384,
		UI_WANTED_INCREASE_02 = 2554339387,
		UI_WANTED_INCREASE_03 = 2554339386,
		UI_WANTED_INCREASE_04 = 2554339389,
		UI_WANTED_INCREASE_05 = 2554339388,
		UI_WEAPON_FOUND = 1304070631,
		UI_WEIRDBIOME_COUNTDOWN = 1244489011,
		UI_WEIRDBIOME_COUNTDOWN_END = 1242895829,
		UI_WHALESONG = 4257282614,
		UI_WORD_LEARNT = 2740329391,
		UI_WPN_LOCKON = 2672515092,
		UI_WPN_RETICULE_LOCK = 2651931489,
		UI_WPN_TARGET_FOCUS = 4104693168,
		UNDERWATER_STEAMVENT_RUMBLE = 3310270886,
		UNDERWATER_STEAMVENT_VENTING = 3061595124,
		UNDERWATER_STEAMVENT_VENTING_END = 1798340714,
		VAULT_CLOSE = 2373813322,
		VAULT_OPEN = 1525204846,
		VEHICLE_DESTRUCTIBLE = 1641993852,
		VEHICLE_MARKER_COLLECT = 3423360975,
		VEHICLE_MARKER_DELETE = 3081788866,
		VEHICLE_MARKER_PLACE = 1187481120,
		VEHICLE_RACE_END = 2439653635,
		VEHICLE_RACE_START = 188413656,
		VEHICLE_SPAWN = 1535298655,
		VENUSFLYTRAP_CLOSE = 1915456699,
		VENUSFLYTRAP_OPEN = 3275053533,
		VIEW_FIRSTPERSON = 2276274114,
		VIEW_THIRDPERSON = 1925050367,
		VILESPAWN_EGG_COLLECT = 3682824825,
		VILESPAWN_LP = 2895942271,
		VILESPAWN_LP_STOP = 1573625034,
		VO_ANOMALYDETECTED = 4211663104,
		VO_BASECOMPUTER_ONLINE = 2831470351,
		VO_INVENTORY_FULL = 461300987,
		VO_PRODUCT_CONSTRUCTED = 1347699473,
		VO_SECURE_TRADEMODULE_LOCATED = 2543323772,
		VO_SECURE_TRANSMISSIONMODULE_LOCATED = 3657000392,
		VO_STARSHIP_SIGNAL = 1105946740,
		VO_TECH_COMP_REPAIRED = 3250932190,
		VO_TECH_INSTALLED = 4058033412,
		VO_TECH_OFFLINE = 806590379,
		VO_TECH_RECHARGED = 547693767,
		VO_TECH_REPAIRED = 3608735718,
		VO_TUT_COORDSRECEIVED = 2686710122,
		VO_TUT_STATIONCOORDSRECEIVED = 95899052,
		VR_FOLEY_ARM_MOVEMENTS = 4209118041,
		VR_FOLEY_ARM_MOVEMENTS_LEFT = 3683156111,
		VR_FOLEY_ARM_MOVEMENTS_RIGHT = 2222104402,
		VR_FOLEY_ARMS_WOOSH = 1068440112,
		VR_FOLEY_HAND_CLENCH_CLOSE = 480413662,
		VR_FOLEY_HAND_CLENCH_OPEN = 4190662522,
		VR_PULLTOUSE = 1782927043,
		VR_PULLTOUSE_STOP = 843860526,
		VR_TELEPORTMOVE = 2952721386,
		VR_THEREMIN = 3343065366,
		WALKER_CHARGEUP = 3097612505,
		WALKER_DIE = 2928402536,
		WALKER_EMOTE_LP = 719817013,
		WALKER_EMOTE_LP_STOP = 3883505624,
		WALKER_ENRAGE = 3137661732,
		WALKER_FALL_IMPACT = 706709666,
		WALKER_IDLE = 2999450336,
		WALKER_LASER = 2829856335,
		WALKER_LASER_STOP = 3438713978,
		WALKER_LEG_HIT_IDLE = 2300078273,
		WALKER_LEG_HIT_LEFT_IN_01 = 209998576,
		WALKER_LEG_HIT_LEFT_IN_02 = 209998579,
		WALKER_LEG_HIT_LEFT_OUT_01 = 2135470921,
		WALKER_LEG_HIT_LEFT_OUT_02 = 2135470922,
		WALKER_LEG_HIT_RIGHT_IN_01 = 3678113983,
		WALKER_LEG_HIT_RIGHT_IN_02 = 3678113980,
		WALKER_LEG_HIT_RIGHT_OUT_01 = 2964903764,
		WALKER_LEG_HIT_RIGHT_OUT_02 = 2964903767,
		WALKER_MOVE = 303786705,
		WALKER_SIT = 2926283798,
		WALKER_SQUAWKER = 3101502923,
		WALKER_STAND = 3301500158,
		WALKER_STEP = 3056818156,
		WALKINGBUILDING_AMBIENT_LP = 2135640002,
		WALKINGBUILDING_ATTACK = 3801618789,
		WALKINGBUILDING_AWAKEN = 2208085772,
		WALKINGBUILDING_EVADE = 3890281744,
		WALKINGBUILDING_MOVE_SMALL = 1145387830,
		WALKINGBUILDING_POUNCE = 53936303,
		WALKINGBUILDING_POUNCE_BACK = 458125207,
		WALKINGBUILDING_STUNNED = 576094026,
		WARN_CIVILIANSHIELDS = 3153565387,
		WARN_DISTRESS_DETECTED = 1689749890,
		WARN_HOSTILE_APPROACH = 1105027473,
		WARN_HOSTILE_DETECTED = 1273218079,
		WARN_HOSTILE_SCAN = 356986526,
		WARRIORANGRY = 2223624956,
		WARRIORCHATTER = 4139651952,
		WARRIORGREET1 = 3988243341,
		WARRIORGREET2 = 3988243342,
		WARRIORGREET3 = 3988243343,
		WARRIORHAPPY01 = 1039060760,
		WARRIORHAPPY02 = 1039060763,
		WARRIORHAPPY03 = 1039060762,
		WARRIORHONOUR = 3698328094,
		WATERFALL = 2074477625,
		WEAPONTECHSTATION_IN = 2635183507,
		WEAPONTECHSTATION_OUT = 3469956014,
		WEATHER_OVER = 4139171360,
		WEATHER_WARN = 3688258070,
		WEIRDBEAMSTONE = 797025488,
		WEIRDBEAMSTONE_STOP = 4211193503,
		WEIRDBUBBLE = 2583025390,
		WEIRDBUBBLE_STOP = 1076058861,
		WEIRDCONTOUR = 565041878,
		WEIRDFLOAT_LP = 4208116821,
		WEIRDFLOAT_STOP = 2748074065,
		WEIRDOFRACTCUBE = 2039614538,
		WEIRDROLL_LP = 780492524,
		WEIRDROLL_STOP = 450488928,
		WEIRDSHARDS = 4048634783,
		WEIRDWIRECELL = 3314118587,
		WINGFLAP = 333542113,
		WOOSH_DROID_SMALL_01_FRONT = 297568986,
		WOOSH_DROID_SMALL_01_MID = 3473928497,
		WOOSH_DROID_SMALL_01_REAR = 3928749951,
		WPN_BROKEN = 2784902906,
		WPN_GROUND_SIZZLE = 1109588194,
		WPN_MELEE_IMPACT_CREATURE = 2718991944,
		WPN_MELEE_IMPACT_GENERIC = 3405827486,
		WPN_NOAMMO = 329188022,
		WPN_NOTECHTOOL = 3650641058,
		WPN_NOTOOL = 3181582258,
		WPN_PL_CHANGE = 3077859156,
		WPN_PL_DEPLETED = 4177552889,
		WPN_PL_GRENADE = 4036580414,
		WPN_PL_GRENADE_BOUNCE = 3445433421,
		WPN_PL_GRENADE_EXPLODE = 406583408,
		WPN_PL_HANDLASER = 3201991932,
		WPN_PL_HANDLASER_OVERHEAT = 3544769539,
		WPN_PL_HANDLASER_STOP = 2191565963,
		WPN_PL_JAVELIN_CHARGE = 4031014832,
		WPN_PL_JAVELIN_CHARGE_END = 3065630806,
		WPN_PL_MELEE = 2411764952,
		WPN_PL_NEUTRON_CANNON_BUILDUP = 3492763105,
		WPN_PL_NEUTRON_CANNON_CHARGE_END = 1827911144,
		WPN_PL_NEUTRON_CANNON_FIRE = 2478971518,
		WPN_PL_NEUTRON_CANNON_FIRE_CHARGED = 2184721947,
		WPN_PL_NEUTRON_CANNON_LP = 3199661166,
		WPN_PL_OUTOFAMMO_GUN = 3016897146,
		WPN_PL_PISTOL = 3283242809,
		WPN_PL_PISTOL_RELOAD = 3934477835,
		WPN_PL_PUTAWAY = 2351811961,
		WPN_PL_RAILGUN = 3988465362,
		WPN_PL_RAILGUN_PATHFINDER = 1889341932,
		WPN_PL_RAILGUN_RELOAD = 3462987238,
		WPN_PL_SCAN = 2654277663,
		WPN_PL_SCAN_STOP = 3907022506,
		WPN_PL_SCATTERBLASTER = 3304217333,
		WPN_PL_SHOTGUN = 311296194,
		WPN_PL_SHOTGUN_PATHFINDER = 941243004,
		WPN_PL_SHOTGUN_RELOAD = 2698135478,
		WPN_PL_SMG = 1046143591,
		WPN_PL_TAKEOUT = 1558766251,
		WPN_SHIP_CHANGE = 1511168854,
		WPN_SHIP_CYCLOTRON_FIRE = 1980885110,
		WPN_SHIP_CYCLOTRON_OVERHEAT = 1121880130,
		WPN_SHIP_GUN = 447514284,
		WPN_SHIP_INFRAKNIFE_FIRE = 262551670,
		WPN_SHIP_INFRAKNIFE_OVERHEAT = 3043481666,
		WPN_SHIP_LASER = 1488157423,
		WPN_SHIP_LASER_STOP = 1090233306,
		WPN_SHIP_MISSILE_OVERHEAT = 3566539753,
		WPN_SHIP_OUTOFAMMO = 3988319235,
		WPN_SHIP_OVERHEAT = 3186365130,
		WPN_SHIP_POSITRON_FIRE = 3916643031,
		WPN_SHIP_POSITRON_OVERHEAT = 2413750307,
		WPN_SHIP_READY = 4263241463,
		WPN_TERRAIN_BUILD = 3141878185,
		WPN_TERRAIN_BUILD_END = 736067403,
		WPN_TERRAIN_DESTROY = 2223503391,
		WPN_TERRAIN_DESTROY_END = 3303593601,
		WPN_TERRAIN_END = 867290390,
		WPN_TERRAIN_UNDO = 2310527261,
	};

	NMS_GameComponents::GcAudioWwiseEvents::AkEventEnum AkEvent;

	friend bool operator==(const GcAudioWwiseEvents& lhs, const GcAudioWwiseEvents& rhs) 
	{
		return lhs.AkEvent == rhs.AkEvent;
	}
};

struct GcStatsTypes
{
	enum class StatsTypeEnum : uint32_t
	{
		Unspecified = 0,
		Weapon_Laser = 1,
		Weapon_Laser_Damage = 2,
		Weapon_Laser_Mining_Speed = 3,
		Weapon_Laser_HeatTime = 4,
		Weapon_Laser_Bounce = 5,
		Weapon_Laser_ReloadTime = 6,
		Weapon_Laser_Recoil = 7,
		Weapon_Laser_Drain = 8,
		Weapon_Laser_StrongLaser = 9,
		Weapon_Laser_ChargeTime = 10,
		Weapon_Laser_MiningBonus = 11,
		Weapon_Projectile = 12,
		Weapon_Projectile_Damage = 13,
		Weapon_Projectile_Range = 14,
		Weapon_Projectile_Rate = 15,
		Weapon_Projectile_ClipSize = 16,
		Weapon_Projectile_ReloadTime = 17,
		Weapon_Projectile_Recoil = 18,
		Weapon_Projectile_Bounce = 19,
		Weapon_Projectile_Homing = 20,
		Weapon_Projectile_Dispersion = 21,
		Weapon_Projectile_BulletsPerShot = 22,
		Weapon_Projectile_MinimumCharge = 23,
		Weapon_Projectile_MaximumCharge = 24,
		Weapon_Projectile_BurstCap = 25,
		Weapon_Projectile_BurstCooldown = 26,
		Weapon_ChargedProjectile = 27,
		Weapon_ChargedProjectile_ChargeTime = 28,
		Weapon_ChargedProjectile_CooldownDuration = 29,
		Weapon_ChargedProjectile_Drain = 30,
		Weapon_ChargedProjectile_ExtraSpeed = 31,
		Weapon_Rail = 32,
		Weapon_Shotgun = 33,
		Weapon_Burst = 34,
		Weapon_Flame = 35,
		Weapon_Cannon = 36,
		Weapon_Grenade = 37,
		Weapon_Grenade_Damage = 38,
		Weapon_Grenade_Radius = 39,
		Weapon_Grenade_Speed = 40,
		Weapon_Grenade_Bounce = 41,
		Weapon_Grenade_Homing = 42,
		Weapon_Grenade_Clusterbomb = 43,
		Weapon_TerrainEdit = 44,
		Weapon_SunLaser = 45,
		Weapon_SoulLaser = 46,
		Weapon_MineGrenade = 47,
		Weapon_FrontShield = 48,
		Weapon_Scope = 49,
		Weapon_Spawner = 50,
		Weapon_SpawnerAlt = 51,
		Weapon_Melee = 52,
		Weapon_StunGrenade = 53,
		Weapon_Stealth = 54,
		Weapon_Scan = 55,
		Weapon_Scan_Radius = 56,
		Weapon_Scan_Recharge_Time = 57,
		Weapon_Scan_Types = 58,
		Weapon_Scan_Binoculars = 59,
		Weapon_Scan_Discovery_Creature = 60,
		Weapon_Scan_Discovery_Flora = 61,
		Weapon_Scan_Discovery_Mineral = 62,
		Weapon_Scan_Secondary = 63,
		Weapon_Scan_Terrain_Resource = 64,
		Weapon_Scan_Surveying = 65,
		Weapon_Scan_BuilderReveal = 66,
		Weapon_Fish = 67,
		Weapon_Stun = 68,
		Weapon_Stun_Duration = 69,
		Weapon_Stun_Damage_Multiplier = 70,
		Weapon_FireDOT = 71,
		Weapon_FireDOT_Duration = 72,
		Weapon_FireDOT_DPS = 73,
		Weapon_FireDOT_Damage_Multiplier = 74,
		Suit_Armour_Health = 75,
		Suit_Armour_Shield = 76,
		Suit_Armour_Shield_Strength = 77,
		Suit_Energy = 78,
		Suit_Energy_Regen = 79,
		Suit_Protection = 80,
		Suit_Protection_Cold = 81,
		Suit_Protection_Heat = 82,
		Suit_Protection_Toxic = 83,
		Suit_Protection_Radiation = 84,
		Suit_Protection_Spook = 85,
		Suit_Protection_Pressure = 86,
		Suit_Underwater = 87,
		Suit_UnderwaterLifeSupport = 88,
		Suit_DamageReduce_Cold = 89,
		Suit_DamageReduce_Heat = 90,
		Suit_DamageReduce_Toxic = 91,
		Suit_DamageReduce_Radiation = 92,
		Suit_Protection_HeatDrain = 93,
		Suit_Protection_ColdDrain = 94,
		Suit_Protection_ToxDrain = 95,
		Suit_Protection_RadDrain = 96,
		Suit_Protection_WaterDrain = 97,
		Suit_Protection_SpookDrain = 98,
		Suit_Stamina_Strength = 99,
		Suit_Stamina_Speed = 100,
		Suit_Stamina_Recovery = 101,
		Suit_Jetpack = 102,
		Suit_Jetpack_Tank = 103,
		Suit_Jetpack_Drain = 104,
		Suit_Jetpack_Refill = 105,
		Suit_Jetpack_Ignition = 106,
		Suit_Jetpack_DoubleJump = 107,
		Suit_Jetpack_WaterEfficiency = 108,
		Suit_Jetpack_MidairRefill = 109,
		Suit_Refiner = 110,
		Suit_AutoTranslator = 111,
		Suit_Utility = 112,
		Suit_RocketLocker = 113,
		Suit_FishPlatform = 114,
		Suit_FoodUnit = 115,
		Suit_Denier = 116,
		Suit_Vehicle_Summon = 117,
		Ship_Weapons_Guns = 118,
		Ship_Weapons_Guns_Damage = 119,
		Ship_Weapons_Guns_Rate = 120,
		Ship_Weapons_Guns_HeatTime = 121,
		Ship_Weapons_Guns_CoolTime = 122,
		Ship_Weapons_Guns_Scale = 123,
		Ship_Weapons_Guns_BulletsPerShot = 124,
		Ship_Weapons_Guns_Dispersion = 125,
		Ship_Weapons_Guns_Range = 126,
		Ship_Weapons_Guns_Damage_Radius = 127,
		Ship_Weapons_Lasers = 128,
		Ship_Weapons_Lasers_Damage = 129,
		Ship_Weapons_Lasers_HeatTime = 130,
		Ship_Weapons_Missiles = 131,
		Ship_Weapons_Missiles_NumPerShot = 132,
		Ship_Weapons_Missiles_Speed = 133,
		Ship_Weapons_Missiles_Damage = 134,
		Ship_Weapons_Missiles_Size = 135,
		Ship_Weapons_Shotgun = 136,
		Ship_Weapons_MiniGun = 137,
		Ship_Weapons_Plasma = 138,
		Ship_Weapons_Rockets = 139,
		Ship_Weapons_ShieldLeech = 140,
		Ship_Armour_Shield = 141,
		Ship_Armour_Shield_Strength = 142,
		Ship_Armour_Health = 143,
		Ship_Scan = 144,
		Ship_Scan_EconomyFilter = 145,
		Ship_Scan_ConflictFilter = 146,
		Ship_Hyperdrive = 147,
		Ship_Hyperdrive_JumpDistance = 148,
		Ship_Hyperdrive_JumpsPerCell = 149,
		Ship_Hyperdrive_QuickWarp = 150,
		Ship_Launcher = 151,
		Ship_Launcher_TakeOffCost = 152,
		Ship_Launcher_AutoCharge = 153,
		Ship_PulseDrive = 154,
		Ship_PulseDrive_MiniJumpFuelSpending = 155,
		Ship_PulseDrive_MiniJumpSpeed = 156,
		Ship_Boost = 157,
		Ship_Maneuverability = 158,
		Ship_BoostManeuverability = 159,
		Ship_LifeSupport = 160,
		Ship_Drift = 161,
		Ship_Teleport = 162,
		Ship_CargoShield = 163,
		Ship_WaterLandingJet = 164,
		Freighter_Hyperdrive = 165,
		Freighter_Hyperdrive_JumpDistance = 166,
		Freighter_Hyperdrive_JumpsPerCell = 167,
		Freighter_MegaWarp = 168,
		Freighter_Teleport = 169,
		Freighter_Fleet_Boost = 170,
		Freighter_Fleet_Speed = 171,
		Freighter_Fleet_Fuel = 172,
		Freighter_Fleet_Combat = 173,
		Freighter_Fleet_Trade = 174,
		Freighter_Fleet_Explore = 175,
		Freighter_Fleet_Mine = 176,
		Vehicle_Boost = 177,
		Vehicle_Engine = 178,
		Vehicle_Scan = 179,
		Vehicle_EngineFuelUse = 180,
		Vehicle_EngineTopSpeed = 181,
		Vehicle_BoostSpeed = 182,
		Vehicle_BoostTanks = 183,
		Vehicle_Grip = 184,
		Vehicle_SkidGrip = 185,
		Vehicle_SubBoostSpeed = 186,
		Vehicle_Laser = 187,
		Vehicle_LaserDamage = 188,
		Vehicle_LaserHeatTime = 189,
		Vehicle_LaserStrongLaser = 190,
		Vehicle_Gun = 191,
		Vehicle_GunDamage = 192,
		Vehicle_GunHeatTime = 193,
		Vehicle_GunRate = 194,
		Vehicle_StunGun = 195,
		Vehicle_TerrainEdit = 196,
		Vehicle_FuelRegen = 197,
		Vehicle_AutoPilot = 198,
		Vehicle_Flame = 199,
		Vehicle_FlameDamage = 200,
		Vehicle_FlameHeatTime = 201,
		Vehicle_Refiner = 202,
	};

	NMS_GameComponents::GcStatsTypes::StatsTypeEnum StatsType;

	friend bool operator==(const GcStatsTypes& lhs, const GcStatsTypes& rhs) 
	{
		return lhs.StatsType == rhs.StatsType;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcCombatEffectData
{
	NMS::NMSString0x10 DamageId;
	NMS::NMSString0x10 ParticlesId;
	float DamageMergeTime;
	float DamageMinDistance;
	float DamageTimeBetweenNumbers;
	NMS_GameComponents::GcAudioWwiseEvents EndAudio;
	NMS_GameComponents::GcAudioWwiseEvents StartAudio;
	NMS_GameComponents::GcStatsTypes Stat;
	bool OverrideDamageNumberData;

	friend bool operator==(const GcCombatEffectData& lhs, const GcCombatEffectData& rhs) 
	{
		return lhs.DamageId == rhs.DamageId &&
		lhs.ParticlesId == rhs.ParticlesId &&
		lhs.DamageMergeTime == rhs.DamageMergeTime &&
		lhs.DamageMinDistance == rhs.DamageMinDistance &&
		lhs.DamageTimeBetweenNumbers == rhs.DamageTimeBetweenNumbers &&
		lhs.EndAudio == rhs.EndAudio &&
		lhs.StartAudio == rhs.StartAudio &&
		lhs.Stat == rhs.Stat &&
		lhs.OverrideDamageNumberData == rhs.OverrideDamageNumberData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkModelResource
{
	NMS::VariableSizeString Filename;
	uint64_t Seed;
	NMS::GcResource ResHandle;

	friend bool operator==(const TkModelResource& lhs, const TkModelResource& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.Seed == rhs.Seed &&
		lhs.ResHandle == rhs.ResHandle;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct TkIdModelResource
{
	NMS_Toolkit::TkModelResource Model;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkIdModelResource& lhs, const TkIdModelResource& rhs) 
	{
		return lhs.Model == rhs.Model &&
		lhs.Id == rhs.Id;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionLifeSupportEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionLifeSupportEnabled& lhs, const GcMissionConditionLifeSupportEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcNodeID
{
	int32_t NodeID;

	friend bool operator==(const GcNodeID& lhs, const GcNodeID& rhs) 
	{
		return lhs.NodeID == rhs.NodeID;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcDiscoveryRewardLookup
{
	NMS::NMSString0x10 BiomeSpecific[17];
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Secondary;

	friend bool operator==(const GcDiscoveryRewardLookup& lhs, const GcDiscoveryRewardLookup& rhs) 
	{
		return std::equal(std::begin(lhs.BiomeSpecific), std::end(lhs.BiomeSpecific), std::begin(rhs.BiomeSpecific)) &&
		lhs.Id == rhs.Id &&
		lhs.Secondary == rhs.Secondary;
	}
};

//Dependency: GcDiscoveryRewardLookup
struct GcDiscoveryRewardLookupTable
{
	std::vector<NMS_GameComponents::GcDiscoveryRewardLookup> Table;

	friend bool operator==(const GcDiscoveryRewardLookupTable& lhs, const GcDiscoveryRewardLookupTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcNPCHabitationType
{
	enum class NPCHabitationTypeEnum : uint32_t
	{
		WeaponsExpert = 0,
		Farmer = 1,
		Builder = 2,
		Vehicles = 3,
		Scientist = 4,
	};

	NMS_GameComponents::GcNPCHabitationType::NPCHabitationTypeEnum NPCHabitationType;

	friend bool operator==(const GcNPCHabitationType& lhs, const GcNPCHabitationType& rhs) 
	{
		return lhs.NPCHabitationType == rhs.NPCHabitationType;
	}
};

//Dependency: GcNPCHabitationType
struct GcCostNPCHabitation
{
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;
	bool MustBeInhabited;

	friend bool operator==(const GcCostNPCHabitation& lhs, const GcCostNPCHabitation& rhs) 
	{
		return lhs.NPCHabitationType == rhs.NPCHabitationType &&
		lhs.MustBeInhabited == rhs.MustBeInhabited;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFreighterPods
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	bool TakeAmountFromPulseEncounter;

	friend bool operator==(const GcMissionSequenceWaitForFreighterPods& lhs, const GcMissionSequenceWaitForFreighterPods& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount &&
		lhs.TakeAmountFromPulseEncounter == rhs.TakeAmountFromPulseEncounter;
	}
};

//Dependency: Vector3f
struct GcDebugShipTravelLine
{
	NMS::Vector3f Dir;
	NMS::Vector3f Origin;
	float InfluenceRange;
	float Length;

	friend bool operator==(const GcDebugShipTravelLine& lhs, const GcDebugShipTravelLine& rhs) 
	{
		return lhs.Dir == rhs.Dir &&
		lhs.Origin == rhs.Origin &&
		lhs.InfluenceRange == rhs.InfluenceRange &&
		lhs.Length == rhs.Length;
	}
};

struct GcProductTableType
{
	enum class ProductTableTypeEnum : uint32_t
	{
		Main = 0,
		BaseParts = 1,
		ModularCustomisation = 2,
	};

	NMS_GameComponents::GcProductTableType::ProductTableTypeEnum ProductTableType;

	friend bool operator==(const GcProductTableType& lhs, const GcProductTableType& rhs) 
	{
		return lhs.ProductTableType == rhs.ProductTableType;
	}
};

struct GcFrigateTraitStrength
{
	enum class FrigateTraitStrengthEnum : uint32_t
	{
		NegativeLarge = 0,
		NegativeMedium = 1,
		NegativeSmall = 2,
		TertiarySmall = 3,
		TertiaryMedium = 4,
		TertiaryLarge = 5,
		SecondarySmall = 6,
		SecondaryMedium = 7,
		SecondaryLarge = 8,
		Primary = 9,
	};

	NMS_GameComponents::GcFrigateTraitStrength::FrigateTraitStrengthEnum FrigateTraitStrength;

	friend bool operator==(const GcFrigateTraitStrength& lhs, const GcFrigateTraitStrength& rhs) 
	{
		return lhs.FrigateTraitStrength == rhs.FrigateTraitStrength;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcModelExplosionRule
{
	enum class MatchNodeTypeEnum : uint32_t
	{
		Any = 0,
		Mesh = 1,
		Model = 2,
		Joint = 3,
	};

	enum class MatchNameEnum : uint32_t
	{
		ContainsString = 0,
		ExactString = 1,
	};

	enum class ExplodeActionEnum : uint32_t
	{
		RelativeToParent = 0,
		DontMove = 1,
		SaveCenter = 2,
		RelativeToSaved = 3,
	};

	NMS::Vector3f AxisMultiplier;
	NMS::Vector3f Offset;
	NMS_GameComponents::GcModelExplosionRule::ExplodeActionEnum ExplodeAction;
	float ExplodeMod;
	NMS_GameComponents::GcModelExplosionRule::MatchNameEnum MatchName;
	NMS_GameComponents::GcModelExplosionRule::MatchNodeTypeEnum MatchNodeType;
	NMS::NMSString0x20 String;

	friend bool operator==(const GcModelExplosionRule& lhs, const GcModelExplosionRule& rhs) 
	{
		return lhs.AxisMultiplier == rhs.AxisMultiplier &&
		lhs.Offset == rhs.Offset &&
		lhs.ExplodeAction == rhs.ExplodeAction &&
		lhs.ExplodeMod == rhs.ExplodeMod &&
		lhs.MatchName == rhs.MatchName &&
		lhs.MatchNodeType == rhs.MatchNodeType &&
		lhs.String == rhs.String;
	}
};

//Dependency: GcModelExplosionRule
struct GcModelExplosionRules
{
	std::vector<NMS_GameComponents::GcModelExplosionRule> Rules;
	float ShipSalvageDisplayScales[10];
	bool UseRules[10];

	friend bool operator==(const GcModelExplosionRules& lhs, const GcModelExplosionRules& rhs) 
	{
		return lhs.Rules == rhs.Rules &&
		std::equal(std::begin(lhs.ShipSalvageDisplayScales), std::end(lhs.ShipSalvageDisplayScales), std::begin(rhs.ShipSalvageDisplayScales)) &&
		std::equal(std::begin(lhs.UseRules), std::end(lhs.UseRules), std::begin(rhs.UseRules));
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct EmptyNode
{
	uint8_t Padding;

	friend bool operator==(const EmptyNode& lhs, const EmptyNode& rhs) 
	{
		return lhs.Padding == rhs.Padding;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcInventoryCostDataEntry
{
	float ClassMultiplier[4];
	float CoolMultiplier;
	int32_t MaxSlots;
	float MaxValueInMillions;
	int32_t MinSlots;
	float MinValueInMillions;
	float TradeInMultiplier;

	friend bool operator==(const GcInventoryCostDataEntry& lhs, const GcInventoryCostDataEntry& rhs) 
	{
		return std::equal(std::begin(lhs.ClassMultiplier), std::end(lhs.ClassMultiplier), std::begin(rhs.ClassMultiplier)) &&
		lhs.CoolMultiplier == rhs.CoolMultiplier &&
		lhs.MaxSlots == rhs.MaxSlots &&
		lhs.MaxValueInMillions == rhs.MaxValueInMillions &&
		lhs.MinSlots == rhs.MinSlots &&
		lhs.MinValueInMillions == rhs.MinValueInMillions &&
		lhs.TradeInMultiplier == rhs.TradeInMultiplier;
	}
};

//Dependency: GcInventoryCostDataEntry
struct GcInventoryCostData
{
	NMS_GameComponents::GcInventoryCostDataEntry InventoryCostData[10];

	friend bool operator==(const GcInventoryCostData& lhs, const GcInventoryCostData& rhs) 
	{
		return std::equal(std::begin(lhs.InventoryCostData), std::end(lhs.InventoryCostData), std::begin(rhs.InventoryCostData));
	}
};

//Dependency: NMSString0x10
struct GcInventoryGenerationBaseStatDataEntry
{
	NMS::NMSString0x10 BaseStatID;
	float Max;
	float MaxFixedAdd;
	float Min;
	float MinFixedAdd;

	friend bool operator==(const GcInventoryGenerationBaseStatDataEntry& lhs, const GcInventoryGenerationBaseStatDataEntry& rhs) 
	{
		return lhs.BaseStatID == rhs.BaseStatID &&
		lhs.Max == rhs.Max &&
		lhs.MaxFixedAdd == rhs.MaxFixedAdd &&
		lhs.Min == rhs.Min &&
		lhs.MinFixedAdd == rhs.MinFixedAdd;
	}
};

//Dependency: GcInventoryGenerationBaseStatDataEntry
struct GcInventoryGenerationBaseStatClassData
{
	std::vector<NMS_GameComponents::GcInventoryGenerationBaseStatDataEntry> BaseStats;

	friend bool operator==(const GcInventoryGenerationBaseStatClassData& lhs, const GcInventoryGenerationBaseStatClassData& rhs) 
	{
		return lhs.BaseStats == rhs.BaseStats;
	}
};

//Dependency: GcInventoryGenerationBaseStatClassData
struct GcInventoryGenerationBaseStatData
{
	NMS_GameComponents::GcInventoryGenerationBaseStatClassData BaseStatsPerClass[4];

	friend bool operator==(const GcInventoryGenerationBaseStatData& lhs, const GcInventoryGenerationBaseStatData& rhs) 
	{
		return std::equal(std::begin(lhs.BaseStatsPerClass), std::end(lhs.BaseStatsPerClass), std::begin(rhs.BaseStatsPerClass));
	}
};

struct GcInventoryClassProbabilities
{
	float ClassProbabilities[4];

	friend bool operator==(const GcInventoryClassProbabilities& lhs, const GcInventoryClassProbabilities& rhs) 
	{
		return std::equal(std::begin(lhs.ClassProbabilities), std::end(lhs.ClassProbabilities), std::begin(rhs.ClassProbabilities));
	}
};

//Dependency: GcStatsTypes
struct GcInventoryBaseStatBonus
{
	NMS_GameComponents::GcStatsTypes StatType;
	bool LessIsBetter;

	friend bool operator==(const GcInventoryBaseStatBonus& lhs, const GcInventoryBaseStatBonus& rhs) 
	{
		return lhs.StatType == rhs.StatType &&
		lhs.LessIsBetter == rhs.LessIsBetter;
	}
};

//Dependency: GcInventoryBaseStatBonus
//Dependency: NMSString0x10
struct GcInventoryBaseStat
{
	NMS::NMSString0x10 BaseStatID;
	NMS::NMSString0x10 LocID;
	std::vector<NMS_GameComponents::GcInventoryBaseStatBonus> StatBonus;

	friend bool operator==(const GcInventoryBaseStat& lhs, const GcInventoryBaseStat& rhs) 
	{
		return lhs.BaseStatID == rhs.BaseStatID &&
		lhs.LocID == rhs.LocID &&
		lhs.StatBonus == rhs.StatBonus;
	}
};

struct GcInventoryLayoutSizeType
{
	enum class SizeTypeEnum : uint32_t
	{
		SciSmall = 0,
		SciMedium = 1,
		SciLarge = 2,
		FgtSmall = 3,
		FgtMedium = 4,
		FgtLarge = 5,
		ShuSmall = 6,
		ShtMedium = 7,
		ShtLarge = 8,
		DrpSmall = 9,
		DrpMedium = 10,
		DrpLarge = 11,
		RoySmall = 12,
		RoyMedium = 13,
		RoyLarge = 14,
		AlienSmall = 15,
		AlienMedium = 16,
		AlienLarge = 17,
		SailSmall = 18,
		SailMedium = 19,
		SailLarge = 20,
		RobotSmall = 21,
		RobotMedium = 22,
		RobotLarge = 23,
		WeaponSmall = 24,
		WeaponMedium = 25,
		WeaponLarge = 26,
		FreighterSmall = 27,
		FreighterMedium = 28,
		FreighterLarge = 29,
		VehicleSmall = 30,
		VehicleMedium = 31,
		VehicleLarge = 32,
		ChestSmall = 33,
		ChestMedium = 34,
		ChestLarge = 35,
		ChestCapsule = 36,
		Suit = 37,
		MaintObject = 38,
		RocketLocker = 39,
		FishBaitBox = 40,
		FishingPlatform = 41,
		FoodUnit = 42,
	};

	NMS_GameComponents::GcInventoryLayoutSizeType::SizeTypeEnum SizeType;

	friend bool operator==(const GcInventoryLayoutSizeType& lhs, const GcInventoryLayoutSizeType& rhs) 
	{
		return lhs.SizeType == rhs.SizeType;
	}
};

//Dependency: GcInventoryLayoutSizeType
//Dependency: NMSString0x10
struct GcInventoryTableEntry
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryLayoutSizeType LayoutSizeType;
	int32_t MaxSize;
	int32_t MinSize;

	friend bool operator==(const GcInventoryTableEntry& lhs, const GcInventoryTableEntry& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.LayoutSizeType == rhs.LayoutSizeType &&
		lhs.MaxSize == rhs.MaxSize &&
		lhs.MinSize == rhs.MinSize;
	}
};

struct GcShipInventoryMaxUpgradeCapacity
{
	int32_t MaxCargoInventoryCapacity[4];
	int32_t MaxInventoryCapacity[4];
	int32_t MaxTechInventoryCapacity[4];

	friend bool operator==(const GcShipInventoryMaxUpgradeCapacity& lhs, const GcShipInventoryMaxUpgradeCapacity& rhs) 
	{
		return std::equal(std::begin(lhs.MaxCargoInventoryCapacity), std::end(lhs.MaxCargoInventoryCapacity), std::begin(rhs.MaxCargoInventoryCapacity)) &&
		std::equal(std::begin(lhs.MaxInventoryCapacity), std::end(lhs.MaxInventoryCapacity), std::begin(rhs.MaxInventoryCapacity)) &&
		std::equal(std::begin(lhs.MaxTechInventoryCapacity), std::end(lhs.MaxTechInventoryCapacity), std::begin(rhs.MaxTechInventoryCapacity));
	}
};

struct GcInventoryLayoutGenerationBounds
{
	int32_t MaxHeightLarge;
	int32_t MaxHeightSmall;
	int32_t MaxHeightStandard;
	int32_t MaxWidthLarge;
	int32_t MaxWidthSmall;
	int32_t MaxWidthStandard;

	friend bool operator==(const GcInventoryLayoutGenerationBounds& lhs, const GcInventoryLayoutGenerationBounds& rhs) 
	{
		return lhs.MaxHeightLarge == rhs.MaxHeightLarge &&
		lhs.MaxHeightSmall == rhs.MaxHeightSmall &&
		lhs.MaxHeightStandard == rhs.MaxHeightStandard &&
		lhs.MaxWidthLarge == rhs.MaxWidthLarge &&
		lhs.MaxWidthSmall == rhs.MaxWidthSmall &&
		lhs.MaxWidthStandard == rhs.MaxWidthStandard;
	}
};

//Dependency: GcInventoryLayoutGenerationBounds
//Dependency: GcInventoryIndex
struct GcInventoryLayoutGenerationDataEntry
{
	NMS_GameComponents::GcInventoryLayoutGenerationBounds Bounds;
	NMS_GameComponents::GcInventoryLayoutGenerationBounds TechBounds;
	NMS_GameComponents::GcInventoryIndex SpecialTechSlotMaxIndex;
	int32_t MaxCargoSlots;
	int32_t MaxNumSpecialTechSlots;
	int32_t MaxSlots;
	int32_t MaxTechSlots;
	int32_t MinCargoSlots;
	int32_t MinSlots;
	int32_t MinTechSlots;

	friend bool operator==(const GcInventoryLayoutGenerationDataEntry& lhs, const GcInventoryLayoutGenerationDataEntry& rhs) 
	{
		return lhs.Bounds == rhs.Bounds &&
		lhs.TechBounds == rhs.TechBounds &&
		lhs.SpecialTechSlotMaxIndex == rhs.SpecialTechSlotMaxIndex &&
		lhs.MaxCargoSlots == rhs.MaxCargoSlots &&
		lhs.MaxNumSpecialTechSlots == rhs.MaxNumSpecialTechSlots &&
		lhs.MaxSlots == rhs.MaxSlots &&
		lhs.MaxTechSlots == rhs.MaxTechSlots &&
		lhs.MinCargoSlots == rhs.MinCargoSlots &&
		lhs.MinSlots == rhs.MinSlots &&
		lhs.MinTechSlots == rhs.MinTechSlots;
	}
};

//Dependency: GcInventoryLayoutGenerationDataEntry
struct GcInventoryLayoutGenerationData
{
	NMS_GameComponents::GcInventoryLayoutGenerationDataEntry GenerationDataPerSizeType[43];

	friend bool operator==(const GcInventoryLayoutGenerationData& lhs, const GcInventoryLayoutGenerationData& rhs) 
	{
		return std::equal(std::begin(lhs.GenerationDataPerSizeType), std::end(lhs.GenerationDataPerSizeType), std::begin(rhs.GenerationDataPerSizeType));
	}
};

struct GcWeaponInventoryMaxUpgradeCapacity
{
	int32_t MaxInventoryCapacity[4];

	friend bool operator==(const GcWeaponInventoryMaxUpgradeCapacity& lhs, const GcWeaponInventoryMaxUpgradeCapacity& rhs) 
	{
		return std::equal(std::begin(lhs.MaxInventoryCapacity), std::end(lhs.MaxInventoryCapacity), std::begin(rhs.MaxInventoryCapacity));
	}
};

//Dependency: GcInventoryCostData
//Dependency: GcInventoryGenerationBaseStatData
//Dependency: GcInventoryClassProbabilities
//Dependency: GcInventoryBaseStat
//Dependency: GcInventoryTableEntry
//Dependency: GcShipInventoryMaxUpgradeCapacity
//Dependency: GcInventoryLayoutGenerationData
//Dependency: GcInventoryCostDataEntry
//Dependency: GcWeaponInventoryMaxUpgradeCapacity
struct GcInventoryTable
{
	NMS_GameComponents::GcInventoryGenerationBaseStatData ShipBaseStatsData[10];
	NMS_GameComponents::GcInventoryGenerationBaseStatData WeaponBaseStatsData[10];
	NMS_GameComponents::GcInventoryGenerationBaseStatData VehicleBaseStatsData;
	std::vector<NMS_GameComponents::GcInventoryBaseStat> BaseStats;
	std::vector<NMS_GameComponents::GcInventoryTableEntry> Table;
	NMS_GameComponents::GcInventoryLayoutGenerationData GenerationData;
	NMS_GameComponents::GcShipInventoryMaxUpgradeCapacity ShipInventoryMaxUpgradeSize[10];
	NMS_GameComponents::GcInventoryCostData ShipCostData;
	NMS_GameComponents::GcInventoryCostDataEntry WeaponCostData[10];
	NMS_GameComponents::GcInventoryClassProbabilities ClassProbabilityData[4];
	NMS_GameComponents::GcInventoryCostDataEntry VehicleCostData;
	NMS_GameComponents::GcWeaponInventoryMaxUpgradeCapacity WeaponInventoryMaxUpgradeSize;

	friend bool operator==(const GcInventoryTable& lhs, const GcInventoryTable& rhs) 
	{
		return std::equal(std::begin(lhs.ShipBaseStatsData), std::end(lhs.ShipBaseStatsData), std::begin(rhs.ShipBaseStatsData)) &&
		std::equal(std::begin(lhs.WeaponBaseStatsData), std::end(lhs.WeaponBaseStatsData), std::begin(rhs.WeaponBaseStatsData)) &&
		lhs.VehicleBaseStatsData == rhs.VehicleBaseStatsData &&
		lhs.BaseStats == rhs.BaseStats &&
		lhs.Table == rhs.Table &&
		lhs.GenerationData == rhs.GenerationData &&
		std::equal(std::begin(lhs.ShipInventoryMaxUpgradeSize), std::end(lhs.ShipInventoryMaxUpgradeSize), std::begin(rhs.ShipInventoryMaxUpgradeSize)) &&
		lhs.ShipCostData == rhs.ShipCostData &&
		std::equal(std::begin(lhs.WeaponCostData), std::end(lhs.WeaponCostData), std::begin(rhs.WeaponCostData)) &&
		std::equal(std::begin(lhs.ClassProbabilityData), std::end(lhs.ClassProbabilityData), std::begin(rhs.ClassProbabilityData)) &&
		lhs.VehicleCostData == rhs.VehicleCostData &&
		lhs.WeaponInventoryMaxUpgradeSize == rhs.WeaponInventoryMaxUpgradeSize;
	}
};

struct GcTechnologyCategory
{
	enum class TechnologyCategoryEnum : uint32_t
	{
		Ship = 0,
		Weapon = 1,
		Suit = 2,
		Personal = 3,
		All = 4,
		None = 5,
		Freighter = 6,
		Maintenance = 7,
		Exocraft = 8,
		Colossus = 9,
		Submarine = 10,
		Mech = 11,
		AllVehicles = 12,
		AlienShip = 13,
		AllShips = 14,
		RobotShip = 15,
		AllShipsExceptAlien = 16,
	};

	NMS_GameComponents::GcTechnologyCategory::TechnologyCategoryEnum TechnologyCategory;

	friend bool operator==(const GcTechnologyCategory& lhs, const GcTechnologyCategory& rhs) 
	{
		return lhs.TechnologyCategory == rhs.TechnologyCategory;
	}
};

//Dependency: GcScanEffectData
//Dependency: GcHand
//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x40
struct GcNPCPropInfo
{
	enum class NPCPropAttachLocationEnum : uint32_t
	{
		Hand = 0,
		Wrist = 1,
	};

	NMS_GameComponents::GcScanEffectData ScanEffect;
	NMS::Vector3f AttachRotation;
	NMS::Vector3f AttachTranslation;
	NMS::NMSString0x10 AttachLocator;
	NMS::VariableSizeString Model;
	float AttachScale;
	float AttachScaleGek;
	NMS_GameComponents::GcHand DominantHand;
	NMS_GameComponents::GcNPCPropInfo::NPCPropAttachLocationEnum NPCPropAttachLocation;
	NMS_GameComponents::GcTechnologyCategory ShopType;
	float Weight;
	NMS::NMSString0x40 ScanEffectNodeName;
	bool Hologram;

	friend bool operator==(const GcNPCPropInfo& lhs, const GcNPCPropInfo& rhs) 
	{
		return lhs.ScanEffect == rhs.ScanEffect &&
		lhs.AttachRotation == rhs.AttachRotation &&
		lhs.AttachTranslation == rhs.AttachTranslation &&
		lhs.AttachLocator == rhs.AttachLocator &&
		lhs.Model == rhs.Model &&
		lhs.AttachScale == rhs.AttachScale &&
		lhs.AttachScaleGek == rhs.AttachScaleGek &&
		lhs.DominantHand == rhs.DominantHand &&
		lhs.NPCPropAttachLocation == rhs.NPCPropAttachLocation &&
		lhs.ShopType == rhs.ShopType &&
		lhs.Weight == rhs.Weight &&
		lhs.ScanEffectNodeName == rhs.ScanEffectNodeName &&
		lhs.Hologram == rhs.Hologram;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcSeed
{
	uint64_t Seed;
	bool UseSeedValue;

	friend bool operator==(const GcSeed& lhs, const GcSeed& rhs) 
	{
		return lhs.Seed == rhs.Seed &&
		lhs.UseSeedValue == rhs.UseSeedValue;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcSeed
struct GcInventoryLayout
{
	NMS::GcSeed Seed;
	int32_t Level;
	int32_t Slots;

	friend bool operator==(const GcInventoryLayout& lhs, const GcInventoryLayout& rhs) 
	{
		return lhs.Seed == rhs.Seed &&
		lhs.Level == rhs.Level &&
		lhs.Slots == rhs.Slots;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector2f
{
	float X;
	float Y;

	friend bool operator==(const Vector2f& lhs, const Vector2f& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: Vector3f
//Dependency: Vector2f
struct GcCutSceneClouds
{
	NMS::Colour BottomColour;
	NMS::Vector3f InitialOffsetWorldSpace;
	NMS::Colour TopColour;
	NMS::Vector2f StratosphereWindOffset;
	NMS::Vector2f WindOffset;
	float AbsorbtionFactor;
	float AnimScale;
	float AtmosphereEndHeight;
	float AtmosphereStartHeight;
	float Coverage;
	float Density;
	float StratosphereHeight;
	bool ControlClouds;

	friend bool operator==(const GcCutSceneClouds& lhs, const GcCutSceneClouds& rhs) 
	{
		return lhs.BottomColour == rhs.BottomColour &&
		lhs.InitialOffsetWorldSpace == rhs.InitialOffsetWorldSpace &&
		lhs.TopColour == rhs.TopColour &&
		lhs.StratosphereWindOffset == rhs.StratosphereWindOffset &&
		lhs.WindOffset == rhs.WindOffset &&
		lhs.AbsorbtionFactor == rhs.AbsorbtionFactor &&
		lhs.AnimScale == rhs.AnimScale &&
		lhs.AtmosphereEndHeight == rhs.AtmosphereEndHeight &&
		lhs.AtmosphereStartHeight == rhs.AtmosphereStartHeight &&
		lhs.Coverage == rhs.Coverage &&
		lhs.Density == rhs.Density &&
		lhs.StratosphereHeight == rhs.StratosphereHeight &&
		lhs.ControlClouds == rhs.ControlClouds;
	}
};

//Dependency: NMSString0x10
struct GcCutSceneTriggerActionData
{
	NMS::NMSString0x10 Action;
	NMS::NMSString0x10 GroupFilter;
	NMS::NMSString0x10 IdFilter;
	NMS::NMSString0x10 Parameter;

	friend bool operator==(const GcCutSceneTriggerActionData& lhs, const GcCutSceneTriggerActionData& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.GroupFilter == rhs.GroupFilter &&
		lhs.IdFilter == rhs.IdFilter &&
		lhs.Parameter == rhs.Parameter;
	}
};

//Dependency: GcCutSceneTriggerActionData
struct GcCutSceneTriggerInputData
{
	enum class CutSceneKeyPressEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_3 = 2,
		_4 = 3,
		_5 = 4,
		_6 = 5,
		_7 = 6,
		_8 = 7,
		_9 = 8,
		PadUp = 9,
		PadDown = 10,
		PadLeft = 11,
		PadRight = 12,
	};

	std::vector<NMS_GameComponents::GcCutSceneTriggerActionData> Actions;
	NMS_GameComponents::GcCutSceneTriggerInputData::CutSceneKeyPressEnum CutSceneKeyPress;

	friend bool operator==(const GcCutSceneTriggerInputData& lhs, const GcCutSceneTriggerInputData& rhs) 
	{
		return lhs.Actions == rhs.Actions &&
		lhs.CutSceneKeyPress == rhs.CutSceneKeyPress;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkPaletteTexture
{
	enum class PaletteEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	enum class ColourAltEnum : uint32_t
	{
		Primary = 0,
		Alternative1 = 1,
		Alternative2 = 2,
		Alternative3 = 3,
		Alternative4 = 4,
		Unique = 5,
		MatchGround = 6,
		None = 7,
	};

	NMS_Toolkit::TkPaletteTexture::ColourAltEnum ColourAlt;
	int32_t Index;
	NMS_Toolkit::TkPaletteTexture::PaletteEnum Palette;

	friend bool operator==(const TkPaletteTexture& lhs, const TkPaletteTexture& rhs) 
	{
		return lhs.ColourAlt == rhs.ColourAlt &&
		lhs.Index == rhs.Index &&
		lhs.Palette == rhs.Palette;
	}
};

//Dependency: TkPaletteTexture
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkProceduralTextureChosenOption
{
	NMS::Colour Colour;
	NMS::NMSString0x20A OptionName;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;
	NMS_Toolkit::TkPaletteTexture Palette;
	bool OverrideColour;

	friend bool operator==(const TkProceduralTextureChosenOption& lhs, const TkProceduralTextureChosenOption& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.OptionName == rhs.OptionName &&
		lhs.Group == rhs.Group &&
		lhs.Layer == rhs.Layer &&
		lhs.Palette == rhs.Palette &&
		lhs.OverrideColour == rhs.OverrideColour;
	}
};

//Dependency: TkProceduralTextureChosenOption
struct TkProceduralTextureChosenOptionSampler
{
	std::vector<NMS_Toolkit::TkProceduralTextureChosenOption> Options;

	friend bool operator==(const TkProceduralTextureChosenOptionSampler& lhs, const TkProceduralTextureChosenOptionSampler& rhs) 
	{
		return lhs.Options == rhs.Options;
	}
};

//Dependency: TkProceduralTextureChosenOptionSampler
struct TkProceduralTextureChosenOptionList
{
	std::vector<NMS_Toolkit::TkProceduralTextureChosenOptionSampler> Samplers;

	friend bool operator==(const TkProceduralTextureChosenOptionList& lhs, const TkProceduralTextureChosenOptionList& rhs) 
	{
		return lhs.Samplers == rhs.Samplers;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkProceduralTextureChosenOptionList
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: GcResource
struct GcResourceElement
{
	NMS::VariableSizeString AltId;
	NMS::VariableSizeString Filename;
	NMS_Toolkit::TkProceduralTextureChosenOptionList ProceduralTexture;
	NMS::GcSeed Seed;
	NMS::GcResource ResHandle;

	friend bool operator==(const GcResourceElement& lhs, const GcResourceElement& rhs) 
	{
		return lhs.AltId == rhs.AltId &&
		lhs.Filename == rhs.Filename &&
		lhs.ProceduralTexture == rhs.ProceduralTexture &&
		lhs.Seed == rhs.Seed &&
		lhs.ResHandle == rhs.ResHandle;
	}
};

//Dependency: GcResourceElement
//Dependency: VariableSizeString
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcCutSceneSpawnData
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Id;
	std::vector<NMSTemplate> Modules;
	NMS::GcSeed Seed;
	NMS::VariableSizeString TrimmedPath;
	int32_t Guid;
	bool DebugDraw;
	bool EnableAI;

	friend bool operator==(const GcCutSceneSpawnData& lhs, const GcCutSceneSpawnData& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Local == rhs.Local &&
		lhs.Offset == rhs.Offset &&
		lhs.Up == rhs.Up &&
		lhs.ResourceElement == rhs.ResourceElement &&
		lhs.Group == rhs.Group &&
		lhs.Id == rhs.Id &&
		lhs.Modules == rhs.Modules &&
		lhs.Seed == rhs.Seed &&
		lhs.TrimmedPath == rhs.TrimmedPath &&
		lhs.Guid == rhs.Guid &&
		lhs.DebugDraw == rhs.DebugDraw &&
		lhs.EnableAI == rhs.EnableAI;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseUberData
{
	enum class DebugNoiseTypeEnum : uint32_t
	{
		Plane = 0,
		Check = 1,
		Sine = 2,
		Uber = 3,
	};

	float AltitudeErosion;
	float AmplifyFeatures;
	NMS_Toolkit::TkNoiseUberData::DebugNoiseTypeEnum DebugNoiseType;
	float Gain;
	float Lacunarity;
	int32_t Octaves;
	float PerturbFeatures;
	float RemapFromMax;
	float RemapFromMin;
	float RemapToMax;
	float RemapToMin;
	float RidgeErosion;
	float SharpToRoundFeatures;
	float SlopeBias;
	float SlopeErosion;
	float SlopeGain;

	friend bool operator==(const TkNoiseUberData& lhs, const TkNoiseUberData& rhs) 
	{
		return lhs.AltitudeErosion == rhs.AltitudeErosion &&
		lhs.AmplifyFeatures == rhs.AmplifyFeatures &&
		lhs.DebugNoiseType == rhs.DebugNoiseType &&
		lhs.Gain == rhs.Gain &&
		lhs.Lacunarity == rhs.Lacunarity &&
		lhs.Octaves == rhs.Octaves &&
		lhs.PerturbFeatures == rhs.PerturbFeatures &&
		lhs.RemapFromMax == rhs.RemapFromMax &&
		lhs.RemapFromMin == rhs.RemapFromMin &&
		lhs.RemapToMax == rhs.RemapToMax &&
		lhs.RemapToMin == rhs.RemapToMin &&
		lhs.RidgeErosion == rhs.RidgeErosion &&
		lhs.SharpToRoundFeatures == rhs.SharpToRoundFeatures &&
		lhs.SlopeBias == rhs.SlopeBias &&
		lhs.SlopeErosion == rhs.SlopeErosion &&
		lhs.SlopeGain == rhs.SlopeGain;
	}
};

struct TkNoiseOffsetEnum
{
	enum class OffsetTypeEnum : uint32_t
	{
		Zero = 0,
		Base = 1,
		All = 2,
		SeaLevel = 3,
	};

	NMS_Toolkit::TkNoiseOffsetEnum::OffsetTypeEnum OffsetType;

	friend bool operator==(const TkNoiseOffsetEnum& lhs, const TkNoiseOffsetEnum& rhs) 
	{
		return lhs.OffsetType == rhs.OffsetType;
	}
};

struct TkNoiseVoxelTypeEnum
{
	enum class NoiseVoxelTypeEnum : uint32_t
	{
		Base = 0,
		Rock = 1,
		Mountain = 2,
		Sand = 3,
		Cave = 4,
		Substance_1 = 5,
		Substance_2 = 6,
		Substance_3 = 7,
		RandomRock = 8,
		RandomRockOrSubstance = 9,
	};

	NMS_Toolkit::TkNoiseVoxelTypeEnum::NoiseVoxelTypeEnum NoiseVoxelType;

	friend bool operator==(const TkNoiseVoxelTypeEnum& lhs, const TkNoiseVoxelTypeEnum& rhs) 
	{
		return lhs.NoiseVoxelType == rhs.NoiseVoxelType;
	}
};

//Dependency: TkNoiseUberData
//Dependency: TkNoiseOffsetEnum
//Dependency: TkNoiseVoxelTypeEnum
struct TkNoiseUberLayerData
{
	enum class WaterFadeEnum : uint32_t
	{
		None = 0,
		Above = 1,
		Below = 2,
	};

	NMS_Toolkit::TkNoiseUberData NoiseData;
	float Height;
	float HeightOffset;
	int32_t MaximumLOD;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float PlateauRegionSize;
	int32_t PlateauSharpness;
	float PlateauStratas;
	float RegionGain;
	float RegionRatio;
	float RegionScale;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	NMS_Toolkit::TkNoiseUberLayerData::WaterFadeEnum WaterFade;
	float Width;
	bool Active;
	bool Subtract;

	friend bool operator==(const TkNoiseUberLayerData& lhs, const TkNoiseUberLayerData& rhs) 
	{
		return lhs.NoiseData == rhs.NoiseData &&
		lhs.Height == rhs.Height &&
		lhs.HeightOffset == rhs.HeightOffset &&
		lhs.MaximumLOD == rhs.MaximumLOD &&
		lhs.Offset == rhs.Offset &&
		lhs.PlateauRegionSize == rhs.PlateauRegionSize &&
		lhs.PlateauSharpness == rhs.PlateauSharpness &&
		lhs.PlateauStratas == rhs.PlateauStratas &&
		lhs.RegionGain == rhs.RegionGain &&
		lhs.RegionRatio == rhs.RegionRatio &&
		lhs.RegionScale == rhs.RegionScale &&
		lhs.SeedOffset == rhs.SeedOffset &&
		lhs.SmoothRadius == rhs.SmoothRadius &&
		lhs.TileBlendMeters == rhs.TileBlendMeters &&
		lhs.VoxelType == rhs.VoxelType &&
		lhs.WaterFade == rhs.WaterFade &&
		lhs.Width == rhs.Width &&
		lhs.Active == rhs.Active &&
		lhs.Subtract == rhs.Subtract;
	}
};

struct TkNoiseSuperPrimitiveData
{
	float BottomRadiusOffset;
	float CornerRadiusXY;
	float CornerRadiusZ;
	float Depth;
	float Height;
	float Thickness;
	float Width;

	friend bool operator==(const TkNoiseSuperPrimitiveData& lhs, const TkNoiseSuperPrimitiveData& rhs) 
	{
		return lhs.BottomRadiusOffset == rhs.BottomRadiusOffset &&
		lhs.CornerRadiusXY == rhs.CornerRadiusXY &&
		lhs.CornerRadiusZ == rhs.CornerRadiusZ &&
		lhs.Depth == rhs.Depth &&
		lhs.Height == rhs.Height &&
		lhs.Thickness == rhs.Thickness &&
		lhs.Width == rhs.Width;
	}
};

struct TkNoiseSuperFormulaData
{
	float Form_m;
	float Form_n1;
	float Form_n2;
	float Form_n3;

	friend bool operator==(const TkNoiseSuperFormulaData& lhs, const TkNoiseSuperFormulaData& rhs) 
	{
		return lhs.Form_m == rhs.Form_m &&
		lhs.Form_n1 == rhs.Form_n1 &&
		lhs.Form_n2 == rhs.Form_n2 &&
		lhs.Form_n3 == rhs.Form_n3;
	}
};

//Dependency: TkNoiseUberLayerData
//Dependency: TkNoiseVoxelTypeEnum
//Dependency: TkNoiseSuperPrimitiveData
//Dependency: TkNoiseSuperFormulaData
//Dependency: TkNoiseOffsetEnum
//Dependency: VariableSizeString
struct TkNoiseGridData
{
	enum class NoiseGridTypeEnum : uint32_t
	{
		Cube = 0,
		Cone = 1,
		Torus = 2,
		Sphere = 3,
		Cylinder = 4,
		Capsule = 5,
		Corridor = 6,
		Pipe = 7,
		Puck = 8,
		SuperPrimitiveRandom = 9,
		SuperFormula_01 = 10,
		SuperFormula_02 = 11,
		SuperFormula_03 = 12,
		SuperFormula_04 = 13,
		SuperFormula_05 = 14,
		SuperFormula_06 = 15,
		SuperFormula_07 = 16,
		SuperFormula_08 = 17,
		SuperFormulaRandom = 18,
		SuperFormula = 19,
		SuperPrimitive = 20,
		File = 21,
	};

	NMS::VariableSizeString Filename;
	NMS_Toolkit::TkNoiseUberLayerData TurbulenceNoiseLayer;
	NMS_Toolkit::TkNoiseSuperPrimitiveData SuperPrimitive;
	NMS_Toolkit::TkNoiseSuperFormulaData SuperFormula1;
	NMS_Toolkit::TkNoiseSuperFormulaData SuperFormula2;
	float HeightOffset;
	float MaxHeight;
	float MaxHeightOffset;
	int32_t MaximumLOD;
	float MaxWidth;
	float MinHeight;
	float MinHeightOffset;
	float MinWidth;
	NMS_Toolkit::TkNoiseGridData::NoiseGridTypeEnum NoiseGridType;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float Pitch;
	float RandomPrimitive;
	float RegionRatio;
	float RegionScale;
	float Roll;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	float VaryPitch;
	float VaryRoll;
	float VaryYaw;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	float Yaw;
	bool Active;
	bool Hemisphere;
	bool Subtract;
	bool SwapZY;

	friend bool operator==(const TkNoiseGridData& lhs, const TkNoiseGridData& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.TurbulenceNoiseLayer == rhs.TurbulenceNoiseLayer &&
		lhs.SuperPrimitive == rhs.SuperPrimitive &&
		lhs.SuperFormula1 == rhs.SuperFormula1 &&
		lhs.SuperFormula2 == rhs.SuperFormula2 &&
		lhs.HeightOffset == rhs.HeightOffset &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MaxHeightOffset == rhs.MaxHeightOffset &&
		lhs.MaximumLOD == rhs.MaximumLOD &&
		lhs.MaxWidth == rhs.MaxWidth &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.MinHeightOffset == rhs.MinHeightOffset &&
		lhs.MinWidth == rhs.MinWidth &&
		lhs.NoiseGridType == rhs.NoiseGridType &&
		lhs.Offset == rhs.Offset &&
		lhs.Pitch == rhs.Pitch &&
		lhs.RandomPrimitive == rhs.RandomPrimitive &&
		lhs.RegionRatio == rhs.RegionRatio &&
		lhs.RegionScale == rhs.RegionScale &&
		lhs.Roll == rhs.Roll &&
		lhs.SeedOffset == rhs.SeedOffset &&
		lhs.SmoothRadius == rhs.SmoothRadius &&
		lhs.TileBlendMeters == rhs.TileBlendMeters &&
		lhs.VaryPitch == rhs.VaryPitch &&
		lhs.VaryRoll == rhs.VaryRoll &&
		lhs.VaryYaw == rhs.VaryYaw &&
		lhs.VoxelType == rhs.VoxelType &&
		lhs.Yaw == rhs.Yaw &&
		lhs.Active == rhs.Active &&
		lhs.Hemisphere == rhs.Hemisphere &&
		lhs.Subtract == rhs.Subtract &&
		lhs.SwapZY == rhs.SwapZY;
	}
};

//Dependency: TkNoiseOffsetEnum
//Dependency: TkNoiseVoxelTypeEnum
struct TkNoiseFeatureData
{
	enum class FeatureTypeEnum : uint32_t
	{
		Tube = 0,
		Blob = 1,
	};

	NMS_Toolkit::TkNoiseFeatureData::FeatureTypeEnum FeatureType;
	float Height;
	float HeightOffset;
	float HeightVarianceAmplitude;
	float HeightVarianceFrequency;
	int32_t MaximumLOD;
	int32_t Octaves;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float Ratio;
	float RegionSize;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	float Width;
	bool Active;
	bool Subtract;
	bool Trench;

	friend bool operator==(const TkNoiseFeatureData& lhs, const TkNoiseFeatureData& rhs) 
	{
		return lhs.FeatureType == rhs.FeatureType &&
		lhs.Height == rhs.Height &&
		lhs.HeightOffset == rhs.HeightOffset &&
		lhs.HeightVarianceAmplitude == rhs.HeightVarianceAmplitude &&
		lhs.HeightVarianceFrequency == rhs.HeightVarianceFrequency &&
		lhs.MaximumLOD == rhs.MaximumLOD &&
		lhs.Octaves == rhs.Octaves &&
		lhs.Offset == rhs.Offset &&
		lhs.Ratio == rhs.Ratio &&
		lhs.RegionSize == rhs.RegionSize &&
		lhs.SeedOffset == rhs.SeedOffset &&
		lhs.SmoothRadius == rhs.SmoothRadius &&
		lhs.TileBlendMeters == rhs.TileBlendMeters &&
		lhs.VoxelType == rhs.VoxelType &&
		lhs.Width == rhs.Width &&
		lhs.Active == rhs.Active &&
		lhs.Subtract == rhs.Subtract &&
		lhs.Trench == rhs.Trench;
	}
};

//Dependency: TkNoiseFeatureData
struct TkNoiseCaveData
{
	NMS_Toolkit::TkNoiseFeatureData Mouth;
	NMS_Toolkit::TkNoiseFeatureData Tunnel;

	friend bool operator==(const TkNoiseCaveData& lhs, const TkNoiseCaveData& rhs) 
	{
		return lhs.Mouth == rhs.Mouth &&
		lhs.Tunnel == rhs.Tunnel;
	}
};

//Dependency: TkNoiseGridData
//Dependency: GcSeed
//Dependency: TkNoiseUberLayerData
//Dependency: TkNoiseVoxelTypeEnum
//Dependency: TkNoiseFeatureData
//Dependency: TkNoiseCaveData
struct TkVoxelGeneratorData
{
	NMS_Toolkit::TkNoiseGridData GridLayers[9];
	NMS::GcSeed BaseSeed;
	NMS_Toolkit::TkNoiseUberLayerData NoiseLayers[8];
	NMS_Toolkit::TkNoiseFeatureData Features[7];
	NMS_Toolkit::TkNoiseCaveData Caves[1];
	float BeachHeight;
	float BuildingSmoothingHeight;
	float BuildingSmoothingRadius;
	float BuildingTextureRadius;
	NMS_Toolkit::TkNoiseVoxelTypeEnum BuildingVoxelType;
	float CaveRoofSmoothingDist;
	float MaximumSeaLevelCaveDepth;
	float MinimumCaveDepth;
	float NoSeaBaseLevel;
	NMS_Toolkit::TkNoiseVoxelTypeEnum ResourceVoxelType;
	float SeaLevel;
	float WaterFadeInDistance;

	friend bool operator==(const TkVoxelGeneratorData& lhs, const TkVoxelGeneratorData& rhs) 
	{
		return std::equal(std::begin(lhs.GridLayers), std::end(lhs.GridLayers), std::begin(rhs.GridLayers)) &&
		lhs.BaseSeed == rhs.BaseSeed &&
		std::equal(std::begin(lhs.NoiseLayers), std::end(lhs.NoiseLayers), std::begin(rhs.NoiseLayers)) &&
		std::equal(std::begin(lhs.Features), std::end(lhs.Features), std::begin(rhs.Features)) &&
		std::equal(std::begin(lhs.Caves), std::end(lhs.Caves), std::begin(rhs.Caves)) &&
		lhs.BeachHeight == rhs.BeachHeight &&
		lhs.BuildingSmoothingHeight == rhs.BuildingSmoothingHeight &&
		lhs.BuildingSmoothingRadius == rhs.BuildingSmoothingRadius &&
		lhs.BuildingTextureRadius == rhs.BuildingTextureRadius &&
		lhs.BuildingVoxelType == rhs.BuildingVoxelType &&
		lhs.CaveRoofSmoothingDist == rhs.CaveRoofSmoothingDist &&
		lhs.MaximumSeaLevelCaveDepth == rhs.MaximumSeaLevelCaveDepth &&
		lhs.MinimumCaveDepth == rhs.MinimumCaveDepth &&
		lhs.NoSeaBaseLevel == rhs.NoSeaBaseLevel &&
		lhs.ResourceVoxelType == rhs.ResourceVoxelType &&
		lhs.SeaLevel == rhs.SeaLevel &&
		lhs.WaterFadeInDistance == rhs.WaterFadeInDistance;
	}
};

//Dependency: TkVoxelGeneratorData
struct TkVoxelGeneratorSettingsElement
{
	NMS_Toolkit::TkVoxelGeneratorData Max;
	NMS_Toolkit::TkVoxelGeneratorData Min;

	friend bool operator==(const TkVoxelGeneratorSettingsElement& lhs, const TkVoxelGeneratorSettingsElement& rhs) 
	{
		return lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcCutSceneClouds
//Dependency: GcCutSceneTriggerInputData
//Dependency: GcCutSceneTriggerActionData
//Dependency: Vector3f
//Dependency: GcCutSceneSpawnData
//Dependency: TkVoxelGeneratorSettingsElement
struct GcCutSceneData
{
	NMS_GameComponents::GcCutSceneClouds Clouds;
	NMS::Vector3f ForcedSunDir;
	NMS_Toolkit::TkVoxelGeneratorSettingsElement VoxelSettings;
	std::vector<NMS_GameComponents::GcCutSceneTriggerInputData> KeyPressActions;
	std::vector<NMS_GameComponents::GcCutSceneTriggerActionData> OnLoadActions;
	std::vector<NMS_GameComponents::GcCutSceneSpawnData> Spawns;
	float FlyCamFoV;
	float FlyCamSmoothFactor;
	float FlyCamSpeedModifier;
	int32_t GuidGenerator;
	bool Active;
	bool AutomaticObjectEditing;
	bool AutoSave;
	bool DebugDraw;
	bool FlyCamSmooth;
	bool ForceSunDir;
	bool UseVoxelSettings;

	friend bool operator==(const GcCutSceneData& lhs, const GcCutSceneData& rhs) 
	{
		return lhs.Clouds == rhs.Clouds &&
		lhs.ForcedSunDir == rhs.ForcedSunDir &&
		lhs.VoxelSettings == rhs.VoxelSettings &&
		lhs.KeyPressActions == rhs.KeyPressActions &&
		lhs.OnLoadActions == rhs.OnLoadActions &&
		lhs.Spawns == rhs.Spawns &&
		lhs.FlyCamFoV == rhs.FlyCamFoV &&
		lhs.FlyCamSmoothFactor == rhs.FlyCamSmoothFactor &&
		lhs.FlyCamSpeedModifier == rhs.FlyCamSpeedModifier &&
		lhs.GuidGenerator == rhs.GuidGenerator &&
		lhs.Active == rhs.Active &&
		lhs.AutomaticObjectEditing == rhs.AutomaticObjectEditing &&
		lhs.AutoSave == rhs.AutoSave &&
		lhs.DebugDraw == rhs.DebugDraw &&
		lhs.FlyCamSmooth == rhs.FlyCamSmooth &&
		lhs.ForceSunDir == rhs.ForceSunDir &&
		lhs.UseVoxelSettings == rhs.UseVoxelSettings;
	}
};

//Dependency: NMSString0x20A
struct GcSeasonalObjectiveOverrides
{
	NMS::NMSString0x20A OverrideObjective;
	NMS::NMSString0x20A OverrideObjectiveTip;
	std::vector<int32_t> ApplicableSeasonNumbers;

	friend bool operator==(const GcSeasonalObjectiveOverrides& lhs, const GcSeasonalObjectiveOverrides& rhs) 
	{
		return lhs.OverrideObjective == rhs.OverrideObjective &&
		lhs.OverrideObjectiveTip == rhs.OverrideObjectiveTip &&
		lhs.ApplicableSeasonNumbers == rhs.ApplicableSeasonNumbers;
	}
};

struct GcMonth
{
	enum class MonthEnum : uint32_t
	{
		January = 0,
		February = 1,
		March = 2,
		April = 3,
		May = 4,
		June = 5,
		July = 6,
		August = 7,
		September = 8,
		October = 9,
		November = 10,
		December = 11,
	};

	NMS_GameComponents::GcMonth::MonthEnum Month;

	friend bool operator==(const GcMonth& lhs, const GcMonth& rhs) 
	{
		return lhs.Month == rhs.Month;
	}
};

//Dependency: GcMonth
struct GcDate
{
	int32_t Day;
	int32_t Hour;
	int32_t Minute;
	NMS_GameComponents::GcMonth Month;
	int32_t Year;

	friend bool operator==(const GcDate& lhs, const GcDate& rhs) 
	{
		return lhs.Day == rhs.Day &&
		lhs.Hour == rhs.Hour &&
		lhs.Minute == rhs.Minute &&
		lhs.Month == rhs.Month &&
		lhs.Year == rhs.Year;
	}
};

//Dependency: NMSString0x20A
struct GcRewardWikiTopic
{
	NMS::NMSString0x20A Topic;
	bool CentreMessage;

	friend bool operator==(const GcRewardWikiTopic& lhs, const GcRewardWikiTopic& rhs) 
	{
		return lhs.Topic == rhs.Topic &&
		lhs.CentreMessage == rhs.CentreMessage;
	}
};

struct GcAlienRace
{
	enum class AlienRaceEnum : uint32_t
	{
		Traders = 0,
		Warriors = 1,
		Explorers = 2,
		Robots = 3,
		Atlas = 4,
		Diplomats = 5,
		Exotics = 6,
		None = 7,
		Builders = 8,
	};

	NMS_GameComponents::GcAlienRace::AlienRaceEnum AlienRace;

	friend bool operator==(const GcAlienRace& lhs, const GcAlienRace& rhs) 
	{
		return lhs.AlienRace == rhs.AlienRace;
	}
};

struct GcWordCategoryTableEnum
{
	enum class wordcategorytableEnumEnum : uint32_t
	{
		MISC = 0,
		DIRECTIONS = 1,
		HELP = 2,
		TRADE = 3,
		LORE = 4,
		TECH = 5,
		THREAT = 6,
	};

	NMS_GameComponents::GcWordCategoryTableEnum::wordcategorytableEnumEnum wordcategorytableEnum;

	friend bool operator==(const GcWordCategoryTableEnum& lhs, const GcWordCategoryTableEnum& rhs) 
	{
		return lhs.wordcategorytableEnum == rhs.wordcategorytableEnum;
	}
};

struct GcAlienMood
{
	enum class MoodEnum : uint32_t
	{
		Neutral = 0,
		Positive = 1,
		VeryPositive = 2,
		Negative = 3,
		VeryNegative = 4,
		Pity = 5,
		Sad = 6,
		Dead = 7,
		Confused = 8,
		Busy = 9,
	};

	NMS_GameComponents::GcAlienMood::MoodEnum Mood;

	friend bool operator==(const GcAlienMood& lhs, const GcAlienMood& rhs) 
	{
		return lhs.Mood == rhs.Mood;
	}
};

struct GcNPCPropType
{
	enum class NPCPropEnum : uint32_t
	{
		None = 0,
		Default = 1,
		DontCare = 2,
		IPad = 3,
		RandomHologram = 4,
		HoloBlob = 5,
		HoloFrigate = 6,
		HoloShip = 7,
		HoloMultitool = 8,
		HoloSolarSystem = 9,
		HoloDrone = 10,
		Container = 11,
		Box = 12,
		Cup = 13,
		Staff = 14,
	};

	NMS_GameComponents::GcNPCPropType::NPCPropEnum NPCProp;

	friend bool operator==(const GcNPCPropType& lhs, const GcNPCPropType& rhs) 
	{
		return lhs.NPCProp == rhs.NPCProp;
	}
};

//Dependency: GcAlienRace
//Dependency: GcAudioWwiseEvents
//Dependency: GcMissionConditionTest
//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcNPCPropType
struct GcAlienPuzzleOption
{
	NMS::NMSString0x20A EnablingConditionId;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A NextInteraction;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A TitleOverride;
	NMS::NMSString0x10 Cost;
	std::vector<NMSTemplate> EnablingConditions;
	std::vector<NMS::NMSString0x10> Rewards;
	NMS_GameComponents::GcAlienRace AlienWordSpecificRace;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcMissionConditionTest EnablingConditionTest;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcAlienRace ResponseLanguageOverride;
	NMS_GameComponents::GcWordCategoryTableEnum WordCategory;
	bool DisplayCost;
	bool IsAlien;
	bool KeepOpen;
	bool MarkInteractionComplete;
	bool OverrideWithAlienWord;
	bool ReseedInteractionOnUse;
	bool SelectedOnBackOut;
	bool SkipStraightToOptionsOnNextPuzzle;
	bool TruncateCost;

	friend bool operator==(const GcAlienPuzzleOption& lhs, const GcAlienPuzzleOption& rhs) 
	{
		return lhs.EnablingConditionId == rhs.EnablingConditionId &&
		lhs.Name == rhs.Name &&
		lhs.NextInteraction == rhs.NextInteraction &&
		lhs.Text == rhs.Text &&
		lhs.TitleOverride == rhs.TitleOverride &&
		lhs.Cost == rhs.Cost &&
		lhs.EnablingConditions == rhs.EnablingConditions &&
		lhs.Rewards == rhs.Rewards &&
		lhs.AlienWordSpecificRace == rhs.AlienWordSpecificRace &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.EnablingConditionTest == rhs.EnablingConditionTest &&
		lhs.Mood == rhs.Mood &&
		lhs.Prop == rhs.Prop &&
		lhs.ResponseLanguageOverride == rhs.ResponseLanguageOverride &&
		lhs.WordCategory == rhs.WordCategory &&
		lhs.DisplayCost == rhs.DisplayCost &&
		lhs.IsAlien == rhs.IsAlien &&
		lhs.KeepOpen == rhs.KeepOpen &&
		lhs.MarkInteractionComplete == rhs.MarkInteractionComplete &&
		lhs.OverrideWithAlienWord == rhs.OverrideWithAlienWord &&
		lhs.ReseedInteractionOnUse == rhs.ReseedInteractionOnUse &&
		lhs.SelectedOnBackOut == rhs.SelectedOnBackOut &&
		lhs.SkipStraightToOptionsOnNextPuzzle == rhs.SkipStraightToOptionsOnNextPuzzle &&
		lhs.TruncateCost == rhs.TruncateCost;
	}
};

//Dependency: GcAlienPuzzleOption
//Dependency: NMSString0x10
struct GcAdditionalOptionMissionOverride
{
	NMS_GameComponents::GcAlienPuzzleOption Option;
	std::vector<int32_t> ApplicableSeasons;
	NMS::NMSString0x10 Mission;
	bool MissionMustBeSelected;

	friend bool operator==(const GcAdditionalOptionMissionOverride& lhs, const GcAdditionalOptionMissionOverride& rhs) 
	{
		return lhs.Option == rhs.Option &&
		lhs.ApplicableSeasons == rhs.ApplicableSeasons &&
		lhs.Mission == rhs.Mission &&
		lhs.MissionMustBeSelected == rhs.MissionMustBeSelected;
	}
};

struct GcDay
{
	enum class DayEnum : uint32_t
	{
		Sunday = 0,
		Monday = 1,
		Tuesday = 2,
		Wednesday = 3,
		Thursday = 4,
		Friday = 5,
		Saturday = 6,
	};

	NMS_GameComponents::GcDay::DayEnum Day;

	friend bool operator==(const GcDay& lhs, const GcDay& rhs) 
	{
		return lhs.Day == rhs.Day;
	}
};

//Dependency: VariableSizeString
struct GcBuildingFilename
{
	NMS::VariableSizeString LSystem[2];
	NMS::VariableSizeString Scene[2];
	NMS::VariableSizeString WFC[2];

	friend bool operator==(const GcBuildingFilename& lhs, const GcBuildingFilename& rhs) 
	{
		return std::equal(std::begin(lhs.LSystem), std::end(lhs.LSystem), std::begin(rhs.LSystem)) &&
		std::equal(std::begin(lhs.Scene), std::end(lhs.Scene), std::begin(rhs.Scene)) &&
		std::equal(std::begin(lhs.WFC), std::end(lhs.WFC), std::begin(rhs.WFC));
	}
};

//Dependency: GcBuildingFilename
struct GcBuildingFilenameList
{
	NMS_GameComponents::GcBuildingFilename BuildingFiles[60];

	friend bool operator==(const GcBuildingFilenameList& lhs, const GcBuildingFilenameList& rhs) 
	{
		return std::equal(std::begin(lhs.BuildingFiles), std::end(lhs.BuildingFiles), std::begin(rhs.BuildingFiles));
	}
};

struct GcAccessibleOverride_Layout
{
	enum class AccessibleOverride_LayoutEnum : uint32_t
	{
		PosX = 0,
		PosY = 1,
		LayerWidth = 2,
		LayerHeight = 3,
		MaxWidth = 4,
	};

	NMS_GameComponents::GcAccessibleOverride_Layout::AccessibleOverride_LayoutEnum AccessibleOverride_Layout;
	float FloatValue;

	friend bool operator==(const GcAccessibleOverride_Layout& lhs, const GcAccessibleOverride_Layout& rhs) 
	{
		return lhs.AccessibleOverride_Layout == rhs.AccessibleOverride_Layout &&
		lhs.FloatValue == rhs.FloatValue;
	}
};

struct GcVROverride_Layout
{
	enum class VROverride_LayoutEnum : uint32_t
	{
		PosX = 0,
		PosY = 1,
		LayerWidth = 2,
		LayerHeight = 3,
		MaxWidth = 4,
	};

	float FloatValue;
	NMS_GameComponents::GcVROverride_Layout::VROverride_LayoutEnum VROverride_Layout;

	friend bool operator==(const GcVROverride_Layout& lhs, const GcVROverride_Layout& rhs) 
	{
		return lhs.FloatValue == rhs.FloatValue &&
		lhs.VROverride_Layout == rhs.VROverride_Layout;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiAlignment
{
	enum class VerticalEnum : uint32_t
	{
		Top = 0,
		Middle = 1,
		Bottom = 2,
	};

	enum class HorizontalEnum : uint32_t
	{
		Left = 0,
		Center = 1,
		Right = 2,
	};

	NMS_Toolkit::TkNGuiAlignment::HorizontalEnum Horizontal;
	NMS_Toolkit::TkNGuiAlignment::VerticalEnum Vertical;

	friend bool operator==(const TkNGuiAlignment& lhs, const TkNGuiAlignment& rhs) 
	{
		return lhs.Horizontal == rhs.Horizontal &&
		lhs.Vertical == rhs.Vertical;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcAccessibleOverride_Layout
//Dependency: GcVROverride_Layout
//Dependency: TkNGuiAlignment
struct GcNGuiLayoutData
{
	std::vector<NMS_GameComponents::GcAccessibleOverride_Layout> AccessibleOverrides;
	std::vector<NMS_GameComponents::GcVROverride_Layout> VROverrides;
	float ConstrainAspect;
	float Height;
	float MaxWidth;
	float PositionX;
	float PositionY;
	float Width;
	NMS_Toolkit::TkNGuiAlignment Align;
	bool Anchor;
	bool AnchorPercent;
	bool ConstrainProportions;
	bool ForceAspect;
	bool HeightPercentage;
	bool SameLine;
	bool SlowCursorOnHover;
	bool WidthPercentage;

	friend bool operator==(const GcNGuiLayoutData& lhs, const GcNGuiLayoutData& rhs) 
	{
		return lhs.AccessibleOverrides == rhs.AccessibleOverrides &&
		lhs.VROverrides == rhs.VROverrides &&
		lhs.ConstrainAspect == rhs.ConstrainAspect &&
		lhs.Height == rhs.Height &&
		lhs.MaxWidth == rhs.MaxWidth &&
		lhs.PositionX == rhs.PositionX &&
		lhs.PositionY == rhs.PositionY &&
		lhs.Width == rhs.Width &&
		lhs.Align == rhs.Align &&
		lhs.Anchor == rhs.Anchor &&
		lhs.AnchorPercent == rhs.AnchorPercent &&
		lhs.ConstrainProportions == rhs.ConstrainProportions &&
		lhs.ForceAspect == rhs.ForceAspect &&
		lhs.HeightPercentage == rhs.HeightPercentage &&
		lhs.SameLine == rhs.SameLine &&
		lhs.SlowCursorOnHover == rhs.SlowCursorOnHover &&
		lhs.WidthPercentage == rhs.WidthPercentage;
	}
};

struct GcNGuiEditorVisibility
{
	enum class EditorVisibilityEnum : uint32_t
	{
		UseData = 0,
		Visible = 1,
		Hidden = 2,
	};

	NMS_GameComponents::GcNGuiEditorVisibility::EditorVisibilityEnum EditorVisibility;

	friend bool operator==(const GcNGuiEditorVisibility& lhs, const GcNGuiEditorVisibility& rhs) 
	{
		return lhs.EditorVisibility == rhs.EditorVisibility;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiForcedStyle
{
	enum class NGuiForcedStyleEnum : uint32_t
	{
		None = 0,
		Default = 1,
		Highlight = 2,
		Active = 3,
	};

	NMS_Toolkit::TkNGuiForcedStyle::NGuiForcedStyleEnum NGuiForcedStyle;

	friend bool operator==(const TkNGuiForcedStyle& lhs, const TkNGuiForcedStyle& rhs) 
	{
		return lhs.NGuiForcedStyle == rhs.NGuiForcedStyle;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiLayoutData
//Dependency: GcNGuiEditorVisibility
//Dependency: TkNGuiForcedStyle
//Dependency: NMSString0x10
struct GcNGuiElementData
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcNGuiEditorVisibility EditorVisible;
	NMS_Toolkit::TkNGuiForcedStyle ForcedStyle;
	bool IgnoreInput;
	bool IsHidden;

	friend bool operator==(const GcNGuiElementData& lhs, const GcNGuiElementData& rhs) 
	{
		return lhs.Layout == rhs.Layout &&
		lhs.ID == rhs.ID &&
		lhs.EditorVisible == rhs.EditorVisible &&
		lhs.ForcedStyle == rhs.ForcedStyle &&
		lhs.IgnoreInput == rhs.IgnoreInput &&
		lhs.IsHidden == rhs.IsHidden;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiGraphicAnimatedImageData
{
	enum class NGuiImageAnimTypeEnum : uint32_t
	{
		None = 0,
		Animated = 1,
		Scrolling = 2,
	};

	int32_t FramesHorizontal;
	float FramesPerSecond;
	int32_t FramesVertical;
	NMS_Toolkit::TkNGuiGraphicAnimatedImageData::NGuiImageAnimTypeEnum NGuiImageAnimType;
	float ScrollAngle;
	float ScrollSpeed;
	int32_t TotalFrames;
	bool BlendFrames;

	friend bool operator==(const TkNGuiGraphicAnimatedImageData& lhs, const TkNGuiGraphicAnimatedImageData& rhs) 
	{
		return lhs.FramesHorizontal == rhs.FramesHorizontal &&
		lhs.FramesPerSecond == rhs.FramesPerSecond &&
		lhs.FramesVertical == rhs.FramesVertical &&
		lhs.NGuiImageAnimType == rhs.NGuiImageAnimType &&
		lhs.ScrollAngle == rhs.ScrollAngle &&
		lhs.ScrollSpeed == rhs.ScrollSpeed &&
		lhs.TotalFrames == rhs.TotalFrames &&
		lhs.BlendFrames == rhs.BlendFrames;
	}
};

struct TkNGuiEditorIcons
{
	enum class NGuiEditorIconEnum : uint32_t
	{
		none = 0,
		_0 = 1,
		_1 = 2,
		_2 = 3,
		_3 = 4,
		_4 = 5,
		_5 = 6,
		_6 = 7,
		_7 = 8,
		_8 = 9,
		_9 = 10,
		a = 11,
		address_book = 12,
		address_book_outline = 13,
		address_card = 14,
		address_card_outline = 15,
		align_center = 16,
		align_justify = 17,
		align_left = 18,
		align_right = 19,
		anchor = 20,
		anchor_circle_check = 21,
		anchor_circle_exclamation = 22,
		anchor_circle_xmark = 23,
		anchor_lock = 24,
		angle_down = 25,
		angle_left = 26,
		angle_right = 27,
		angle_up = 28,
		angles_down = 29,
		angles_left = 30,
		angles_right = 31,
		angles_up = 32,
		ankh = 33,
		apple_whole = 34,
		archway = 35,
		arrow_down = 36,
		arrow_down_1_9 = 37,
		arrow_down_9_1 = 38,
		arrow_down_a_z = 39,
		arrow_down_long = 40,
		arrow_down_short_wide = 41,
		arrow_down_up_across_line = 42,
		arrow_down_up_lock = 43,
		arrow_down_wide_short = 44,
		arrow_down_z_a = 45,
		arrow_left = 46,
		arrow_left_long = 47,
		arrow_pointer = 48,
		arrow_right = 49,
		arrow_right_arrow_left = 50,
		arrow_right_from_bracket = 51,
		arrow_right_long = 52,
		arrow_right_to_bracket = 53,
		arrow_right_to_city = 54,
		arrow_rotate_left = 55,
		arrow_rotate_right = 56,
		arrow_trend_down = 57,
		arrow_trend_up = 58,
		arrow_turn_down = 59,
		arrow_turn_up = 60,
		arrow_up = 61,
		arrow_up_1_9 = 62,
		arrow_up_9_1 = 63,
		arrow_up_a_z = 64,
		arrow_up_from_bracket = 65,
		arrow_up_from_ground_water = 66,
		arrow_up_from_water_pump = 67,
		arrow_up_long = 68,
		arrow_up_right_dots = 69,
		arrow_up_right_from_square = 70,
		arrow_up_short_wide = 71,
		arrow_up_wide_short = 72,
		arrow_up_z_a = 73,
		arrows_down_to_line = 74,
		arrows_down_to_people = 75,
		arrows_left_right = 76,
		arrows_left_right_to_line = 77,
		arrows_rotate = 78,
		arrows_spin = 79,
		arrows_split_up_and_left = 80,
		arrows_to_circle = 81,
		arrows_to_dot = 82,
		arrows_to_eye = 83,
		arrows_turn_right = 84,
		arrows_turn_to_dots = 85,
		arrows_up_down = 86,
		arrows_up_down_left_right = 87,
		arrows_up_to_line = 88,
		asterisk = 89,
		at = 90,
		atom = 91,
		audio_description = 92,
		austral_sign = 93,
		award = 94,
		b = 95,
		baby = 96,
		baby_carriage = 97,
		backward = 98,
		backward_fast = 99,
		backward_step = 100,
		bacon = 101,
		bacteria = 102,
		bacterium = 103,
		bag_shopping = 104,
		bahai = 105,
		baht_sign = 106,
		ban = 107,
		ban_smoking = 108,
		bandage = 109,
		bangladeshi_taka_sign = 110,
		barcode = 111,
		bars = 112,
		bars_progress = 113,
		bars_staggered = 114,
		baseball = 115,
		baseball_bat_ball = 116,
		basket_shopping = 117,
		basketball = 118,
		bath = 119,
		battery_empty = 120,
		battery_full = 121,
		battery_half = 122,
		battery_quarter = 123,
		battery_three_quarters = 124,
		bed = 125,
		bed_pulse = 126,
		beer_mug_empty = 127,
		bell = 128,
		bell_outline = 129,
		bell_concierge = 130,
		bell_slash = 131,
		bell_slash_outline = 132,
		bezier_curve = 133,
		bicycle = 134,
		binoculars = 135,
		biohazard = 136,
		bitcoin_sign = 137,
		blender = 138,
		blender_phone = 139,
		blog = 140,
		bold = 141,
		bolt = 142,
		bolt_lightning = 143,
		bomb = 144,
		bone = 145,
		bong = 146,
		book = 147,
		book_atlas = 148,
		book_bible = 149,
		book_bookmark = 150,
		book_journal_whills = 151,
		book_medical = 152,
		book_open = 153,
		book_open_reader = 154,
		book_quran = 155,
		book_skull = 156,
		book_tanakh = 157,
		bookmark = 158,
		bookmark_outline = 159,
		border_all = 160,
		border_none = 161,
		border_top_left = 162,
		bore_hole = 163,
		bottle_droplet = 164,
		bottle_water = 165,
		bowl_food = 166,
		bowl_rice = 167,
		bowling_ball = 168,
		box = 169,
		box_archive = 170,
		box_open = 171,
		box_tissue = 172,
		boxes_packing = 173,
		boxes_stacked = 174,
		braille = 175,
		brain = 176,
		brazilian_real_sign = 177,
		bread_slice = 178,
		bridge = 179,
		bridge_circle_check = 180,
		bridge_circle_exclamation = 181,
		bridge_circle_xmark = 182,
		bridge_lock = 183,
		bridge_water = 184,
		briefcase = 185,
		briefcase_medical = 186,
		broom = 187,
		broom_ball = 188,
		brush = 189,
		bucket = 190,
		bug = 191,
		bug_slash = 192,
		bugs = 193,
		building = 194,
		building_outline = 195,
		building_circle_arrow_right = 196,
		building_circle_check = 197,
		building_circle_exclamation = 198,
		building_circle_xmark = 199,
		building_columns = 200,
		building_flag = 201,
		building_lock = 202,
		building_ngo = 203,
		building_shield = 204,
		building_un = 205,
		building_user = 206,
		building_wheat = 207,
		bullhorn = 208,
		bullseye = 209,
		burger = 210,
		burst = 211,
		bus = 212,
		bus_simple = 213,
		business_time = 214,
		c = 215,
		cable_car = 216,
		cake_candles = 217,
		calculator = 218,
		calendar = 219,
		calendar_outline = 220,
		calendar_check = 221,
		calendar_check_outline = 222,
		calendar_day = 223,
		calendar_days = 224,
		calendar_days_outline = 225,
		calendar_minus = 226,
		calendar_minus_outline = 227,
		calendar_plus = 228,
		calendar_plus_outline = 229,
		calendar_week = 230,
		calendar_xmark = 231,
		calendar_xmark_outline = 232,
		camera = 233,
		camera_retro = 234,
		camera_rotate = 235,
		campground = 236,
		candy_cane = 237,
		cannabis = 238,
		capsules = 239,
		car = 240,
		car_battery = 241,
		car_burst = 242,
		car_on = 243,
		car_rear = 244,
		car_side = 245,
		car_tunnel = 246,
		caravan = 247,
		caret_down = 248,
		caret_left = 249,
		caret_right = 250,
		caret_up = 251,
		carrot = 252,
		cart_arrow_down = 253,
		cart_flatbed = 254,
		cart_flatbed_suitcase = 255,
		cart_plus = 256,
		cart_shopping = 257,
		cash_register = 258,
		cat = 259,
		cedi_sign = 260,
		cent_sign = 261,
		certificate = 262,
		chair = 263,
		chalkboard = 264,
		chalkboard_user = 265,
		champagne_glasses = 266,
		charging_station = 267,
		chart_area = 268,
		chart_bar = 269,
		chart_bar_outline = 270,
		chart_column = 271,
		chart_gantt = 272,
		chart_line = 273,
		chart_pie = 274,
		chart_simple = 275,
		check = 276,
		check_double = 277,
		check_to_slot = 278,
		cheese = 279,
		chess = 280,
		chess_bishop = 281,
		chess_bishop_outline = 282,
		chess_board = 283,
		chess_king = 284,
		chess_king_outline = 285,
		chess_knight = 286,
		chess_knight_outline = 287,
		chess_pawn = 288,
		chess_pawn_outline = 289,
		chess_queen = 290,
		chess_queen_outline = 291,
		chess_rook = 292,
		chess_rook_outline = 293,
		chevron_down = 294,
		chevron_left = 295,
		chevron_right = 296,
		chevron_up = 297,
		child = 298,
		child_combatant = 299,
		child_dress = 300,
		child_reaching = 301,
		children = 302,
		church = 303,
		circle = 304,
		circle_outline = 305,
		circle_arrow_down = 306,
		circle_arrow_left = 307,
		circle_arrow_right = 308,
		circle_arrow_up = 309,
		circle_check = 310,
		circle_check_outline = 311,
		circle_chevron_down = 312,
		circle_chevron_left = 313,
		circle_chevron_right = 314,
		circle_chevron_up = 315,
		circle_dollar_to_slot = 316,
		circle_dot = 317,
		circle_dot_outline = 318,
		circle_down = 319,
		circle_down_outline = 320,
		circle_exclamation = 321,
		circle_h = 322,
		circle_half_stroke = 323,
		circle_info = 324,
		circle_left = 325,
		circle_left_outline = 326,
		circle_minus = 327,
		circle_nodes = 328,
		circle_notch = 329,
		circle_pause = 330,
		circle_pause_outline = 331,
		circle_play = 332,
		circle_play_outline = 333,
		circle_plus = 334,
		circle_question = 335,
		circle_question_outline = 336,
		circle_radiation = 337,
		circle_right = 338,
		circle_right_outline = 339,
		circle_stop = 340,
		circle_stop_outline = 341,
		circle_up = 342,
		circle_up_outline = 343,
		circle_user = 344,
		circle_user_outline = 345,
		circle_xmark = 346,
		circle_xmark_outline = 347,
		city = 348,
		clapperboard = 349,
		clipboard = 350,
		clipboard_outline = 351,
		clipboard_check = 352,
		clipboard_list = 353,
		clipboard_question = 354,
		clipboard_user = 355,
		clock = 356,
		clock_outline = 357,
		clock_rotate_left = 358,
		clone = 359,
		clone_outline = 360,
		closed_captioning = 361,
		closed_captioning_outline = 362,
		cloud = 363,
		cloud_arrow_down = 364,
		cloud_arrow_up = 365,
		cloud_bolt = 366,
		cloud_meatball = 367,
		cloud_moon = 368,
		cloud_moon_rain = 369,
		cloud_rain = 370,
		cloud_showers_heavy = 371,
		cloud_showers_water = 372,
		cloud_sun = 373,
		cloud_sun_rain = 374,
		clover = 375,
		code = 376,
		code_branch = 377,
		code_commit = 378,
		code_compare = 379,
		code_fork = 380,
		code_merge = 381,
		code_pull_request = 382,
		coins = 383,
		colon_sign = 384,
		comment = 385,
		comment_outline = 386,
		comment_dollar = 387,
		comment_dots = 388,
		comment_dots_outline = 389,
		comment_medical = 390,
		comment_slash = 391,
		comment_sms = 392,
		comments = 393,
		comments_outline = 394,
		comments_dollar = 395,
		compact_disc = 396,
		compass = 397,
		compass_outline = 398,
		compass_drafting = 399,
		compress = 400,
		computer = 401,
		computer_mouse = 402,
		cookie = 403,
		cookie_bite = 404,
		copy = 405,
		copy_outline = 406,
		copyright = 407,
		copyright_outline = 408,
		couch = 409,
		cow = 410,
		credit_card = 411,
		credit_card_outline = 412,
		crop = 413,
		crop_simple = 414,
		cross = 415,
		crosshairs = 416,
		crow = 417,
		crown = 418,
		crutch = 419,
		cruzeiro_sign = 420,
		cube = 421,
		cubes = 422,
		cubes_stacked = 423,
		d = 424,
		database = 425,
		delete_left = 426,
		democrat = 427,
		desktop = 428,
		dharmachakra = 429,
		diagram_next = 430,
		diagram_predecessor = 431,
		diagram_project = 432,
		diagram_successor = 433,
		diamond = 434,
		diamond_turn_right = 435,
		dice = 436,
		dice_d20 = 437,
		dice_d6 = 438,
		dice_five = 439,
		dice_four = 440,
		dice_one = 441,
		dice_six = 442,
		dice_three = 443,
		dice_two = 444,
		disease = 445,
		display = 446,
		divide = 447,
		dna = 448,
		dog = 449,
		dollar_sign = 450,
		dolly = 451,
		dong_sign = 452,
		door_closed = 453,
		door_open = 454,
		dove = 455,
		down_left_and_up_right_to_center = 456,
		down_long = 457,
		download = 458,
		dragon = 459,
		draw_polygon = 460,
		droplet = 461,
		droplet_slash = 462,
		drum = 463,
		drum_steelpan = 464,
		drumstick_bite = 465,
		dumbbell = 466,
		dumpster = 467,
		dumpster_fire = 468,
		dungeon = 469,
		e = 470,
		ear_deaf = 471,
		ear_listen = 472,
		earth_africa = 473,
		earth_americas = 474,
		earth_asia = 475,
		earth_europe = 476,
		earth_oceania = 477,
		egg = 478,
		eject = 479,
		elevator = 480,
		ellipsis = 481,
		ellipsis_vertical = 482,
		envelope = 483,
		envelope_outline = 484,
		envelope_circle_check = 485,
		envelope_open = 486,
		envelope_open_outline = 487,
		envelope_open_text = 488,
		envelopes_bulk = 489,
		equals = 490,
		eraser = 491,
		ethernet = 492,
		euro_sign = 493,
		exclamation = 494,
		expand = 495,
		explosion = 496,
		eye = 497,
		eye_outline = 498,
		eye_dropper = 499,
		eye_low_vision = 500,
		eye_slash = 501,
		eye_slash_outline = 502,
		f = 503,
		face_angry = 504,
		face_angry_outline = 505,
		face_dizzy = 506,
		face_dizzy_outline = 507,
		face_flushed = 508,
		face_flushed_outline = 509,
		face_frown = 510,
		face_frown_outline = 511,
		face_frown_open = 512,
		face_frown_open_outline = 513,
		face_grimace = 514,
		face_grimace_outline = 515,
		face_grin = 516,
		face_grin_outline = 517,
		face_grin_beam = 518,
		face_grin_beam_outline = 519,
		face_grin_beam_sweat = 520,
		face_grin_beam_sweat_outline = 521,
		face_grin_hearts = 522,
		face_grin_hearts_outline = 523,
		face_grin_squint = 524,
		face_grin_squint_outline = 525,
		face_grin_squint_tears = 526,
		face_grin_squint_tears_outline = 527,
		face_grin_stars = 528,
		face_grin_stars_outline = 529,
		face_grin_tears = 530,
		face_grin_tears_outline = 531,
		face_grin_tongue = 532,
		face_grin_tongue_outline = 533,
		face_grin_tongue_squint = 534,
		face_grin_tongue_squint_outline = 535,
		face_grin_tongue_wink = 536,
		face_grin_tongue_wink_outline = 537,
		face_grin_wide = 538,
		face_grin_wide_outline = 539,
		face_grin_wink = 540,
		face_grin_wink_outline = 541,
		face_kiss = 542,
		face_kiss_outline = 543,
		face_kiss_beam = 544,
		face_kiss_beam_outline = 545,
		face_kiss_wink_heart = 546,
		face_kiss_wink_heart_outline = 547,
		face_laugh = 548,
		face_laugh_outline = 549,
		face_laugh_beam = 550,
		face_laugh_beam_outline = 551,
		face_laugh_squint = 552,
		face_laugh_squint_outline = 553,
		face_laugh_wink = 554,
		face_laugh_wink_outline = 555,
		face_meh = 556,
		face_meh_outline = 557,
		face_meh_blank = 558,
		face_meh_blank_outline = 559,
		face_rolling_eyes = 560,
		face_rolling_eyes_outline = 561,
		face_sad_cry = 562,
		face_sad_cry_outline = 563,
		face_sad_tear = 564,
		face_sad_tear_outline = 565,
		face_smile = 566,
		face_smile_outline = 567,
		face_smile_beam = 568,
		face_smile_beam_outline = 569,
		face_smile_wink = 570,
		face_smile_wink_outline = 571,
		face_surprise = 572,
		face_surprise_outline = 573,
		face_tired = 574,
		face_tired_outline = 575,
		fan = 576,
		faucet = 577,
		faucet_drip = 578,
		fax = 579,
		feather = 580,
		feather_pointed = 581,
		ferry = 582,
		file = 583,
		file_outline = 584,
		file_arrow_down = 585,
		file_arrow_up = 586,
		file_audio = 587,
		file_audio_outline = 588,
		file_circle_check = 589,
		file_circle_exclamation = 590,
		file_circle_minus = 591,
		file_circle_plus = 592,
		file_circle_question = 593,
		file_circle_xmark = 594,
		file_code = 595,
		file_code_outline = 596,
		file_contract = 597,
		file_csv = 598,
		file_excel = 599,
		file_excel_outline = 600,
		file_export = 601,
		file_image = 602,
		file_image_outline = 603,
		file_import = 604,
		file_invoice = 605,
		file_invoice_dollar = 606,
		file_lines = 607,
		file_lines_outline = 608,
		file_medical = 609,
		file_pdf = 610,
		file_pdf_outline = 611,
		file_pen = 612,
		file_powerpoint = 613,
		file_powerpoint_outline = 614,
		file_prescription = 615,
		file_shield = 616,
		file_signature = 617,
		file_video = 618,
		file_video_outline = 619,
		file_waveform = 620,
		file_word = 621,
		file_word_outline = 622,
		file_zipper = 623,
		file_zipper_outline = 624,
		fill = 625,
		fill_drip = 626,
		film = 627,
		filter = 628,
		filter_circle_dollar = 629,
		filter_circle_xmark = 630,
		fingerprint = 631,
		fire = 632,
		fire_burner = 633,
		fire_extinguisher = 634,
		fire_flame_curved = 635,
		fire_flame_simple = 636,
		fish = 637,
		fish_fins = 638,
		flag = 639,
		flag_outline = 640,
		flag_checkered = 641,
		flag_usa = 642,
		flask = 643,
		flask_vial = 644,
		floppy_disk = 645,
		floppy_disk_outline = 646,
		florin_sign = 647,
		folder = 648,
		folder_outline = 649,
		folder_closed = 650,
		folder_closed_outline = 651,
		folder_minus = 652,
		folder_open = 653,
		folder_open_outline = 654,
		folder_plus = 655,
		folder_tree = 656,
		font = 657,
		font_awesome = 658,
		font_awesome_outline = 659,
		football = 660,
		forward = 661,
		forward_fast = 662,
		forward_step = 663,
		franc_sign = 664,
		frog = 665,
		futbol = 666,
		futbol_outline = 667,
		g = 668,
		gamepad = 669,
		gas_pump = 670,
		gauge = 671,
		gauge_high = 672,
		gauge_simple = 673,
		gauge_simple_high = 674,
		gavel = 675,
		gear = 676,
		gears = 677,
		gem = 678,
		gem_outline = 679,
		genderless = 680,
		ghost = 681,
		gift = 682,
		gifts = 683,
		glass_water = 684,
		glass_water_droplet = 685,
		glasses = 686,
		globe = 687,
		golf_ball_tee = 688,
		gopuram = 689,
		graduation_cap = 690,
		greater_than = 691,
		greater_than_equal = 692,
		grip = 693,
		grip_lines = 694,
		grip_lines_vertical = 695,
		grip_vertical = 696,
		group_arrows_rotate = 697,
		guarani_sign = 698,
		guitar = 699,
		gun = 700,
		h = 701,
		hammer = 702,
		hamsa = 703,
		hand = 704,
		hand_outline = 705,
		hand_back_fist = 706,
		hand_back_fist_outline = 707,
		hand_dots = 708,
		hand_fist = 709,
		hand_holding = 710,
		hand_holding_dollar = 711,
		hand_holding_droplet = 712,
		hand_holding_hand = 713,
		hand_holding_heart = 714,
		hand_holding_medical = 715,
		hand_lizard = 716,
		hand_lizard_outline = 717,
		hand_middle_finger = 718,
		hand_peace = 719,
		hand_peace_outline = 720,
		hand_point_down = 721,
		hand_point_down_outline = 722,
		hand_point_left = 723,
		hand_point_left_outline = 724,
		hand_point_right = 725,
		hand_point_right_outline = 726,
		hand_point_up = 727,
		hand_point_up_outline = 728,
		hand_pointer = 729,
		hand_pointer_outline = 730,
		hand_scissors = 731,
		hand_scissors_outline = 732,
		hand_sparkles = 733,
		hand_spock = 734,
		hand_spock_outline = 735,
		handcuffs = 736,
		hands = 737,
		hands_asl_interpreting = 738,
		hands_bound = 739,
		hands_bubbles = 740,
		hands_clapping = 741,
		hands_holding = 742,
		hands_holding_child = 743,
		hands_holding_circle = 744,
		hands_praying = 745,
		handshake = 746,
		handshake_outline = 747,
		handshake_angle = 748,
		handshake_simple = 749,
		handshake_simple_slash = 750,
		handshake_slash = 751,
		hanukiah = 752,
		hard_drive = 753,
		hard_drive_outline = 754,
		hashtag = 755,
		hat_cowboy = 756,
		hat_cowboy_side = 757,
		hat_wizard = 758,
		head_side_cough = 759,
		head_side_cough_slash = 760,
		head_side_mask = 761,
		head_side_virus = 762,
		heading = 763,
		headphones = 764,
		headphones_simple = 765,
		headset = 766,
		heart = 767,
		heart_outline = 768,
		heart_circle_bolt = 769,
		heart_circle_check = 770,
		heart_circle_exclamation = 771,
		heart_circle_minus = 772,
		heart_circle_plus = 773,
		heart_circle_xmark = 774,
		heart_crack = 775,
		heart_pulse = 776,
		helicopter = 777,
		helicopter_symbol = 778,
		helmet_safety = 779,
		helmet_un = 780,
		highlighter = 781,
		hill_avalanche = 782,
		hill_rockslide = 783,
		hippo = 784,
		hockey_puck = 785,
		holly_berry = 786,
		horse = 787,
		horse_head = 788,
		hospital = 789,
		hospital_outline = 790,
		hospital_user = 791,
		hot_tub_person = 792,
		hotdog = 793,
		hotel = 794,
		hourglass = 795,
		hourglass_outline = 796,
		hourglass_end = 797,
		hourglass_half = 798,
		hourglass_half_outline = 799,
		hourglass_start = 800,
		house = 801,
		house_chimney = 802,
		house_chimney_crack = 803,
		house_chimney_medical = 804,
		house_chimney_user = 805,
		house_chimney_window = 806,
		house_circle_check = 807,
		house_circle_exclamation = 808,
		house_circle_xmark = 809,
		house_crack = 810,
		house_fire = 811,
		house_flag = 812,
		house_flood_water = 813,
		house_flood_water_circle_arrow_right = 814,
		house_laptop = 815,
		house_lock = 816,
		house_medical = 817,
		house_medical_circle_check = 818,
		house_medical_circle_exclamation = 819,
		house_medical_circle_xmark = 820,
		house_medical_flag = 821,
		house_signal = 822,
		house_tsunami = 823,
		house_user = 824,
		hryvnia_sign = 825,
		hurricane = 826,
		i = 827,
		i_cursor = 828,
		ice_cream = 829,
		icicles = 830,
		icons = 831,
		id_badge = 832,
		id_badge_outline = 833,
		id_card = 834,
		id_card_outline = 835,
		id_card_clip = 836,
		igloo = 837,
		image = 838,
		image_outline = 839,
		image_portrait = 840,
		images = 841,
		images_outline = 842,
		inbox = 843,
		indent = 844,
		indian_rupee_sign = 845,
		industry = 846,
		infinity = 847,
		info = 848,
		italic = 849,
		j = 850,
		jar = 851,
		jar_wheat = 852,
		jedi = 853,
		jet_fighter = 854,
		jet_fighter_up = 855,
		joint = 856,
		jug_detergent = 857,
		k = 858,
		kaaba = 859,
		key = 860,
		keyboard = 861,
		keyboard_outline = 862,
		khanda = 863,
		kip_sign = 864,
		kit_medical = 865,
		kitchen_set = 866,
		kiwi_bird = 867,
		l = 868,
		land_mine_on = 869,
		landmark = 870,
		landmark_dome = 871,
		landmark_flag = 872,
		language = 873,
		laptop = 874,
		laptop_code = 875,
		laptop_file = 876,
		laptop_medical = 877,
		lari_sign = 878,
		layer_group = 879,
		leaf = 880,
		left_long = 881,
		left_right = 882,
		lemon = 883,
		lemon_outline = 884,
		less_than = 885,
		less_than_equal = 886,
		life_ring = 887,
		life_ring_outline = 888,
		lightbulb = 889,
		lightbulb_outline = 890,
		lines_leaning = 891,
		link = 892,
		link_slash = 893,
		lira_sign = 894,
		list = 895,
		list_check = 896,
		list_ol = 897,
		list_ul = 898,
		litecoin_sign = 899,
		location_arrow = 900,
		location_crosshairs = 901,
		location_dot = 902,
		location_pin = 903,
		location_pin_lock = 904,
		Lock = 905,
		lock_open = 906,
		locust = 907,
		lungs = 908,
		lungs_virus = 909,
		m = 910,
		magnet = 911,
		magnifying_glass = 912,
		magnifying_glass_arrow_right = 913,
		magnifying_glass_chart = 914,
		magnifying_glass_dollar = 915,
		magnifying_glass_location = 916,
		magnifying_glass_minus = 917,
		magnifying_glass_plus = 918,
		manat_sign = 919,
		map = 920,
		map_outline = 921,
		map_location = 922,
		map_location_dot = 923,
		map_pin = 924,
		marker = 925,
		mars = 926,
		mars_and_venus = 927,
		mars_and_venus_burst = 928,
		mars_double = 929,
		mars_stroke = 930,
		mars_stroke_right = 931,
		mars_stroke_up = 932,
		martini_glass = 933,
		martini_glass_citrus = 934,
		martini_glass_empty = 935,
		mask = 936,
		mask_face = 937,
		mask_ventilator = 938,
		masks_theater = 939,
		mattress_pillow = 940,
		maximize = 941,
		medal = 942,
		memory = 943,
		menorah = 944,
		mercury = 945,
		message = 946,
		message_outline = 947,
		meteor = 948,
		microchip = 949,
		microphone = 950,
		microphone_lines = 951,
		microphone_lines_slash = 952,
		microphone_slash = 953,
		microscope = 954,
		mill_sign = 955,
		minimize = 956,
		minus = 957,
		mitten = 958,
		mobile = 959,
		mobile_button = 960,
		mobile_retro = 961,
		mobile_screen = 962,
		mobile_screen_button = 963,
		money_bill = 964,
		money_bill_1 = 965,
		money_bill_1_outline = 966,
		money_bill_1_wave = 967,
		money_bill_transfer = 968,
		money_bill_trend_up = 969,
		money_bill_wave = 970,
		money_bill_wheat = 971,
		money_bills = 972,
		money_check = 973,
		money_check_dollar = 974,
		monument = 975,
		moon = 976,
		moon_outline = 977,
		mortar_pestle = 978,
		mosque = 979,
		mosquito = 980,
		mosquito_net = 981,
		motorcycle = 982,
		mound = 983,
		mountain = 984,
		mountain_city = 985,
		mountain_sun = 986,
		mug_hot = 987,
		mug_saucer = 988,
		music = 989,
		n = 990,
		naira_sign = 991,
		network_wired = 992,
		neuter = 993,
		newspaper = 994,
		newspaper_outline = 995,
		not_equal = 996,
		notdef = 997,
		note_sticky = 998,
		note_sticky_outline = 999,
		notes_medical = 1000,
		o = 1001,
		object_group = 1002,
		object_group_outline = 1003,
		object_ungroup = 1004,
		object_ungroup_outline = 1005,
		oil_can = 1006,
		oil_well = 1007,
		om = 1008,
		otter = 1009,
		outdent = 1010,
		p = 1011,
		pager = 1012,
		paint_roller = 1013,
		paintbrush = 1014,
		palette = 1015,
		pallet = 1016,
		panorama = 1017,
		paper_plane = 1018,
		paper_plane_outline = 1019,
		paperclip = 1020,
		parachute_box = 1021,
		paragraph = 1022,
		passport = 1023,
		paste = 1024,
		paste_outline = 1025,
		pause = 1026,
		paw = 1027,
		peace = 1028,
		pen = 1029,
		pen_clip = 1030,
		pen_fancy = 1031,
		pen_nib = 1032,
		pen_ruler = 1033,
		pen_to_square = 1034,
		pen_to_square_outline = 1035,
		pencil = 1036,
		people_arrows = 1037,
		people_carry_box = 1038,
		people_group = 1039,
		people_line = 1040,
		people_pulling = 1041,
		people_robbery = 1042,
		people_roof = 1043,
		pepper_hot = 1044,
		percent = 1045,
		person = 1046,
		person_arrow_down_to_line = 1047,
		person_arrow_up_from_line = 1048,
		person_biking = 1049,
		person_booth = 1050,
		person_breastfeeding = 1051,
		person_burst = 1052,
		person_cane = 1053,
		person_chalkboard = 1054,
		person_circle_check = 1055,
		person_circle_exclamation = 1056,
		person_circle_minus = 1057,
		person_circle_plus = 1058,
		person_circle_question = 1059,
		person_circle_xmark = 1060,
		person_digging = 1061,
		person_dots_from_line = 1062,
		person_dress = 1063,
		person_dress_burst = 1064,
		person_drowning = 1065,
		person_falling = 1066,
		person_falling_burst = 1067,
		person_half_dress = 1068,
		person_harassing = 1069,
		person_hiking = 1070,
		person_military_pointing = 1071,
		person_military_rifle = 1072,
		person_military_to_person = 1073,
		person_praying = 1074,
		person_pregnant = 1075,
		person_rays = 1076,
		person_rifle = 1077,
		person_running = 1078,
		person_shelter = 1079,
		person_skating = 1080,
		person_skiing = 1081,
		person_skiing_nordic = 1082,
		person_snowboarding = 1083,
		person_swimming = 1084,
		person_through_window = 1085,
		person_walking = 1086,
		person_walking_arrow_loop_left = 1087,
		person_walking_arrow_right = 1088,
		person_walking_dashed_line_arrow_right = 1089,
		person_walking_luggage = 1090,
		person_walking_with_cane = 1091,
		peseta_sign = 1092,
		peso_sign = 1093,
		phone = 1094,
		phone_flip = 1095,
		phone_slash = 1096,
		phone_volume = 1097,
		photo_film = 1098,
		piggy_bank = 1099,
		pills = 1100,
		pizza_slice = 1101,
		place_of_worship = 1102,
		plane = 1103,
		plane_arrival = 1104,
		plane_circle_check = 1105,
		plane_circle_exclamation = 1106,
		plane_circle_xmark = 1107,
		plane_departure = 1108,
		plane_lock = 1109,
		plane_slash = 1110,
		plane_up = 1111,
		plant_wilt = 1112,
		plate_wheat = 1113,
		play = 1114,
		plug = 1115,
		plug_circle_bolt = 1116,
		plug_circle_check = 1117,
		plug_circle_exclamation = 1118,
		plug_circle_minus = 1119,
		plug_circle_plus = 1120,
		plug_circle_xmark = 1121,
		plus = 1122,
		plus_minus = 1123,
		podcast = 1124,
		poo = 1125,
		poo_storm = 1126,
		poop = 1127,
		power_off = 1128,
		prescription = 1129,
		prescription_bottle = 1130,
		prescription_bottle_medical = 1131,
		print = 1132,
		pump_medical = 1133,
		pump_soap = 1134,
		puzzle_piece = 1135,
		q = 1136,
		qrcode = 1137,
		question = 1138,
		quote_left = 1139,
		quote_right = 1140,
		r = 1141,
		radiation = 1142,
		radio = 1143,
		rainbow = 1144,
		ranking_star = 1145,
		receipt = 1146,
		record_vinyl = 1147,
		rectangle_ad = 1148,
		rectangle_list = 1149,
		rectangle_list_outline = 1150,
		rectangle_xmark = 1151,
		rectangle_xmark_outline = 1152,
		recycle = 1153,
		registered = 1154,
		registered_outline = 1155,
		repeat = 1156,
		reply = 1157,
		reply_all = 1158,
		republican = 1159,
		restroom = 1160,
		retweet = 1161,
		ribbon = 1162,
		right_from_bracket = 1163,
		right_left = 1164,
		right_long = 1165,
		right_to_bracket = 1166,
		ring = 1167,
		road = 1168,
		road_barrier = 1169,
		road_bridge = 1170,
		road_circle_check = 1171,
		road_circle_exclamation = 1172,
		road_circle_xmark = 1173,
		road_lock = 1174,
		road_spikes = 1175,
		robot = 1176,
		rocket = 1177,
		rotate = 1178,
		rotate_left = 1179,
		rotate_right = 1180,
		route = 1181,
		rss = 1182,
		ruble_sign = 1183,
		rug = 1184,
		ruler = 1185,
		ruler_combined = 1186,
		ruler_horizontal = 1187,
		ruler_vertical = 1188,
		rupee_sign = 1189,
		rupiah_sign = 1190,
		s = 1191,
		sack_dollar = 1192,
		sack_xmark = 1193,
		sailboat = 1194,
		satellite = 1195,
		satellite_dish = 1196,
		scale_balanced = 1197,
		scale_unbalanced = 1198,
		scale_unbalanced_flip = 1199,
		school = 1200,
		school_circle_check = 1201,
		school_circle_exclamation = 1202,
		school_circle_xmark = 1203,
		school_flag = 1204,
		school_lock = 1205,
		scissors = 1206,
		screwdriver = 1207,
		screwdriver_wrench = 1208,
		scroll = 1209,
		scroll_torah = 1210,
		sd_card = 1211,
		section = 1212,
		seedling = 1213,
		server = 1214,
		shapes = 1215,
		share = 1216,
		share_from_square = 1217,
		share_from_square_outline = 1218,
		share_nodes = 1219,
		sheet_plastic = 1220,
		shekel_sign = 1221,
		shield = 1222,
		shield_cat = 1223,
		shield_dog = 1224,
		shield_halved = 1225,
		shield_heart = 1226,
		shield_virus = 1227,
		ship = 1228,
		shirt = 1229,
		shoe_prints = 1230,
		shop = 1231,
		shop_lock = 1232,
		shop_slash = 1233,
		shower = 1234,
		shrimp = 1235,
		shuffle = 1236,
		shuttle_space = 1237,
		sign_hanging = 1238,
		signal = 1239,
		signature = 1240,
		signs_post = 1241,
		sim_card = 1242,
		sink = 1243,
		sitemap = 1244,
		skull = 1245,
		skull_crossbones = 1246,
		slash = 1247,
		sleigh = 1248,
		sliders = 1249,
		smog = 1250,
		smoking = 1251,
		snowflake = 1252,
		snowflake_outline = 1253,
		snowman = 1254,
		snowplow = 1255,
		soap = 1256,
		socks = 1257,
		solar_panel = 1258,
		sort = 1259,
		sort_down = 1260,
		sort_up = 1261,
		spa = 1262,
		spaghetti_monster_flying = 1263,
		spell_check = 1264,
		spider = 1265,
		spinner = 1266,
		splotch = 1267,
		spoon = 1268,
		spray_can = 1269,
		spray_can_sparkles = 1270,
		square = 1271,
		square_outline = 1272,
		square_arrow_up_right = 1273,
		square_caret_down = 1274,
		square_caret_down_outline = 1275,
		square_caret_left = 1276,
		square_caret_left_outline = 1277,
		square_caret_right = 1278,
		square_caret_right_outline = 1279,
		square_caret_up = 1280,
		square_caret_up_outline = 1281,
		square_check = 1282,
		square_check_outline = 1283,
		square_envelope = 1284,
		square_full = 1285,
		square_full_outline = 1286,
		square_h = 1287,
		square_minus = 1288,
		square_minus_outline = 1289,
		square_nfi = 1290,
		square_parking = 1291,
		square_pen = 1292,
		square_person_confined = 1293,
		square_phone = 1294,
		square_phone_flip = 1295,
		square_plus = 1296,
		square_plus_outline = 1297,
		square_poll_horizontal = 1298,
		square_poll_vertical = 1299,
		square_root_variable = 1300,
		square_rss = 1301,
		square_share_nodes = 1302,
		square_up_right = 1303,
		square_virus = 1304,
		square_xmark = 1305,
		staff_snake = 1306,
		stairs = 1307,
		stamp = 1308,
		stapler = 1309,
		star = 1310,
		star_outline = 1311,
		star_and_crescent = 1312,
		star_half = 1313,
		star_half_outline = 1314,
		star_half_stroke = 1315,
		star_half_stroke_outline = 1316,
		star_of_david = 1317,
		star_of_life = 1318,
		sterling_sign = 1319,
		stethoscope = 1320,
		stop = 1321,
		stopwatch = 1322,
		stopwatch_20 = 1323,
		store = 1324,
		store_slash = 1325,
		street_view = 1326,
		strikethrough = 1327,
		stroopwafel = 1328,
		subscript = 1329,
		suitcase = 1330,
		suitcase_medical = 1331,
		suitcase_rolling = 1332,
		sun = 1333,
		sun_outline = 1334,
		sun_plant_wilt = 1335,
		superscript = 1336,
		swatchbook = 1337,
		synagogue = 1338,
		syringe = 1339,
		t = 1340,
		table = 1341,
		table_cells = 1342,
		table_cells_large = 1343,
		table_columns = 1344,
		table_list = 1345,
		table_tennis_paddle_ball = 1346,
		tablet = 1347,
		tablet_button = 1348,
		tablet_screen_button = 1349,
		tablets = 1350,
		tachograph_digital = 1351,
		tag = 1352,
		tags = 1353,
		tape = 1354,
		tarp = 1355,
		tarp_droplet = 1356,
		taxi = 1357,
		teeth = 1358,
		teeth_open = 1359,
		temperature_arrow_down = 1360,
		temperature_arrow_up = 1361,
		temperature_empty = 1362,
		temperature_full = 1363,
		temperature_half = 1364,
		temperature_high = 1365,
		temperature_low = 1366,
		temperature_quarter = 1367,
		temperature_three_quarters = 1368,
		tenge_sign = 1369,
		tent = 1370,
		tent_arrow_down_to_line = 1371,
		tent_arrow_left_right = 1372,
		tent_arrow_turn_left = 1373,
		tent_arrows_down = 1374,
		tents = 1375,
		terminal = 1376,
		text_height = 1377,
		text_slash = 1378,
		text_width = 1379,
		thermometer = 1380,
		thumbs_down = 1381,
		thumbs_down_outline = 1382,
		thumbs_up = 1383,
		thumbs_up_outline = 1384,
		thumbtack = 1385,
		ticket = 1386,
		ticket_simple = 1387,
		timeline = 1388,
		toggle_off = 1389,
		toggle_on = 1390,
		toilet = 1391,
		toilet_paper = 1392,
		toilet_paper_slash = 1393,
		toilet_portable = 1394,
		toilets_portable = 1395,
		toolbox = 1396,
		tooth = 1397,
		torii_gate = 1398,
		tornado = 1399,
		tower_broadcast = 1400,
		tower_cell = 1401,
		tower_observation = 1402,
		tractor = 1403,
		trademark = 1404,
		traffic_light = 1405,
		trailer = 1406,
		train = 1407,
		train_subway = 1408,
		train_tram = 1409,
		transgender = 1410,
		trash = 1411,
		trash_arrow_up = 1412,
		trash_can = 1413,
		trash_can_outline = 1414,
		trash_can_arrow_up = 1415,
		tree = 1416,
		tree_city = 1417,
		triangle_exclamation = 1418,
		trophy = 1419,
		trowel = 1420,
		trowel_bricks = 1421,
		truck = 1422,
		truck_arrow_right = 1423,
		truck_droplet = 1424,
		truck_fast = 1425,
		truck_field = 1426,
		truck_field_un = 1427,
		truck_front = 1428,
		truck_medical = 1429,
		truck_monster = 1430,
		truck_moving = 1431,
		truck_pickup = 1432,
		truck_plane = 1433,
		truck_ramp_box = 1434,
		tty = 1435,
		turkish_lira_sign = 1436,
		turn_down = 1437,
		turn_up = 1438,
		tv = 1439,
		u = 1440,
		umbrella = 1441,
		umbrella_beach = 1442,
		underline = 1443,
		universal_access = 1444,
		unlock = 1445,
		unlock_keyhole = 1446,
		up_down = 1447,
		up_down_left_right = 1448,
		up_long = 1449,
		up_right_and_down_left_from_center = 1450,
		up_right_from_square = 1451,
		upload = 1452,
		user = 1453,
		user_outline = 1454,
		user_astronaut = 1455,
		user_check = 1456,
		user_clock = 1457,
		user_doctor = 1458,
		user_gear = 1459,
		user_graduate = 1460,
		user_group = 1461,
		user_injured = 1462,
		user_large = 1463,
		user_large_slash = 1464,
		user_lock = 1465,
		user_minus = 1466,
		user_ninja = 1467,
		user_nurse = 1468,
		user_pen = 1469,
		user_plus = 1470,
		user_secret = 1471,
		user_shield = 1472,
		user_slash = 1473,
		user_tag = 1474,
		user_tie = 1475,
		user_xmark = 1476,
		users = 1477,
		users_between_lines = 1478,
		users_gear = 1479,
		users_line = 1480,
		users_rays = 1481,
		users_rectangle = 1482,
		users_slash = 1483,
		users_viewfinder = 1484,
		utensils = 1485,
		v = 1486,
		van_shuttle = 1487,
		vault = 1488,
		vector_square = 1489,
		venus = 1490,
		venus_double = 1491,
		venus_mars = 1492,
		vest = 1493,
		vest_patches = 1494,
		vial = 1495,
		vial_circle_check = 1496,
		vial_virus = 1497,
		vials = 1498,
		video = 1499,
		video_slash = 1500,
		vihara = 1501,
		virus = 1502,
		virus_covid = 1503,
		virus_covid_slash = 1504,
		virus_slash = 1505,
		viruses = 1506,
		voicemail = 1507,
		volcano = 1508,
		volleyball = 1509,
		volume_high = 1510,
		volume_low = 1511,
		volume_off = 1512,
		volume_xmark = 1513,
		vr_cardboard = 1514,
		w = 1515,
		walkie_talkie = 1516,
		wallet = 1517,
		wand_magic = 1518,
		wand_magic_sparkles = 1519,
		wand_sparkles = 1520,
		warehouse = 1521,
		water = 1522,
		water_ladder = 1523,
		wave_square = 1524,
		weight_hanging = 1525,
		weight_scale = 1526,
		wheat_awn = 1527,
		wheat_awn_circle_exclamation = 1528,
		wheelchair = 1529,
		wheelchair_move = 1530,
		whiskey_glass = 1531,
		wifi = 1532,
		wind = 1533,
		window_maximize = 1534,
		window_maximize_outline = 1535,
		window_minimize = 1536,
		window_minimize_outline = 1537,
		window_restore = 1538,
		window_restore_outline = 1539,
		wine_bottle = 1540,
		wine_glass = 1541,
		wine_glass_empty = 1542,
		won_sign = 1543,
		worm = 1544,
		wrench = 1545,
		x = 1546,
		x_ray = 1547,
		xmark = 1548,
		xmarks_lines = 1549,
		y = 1550,
		yen_sign = 1551,
		yin_yang = 1552,
		z = 1553,
	};

	NMS_Toolkit::TkNGuiEditorIcons::NGuiEditorIconEnum NGuiEditorIcon;

	friend bool operator==(const TkNGuiEditorIcons& lhs, const TkNGuiEditorIcons& rhs) 
	{
		return lhs.NGuiEditorIcon == rhs.NGuiEditorIcon;
	}
};

//Dependency: TkNGuiGraphicAnimatedImageData
//Dependency: TkNGuiEditorIcons
//Dependency: Colour32
struct TkNGuiGraphicStyleData
{
	enum class ShapeEnum : uint32_t
	{
		Rectangle = 0,
		Ellipse = 1,
		Line = 2,
		LineInverted = 3,
		Bezier = 4,
		BezierInverted = 5,
		BezierWide = 6,
		BezierWideInverted = 7,
	};

	enum class GradientEnum : uint32_t
	{
		None = 0,
		Vertical = 1,
		Horizontal = 2,
		HorizontalBounce = 3,
		Radial = 4,
		Box = 5,
	};

	NMS_Toolkit::TkNGuiGraphicAnimatedImageData Animated;
	float CornerRadius;
	float Desaturation;
	NMS_Toolkit::TkNGuiEditorIcons EditorIcon;
	float GradientEndOffset;
	float GradientStartOffset;
	int32_t Image;
	float MarginX;
	float MarginY;
	float PaddingX;
	float PaddingY;
	float StrokeGradientFeather;
	float StrokeGradientOffset;
	float StrokeSize;
	NMS::Colour32 Colour;
	NMS::Colour32 GradientColour;
	NMS::Colour32 IconColour;
	NMS::Colour32 StrokeColour;
	NMS::Colour32 StrokeGradientColour;
	NMS_Toolkit::TkNGuiGraphicStyleData::GradientEnum Gradient;
	bool GradientOffsetPercent;
	bool HasDropShadow;
	bool HasInnerGradient;
	bool HasOuterGradient;
	NMS_Toolkit::TkNGuiGraphicStyleData::ShapeEnum Shape;
	bool SolidColour;
	bool StrokeGradient;

	friend bool operator==(const TkNGuiGraphicStyleData& lhs, const TkNGuiGraphicStyleData& rhs) 
	{
		return lhs.Animated == rhs.Animated &&
		lhs.CornerRadius == rhs.CornerRadius &&
		lhs.Desaturation == rhs.Desaturation &&
		lhs.EditorIcon == rhs.EditorIcon &&
		lhs.GradientEndOffset == rhs.GradientEndOffset &&
		lhs.GradientStartOffset == rhs.GradientStartOffset &&
		lhs.Image == rhs.Image &&
		lhs.MarginX == rhs.MarginX &&
		lhs.MarginY == rhs.MarginY &&
		lhs.PaddingX == rhs.PaddingX &&
		lhs.PaddingY == rhs.PaddingY &&
		lhs.StrokeGradientFeather == rhs.StrokeGradientFeather &&
		lhs.StrokeGradientOffset == rhs.StrokeGradientOffset &&
		lhs.StrokeSize == rhs.StrokeSize &&
		lhs.Colour == rhs.Colour &&
		lhs.GradientColour == rhs.GradientColour &&
		lhs.IconColour == rhs.IconColour &&
		lhs.StrokeColour == rhs.StrokeColour &&
		lhs.StrokeGradientColour == rhs.StrokeGradientColour &&
		lhs.Gradient == rhs.Gradient &&
		lhs.GradientOffsetPercent == rhs.GradientOffsetPercent &&
		lhs.HasDropShadow == rhs.HasDropShadow &&
		lhs.HasInnerGradient == rhs.HasInnerGradient &&
		lhs.HasOuterGradient == rhs.HasOuterGradient &&
		lhs.Shape == rhs.Shape &&
		lhs.SolidColour == rhs.SolidColour &&
		lhs.StrokeGradient == rhs.StrokeGradient;
	}
};

struct TkCurveType
{
	enum class CurveEnum : uint32_t
	{
		Linear = 0,
		SmoothInOut = 1,
		FastInSlowOut = 2,
		BellSquared = 3,
		Squared = 4,
		Cubed = 5,
		Logarithmic = 6,
		SlowIn = 7,
		SlowOut = 8,
		ReallySlowOut = 9,
		SmootherStep = 10,
		SmoothFastInSlowOut = 11,
		SmoothSlowInFastOut = 12,
		EaseInSine = 13,
		EaseOutSine = 14,
		EaseInOutSine = 15,
		EaseInQuad = 16,
		EaseOutQuad = 17,
		EaseInOutQuad = 18,
		EaseInQuart = 19,
		EaseOutQuart = 20,
		EaseInOutQuart = 21,
		EaseInQuint = 22,
		EaseOutQuint = 23,
		EaseInOutQuint = 24,
		EaseInExpo = 25,
		EaseOutExpo = 26,
		EaseInOutExpo = 27,
		EaseInCirc = 28,
		EaseOutCirc = 29,
		EaseInOutCirc = 30,
		EaseInBack = 31,
		EaseOutBack = 32,
		EaseInOutBack = 33,
		EaseInElastic = 34,
		EaseOutElastic = 35,
		EaseInOutElastic = 36,
		EaseInBounce = 37,
		EaseOutBounce = 38,
		EaseInOutBounce = 39,
	};

	NMS_Toolkit::TkCurveType::CurveEnum Curve;

	friend bool operator==(const TkCurveType& lhs, const TkCurveType& rhs) 
	{
		return lhs.Curve == rhs.Curve;
	}
};

//Dependency: TkNGuiGraphicStyleData
//Dependency: TkCurveType
//Dependency: Vector2f
struct TkNGuiGraphicStyle
{
	enum class AnimateEnum : uint32_t
	{
		None = 0,
		WipeRightToLeft = 1,
		SimpleWipe = 2,
		SimpleWipeDown = 3,
		CustomWipe = 4,
		CustomWipeAlpha = 5,
	};

	NMS_Toolkit::TkNGuiGraphicStyleData Active;
	NMS_Toolkit::TkNGuiGraphicStyleData Default;
	NMS_Toolkit::TkNGuiGraphicStyleData Highlight;
	NMS::Vector2f CustomMaxStart;
	NMS::Vector2f CustomMinStart;
	NMS_Toolkit::TkNGuiGraphicStyle::AnimateEnum Animate;
	float AnimSplit;
	float AnimTime;
	float GlobalFade;
	float HighlightScale;
	float HighlightTime;
	NMS_Toolkit::TkCurveType AnimCurve1;
	NMS_Toolkit::TkCurveType AnimCurve2;
	bool AutoAdjustToChildrenHeight;
	bool DistributeChildrenHeight;
	bool DistributeChildrenWidth;
	bool IgnoreLayerForParentHeightAdjust;
	bool InheritStyleFromParentLayer;

	friend bool operator==(const TkNGuiGraphicStyle& lhs, const TkNGuiGraphicStyle& rhs) 
	{
		return lhs.Active == rhs.Active &&
		lhs.Default == rhs.Default &&
		lhs.Highlight == rhs.Highlight &&
		lhs.CustomMaxStart == rhs.CustomMaxStart &&
		lhs.CustomMinStart == rhs.CustomMinStart &&
		lhs.Animate == rhs.Animate &&
		lhs.AnimSplit == rhs.AnimSplit &&
		lhs.AnimTime == rhs.AnimTime &&
		lhs.GlobalFade == rhs.GlobalFade &&
		lhs.HighlightScale == rhs.HighlightScale &&
		lhs.HighlightTime == rhs.HighlightTime &&
		lhs.AnimCurve1 == rhs.AnimCurve1 &&
		lhs.AnimCurve2 == rhs.AnimCurve2 &&
		lhs.AutoAdjustToChildrenHeight == rhs.AutoAdjustToChildrenHeight &&
		lhs.DistributeChildrenHeight == rhs.DistributeChildrenHeight &&
		lhs.DistributeChildrenWidth == rhs.DistributeChildrenWidth &&
		lhs.IgnoreLayerForParentHeightAdjust == rhs.IgnoreLayerForParentHeightAdjust &&
		lhs.InheritStyleFromParentLayer == rhs.InheritStyleFromParentLayer;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiElementData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
struct GcNGuiGraphicData
{
	NMS_GameComponents::GcNGuiElementData ElementData;
	NMS::VariableSizeString Image;
	NMS_Toolkit::TkNGuiGraphicStyle Style;
	float Angle;

	friend bool operator==(const GcNGuiGraphicData& lhs, const GcNGuiGraphicData& rhs) 
	{
		return lhs.ElementData == rhs.ElementData &&
		lhs.Image == rhs.Image &&
		lhs.Style == rhs.Style &&
		lhs.Angle == rhs.Angle;
	}
};

//Dependency: NMSString0x20A
struct GcPetAccessoryInfo
{
	NMS::NMSString0x20A Descriptor;

	friend bool operator==(const GcPetAccessoryInfo& lhs, const GcPetAccessoryInfo& rhs) 
	{
		return lhs.Descriptor == rhs.Descriptor;
	}
};

struct GcPetAccessoryType
{
	enum class PetAccessoryEnum : uint32_t
	{
		None = 0,
		CargoCylinder = 1,
		Containers = 2,
		ShieldArmour = 3,
		SolarBattery = 4,
		Tank = 5,
		WingPanel = 6,
		TravelPack = 7,
		SpacePack = 8,
		CargoLong = 9,
		Antennae = 10,
		Computer = 11,
		Toolbelt = 12,
		LeftCanisters = 13,
		LeftEnergyCoil = 14,
		LeftFrigateTurret = 15,
		LeftHeadLights = 16,
		LeftArmourPlate = 17,
		LeftTurret = 18,
		LeftSupportSystem = 19,
		RightCanisters = 20,
		RightEnergyCoil = 21,
		RightFrigateTurret = 22,
		RightHeadLights = 23,
		RightArmourPlate = 24,
		RightTurret = 25,
		RightSupportSystem = 26,
		RightMechanicalPaw = 27,
		LeftMechanicalPaw = 28,
		MechanicalPaw = 29,
	};

	NMS_GameComponents::GcPetAccessoryType::PetAccessoryEnum PetAccessory;

	friend bool operator==(const GcPetAccessoryType& lhs, const GcPetAccessoryType& rhs) 
	{
		return lhs.PetAccessory == rhs.PetAccessory;
	}
};

//Dependency: GcPetAccessoryType
//Dependency: NMSString0x10
struct GcPetAccessoryGroup
{
	std::vector<NMS_GameComponents::GcPetAccessoryType> DisallowedAccessories;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcPetAccessoryGroup& lhs, const GcPetAccessoryGroup& rhs) 
	{
		return lhs.DisallowedAccessories == rhs.DisallowedAccessories &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: GcPetAccessoryInfo
//Dependency: GcPetAccessoryGroup
struct GcPetAccessoryTable
{
	NMS_GameComponents::GcPetAccessoryInfo Accessories[30];
	std::vector<NMS_GameComponents::GcPetAccessoryGroup> AccessoryGroups;

	friend bool operator==(const GcPetAccessoryTable& lhs, const GcPetAccessoryTable& rhs) 
	{
		return std::equal(std::begin(lhs.Accessories), std::end(lhs.Accessories), std::begin(rhs.Accessories)) &&
		lhs.AccessoryGroups == rhs.AccessoryGroups;
	}
};

struct GcSolarSystemLocatorTypes
{
	enum class LocatorTypeEnum : uint32_t
	{
		Generic1 = 0,
		Generic2 = 1,
		Generic3 = 2,
		Generic4 = 3,
	};

	NMS_GameComponents::GcSolarSystemLocatorTypes::LocatorTypeEnum LocatorType;

	friend bool operator==(const GcSolarSystemLocatorTypes& lhs, const GcSolarSystemLocatorTypes& rhs) 
	{
		return lhs.LocatorType == rhs.LocatorType;
	}
};

//Dependency: GcSolarSystemLocatorTypes
//Dependency: NMSString0x20
struct GcSolarSystemLocatorChoice
{
	enum class ChoiceEnum : uint32_t
	{
		LookupName = 0,
		AnyOfType = 1,
		SpecificIndex = 2,
		InFrontOfPlayer = 3,
	};

	NMS_GameComponents::GcSolarSystemLocatorChoice::ChoiceEnum Choice;
	int32_t Index;
	NMS_GameComponents::GcSolarSystemLocatorTypes Type;
	NMS::NMSString0x20 Name;

	friend bool operator==(const GcSolarSystemLocatorChoice& lhs, const GcSolarSystemLocatorChoice& rhs) 
	{
		return lhs.Choice == rhs.Choice &&
		lhs.Index == rhs.Index &&
		lhs.Type == rhs.Type &&
		lhs.Name == rhs.Name;
	}
};

struct GcCostFrigateCargo
{

	friend bool operator==(const GcCostFrigateCargo& lhs, const GcCostFrigateCargo& rhs) 
	{
		return true;
	}
};

struct GcSettlementTowerPower
{
	enum class SettlementTowerPowerEnum : uint32_t
	{
		EarnNavigationData = 0,
		ScanForBuildings = 1,
		ScanForAnomalies = 2,
		ScanForCrashedShips = 3,
	};

	NMS_GameComponents::GcSettlementTowerPower::SettlementTowerPowerEnum SettlementTowerPower;

	friend bool operator==(const GcSettlementTowerPower& lhs, const GcSettlementTowerPower& rhs) 
	{
		return lhs.SettlementTowerPower == rhs.SettlementTowerPower;
	}
};

//Dependency: GcAISpaceshipModelDataArray
//Dependency: GcAISpaceshipModelData
struct GcAISpaceshipManagerData
{
	NMS_GameComponents::GcAISpaceshipModelDataArray SystemSpaceships[5];
	NMS_GameComponents::GcAISpaceshipModelData SentinelCrashSiteShip;

	friend bool operator==(const GcAISpaceshipManagerData& lhs, const GcAISpaceshipManagerData& rhs) 
	{
		return std::equal(std::begin(lhs.SystemSpaceships), std::end(lhs.SystemSpaceships), std::begin(rhs.SystemSpaceships)) &&
		lhs.SentinelCrashSiteShip == rhs.SentinelCrashSiteShip;
	}
};

struct GcMissionConditionHasSettlementLocal
{

	friend bool operator==(const GcMissionConditionHasSettlementLocal& lhs, const GcMissionConditionHasSettlementLocal& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcEntitlementRewardData
{
	NMS::NMSString0x20A Error;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 EntitlementId;
	NMS::NMSString0x10 RewardId;

	friend bool operator==(const GcEntitlementRewardData& lhs, const GcEntitlementRewardData& rhs) 
	{
		return lhs.Error == rhs.Error &&
		lhs.Name == rhs.Name &&
		lhs.EntitlementId == rhs.EntitlementId &&
		lhs.RewardId == rhs.RewardId;
	}
};

//Dependency: GcEntitlementRewardData
struct GcEntitlementRewardsTable
{
	std::vector<NMS_GameComponents::GcEntitlementRewardData> Table;

	friend bool operator==(const GcEntitlementRewardsTable& lhs, const GcEntitlementRewardsTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcFuelUseDifficultyOption
{
	enum class FuelUseDifficultyEnum : uint32_t
	{
		Free = 0,
		Cheap = 1,
		Normal = 2,
		Expensive = 3,
	};

	NMS_GameComponents::GcFuelUseDifficultyOption::FuelUseDifficultyEnum FuelUseDifficulty;

	friend bool operator==(const GcFuelUseDifficultyOption& lhs, const GcFuelUseDifficultyOption& rhs) 
	{
		return lhs.FuelUseDifficulty == rhs.FuelUseDifficulty;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct INMSString
{

	friend bool operator==(const INMSString& lhs, const INMSString& rhs) 
	{
		return true;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcMissionConditionLocation
{
	enum class MissionPlayerLocationEnum : uint32_t
	{
		OnPlanet = 0,
		OnPlanetInVehicle = 1,
		AnywhereInPlanetAtmos = 2,
		InShipLanded = 3,
		InShipInPlanetOrbit = 4,
		InShipInSpace = 5,
		InShipAnywhere = 6,
		InSpaceStation = 7,
		InFreighter = 8,
		InYourFreighter = 9,
		InOtherPlayerFreighter = 10,
		Underground = 11,
		InBuilding = 12,
		Frigate = 13,
		Underwater = 14,
		UnderwaterSwimming = 15,
		DeepUnderwater = 16,
		InSubmarine = 17,
		Frigate_Damaged = 18,
		FreighterConstructionArea = 19,
		FriendsPlanetBase = 20,
		OnPlanetSurface = 21,
		InNexus = 22,
		InNexusOnFoot = 23,
		AbandonedFreighterExterior = 24,
		AbandonedFreighterInterior = 25,
		AbandonedFreighterAirlock = 26,
		AtlasStation = 27,
		AtlasStationFinal = 28,
	};

	NMS_GameComponents::GcMissionConditionLocation::MissionPlayerLocationEnum MissionPlayerLocation;

	friend bool operator==(const GcMissionConditionLocation& lhs, const GcMissionConditionLocation& rhs) 
	{
		return lhs.MissionPlayerLocation == rhs.MissionPlayerLocation;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct INMSVariableLengthString
{

	friend bool operator==(const INMSVariableLengthString& lhs, const INMSVariableLengthString& rhs) 
	{
		return true;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcCreatureTypes
{
	enum class CreatureTypeEnum : uint32_t
	{
		None = 0,
		Bird = 1,
		FlyingLizard = 2,
		FlyingSnake = 3,
		Butterfly = 4,
		FlyingBeetle = 5,
		Beetle = 6,
		Fish = 7,
		Shark = 8,
		Crab = 9,
		Snake = 10,
		Dino = 11,
		Antelope = 12,
		Rodent = 13,
		Cat = 14,
		Fiend = 15,
		BugQueen = 16,
		BugFiend = 17,
		Drone = 18,
		Quad = 19,
		SpiderQuad = 20,
		SpiderQuadMini = 21,
		Walker = 22,
		Predator = 23,
		PlayerPredator = 24,
		Prey = 25,
		Passive = 26,
		FishPredator = 27,
		FishPrey = 28,
		FiendFishSmall = 29,
		FiendFishBig = 30,
		Jellyfish = 31,
		LandJellyfish = 32,
		RockCreature = 33,
		MiniFiend = 34,
		Floater = 35,
		Scuttler = 36,
		Slug = 37,
		MiniDrone = 38,
		MiniRobo = 39,
		SpaceFloater = 40,
		JellyBoss = 41,
		JellyBossBrood = 42,
		LandSquid = 43,
		Weird = 44,
		SeaSnake = 45,
		SandWorm = 46,
		ProtoRoller = 47,
		ProtoFlyer = 48,
		ProtoDigger = 49,
		Plough = 50,
		Digger = 51,
		Drill = 52,
		Brainless = 53,
		Pet = 54,
	};

	NMS_GameComponents::GcCreatureTypes::CreatureTypeEnum CreatureType;

	friend bool operator==(const GcCreatureTypes& lhs, const GcCreatureTypes& rhs) 
	{
		return lhs.CreatureType == rhs.CreatureType;
	}
};

//Dependency: GcCreatureTypes
struct GcCreatureAlertData
{
	NMS_GameComponents::GcCreatureTypes AlertInitiator;
	NMS_GameComponents::GcCreatureTypes AlertTarget;
	float FleeRange;
	float HearingRange;
	float SightAngle;
	float SightRange;

	friend bool operator==(const GcCreatureAlertData& lhs, const GcCreatureAlertData& rhs) 
	{
		return lhs.AlertInitiator == rhs.AlertInitiator &&
		lhs.AlertTarget == rhs.AlertTarget &&
		lhs.FleeRange == rhs.FleeRange &&
		lhs.HearingRange == rhs.HearingRange &&
		lhs.SightAngle == rhs.SightAngle &&
		lhs.SightRange == rhs.SightRange;
	}
};

//Dependency: GcCreatureAlertData
struct GcCreatureNearbyEvent
{
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	bool Inverse;

	friend bool operator==(const GcCreatureNearbyEvent& lhs, const GcCreatureNearbyEvent& rhs) 
	{
		return lhs.AlertTable == rhs.AlertTable &&
		lhs.Inverse == rhs.Inverse;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct IHashMap
{

	friend bool operator==(const IHashMap& lhs, const IHashMap& rhs) 
	{
		return true;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcVehicleCheckpointComponentData
{
	enum class RaceTypeEnum : uint32_t
	{
		Vehicle = 0,
		Spaceship = 1,
	};

	enum class CheckpointTypeEnum : uint32_t
	{
		Checkpoint = 0,
		Start = 1,
	};

	NMS_GameComponents::GcVehicleCheckpointComponentData::CheckpointTypeEnum CheckpointType;
	NMS_GameComponents::GcVehicleCheckpointComponentData::RaceTypeEnum RaceType;
	float Radius;

	friend bool operator==(const GcVehicleCheckpointComponentData& lhs, const GcVehicleCheckpointComponentData& rhs) 
	{
		return lhs.CheckpointType == rhs.CheckpointType &&
		lhs.RaceType == rhs.RaceType &&
		lhs.Radius == rhs.Radius;
	}
};

//Dependency: NMSString0x10
struct GcFishingRecord
{
	NMS::NMSString0x10 ProductList[256];
	float LargestCatchList[256];
	uint32_t ProductCountList[256];

	friend bool operator==(const GcFishingRecord& lhs, const GcFishingRecord& rhs) 
	{
		return std::equal(std::begin(lhs.ProductList), std::end(lhs.ProductList), std::begin(rhs.ProductList)) &&
		std::equal(std::begin(lhs.LargestCatchList), std::end(lhs.LargestCatchList), std::begin(rhs.LargestCatchList)) &&
		std::equal(std::begin(lhs.ProductCountList), std::end(lhs.ProductCountList), std::begin(rhs.ProductCountList));
	}
};

struct GcInventoryType
{
	enum class InventoryTypeEnum : uint32_t
	{
		Substance = 0,
		Technology = 1,
		Product = 2,
	};

	NMS_GameComponents::GcInventoryType::InventoryTypeEnum InventoryType;

	friend bool operator==(const GcInventoryType& lhs, const GcInventoryType& rhs) 
	{
		return lhs.InventoryType == rhs.InventoryType;
	}
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcRefinerRecipeElement
{
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcInventoryType Type;

	friend bool operator==(const GcRefinerRecipeElement& lhs, const GcRefinerRecipeElement& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Amount == rhs.Amount &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: NMSString0x10
struct GcSpawnDensity
{
	enum class CoverageTypeEnum : uint32_t
	{
		Total = 0,
		SmoothPatch = 1,
		GridPatch = 2,
	};

	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcSpawnDensity::CoverageTypeEnum CoverageType;
	float PatchSize;
	float RegionScale;
	bool Active;

	friend bool operator==(const GcSpawnDensity& lhs, const GcSpawnDensity& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.CoverageType == rhs.CoverageType &&
		lhs.PatchSize == rhs.PatchSize &&
		lhs.RegionScale == rhs.RegionScale &&
		lhs.Active == rhs.Active;
	}
};

//Dependency: GcSpawnDensity
struct GcSpawnDensityList
{
	std::vector<NMS_GameComponents::GcSpawnDensity> DensityList;

	friend bool operator==(const GcSpawnDensityList& lhs, const GcSpawnDensityList& rhs) 
	{
		return lhs.DensityList == rhs.DensityList;
	}
};

struct GcActiveSurvivalBarsDifficultyOption
{
	enum class ActiveSurvivalBarsDifficultyEnum : uint32_t
	{
		None = 0,
		HealthOnly = 1,
		HealthAndHazard = 2,
		All = 3,
	};

	NMS_GameComponents::GcActiveSurvivalBarsDifficultyOption::ActiveSurvivalBarsDifficultyEnum ActiveSurvivalBarsDifficulty;

	friend bool operator==(const GcActiveSurvivalBarsDifficultyOption& lhs, const GcActiveSurvivalBarsDifficultyOption& rhs) 
	{
		return lhs.ActiveSurvivalBarsDifficulty == rhs.ActiveSurvivalBarsDifficulty;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: NMSString0x40
struct GcExpeditionEventSaveData
{
	NMS::NMSString0x20A EventID;
	NMS::NMSString0x20A InterventionEventID;
	NMS::NMSString0x20A OverriddenRewardDescription;
	std::vector<int32_t> AffectedFrigateIndices;
	std::vector<int32_t> AffectedFrigateResponses;
	NMS::NMSString0x10 OverriddenReward;
	std::vector<int32_t> RepairingFrigateIndices;
	NMS::GcSeed Seed;
	uint64_t UA;
	NMS::NMSString0x40 OverriddenDescription;
	bool AvoidedIntervention;
	bool IsInterventionEvent;
	bool Success;
	bool WhaleEvent;

	friend bool operator==(const GcExpeditionEventSaveData& lhs, const GcExpeditionEventSaveData& rhs) 
	{
		return lhs.EventID == rhs.EventID &&
		lhs.InterventionEventID == rhs.InterventionEventID &&
		lhs.OverriddenRewardDescription == rhs.OverriddenRewardDescription &&
		lhs.AffectedFrigateIndices == rhs.AffectedFrigateIndices &&
		lhs.AffectedFrigateResponses == rhs.AffectedFrigateResponses &&
		lhs.OverriddenReward == rhs.OverriddenReward &&
		lhs.RepairingFrigateIndices == rhs.RepairingFrigateIndices &&
		lhs.Seed == rhs.Seed &&
		lhs.UA == rhs.UA &&
		lhs.OverriddenDescription == rhs.OverriddenDescription &&
		lhs.AvoidedIntervention == rhs.AvoidedIntervention &&
		lhs.IsInterventionEvent == rhs.IsInterventionEvent &&
		lhs.Success == rhs.Success &&
		lhs.WhaleEvent == rhs.WhaleEvent;
	}
};

struct GcAudio3PointDopplerData
{
	float Front;
	float Mid;
	float Rear;

	friend bool operator==(const GcAudio3PointDopplerData& lhs, const GcAudio3PointDopplerData& rhs) 
	{
		return lhs.Front == rhs.Front &&
		lhs.Mid == rhs.Mid &&
		lhs.Rear == rhs.Rear;
	}
};

//Dependency: GcAudio3PointDopplerData
struct GcAudioNPCDoppler
{
	NMS_GameComponents::GcAudio3PointDopplerData Config[7];

	friend bool operator==(const GcAudioNPCDoppler& lhs, const GcAudioNPCDoppler& rhs) 
	{
		return std::equal(std::begin(lhs.Config), std::end(lhs.Config), std::begin(rhs.Config));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcAudioNPCDoppler
//Dependency: Vector2f
//Dependency: GcAudio3PointDopplerData
struct GcAudioGlobals
{
	std::vector<float> ByteBeatScaleDegreeProbability;
	NMS_GameComponents::GcAudioNPCDoppler NPCEngines;
	NMS_GameComponents::GcAudio3PointDopplerData DroneDoppler;
	NMS::Vector2f ByteBeatSpeakerMaxAmplitude;
	NMS::Vector2f ByteBeatSpeakerMaxFrequency;
	NMS::Vector2f ByteBeatSpeakerMinFrequency;
	NMS::Vector2f CommsChatterFalloffFreighers;
	NMS::Vector2f CommsChatterFalloffShips;
	NMS::Vector2f ShorelineSenseRadius;
	NMS::Vector2f ShorelineSenseUJitter;
	NMS::Vector2f ShorelineSenseVJitter;
	float ArmFoleySpeedMultiplier;
	float ArmWhooshFoleyValueTrigger;
	float AtlasStationActiveDistance;
	float AuxSendCaveRampDistance;
	float AuxSendOutdoorsRampDistance;
	float ByteBeatBeginAtTonicProbability;
	float ByteBeatChangeNoteProbability;
	float ByteBeatCrossfadeTime;
	float ByteBeatDrumMixHigh;
	float ByteBeatDrumMixLow;
	int32_t ByteBeatMaxGeneratingAudio;
	int32_t ByteBeatNonSilentAttempts;
	float ByteBeatNonSilentAvgInterpSpeed;
	float ByteBeatNonSilentSDCutoff;
	float ByteBeatNonSilentTime;
	float ByteBeatPlayerFadeOut;
	int32_t ByteBeatPlayerNumLoops;
	float ByteBeatSkipNoteProbability;
	float ByteBeatSpeakerVolumeInterSpeed;
	float ByteBeatSynthMixHigh;
	float ByteBeatSynthMixLow;
	int32_t ByteBeatVisualisationMiniPixelStep;
	int32_t ByteBeatVisualisationMode;
	int32_t ByteBeatVisualisationPixelStep;
	float ByteBeatVisualisationTime;
	float DistanceReportMax;
	float DistanceReportMin;
	float DistanceSquishMaxTravel;
	float DistanceSquishScaleToListener;
	float DroneDopplerExtentsFactor;
	float FishingMusicRampInTime;
	float FishingMusicRampOutTime;
	float LadderStepDistance;
	float MiniStationActiveDistance;
	float MinSecondsBetweenArmWhooshes;
	float ObstructionAuxControlWhenHidden;
	float ObstructionAuxControlWhenVisible;
	float ObstructionSmoothTime;
	float ObstructionValueMax;
	float PlayerDepthUnderwaterMax;
	float PlayerLowerOffsetEmitterMul;
	float ShorelineObstructionMul;
	float ShorelineObstructionSmoothRate;
	float ShorelineSenseBaseU;
	float ShorelineSenseBlend;
	float ShorelineSenseProbeDist;
	float ShorelineSenseStartUp;
	float ShorelineValidityRate;
	float ThirdPersonPushTowardsPlayer;
	float WaveintensityRTPCSmoothRate;
	bool EnableVRSpecificAudio;
	bool LockListenerMatrix;
	bool ObstructionEnabled;
	bool PulseMusicEnabled;
	bool UseShorelineAudioInOpenWater;

	friend bool operator==(const GcAudioGlobals& lhs, const GcAudioGlobals& rhs) 
	{
		return lhs.ByteBeatScaleDegreeProbability == rhs.ByteBeatScaleDegreeProbability &&
		lhs.NPCEngines == rhs.NPCEngines &&
		lhs.DroneDoppler == rhs.DroneDoppler &&
		lhs.ByteBeatSpeakerMaxAmplitude == rhs.ByteBeatSpeakerMaxAmplitude &&
		lhs.ByteBeatSpeakerMaxFrequency == rhs.ByteBeatSpeakerMaxFrequency &&
		lhs.ByteBeatSpeakerMinFrequency == rhs.ByteBeatSpeakerMinFrequency &&
		lhs.CommsChatterFalloffFreighers == rhs.CommsChatterFalloffFreighers &&
		lhs.CommsChatterFalloffShips == rhs.CommsChatterFalloffShips &&
		lhs.ShorelineSenseRadius == rhs.ShorelineSenseRadius &&
		lhs.ShorelineSenseUJitter == rhs.ShorelineSenseUJitter &&
		lhs.ShorelineSenseVJitter == rhs.ShorelineSenseVJitter &&
		lhs.ArmFoleySpeedMultiplier == rhs.ArmFoleySpeedMultiplier &&
		lhs.ArmWhooshFoleyValueTrigger == rhs.ArmWhooshFoleyValueTrigger &&
		lhs.AtlasStationActiveDistance == rhs.AtlasStationActiveDistance &&
		lhs.AuxSendCaveRampDistance == rhs.AuxSendCaveRampDistance &&
		lhs.AuxSendOutdoorsRampDistance == rhs.AuxSendOutdoorsRampDistance &&
		lhs.ByteBeatBeginAtTonicProbability == rhs.ByteBeatBeginAtTonicProbability &&
		lhs.ByteBeatChangeNoteProbability == rhs.ByteBeatChangeNoteProbability &&
		lhs.ByteBeatCrossfadeTime == rhs.ByteBeatCrossfadeTime &&
		lhs.ByteBeatDrumMixHigh == rhs.ByteBeatDrumMixHigh &&
		lhs.ByteBeatDrumMixLow == rhs.ByteBeatDrumMixLow &&
		lhs.ByteBeatMaxGeneratingAudio == rhs.ByteBeatMaxGeneratingAudio &&
		lhs.ByteBeatNonSilentAttempts == rhs.ByteBeatNonSilentAttempts &&
		lhs.ByteBeatNonSilentAvgInterpSpeed == rhs.ByteBeatNonSilentAvgInterpSpeed &&
		lhs.ByteBeatNonSilentSDCutoff == rhs.ByteBeatNonSilentSDCutoff &&
		lhs.ByteBeatNonSilentTime == rhs.ByteBeatNonSilentTime &&
		lhs.ByteBeatPlayerFadeOut == rhs.ByteBeatPlayerFadeOut &&
		lhs.ByteBeatPlayerNumLoops == rhs.ByteBeatPlayerNumLoops &&
		lhs.ByteBeatSkipNoteProbability == rhs.ByteBeatSkipNoteProbability &&
		lhs.ByteBeatSpeakerVolumeInterSpeed == rhs.ByteBeatSpeakerVolumeInterSpeed &&
		lhs.ByteBeatSynthMixHigh == rhs.ByteBeatSynthMixHigh &&
		lhs.ByteBeatSynthMixLow == rhs.ByteBeatSynthMixLow &&
		lhs.ByteBeatVisualisationMiniPixelStep == rhs.ByteBeatVisualisationMiniPixelStep &&
		lhs.ByteBeatVisualisationMode == rhs.ByteBeatVisualisationMode &&
		lhs.ByteBeatVisualisationPixelStep == rhs.ByteBeatVisualisationPixelStep &&
		lhs.ByteBeatVisualisationTime == rhs.ByteBeatVisualisationTime &&
		lhs.DistanceReportMax == rhs.DistanceReportMax &&
		lhs.DistanceReportMin == rhs.DistanceReportMin &&
		lhs.DistanceSquishMaxTravel == rhs.DistanceSquishMaxTravel &&
		lhs.DistanceSquishScaleToListener == rhs.DistanceSquishScaleToListener &&
		lhs.DroneDopplerExtentsFactor == rhs.DroneDopplerExtentsFactor &&
		lhs.FishingMusicRampInTime == rhs.FishingMusicRampInTime &&
		lhs.FishingMusicRampOutTime == rhs.FishingMusicRampOutTime &&
		lhs.LadderStepDistance == rhs.LadderStepDistance &&
		lhs.MiniStationActiveDistance == rhs.MiniStationActiveDistance &&
		lhs.MinSecondsBetweenArmWhooshes == rhs.MinSecondsBetweenArmWhooshes &&
		lhs.ObstructionAuxControlWhenHidden == rhs.ObstructionAuxControlWhenHidden &&
		lhs.ObstructionAuxControlWhenVisible == rhs.ObstructionAuxControlWhenVisible &&
		lhs.ObstructionSmoothTime == rhs.ObstructionSmoothTime &&
		lhs.ObstructionValueMax == rhs.ObstructionValueMax &&
		lhs.PlayerDepthUnderwaterMax == rhs.PlayerDepthUnderwaterMax &&
		lhs.PlayerLowerOffsetEmitterMul == rhs.PlayerLowerOffsetEmitterMul &&
		lhs.ShorelineObstructionMul == rhs.ShorelineObstructionMul &&
		lhs.ShorelineObstructionSmoothRate == rhs.ShorelineObstructionSmoothRate &&
		lhs.ShorelineSenseBaseU == rhs.ShorelineSenseBaseU &&
		lhs.ShorelineSenseBlend == rhs.ShorelineSenseBlend &&
		lhs.ShorelineSenseProbeDist == rhs.ShorelineSenseProbeDist &&
		lhs.ShorelineSenseStartUp == rhs.ShorelineSenseStartUp &&
		lhs.ShorelineValidityRate == rhs.ShorelineValidityRate &&
		lhs.ThirdPersonPushTowardsPlayer == rhs.ThirdPersonPushTowardsPlayer &&
		lhs.WaveintensityRTPCSmoothRate == rhs.WaveintensityRTPCSmoothRate &&
		lhs.EnableVRSpecificAudio == rhs.EnableVRSpecificAudio &&
		lhs.LockListenerMatrix == rhs.LockListenerMatrix &&
		lhs.ObstructionEnabled == rhs.ObstructionEnabled &&
		lhs.PulseMusicEnabled == rhs.PulseMusicEnabled &&
		lhs.UseShorelineAudioInOpenWater == rhs.UseShorelineAudioInOpenWater;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: Vector3f
struct AxisSpecification
{
	enum class AxisEnum : uint32_t
	{
		X = 0,
		Y = 1,
		Z = 2,
		NegativeX = 3,
		NegativeY = 4,
		NegativeZ = 5,
		CustomAxis = 6,
	};

	NMS::Vector3f CustomAxis;
	NMS_GameComponents::AxisSpecification::AxisEnum Axis;

	friend bool operator==(const AxisSpecification& lhs, const AxisSpecification& rhs) 
	{
		return lhs.CustomAxis == rhs.CustomAxis &&
		lhs.Axis == rhs.Axis;
	}
};

struct GcSeasonalRingData
{
	float CoreOpacity;
	float RingOpacity;
	float RingSize;

	friend bool operator==(const GcSeasonalRingData& lhs, const GcSeasonalRingData& rhs) 
	{
		return lhs.CoreOpacity == rhs.CoreOpacity &&
		lhs.RingOpacity == rhs.RingOpacity &&
		lhs.RingSize == rhs.RingSize;
	}
};

struct GcDistanceScaleComponentData
{
	float MaxDistance;
	float MaxHeight;
	float MinDistance;
	float MinHeight;
	float Scale;
	bool DisabledWhenOnFreighter;
	bool UseGlobals;

	friend bool operator==(const GcDistanceScaleComponentData& lhs, const GcDistanceScaleComponentData& rhs) 
	{
		return lhs.MaxDistance == rhs.MaxDistance &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MinDistance == rhs.MinDistance &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.Scale == rhs.Scale &&
		lhs.DisabledWhenOnFreighter == rhs.DisabledWhenOnFreighter &&
		lhs.UseGlobals == rhs.UseGlobals;
	}
};

//Dependency: AxisSpecification
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcCollisionCapsule
{
	NMS_GameComponents::AxisSpecification CapsuleAxis;
	NMS::Vector3f CapsuleCentre;
	float CapsuleLength;
	float CapsuleRadius;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 NodeName;
	bool Enabled;
	bool ImproveCollisionForNarrowCapsule;

	friend bool operator==(const GcCollisionCapsule& lhs, const GcCollisionCapsule& rhs) 
	{
		return lhs.CapsuleAxis == rhs.CapsuleAxis &&
		lhs.CapsuleCentre == rhs.CapsuleCentre &&
		lhs.CapsuleLength == rhs.CapsuleLength &&
		lhs.CapsuleRadius == rhs.CapsuleRadius &&
		lhs.Name == rhs.Name &&
		lhs.NodeName == rhs.NodeName &&
		lhs.Enabled == rhs.Enabled &&
		lhs.ImproveCollisionForNarrowCapsule == rhs.ImproveCollisionForNarrowCapsule;
	}
};

struct GcConstraintsToCreateSpec
{
	float PushingStrength_Diagonal_1x1_0011;
	float PushingStrength_Diagonal_1x1_0110;
	float PushingStrength_Horizontal_1x0;
	float PushingStrength_Horizontal_2x0;
	float PushingStrength_SkewedDiagonal_2x1_0012;
	float PushingStrength_SkewedDiagonal_2x1_0021;
	float PushingStrength_SkewedDiagonal_2x1_1002;
	float PushingStrength_SkewedDiagonal_2x1_2001;
	float PushingStrength_Vertical_1x0;
	float PushingStrength_Vertical_2x0;
	bool Diagonal_1x1_0011;
	bool Diagonal_1x1_0110;
	bool Horizontal_1x0;
	bool Horizontal_2x0;
	bool SkewedDiagonal_2x1_0012;
	bool SkewedDiagonal_2x1_0021;
	bool SkewedDiagonal_2x1_1002;
	bool SkewedDiagonal_2x1_2001;
	bool Vertical_1x0;
	bool Vertical_2x0;

	friend bool operator==(const GcConstraintsToCreateSpec& lhs, const GcConstraintsToCreateSpec& rhs) 
	{
		return lhs.PushingStrength_Diagonal_1x1_0011 == rhs.PushingStrength_Diagonal_1x1_0011 &&
		lhs.PushingStrength_Diagonal_1x1_0110 == rhs.PushingStrength_Diagonal_1x1_0110 &&
		lhs.PushingStrength_Horizontal_1x0 == rhs.PushingStrength_Horizontal_1x0 &&
		lhs.PushingStrength_Horizontal_2x0 == rhs.PushingStrength_Horizontal_2x0 &&
		lhs.PushingStrength_SkewedDiagonal_2x1_0012 == rhs.PushingStrength_SkewedDiagonal_2x1_0012 &&
		lhs.PushingStrength_SkewedDiagonal_2x1_0021 == rhs.PushingStrength_SkewedDiagonal_2x1_0021 &&
		lhs.PushingStrength_SkewedDiagonal_2x1_1002 == rhs.PushingStrength_SkewedDiagonal_2x1_1002 &&
		lhs.PushingStrength_SkewedDiagonal_2x1_2001 == rhs.PushingStrength_SkewedDiagonal_2x1_2001 &&
		lhs.PushingStrength_Vertical_1x0 == rhs.PushingStrength_Vertical_1x0 &&
		lhs.PushingStrength_Vertical_2x0 == rhs.PushingStrength_Vertical_2x0 &&
		lhs.Diagonal_1x1_0011 == rhs.Diagonal_1x1_0011 &&
		lhs.Diagonal_1x1_0110 == rhs.Diagonal_1x1_0110 &&
		lhs.Horizontal_1x0 == rhs.Horizontal_1x0 &&
		lhs.Horizontal_2x0 == rhs.Horizontal_2x0 &&
		lhs.SkewedDiagonal_2x1_0012 == rhs.SkewedDiagonal_2x1_0012 &&
		lhs.SkewedDiagonal_2x1_0021 == rhs.SkewedDiagonal_2x1_0021 &&
		lhs.SkewedDiagonal_2x1_1002 == rhs.SkewedDiagonal_2x1_1002 &&
		lhs.SkewedDiagonal_2x1_2001 == rhs.SkewedDiagonal_2x1_2001 &&
		lhs.Vertical_1x0 == rhs.Vertical_1x0 &&
		lhs.Vertical_2x0 == rhs.Vertical_2x0;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcAttachedNode
{
	NMS::Vector3f RelativeTransform_Axis0;
	NMS::Vector3f RelativeTransform_Axis1;
	NMS::Vector3f RelativeTransform_Axis2;
	NMS::Vector3f RelativeTransform_Position;
	float BlendStrength;
	float MaxRenderIFraction;
	float MaxRenderJFraction;
	float MinRenderIFraction;
	float MinRenderJFraction;
	NMS::NMSString0x40 NodeName;
	bool Enabled;

	friend bool operator==(const GcAttachedNode& lhs, const GcAttachedNode& rhs) 
	{
		return lhs.RelativeTransform_Axis0 == rhs.RelativeTransform_Axis0 &&
		lhs.RelativeTransform_Axis1 == rhs.RelativeTransform_Axis1 &&
		lhs.RelativeTransform_Axis2 == rhs.RelativeTransform_Axis2 &&
		lhs.RelativeTransform_Position == rhs.RelativeTransform_Position &&
		lhs.BlendStrength == rhs.BlendStrength &&
		lhs.MaxRenderIFraction == rhs.MaxRenderIFraction &&
		lhs.MaxRenderJFraction == rhs.MaxRenderJFraction &&
		lhs.MinRenderIFraction == rhs.MinRenderIFraction &&
		lhs.MinRenderJFraction == rhs.MinRenderJFraction &&
		lhs.NodeName == rhs.NodeName &&
		lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: Vector3f
struct GcAttachmentPointData
{
	NMS::Vector3f Position;
	int32_t SimP;

	friend bool operator==(const GcAttachmentPointData& lhs, const GcAttachmentPointData& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.SimP == rhs.SimP;
	}
};

//Dependency: GcAttachmentPointData
//Dependency: NMSString0x40
struct GcAttachmentPointSet
{
	std::vector<NMS_GameComponents::GcAttachmentPointData> AttachmentPoints;
	float AttractionStartDistance;
	float AttractionStrength;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 JointName;
	NMS::NMSString0x40 Name;
	bool Enabled;

	friend bool operator==(const GcAttachmentPointSet& lhs, const GcAttachmentPointSet& rhs) 
	{
		return lhs.AttachmentPoints == rhs.AttachmentPoints &&
		lhs.AttractionStartDistance == rhs.AttractionStartDistance &&
		lhs.AttractionStrength == rhs.AttractionStrength &&
		lhs.NumSimI == rhs.NumSimI &&
		lhs.NumSimJ == rhs.NumSimJ &&
		lhs.JointName == rhs.JointName &&
		lhs.Name == rhs.Name &&
		lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: NMSString0x40
struct DirectMesh
{
	int32_t NumPointsInDirectMeshI;
	int32_t NumPointsInDirectMeshJ;
	int32_t NumSimPointsI;
	int32_t NumSimPointsJ;
	int32_t VertexOrdering;
	NMS::NMSString0x40 NodeName;
	bool RenderVertexBasedCloth;

	friend bool operator==(const DirectMesh& lhs, const DirectMesh& rhs) 
	{
		return lhs.NumPointsInDirectMeshI == rhs.NumPointsInDirectMeshI &&
		lhs.NumPointsInDirectMeshJ == rhs.NumPointsInDirectMeshJ &&
		lhs.NumSimPointsI == rhs.NumSimPointsI &&
		lhs.NumSimPointsJ == rhs.NumSimPointsJ &&
		lhs.VertexOrdering == rhs.VertexOrdering &&
		lhs.NodeName == rhs.NodeName &&
		lhs.RenderVertexBasedCloth == rhs.RenderVertexBasedCloth;
	}
};

//Dependency: Vector3f
//Dependency: Vector2f
struct ShapePoint
{
	NMS::Vector3f Position;
	NMS::Vector2f Uv;

	friend bool operator==(const ShapePoint& lhs, const ShapePoint& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Uv == rhs.Uv;
	}
};

//Dependency: ShapePoint
//Dependency: NMSString0x40
struct SimShape
{
	std::vector<NMS_GameComponents::ShapePoint> ShapePoints;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 NodeName;
	bool SimPIsInUnwrappedFormat;
	bool WrapI;
	bool WrapJ;

	friend bool operator==(const SimShape& lhs, const SimShape& rhs) 
	{
		return lhs.ShapePoints == rhs.ShapePoints &&
		lhs.NumSimI == rhs.NumSimI &&
		lhs.NumSimJ == rhs.NumSimJ &&
		lhs.Name == rhs.Name &&
		lhs.NodeName == rhs.NodeName &&
		lhs.SimPIsInUnwrappedFormat == rhs.SimPIsInUnwrappedFormat &&
		lhs.WrapI == rhs.WrapI &&
		lhs.WrapJ == rhs.WrapJ;
	}
};

//Dependency: Vector3f
struct MappingInfluence
{
	NMS::Vector3f mTransformInClothT_Axis0;
	NMS::Vector3f mTransformInClothT_Axis1;
	NMS::Vector3f mTransformInClothT_Axis2;
	NMS::Vector3f mTransformInClothT_Pos;
	float DistanceSquared;
	int32_t SimP;

	friend bool operator==(const MappingInfluence& lhs, const MappingInfluence& rhs) 
	{
		return lhs.mTransformInClothT_Axis0 == rhs.mTransformInClothT_Axis0 &&
		lhs.mTransformInClothT_Axis1 == rhs.mTransformInClothT_Axis1 &&
		lhs.mTransformInClothT_Axis2 == rhs.mTransformInClothT_Axis2 &&
		lhs.mTransformInClothT_Pos == rhs.mTransformInClothT_Pos &&
		lhs.DistanceSquared == rhs.DistanceSquared &&
		lhs.SimP == rhs.SimP;
	}
};

//Dependency: MappingInfluence
struct InfluencesOnMappedPoint
{
	std::vector<NMS_GameComponents::MappingInfluence> Influences;

	friend bool operator==(const InfluencesOnMappedPoint& lhs, const InfluencesOnMappedPoint& rhs) 
	{
		return lhs.Influences == rhs.Influences;
	}
};

//Dependency: InfluencesOnMappedPoint
//Dependency: NMSString0x40
struct Mapping
{
	std::vector<NMS_GameComponents::InfluencesOnMappedPoint> InfluencesOnMappedPoint;
	int32_t NumMappedPoints;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 Name;

	friend bool operator==(const Mapping& lhs, const Mapping& rhs) 
	{
		return lhs.InfluencesOnMappedPoint == rhs.InfluencesOnMappedPoint &&
		lhs.NumMappedPoints == rhs.NumMappedPoints &&
		lhs.NumSimI == rhs.NumSimI &&
		lhs.NumSimJ == rhs.NumSimJ &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: NMSString0x40
struct MappedMesh
{
	NMS::NMSString0x40 NodeName;

	friend bool operator==(const MappedMesh& lhs, const MappedMesh& rhs) 
	{
		return lhs.NodeName == rhs.NodeName;
	}
};

//Dependency: GcCollisionCapsule
//Dependency: GcAdvancedTweaks
//Dependency: GcConstraintsToCreateSpec
//Dependency: GcAttachedNode
//Dependency: GcAttachmentPointSet
//Dependency: NMSString0x40
//Dependency: DirectMesh
//Dependency: SimShape
//Dependency: Mapping
//Dependency: MappedMesh
struct GcClothPiece
{
	enum class InitialShapeSourceEnum : uint32_t
	{
		Rectangular = 0,
		TakenFromDirectMesh = 1,
		Saved = 2,
	};

	NMS_GameComponents::GcAdvancedTweaks Advanced;
	std::vector<NMS_GameComponents::GcAttachedNode> AttachedNodes;
	std::vector<NMS_GameComponents::GcAttachmentPointSet> AttachmentPointSets;
	std::vector<NMS_GameComponents::GcCollisionCapsule> CollisionCapsules;
	std::vector<int32_t> DeletedConstraintsI;
	std::vector<int32_t> DeletedConstraintsJ;
	std::vector<int32_t> DeletedSimPoints;
	std::vector<NMS_GameComponents::SimShape> InitialShapes;
	std::vector<NMS_GameComponents::Mapping> Mappings;
	NMS_GameComponents::DirectMesh DirectMesh;
	NMS_GameComponents::GcConstraintsToCreateSpec ConstraintsToCreate;
	float AbsoluteDamping;
	float AirSpeedFromMovementSpeedScale;
	float AirSpeedOverallEffect;
	float ApplyGameWind;
	float AttachedNodesOverallBlendStrength;
	float DampingWrtFixed;
	NMS_GameComponents::GcClothPiece::InitialShapeSourceEnum InitialShapeSource;
	int32_t NumConstraintSolvingIterations;
	int32_t NumTimestepsSubdivisions;
	float ParticleRadius;
	float StandardGravityScale;
	float StaticFriction;
	NMS::NMSString0x40 InitialShapeName;
	NMS_GameComponents::MappedMesh MappedMesh;
	NMS::NMSString0x40 MappingName;
	NMS::NMSString0x40 Name;
	bool AttachedNodesEnabled;
	bool DriveDirectMesh;
	bool DriveMappedMesh;
	bool Enabled;
	bool MoreWindAtBottom;

	friend bool operator==(const GcClothPiece& lhs, const GcClothPiece& rhs) 
	{
		return lhs.Advanced == rhs.Advanced &&
		lhs.AttachedNodes == rhs.AttachedNodes &&
		lhs.AttachmentPointSets == rhs.AttachmentPointSets &&
		lhs.CollisionCapsules == rhs.CollisionCapsules &&
		lhs.DeletedConstraintsI == rhs.DeletedConstraintsI &&
		lhs.DeletedConstraintsJ == rhs.DeletedConstraintsJ &&
		lhs.DeletedSimPoints == rhs.DeletedSimPoints &&
		lhs.InitialShapes == rhs.InitialShapes &&
		lhs.Mappings == rhs.Mappings &&
		lhs.DirectMesh == rhs.DirectMesh &&
		lhs.ConstraintsToCreate == rhs.ConstraintsToCreate &&
		lhs.AbsoluteDamping == rhs.AbsoluteDamping &&
		lhs.AirSpeedFromMovementSpeedScale == rhs.AirSpeedFromMovementSpeedScale &&
		lhs.AirSpeedOverallEffect == rhs.AirSpeedOverallEffect &&
		lhs.ApplyGameWind == rhs.ApplyGameWind &&
		lhs.AttachedNodesOverallBlendStrength == rhs.AttachedNodesOverallBlendStrength &&
		lhs.DampingWrtFixed == rhs.DampingWrtFixed &&
		lhs.InitialShapeSource == rhs.InitialShapeSource &&
		lhs.NumConstraintSolvingIterations == rhs.NumConstraintSolvingIterations &&
		lhs.NumTimestepsSubdivisions == rhs.NumTimestepsSubdivisions &&
		lhs.ParticleRadius == rhs.ParticleRadius &&
		lhs.StandardGravityScale == rhs.StandardGravityScale &&
		lhs.StaticFriction == rhs.StaticFriction &&
		lhs.InitialShapeName == rhs.InitialShapeName &&
		lhs.MappedMesh == rhs.MappedMesh &&
		lhs.MappingName == rhs.MappingName &&
		lhs.Name == rhs.Name &&
		lhs.AttachedNodesEnabled == rhs.AttachedNodesEnabled &&
		lhs.DriveDirectMesh == rhs.DriveDirectMesh &&
		lhs.DriveMappedMesh == rhs.DriveMappedMesh &&
		lhs.Enabled == rhs.Enabled &&
		lhs.MoreWindAtBottom == rhs.MoreWindAtBottom;
	}
};

//Dependency: NMSString0x10
struct GcCostInstalledTech
{
	enum class InventoryToCheckEnum : uint32_t
	{
		All = 0,
		Suit = 1,
		Ship = 2,
		Weapon = 3,
		Freighter = 4,
		Buggy = 5,
	};

	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcCostInstalledTech::InventoryToCheckEnum InventoryToCheck;
	float MinChargePercent;
	bool BurnCharge;

	friend bool operator==(const GcCostInstalledTech& lhs, const GcCostInstalledTech& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.InventoryToCheck == rhs.InventoryToCheck &&
		lhs.MinChargePercent == rhs.MinChargePercent &&
		lhs.BurnCharge == rhs.BurnCharge;
	}
};

struct GcPlayerHazardType
{
	enum class HazardEnum : uint32_t
	{
		None = 0,
		NoOxygen = 1,
		ExtremeHeat = 2,
		ExtremeCold = 3,
		ToxicGas = 4,
		Radiation = 5,
		Spook = 6,
	};

	NMS_GameComponents::GcPlayerHazardType::HazardEnum Hazard;

	friend bool operator==(const GcPlayerHazardType& lhs, const GcPlayerHazardType& rhs) 
	{
		return lhs.Hazard == rhs.Hazard;
	}
};

//Dependency: GcPlayerHazardType
struct GcMissionConditionWeather
{
	NMS_GameComponents::GcPlayerHazardType WeatherRequirement;
	bool AllowNonHazardExtremeIfNoStorms;
	bool IgnoreStormIfInShip;
	bool IsExtreme;
	bool StormActive;

	friend bool operator==(const GcMissionConditionWeather& lhs, const GcMissionConditionWeather& rhs) 
	{
		return lhs.WeatherRequirement == rhs.WeatherRequirement &&
		lhs.AllowNonHazardExtremeIfNoStorms == rhs.AllowNonHazardExtremeIfNoStorms &&
		lhs.IgnoreStormIfInShip == rhs.IgnoreStormIfInShip &&
		lhs.IsExtreme == rhs.IsExtreme &&
		lhs.StormActive == rhs.StormActive;
	}
};

struct GcHandType
{
	enum class HandTypeEnum : uint32_t
	{
		Offhand = 0,
		Dominant = 1,
	};

	NMS_GameComponents::GcHandType::HandTypeEnum HandType;

	friend bool operator==(const GcHandType& lhs, const GcHandType& rhs) 
	{
		return lhs.HandType == rhs.HandType;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcAIShipSpawnMarkerData
{
	enum class ShipsToMarkEnum : uint32_t
	{
		None = 0,
		Leader = 1,
		All = 2,
	};

	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	float MaxVisibleRange;
	float MinAngleVisible;
	float MinVisibleRange;
	NMS_GameComponents::GcAIShipSpawnMarkerData::ShipsToMarkEnum ShipsToMark;
	bool HideDuringCombat;

	friend bool operator==(const GcAIShipSpawnMarkerData& lhs, const GcAIShipSpawnMarkerData& rhs) 
	{
		return lhs.MarkerLabel == rhs.MarkerLabel &&
		lhs.MarkerIcon == rhs.MarkerIcon &&
		lhs.MaxVisibleRange == rhs.MaxVisibleRange &&
		lhs.MinAngleVisible == rhs.MinAngleVisible &&
		lhs.MinVisibleRange == rhs.MinVisibleRange &&
		lhs.ShipsToMark == rhs.ShipsToMark &&
		lhs.HideDuringCombat == rhs.HideDuringCombat;
	}
};

struct GcShipAIPerformanceArray
{
	std::vector<NMSTemplate> Array;

	friend bool operator==(const GcShipAIPerformanceArray& lhs, const GcShipAIPerformanceArray& rhs) 
	{
		return lhs.Array == rhs.Array;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputEnum
{
	enum class InputButtonEnum : uint32_t
	{
		None = 0,
		Space = 32,
		Exclamation = 33,
		Quotes = 34,
		Hash = 35,
		Dollar = 36,
		Percent = 37,
		Ampersand = 38,
		Apostrophe = 39,
		LeftBracket = 40,
		RightBracket = 41,
		Asterisk = 42,
		Plus = 43,
		Comma = 44,
		Hyphen = 45,
		Period = 46,
		Slash = 47,
		Key0 = 48,
		Key1 = 49,
		Key2 = 50,
		Key3 = 51,
		Key4 = 52,
		Key5 = 53,
		Key6 = 54,
		Key7 = 55,
		Key8 = 56,
		Key9 = 57,
		Colon = 58,
		Semicolon = 59,
		LessThan = 60,
		Equals = 61,
		GreaterThan = 62,
		QuestionMark = 63,
		At = 64,
		KeyA = 65,
		KeyB = 66,
		KeyC = 67,
		KeyD = 68,
		KeyE = 69,
		KeyF = 70,
		KeyG = 71,
		KeyH = 72,
		KeyI = 73,
		KeyJ = 74,
		KeyK = 75,
		KeyL = 76,
		KeyM = 77,
		KeyN = 78,
		KeyO = 79,
		KeyP = 80,
		KeyQ = 81,
		KeyR = 82,
		KeyS = 83,
		KeyT = 84,
		KeyU = 85,
		KeyV = 86,
		KeyW = 87,
		KeyX = 88,
		KeyY = 89,
		KeyZ = 90,
		LeftSquare = 91,
		BackSlash = 92,
		RightSquare = 93,
		Caret = 94,
		Underscode = 95,
		Grave = 96,
		LeftCurly = 123,
		Bar = 124,
		RightCurly = 125,
		Tilde = 126,
		Special2 = 162,
		Escape = 256,
		Enter = 257,
		Backspace = 258,
		Insert = 259,
		Delete = 260,
		CapsLock = 261,
		Home = 262,
		End = 263,
		PageUp = 264,
		PageDown = 265,
		F1 = 266,
		F2 = 267,
		F3 = 268,
		F4 = 269,
		F5 = 270,
		F6 = 271,
		F7 = 272,
		F8 = 273,
		F9 = 274,
		F10 = 275,
		F11 = 276,
		F12 = 277,
		Tab = 278,
		Shift = 279,
		LShift = 280,
		RShift = 281,
		Alt = 282,
		LAlt = 283,
		RAlt = 284,
		Ctrl = 285,
		LCtrl = 286,
		RCtrl = 287,
		LOption = 288,
		ROption = 289,
		Up = 290,
		Down = 291,
		Left = 292,
		Right = 293,
		KeyboardUnbound = 294,
		Mouse1 = 295,
		Mouse2 = 296,
		Mouse3 = 297,
		Mouse4 = 298,
		Mouse5 = 299,
		Mouse6 = 300,
		Mouse7 = 301,
		Mouse8 = 302,
		MouseWheelUp = 303,
		MouseWheelDown = 304,
		MouseUnbound = 305,
		TouchscreenPress = 306,
		TouchscreenTwoFingerPress = 307,
		TouchscreenThreeFingerPress = 308,
		TouchscreenFourFingerPress = 309,
		TouchscreenSwipeLeft = 310,
		TouchscreenSwipeRight = 311,
		TouchscreenSwipeUp = 312,
		TouchscreenSwipeDown = 313,
		PadA = 314,
		PadB = 315,
		PadC = 316,
		PadD = 317,
		PadStart = 318,
		PadSelect = 319,
		PadLeftShoulder1 = 320,
		PadRightShoulder1 = 321,
		PadLeftShoulder2 = 322,
		PadRightShoulder2 = 323,
		PadLeftTrigger = 324,
		PadRightTrigger = 325,
		PadLeftThumb = 326,
		PadRightThumb = 327,
		PadUp = 328,
		PadDown = 329,
		PadLeft = 330,
		PadRight = 331,
		LeftHandA = 332,
		LeftHandB = 333,
		LeftHandC = 334,
		LeftHandD = 335,
		ChordBothShoulders = 336,
		PadLeftTriggerSpecial = 337,
		PadRightTriggerSpecial = 338,
		PadSpecial0 = 339,
		PadSpecial1 = 340,
		PadSpecial2 = 341,
		PadSpecial3 = 342,
		PadSpecial4 = 343,
		PadSpecial5 = 344,
		PadSpecial6 = 345,
		PadSpecial7 = 346,
		PadSpecial8 = 347,
		PadSpecial9 = 348,
		PadSpecial10 = 349,
		PadSpecial11 = 350,
		PadSpecial12 = 351,
		PadSpecial13 = 352,
		PadSpecial14 = 353,
		PadSpecial15 = 354,
		PadSpecial16 = 355,
		PadSpecial17 = 356,
		PadSpecial18 = 357,
		PadSpecial19 = 358,
		PadUnbound = 359,
		Gesture = 360,
		GestureLeftWrist = 361,
		GestureRightWrist = 362,
		GestureBinoculars = 363,
		GestureBackpack = 364,
		GestureExitVehicle = 365,
		GestureThrottle = 366,
		GestureFlightStick = 367,
		GestureTeleport = 368,
		GestureLeftWrist_LeftHanded = 369,
		GestureRightWrist_LeftHanded = 370,
		GestureBinoculars_LeftHanded = 371,
		GestureBackpack_LeftHanded = 372,
		MaxEnumValue = 373,
	};

	NMS_Toolkit::TkInputEnum::InputButtonEnum InputButton;

	friend bool operator==(const TkInputEnum& lhs, const TkInputEnum& rhs) 
	{
		return lhs.InputButton == rhs.InputButton;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcAIShipSpawnMarkerData
//Dependency: GcAISpaceshipRoles
//Dependency: GcShipAIPerformanceArray
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: Vector2f
struct GcAIShipSpawnData
{
	enum class SpawnShapeEnum : uint32_t
	{
		Sphere = 0,
		Cone = 1,
		OffsetSphere = 2,
	};

	NMS::Vector3f OffsetSphereOffset;
	NMS_GameComponents::GcAIShipSpawnMarkerData MarkerData;
	NMS::NMSString0x20A CombatMessage;
	NMS::NMSString0x20A Message;
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A RewardMessage;
	NMS::NMSString0x10 AttackDefinition;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> ChildSpawns;
	NMS_GameComponents::GcShipAIPerformanceArray Performances;
	NMS::NMSString0x10 Reward;
	NMS::Vector2f Count;
	NMS::Vector2f Scale;
	NMS::Vector2f Spread;
	NMS::Vector2f StartTime;
	float MinRange;
	NMS_GameComponents::GcAISpaceshipRoles Role;
	NMS_Toolkit::TkInputEnum Shortcut;
	NMS_GameComponents::GcAIShipSpawnData::SpawnShapeEnum SpawnShape;
	bool AttackFreighter;
	bool WarpIn;

	friend bool operator==(const GcAIShipSpawnData& lhs, const GcAIShipSpawnData& rhs) 
	{
		return lhs.OffsetSphereOffset == rhs.OffsetSphereOffset &&
		lhs.MarkerData == rhs.MarkerData &&
		lhs.CombatMessage == rhs.CombatMessage &&
		lhs.Message == rhs.Message &&
		lhs.OSDMessage == rhs.OSDMessage &&
		lhs.RewardMessage == rhs.RewardMessage &&
		lhs.AttackDefinition == rhs.AttackDefinition &&
		lhs.ChildSpawns == rhs.ChildSpawns &&
		lhs.Performances == rhs.Performances &&
		lhs.Reward == rhs.Reward &&
		lhs.Count == rhs.Count &&
		lhs.Scale == rhs.Scale &&
		lhs.Spread == rhs.Spread &&
		lhs.StartTime == rhs.StartTime &&
		lhs.MinRange == rhs.MinRange &&
		lhs.Role == rhs.Role &&
		lhs.Shortcut == rhs.Shortcut &&
		lhs.SpawnShape == rhs.SpawnShape &&
		lhs.AttackFreighter == rhs.AttackFreighter &&
		lhs.WarpIn == rhs.WarpIn;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkEqualityEnum
{
	enum class EqualityEnumEnum : uint32_t
	{
		Equal = 0,
		Greater = 1,
		Less = 2,
		GreaterEqual = 3,
		LessEqual = 4,
	};

	NMS_Toolkit::TkEqualityEnum::EqualityEnumEnum EqualityEnum;

	friend bool operator==(const TkEqualityEnum& lhs, const TkEqualityEnum& rhs) 
	{
		return lhs.EqualityEnum == rhs.EqualityEnum;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionCreatureOwned
{
	NMS::NMSString0x10 SpecificCreatureID;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool AnyPredator;

	friend bool operator==(const GcMissionConditionCreatureOwned& lhs, const GcMissionConditionCreatureOwned& rhs) 
	{
		return lhs.SpecificCreatureID == rhs.SpecificCreatureID &&
		lhs.Amount == rhs.Amount &&
		lhs.Test == rhs.Test &&
		lhs.AnyPredator == rhs.AnyPredator;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x200
{
	//max length: 512
	std::string Value;

	friend bool operator==(const NMSString0x200& lhs, const NMSString0x200& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitRealTime
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 DisplayStat;
	NMS::VariableSizeString Message;
	uint64_t Time;
	float Randomness;
	bool StatFromNow;
	bool TakeDisplayStatTargetFromSeasonData;

	friend bool operator==(const GcMissionSequenceWaitRealTime& lhs, const GcMissionSequenceWaitRealTime& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.DisplayStat == rhs.DisplayStat &&
		lhs.Message == rhs.Message &&
		lhs.Time == rhs.Time &&
		lhs.Randomness == rhs.Randomness &&
		lhs.StatFromNow == rhs.StatFromNow &&
		lhs.TakeDisplayStatTargetFromSeasonData == rhs.TakeDisplayStatTargetFromSeasonData;
	}
};

struct GcMissionConditionHasPlatformReward
{

	friend bool operator==(const GcMissionConditionHasPlatformReward& lhs, const GcMissionConditionHasPlatformReward& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector4f
{
	float X;
	float Y;
	float Z;
	float W;

	friend bool operator==(const Vector4f& lhs, const Vector4f& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y &&
		lhs.Z == rhs.Z &&
		lhs.W == rhs.W;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Vector3f
//Dependency: Vector4f
struct GcRagdolCollisionObject
{
	enum class CollisionShapeTypeEnum : uint32_t
	{
		Box = 0,
		Capsule = 1,
		Sphere = 2,
		None = 3,
	};

	NMS::Vector3f Centre;
	NMS::Vector3f Extent;
	NMS::Vector3f HalfVector;
	NMS::Vector4f OrientationQuaternion;
	NMS_GameComponents::GcRagdolCollisionObject::CollisionShapeTypeEnum CollisionShapeType;
	float Radius;

	friend bool operator==(const GcRagdolCollisionObject& lhs, const GcRagdolCollisionObject& rhs) 
	{
		return lhs.Centre == rhs.Centre &&
		lhs.Extent == rhs.Extent &&
		lhs.HalfVector == rhs.HalfVector &&
		lhs.OrientationQuaternion == rhs.OrientationQuaternion &&
		lhs.CollisionShapeType == rhs.CollisionShapeType &&
		lhs.Radius == rhs.Radius;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcChildNode
{
	NMS::Vector3f JointPositionInBone;
	NMS::Vector3f PositionInBone;
	NMS::NMSString0x40 NodeName;
	bool JointPositionInBoneSet;

	friend bool operator==(const GcChildNode& lhs, const GcChildNode& rhs) 
	{
		return lhs.JointPositionInBone == rhs.JointPositionInBone &&
		lhs.PositionInBone == rhs.PositionInBone &&
		lhs.NodeName == rhs.NodeName &&
		lhs.JointPositionInBoneSet == rhs.JointPositionInBoneSet;
	}
};

//Dependency: AxisSpecification
//Dependency: GcRagdolCollisionObject
//Dependency: GcChildNode
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcRagdollBone
{
	enum class LimbTypeEnum : uint32_t
	{
		LeftUpperArm = 0,
		RightUpperArm = 1,
		LeftUpperLeg = 2,
		RightUpperLeg = 3,
		LeftFoot = 4,
		RightFoot = 5,
		Other = 6,
	};

	NMS_GameComponents::AxisSpecification LimitedPlaneAxis;
	NMS_GameComponents::AxisSpecification LimitedTwistAxis;
	NMS_GameComponents::AxisSpecification LimitingPlaneAxis;
	NMS_GameComponents::AxisSpecification LimitingTwistAxis;
	NMS::Vector3f ParentNodeTransformInBone_AxisX;
	NMS::Vector3f ParentNodeTransformInBone_AxisY;
	NMS::Vector3f ParentNodeTransformInBone_AxisZ;
	NMS::Vector3f ParentNodeTransformInBone_Position;
	std::vector<NMS_GameComponents::GcChildNode> ChildNodes;
	std::vector<NMS_GameComponents::GcRagdolCollisionObject> CollisionObjects;
	std::vector<NMS::NMSString0x40> NodeNames;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisX;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisY;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisZ;
	std::vector<NMS::Vector3f> NodeTransformInBone_Position;
	float ConeLimitDeg;
	NMS_GameComponents::GcRagdollBone::LimbTypeEnum LimbType;
	float PlaneMaxAngleDeg;
	float PlaneMinAngleDeg;
	float TwistLimitDeg;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 ParentNodeName;
	bool Enabled;

	friend bool operator==(const GcRagdollBone& lhs, const GcRagdollBone& rhs) 
	{
		return lhs.LimitedPlaneAxis == rhs.LimitedPlaneAxis &&
		lhs.LimitedTwistAxis == rhs.LimitedTwistAxis &&
		lhs.LimitingPlaneAxis == rhs.LimitingPlaneAxis &&
		lhs.LimitingTwistAxis == rhs.LimitingTwistAxis &&
		lhs.ParentNodeTransformInBone_AxisX == rhs.ParentNodeTransformInBone_AxisX &&
		lhs.ParentNodeTransformInBone_AxisY == rhs.ParentNodeTransformInBone_AxisY &&
		lhs.ParentNodeTransformInBone_AxisZ == rhs.ParentNodeTransformInBone_AxisZ &&
		lhs.ParentNodeTransformInBone_Position == rhs.ParentNodeTransformInBone_Position &&
		lhs.ChildNodes == rhs.ChildNodes &&
		lhs.CollisionObjects == rhs.CollisionObjects &&
		lhs.NodeNames == rhs.NodeNames &&
		lhs.NodeTransformInBone_AxisX == rhs.NodeTransformInBone_AxisX &&
		lhs.NodeTransformInBone_AxisY == rhs.NodeTransformInBone_AxisY &&
		lhs.NodeTransformInBone_AxisZ == rhs.NodeTransformInBone_AxisZ &&
		lhs.NodeTransformInBone_Position == rhs.NodeTransformInBone_Position &&
		lhs.ConeLimitDeg == rhs.ConeLimitDeg &&
		lhs.LimbType == rhs.LimbType &&
		lhs.PlaneMaxAngleDeg == rhs.PlaneMaxAngleDeg &&
		lhs.PlaneMinAngleDeg == rhs.PlaneMinAngleDeg &&
		lhs.TwistLimitDeg == rhs.TwistLimitDeg &&
		lhs.Name == rhs.Name &&
		lhs.ParentNodeName == rhs.ParentNodeName &&
		lhs.Enabled == rhs.Enabled;
	}
};

struct GcStatModifyType
{
	enum class ModifyTypeEnum : uint32_t
	{
		Set = 0,
		Add = 1,
		Subtract = 2,
	};

	NMS_GameComponents::GcStatModifyType::ModifyTypeEnum ModifyType;

	friend bool operator==(const GcStatModifyType& lhs, const GcStatModifyType& rhs) 
	{
		return lhs.ModifyType == rhs.ModifyType;
	}
};

//Dependency: GcStatModifyType
//Dependency: NMSString0x10
struct GcRewardModifyStat
{
	NMS::NMSString0x10 OtherStat;
	NMS::NMSString0x10 Stat;
	int32_t Amount;
	NMS_GameComponents::GcStatModifyType ModifyType;
	bool UseOtherStat;

	friend bool operator==(const GcRewardModifyStat& lhs, const GcRewardModifyStat& rhs) 
	{
		return lhs.OtherStat == rhs.OtherStat &&
		lhs.Stat == rhs.Stat &&
		lhs.Amount == rhs.Amount &&
		lhs.ModifyType == rhs.ModifyType &&
		lhs.UseOtherStat == rhs.UseOtherStat;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimationAction
{
	NMS::NMSString0x10 ID;
	float EndFrame;
	float StartFrame;

	friend bool operator==(const TkAnimationAction& lhs, const TkAnimationAction& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.EndFrame == rhs.EndFrame &&
		lhs.StartFrame == rhs.StartFrame;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcActionUseType
{
	enum class ActionUseTypeEnum : uint32_t
	{
		Active = 0,
		ActiveVR = 1,
		ActiveXbox = 2,
		ActivePS4 = 3,
		Hidden = 4,
		Debug = 5,
		Obsolete = 6,
	};

	NMS_GameComponents::GcActionUseType::ActionUseTypeEnum ActionUseType;

	friend bool operator==(const GcActionUseType& lhs, const GcActionUseType& rhs) 
	{
		return lhs.ActionUseType == rhs.ActionUseType;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x400
{
	//max length: 1024
	std::string Value;

	friend bool operator==(const NMSString0x400& lhs, const NMSString0x400& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcSeasonalLogOverrides
{
	NMS::NMSString0x20A MissionDescription;
	NMS::NMSString0x20A MissionSubtitle;
	NMS::NMSString0x20A MissionTitle;
	std::vector<int32_t> ApplicableSeasonNumbers;

	friend bool operator==(const GcSeasonalLogOverrides& lhs, const GcSeasonalLogOverrides& rhs) 
	{
		return lhs.MissionDescription == rhs.MissionDescription &&
		lhs.MissionSubtitle == rhs.MissionSubtitle &&
		lhs.MissionTitle == rhs.MissionTitle &&
		lhs.ApplicableSeasonNumbers == rhs.ApplicableSeasonNumbers;
	}
};

struct GcBiomeType
{
	enum class BiomeEnum : uint32_t
	{
		Lush = 0,
		Toxic = 1,
		Scorched = 2,
		Radioactive = 3,
		Frozen = 4,
		Barren = 5,
		Dead = 6,
		Weird = 7,
		Red = 8,
		Green = 9,
		Blue = 10,
		Test = 11,
		Swamp = 12,
		Lava = 13,
		Waterworld = 14,
		GasGiant = 15,
		All = 16,
	};

	NMS_GameComponents::GcBiomeType::BiomeEnum Biome;

	friend bool operator==(const GcBiomeType& lhs, const GcBiomeType& rhs) 
	{
		return lhs.Biome == rhs.Biome;
	}
};

//Dependency: GcBiomeType
struct GcMissionConditionBiomeType
{
	NMS_GameComponents::GcBiomeType Type;
	bool AnyInfested;
	bool AnyRuins;

	friend bool operator==(const GcMissionConditionBiomeType& lhs, const GcMissionConditionBiomeType& rhs) 
	{
		return lhs.Type == rhs.Type &&
		lhs.AnyInfested == rhs.AnyInfested &&
		lhs.AnyRuins == rhs.AnyRuins;
	}
};

struct GcStatValueData
{
	float Denominator;
	float FloatValue;
	int32_t IntValue;

	friend bool operator==(const GcStatValueData& lhs, const GcStatValueData& rhs) 
	{
		return lhs.Denominator == rhs.Denominator &&
		lhs.FloatValue == rhs.FloatValue &&
		lhs.IntValue == rhs.IntValue;
	}
};

//Dependency: GcStatValueData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatLevelData
{
	NMS::NMSString0x20A LevelName;
	NMS::NMSString0x20A LevelNameUpper;
	NMS::NMSString0x20A OSDLevelName;
	NMS::NMSString0x10 TrophyToUnlock;
	NMS_GameComponents::GcStatValueData Value;

	friend bool operator==(const GcStatLevelData& lhs, const GcStatLevelData& rhs) 
	{
		return lhs.LevelName == rhs.LevelName &&
		lhs.LevelNameUpper == rhs.LevelNameUpper &&
		lhs.OSDLevelName == rhs.OSDLevelName &&
		lhs.TrophyToUnlock == rhs.TrophyToUnlock &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: GcStatLevelData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcLeveledStatData
{
	enum class StatMessageTypeEnum : uint32_t
	{
		Full = 0,
		Quick = 1,
		Silent = 2,
	};

	NMS_GameComponents::GcStatLevelData StatLevels[11];
	NMS::NMSString0x20A NotifyMessage;
	NMS::NMSString0x20A NotifyMessageSingular;
	NMS::NMSString0x20A StatTitle;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 StatId;
	NMS_GameComponents::GcLeveledStatData::StatMessageTypeEnum StatMessageType;
	bool ShowInTerminal;
	bool ShowStatLevel;
	bool TelemetryUpload;
	bool UseRankNotStats;

	friend bool operator==(const GcLeveledStatData& lhs, const GcLeveledStatData& rhs) 
	{
		return std::equal(std::begin(lhs.StatLevels), std::end(lhs.StatLevels), std::begin(rhs.StatLevels)) &&
		lhs.NotifyMessage == rhs.NotifyMessage &&
		lhs.NotifyMessageSingular == rhs.NotifyMessageSingular &&
		lhs.StatTitle == rhs.StatTitle &&
		lhs.Icon == rhs.Icon &&
		lhs.StatId == rhs.StatId &&
		lhs.StatMessageType == rhs.StatMessageType &&
		lhs.ShowInTerminal == rhs.ShowInTerminal &&
		lhs.ShowStatLevel == rhs.ShowStatLevel &&
		lhs.TelemetryUpload == rhs.TelemetryUpload &&
		lhs.UseRankNotStats == rhs.UseRankNotStats;
	}
};

struct GcDefaultMissionSubstanceEnum
{
	enum class DefaultSubstanceTypeEnum : uint32_t
	{
		None = 0,
		PrimarySubstance = 1,
		SecondarySubstance = 2,
	};

	NMS_GameComponents::GcDefaultMissionSubstanceEnum::DefaultSubstanceTypeEnum DefaultSubstanceType;

	friend bool operator==(const GcDefaultMissionSubstanceEnum& lhs, const GcDefaultMissionSubstanceEnum& rhs) 
	{
		return lhs.DefaultSubstanceType == rhs.DefaultSubstanceType;
	}
};

struct GcLocalSubstanceType
{
	enum class LocalSubstanceTypeEnum : uint32_t
	{
		AnyDeposit = 0,
		Common = 1,
		Uncommon = 2,
		Rare = 3,
		Plant = 4,
	};

	NMS_GameComponents::GcLocalSubstanceType::LocalSubstanceTypeEnum LocalSubstanceType;

	friend bool operator==(const GcLocalSubstanceType& lhs, const GcLocalSubstanceType& rhs) 
	{
		return lhs.LocalSubstanceType == rhs.LocalSubstanceType;
	}
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcLocalSubstanceType
struct GcCostSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocalSubstance;
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool UseDefaultAmount;

	friend bool operator==(const GcCostSubstance& lhs, const GcCostSubstance& rhs) 
	{
		return lhs.UseScanEventToDetermineLocalSubstance == rhs.UseScanEventToDetermineLocalSubstance &&
		lhs.Id == rhs.Id &&
		lhs.Amount == rhs.Amount &&
		lhs.Default == rhs.Default &&
		lhs.LocalSubstanceType == rhs.LocalSubstanceType &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};

struct GcAISpaceshipTypes
{
	enum class ShipTypeEnum : uint32_t
	{
		None = 0,
		Pirate = 1,
		Police = 2,
		Trader = 3,
		Freighter = 4,
		PlayerSquadron = 5,
		DefenceForce = 6,
	};

	NMS_GameComponents::GcAISpaceshipTypes::ShipTypeEnum ShipType;

	friend bool operator==(const GcAISpaceshipTypes& lhs, const GcAISpaceshipTypes& rhs) 
	{
		return lhs.ShipType == rhs.ShipType;
	}
};

struct GcCameraSpawnSetupData
{
	float Distance;
	float HorizontalProportion;
	float YawProportion;
	bool InFrontOfShip;

	friend bool operator==(const GcCameraSpawnSetupData& lhs, const GcCameraSpawnSetupData& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.HorizontalProportion == rhs.HorizontalProportion &&
		lhs.YawProportion == rhs.YawProportion &&
		lhs.InFrontOfShip == rhs.InFrontOfShip;
	}
};

struct GcCharacterLookAtData
{
	float CreatureLookAtRadius;
	float InteractionLookAtRadius;
	float LookAtMaxPitch;
	float LookAtMaxYaw;
	float LookAtRunGlanceMaxTime;
	float LookAtRunGlanceMinTime;
	float LookAtRunMaxTime;
	float LookAtRunMinTime;
	float LookAtTargetGlanceMaxTime;
	float LookAtTargetGlanceMinTime;
	float LookAtTargetWaitMaxTime;
	float LookAtTargetWaitMinTime;
	float SpaceshipLookAtRadius;

	friend bool operator==(const GcCharacterLookAtData& lhs, const GcCharacterLookAtData& rhs) 
	{
		return lhs.CreatureLookAtRadius == rhs.CreatureLookAtRadius &&
		lhs.InteractionLookAtRadius == rhs.InteractionLookAtRadius &&
		lhs.LookAtMaxPitch == rhs.LookAtMaxPitch &&
		lhs.LookAtMaxYaw == rhs.LookAtMaxYaw &&
		lhs.LookAtRunGlanceMaxTime == rhs.LookAtRunGlanceMaxTime &&
		lhs.LookAtRunGlanceMinTime == rhs.LookAtRunGlanceMinTime &&
		lhs.LookAtRunMaxTime == rhs.LookAtRunMaxTime &&
		lhs.LookAtRunMinTime == rhs.LookAtRunMinTime &&
		lhs.LookAtTargetGlanceMaxTime == rhs.LookAtTargetGlanceMaxTime &&
		lhs.LookAtTargetGlanceMinTime == rhs.LookAtTargetGlanceMinTime &&
		lhs.LookAtTargetWaitMaxTime == rhs.LookAtTargetWaitMaxTime &&
		lhs.LookAtTargetWaitMinTime == rhs.LookAtTargetWaitMinTime &&
		lhs.SpaceshipLookAtRadius == rhs.SpaceshipLookAtRadius;
	}
};

struct GcCostPoliceCargoComply
{

	friend bool operator==(const GcCostPoliceCargoComply& lhs, const GcCostPoliceCargoComply& rhs) 
	{
		return true;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
struct GcMissionSequenceAudioEvent
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool UseFrontendAudioObject;

	friend bool operator==(const GcMissionSequenceAudioEvent& lhs, const GcMissionSequenceAudioEvent& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.UseFrontendAudioObject == rhs.UseFrontendAudioObject;
	}
};

//Dependency: Vector3f
struct GcProtectedLocation
{
	NMS::Vector3f Location;
	float Radius;

	friend bool operator==(const GcProtectedLocation& lhs, const GcProtectedLocation& rhs) 
	{
		return lhs.Location == rhs.Location &&
		lhs.Radius == rhs.Radius;
	}
};

//Dependency: TkModelResource
//Dependency: GcSeed
struct GcDebrisData
{
	NMS_Toolkit::TkModelResource Filename;
	NMS::GcSeed OverrideSeed;
	float AnglularSpeed;
	int32_t Number;
	float Radius;
	float Scale;
	float Speed;

	friend bool operator==(const GcDebrisData& lhs, const GcDebrisData& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.OverrideSeed == rhs.OverrideSeed &&
		lhs.AnglularSpeed == rhs.AnglularSpeed &&
		lhs.Number == rhs.Number &&
		lhs.Radius == rhs.Radius &&
		lhs.Scale == rhs.Scale &&
		lhs.Speed == rhs.Speed;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumberOfShipsOwned
{
	int32_t NumShips;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionNumberOfShipsOwned& lhs, const GcMissionConditionNumberOfShipsOwned& rhs) 
	{
		return lhs.NumShips == rhs.NumShips &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: GcRealityCommonFactions
//Dependency: GcFrigateClass
//Dependency: GcSpaceshipClasses
//Dependency: GcAISpaceshipRoles
//Dependency: NMSString0x20A
//Dependency: GcSeed
struct GcAISpaceshipPreloadCacheData
{
	NMS::NMSString0x20A TextureDescriptorHint;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	NMS_GameComponents::GcSpaceshipClasses ShipClass;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;

	friend bool operator==(const GcAISpaceshipPreloadCacheData& lhs, const GcAISpaceshipPreloadCacheData& rhs) 
	{
		return lhs.TextureDescriptorHint == rhs.TextureDescriptorHint &&
		lhs.Seed == rhs.Seed &&
		lhs.Faction == rhs.Faction &&
		lhs.FrigateClass == rhs.FrigateClass &&
		lhs.ShipClass == rhs.ShipClass &&
		lhs.ShipRole == rhs.ShipRole;
	}
};

//Dependency: GcAISpaceshipPreloadCacheData
//Dependency: GcRealityCommonFactions
struct GcAISpaceshipPreloadList
{
	std::vector<NMS_GameComponents::GcAISpaceshipPreloadCacheData> Cache;
	NMS_GameComponents::GcRealityCommonFactions Faction;

	friend bool operator==(const GcAISpaceshipPreloadList& lhs, const GcAISpaceshipPreloadList& rhs) 
	{
		return lhs.Cache == rhs.Cache &&
		lhs.Faction == rhs.Faction;
	}
};

struct GcCharacterControlOutputSpace
{
	enum class CharacterControlOutputSpaceEnum : uint32_t
	{
		CameraRelative = 0,
		CameraRelativeTopDown = 1,
		Raw = 2,
	};

	NMS_GameComponents::GcCharacterControlOutputSpace::CharacterControlOutputSpaceEnum CharacterControlOutputSpace;

	friend bool operator==(const GcCharacterControlOutputSpace& lhs, const GcCharacterControlOutputSpace& rhs) 
	{
		return lhs.CharacterControlOutputSpace == rhs.CharacterControlOutputSpace;
	}
};

struct GcCharacterControlInputValidity
{
	enum class CharacterControlInputValidityEnum : uint32_t
	{
		Always = 0,
		PadOnly = 1,
		KeyboardAnMouseOnly = 2,
	};

	NMS_GameComponents::GcCharacterControlInputValidity::CharacterControlInputValidityEnum CharacterControlInputValidity;

	friend bool operator==(const GcCharacterControlInputValidity& lhs, const GcCharacterControlInputValidity& rhs) 
	{
		return lhs.CharacterControlInputValidity == rhs.CharacterControlInputValidity;
	}
};

//Dependency: GcCharacterControlOutputSpace
//Dependency: GcCharacterControlInputValidity
//Dependency: NMSString0x10
struct GcPlayerControlInputMouse
{
	enum class InputMouseModeEnum : uint32_t
	{
		ScreenCentrePos = 0,
	};

	NMS::NMSString0x10 Output;
	NMS::NMSString0x10 OutputLength;
	NMS_GameComponents::GcPlayerControlInputMouse::InputMouseModeEnum InputMouseMode;
	NMS_GameComponents::GcCharacterControlOutputSpace OutputSpace;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;

	friend bool operator==(const GcPlayerControlInputMouse& lhs, const GcPlayerControlInputMouse& rhs) 
	{
		return lhs.Output == rhs.Output &&
		lhs.OutputLength == rhs.OutputLength &&
		lhs.InputMouseMode == rhs.InputMouseMode &&
		lhs.OutputSpace == rhs.OutputSpace &&
		lhs.Validity == rhs.Validity;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x800
{
	//max length: 2048
	std::string Value;

	friend bool operator==(const NMSString0x800& lhs, const NMSString0x800& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcMissionConditionCanReceiveReward
{
	NMS::NMSString0x10 Reward;

	friend bool operator==(const GcMissionConditionCanReceiveReward& lhs, const GcMissionConditionCanReceiveReward& rhs) 
	{
		return lhs.Reward == rhs.Reward;
	}
};

//Dependency: NMSString0x10
struct GcInteractionActivationCost
{
	std::vector<NMS::NMSString0x10> AltIds;
	std::vector<int32_t> OnlyChargeDuringSeasons;
	NMS::NMSString0x10 RequiredTech;
	NMS::NMSString0x10 StartMissionOnCantAfford;
	NMS::NMSString0x10 SubstanceId;
	NMS::NMSString0x10 UseCostID;
	int32_t Cost;
	bool Repeat;

	friend bool operator==(const GcInteractionActivationCost& lhs, const GcInteractionActivationCost& rhs) 
	{
		return lhs.AltIds == rhs.AltIds &&
		lhs.OnlyChargeDuringSeasons == rhs.OnlyChargeDuringSeasons &&
		lhs.RequiredTech == rhs.RequiredTech &&
		lhs.StartMissionOnCantAfford == rhs.StartMissionOnCantAfford &&
		lhs.SubstanceId == rhs.SubstanceId &&
		lhs.UseCostID == rhs.UseCostID &&
		lhs.Cost == rhs.Cost &&
		lhs.Repeat == rhs.Repeat;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationMultiTextureSubOption
{
	NMS::NMSString0x20A Option;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;

	friend bool operator==(const GcCustomisationMultiTextureSubOption& lhs, const GcCustomisationMultiTextureSubOption& rhs) 
	{
		return lhs.Option == rhs.Option &&
		lhs.Group == rhs.Group &&
		lhs.Layer == rhs.Layer;
	}
};

//Dependency: GcCustomisationMultiTextureSubOption
//Dependency: NMSString0x20A
struct GcCustomisationMultiTextureOptionList
{
	NMS::NMSString0x20A TextureOptionsID;
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureSubOption> SubOptions;

	friend bool operator==(const GcCustomisationMultiTextureOptionList& lhs, const GcCustomisationMultiTextureOptionList& rhs) 
	{
		return lhs.TextureOptionsID == rhs.TextureOptionsID &&
		lhs.SubOptions == rhs.SubOptions;
	}
};

//Dependency: GcCustomisationMultiTextureOptionList
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationMultiTextureOption
{
	NMS::NMSString0x10 MultiTextureOptionsID;
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureOptionList> Options;
	std::vector<NMS::NMSString0x10> ProductsToUnlock;
	std::vector<NMS::NMSString0x20A> Tips;

	friend bool operator==(const GcCustomisationMultiTextureOption& lhs, const GcCustomisationMultiTextureOption& rhs) 
	{
		return lhs.MultiTextureOptionsID == rhs.MultiTextureOptionsID &&
		lhs.Options == rhs.Options &&
		lhs.ProductsToUnlock == rhs.ProductsToUnlock &&
		lhs.Tips == rhs.Tips;
	}
};

struct GcJourneyMedalTiers
{
	int32_t Bronze;
	int32_t Gold;
	int32_t None;
	int32_t Silver;

	friend bool operator==(const GcJourneyMedalTiers& lhs, const GcJourneyMedalTiers& rhs) 
	{
		return lhs.Bronze == rhs.Bronze &&
		lhs.Gold == rhs.Gold &&
		lhs.None == rhs.None &&
		lhs.Silver == rhs.Silver;
	}
};

//Dependency: NMSString0x10
struct GcPlayerMissionProgressMapEntry
{
	NMS::NMSString0x10 Mission;
	int32_t MaxProgress;
	int32_t MinProgress;
	int32_t NewProgress;

	friend bool operator==(const GcPlayerMissionProgressMapEntry& lhs, const GcPlayerMissionProgressMapEntry& rhs) 
	{
		return lhs.Mission == rhs.Mission &&
		lhs.MaxProgress == rhs.MaxProgress &&
		lhs.MinProgress == rhs.MinProgress &&
		lhs.NewProgress == rhs.NewProgress;
	}
};

struct GcTerrainOverlayColours
{
	float Cutoff;
	float FlightStrength;
	float PulsePeriod;
	float PulseStrength;
	float Scale;
	float Strength;

	friend bool operator==(const GcTerrainOverlayColours& lhs, const GcTerrainOverlayColours& rhs) 
	{
		return lhs.Cutoff == rhs.Cutoff &&
		lhs.FlightStrength == rhs.FlightStrength &&
		lhs.PulsePeriod == rhs.PulsePeriod &&
		lhs.PulseStrength == rhs.PulseStrength &&
		lhs.Scale == rhs.Scale &&
		lhs.Strength == rhs.Strength;
	}
};

//Dependency: NMSString0x10
struct GcStatRewardGroupStatData
{
	NMS::NMSString0x10 StatID;
	float ManualAdjust;
	float StatMultiplier;

	friend bool operator==(const GcStatRewardGroupStatData& lhs, const GcStatRewardGroupStatData& rhs) 
	{
		return lhs.StatID == rhs.StatID &&
		lhs.ManualAdjust == rhs.ManualAdjust &&
		lhs.StatMultiplier == rhs.StatMultiplier;
	}
};

struct GcCurrency
{
	enum class CurrencyEnum : uint32_t
	{
		Units = 0,
		Nanites = 1,
		Specials = 2,
	};

	NMS_GameComponents::GcCurrency::CurrencyEnum Currency;

	friend bool operator==(const GcCurrency& lhs, const GcCurrency& rhs) 
	{
		return lhs.Currency == rhs.Currency;
	}
};

//Dependency: GcStatRewardGroupStatData
//Dependency: TkTextureResource
//Dependency: GcCurrency
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatRewardGroup
{
	NMS::NMSString0x20A LocIDMultiple;
	NMS::NMSString0x20A LocIDSingle;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcStatRewardGroupStatData> Stats;
	float BaseMultiplier;
	NMS_GameComponents::GcCurrency Currency;

	friend bool operator==(const GcStatRewardGroup& lhs, const GcStatRewardGroup& rhs) 
	{
		return lhs.LocIDMultiple == rhs.LocIDMultiple &&
		lhs.LocIDSingle == rhs.LocIDSingle &&
		lhs.Icon == rhs.Icon &&
		lhs.ID == rhs.ID &&
		lhs.Stats == rhs.Stats &&
		lhs.BaseMultiplier == rhs.BaseMultiplier &&
		lhs.Currency == rhs.Currency;
	}
};

//Dependency: GcStatRewardGroup
struct GcStatRewardsTable
{
	std::vector<NMS_GameComponents::GcStatRewardGroup> StatRewardGroups;

	friend bool operator==(const GcStatRewardsTable& lhs, const GcStatRewardsTable& rhs) 
	{
		return lhs.StatRewardGroups == rhs.StatRewardGroups;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionItemRewardedBySeason
{
	NMS::NMSString0x10 ItemID;
	bool TakeIDFromSeasonData;

	friend bool operator==(const GcMissionConditionItemRewardedBySeason& lhs, const GcMissionConditionItemRewardedBySeason& rhs) 
	{
		return lhs.ItemID == rhs.ItemID &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVoxelGeneratorSettingsTypes
{
	enum class TerrainSettingsEnum : uint32_t
	{
		FloatingIslands = 0,
		GrandCanyon = 1,
		MountainRavines = 2,
		HugeArches = 3,
		Alien = 4,
		Craters = 5,
		Caverns = 6,
		Alpine = 7,
		LilyPad = 8,
		Desert = 9,
		WaterworldPrime = 10,
		FloatingIslandsPrime = 11,
		GrandCanyonPrime = 12,
		MountainRavinesPrime = 13,
		HugeArchesPrime = 14,
		AlienPrime = 15,
		CratersPrime = 16,
		CavernsPrime = 17,
		AlpinePrime = 18,
		LilyPadPrime = 19,
		DesertPrime = 20,
		FloatingIslandsPurple = 21,
		GrandCanyonPurple = 22,
		MountainRavinesPurple = 23,
		HugeArchesPurple = 24,
		AlienPurple = 25,
		CratersPurple = 26,
		CavernsPurple = 27,
		AlpinePurple = 28,
		LilyPadPurple = 29,
		DesertPurple = 30,
	};

	NMS_Toolkit::TkVoxelGeneratorSettingsTypes::TerrainSettingsEnum TerrainSettings;

	friend bool operator==(const TkVoxelGeneratorSettingsTypes& lhs, const TkVoxelGeneratorSettingsTypes& rhs) 
	{
		return lhs.TerrainSettings == rhs.TerrainSettings;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcSubstanceSecondary
{
	NMS::NMSString0x10 ID;
	float AmountMax;
	float AmountMin;
	float Chance;

	friend bool operator==(const GcSubstanceSecondary& lhs, const GcSubstanceSecondary& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Chance == rhs.Chance;
	}
};

//Dependency: GcSubstanceSecondary
//Dependency: NMSString0x10
struct GcSubstanceSecondaryLookup
{
	NMS::NMSString0x10 PrimaryID;
	std::vector<NMS_GameComponents::GcSubstanceSecondary> SecondaryChances;

	friend bool operator==(const GcSubstanceSecondaryLookup& lhs, const GcSubstanceSecondaryLookup& rhs) 
	{
		return lhs.PrimaryID == rhs.PrimaryID &&
		lhs.SecondaryChances == rhs.SecondaryChances;
	}
};

struct GcExperienceDebugTriggerActionTypes
{
	enum class ExperienceDebugTriggerActionEnum : uint32_t
	{
		None = 0,
		Drones = 1,
		FlyBy = 2,
		FrigateFlyByBegin = 3,
		FrigateFlyByEnd = 4,
		PirateCargoAttack = 5,
		PirateRaid = 6,
		FreighterAttack = 7,
		SpawnShips = 8,
		LaunchShips = 9,
		Mechs = 10,
		SpaceBattle = 11,
		PirateSpaceBattle = 12,
		ClearPirateSpaceBattle = 13,
		RespawnInShip = 14,
		DebugWalker = 15,
		DebugWalkerTitanFall = 16,
		SpawnNexus = 17,
		Freighters = 18,
		NPCs = 19,
		Sandworm = 20,
		SpacePOI = 21,
		BackgroundSpaceEncounter = 22,
		Creatures = 23,
		CameraPath = 24,
		SummonFleet = 25,
		SummonSquadron = 26,
		ResetScene = 27,
		ResetPlayerPos = 28,
		CameraSpin = 29,
		SpawnEnemyShips = 30,
		PetHappy = 31,
		PetSad = 32,
		PetFollow = 33,
		PetFollowClose = 34,
		PetRest = 35,
		PetNatural = 36,
		PetMine = 37,
		PetMineAndDeposit = 38,
		RidePet = 39,
		GhostShip = 40,
		Normandy = 41,
		LivingFrigate = 42,
		UpgradeSettlement = 43,
		SentinelFreighter = 44,
		ClearSpacePolice = 45,
		SpawnQuad = 46,
		SpawnSpiderQuad = 47,
		SpawnSpiderQuadMini = 48,
		SpawnDockedShips = 49,
		LaunchDockedShips = 50,
		StartStorm = 51,
		EndStorm = 52,
		SpawnBugQueen = 53,
		RemoveAllFiendsAndBugs = 54,
		WaterTransition = 55,
	};

	NMS_GameComponents::GcExperienceDebugTriggerActionTypes::ExperienceDebugTriggerActionEnum ExperienceDebugTriggerAction;

	friend bool operator==(const GcExperienceDebugTriggerActionTypes& lhs, const GcExperienceDebugTriggerActionTypes& rhs) 
	{
		return lhs.ExperienceDebugTriggerAction == rhs.ExperienceDebugTriggerAction;
	}
};

//Dependency: NMSString0x10
struct GcDifficultyFuelUseTechOverride
{
	NMS::NMSString0x10 TechID;
	float Multiplier;

	friend bool operator==(const GcDifficultyFuelUseTechOverride& lhs, const GcDifficultyFuelUseTechOverride& rhs) 
	{
		return lhs.TechID == rhs.TechID &&
		lhs.Multiplier == rhs.Multiplier;
	}
};

//Dependency: NMSString0x10
struct GcReplacementEffectData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ReplaceWith;

	friend bool operator==(const GcReplacementEffectData& lhs, const GcReplacementEffectData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.ReplaceWith == rhs.ReplaceWith;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x20A
struct GcCreatureDiscoveryThumbnailOverride
{
	NMS::Vector3f DiscoveryUIOffset;
	NMS::NMSString0x20A ContainsDescriptor;
	float DiscoveryUIScaler;

	friend bool operator==(const GcCreatureDiscoveryThumbnailOverride& lhs, const GcCreatureDiscoveryThumbnailOverride& rhs) 
	{
		return lhs.DiscoveryUIOffset == rhs.DiscoveryUIOffset &&
		lhs.ContainsDescriptor == rhs.ContainsDescriptor &&
		lhs.DiscoveryUIScaler == rhs.DiscoveryUIScaler;
	}
};

struct GcPrimaryAxis
{
	enum class PrimaryAxisEnum : uint32_t
	{
		Z = 0,
		ZNeg = 1,
		X = 2,
		XNeg = 3,
		Y = 4,
		YNeg = 5,
	};

	NMS_GameComponents::GcPrimaryAxis::PrimaryAxisEnum PrimaryAxis;

	friend bool operator==(const GcPrimaryAxis& lhs, const GcPrimaryAxis& rhs) 
	{
		return lhs.PrimaryAxis == rhs.PrimaryAxis;
	}
};

//Dependency: GcReplacementEffectData
//Dependency: GcCreatureDiscoveryThumbnailOverride
//Dependency: GcPrimaryAxis
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcCreatureComponentData
{
	NMS::Vector3f DiscoveryUIOffset;
	NMS::Vector3f PetLargeUIOverrideOffset;
	NMS::NMSString0x10 DeathEffect;
	NMS::NMSString0x10 DeathEffectTrail;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcReplacementEffectData> ReplacementImpacts;
	std::vector<NMS_GameComponents::GcCreatureDiscoveryThumbnailOverride> ThumbnailOverrides;
	float AccessoryPitchOffset;
	NMS_GameComponents::GcPrimaryAxis Axis;
	float DeathEffectScale;
	float DeathFadeTime;
	float DiscoveryFurScaler;
	float DiscoveryUIScaler;
	float NavRadiusModifier;
	float PetIndoorScaler;
	float PetLargeUIOverrideScaler;
	float Scaler;
	float UnderwaterRagdollAnimStrength;
	float UnderwaterRagdollAnimTime;
	float UnderwaterRagdollDamping;
	float UnderwaterRagdollDampingTime;
	float UnderwaterRagdollGravityScale;
	float UnderwaterRagdollSpinStrength;
	float UnderwaterRagdollSpinTime;
	bool UsePetLargeUIOverride;
	bool UseStandardWaterPusher;

	friend bool operator==(const GcCreatureComponentData& lhs, const GcCreatureComponentData& rhs) 
	{
		return lhs.DiscoveryUIOffset == rhs.DiscoveryUIOffset &&
		lhs.PetLargeUIOverrideOffset == rhs.PetLargeUIOverrideOffset &&
		lhs.DeathEffect == rhs.DeathEffect &&
		lhs.DeathEffectTrail == rhs.DeathEffectTrail &&
		lhs.Id == rhs.Id &&
		lhs.ReplacementImpacts == rhs.ReplacementImpacts &&
		lhs.ThumbnailOverrides == rhs.ThumbnailOverrides &&
		lhs.AccessoryPitchOffset == rhs.AccessoryPitchOffset &&
		lhs.Axis == rhs.Axis &&
		lhs.DeathEffectScale == rhs.DeathEffectScale &&
		lhs.DeathFadeTime == rhs.DeathFadeTime &&
		lhs.DiscoveryFurScaler == rhs.DiscoveryFurScaler &&
		lhs.DiscoveryUIScaler == rhs.DiscoveryUIScaler &&
		lhs.NavRadiusModifier == rhs.NavRadiusModifier &&
		lhs.PetIndoorScaler == rhs.PetIndoorScaler &&
		lhs.PetLargeUIOverrideScaler == rhs.PetLargeUIOverrideScaler &&
		lhs.Scaler == rhs.Scaler &&
		lhs.UnderwaterRagdollAnimStrength == rhs.UnderwaterRagdollAnimStrength &&
		lhs.UnderwaterRagdollAnimTime == rhs.UnderwaterRagdollAnimTime &&
		lhs.UnderwaterRagdollDamping == rhs.UnderwaterRagdollDamping &&
		lhs.UnderwaterRagdollDampingTime == rhs.UnderwaterRagdollDampingTime &&
		lhs.UnderwaterRagdollGravityScale == rhs.UnderwaterRagdollGravityScale &&
		lhs.UnderwaterRagdollSpinStrength == rhs.UnderwaterRagdollSpinStrength &&
		lhs.UnderwaterRagdollSpinTime == rhs.UnderwaterRagdollSpinTime &&
		lhs.UsePetLargeUIOverride == rhs.UsePetLargeUIOverride &&
		lhs.UseStandardWaterPusher == rhs.UseStandardWaterPusher;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationGameData
{
	enum class BlockPlayerWeaponEnum : uint32_t
	{
		Unblocked = 0,
		Sheathed = 1,
		OutButCannotFire = 2,
	};

	enum class RootMotionEnum : uint32_t
	{
		None = 0,
		EnabledWithGravity = 1,
		EnabledFullControl = 2,
	};

	NMS_Toolkit::TkAnimationGameData::RootMotionEnum RootMotion;
	bool BlockPlayerMovement;
	NMS_Toolkit::TkAnimationGameData::BlockPlayerWeaponEnum BlockPlayerWeapon;

	friend bool operator==(const TkAnimationGameData& lhs, const TkAnimationGameData& rhs) 
	{
		return lhs.RootMotion == rhs.RootMotion &&
		lhs.BlockPlayerMovement == rhs.BlockPlayerMovement &&
		lhs.BlockPlayerWeapon == rhs.BlockPlayerWeapon;
	}
};

//Dependency: TkAnimationGameData
//Dependency: NMSString0x10
struct TkAnimBlendTree
{
	NMS::NMSString0x10 Id;
	NMSTemplate Tree;
	NMS_Toolkit::TkAnimationGameData GameData;
	int32_t Priority;

	friend bool operator==(const TkAnimBlendTree& lhs, const TkAnimBlendTree& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Tree == rhs.Tree &&
		lhs.GameData == rhs.GameData &&
		lhs.Priority == rhs.Priority;
	}
};

//Dependency: TkAnimBlendTree
struct TkBlendTreeLibrary
{
	std::vector<NMS_Toolkit::TkAnimBlendTree> Trees;

	friend bool operator==(const TkBlendTreeLibrary& lhs, const TkBlendTreeLibrary& rhs) 
	{
		return lhs.Trees == rhs.Trees;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcWeightedColourId
{
	NMS::NMSString0x10 DecorationPaletteId;
	NMS::NMSString0x10 PaletteId;
	float RelativeProbability;

	friend bool operator==(const GcWeightedColourId& lhs, const GcWeightedColourId& rhs) 
	{
		return lhs.DecorationPaletteId == rhs.DecorationPaletteId &&
		lhs.PaletteId == rhs.PaletteId &&
		lhs.RelativeProbability == rhs.RelativeProbability;
	}
};

//Dependency: GcWeightedColourId
//Dependency: GcBuildingClassification
struct GcBuildingColourPalette
{
	std::vector<NMS_GameComponents::GcWeightedColourId> Palettes;
	NMS_GameComponents::GcBuildingClassification Building;

	friend bool operator==(const GcBuildingColourPalette& lhs, const GcBuildingColourPalette& rhs) 
	{
		return lhs.Palettes == rhs.Palettes &&
		lhs.Building == rhs.Building;
	}
};

//Dependency: VariableSizeString
struct GcAISpaceshipInstanceData
{
	NMS::VariableSizeString File;

	friend bool operator==(const GcAISpaceshipInstanceData& lhs, const GcAISpaceshipInstanceData& rhs) 
	{
		return lhs.File == rhs.File;
	}
};

//Dependency: GcAISpaceshipInstanceData
struct GcAISpaceshipMappingData
{
	NMS_GameComponents::GcAISpaceshipInstanceData ClassMap[7];

	friend bool operator==(const GcAISpaceshipMappingData& lhs, const GcAISpaceshipMappingData& rhs) 
	{
		return std::equal(std::begin(lhs.ClassMap), std::end(lhs.ClassMap), std::begin(rhs.ClassMap));
	}
};

struct GcMissionConditionHasUnlockedPurpleSystems
{

	friend bool operator==(const GcMissionConditionHasUnlockedPurpleSystems& lhs, const GcMissionConditionHasUnlockedPurpleSystems& rhs) 
	{
		return true;
	}
};

struct GcBuildMenuOption
{
	enum class BuildMenuOptionEnum : uint32_t
	{
		Place = 0,
		ChangeColour = 1,
		FreeRotate = 2,
		Scale = 3,
		SnapRotate = 4,
		Move = 5,
		Duplicate = 6,
		Delete = 7,
		ToggleBuildCam = 8,
		ToggleSnappingAndCollision = 9,
		ToggleSelectionMode = 10,
		ToggleWiringMode = 11,
		ViewRelatives = 12,
		CyclePart = 13,
		PlaceWire = 14,
		CycleRotateMode = 15,
	};

	NMS_GameComponents::GcBuildMenuOption::BuildMenuOptionEnum BuildMenuOption;

	friend bool operator==(const GcBuildMenuOption& lhs, const GcBuildMenuOption& rhs) 
	{
		return lhs.BuildMenuOption == rhs.BuildMenuOption;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkBlackboardCategory
{
	enum class BlackboardCategoryEnum : uint32_t
	{
		Local = 0,
		Archetype = 1,
		PlayerControl = 2,
	};

	NMS_Toolkit::TkBlackboardCategory::BlackboardCategoryEnum BlackboardCategory;

	friend bool operator==(const TkBlackboardCategory& lhs, const TkBlackboardCategory& rhs) 
	{
		return lhs.BlackboardCategory == rhs.BlackboardCategory;
	}
};

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueFloat
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	float DefaultValue;

	friend bool operator==(const TkBlackboardDefaultValueFloat& lhs, const TkBlackboardDefaultValueFloat& rhs) 
	{
		return lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.BlackboardCategory == rhs.BlackboardCategory &&
		lhs.DefaultValue == rhs.DefaultValue;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcTextStylePlain
{

	friend bool operator==(const GcTextStylePlain& lhs, const GcTextStylePlain& rhs) 
	{
		return true;
	}
};

struct GcPlayerWeapons
{
	enum class WeaponModeEnum : uint32_t
	{
		Bolt = 0,
		Shotgun = 1,
		Burst = 2,
		Rail = 3,
		Cannon = 4,
		Laser = 5,
		Grenade = 6,
		MineGrenade = 7,
		Scope = 8,
		FrontShield = 9,
		Melee = 10,
		TerrainEdit = 11,
		SunLaser = 12,
		Spawner = 13,
		SpawnerAlt = 14,
		SoulLaser = 15,
		Flamethrower = 16,
		StunGrenade = 17,
		Stealth = 18,
		FishLaser = 19,
	};

	NMS_GameComponents::GcPlayerWeapons::WeaponModeEnum WeaponMode;

	friend bool operator==(const GcPlayerWeapons& lhs, const GcPlayerWeapons& rhs) 
	{
		return lhs.WeaponMode == rhs.WeaponMode;
	}
};

//Dependency: GcPlayerWeapons
struct GcMissionConditionWeaponMode
{
	NMS_GameComponents::GcPlayerWeapons WeaponMode;

	friend bool operator==(const GcMissionConditionWeaponMode& lhs, const GcMissionConditionWeaponMode& rhs) 
	{
		return lhs.WeaponMode == rhs.WeaponMode;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcMessageCutSceneAction
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS::NMSString0x10 Action;

	friend bool operator==(const GcMessageCutSceneAction& lhs, const GcMessageCutSceneAction& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Local == rhs.Local &&
		lhs.Offset == rhs.Offset &&
		lhs.Up == rhs.Up &&
		lhs.Action == rhs.Action;
	}
};

struct GcCreaturePetTraits
{
	enum class PetTraitEnum : uint32_t
	{
		Helpfulness = 0,
		Aggression = 1,
		Independence = 2,
	};

	NMS_GameComponents::GcCreaturePetTraits::PetTraitEnum PetTrait;

	friend bool operator==(const GcCreaturePetTraits& lhs, const GcCreaturePetTraits& rhs) 
	{
		return lhs.PetTrait == rhs.PetTrait;
	}
};

//Dependency: GcCreaturePetTraits
//Dependency: NMSString0x20A
struct GcPetVocabularyTraitEntry
{
	NMS::NMSString0x20A Negative;
	NMS::NMSString0x20A Positive;
	NMS_GameComponents::GcCreaturePetTraits Trait;

	friend bool operator==(const GcPetVocabularyTraitEntry& lhs, const GcPetVocabularyTraitEntry& rhs) 
	{
		return lhs.Negative == rhs.Negative &&
		lhs.Positive == rhs.Positive &&
		lhs.Trait == rhs.Trait;
	}
};

//Dependency: GcPetVocabularyTraitEntry
//Dependency: NMSString0x20A
struct GcPetVocabularyEntry
{
	NMS::NMSString0x20A GenericFallback;
	std::vector<NMS_GameComponents::GcPetVocabularyTraitEntry> Vocabulary;
	float OddsOfProcReplacement;

	friend bool operator==(const GcPetVocabularyEntry& lhs, const GcPetVocabularyEntry& rhs) 
	{
		return lhs.GenericFallback == rhs.GenericFallback &&
		lhs.Vocabulary == rhs.Vocabulary &&
		lhs.OddsOfProcReplacement == rhs.OddsOfProcReplacement;
	}
};

struct GcRewardEnergy
{
	int32_t Amount;

	friend bool operator==(const GcRewardEnergy& lhs, const GcRewardEnergy& rhs) 
	{
		return lhs.Amount == rhs.Amount;
	}
};

//Dependency: NMSString0x10
struct GcRewardExchangeProduct
{
	NMS::NMSString0x10 IDToGive;
	NMS::NMSString0x10 IDToTake;
	int32_t AmountToGiveMax;
	int32_t AmountToGiveMin;
	int32_t AmountToTakeMax;
	bool ForceSpecialMessage;
	bool HideNewProduct;

	friend bool operator==(const GcRewardExchangeProduct& lhs, const GcRewardExchangeProduct& rhs) 
	{
		return lhs.IDToGive == rhs.IDToGive &&
		lhs.IDToTake == rhs.IDToTake &&
		lhs.AmountToGiveMax == rhs.AmountToGiveMax &&
		lhs.AmountToGiveMin == rhs.AmountToGiveMin &&
		lhs.AmountToTakeMax == rhs.AmountToTakeMax &&
		lhs.ForceSpecialMessage == rhs.ForceSpecialMessage &&
		lhs.HideNewProduct == rhs.HideNewProduct;
	}
};

//Dependency: GcBuildingClassification
struct GcSettlementProductionElementRequirement
{
	int32_t RequiredSettlementBuildingLevel;
	NMS_GameComponents::GcBuildingClassification RequiredSettlementBuildingType;

	friend bool operator==(const GcSettlementProductionElementRequirement& lhs, const GcSettlementProductionElementRequirement& rhs) 
	{
		return lhs.RequiredSettlementBuildingLevel == rhs.RequiredSettlementBuildingLevel &&
		lhs.RequiredSettlementBuildingType == rhs.RequiredSettlementBuildingType;
	}
};

struct GcCombatTimerDifficultyOption
{
	enum class CombatTimerDifficultyOptionEnum : uint32_t
	{
		Off = 0,
		Slow = 1,
		Normal = 2,
		Fast = 3,
	};

	NMS_GameComponents::GcCombatTimerDifficultyOption::CombatTimerDifficultyOptionEnum CombatTimerDifficultyOption;

	friend bool operator==(const GcCombatTimerDifficultyOption& lhs, const GcCombatTimerDifficultyOption& rhs) 
	{
		return lhs.CombatTimerDifficultyOption == rhs.CombatTimerDifficultyOption;
	}
};

//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkEqualityEnum
//Dependency: NMSString0x20A
struct GcCostDifficultyGroundCombat
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcCombatTimerDifficultyOption GroundCombatTimers;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcCostDifficultyGroundCombat& lhs, const GcCostDifficultyGroundCombat& rhs) 
	{
		return lhs.CostStringCantAfford == rhs.CostStringCantAfford &&
		lhs.GroundCombatTimers == rhs.GroundCombatTimers &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: NMSString0x10
struct GcUnlockableTwitchReward
{
	NMS::NMSString0x10 LinkedGroupId;
	NMS::NMSString0x10 ProductId;
	NMS::NMSString0x10 TwitchId;

	friend bool operator==(const GcUnlockableTwitchReward& lhs, const GcUnlockableTwitchReward& rhs) 
	{
		return lhs.LinkedGroupId == rhs.LinkedGroupId &&
		lhs.ProductId == rhs.ProductId &&
		lhs.TwitchId == rhs.TwitchId;
	}
};

//Dependency: GcUnlockableTwitchReward
struct GcUnlockableTwitchRewards
{
	std::vector<NMS_GameComponents::GcUnlockableTwitchReward> Table;

	friend bool operator==(const GcUnlockableTwitchRewards& lhs, const GcUnlockableTwitchRewards& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcAlienRace
struct GcMissionConditionExpeditionCaptainRace
{
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcMissionConditionExpeditionCaptainRace& lhs, const GcMissionConditionExpeditionCaptainRace& rhs) 
	{
		return lhs.Race == rhs.Race;
	}
};

struct GcInputActions
{
	enum class InputActionEnum : uint32_t
	{
		Invalid = 0,
		Player_Forward = 1,
		Player_Back = 2,
		Player_Left = 3,
		Player_Right = 4,
		Player_SwimUp = 5,
		Player_SwimDown = 6,
		Player_Interact = 7,
		Player_Melee = 8,
		Player_Scan = 9,
		Player_Torch = 10,
		Player_Binoculars = 11,
		Player_Zoom = 12,
		Player_ShowHUD = 13,
		Player_Jump = 14,
		Player_Run = 15,
		Player_Shoot = 16,
		Player_Grenade = 17,
		Player_Reload = 18,
		Player_ChangeWeapon = 19,
		Player_Deconstruct = 20,
		Player_ChangeAltWeapon = 21,
		Player_PlaceMarker = 22,
		Quick_Menu = 23,
		Build_Menu = 24,
		Ship_AltLeft = 25,
		Ship_AltRight = 26,
		Ship_Thrust = 27,
		Ship_Brake = 28,
		Ship_Boost = 29,
		Ship_RollLeft = 30,
		Ship_RollRight = 31,
		Ship_Exit = 32,
		Ship_Land = 33,
		Ship_Shoot = 34,
		Ship_ChangeWeapon = 35,
		Ship_Scan = 36,
		Ship_PulseJump = 37,
		Ship_GalacticMap = 38,
		Ship_TurnLeft = 39,
		Ship_TurnRight = 40,
		Ship_FreeLook = 41,
		Ship_AutoFollow_Toggle = 42,
		Ship_AutoFollow_Hold = 43,
		Ship_CyclePower = 44,
		Vehicle_Forward = 45,
		Vehicle_Reverse = 46,
		Vehicle_Left = 47,
		Vehicle_Right = 48,
		Vehicle_Exit = 49,
		Vehicle_Shoot = 50,
		Vehicle_ChangeWeapon = 51,
		Vehicle_Scan = 52,
		Vehicle_Boost = 53,
		Vehicle_Jump = 54,
		Vehicle_Dive = 55,
		Vehicle_Horn = 56,
		Vehicle_AddCheckpoint = 57,
		Vehicle_DeleteCheckpoint = 58,
		Fe_Select = 59,
		Fe_AltSelect = 60,
		Fe_SelectX = 61,
		Fe_Back = 62,
		Fe_Alt1 = 63,
		Fe_Alt1X = 64,
		Fe_Transfer = 65,
		Fe_Destroy = 66,
		UI_Left = 67,
		UI_Right = 68,
		UI_Left_Sub = 69,
		UI_Right_Sub = 70,
		UI_Down_Sub = 71,
		UI_Up_Sub = 72,
		UI_NetworkPageShortcut = 73,
		UI_StackSplitUp = 74,
		UI_StackSplitDown = 75,
		Fe_ExitMenu = 76,
		Fe_Options = 77,
		Fe_Quit = 78,
		Fe_MsgSkip = 79,
		Fe_TouchscreenPress = 80,
		Quick_Left = 81,
		Quick_Right = 82,
		Quick_Action = 83,
		Quick_Back = 84,
		Quick_Up = 85,
		Quick_Down = 86,
		Build_Place = 87,
		Build_Rotate_Left = 88,
		Build_Rotate_Right = 89,
		Build_AnalogRotateMode1 = 90,
		Build_AnalogRotateMode2 = 91,
		Build_AnalogRotateLeftY = 92,
		Build_AnalogRotateRightY = 93,
		Build_AnalogRotateY = 94,
		Build_AnalogRotateLeftZ = 95,
		Build_AnalogRotateRightZ = 96,
		Build_AnalogRotateZ = 97,
		Build_ScaleUp = 98,
		Build_ScaleDown = 99,
		Build_AnalogueScale = 100,
		Build_SelectionMode = 101,
		Build_Camera = 102,
		Photo_Hide = 103,
		Photo_Sun = 104,
		Photo_Cam = 105,
		Photo_Exit = 106,
		Photo_CamDown = 107,
		Photo_CamUp = 108,
		Photo_Capture = 109,
		Ambient_Camera = 110,
		Ambient_Planet = 111,
		Ambient_System = 112,
		Ambient_Photo = 113,
		Ambient_NxtSong = 114,
		Ambient_Spawn = 115,
		Terrain_Edit = 116,
		Terrain_ModeBack = 117,
		Terrain_Menu = 118,
		Terrain_SizeUp = 119,
		Terrain_SizeDown = 120,
		Terrain_RotTerrainLeft = 121,
		Terrain_RotTerrainRight = 122,
		Terrain_ChangeShape = 123,
		Ship_NextTarget = 124,
		Ship_PreviousTarget = 125,
		Ship_ClosestTarget = 126,
		CameraLook = 127,
		CameraLookX = 128,
		CameraLookY = 129,
		PlayerMove = 130,
		PlayerMoveX = 131,
		PlayerMoveY = 132,
		SpaceshipThrust = 133,
		SpaceshipBrake = 134,
		VehicleMove = 135,
		VehicleSteer = 136,
		VehicleThrust = 137,
		VehicleBrake = 138,
		ShipStrafe = 139,
		ShipStrafeHorizontal = 140,
		ShipStrafeVertical = 141,
		HeldRotate = 142,
		HeldRotateLeft = 143,
		HeldRotateRight = 144,
		ShipSteer = 145,
		ShipTurn = 146,
		ShipPitch = 147,
		ShipLook = 148,
		ShipLookX = 149,
		ShipLookY = 150,
		ShipLand = 151,
		ShipPulse = 152,
		PlayerSmoothTurnLeft = 153,
		PlayerSmoothTurnRight = 154,
		PlayerSnapTurnLeft = 155,
		PlayerSnapTurnRight = 156,
		PlayerSnapTurnAround = 157,
		PlayerMoveAround = 158,
		TeleportDirection = 159,
		PlayerAutoWalk = 160,
		InteractLeft = 161,
		MeleeLeft = 162,
		HandCtrlHolster = 163,
		ShipUp = 164,
		ShipDown = 165,
		ShipLeft = 166,
		ShipRight = 167,
		ShipZoom = 168,
		Inventory = 169,
		DiscoveryNetworkRetry = 170,
		QuitGame = 171,
		ReportBase = 172,
		Unbound = 173,
		GalacticMap_Select = 174,
		GalacticMap_Deselect = 175,
		GalacticMap_Exit = 176,
		GalacticMap_Scan = 177,
		GalacticMap_Home = 178,
		GalacticMap_PlanetBase = 179,
		GalacticMap_Accelerate = 180,
		GalacticMap_ExpandMenu = 181,
		GalacticMap_ScreenshotToggle = 182,
		GalacticMap_ScanChooseNext = 183,
		GalacticMap_ToggleWaypoint = 184,
		GalacticMap_ClearAllWaypoints = 185,
		GalacticMap_NextNavType = 186,
		GalacticMap_PreviousNavType = 187,
		GalacticMap_PreviousFilter = 188,
		GalacticMap_NextFilter = 189,
		GalacticMap_CameraLook = 190,
		GalacticMap_CameraLookX = 191,
		GalacticMap_CameraLookY = 192,
		GalacticMap_PlayerMove = 193,
		GalacticMap_PlayerMoveX = 194,
		GalacticMap_PlayerMoveY = 195,
		GalacticMap_PlayerMoveForward = 196,
		GalacticMap_PlayerMoveBackward = 197,
		GalacticMap_PlayerMoveLeft = 198,
		GalacticMap_PlayerMoveRight = 199,
		GalacticMap_Up = 200,
		GalacticMap_Down = 201,
		GalacticMap_Gesture = 202,
		UI_Cursor = 203,
		UI_CursorX = 204,
		UI_CursorY = 205,
		UI_Camera = 206,
		UI_CameraX = 207,
		UI_CameraY = 208,
		UI_ViewPlayerInfo = 209,
		UI_ToggleBuySell = 210,
		UI_ToggleTradeInventory = 211,
		UI_TouchScrollY = 212,
		UI_TouchScrollX = 213,
		CharacterCustomisation_ShowCharacter = 214,
		UI_CharacterCustomisation_Camera = 215,
		UI_CharacterCustomisation_RotateCamera = 216,
		UI_CharacterCustomisation_PitchCamera = 217,
		GameMode_TitleStart = 218,
		GameMode_ChangeUser = 219,
		Binocs_NextMode = 220,
		Binocs_PrevMode = 221,
		BaseBuilding_PinRecipe = 222,
		BaseBuilding_SwitchBase = 223,
		PhotoMode_CatLeft = 224,
		PhotoMode_CatRight = 225,
		PhotoMode_ValueIncrease = 226,
		PhotoMode_ValueDecrease = 227,
		PhotoMode_OptionUp = 228,
		PhotoMode_OptionDown = 229,
		PhotoMode_CameraRollLeft = 230,
		PhotoMode_CameraRollRight = 231,
		PhotoMode_PauseApplication = 232,
		PhotoMode_CopyLocation = 233,
		PhotoMode_HideLocation = 234,
		UI_Up_Sub_Discovery = 235,
		UI_Down_Sub_Discovery = 236,
		Fe_Upload_Discovery = 237,
		Fe_Assign_Custom_Wonder = 238,
		HMD_Recenter = 239,
		HMD_Recenter2 = 240,
		HMD_FEOpen = 241,
		TextChatOpenClose = 242,
		TextChatSend = 243,
		TextChatPasteHold = 244,
		TextChatPaste = 245,
		TextChatAutocomplete = 246,
		TextChatAutocompleteModifier = 247,
		TextChatCursorLeft = 248,
		TextChatCursorRight = 249,
		TextChatCursorHome = 250,
		TextChatCursorEnd = 251,
		TextChatDelete = 252,
		Player_InteractSecondary = 253,
		BaseBuilding_ToggleVisions = 254,
		BaseBuilding_Browse = 255,
		BaseBuilding_Pickup = 256,
		BaseBuilding_Duplicate = 257,
		BaseBuilding_Delete = 258,
		BaseBuilding_ToggleRotationAxis = 259,
		Build_AnalogRotateZ2 = 260,
		BaseBuilding_ToggleSnapping = 261,
		BaseBuilding_ToggleWiring = 262,
		BaseBuilding_Paint = 263,
		BaseBuilding_NextPart = 264,
		TogglePause = 265,
		TogglePlanet = 266,
		ToggleFreezeCulling = 267,
		Suicide = 268,
		Reset = 269,
		AddLastToolbox = 270,
		AddLastToolboxAtPos = 271,
		TerrainInvalidate = 272,
		TogglePipeline = 273,
		TakeScreenshot = 274,
		TakeExrScreenshot = 275,
		ToggleDebugStats = 276,
		ToggleDebugSubpage = 277,
		DumpNodeStats = 278,
		ToggleTaa = 279,
		DebugDropMeasurementAnchor = 280,
		QuickWarp = 281,
		DumpStats = 282,
		DiscoverOwnBase = 283,
		ClearTerrainEdits = 284,
		SelectRegion = 285,
		SwitchRegionRow = 286,
		SwitchRegionAxis = 287,
		OpenLog = 288,
		DumpVertStats = 289,
		Player_TagMarker = 290,
	};

	NMS_GameComponents::GcInputActions::InputActionEnum InputAction;

	friend bool operator==(const GcInputActions& lhs, const GcInputActions& rhs) 
	{
		return lhs.InputAction == rhs.InputAction;
	}
};

//Dependency: GcInputActions
//Dependency: GcActionUseType
struct GcActionSetAction
{
	NMS_GameComponents::GcInputActions Action;
	NMS_GameComponents::GcActionUseType Status;

	friend bool operator==(const GcActionSetAction& lhs, const GcActionSetAction& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.Status == rhs.Status;
	}
};

struct GcDifficultyCurrencyCostOptionData
{
	enum class FreeCostTypesEnum : uint32_t
	{
		Currency = 0,
		Substance = 1,
		Product = 2,
	};

	float Multipliers[3];
	float TradeBuyPriceMarkupMod;
	bool FreeCostTypes[3];
	bool CostManagerCostsAreFree;
	bool InteractionsCostsAreFree;

	friend bool operator==(const GcDifficultyCurrencyCostOptionData& lhs, const GcDifficultyCurrencyCostOptionData& rhs) 
	{
		return std::equal(std::begin(lhs.Multipliers), std::end(lhs.Multipliers), std::begin(rhs.Multipliers)) &&
		lhs.TradeBuyPriceMarkupMod == rhs.TradeBuyPriceMarkupMod &&
		std::equal(std::begin(lhs.FreeCostTypes), std::end(lhs.FreeCostTypes), std::begin(rhs.FreeCostTypes)) &&
		lhs.CostManagerCostsAreFree == rhs.CostManagerCostsAreFree &&
		lhs.InteractionsCostsAreFree == rhs.InteractionsCostsAreFree;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector4i
{
	uint32_t X;
	uint32_t Y;
	uint32_t Z;
	uint32_t W;

	friend bool operator==(const Vector4i& lhs, const Vector4i& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y &&
		lhs.Z == rhs.Z &&
		lhs.W == rhs.W;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcBaseBuildingEntryGroup
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 SubGroupName;
	int32_t SubGroup;

	friend bool operator==(const GcBaseBuildingEntryGroup& lhs, const GcBaseBuildingEntryGroup& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.SubGroupName == rhs.SubGroupName &&
		lhs.SubGroup == rhs.SubGroup;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceShowPodMessage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceShowPodMessage& lhs, const GcMissionSequenceShowPodMessage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

struct GcBuildingModeCondition
{
	int32_t ValidBuildingModes[5];

	friend bool operator==(const GcBuildingModeCondition& lhs, const GcBuildingModeCondition& rhs) 
	{
		return std::equal(std::begin(lhs.ValidBuildingModes), std::end(lhs.ValidBuildingModes), std::begin(rhs.ValidBuildingModes));
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCharacterJetpackEffect
{
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x100 NodeName;

	friend bool operator==(const GcCharacterJetpackEffect& lhs, const GcCharacterJetpackEffect& rhs) 
	{
		return lhs.Effect == rhs.Effect &&
		lhs.NodeName == rhs.NodeName;
	}
};

struct GcNPCNavSubgraphNodeType
{
	enum class NPCNavSubgraphNodeTypeEnum : uint32_t
	{
		Path = 0,
		Connection = 1,
		PointOfInterest = 2,
	};

	NMS_GameComponents::GcNPCNavSubgraphNodeType::NPCNavSubgraphNodeTypeEnum NPCNavSubgraphNodeType;

	friend bool operator==(const GcNPCNavSubgraphNodeType& lhs, const GcNPCNavSubgraphNodeType& rhs) 
	{
		return lhs.NPCNavSubgraphNodeType == rhs.NPCNavSubgraphNodeType;
	}
};

struct GcVehicleType
{
	enum class VehicleTypeEnum : uint32_t
	{
		Buggy = 0,
		Bike = 1,
		Truck = 2,
		WheeledBike = 3,
		Hovercraft = 4,
		Submarine = 5,
		Mech = 6,
	};

	NMS_GameComponents::GcVehicleType::VehicleTypeEnum VehicleType;

	friend bool operator==(const GcVehicleType& lhs, const GcVehicleType& rhs) 
	{
		return lhs.VehicleType == rhs.VehicleType;
	}
};

struct GcLaunchFuelCostDifficultyOption
{
	enum class LaunchFuelCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcLaunchFuelCostDifficultyOption::LaunchFuelCostDifficultyEnum LaunchFuelCostDifficulty;

	friend bool operator==(const GcLaunchFuelCostDifficultyOption& lhs, const GcLaunchFuelCostDifficultyOption& rhs) 
	{
		return lhs.LaunchFuelCostDifficulty == rhs.LaunchFuelCostDifficulty;
	}
};

struct GcPlayerMissionParticipantType
{
	enum class ParticipantTypeEnum : uint32_t
	{
		None = 0,
		MissionGiver = 1,
		MissionGiverReference = 2,
		Primary = 3,
		Secondary1 = 4,
		Secondary2 = 5,
		Secondary3 = 6,
		Secondary4 = 7,
		Secondary5 = 8,
		Secondary6 = 9,
		Secondary7 = 10,
		Secondary8 = 11,
		Secondary9 = 12,
	};

	NMS_GameComponents::GcPlayerMissionParticipantType::ParticipantTypeEnum ParticipantType;

	friend bool operator==(const GcPlayerMissionParticipantType& lhs, const GcPlayerMissionParticipantType& rhs) 
	{
		return lhs.ParticipantType == rhs.ParticipantType;
	}
};

//Dependency: GcPlayerMissionParticipantType
//Dependency: Vector3f
//Dependency: GcSeed
struct GcPlayerMissionParticipant
{
	NMS::Vector3f BuildingLocation;
	NMS::GcSeed BuildingSeed;
	uint64_t UA;
	NMS_GameComponents::GcPlayerMissionParticipantType ParticipantType;

	friend bool operator==(const GcPlayerMissionParticipant& lhs, const GcPlayerMissionParticipant& rhs) 
	{
		return lhs.BuildingLocation == rhs.BuildingLocation &&
		lhs.BuildingSeed == rhs.BuildingSeed &&
		lhs.UA == rhs.UA &&
		lhs.ParticipantType == rhs.ParticipantType;
	}
};

//Dependency: GcAlienMood
//Dependency: NMSString0x10
struct GcAlienMoodMissionOverride
{
	NMS::NMSString0x10 Mission;
	NMS_GameComponents::GcAlienMood Mood;

	friend bool operator==(const GcAlienMoodMissionOverride& lhs, const GcAlienMoodMissionOverride& rhs) 
	{
		return lhs.Mission == rhs.Mission &&
		lhs.Mood == rhs.Mood;
	}
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcScanToRevealComponentData
{
	enum class HideScanMarkerConditionEnum : uint32_t
	{
		Never = 0,
		MissingTech = 1,
		Hidden = 2,
	};

	NMS::NMSString0x10 LockedMarkerScanOverride;
	NMS::NMSString0x10 OnRevealEffect;
	NMS::NMSString0x10 RequiredTech;
	float DissolveTime;
	NMS_GameComponents::GcScanToRevealComponentData::HideScanMarkerConditionEnum HideScanMarkerCondition;
	float MaxRange;
	NMS_GameComponents::GcStatsTypes RequiredStat;
	float RevealTime;
	bool DoDissolve;
	bool EnabledOnlyOnAbandonedNexus;
	bool LockedMarkerClearOnReveal;
	bool OnRevealEffectScaleWithAABB;
	bool RevealedByShipScan;
	bool RevealedByToolScan;
	bool SetNodeActivation;
	bool StartEnabled;

	friend bool operator==(const GcScanToRevealComponentData& lhs, const GcScanToRevealComponentData& rhs) 
	{
		return lhs.LockedMarkerScanOverride == rhs.LockedMarkerScanOverride &&
		lhs.OnRevealEffect == rhs.OnRevealEffect &&
		lhs.RequiredTech == rhs.RequiredTech &&
		lhs.DissolveTime == rhs.DissolveTime &&
		lhs.HideScanMarkerCondition == rhs.HideScanMarkerCondition &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.RequiredStat == rhs.RequiredStat &&
		lhs.RevealTime == rhs.RevealTime &&
		lhs.DoDissolve == rhs.DoDissolve &&
		lhs.EnabledOnlyOnAbandonedNexus == rhs.EnabledOnlyOnAbandonedNexus &&
		lhs.LockedMarkerClearOnReveal == rhs.LockedMarkerClearOnReveal &&
		lhs.OnRevealEffectScaleWithAABB == rhs.OnRevealEffectScaleWithAABB &&
		lhs.RevealedByShipScan == rhs.RevealedByShipScan &&
		lhs.RevealedByToolScan == rhs.RevealedByToolScan &&
		lhs.SetNodeActivation == rhs.SetNodeActivation &&
		lhs.StartEnabled == rhs.StartEnabled;
	}
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Quaternion
{
	double X;
	double Y;
	double Z;
	double W;
	int32_t dropComponent;

	friend bool operator==(const Quaternion& lhs, const Quaternion& rhs) 
	{
		return lhs.X == rhs.X &&
		lhs.Y == rhs.Y &&
		lhs.Z == rhs.Z &&
		lhs.W == rhs.W &&
		lhs.dropComponent == rhs.dropComponent;
	}
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcPerformanceFlyby
{
	float Length;
	float LockOffset;
	float LockSpeed;
	float LockTime;
	float Offset;
	bool Locked;

	friend bool operator==(const GcPerformanceFlyby& lhs, const GcPerformanceFlyby& rhs) 
	{
		return lhs.Length == rhs.Length &&
		lhs.LockOffset == rhs.LockOffset &&
		lhs.LockSpeed == rhs.LockSpeed &&
		lhs.LockTime == rhs.LockTime &&
		lhs.Offset == rhs.Offset &&
		lhs.Locked == rhs.Locked;
	}
};

struct GcActionSetType
{
	enum class ActionSetTypeEnum : uint32_t
	{
		None = 0,
		FRONTEND = 1,
		Frontend_Right = 2,
		Frontend_Left = 3,
		OnFootControls = 4,
		OnFootControls_Right = 5,
		OnFootControls_Left = 6,
		OnFootQuickMenu = 7,
		OnFootQuickMenu_Right = 8,
		OnFootQuickMenu_Left = 9,
		ShipControls = 10,
		ShipControls_Right = 11,
		ShipControls_Left = 12,
		ShipQuickMenu = 13,
		ShipQuickMenu_Right = 14,
		ShipQuickMenu_Left = 15,
		VehicleMode = 16,
		VehicleMode_Right = 17,
		VehicleMode_Left = 18,
		VehicleQuickMenu = 19,
		VehicleQuickMenu_Right = 20,
		VehicleQuickMenu_Left = 21,
		GalacticMap = 22,
		GalacticMap_Right = 23,
		GalacticMap_Left = 24,
		PhotoModeMenu = 25,
		PhotoModeMenu_Right = 26,
		PhotoModeMenu_Left = 27,
		PhotoModeMvCam = 28,
		PhotoModeMvCam_Right = 29,
		PhotoModeMvCam_Left = 30,
		AmbientMode = 31,
		DebugMode = 32,
		TextChat = 33,
		BuildMenuSelectionMode = 34,
		BuildMenuSelectionMode_Right = 35,
		BuildMenuSelectionMode_Left = 36,
		BuildMenuPlacementMode = 37,
		BuildMenuPlacementMode_Right = 38,
		BuildMenuPlacementMode_Left = 39,
	};

	NMS_GameComponents::GcActionSetType::ActionSetTypeEnum ActionSetType;

	friend bool operator==(const GcActionSetType& lhs, const GcActionSetType& rhs) 
	{
		return lhs.ActionSetType == rhs.ActionSetType;
	}
};

//Dependency: GcActionSetType
//Dependency: NMSString0x10
struct GcActionSetHudLayer
{
	std::vector<NMS::NMSString0x10> HudLayerIDs;
	NMS_GameComponents::GcActionSetType Type;

	friend bool operator==(const GcActionSetHudLayer& lhs, const GcActionSetHudLayer& rhs) 
	{
		return lhs.HudLayerIDs == rhs.HudLayerIDs &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcDialogClearanceInfo
{
	NMS::NMSString0x20A GlobalDialogID;
	NMS::NMSString0x10 AssociatedMission;
	bool AlwaysForceClearThisPair;

	friend bool operator==(const GcDialogClearanceInfo& lhs, const GcDialogClearanceInfo& rhs) 
	{
		return lhs.GlobalDialogID == rhs.GlobalDialogID &&
		lhs.AssociatedMission == rhs.AssociatedMission &&
		lhs.AlwaysForceClearThisPair == rhs.AlwaysForceClearThisPair;
	}
};

//Dependency: GcDialogClearanceInfo
struct GcDialogClearanceTable
{
	std::vector<NMS_GameComponents::GcDialogClearanceInfo> Table;

	friend bool operator==(const GcDialogClearanceTable& lhs, const GcDialogClearanceTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: VariableSizeString
struct GcAIShipDebugSpawnData
{
	NMS::Vector3f Facing;
	NMS::Vector3f FlightDir;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::GcSeed Seed;
	NMS::VariableSizeString SpecificModel;
	float HoverHeight;
	float HoverTime;
	float IgnitionDelay;
	float Speed;
	float TakeOffDelay;
	float WarpOutTime;
	bool Wingman;

	friend bool operator==(const GcAIShipDebugSpawnData& lhs, const GcAIShipDebugSpawnData& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.FlightDir == rhs.FlightDir &&
		lhs.Position == rhs.Position &&
		lhs.Up == rhs.Up &&
		lhs.Seed == rhs.Seed &&
		lhs.SpecificModel == rhs.SpecificModel &&
		lhs.HoverHeight == rhs.HoverHeight &&
		lhs.HoverTime == rhs.HoverTime &&
		lhs.IgnitionDelay == rhs.IgnitionDelay &&
		lhs.Speed == rhs.Speed &&
		lhs.TakeOffDelay == rhs.TakeOffDelay &&
		lhs.WarpOutTime == rhs.WarpOutTime &&
		lhs.Wingman == rhs.Wingman;
	}
};

struct GcPetVocabularyWords
{
	enum class PetVocabularyWordEnum : uint32_t
	{
		Attack = 0,
		Dislike = 1,
		Cute = 2,
		Good = 3,
		Happy = 4,
		Hostile = 5,
		Like = 6,
		Lonely = 7,
		Loved = 8,
		Noise = 9,
		OwnerLove = 10,
		SummonedTrait = 11,
		Hungry = 12,
		Tickles = 13,
		Yummy = 14,
	};

	NMS_GameComponents::GcPetVocabularyWords::PetVocabularyWordEnum PetVocabularyWord;

	friend bool operator==(const GcPetVocabularyWords& lhs, const GcPetVocabularyWords& rhs) 
	{
		return lhs.PetVocabularyWord == rhs.PetVocabularyWord;
	}
};

struct GcGameMode
{
	enum class PresetGameModeEnum : uint32_t
	{
		Unspecified = 0,
		Normal = 1,
		Creative = 2,
		Survival = 3,
		Ambient = 4,
		Permadeath = 5,
		Seasonal = 6,
	};

	NMS_GameComponents::GcGameMode::PresetGameModeEnum PresetGameMode;

	friend bool operator==(const GcGameMode& lhs, const GcGameMode& rhs) 
	{
		return lhs.PresetGameMode == rhs.PresetGameMode;
	}
};

//Dependency: GcGameMode
struct GcMissionConditionGameMode
{
	NMS_GameComponents::GcGameMode Mode;

	friend bool operator==(const GcMissionConditionGameMode& lhs, const GcMissionConditionGameMode& rhs) 
	{
		return lhs.Mode == rhs.Mode;
	}
};

struct GcCostPendingSettlementJudgement
{

	friend bool operator==(const GcCostPendingSettlementJudgement& lhs, const GcCostPendingSettlementJudgement& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRegionHotspotBiomeGases
{
	NMS::NMSString0x10 Gas1Id;
	NMS::NMSString0x10 Gas2Id;

	friend bool operator==(const GcRegionHotspotBiomeGases& lhs, const GcRegionHotspotBiomeGases& rhs) 
	{
		return lhs.Gas1Id == rhs.Gas1Id &&
		lhs.Gas2Id == rhs.Gas2Id;
	}
};

//Dependency: NMSString0x10
struct GcRegionHotspotSubstance
{
	NMS::NMSString0x10 SubstanceId;
	int32_t AmountCost;
	int32_t SubstanceYeild;

	friend bool operator==(const GcRegionHotspotSubstance& lhs, const GcRegionHotspotSubstance& rhs) 
	{
		return lhs.SubstanceId == rhs.SubstanceId &&
		lhs.AmountCost == rhs.AmountCost &&
		lhs.SubstanceYeild == rhs.SubstanceYeild;
	}
};

struct GcRegionHotspotData
{
	float ClassStrengths[4];
	float ClassWeightings[4];
	float DiscoveryDistanceThreshold;
	float MaxRange;
	float MinRange;
	float ProbabilityWeighting;

	friend bool operator==(const GcRegionHotspotData& lhs, const GcRegionHotspotData& rhs) 
	{
		return std::equal(std::begin(lhs.ClassStrengths), std::end(lhs.ClassStrengths), std::begin(rhs.ClassStrengths)) &&
		std::equal(std::begin(lhs.ClassWeightings), std::end(lhs.ClassWeightings), std::begin(rhs.ClassWeightings)) &&
		lhs.DiscoveryDistanceThreshold == rhs.DiscoveryDistanceThreshold &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.MinRange == rhs.MinRange &&
		lhs.ProbabilityWeighting == rhs.ProbabilityWeighting;
	}
};

//Dependency: GcRegionHotspotBiomeGases
//Dependency: GcRegionHotspotSubstance
//Dependency: GcRegionHotspotData
struct GcRegionHotspotsTable
{
	NMS_GameComponents::GcRegionHotspotBiomeGases RegionHotspotBiomeGases[17];
	std::vector<NMS_GameComponents::GcRegionHotspotSubstance> RegionHotspotSubstances;
	NMS_GameComponents::GcRegionHotspotData RegionHotspots[6];
	float RegionHotspotsMaxDifferentCategoryOverlap;
	float RegionHotspotsMinSameCategorySpacing;
	float RegionHotspotsPerPoleMax;
	float RegionHotspotsPerPoleMin;
	float RegionHotspotsPoleSpacing;

	friend bool operator==(const GcRegionHotspotsTable& lhs, const GcRegionHotspotsTable& rhs) 
	{
		return std::equal(std::begin(lhs.RegionHotspotBiomeGases), std::end(lhs.RegionHotspotBiomeGases), std::begin(rhs.RegionHotspotBiomeGases)) &&
		lhs.RegionHotspotSubstances == rhs.RegionHotspotSubstances &&
		std::equal(std::begin(lhs.RegionHotspots), std::end(lhs.RegionHotspots), std::begin(rhs.RegionHotspots)) &&
		lhs.RegionHotspotsMaxDifferentCategoryOverlap == rhs.RegionHotspotsMaxDifferentCategoryOverlap &&
		lhs.RegionHotspotsMinSameCategorySpacing == rhs.RegionHotspotsMinSameCategorySpacing &&
		lhs.RegionHotspotsPerPoleMax == rhs.RegionHotspotsPerPoleMax &&
		lhs.RegionHotspotsPerPoleMin == rhs.RegionHotspotsPerPoleMin &&
		lhs.RegionHotspotsPoleSpacing == rhs.RegionHotspotsPoleSpacing;
	}
};

struct GcRewardDestructEntry
{
	float HealthFactor;

	friend bool operator==(const GcRewardDestructEntry& lhs, const GcRewardDestructEntry& rhs) 
	{
		return lhs.HealthFactor == rhs.HealthFactor;
	}
};

//Dependency: GcRewardDestructEntry
struct GcRewardDestructRarities
{
	NMS_GameComponents::GcRewardDestructEntry Rarities[3];

	friend bool operator==(const GcRewardDestructRarities& lhs, const GcRewardDestructRarities& rhs) 
	{
		return std::equal(std::begin(lhs.Rarities), std::end(lhs.Rarities), std::begin(rhs.Rarities));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkBlackboardValueFloat
{
	NMS::NMSString0x10 Key;
	float Value;

	friend bool operator==(const TkBlackboardValueFloat& lhs, const TkBlackboardValueFloat& rhs) 
	{
		return lhs.Key == rhs.Key &&
		lhs.Value == rhs.Value;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcProceduralTextureColourIndices
{
	int32_t Alts[8];

	friend bool operator==(const GcProceduralTextureColourIndices& lhs, const GcProceduralTextureColourIndices& rhs) 
	{
		return std::equal(std::begin(lhs.Alts), std::end(lhs.Alts), std::begin(rhs.Alts));
	}
};

struct GcMaintenanceElementGroups
{
	enum class MaintenanceGroupEnum : uint32_t
	{
		Custom = 0,
		Farming = 1,
		Fuelling = 2,
		Repairing = 3,
		EasyRepairing = 4,
		Cleaning = 5,
		Frigate = 6,
		Sentinels = 7,
		Runes = 8,
		RobotHeads = 9,
	};

	NMS_GameComponents::GcMaintenanceElementGroups::MaintenanceGroupEnum MaintenanceGroup;

	friend bool operator==(const GcMaintenanceElementGroups& lhs, const GcMaintenanceElementGroups& rhs) 
	{
		return lhs.MaintenanceGroup == rhs.MaintenanceGroup;
	}
};

//Dependency: GcMaintenanceElementGroups
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
struct GcMaintenanceGroupInstallData
{
	NMS::NMSString0x20A InstallSubtitle;
	NMS::NMSString0x20A InstallTitle;
	NMS::NMSString0x20A UninstallSubtitle;
	NMS::NMSString0x20A UninstallTitle;
	int32_t BuildingSeedOffset;
	NMS_GameComponents::GcMaintenanceElementGroups ItemGroupOverride;
	NMS_GameComponents::GcAudioWwiseEvents OverrideAudioID;
	bool DismantleIsDelete;
	bool HideChargingInfo;
	bool InstallIsFree;

	friend bool operator==(const GcMaintenanceGroupInstallData& lhs, const GcMaintenanceGroupInstallData& rhs) 
	{
		return lhs.InstallSubtitle == rhs.InstallSubtitle &&
		lhs.InstallTitle == rhs.InstallTitle &&
		lhs.UninstallSubtitle == rhs.UninstallSubtitle &&
		lhs.UninstallTitle == rhs.UninstallTitle &&
		lhs.BuildingSeedOffset == rhs.BuildingSeedOffset &&
		lhs.ItemGroupOverride == rhs.ItemGroupOverride &&
		lhs.OverrideAudioID == rhs.OverrideAudioID &&
		lhs.DismantleIsDelete == rhs.DismantleIsDelete &&
		lhs.HideChargingInfo == rhs.HideChargingInfo &&
		lhs.InstallIsFree == rhs.InstallIsFree;
	}
};

struct GcBroadcastLevel
{
	enum class BroadcastLevelEnum : uint32_t
	{
		Scene = 0,
		LocalModel = 1,
		Local = 2,
	};

	NMS_GameComponents::GcBroadcastLevel::BroadcastLevelEnum BroadcastLevel;

	friend bool operator==(const GcBroadcastLevel& lhs, const GcBroadcastLevel& rhs) 
	{
		return lhs.BroadcastLevel == rhs.BroadcastLevel;
	}
};

//Dependency: GcMaintenanceElementGroups
//Dependency: GcInventoryType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMaintenanceElement
{
	enum class UpdateTypeEnum : uint32_t
	{
		UpdatesAlways = 0,
		UpdateOnlyWhenComplete = 1,
		UpdateOnlyWhenNotComplete = 2,
	};

	enum class DamageStatusEnum : uint32_t
	{
		Damaged = 0,
		Repaired = 1,
		Random = 2,
	};

	enum class CompletionRequirementEnum : uint32_t
	{
		FullyChargedAndRepaired = 0,
		AnyChargeAndRepaired = 1,
		FullyRepaired = 2,
		NotFullyCharged = 3,
		EmptySlot = 4,
		NoRequirement = 5,
		UserInstalls = 6,
		HasIngredients = 7,
		GroupInstall = 8,
	};

	NMS::NMSString0x20A LocatorOverride;
	NMS::NMSString0x10 Id;
	float AmountEmptyTimePeriod;
	NMS_GameComponents::GcMaintenanceElement::CompletionRequirementEnum CompletionRequirement;
	int32_t DamagedAfterTimePeriodMax;
	int32_t DamagedAfterTimePeriodMin;
	NMS_GameComponents::GcMaintenanceElement::DamageStatusEnum DamageStatus;
	NMS_GameComponents::GcMaintenanceElementGroups ItemGroupOverride;
	int32_t MaxCapacity;
	float MaxRandAmount;
	float MinRandAmount;
	NMS_GameComponents::GcInventoryType Type;
	NMS_GameComponents::GcMaintenanceElement::UpdateTypeEnum UpdateType;
	bool BlockDiscardWhenAllowedForParent;
	bool HideWhenComplete;

	friend bool operator==(const GcMaintenanceElement& lhs, const GcMaintenanceElement& rhs) 
	{
		return lhs.LocatorOverride == rhs.LocatorOverride &&
		lhs.Id == rhs.Id &&
		lhs.AmountEmptyTimePeriod == rhs.AmountEmptyTimePeriod &&
		lhs.CompletionRequirement == rhs.CompletionRequirement &&
		lhs.DamagedAfterTimePeriodMax == rhs.DamagedAfterTimePeriodMax &&
		lhs.DamagedAfterTimePeriodMin == rhs.DamagedAfterTimePeriodMin &&
		lhs.DamageStatus == rhs.DamageStatus &&
		lhs.ItemGroupOverride == rhs.ItemGroupOverride &&
		lhs.MaxCapacity == rhs.MaxCapacity &&
		lhs.MaxRandAmount == rhs.MaxRandAmount &&
		lhs.MinRandAmount == rhs.MinRandAmount &&
		lhs.Type == rhs.Type &&
		lhs.UpdateType == rhs.UpdateType &&
		lhs.BlockDiscardWhenAllowedForParent == rhs.BlockDiscardWhenAllowedForParent &&
		lhs.HideWhenComplete == rhs.HideWhenComplete;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCameraWanderData
{
	float CamWanderAmplitude;
	float CamWanderPhase;
	bool CamWander;

	friend bool operator==(const TkCameraWanderData& lhs, const TkCameraWanderData& rhs) 
	{
		return lhs.CamWanderAmplitude == rhs.CamWanderAmplitude &&
		lhs.CamWanderPhase == rhs.CamWanderPhase &&
		lhs.CamWander == rhs.CamWander;
	}
};

//Dependency: TkCameraWanderData
//Dependency: Vector3f
struct TkModelRendererCameraData
{
	NMS::Vector3f Offset;
	NMS_Toolkit::TkCameraWanderData Wander;
	float Distance;
	float LightPitch;
	float LightRotate;
	float Pitch;
	float Roll;
	float Rotate;

	friend bool operator==(const TkModelRendererCameraData& lhs, const TkModelRendererCameraData& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.Wander == rhs.Wander &&
		lhs.Distance == rhs.Distance &&
		lhs.LightPitch == rhs.LightPitch &&
		lhs.LightRotate == rhs.LightRotate &&
		lhs.Pitch == rhs.Pitch &&
		lhs.Roll == rhs.Roll &&
		lhs.Rotate == rhs.Rotate;
	}
};

//Dependency: TkModelRendererCameraData
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkModelRendererData
{
	enum class ThumbnailModeEnum : uint32_t
	{
		None = 0,
		HUD = 1,
		GUI = 2,
	};

	enum class FocusTypeEnum : uint32_t
	{
		ResourceBounds = 0,
		ResourceBoundingHeight = 1,
		NodeBoundingBox = 2,
		DiscoveryView = 3,
	};

	NMS_Toolkit::TkModelRendererCameraData Camera;
	NMS::Vector3f FocusOffset;
	NMS::NMSString0x20A FocusLocator;
	NMS::NMSString0x10 Anim;
	float AspectRatio;
	float BlendInOffset;
	float BlendInTime;
	float FocusInterpTime;
	NMS_Toolkit::TkModelRendererData::FocusTypeEnum FocusType;
	float Fov;
	float HeightOffset;
	float LightIntensityMultiplier;
	NMS_Toolkit::TkModelRendererData::ThumbnailModeEnum ThumbnailMode;
	bool AlignUIToCameraInHmd;
	bool FlipRotationIfNecessary;
	bool LookForFocusInMasterModel;
	bool UsePlayerCameraInHmd;
	bool UseSensibleCameraFocusNodeIsNowOffsetNode;

	friend bool operator==(const TkModelRendererData& lhs, const TkModelRendererData& rhs) 
	{
		return lhs.Camera == rhs.Camera &&
		lhs.FocusOffset == rhs.FocusOffset &&
		lhs.FocusLocator == rhs.FocusLocator &&
		lhs.Anim == rhs.Anim &&
		lhs.AspectRatio == rhs.AspectRatio &&
		lhs.BlendInOffset == rhs.BlendInOffset &&
		lhs.BlendInTime == rhs.BlendInTime &&
		lhs.FocusInterpTime == rhs.FocusInterpTime &&
		lhs.FocusType == rhs.FocusType &&
		lhs.Fov == rhs.Fov &&
		lhs.HeightOffset == rhs.HeightOffset &&
		lhs.LightIntensityMultiplier == rhs.LightIntensityMultiplier &&
		lhs.ThumbnailMode == rhs.ThumbnailMode &&
		lhs.AlignUIToCameraInHmd == rhs.AlignUIToCameraInHmd &&
		lhs.FlipRotationIfNecessary == rhs.FlipRotationIfNecessary &&
		lhs.LookForFocusInMasterModel == rhs.LookForFocusInMasterModel &&
		lhs.UsePlayerCameraInHmd == rhs.UsePlayerCameraInHmd &&
		lhs.UseSensibleCameraFocusNodeIsNowOffsetNode == rhs.UseSensibleCameraFocusNodeIsNowOffsetNode;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcMaintenanceGroupInstallData
//Dependency: GcBroadcastLevel
//Dependency: GcMaintenanceElement
//Dependency: TkModelRendererData
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcMaintenanceComponentData
{
	enum class ModelRendererResourceEnum : uint32_t
	{
		ModelNode = 0,
		MasterModelNode = 1,
	};

	enum class InteractableEnum : uint32_t
	{
		OnlyWhenComplete = 0,
		OnlyWhenNotComplete = 1,
		Always = 2,
		Never = 3,
	};

	NMS_Toolkit::TkModelRendererData ModelRenderData;
	NMS_Toolkit::TkModelRendererData ModelRenderDataAlt;
	NMS_GameComponents::GcMaintenanceGroupInstallData GroupInstallSetup;
	NMS::NMSString0x20A ActionButtonOverride;
	NMS::NMSString0x20A ActionDescriptionOverride;
	NMS::NMSString0x20A ActionWarningOverride;
	NMS::NMSString0x20A ChargeButtonOverride;
	NMS::NMSString0x20A ChargeDescriptionOverride;
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A DiscardButtonOverride;
	NMS::NMSString0x20A DiscardDescriptionOverride;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A TransferButtonOverride;
	NMS::NMSString0x20A TransferDescriptionOverride;
	std::vector<NMS::NMSString0x10> ForceDamageDuringMissions;
	NMS::NMSString0x10 GiveRewardOnCompletion;
	std::vector<NMS_GameComponents::GcMaintenanceElement> PreInstalledTech;
	NMS::NMSString0x10 StartMissionOnCompletion;
	NMS::NMSString0x10 StartMissionOnUse;
	NMS::Vector2f CustomIconCentre;
	NMS_GameComponents::GcAudioWwiseEvents AudioIDOnSuccess;
	NMS_GameComponents::GcBroadcastLevel BroadcastLevel;
	float CompletedTransitionDelay;
	NMS_GameComponents::GcMaintenanceComponentData::InteractableEnum Interactable;
	float InWorldUIForcedOffset;
	float InWorldUIForcedOffsetV2;
	float InWorldUIMinDistOverride;
	float InWorldUIMinDistOverrideV2;
	float InWorldUIScaler;
	NMS_GameComponents::GcMaintenanceComponentData::ModelRendererResourceEnum ModelRendererResource;
	int32_t VisibleMaintenanceSlots;
	bool AllowCharge;
	bool AllowCraftProduct;
	bool AllowDiscard;
	bool AllowDismantle;
	bool AllowInstallTech;
	bool AllowMoveAndStack;
	bool AllowPinning;
	bool AllowRepair;
	bool AllowTransfer;
	bool AllowTransferIn;
	bool AutoCompleteOnStart;
	bool CanUseOutsideOfBase;
	bool DisableSynchronise;
	bool ForceNoninteraction;
	bool ForceOneClickRepair;
	bool ForceRemoveUIRenderLayer;
	bool HideMaxAmountOnProductSlots;
	bool InteractionRequiresPower;
	bool InWorldUIUseCameraUp;
	bool OpenInteractionOnQuit;
	bool ShareInteractionModelRender;
	bool SilenceSuitVOIAlerts;
	bool UseBoundsForIconCentre;
	bool UseInteractionStyleCameraEvent;
	bool UseModelResourceRenderer;
	bool UseNetworkLock;

	friend bool operator==(const GcMaintenanceComponentData& lhs, const GcMaintenanceComponentData& rhs) 
	{
		return lhs.ModelRenderData == rhs.ModelRenderData &&
		lhs.ModelRenderDataAlt == rhs.ModelRenderDataAlt &&
		lhs.GroupInstallSetup == rhs.GroupInstallSetup &&
		lhs.ActionButtonOverride == rhs.ActionButtonOverride &&
		lhs.ActionDescriptionOverride == rhs.ActionDescriptionOverride &&
		lhs.ActionWarningOverride == rhs.ActionWarningOverride &&
		lhs.ChargeButtonOverride == rhs.ChargeButtonOverride &&
		lhs.ChargeDescriptionOverride == rhs.ChargeDescriptionOverride &&
		lhs.Description == rhs.Description &&
		lhs.DiscardButtonOverride == rhs.DiscardButtonOverride &&
		lhs.DiscardDescriptionOverride == rhs.DiscardDescriptionOverride &&
		lhs.Title == rhs.Title &&
		lhs.TransferButtonOverride == rhs.TransferButtonOverride &&
		lhs.TransferDescriptionOverride == rhs.TransferDescriptionOverride &&
		lhs.ForceDamageDuringMissions == rhs.ForceDamageDuringMissions &&
		lhs.GiveRewardOnCompletion == rhs.GiveRewardOnCompletion &&
		lhs.PreInstalledTech == rhs.PreInstalledTech &&
		lhs.StartMissionOnCompletion == rhs.StartMissionOnCompletion &&
		lhs.StartMissionOnUse == rhs.StartMissionOnUse &&
		lhs.CustomIconCentre == rhs.CustomIconCentre &&
		lhs.AudioIDOnSuccess == rhs.AudioIDOnSuccess &&
		lhs.BroadcastLevel == rhs.BroadcastLevel &&
		lhs.CompletedTransitionDelay == rhs.CompletedTransitionDelay &&
		lhs.Interactable == rhs.Interactable &&
		lhs.InWorldUIForcedOffset == rhs.InWorldUIForcedOffset &&
		lhs.InWorldUIForcedOffsetV2 == rhs.InWorldUIForcedOffsetV2 &&
		lhs.InWorldUIMinDistOverride == rhs.InWorldUIMinDistOverride &&
		lhs.InWorldUIMinDistOverrideV2 == rhs.InWorldUIMinDistOverrideV2 &&
		lhs.InWorldUIScaler == rhs.InWorldUIScaler &&
		lhs.ModelRendererResource == rhs.ModelRendererResource &&
		lhs.VisibleMaintenanceSlots == rhs.VisibleMaintenanceSlots &&
		lhs.AllowCharge == rhs.AllowCharge &&
		lhs.AllowCraftProduct == rhs.AllowCraftProduct &&
		lhs.AllowDiscard == rhs.AllowDiscard &&
		lhs.AllowDismantle == rhs.AllowDismantle &&
		lhs.AllowInstallTech == rhs.AllowInstallTech &&
		lhs.AllowMoveAndStack == rhs.AllowMoveAndStack &&
		lhs.AllowPinning == rhs.AllowPinning &&
		lhs.AllowRepair == rhs.AllowRepair &&
		lhs.AllowTransfer == rhs.AllowTransfer &&
		lhs.AllowTransferIn == rhs.AllowTransferIn &&
		lhs.AutoCompleteOnStart == rhs.AutoCompleteOnStart &&
		lhs.CanUseOutsideOfBase == rhs.CanUseOutsideOfBase &&
		lhs.DisableSynchronise == rhs.DisableSynchronise &&
		lhs.ForceNoninteraction == rhs.ForceNoninteraction &&
		lhs.ForceOneClickRepair == rhs.ForceOneClickRepair &&
		lhs.ForceRemoveUIRenderLayer == rhs.ForceRemoveUIRenderLayer &&
		lhs.HideMaxAmountOnProductSlots == rhs.HideMaxAmountOnProductSlots &&
		lhs.InteractionRequiresPower == rhs.InteractionRequiresPower &&
		lhs.InWorldUIUseCameraUp == rhs.InWorldUIUseCameraUp &&
		lhs.OpenInteractionOnQuit == rhs.OpenInteractionOnQuit &&
		lhs.ShareInteractionModelRender == rhs.ShareInteractionModelRender &&
		lhs.SilenceSuitVOIAlerts == rhs.SilenceSuitVOIAlerts &&
		lhs.UseBoundsForIconCentre == rhs.UseBoundsForIconCentre &&
		lhs.UseInteractionStyleCameraEvent == rhs.UseInteractionStyleCameraEvent &&
		lhs.UseModelResourceRenderer == rhs.UseModelResourceRenderer &&
		lhs.UseNetworkLock == rhs.UseNetworkLock;
	}
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x100
struct GcCreatureFeederComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	std::vector<NMS::NMSString0x100> DispenseNodes;
	float DispensePeriod;
	float DispenseVelocity;
	int32_t NumInputs;
	int32_t NumMealsPerBait;

	friend bool operator==(const GcCreatureFeederComponentData& lhs, const GcCreatureFeederComponentData& rhs) 
	{
		return lhs.MaintenanceData == rhs.MaintenanceData &&
		lhs.DispenseNodes == rhs.DispenseNodes &&
		lhs.DispensePeriod == rhs.DispensePeriod &&
		lhs.DispenseVelocity == rhs.DispenseVelocity &&
		lhs.NumInputs == rhs.NumInputs &&
		lhs.NumMealsPerBait == rhs.NumMealsPerBait;
	}
};

struct GcGalaxyStarAnomaly
{
	enum class GalaxyStarAnomalyEnum : uint32_t
	{
		None = 0,
		AtlasStation = 1,
		AtlasStationFinal = 2,
		BlackHole = 3,
		MiniStation = 4,
	};

	NMS_GameComponents::GcGalaxyStarAnomaly::GalaxyStarAnomalyEnum GalaxyStarAnomaly;

	friend bool operator==(const GcGalaxyStarAnomaly& lhs, const GcGalaxyStarAnomaly& rhs) 
	{
		return lhs.GalaxyStarAnomaly == rhs.GalaxyStarAnomaly;
	}
};

//Dependency: GcGalaxyStarAnomaly
struct GcMissionConditionIsAnomalyLoaded
{
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;

	friend bool operator==(const GcMissionConditionIsAnomalyLoaded& lhs, const GcMissionConditionIsAnomalyLoaded& rhs) 
	{
		return lhs.Anomaly == rhs.Anomaly;
	}
};

struct GcAIShipWeapons
{
	enum class AIShipWeaponEnum : uint32_t
	{
		Projectile = 0,
		Laser = 1,
		MiningLaser = 2,
	};

	NMS_GameComponents::GcAIShipWeapons::AIShipWeaponEnum AIShipWeapon;

	friend bool operator==(const GcAIShipWeapons& lhs, const GcAIShipWeapons& rhs) 
	{
		return lhs.AIShipWeapon == rhs.AIShipWeapon;
	}
};

//Dependency: GcPrimaryAxis
//Dependency: GcSpaceshipClasses
//Dependency: GcAISpaceshipTypes
//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcAISpaceshipComponentData
{
	NMS_Toolkit::TkModelResource Hangar;
	NMS::NMSString0x10 CombatDefinitionID;
	NMS_GameComponents::GcPrimaryAxis Axis;
	NMS_GameComponents::GcSpaceshipClasses Class;
	NMS_GameComponents::GcAISpaceshipTypes Type;
	bool IsSpaceAnomaly;

	friend bool operator==(const GcAISpaceshipComponentData& lhs, const GcAISpaceshipComponentData& rhs) 
	{
		return lhs.Hangar == rhs.Hangar &&
		lhs.CombatDefinitionID == rhs.CombatDefinitionID &&
		lhs.Axis == rhs.Axis &&
		lhs.Class == rhs.Class &&
		lhs.Type == rhs.Type &&
		lhs.IsSpaceAnomaly == rhs.IsSpaceAnomaly;
	}
};

struct GcDifficultyPresetType
{
	enum class DifficultyPresetTypeEnum : uint32_t
	{
		Invalid = 0,
		Custom = 1,
		Normal = 2,
		Creative = 3,
		Relaxed = 4,
		Survival = 5,
		Permadeath = 6,
	};

	NMS_GameComponents::GcDifficultyPresetType::DifficultyPresetTypeEnum DifficultyPresetType;

	friend bool operator==(const GcDifficultyPresetType& lhs, const GcDifficultyPresetType& rhs) 
	{
		return lhs.DifficultyPresetType == rhs.DifficultyPresetType;
	}
};

//Dependency: GcDifficultyPresetType
struct GcPersistentBaseDifficultyData
{
	enum class PersistentBaseDifficultyFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_GameComponents::GcDifficultyPresetType DifficultyPreset;
	NMS_GameComponents::GcPersistentBaseDifficultyData::PersistentBaseDifficultyFlagsEnum PersistentBaseDifficultyFlags;

	friend bool operator==(const GcPersistentBaseDifficultyData& lhs, const GcPersistentBaseDifficultyData& rhs) 
	{
		return lhs.DifficultyPreset == rhs.DifficultyPreset &&
		lhs.PersistentBaseDifficultyFlags == rhs.PersistentBaseDifficultyFlags;
	}
};

//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessageCrime
{
	enum class CrimeEnum : uint32_t
	{
		AttackCreature = 0,
		AttackSentinel = 1,
		AttackSentinelLaser = 2,
		KillCreature = 3,
		KillSentinel = 4,
		MineResources = 5,
		HitResources = 6,
		AttackSpaceStation = 7,
		AttackShip = 8,
		AttackPolice = 9,
		KillShip = 10,
		KillPolice = 11,
		TimedShootable = 12,
	};

	NMS::Vector3f Position;
	NMS_GameComponents::GcMessageCrime::CrimeEnum Crime;
	NMS::GcNodeID Criminal;
	int32_t Value;
	NMS::GcNodeID Victim;

	friend bool operator==(const GcMessageCrime& lhs, const GcMessageCrime& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Crime == rhs.Crime &&
		lhs.Criminal == rhs.Criminal &&
		lhs.Value == rhs.Value &&
		lhs.Victim == rhs.Victim;
	}
};

struct GcCostShipUpgradeable
{

	friend bool operator==(const GcCostShipUpgradeable& lhs, const GcCostShipUpgradeable& rhs) 
	{
		return true;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSettlementActivity
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageForConflict;
	NMS::VariableSizeString MessageForProposal;
	NMS::VariableSizeString MessageForVisitor;
	NMS::VariableSizeString MessageWhileBuilding;

	friend bool operator==(const GcMissionSequenceWaitForSettlementActivity& lhs, const GcMissionSequenceWaitForSettlementActivity& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageForConflict == rhs.MessageForConflict &&
		lhs.MessageForProposal == rhs.MessageForProposal &&
		lhs.MessageForVisitor == rhs.MessageForVisitor &&
		lhs.MessageWhileBuilding == rhs.MessageWhileBuilding;
	}
};

struct GcGalaxyCameraData
{
	float CameraFOV;
	float CameraShakeDriftClip;
	float CameraShakeDriftShift;
	float CameraShakeMaximum;
	float CameraShakeSmoothingRate;
	float FixedZoomRate;
	float FreeElevationBlendRate;
	float FreePanSpeed;
	float FreePanSpeedTurbo;
	float FreeRotateSpeed;
	float FreeUpDownSpeed;
	float FreeUpDownSpeedTurbo;
	float LockTransitionRate;
	float LockedScaledElevationSpeed;
	float LockedScaledPushSpeed;
	float LockedSpinSpeed;
	float MaxZoomDistance;
	float MinPushingZoomDistance;
	float MinPushingZoomDistanceScaler;
	float MinZoomDistance;
	float MovementBlendRateFree;
	float MovementBlendRateLocked;
	float MovementBlendRateLookLocked;
	float ZoomInRate;
	float ZoomOutElevation;
	float ZoomOutPushDist;
	float ZoomOutRate;
	float ZoomOutSpin;

	friend bool operator==(const GcGalaxyCameraData& lhs, const GcGalaxyCameraData& rhs) 
	{
		return lhs.CameraFOV == rhs.CameraFOV &&
		lhs.CameraShakeDriftClip == rhs.CameraShakeDriftClip &&
		lhs.CameraShakeDriftShift == rhs.CameraShakeDriftShift &&
		lhs.CameraShakeMaximum == rhs.CameraShakeMaximum &&
		lhs.CameraShakeSmoothingRate == rhs.CameraShakeSmoothingRate &&
		lhs.FixedZoomRate == rhs.FixedZoomRate &&
		lhs.FreeElevationBlendRate == rhs.FreeElevationBlendRate &&
		lhs.FreePanSpeed == rhs.FreePanSpeed &&
		lhs.FreePanSpeedTurbo == rhs.FreePanSpeedTurbo &&
		lhs.FreeRotateSpeed == rhs.FreeRotateSpeed &&
		lhs.FreeUpDownSpeed == rhs.FreeUpDownSpeed &&
		lhs.FreeUpDownSpeedTurbo == rhs.FreeUpDownSpeedTurbo &&
		lhs.LockTransitionRate == rhs.LockTransitionRate &&
		lhs.LockedScaledElevationSpeed == rhs.LockedScaledElevationSpeed &&
		lhs.LockedScaledPushSpeed == rhs.LockedScaledPushSpeed &&
		lhs.LockedSpinSpeed == rhs.LockedSpinSpeed &&
		lhs.MaxZoomDistance == rhs.MaxZoomDistance &&
		lhs.MinPushingZoomDistance == rhs.MinPushingZoomDistance &&
		lhs.MinPushingZoomDistanceScaler == rhs.MinPushingZoomDistanceScaler &&
		lhs.MinZoomDistance == rhs.MinZoomDistance &&
		lhs.MovementBlendRateFree == rhs.MovementBlendRateFree &&
		lhs.MovementBlendRateLocked == rhs.MovementBlendRateLocked &&
		lhs.MovementBlendRateLookLocked == rhs.MovementBlendRateLookLocked &&
		lhs.ZoomInRate == rhs.ZoomInRate &&
		lhs.ZoomOutElevation == rhs.ZoomOutElevation &&
		lhs.ZoomOutPushDist == rhs.ZoomOutPushDist &&
		lhs.ZoomOutRate == rhs.ZoomOutRate &&
		lhs.ZoomOutSpin == rhs.ZoomOutSpin;
	}
};

//Dependency: GcCreaturePetTraits
struct GcPetBehaviourTraitModifier
{
	float CooldownModifierMax;
	float CooldownModifierMin;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;
	float WeightModifierMax;
	float WeightModifierMin;

	friend bool operator==(const GcPetBehaviourTraitModifier& lhs, const GcPetBehaviourTraitModifier& rhs) 
	{
		return lhs.CooldownModifierMax == rhs.CooldownModifierMax &&
		lhs.CooldownModifierMin == rhs.CooldownModifierMin &&
		lhs.Trait == rhs.Trait &&
		lhs.TraitMax == rhs.TraitMax &&
		lhs.TraitMin == rhs.TraitMin &&
		lhs.WeightModifierMax == rhs.WeightModifierMax &&
		lhs.WeightModifierMin == rhs.WeightModifierMin;
	}
};

struct GcLegality
{
	enum class LegalityEnum : uint32_t
	{
		Legal = 0,
		Illegal = 1,
	};

	NMS_GameComponents::GcLegality::LegalityEnum Legality;

	friend bool operator==(const GcLegality& lhs, const GcLegality& rhs) 
	{
		return lhs.Legality == rhs.Legality;
	}
};

struct GcAISpaceshipWeightingData
{
	float CivilianClassWeightings[10];

	friend bool operator==(const GcAISpaceshipWeightingData& lhs, const GcAISpaceshipWeightingData& rhs) 
	{
		return std::equal(std::begin(lhs.CivilianClassWeightings), std::end(lhs.CivilianClassWeightings), std::begin(rhs.CivilianClassWeightings));
	}
};

//Dependency: NMSString0x20A
struct GcNPCProbabilityWordReactionData
{
	NMS::NMSString0x20A NextInteraction;
	float Probability;

	friend bool operator==(const GcNPCProbabilityWordReactionData& lhs, const GcNPCProbabilityWordReactionData& rhs) 
	{
		return lhs.NextInteraction == rhs.NextInteraction &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: GcNPCProbabilityWordReactionData
struct GcNPCWordReactionList
{
	std::vector<NMS_GameComponents::GcNPCProbabilityWordReactionData> Reactions;

	friend bool operator==(const GcNPCWordReactionList& lhs, const GcNPCWordReactionList& rhs) 
	{
		return lhs.Reactions == rhs.Reactions;
	}
};

//Dependency: NMSString0x10
struct GcFreighterDungeonChoice
{
	NMS::NMSString0x10 Name;
	float Weighting;

	friend bool operator==(const GcFreighterDungeonChoice& lhs, const GcFreighterDungeonChoice& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Weighting == rhs.Weighting;
	}
};

//Dependency: GcFreighterDungeonChoice
//Dependency: TkModelResource
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcAbandonedFreighterComponentData
{
	NMS_Toolkit::TkModelResource DungeonRootScene;
	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	std::vector<NMS_GameComponents::GcFreighterDungeonChoice> DungeonOptions;

	friend bool operator==(const GcAbandonedFreighterComponentData& lhs, const GcAbandonedFreighterComponentData& rhs) 
	{
		return lhs.DungeonRootScene == rhs.DungeonRootScene &&
		lhs.MarkerLabel == rhs.MarkerLabel &&
		lhs.MarkerIcon == rhs.MarkerIcon &&
		lhs.DungeonOptions == rhs.DungeonOptions;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationTextureOption
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;
	std::vector<NMS::NMSString0x20A> Options;
	std::vector<NMS::NMSString0x10> ProductsToUnlock;
	NMS::NMSString0x10 TextureOptionsID;
	std::vector<NMS::NMSString0x20A> Tips;

	friend bool operator==(const GcCustomisationTextureOption& lhs, const GcCustomisationTextureOption& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.Layer == rhs.Layer &&
		lhs.Options == rhs.Options &&
		lhs.ProductsToUnlock == rhs.ProductsToUnlock &&
		lhs.TextureOptionsID == rhs.TextureOptionsID &&
		lhs.Tips == rhs.Tips;
	}
};

//Dependency: GcCustomisationMultiTextureOption
//Dependency: GcCustomisationTextureOption
struct GcCustomisationTextureOptions
{
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureOption> MultiTextureOptions;
	std::vector<NMS_GameComponents::GcCustomisationTextureOption> TextureOptions;

	friend bool operator==(const GcCustomisationTextureOptions& lhs, const GcCustomisationTextureOptions& rhs) 
	{
		return lhs.MultiTextureOptions == rhs.MultiTextureOptions &&
		lhs.TextureOptions == rhs.TextureOptions;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterTrigger
{
	NMS::NMSString0x10 Name;
	bool Default;

	friend bool operator==(const TkAnimStateMachineParameterTrigger& lhs, const TkAnimStateMachineParameterTrigger& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Default == rhs.Default;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceEndScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceEndScanEvent& lhs, const GcMissionSequenceEndScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.DebugText == rhs.DebugText;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNGuiAlignment
//Dependency: Colour32
struct TkNGuiTextStyleData
{
	float DropShadowAngle;
	float DropShadowOffset;
	float FontHeight;
	int32_t FontIndex;
	float FontSpacing;
	float OutlineSize;
	NMS::Colour32 Colour;
	NMS::Colour32 OutlineColour;
	NMS::Colour32 ShadowColour;
	NMS_Toolkit::TkNGuiAlignment Align;
	bool AllowScroll;
	bool AutoAdjustFontHeight;
	bool AutoAdjustHeight;
	bool BlockAudio;
	bool BypassStyleColours;
	bool BypassStyleFont;
	bool BypassStyleFontHeight;
	bool ForceUpperCase;
	bool HasDropShadow;
	bool HasOutline;
	bool IsIndented;
	bool IsParagraph;

	friend bool operator==(const TkNGuiTextStyleData& lhs, const TkNGuiTextStyleData& rhs) 
	{
		return lhs.DropShadowAngle == rhs.DropShadowAngle &&
		lhs.DropShadowOffset == rhs.DropShadowOffset &&
		lhs.FontHeight == rhs.FontHeight &&
		lhs.FontIndex == rhs.FontIndex &&
		lhs.FontSpacing == rhs.FontSpacing &&
		lhs.OutlineSize == rhs.OutlineSize &&
		lhs.Colour == rhs.Colour &&
		lhs.OutlineColour == rhs.OutlineColour &&
		lhs.ShadowColour == rhs.ShadowColour &&
		lhs.Align == rhs.Align &&
		lhs.AllowScroll == rhs.AllowScroll &&
		lhs.AutoAdjustFontHeight == rhs.AutoAdjustFontHeight &&
		lhs.AutoAdjustHeight == rhs.AutoAdjustHeight &&
		lhs.BlockAudio == rhs.BlockAudio &&
		lhs.BypassStyleColours == rhs.BypassStyleColours &&
		lhs.BypassStyleFont == rhs.BypassStyleFont &&
		lhs.BypassStyleFontHeight == rhs.BypassStyleFontHeight &&
		lhs.ForceUpperCase == rhs.ForceUpperCase &&
		lhs.HasDropShadow == rhs.HasDropShadow &&
		lhs.HasOutline == rhs.HasOutline &&
		lhs.IsIndented == rhs.IsIndented &&
		lhs.IsParagraph == rhs.IsParagraph;
	}
};

//Dependency: TkNGuiTextStyleData
struct TkNGuiTextStyle
{
	NMS_Toolkit::TkNGuiTextStyleData Active;
	NMS_Toolkit::TkNGuiTextStyleData Default;
	NMS_Toolkit::TkNGuiTextStyleData Highlight;

	friend bool operator==(const TkNGuiTextStyle& lhs, const TkNGuiTextStyle& rhs) 
	{
		return lhs.Active == rhs.Active &&
		lhs.Default == rhs.Default &&
		lhs.Highlight == rhs.Highlight;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiLayoutData
//Dependency: TkNGuiGraphicStyle
//Dependency: TkNGuiTextStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiPresetText
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::VariableSizeString Image;
	NMS::NMSString0x10 PresetID;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyle;
	NMS_Toolkit::TkNGuiTextStyle Style;

	friend bool operator==(const GcNGuiPresetText& lhs, const GcNGuiPresetText& rhs) 
	{
		return lhs.Layout == rhs.Layout &&
		lhs.Image == rhs.Image &&
		lhs.PresetID == rhs.PresetID &&
		lhs.GraphicStyle == rhs.GraphicStyle &&
		lhs.Style == rhs.Style;
	}
};

//Dependency: NMSString0x10
struct GcFishingRodData
{
	NMS::NMSString0x10 DescriptorGroupID;
	NMS::NMSString0x10 TechID;

	friend bool operator==(const GcFishingRodData& lhs, const GcFishingRodData& rhs) 
	{
		return lhs.DescriptorGroupID == rhs.DescriptorGroupID &&
		lhs.TechID == rhs.TechID;
	}
};

struct GcCreatureGenerationDensity
{
	enum class DensityEnum : uint32_t
	{
		Sparse = 0,
		Normal = 1,
		Dense = 2,
		VeryDense = 3,
	};

	NMS_GameComponents::GcCreatureGenerationDensity::DensityEnum Density;

	friend bool operator==(const GcCreatureGenerationDensity& lhs, const GcCreatureGenerationDensity& rhs) 
	{
		return lhs.Density == rhs.Density;
	}
};

//Dependency: GcCreatureGenerationDensity
//Dependency: VariableSizeString
struct GcCreatureGenerationDomainEntry
{
	NMS::VariableSizeString File;
	NMS_GameComponents::GcCreatureGenerationDensity DensityModifier;

	friend bool operator==(const GcCreatureGenerationDomainEntry& lhs, const GcCreatureGenerationDomainEntry& rhs) 
	{
		return lhs.File == rhs.File &&
		lhs.DensityModifier == rhs.DensityModifier;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcSentinelQuadWeaponData
{
	NMS::NMSString0x10 ChargingIdleAnimId;
	NMS::NMSString0x10 FiringIdleAnimId;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LaunchProjectileAnimId;
	NMS::NMSString0x10 MuzzleFlashEffect;
	NMS::NMSString0x10 ProjectileId;
	float ChargeLightIntensity;
	float ChargeTime;
	float ExplosionRadius;
	float FireInterval;
	float FireTimeMax;
	float FireTimeMin;
	float InheritInitialVelocity;
	float MaxAttackAngle;
	float MaxRange;
	float MinRange;
	int32_t NumProjectiles;
	int32_t NumShotsMax;
	int32_t NumShotsMin;
	float ProjectileSpread;
	NMS_GameComponents::GcAudioWwiseEvents StartFireAudioEvent;
	NMS_GameComponents::GcAudioWwiseEvents StopFireAudioEvent;
	float Timeout;
	NMS::NMSString0x20 ShootLocatorName;

	friend bool operator==(const GcSentinelQuadWeaponData& lhs, const GcSentinelQuadWeaponData& rhs) 
	{
		return lhs.ChargingIdleAnimId == rhs.ChargingIdleAnimId &&
		lhs.FiringIdleAnimId == rhs.FiringIdleAnimId &&
		lhs.Id == rhs.Id &&
		lhs.LaunchProjectileAnimId == rhs.LaunchProjectileAnimId &&
		lhs.MuzzleFlashEffect == rhs.MuzzleFlashEffect &&
		lhs.ProjectileId == rhs.ProjectileId &&
		lhs.ChargeLightIntensity == rhs.ChargeLightIntensity &&
		lhs.ChargeTime == rhs.ChargeTime &&
		lhs.ExplosionRadius == rhs.ExplosionRadius &&
		lhs.FireInterval == rhs.FireInterval &&
		lhs.FireTimeMax == rhs.FireTimeMax &&
		lhs.FireTimeMin == rhs.FireTimeMin &&
		lhs.InheritInitialVelocity == rhs.InheritInitialVelocity &&
		lhs.MaxAttackAngle == rhs.MaxAttackAngle &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.MinRange == rhs.MinRange &&
		lhs.NumProjectiles == rhs.NumProjectiles &&
		lhs.NumShotsMax == rhs.NumShotsMax &&
		lhs.NumShotsMin == rhs.NumShotsMin &&
		lhs.ProjectileSpread == rhs.ProjectileSpread &&
		lhs.StartFireAudioEvent == rhs.StartFireAudioEvent &&
		lhs.StopFireAudioEvent == rhs.StopFireAudioEvent &&
		lhs.Timeout == rhs.Timeout &&
		lhs.ShootLocatorName == rhs.ShootLocatorName;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationBannerImageData
{
	NMS::NMSString0x20A TipText;
	NMS_Toolkit::TkTextureResource BannerImage;
	NMS::NMSString0x10 LinkedSpecialID;
	bool WideImage;

	friend bool operator==(const GcCustomisationBannerImageData& lhs, const GcCustomisationBannerImageData& rhs) 
	{
		return lhs.TipText == rhs.TipText &&
		lhs.BannerImage == rhs.BannerImage &&
		lhs.LinkedSpecialID == rhs.LinkedSpecialID &&
		lhs.WideImage == rhs.WideImage;
	}
};

struct GcAccessibleOverride_Text
{
	enum class AccessibleOverride_TextEnum : uint32_t
	{
		FontHeight = 0,
	};

	NMS_GameComponents::GcAccessibleOverride_Text::AccessibleOverride_TextEnum AccessibleOverride_Text;
	float FloatValue;

	friend bool operator==(const GcAccessibleOverride_Text& lhs, const GcAccessibleOverride_Text& rhs) 
	{
		return lhs.AccessibleOverride_Text == rhs.AccessibleOverride_Text &&
		lhs.FloatValue == rhs.FloatValue;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceCloseMenu
{
	enum class MenuToCloseEnum : uint32_t
	{
		QuickMenu = 0,
		BuildMenu = 1,
		Inventory = 2,
		AllDetailMessages = 3,
	};

	NMS::VariableSizeString DebugText;
	float Delay;
	NMS_GameComponents::GcMissionSequenceCloseMenu::MenuToCloseEnum MenuToClose;

	friend bool operator==(const GcMissionSequenceCloseMenu& lhs, const GcMissionSequenceCloseMenu& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Delay == rhs.Delay &&
		lhs.MenuToClose == rhs.MenuToClose;
	}
};

struct GcMissionConditionCreatureReadyToLay
{
	bool PrimaryCreatureOnly;

	friend bool operator==(const GcMissionConditionCreatureReadyToLay& lhs, const GcMissionConditionCreatureReadyToLay& rhs) 
	{
		return lhs.PrimaryCreatureOnly == rhs.PrimaryCreatureOnly;
	}
};

//Dependency: Colour
struct GcPaletteData
{
	enum class NumColoursEnum : uint32_t
	{
		Inactive = 0,
		_1 = 1,
		_4 = 2,
		_8 = 3,
		_16 = 4,
		All = 5,
	};

	NMS::Colour Colours[64];
	NMS_GameComponents::GcPaletteData::NumColoursEnum NumColours;

	friend bool operator==(const GcPaletteData& lhs, const GcPaletteData& rhs) 
	{
		return std::equal(std::begin(lhs.Colours), std::end(lhs.Colours), std::begin(rhs.Colours)) &&
		lhs.NumColours == rhs.NumColours;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationColourPaletteExtraData
{
	std::vector<NMS::NMSString0x10> ProductToUnlock;
	std::vector<NMS::NMSString0x20A> TipText;

	friend bool operator==(const GcCustomisationColourPaletteExtraData& lhs, const GcCustomisationColourPaletteExtraData& rhs) 
	{
		return lhs.ProductToUnlock == rhs.ProductToUnlock &&
		lhs.TipText == rhs.TipText;
	}
};

//Dependency: GcPaletteData
//Dependency: GcCustomisationColourPaletteExtraData
//Dependency: NMSString0x10
struct GcCustomisationColourPalette
{
	NMS_GameComponents::GcPaletteData PaletteData;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData ExtraData;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcCustomisationColourPalette& lhs, const GcCustomisationColourPalette& rhs) 
	{
		return lhs.PaletteData == rhs.PaletteData &&
		lhs.ExtraData == rhs.ExtraData &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: GcCustomisationColourPalette
//Dependency: NMSString0x10
struct GcCustomisationColourPalettes
{
	NMS::NMSString0x10 CustomisationTypePalettes[26];
	std::vector<NMS_GameComponents::GcCustomisationColourPalette> Palettes;

	friend bool operator==(const GcCustomisationColourPalettes& lhs, const GcCustomisationColourPalettes& rhs) 
	{
		return std::equal(std::begin(lhs.CustomisationTypePalettes), std::end(lhs.CustomisationTypePalettes), std::begin(rhs.CustomisationTypePalettes)) &&
		lhs.Palettes == rhs.Palettes;
	}
};

struct GcByteBeatToken
{
	enum class ByteBeatTokenEnum : uint32_t
	{
		T = 0,
		AND = 1,
		OR = 2,
		XOR = 3,
		Plus = 4,
		Minus = 5,
		Multiply = 6,
		Divide = 7,
		Modulo = 8,
		ShiftLeft = 9,
		ShiftRight = 10,
		Greater = 11,
		GreaterEqual = 12,
		Less = 13,
		LessEqual = 14,
		Number = 15,
		OpenParenthesis = 16,
		CloseParenthesis = 17,
	};

	NMS_GameComponents::GcByteBeatToken::ByteBeatTokenEnum ByteBeatToken;

	friend bool operator==(const GcByteBeatToken& lhs, const GcByteBeatToken& rhs) 
	{
		return lhs.ByteBeatToken == rhs.ByteBeatToken;
	}
};

//Dependency: GcByteBeatToken
struct GcByteBeatTemplate
{
	std::vector<NMS_GameComponents::GcByteBeatTemplate> Children;
	int32_t MaxValue;
	int32_t MinValue;
	NMS_GameComponents::GcByteBeatToken TokenType;
	float Weight;

	friend bool operator==(const GcByteBeatTemplate& lhs, const GcByteBeatTemplate& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.MaxValue == rhs.MaxValue &&
		lhs.MinValue == rhs.MinValue &&
		lhs.TokenType == rhs.TokenType &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: GcRealityCommonFactions
//Dependency: TkEqualityEnum
struct GcMissionConditionAIShipCount
{
	int32_t Count;
	NMS_Toolkit::TkEqualityEnum Test;
	NMS_GameComponents::GcRealityCommonFactions Type;

	friend bool operator==(const GcMissionConditionAIShipCount& lhs, const GcMissionConditionAIShipCount& rhs) 
	{
		return lhs.Count == rhs.Count &&
		lhs.Test == rhs.Test &&
		lhs.Type == rhs.Type;
	}
};

struct GcMissionConditionInVR
{
	bool NeedsHandControllers;
	bool NeedsNoHandControllers;
	bool NeedsSmoothMoveOn;
	bool NeedsSnapTurnOn;
	bool NeedsTeleportOn;

	friend bool operator==(const GcMissionConditionInVR& lhs, const GcMissionConditionInVR& rhs) 
	{
		return lhs.NeedsHandControllers == rhs.NeedsHandControllers &&
		lhs.NeedsNoHandControllers == rhs.NeedsNoHandControllers &&
		lhs.NeedsSmoothMoveOn == rhs.NeedsSmoothMoveOn &&
		lhs.NeedsSnapTurnOn == rhs.NeedsSnapTurnOn &&
		lhs.NeedsTeleportOn == rhs.NeedsTeleportOn;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkDynamicTreeWindFrequency
{
	float BranchHForcePeriod;
	float BranchHForcePeriodFast;
	float BranchVForcePeriod;
	float BranchVForcePeriodFast;
	float LeafForcePeriod;
	float LeafForcePeriodFast;
	float LeafNoiseSpeed;
	float LeafNoiseSpeedFast;

	friend bool operator==(const TkDynamicTreeWindFrequency& lhs, const TkDynamicTreeWindFrequency& rhs) 
	{
		return lhs.BranchHForcePeriod == rhs.BranchHForcePeriod &&
		lhs.BranchHForcePeriodFast == rhs.BranchHForcePeriodFast &&
		lhs.BranchVForcePeriod == rhs.BranchVForcePeriod &&
		lhs.BranchVForcePeriodFast == rhs.BranchVForcePeriodFast &&
		lhs.LeafForcePeriod == rhs.LeafForcePeriod &&
		lhs.LeafForcePeriodFast == rhs.LeafForcePeriodFast &&
		lhs.LeafNoiseSpeed == rhs.LeafNoiseSpeed &&
		lhs.LeafNoiseSpeedFast == rhs.LeafNoiseSpeedFast;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcActionSetAction
//Dependency: NMSString0x20A
//Dependency: GcInputActions
//Dependency: GcActionUseType
//Dependency: GcActionSetType
//Dependency: NMSString0x20
struct GcActionSet
{
	NMS::NMSString0x20A LocTag;
	std::vector<NMS_GameComponents::GcActionSetAction> Actions;
	std::vector<NMS_GameComponents::GcInputActions> BlockedActions;
	NMS_GameComponents::GcActionUseType Status;
	NMS_GameComponents::GcActionSetType Type;
	NMS::NMSString0x20 ExternalId;
	NMS::NMSString0x20 ExternalLoc;
	NMS::NMSString0x20 ParentExternalId;

	friend bool operator==(const GcActionSet& lhs, const GcActionSet& rhs) 
	{
		return lhs.LocTag == rhs.LocTag &&
		lhs.Actions == rhs.Actions &&
		lhs.BlockedActions == rhs.BlockedActions &&
		lhs.Status == rhs.Status &&
		lhs.Type == rhs.Type &&
		lhs.ExternalId == rhs.ExternalId &&
		lhs.ExternalLoc == rhs.ExternalLoc &&
		lhs.ParentExternalId == rhs.ParentExternalId;
	}
};

struct GcByteBeatEnvelope
{
	enum class ByteBeatEnvelopeEnum : uint32_t
	{
		Short = 0,
		Med = 1,
		Long = 2,
	};

	NMS_GameComponents::GcByteBeatEnvelope::ByteBeatEnvelopeEnum ByteBeatEnvelope;

	friend bool operator==(const GcByteBeatEnvelope& lhs, const GcByteBeatEnvelope& rhs) 
	{
		return lhs.ByteBeatEnvelope == rhs.ByteBeatEnvelope;
	}
};

struct GcByteBeatWave
{
	enum class ByteBeatWaveEnum : uint32_t
	{
		SawTooth = 0,
		Sine = 1,
		Square = 2,
		Triangle = 3,
	};

	NMS_GameComponents::GcByteBeatWave::ByteBeatWaveEnum ByteBeatWave;

	friend bool operator==(const GcByteBeatWave& lhs, const GcByteBeatWave& rhs) 
	{
		return lhs.ByteBeatWave == rhs.ByteBeatWave;
	}
};

//Dependency: GcByteBeatEnvelope
//Dependency: GcByteBeatWave
//Dependency: NMSString0x40
struct GcByteBeatDrum
{
	enum class AugmentModeEnum : uint32_t
	{
		Add = 0,
		Multiply = 1,
		Max = 2,
	};

	NMS_GameComponents::GcByteBeatEnvelope AttackEnvelope;
	NMS_GameComponents::GcByteBeatDrum::AugmentModeEnum AugmentMode;
	float AugmentOverdrive;
	float AugmentPitch;
	float AugmentPitchFalloff;
	float AugmentPitchFalloffPower;
	float AugmentSineNoiseMix;
	float AugmentVolume;
	NMS_GameComponents::GcByteBeatEnvelope DecayEnvelope;
	float Duration;
	float OctaveShift;
	float Volume;
	NMS_GameComponents::GcByteBeatWave WaveType;
	NMS::NMSString0x40 Tree;

	friend bool operator==(const GcByteBeatDrum& lhs, const GcByteBeatDrum& rhs) 
	{
		return lhs.AttackEnvelope == rhs.AttackEnvelope &&
		lhs.AugmentMode == rhs.AugmentMode &&
		lhs.AugmentOverdrive == rhs.AugmentOverdrive &&
		lhs.AugmentPitch == rhs.AugmentPitch &&
		lhs.AugmentPitchFalloff == rhs.AugmentPitchFalloff &&
		lhs.AugmentPitchFalloffPower == rhs.AugmentPitchFalloffPower &&
		lhs.AugmentSineNoiseMix == rhs.AugmentSineNoiseMix &&
		lhs.AugmentVolume == rhs.AugmentVolume &&
		lhs.DecayEnvelope == rhs.DecayEnvelope &&
		lhs.Duration == rhs.Duration &&
		lhs.OctaveShift == rhs.OctaveShift &&
		lhs.Volume == rhs.Volume &&
		lhs.WaveType == rhs.WaveType &&
		lhs.Tree == rhs.Tree;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcByteBeatSong
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 RequiredSpecialId;
	NMS::NMSString0x40 Data[8];
	NMS::NMSString0x40 AuthorOnlineID;
	NMS::NMSString0x40 AuthorPlatform;
	NMS::NMSString0x40 AuthorUsername;
	NMS::NMSString0x20 Name;

	friend bool operator==(const GcByteBeatSong& lhs, const GcByteBeatSong& rhs) 
	{
		return lhs.LocID == rhs.LocID &&
		lhs.Id == rhs.Id &&
		lhs.RequiredSpecialId == rhs.RequiredSpecialId &&
		std::equal(std::begin(lhs.Data), std::end(lhs.Data), std::begin(rhs.Data)) &&
		lhs.AuthorOnlineID == rhs.AuthorOnlineID &&
		lhs.AuthorPlatform == rhs.AuthorPlatform &&
		lhs.AuthorUsername == rhs.AuthorUsername &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: GcByteBeatDrum
//Dependency: GcByteBeatSong
//Dependency: NMSString0x40
//Dependency: GcByteBeatTemplate
struct GcByteBeatTemplates
{
	std::vector<NMS_GameComponents::GcByteBeatDrum> HiHats;
	std::vector<NMS::NMSString0x40> InitialTrees;
	std::vector<NMS_GameComponents::GcByteBeatDrum> KickDrums;
	std::vector<NMS_GameComponents::GcByteBeatDrum> SnareDrums;
	std::vector<NMS_GameComponents::GcByteBeatSong> Songs;
	std::vector<NMS_GameComponents::GcByteBeatTemplate> Templates;
	float CombinerWeights[18];
	float OperatorPermuteChance;
	float TemplateCombineChance;
	float TemplateCombineChanceAtRoot;

	friend bool operator==(const GcByteBeatTemplates& lhs, const GcByteBeatTemplates& rhs) 
	{
		return lhs.HiHats == rhs.HiHats &&
		lhs.InitialTrees == rhs.InitialTrees &&
		lhs.KickDrums == rhs.KickDrums &&
		lhs.SnareDrums == rhs.SnareDrums &&
		lhs.Songs == rhs.Songs &&
		lhs.Templates == rhs.Templates &&
		std::equal(std::begin(lhs.CombinerWeights), std::end(lhs.CombinerWeights), std::begin(rhs.CombinerWeights)) &&
		lhs.OperatorPermuteChance == rhs.OperatorPermuteChance &&
		lhs.TemplateCombineChance == rhs.TemplateCombineChance &&
		lhs.TemplateCombineChanceAtRoot == rhs.TemplateCombineChanceAtRoot;
	}
};

//Dependency: GcVehicleType
struct GcMissionConditionHasExocraft
{
	NMS_GameComponents::GcVehicleType ExocraftType;
	bool SpecificExocraft;

	friend bool operator==(const GcMissionConditionHasExocraft& lhs, const GcMissionConditionHasExocraft& rhs) 
	{
		return lhs.ExocraftType == rhs.ExocraftType &&
		lhs.SpecificExocraft == rhs.SpecificExocraft;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSettlementMiniMission
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceWaitForSettlementMiniMission& lhs, const GcMissionSequenceWaitForSettlementMiniMission& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: GcActionSet
struct GcActionSets
{
	std::vector<NMS_GameComponents::GcActionSet> ActionSets;

	friend bool operator==(const GcActionSets& lhs, const GcActionSets& rhs) 
	{
		return lhs.ActionSets == rhs.ActionSets;
	}
};

//Dependency: GcCreatureGenerationDomainEntry
struct GcCreatureGenerationDomainAdditionalEntries
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainEntry> Tables;
	float ChanceOfHemisphereLimit;
	int32_t MaxTablesToAdd;
	int32_t MaxToHemisphereLimit;

	friend bool operator==(const GcCreatureGenerationDomainAdditionalEntries& lhs, const GcCreatureGenerationDomainAdditionalEntries& rhs) 
	{
		return lhs.Tables == rhs.Tables &&
		lhs.ChanceOfHemisphereLimit == rhs.ChanceOfHemisphereLimit &&
		lhs.MaxTablesToAdd == rhs.MaxTablesToAdd &&
		lhs.MaxToHemisphereLimit == rhs.MaxToHemisphereLimit;
	}
};

//Dependency: GcCreatureGenerationDomainAdditionalEntries
//Dependency: GcCreatureGenerationDomainEntry
//Dependency: NMSString0x10
struct GcCreatureGenerationDomainTable
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainAdditionalEntries> AdditionalTables;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainEntry> Tables;
	float ChanceOfHemisphereLimit;
	int32_t MaxToHemisphereLimit;

	friend bool operator==(const GcCreatureGenerationDomainTable& lhs, const GcCreatureGenerationDomainTable& rhs) 
	{
		return lhs.AdditionalTables == rhs.AdditionalTables &&
		lhs.Id == rhs.Id &&
		lhs.Tables == rhs.Tables &&
		lhs.ChanceOfHemisphereLimit == rhs.ChanceOfHemisphereLimit &&
		lhs.MaxToHemisphereLimit == rhs.MaxToHemisphereLimit;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkTriggerFeedbackData
{
	enum class FeedbackTypeEnum : uint32_t
	{
		None = 0,
		Feedback = 1,
		Weapon = 2,
		Vibration = 3,
	};

	NMS_Toolkit::TkTriggerFeedbackData::FeedbackTypeEnum FeedbackType;
	float Frequency;
	float Position;
	float Strength;

	friend bool operator==(const TkTriggerFeedbackData& lhs, const TkTriggerFeedbackData& rhs) 
	{
		return lhs.FeedbackType == rhs.FeedbackType &&
		lhs.Frequency == rhs.Frequency &&
		lhs.Position == rhs.Position &&
		lhs.Strength == rhs.Strength;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcFreighterBaseOption
{
	NMS::VariableSizeString BaseDataFile;
	float ProbabilityWeighting;

	friend bool operator==(const GcFreighterBaseOption& lhs, const GcFreighterBaseOption& rhs) 
	{
		return lhs.BaseDataFile == rhs.BaseDataFile &&
		lhs.ProbabilityWeighting == rhs.ProbabilityWeighting;
	}
};

//Dependency: GcFreighterBaseOption
struct GcFreighterBaseOptions
{
	std::vector<NMS_GameComponents::GcFreighterBaseOption> FreighterBases;

	friend bool operator==(const GcFreighterBaseOptions& lhs, const GcFreighterBaseOptions& rhs) 
	{
		return lhs.FreighterBases == rhs.FreighterBases;
	}
};

//Dependency: GcFreighterBaseOptions
//Dependency: VariableSizeString
struct GcFreighterBaseComponentData
{
	enum class FreighterBaseGenerationModeEnum : uint32_t
	{
		Prefab = 0,
		WFC = 1,
	};

	NMS_GameComponents::GcFreighterBaseOptions FreighterBaseOptions[4];
	NMS::VariableSizeString FreighterBaseForPlayerReset;
	NMS::VariableSizeString WFCBuildingFile;
	NMS_GameComponents::GcFreighterBaseComponentData::FreighterBaseGenerationModeEnum FreighterBaseGenerationMode;

	friend bool operator==(const GcFreighterBaseComponentData& lhs, const GcFreighterBaseComponentData& rhs) 
	{
		return std::equal(std::begin(lhs.FreighterBaseOptions), std::end(lhs.FreighterBaseOptions), std::begin(rhs.FreighterBaseOptions)) &&
		lhs.FreighterBaseForPlayerReset == rhs.FreighterBaseForPlayerReset &&
		lhs.WFCBuildingFile == rhs.WFCBuildingFile &&
		lhs.FreighterBaseGenerationMode == rhs.FreighterBaseGenerationMode;
	}
};

//Dependency: GcMonth
//Dependency: NMSString0x80
struct GcYearlyRecurrence
{
	int32_t RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS_GameComponents::GcMonth RecurrenceMonth;
	NMS::NMSString0x80 DebugText;

	friend bool operator==(const GcYearlyRecurrence& lhs, const GcYearlyRecurrence& rhs) 
	{
		return lhs.RecurrenceDay == rhs.RecurrenceDay &&
		lhs.RecurrenceHour == rhs.RecurrenceHour &&
		lhs.RecurrenceMinute == rhs.RecurrenceMinute &&
		lhs.RecurrenceMonth == rhs.RecurrenceMonth &&
		lhs.DebugText == rhs.DebugText;
	}
};

struct GcActionTrigger
{
	std::vector<NMSTemplate> Action;
	NMSTemplate Event;

	friend bool operator==(const GcActionTrigger& lhs, const GcActionTrigger& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.Event == rhs.Event;
	}
};

//Dependency: GcAlienRace
struct GcMissionConditionHasSettlement
{
	NMS_GameComponents::GcAlienRace SpecificAlienRace;

	friend bool operator==(const GcMissionConditionHasSettlement& lhs, const GcMissionConditionHasSettlement& rhs) 
	{
		return lhs.SpecificAlienRace == rhs.SpecificAlienRace;
	}
};

//Dependency: NMSString0x10
struct GcRewardSettlementCustomJudgement
{
	NMS::NMSString0x10 CustomJudgement;
	bool CanOverrideNonCustomJudgement;
	bool DisplaySettlementJudgementAlert;

	friend bool operator==(const GcRewardSettlementCustomJudgement& lhs, const GcRewardSettlementCustomJudgement& rhs) 
	{
		return lhs.CustomJudgement == rhs.CustomJudgement &&
		lhs.CanOverrideNonCustomJudgement == rhs.CanOverrideNonCustomJudgement &&
		lhs.DisplaySettlementJudgementAlert == rhs.DisplaySettlementJudgementAlert;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimMaskBone
{
	int32_t NameHash;
	float RotationWeight;
	float TranslationWeight;
	NMS::NMSString0x40 Name;
	bool ChildrenInheritWeights;
	bool LinkWeights;

	friend bool operator==(const TkAnimMaskBone& lhs, const TkAnimMaskBone& rhs) 
	{
		return lhs.NameHash == rhs.NameHash &&
		lhs.RotationWeight == rhs.RotationWeight &&
		lhs.TranslationWeight == rhs.TranslationWeight &&
		lhs.Name == rhs.Name &&
		lhs.ChildrenInheritWeights == rhs.ChildrenInheritWeights &&
		lhs.LinkWeights == rhs.LinkWeights;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardTeleport
{
	enum class TeleportRewardTypeEnum : uint32_t
	{
		None = 0,
		ToBase = 1,
		Station0 = 2,
		Station1 = 3,
		Station2 = 4,
		Station3 = 5,
		Atlas = 6,
	};

	NMS_GameComponents::GcRewardTeleport::TeleportRewardTypeEnum TeleportRewardType;

	friend bool operator==(const GcRewardTeleport& lhs, const GcRewardTeleport& rhs) 
	{
		return lhs.TeleportRewardType == rhs.TeleportRewardType;
	}
};

struct GcTerrainEdit
{
	int32_t Position;
	uint8_t Data;

	friend bool operator==(const GcTerrainEdit& lhs, const GcTerrainEdit& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Data == rhs.Data;
	}
};

//Dependency: GcTerrainEdit
//Dependency: Vector3f
struct GcTerrainEditsBuffer
{
	NMS::Vector3f BufferAnchors[256];
	uint64_t GalacticAddresses[256];
	NMS_GameComponents::GcTerrainEdit Edits[30000];
	int32_t BufferSizes[256];
	uint8_t BufferAges[256];
	bool BufferProtected[256];

	friend bool operator==(const GcTerrainEditsBuffer& lhs, const GcTerrainEditsBuffer& rhs) 
	{
		return std::equal(std::begin(lhs.BufferAnchors), std::end(lhs.BufferAnchors), std::begin(rhs.BufferAnchors)) &&
		std::equal(std::begin(lhs.GalacticAddresses), std::end(lhs.GalacticAddresses), std::begin(rhs.GalacticAddresses)) &&
		std::equal(std::begin(lhs.Edits), std::end(lhs.Edits), std::begin(rhs.Edits)) &&
		std::equal(std::begin(lhs.BufferSizes), std::end(lhs.BufferSizes), std::begin(rhs.BufferSizes)) &&
		std::equal(std::begin(lhs.BufferAges), std::end(lhs.BufferAges), std::begin(rhs.BufferAges)) &&
		std::equal(std::begin(lhs.BufferProtected), std::end(lhs.BufferProtected), std::begin(rhs.BufferProtected));
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionAreDroneHivePartsDestroyed
{
	NMS::NMSString0x20A ControllingScanEvent;

	friend bool operator==(const GcMissionConditionAreDroneHivePartsDestroyed& lhs, const GcMissionConditionAreDroneHivePartsDestroyed& rhs) 
	{
		return lhs.ControllingScanEvent == rhs.ControllingScanEvent;
	}
};

//Dependency: GcActionSetHudLayer
struct GcActionSetsHudLayers
{
	std::vector<NMS_GameComponents::GcActionSetHudLayer> ActionSetHudLayers;

	friend bool operator==(const GcActionSetsHudLayers& lhs, const GcActionSetsHudLayers& rhs) 
	{
		return lhs.ActionSetHudLayers == rhs.ActionSetHudLayers;
	}
};

//Dependency: GcActionTrigger
//Dependency: NMSString0x10
struct GcActionTriggerState
{
	NMS::NMSString0x10 StateID;
	std::vector<NMS_GameComponents::GcActionTrigger> Triggers;

	friend bool operator==(const GcActionTriggerState& lhs, const GcActionTriggerState& rhs) 
	{
		return lhs.StateID == rhs.StateID &&
		lhs.Triggers == rhs.Triggers;
	}
};

//Dependency: GcCombatEffectType
struct GcCombatEffectDamageMultiplier
{
	NMS_GameComponents::GcCombatEffectType CombatEffectType;
	float DamageMultiplier;

	friend bool operator==(const GcCombatEffectDamageMultiplier& lhs, const GcCombatEffectDamageMultiplier& rhs) 
	{
		return lhs.CombatEffectType == rhs.CombatEffectType &&
		lhs.DamageMultiplier == rhs.DamageMultiplier;
	}
};

//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x40
struct GcCreatureFiendAttackData
{
	NMS::NMSString0x10 PushBackAttackAnim;
	NMS::NMSString0x10 PushBackDamageID;
	NMS::NMSString0x10 SpawnBroodAnim;
	NMS::NMSString0x10 SpawnBroodID;
	NMS::NMSString0x10 SpitAnim;
	NMS::NMSString0x10 SpitProjectile;
	NMS::NMSString0x10 TurnLAnim;
	NMS::NMSString0x10 TurnRAnim;
	NMS::Vector2f TurnAnimSpeeds;
	float AnimSpeedModifier;
	float AttackLightIntensity;
	float DelayBetweenPounceAttacks;
	float DelayBetweenSpitAttacks;
	float FarDist;
	float IdleLightIntensity;
	int32_t MaxFlurryHits;
	int32_t MinFlurryHits;
	float ModifyDistanceForHeight;
	float NearDist;
	int32_t PushBackAttackFrame;
	float PushBackRange;
	float RoarChanceOnHit;
	float RoarChanceOnMiss;
	float SpawnBroodTimer;
	int32_t SpitAnimFrame;
	float SpitFacingRequirement;
	float StartDamageTime;
	float TurnAnimAngleMax;
	float TurnAnimAngleMin;
	float TurnToFaceTime;
	NMS::NMSString0x40 AttackLight;
	NMS::NMSString0x40 SpitJoint;
	bool AllowPounce;
	bool AllowPushBackAttack;
	bool AllowSpawnBrood;
	bool AllowSpit;
	bool AllowSpitAlways;
	bool AOESpitAttack;

	friend bool operator==(const GcCreatureFiendAttackData& lhs, const GcCreatureFiendAttackData& rhs) 
	{
		return lhs.PushBackAttackAnim == rhs.PushBackAttackAnim &&
		lhs.PushBackDamageID == rhs.PushBackDamageID &&
		lhs.SpawnBroodAnim == rhs.SpawnBroodAnim &&
		lhs.SpawnBroodID == rhs.SpawnBroodID &&
		lhs.SpitAnim == rhs.SpitAnim &&
		lhs.SpitProjectile == rhs.SpitProjectile &&
		lhs.TurnLAnim == rhs.TurnLAnim &&
		lhs.TurnRAnim == rhs.TurnRAnim &&
		lhs.TurnAnimSpeeds == rhs.TurnAnimSpeeds &&
		lhs.AnimSpeedModifier == rhs.AnimSpeedModifier &&
		lhs.AttackLightIntensity == rhs.AttackLightIntensity &&
		lhs.DelayBetweenPounceAttacks == rhs.DelayBetweenPounceAttacks &&
		lhs.DelayBetweenSpitAttacks == rhs.DelayBetweenSpitAttacks &&
		lhs.FarDist == rhs.FarDist &&
		lhs.IdleLightIntensity == rhs.IdleLightIntensity &&
		lhs.MaxFlurryHits == rhs.MaxFlurryHits &&
		lhs.MinFlurryHits == rhs.MinFlurryHits &&
		lhs.ModifyDistanceForHeight == rhs.ModifyDistanceForHeight &&
		lhs.NearDist == rhs.NearDist &&
		lhs.PushBackAttackFrame == rhs.PushBackAttackFrame &&
		lhs.PushBackRange == rhs.PushBackRange &&
		lhs.RoarChanceOnHit == rhs.RoarChanceOnHit &&
		lhs.RoarChanceOnMiss == rhs.RoarChanceOnMiss &&
		lhs.SpawnBroodTimer == rhs.SpawnBroodTimer &&
		lhs.SpitAnimFrame == rhs.SpitAnimFrame &&
		lhs.SpitFacingRequirement == rhs.SpitFacingRequirement &&
		lhs.StartDamageTime == rhs.StartDamageTime &&
		lhs.TurnAnimAngleMax == rhs.TurnAnimAngleMax &&
		lhs.TurnAnimAngleMin == rhs.TurnAnimAngleMin &&
		lhs.TurnToFaceTime == rhs.TurnToFaceTime &&
		lhs.AttackLight == rhs.AttackLight &&
		lhs.SpitJoint == rhs.SpitJoint &&
		lhs.AllowPounce == rhs.AllowPounce &&
		lhs.AllowPushBackAttack == rhs.AllowPushBackAttack &&
		lhs.AllowSpawnBrood == rhs.AllowSpawnBrood &&
		lhs.AllowSpit == rhs.AllowSpit &&
		lhs.AllowSpitAlways == rhs.AllowSpitAlways &&
		lhs.AOESpitAttack == rhs.AOESpitAttack;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcPlayerCommunicatorMessage
{
	enum class CommunicatorTypeEnum : uint32_t
	{
		HoloExplorer = 0,
		HoloSceptic = 1,
		HoloNoone = 2,
		Generic = 3,
		PlayerFreighterCaptain = 4,
		Polo = 5,
		Nada = 6,
		QuicksilverBot = 7,
		PlayerSettlementResident = 8,
		CargoScanDrone = 9,
		Tethys = 10,
		FleetExpeditionCaptain = 11,
		LivingFrigate = 12,
	};

	NMS::NMSString0x20A Dialog;
	NMS::NMSString0x20A ShipHUDOverride;
	NMS_GameComponents::GcPlayerCommunicatorMessage::CommunicatorTypeEnum CommunicatorType;
	NMS_GameComponents::GcAudioWwiseEvents HailAudioOverride;
	NMS_GameComponents::GcAlienRace RaceOverride;
	bool ShowHologram;

	friend bool operator==(const GcPlayerCommunicatorMessage& lhs, const GcPlayerCommunicatorMessage& rhs) 
	{
		return lhs.Dialog == rhs.Dialog &&
		lhs.ShipHUDOverride == rhs.ShipHUDOverride &&
		lhs.CommunicatorType == rhs.CommunicatorType &&
		lhs.HailAudioOverride == rhs.HailAudioOverride &&
		lhs.RaceOverride == rhs.RaceOverride &&
		lhs.ShowHologram == rhs.ShowHologram;
	}
};

struct GcSettlementStatType
{
	enum class SettlementStatTypeEnum : uint32_t
	{
		MaxPopulation = 0,
		Happiness = 1,
		Production = 2,
		Upkeep = 3,
		Sentinels = 4,
		Debt = 5,
		Alert = 6,
		BugAttack = 7,
	};

	NMS_GameComponents::GcSettlementStatType::SettlementStatTypeEnum SettlementStatType;

	friend bool operator==(const GcSettlementStatType& lhs, const GcSettlementStatType& rhs) 
	{
		return lhs.SettlementStatType == rhs.SettlementStatType;
	}
};

//Dependency: GcSettlementStatType
struct GcSettlementStatValueRange
{
	int32_t MaxValue;
	int32_t MinValue;
	NMS_GameComponents::GcSettlementStatType Type;

	friend bool operator==(const GcSettlementStatValueRange& lhs, const GcSettlementStatValueRange& rhs) 
	{
		return lhs.MaxValue == rhs.MaxValue &&
		lhs.MinValue == rhs.MinValue &&
		lhs.Type == rhs.Type;
	}
};

struct GcWeatherOptions
{
	enum class WeatherEnum : uint32_t
	{
		Clear = 0,
		Dust = 1,
		Humid = 2,
		Snow = 3,
		Toxic = 4,
		Scorched = 5,
		Radioactive = 6,
		RedWeather = 7,
		GreenWeather = 8,
		BlueWeather = 9,
		Swamp = 10,
		Lava = 11,
		Bubble = 12,
		Weird = 13,
		Fire = 14,
		ClearCold = 15,
		GasGiant = 16,
	};

	NMS_GameComponents::GcWeatherOptions::WeatherEnum Weather;

	friend bool operator==(const GcWeatherOptions& lhs, const GcWeatherOptions& rhs) 
	{
		return lhs.Weather == rhs.Weather;
	}
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector2f
struct GcCloudProperties
{
	NMS::Colour CloudBaseColour;
	NMS::Vector4f CloudHeightGradient1;
	NMS::Vector4f CloudHeightGradient2;
	NMS::Vector4f CloudHeightGradient3;
	NMS::Colour CloudTopColour;
	NMS::Vector2f StratosphereWindOffset;
	NMS::Vector2f WindOffset;
	float AbsorptionFactor;
	float AmbientDensity;
	float AmbientScalar;
	float AnimationScale;
	float BackwardScatteringG;
	float BaseScale;
	float CloudBottomFade;
	float CloudDistortion;
	float CloudDistortionScale;
	float ConeRadius;
	float DarkOutlineScalar;
	float Density;
	float DetailScale;
	float DitheringScale;
	float ErosionEdgeSize;
	float ForwardScatteringG;
	float HorizonCoverageEnd;
	float HorizonCoverageStart;
	float HorizonDistance;
	float HorizonFadeScalar;
	float HorizonFadeStartAlpha;
	float LightScalar;
	float LODDistance;
	float MaxIterations;
	float RayMinimumY;
	float SampleScalar;
	float SampleThreshold;
	float SunRayLength;
	bool UseBlueNoiseDithering;

	friend bool operator==(const GcCloudProperties& lhs, const GcCloudProperties& rhs) 
	{
		return lhs.CloudBaseColour == rhs.CloudBaseColour &&
		lhs.CloudHeightGradient1 == rhs.CloudHeightGradient1 &&
		lhs.CloudHeightGradient2 == rhs.CloudHeightGradient2 &&
		lhs.CloudHeightGradient3 == rhs.CloudHeightGradient3 &&
		lhs.CloudTopColour == rhs.CloudTopColour &&
		lhs.StratosphereWindOffset == rhs.StratosphereWindOffset &&
		lhs.WindOffset == rhs.WindOffset &&
		lhs.AbsorptionFactor == rhs.AbsorptionFactor &&
		lhs.AmbientDensity == rhs.AmbientDensity &&
		lhs.AmbientScalar == rhs.AmbientScalar &&
		lhs.AnimationScale == rhs.AnimationScale &&
		lhs.BackwardScatteringG == rhs.BackwardScatteringG &&
		lhs.BaseScale == rhs.BaseScale &&
		lhs.CloudBottomFade == rhs.CloudBottomFade &&
		lhs.CloudDistortion == rhs.CloudDistortion &&
		lhs.CloudDistortionScale == rhs.CloudDistortionScale &&
		lhs.ConeRadius == rhs.ConeRadius &&
		lhs.DarkOutlineScalar == rhs.DarkOutlineScalar &&
		lhs.Density == rhs.Density &&
		lhs.DetailScale == rhs.DetailScale &&
		lhs.DitheringScale == rhs.DitheringScale &&
		lhs.ErosionEdgeSize == rhs.ErosionEdgeSize &&
		lhs.ForwardScatteringG == rhs.ForwardScatteringG &&
		lhs.HorizonCoverageEnd == rhs.HorizonCoverageEnd &&
		lhs.HorizonCoverageStart == rhs.HorizonCoverageStart &&
		lhs.HorizonDistance == rhs.HorizonDistance &&
		lhs.HorizonFadeScalar == rhs.HorizonFadeScalar &&
		lhs.HorizonFadeStartAlpha == rhs.HorizonFadeStartAlpha &&
		lhs.LightScalar == rhs.LightScalar &&
		lhs.LODDistance == rhs.LODDistance &&
		lhs.MaxIterations == rhs.MaxIterations &&
		lhs.RayMinimumY == rhs.RayMinimumY &&
		lhs.SampleScalar == rhs.SampleScalar &&
		lhs.SampleThreshold == rhs.SampleThreshold &&
		lhs.SunRayLength == rhs.SunRayLength &&
		lhs.UseBlueNoiseDithering == rhs.UseBlueNoiseDithering;
	}
};

struct GcDiscoveryHelperTimings
{
	float DiscoverPlanetMessageTime;
	float DiscoverPlanetMessageWait;
	float DiscoverPlanetTotalTime;

	friend bool operator==(const GcDiscoveryHelperTimings& lhs, const GcDiscoveryHelperTimings& rhs) 
	{
		return lhs.DiscoverPlanetMessageTime == rhs.DiscoverPlanetMessageTime &&
		lhs.DiscoverPlanetMessageWait == rhs.DiscoverPlanetMessageWait &&
		lhs.DiscoverPlanetTotalTime == rhs.DiscoverPlanetTotalTime;
	}
};

struct GcAlienPodAnimParams
{
	float Intensity;

	friend bool operator==(const GcAlienPodAnimParams& lhs, const GcAlienPodAnimParams& rhs) 
	{
		return lhs.Intensity == rhs.Intensity;
	}
};

struct GcAlienPodComponentData
{
	float AgroMovement;
	float AgroMovementRange;
	float AgroRate;
	float AgroSpookTime;
	float AgroSpookTimeMax;
	float AgroSpookTimeMin;
	float AgroSpookValue;
	float AgroThreshold;
	float AgroThresholdOffscreen;
	float AgroTorch;
	float AgroTorchFOV;
	float AgroTorchRange;
	float GlowIntensityMax;
	float GlowIntensityMin;
	float GunfireAgro;
	float GunfireAgroRange;
	float InstaAgroDistance;

	friend bool operator==(const GcAlienPodComponentData& lhs, const GcAlienPodComponentData& rhs) 
	{
		return lhs.AgroMovement == rhs.AgroMovement &&
		lhs.AgroMovementRange == rhs.AgroMovementRange &&
		lhs.AgroRate == rhs.AgroRate &&
		lhs.AgroSpookTime == rhs.AgroSpookTime &&
		lhs.AgroSpookTimeMax == rhs.AgroSpookTimeMax &&
		lhs.AgroSpookTimeMin == rhs.AgroSpookTimeMin &&
		lhs.AgroSpookValue == rhs.AgroSpookValue &&
		lhs.AgroThreshold == rhs.AgroThreshold &&
		lhs.AgroThresholdOffscreen == rhs.AgroThresholdOffscreen &&
		lhs.AgroTorch == rhs.AgroTorch &&
		lhs.AgroTorchFOV == rhs.AgroTorchFOV &&
		lhs.AgroTorchRange == rhs.AgroTorchRange &&
		lhs.GlowIntensityMax == rhs.GlowIntensityMax &&
		lhs.GlowIntensityMin == rhs.GlowIntensityMin &&
		lhs.GunfireAgro == rhs.GunfireAgro &&
		lhs.GunfireAgroRange == rhs.GunfireAgroRange &&
		lhs.InstaAgroDistance == rhs.InstaAgroDistance;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkProceduralInstanceData
{
	NMS::NMSString0x10 Id;
	int32_t Index;

	friend bool operator==(const TkProceduralInstanceData& lhs, const TkProceduralInstanceData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Index == rhs.Index;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardSetMissionStat
{
	int32_t ValueToAdd;
	int32_t ValueToSet;

	friend bool operator==(const GcRewardSetMissionStat& lhs, const GcRewardSetMissionStat& rhs) 
	{
		return lhs.ValueToAdd == rhs.ValueToAdd &&
		lhs.ValueToSet == rhs.ValueToSet;
	}
};

//Dependency: NMSString0x10
struct GcCreatureVocalSoundData
{
	enum class VocalEmoteEnum : uint32_t
	{
		EmoteIdle = 0,
		EmoteFlee = 1,
		EmoteAggression = 2,
		EmoteRoar = 3,
		EmotePain = 4,
		EmoteAttack = 5,
		EmoteDie = 6,
		EmoteMiniRoarNeutral = 7,
		EmoteMiniRoarHappy = 8,
		EmoteMiniRoarAngry = 9,
	};

	NMS::NMSString0x10 Id;
	float MaxCooldown;
	float MinCooldown;
	float PlayFrequency;
	NMS_GameComponents::GcCreatureVocalSoundData::VocalEmoteEnum VocalEmote;
	bool PlayImmediately;
	bool PlayOnlyOnce;

	friend bool operator==(const GcCreatureVocalSoundData& lhs, const GcCreatureVocalSoundData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.MaxCooldown == rhs.MaxCooldown &&
		lhs.MinCooldown == rhs.MinCooldown &&
		lhs.PlayFrequency == rhs.PlayFrequency &&
		lhs.VocalEmote == rhs.VocalEmote &&
		lhs.PlayImmediately == rhs.PlayImmediately &&
		lhs.PlayOnlyOnce == rhs.PlayOnlyOnce;
	}
};

//Dependency: GcCreatureVocalSoundData
struct GcCreatureAudioTable
{
	std::vector<NMS_GameComponents::GcCreatureVocalSoundData> Table;

	friend bool operator==(const GcCreatureAudioTable& lhs, const GcCreatureAudioTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcAlienPuzzleCategory
{
	enum class AlienPuzzleCategoryEnum : uint32_t
	{
		Default = 0,
		GuildTraderNone = 1,
		GuildTraderLow = 2,
		GuildTraderMed = 3,
		GuildTraderHigh = 4,
		GuildTraderBest = 5,
		GuildWarriorNone = 6,
		GuildWarriorLow = 7,
		GuildWarriorMed = 8,
		GuildWarriorHigh = 9,
		GuildWarriorBest = 10,
		GuildExplorerNone = 11,
		GuildExplorerLow = 12,
		GuildExplorerMed = 13,
		GuildExplorerHigh = 14,
		GuildExplorerBest = 15,
		BiomeHot = 16,
		BiomeCold = 17,
		BiomeLush = 18,
		BiomeDusty = 19,
		BiomeTox = 20,
		BiomeRad = 21,
		BiomeWeird = 22,
		LocationSpaceStation = 23,
		LocationShop = 24,
		LocationOutpost = 25,
		LocationObservatory = 26,
		Walking = 27,
		ExtremeWeather = 28,
		ExtremeSentinels = 29,
		WaterPlanet = 30,
		FreighterCrew = 31,
		FreighterCrewOwned = 32,
		ShipShop = 33,
		SuitShop = 34,
		WeapShop = 35,
		VehicleShop = 36,
		MoodVeryPositive = 37,
		MoodPositive = 38,
		MoodNeutral = 39,
		MoodNegative = 40,
		MoodVeryNegative = 41,
		Proc = 42,
		FirstAbandonedFreighter = 43,
		StandardAbandonedFreighter = 44,
		BiomeSwamp = 45,
		BiomeLava = 46,
		AbandonedSystem = 47,
		InhabitedSystem = 48,
		SettlementOwned = 49,
		SettlementNotOwned = 50,
		PirateStation = 51,
		StandardPilot = 52,
		Unlocked = 53,
		AllUnlocked = 54,
		NotUnlocked = 55,
		SpiderA = 56,
		SpiderB = 57,
		SpiderRenewed = 58,
	};

	NMS_GameComponents::GcAlienPuzzleCategory::AlienPuzzleCategoryEnum AlienPuzzleCategory;

	friend bool operator==(const GcAlienPuzzleCategory& lhs, const GcAlienPuzzleCategory& rhs) 
	{
		return lhs.AlienPuzzleCategory == rhs.AlienPuzzleCategory;
	}
};

//Dependency: NMSString0x10
struct GcBaseBuildingFamily
{
	enum class FamilyTypeEnum : uint32_t
	{
		Replacements = 0,
		Extras = 1,
	};

	NMS::NMSString0x10 ID;
	std::vector<NMS::NMSString0x10> ObjectIDs;
	NMS_GameComponents::GcBaseBuildingFamily::FamilyTypeEnum FamilyType;

	friend bool operator==(const GcBaseBuildingFamily& lhs, const GcBaseBuildingFamily& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.ObjectIDs == rhs.ObjectIDs &&
		lhs.FamilyType == rhs.FamilyType;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceEnsureBarrelsAtPlayerSettlement
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t MinBarrelsThreshold;
	int32_t NumBarrels;

	friend bool operator==(const GcMissionSequenceEnsureBarrelsAtPlayerSettlement& lhs, const GcMissionSequenceEnsureBarrelsAtPlayerSettlement& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MinBarrelsThreshold == rhs.MinBarrelsThreshold &&
		lhs.NumBarrels == rhs.NumBarrels;
	}
};

//Dependency: GcAlienRace
//Dependency: GcAudioWwiseEvents
//Dependency: GcMissionConditionTest
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
struct GcPuzzleTextFlow
{
	enum class TranslateAlienTextOverrideEnum : uint32_t
	{
		None = 0,
		Translate = 1,
		DoNotTranslate = 2,
	};

	enum class BracketsOverrideEnum : uint32_t
	{
		None = 0,
		Brackets = 1,
		NoBrackets = 2,
	};

	NMS::NMSString0x20A DisablingConditionId;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A Title;
	std::vector<NMSTemplate> DisablingConditions;
	NMS_GameComponents::GcAlienRace AlienLanguageOverride;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcPuzzleTextFlow::BracketsOverrideEnum BracketsOverride;
	NMS_GameComponents::GcMissionConditionTest DisablingConditionTest;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcPuzzleTextFlow::TranslateAlienTextOverrideEnum TranslateAlienTextOverride;
	bool IsAlien;
	bool ShowHologram;

	friend bool operator==(const GcPuzzleTextFlow& lhs, const GcPuzzleTextFlow& rhs) 
	{
		return lhs.DisablingConditionId == rhs.DisablingConditionId &&
		lhs.Text == rhs.Text &&
		lhs.Title == rhs.Title &&
		lhs.DisablingConditions == rhs.DisablingConditions &&
		lhs.AlienLanguageOverride == rhs.AlienLanguageOverride &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.BracketsOverride == rhs.BracketsOverride &&
		lhs.DisablingConditionTest == rhs.DisablingConditionTest &&
		lhs.Mood == rhs.Mood &&
		lhs.TranslateAlienTextOverride == rhs.TranslateAlienTextOverride &&
		lhs.IsAlien == rhs.IsAlien &&
		lhs.ShowHologram == rhs.ShowHologram;
	}
};

struct GcInteractionType
{
	enum class InteractionTypeEnum : uint32_t
	{
		None = 0,
		Shop = 1,
		NPC = 2,
		NPC_Secondary = 3,
		NPC_Anomaly = 4,
		NPC_Anomaly_Secondary = 5,
		Ship = 6,
		Outpost = 7,
		SpaceStation = 8,
		RadioTower = 9,
		Monolith = 10,
		Factory = 11,
		AbandonedShip = 12,
		Harvester = 13,
		Observatory = 14,
		TradingPost = 15,
		DistressBeacon = 16,
		Portal = 17,
		Plaque = 18,
		AtlasStation = 19,
		AbandonedBuildings = 20,
		WeaponTerminal = 21,
		SuitTerminal = 22,
		SignalScanner = 23,
		Teleporter_Base = 24,
		Teleporter_Station = 25,
		ClaimBase = 26,
		NPC_Freighter_Captain = 27,
		NPC_HIRE_Weapons = 28,
		NPC_HIRE_Weapons_Wait = 29,
		NPC_HIRE_Farmer = 30,
		NPC_HIRE_Farmer_Wait = 31,
		NPC_HIRE_Builder = 32,
		NPC_HIRE_Builder_Wait = 33,
		NPC_HIRE_Vehicles = 34,
		NPC_HIRE_Vehicles_Wait = 35,
		MessageBeacon = 36,
		NPC_HIRE_Scientist = 37,
		NPC_HIRE_Scientist_Wait = 38,
		NPC_Recruit = 39,
		NPC_Freighter_Captain_Secondary = 40,
		NPC_Recruit_Secondary = 41,
		Vehicle = 42,
		MessageModule = 43,
		TechShop = 44,
		VehicleRaceStart = 45,
		BuildingShop = 46,
		MissionGiver = 47,
		HoloHub = 48,
		HoloExplorer = 49,
		HoloSceptic = 50,
		HoloNoone = 51,
		PortalRuneEntry = 52,
		PortalActivate = 53,
		CrashedFreighter = 54,
		GraveInCave = 55,
		GlitchyStoryBox = 56,
		NetworkPlayer = 57,
		NetworkMonument = 58,
		AnomalyComputer = 59,
		AtlasPlinth = 60,
		Epilogue = 61,
		GuildEnvoy = 62,
		ManageFleet = 63,
		ManageExpeditions = 64,
		Frigate = 65,
		CustomiseCharacter = 66,
		CustomiseShip = 67,
		CustomiseWeapon = 68,
		CustomiseVehicle = 69,
		ClaimBaseAnywhere = 70,
		FleetNavigator = 71,
		FleetCommandPost = 72,
		StoryUtility = 73,
		MPMissionGiver = 74,
		SpecialsShop = 75,
		WaterRuin = 76,
		LocationScanner = 77,
		ByteBeat = 78,
		NPC_CrashSite = 79,
		NPC_Scavenger = 80,
		BaseGridPart = 81,
		NPC_Freighter_Crew = 82,
		NPC_Freighter_Crew_Owned = 83,
		AbandonedShip_With_NPC = 84,
		ShipPilot = 85,
		NexusMilestones = 86,
		NexusDailyMission = 87,
		CreatureFeeder = 88,
		ExoticExtra1 = 89,
		ExoticExtra2 = 90,
		ExoticExtra3 = 91,
		ExoticExtra4 = 92,
		ExoticExtra5 = 93,
		ExoticExtra6 = 94,
		MapShop = 95,
		NPC_Closure = 96,
		StorageContainer = 97,
		Teleporter_Nexus = 98,
		ShipSalvage = 99,
		ByteBeatSwitch = 100,
		AbandonedFreighterIntro = 101,
		AbandonedFreighterEnd = 102,
		AbandonedFreighterProcText = 103,
		AbandonedFreighterCaptLog = 104,
		AbandonedFreighterCrewLog = 105,
		AbandonedFreighterShop = 106,
		CustomiseFreighter = 107,
		LibraryVault = 108,
		LibraryMainTerminal = 109,
		LibraryMap = 110,
		WeaponUpgrade = 111,
		Pet = 112,
		Creature = 113,
		FreighterGalacticMap = 114,
		RecipeStation = 115,
		StationCore = 116,
		NPC_Settlement_SpecialWorker = 117,
		NPC_Settlement_Secondary = 118,
		SettlementHub = 119,
		SettlementBuildingSite = 120,
		SettlementAdminTerminal = 121,
		FriendlyDrone = 122,
		DroneHive = 123,
		RocketLocker = 124,
		FrigateCaptain = 125,
		PirateShop = 126,
		NPC_PirateSecondary = 127,
		NPC_FreighterBase_SquadronPilot = 128,
		NPC_FreighterBase_FrigateCaptain = 129,
		NPC_FreighterBase_Worker = 130,
		RobotHead = 131,
		RobotCampTerminal = 132,
		MonolithNub = 133,
		NexusSpiderman = 134,
		WeaponSalvage = 135,
		DiscoverySelector = 136,
		RobotShop = 137,
		SeasonTerminal = 138,
		NPC_Freighter_Captain_Pirate = 139,
		SkiffLocker = 140,
		CustomiseSkiff = 141,
		ExhibitAssembly = 142,
		ArchiveMultitool = 143,
		BoneShop = 144,
		SettlementBuildingDetail = 145,
		ByteBeatJukebox = 146,
		NPC_Settlement_SquadronPilot = 147,
		Settlement_TowerTerminal = 148,
	};

	NMS_GameComponents::GcInteractionType::InteractionTypeEnum InteractionType;

	friend bool operator==(const GcInteractionType& lhs, const GcInteractionType& rhs) 
	{
		return lhs.InteractionType == rhs.InteractionType;
	}
};

//Dependency: GcPuzzleTextFlow
//Dependency: GcNPCPropType
//Dependency: GcAlienPuzzleOption
//Dependency: GcAlienPuzzleCategory
//Dependency: GcAlienMood
//Dependency: GcInteractionType
//Dependency: GcAudioWwiseEvents
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcAlienPuzzleEntry
{
	enum class PersistancyBufferOverrideEnum : uint32_t
	{
		None = 0,
		AlwaysPersonal = 1,
		AlwaysFireteam = 2,
	};

	enum class AdditionalOptionsEnum : uint32_t
	{
		None = 0,
		LearnWord = 1,
		SayWord = 2,
	};

	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A RequiresScanEvent;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A TextAlien;
	NMS::NMSString0x20A Title;
	std::vector<NMS::NMSString0x20A> AdditionalText;
	std::vector<NMS::NMSString0x20A> AdditionalTextAlien;
	std::vector<NMS_GameComponents::GcPuzzleTextFlow> AdvancedInteractionFlow;
	std::vector<NMS_GameComponents::GcAlienPuzzleOption> Options;
	NMS_GameComponents::GcAlienPuzzleEntry::AdditionalOptionsEnum AdditionalOptions;
	NMS_GameComponents::GcAlienPuzzleCategory Category;
	int32_t CustomFreighterTextIndex;
	int32_t MinProgressionForSelection;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcAudioWwiseEvents NextStageAudioEventOverride;
	NMS_GameComponents::GcAlienPuzzleEntry::PersistancyBufferOverrideEnum PersistancyBufferOverride;
	int32_t ProgressionIndex;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcInteractionType Type;
	bool AllowNoOptions;
	bool ProgressiveDialogue;
	bool RadialInteraction;
	bool TranslateAlienText;
	bool TranslationBrackets;
	bool UseTitleOverrideInLabel;

	friend bool operator==(const GcAlienPuzzleEntry& lhs, const GcAlienPuzzleEntry& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.RequiresScanEvent == rhs.RequiresScanEvent &&
		lhs.Text == rhs.Text &&
		lhs.TextAlien == rhs.TextAlien &&
		lhs.Title == rhs.Title &&
		lhs.AdditionalText == rhs.AdditionalText &&
		lhs.AdditionalTextAlien == rhs.AdditionalTextAlien &&
		lhs.AdvancedInteractionFlow == rhs.AdvancedInteractionFlow &&
		lhs.Options == rhs.Options &&
		lhs.AdditionalOptions == rhs.AdditionalOptions &&
		lhs.Category == rhs.Category &&
		lhs.CustomFreighterTextIndex == rhs.CustomFreighterTextIndex &&
		lhs.MinProgressionForSelection == rhs.MinProgressionForSelection &&
		lhs.Mood == rhs.Mood &&
		lhs.NextStageAudioEventOverride == rhs.NextStageAudioEventOverride &&
		lhs.PersistancyBufferOverride == rhs.PersistancyBufferOverride &&
		lhs.ProgressionIndex == rhs.ProgressionIndex &&
		lhs.Prop == rhs.Prop &&
		lhs.Race == rhs.Race &&
		lhs.Type == rhs.Type &&
		lhs.AllowNoOptions == rhs.AllowNoOptions &&
		lhs.ProgressiveDialogue == rhs.ProgressiveDialogue &&
		lhs.RadialInteraction == rhs.RadialInteraction &&
		lhs.TranslateAlienText == rhs.TranslateAlienText &&
		lhs.TranslationBrackets == rhs.TranslationBrackets &&
		lhs.UseTitleOverrideInLabel == rhs.UseTitleOverrideInLabel;
	}
};

struct GcLinkNetworkTypes
{
	enum class LinkNetworkTypeEnum : uint32_t
	{
		Power = 0,
		Resources = 1,
		Fuel = 2,
		Portals = 3,
		PlantGrowth = 4,
		ByteBeat = 5,
	};

	NMS_GameComponents::GcLinkNetworkTypes::LinkNetworkTypeEnum LinkNetworkType;

	friend bool operator==(const GcLinkNetworkTypes& lhs, const GcLinkNetworkTypes& rhs) 
	{
		return lhs.LinkNetworkType == rhs.LinkNetworkType;
	}
};

//Dependency: GcLinkNetworkTypes
//Dependency: Vector3f
struct GcBaseLinkGridConnectionData
{
	std::vector<NMS::Vector3f> LinkSocketPositions;
	std::vector<int32_t> LinkSocketSubGroups;
	float ConnectionDistance;
	NMS_GameComponents::GcLinkNetworkTypes Network;
	int32_t NetworkMask;
	int32_t NetworkSubGroup;
	bool UseMinDistance;

	friend bool operator==(const GcBaseLinkGridConnectionData& lhs, const GcBaseLinkGridConnectionData& rhs) 
	{
		return lhs.LinkSocketPositions == rhs.LinkSocketPositions &&
		lhs.LinkSocketSubGroups == rhs.LinkSocketSubGroups &&
		lhs.ConnectionDistance == rhs.ConnectionDistance &&
		lhs.Network == rhs.Network &&
		lhs.NetworkMask == rhs.NetworkMask &&
		lhs.NetworkSubGroup == rhs.NetworkSubGroup &&
		lhs.UseMinDistance == rhs.UseMinDistance;
	}
};

//Dependency: GcBaseLinkGridConnectionData
struct GcBaseLinkGridConnectionDependency
{
	enum class DependentEffectEnum : uint32_t
	{
		None = 0,
		EnablesRate = 1,
		DisablesRate = 2,
		EnablesConnection = 3,
		DisablesConnection = 4,
	};

	NMS_GameComponents::GcBaseLinkGridConnectionData Connection;
	NMS_GameComponents::GcBaseLinkGridConnectionDependency::DependentEffectEnum DependentEffect;
	int32_t DependentRate;
	bool DisableWhenOffline;
	bool TransfersConnections;

	friend bool operator==(const GcBaseLinkGridConnectionDependency& lhs, const GcBaseLinkGridConnectionDependency& rhs) 
	{
		return lhs.Connection == rhs.Connection &&
		lhs.DependentEffect == rhs.DependentEffect &&
		lhs.DependentRate == rhs.DependentRate &&
		lhs.DisableWhenOffline == rhs.DisableWhenOffline &&
		lhs.TransfersConnections == rhs.TransfersConnections;
	}
};

//Dependency: GcBaseLinkGridConnectionData
//Dependency: GcBaseLinkGridConnectionDependency
struct GcBaseLinkGridData
{
	enum class DependsOnHotspotsEnum : uint32_t
	{
		None = 0,
		Power = 1,
		Mineral = 2,
		Gas = 3,
	};

	enum class DependsOnEnvironmentEnum : uint32_t
	{
		None = 0,
		DayNight = 1,
		Storms = 2,
	};

	NMS_GameComponents::GcBaseLinkGridConnectionData Connection;
	std::vector<NMS_GameComponents::GcBaseLinkGridConnectionDependency> DependentConnections;
	NMS_GameComponents::GcBaseLinkGridData::DependsOnEnvironmentEnum DependsOnEnvironment;
	NMS_GameComponents::GcBaseLinkGridData::DependsOnHotspotsEnum DependsOnHotspots;
	int32_t Rate;
	int32_t Storage;

	friend bool operator==(const GcBaseLinkGridData& lhs, const GcBaseLinkGridData& rhs) 
	{
		return lhs.Connection == rhs.Connection &&
		lhs.DependentConnections == rhs.DependentConnections &&
		lhs.DependsOnEnvironment == rhs.DependsOnEnvironment &&
		lhs.DependsOnHotspots == rhs.DependsOnHotspots &&
		lhs.Rate == rhs.Rate &&
		lhs.Storage == rhs.Storage;
	}
};

//Dependency: NMSString0x10
struct GcMissileComponentData
{
	NMS::NMSString0x10 Explosion;
	NMS::NMSString0x10 Trail;
	float NoTargetLife;

	friend bool operator==(const GcMissileComponentData& lhs, const GcMissileComponentData& rhs) 
	{
		return lhs.Explosion == rhs.Explosion &&
		lhs.Trail == rhs.Trail &&
		lhs.NoTargetLife == rhs.NoTargetLife;
	}
};

struct GcFrigateFlybyType
{
	enum class FrigateFlybyTypeEnum : uint32_t
	{
		SingleShip = 0,
		AmbientGroup = 1,
		ScriptedGroup = 2,
		DeepSpace = 3,
		DeepSpaceCommon = 4,
		GhostShip = 5,
	};

	NMS_GameComponents::GcFrigateFlybyType::FrigateFlybyTypeEnum FrigateFlybyType;

	friend bool operator==(const GcFrigateFlybyType& lhs, const GcFrigateFlybyType& rhs) 
	{
		return lhs.FrigateFlybyType == rhs.FrigateFlybyType;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcAudioWwiseEvents
//Dependency: GcFrigateFlybyType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardFrigateFlyby
{
	NMS_GameComponents::GcPlayerCommunicatorMessage CommunicatorMessage;
	NMS::NMSString0x20A CommunicatorOSDLocId;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMS::NMSString0x10 CameraShake;
	float AppearanceDelay;
	NMS_GameComponents::GcAudioWwiseEvents AudioSting;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	NMS_GameComponents::GcAudioWwiseEvents PulseAudio;

	friend bool operator==(const GcRewardFrigateFlyby& lhs, const GcRewardFrigateFlyby& rhs) 
	{
		return lhs.CommunicatorMessage == rhs.CommunicatorMessage &&
		lhs.CommunicatorOSDLocId == rhs.CommunicatorOSDLocId &&
		lhs.MarkerIcon == rhs.MarkerIcon &&
		lhs.CameraShake == rhs.CameraShake &&
		lhs.AppearanceDelay == rhs.AppearanceDelay &&
		lhs.AudioSting == rhs.AudioSting &&
		lhs.FlybyType == rhs.FlybyType &&
		lhs.PulseAudio == rhs.PulseAudio;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcAlienPuzzleMissionOverride
{
	NMS::NMSString0x20A Puzzle;
	NMS::NMSString0x20A RequireScanEventActive;
	NMS::NMSString0x10 AltPriorityMissionForSelection;
	NMS::NMSString0x10 Mission;
	NMS::GcSeed OptionalMissionSeed;
	bool ForceMissionSeed;
	bool RequireMainMissionActiveWhenUsingAlt;
	bool RequireMainMissionSelected;

	friend bool operator==(const GcAlienPuzzleMissionOverride& lhs, const GcAlienPuzzleMissionOverride& rhs) 
	{
		return lhs.Puzzle == rhs.Puzzle &&
		lhs.RequireScanEventActive == rhs.RequireScanEventActive &&
		lhs.AltPriorityMissionForSelection == rhs.AltPriorityMissionForSelection &&
		lhs.Mission == rhs.Mission &&
		lhs.OptionalMissionSeed == rhs.OptionalMissionSeed &&
		lhs.ForceMissionSeed == rhs.ForceMissionSeed &&
		lhs.RequireMainMissionActiveWhenUsingAlt == rhs.RequireMainMissionActiveWhenUsingAlt &&
		lhs.RequireMainMissionSelected == rhs.RequireMainMissionSelected;
	}
};

//Dependency: GcCurrency
struct GcMissionConditionHasMoney
{
	int32_t Amount;
	NMS_GameComponents::GcCurrency TestCurrency;
	bool ApplyDifficultyScaling;

	friend bool operator==(const GcMissionConditionHasMoney& lhs, const GcMissionConditionHasMoney& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.TestCurrency == rhs.TestCurrency &&
		lhs.ApplyDifficultyScaling == rhs.ApplyDifficultyScaling;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputHandEnum
{
	enum class InputHandEnum : uint32_t
	{
		None = 0,
		Left = 1,
		Right = 2,
	};

	NMS_Toolkit::TkInputHandEnum::InputHandEnum InputHand;

	friend bool operator==(const TkInputHandEnum& lhs, const TkInputHandEnum& rhs) 
	{
		return lhs.InputHand == rhs.InputHand;
	}
};

struct TkInputAxisEnum
{
	enum class InputAxisEnum : uint32_t
	{
		None = 0,
		Invalid = 0,
		LeftStick = 1,
		LeftStickX = 2,
		LeftStickY = 3,
		RightStick = 4,
		RightStickX = 5,
		RightStickY = 6,
		LeftTrigger = 7,
		RightTrigger = 8,
		Mouse = 9,
		MouseX = 10,
		MouseY = 11,
		MousePositiveX = 12,
		MouseNegativeX = 13,
		MousePositiveY = 14,
		MouseNegativeY = 15,
		MouseWheel = 16,
		MouseWheelPositive = 17,
		MouseWheelNegative = 18,
		Touchpad = 19,
		TouchpadX = 20,
		TouchpadY = 21,
		TouchpadPositiveX = 22,
		TouchpadNegativeX = 23,
		TouchpadPositiveY = 24,
		TouchpadNegativeY = 25,
		LeftTouchpad = 26,
		LeftTouchpadX = 27,
		LeftTouchpadY = 28,
		LeftTouchpadPositiveX = 29,
		LeftTouchpadNegativeX = 30,
		LeftTouchpadPositiveY = 31,
		LeftTouchpadNegativeY = 32,
		LeftGrip = 33,
		RightGrip = 34,
		LeftStickPositiveX = 35,
		LeftStickNegativeX = 36,
		LeftStickPositiveY = 37,
		LeftStickNegativeY = 38,
		RightStickPositiveX = 39,
		RightStickNegativeX = 40,
		RightStickPositiveY = 41,
		RightStickNegativeY = 42,
		DirectionalPadX = 43,
		DirectionalPadY = 44,
		DirectionalButtonsX = 45,
		DirectionalButtonsY = 46,
		ChordAD = 47,
		FakeLeftStick = 48,
		FakeRightStick = 49,
	};

	NMS_Toolkit::TkInputAxisEnum::InputAxisEnum InputAxis;

	friend bool operator==(const TkInputAxisEnum& lhs, const TkInputAxisEnum& rhs) 
	{
		return lhs.InputAxis == rhs.InputAxis;
	}
};

//Dependency: TkInputHandEnum
//Dependency: TkInputAxisEnum
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkAxisPathMapping
{
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS_Toolkit::TkInputHandEnum Hand;
	NMS_Toolkit::TkInputAxisEnum Id;
	NMS::NMSString0x20 OpenVROriginNames;

	friend bool operator==(const TkAxisPathMapping& lhs, const TkAxisPathMapping& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.OverlayIcon == rhs.OverlayIcon &&
		lhs.SolidIcon == rhs.SolidIcon &&
		lhs.SpecialIcon == rhs.SpecialIcon &&
		lhs.Hand == rhs.Hand &&
		lhs.Id == rhs.Id &&
		lhs.OpenVROriginNames == rhs.OpenVROriginNames;
	}
};

//Dependency: NMSString0x10
struct TkAnimPoseData
{
	NMS::NMSString0x10 Anim;
	int32_t FrameEnd;
	int32_t FrameStart;

	friend bool operator==(const TkAnimPoseData& lhs, const TkAnimPoseData& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.FrameEnd == rhs.FrameEnd &&
		lhs.FrameStart == rhs.FrameStart;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: NMSString0x100
struct GcCreatureHoverTintableEffect
{
	NMS::Colour TintColour;
	float LightStrength;
	float TintStrength;
	NMS::NMSString0x100 EffectNode;

	friend bool operator==(const GcCreatureHoverTintableEffect& lhs, const GcCreatureHoverTintableEffect& rhs) 
	{
		return lhs.TintColour == rhs.TintColour &&
		lhs.LightStrength == rhs.LightStrength &&
		lhs.TintStrength == rhs.TintStrength &&
		lhs.EffectNode == rhs.EffectNode;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseLayerData
{
	enum class NoiseTypeEnum : uint32_t
	{
		Plane = 0,
		Check = 1,
		Sine = 2,
		Smooth = 3,
		Fractal = 4,
		Ridged = 5,
		Billow = 6,
		Erosion = 7,
		Volcanic = 8,
		Glacial = 9,
		Plateau = 10,
	};

	float FrequencyScaleY;
	float Height;
	NMS_Toolkit::TkNoiseLayerData::NoiseTypeEnum NoiseType;
	int32_t Octaves;
	float RegionRatio;
	float RegionScale;
	int32_t SeedOffset;
	float TurbulenceAmplitude;
	float TurbulenceFrequency;
	int32_t TurbulenceOctaves;
	float Width;
	bool Absolute;
	bool Active;
	bool Invert;
	bool Subtract;

	friend bool operator==(const TkNoiseLayerData& lhs, const TkNoiseLayerData& rhs) 
	{
		return lhs.FrequencyScaleY == rhs.FrequencyScaleY &&
		lhs.Height == rhs.Height &&
		lhs.NoiseType == rhs.NoiseType &&
		lhs.Octaves == rhs.Octaves &&
		lhs.RegionRatio == rhs.RegionRatio &&
		lhs.RegionScale == rhs.RegionScale &&
		lhs.SeedOffset == rhs.SeedOffset &&
		lhs.TurbulenceAmplitude == rhs.TurbulenceAmplitude &&
		lhs.TurbulenceFrequency == rhs.TurbulenceFrequency &&
		lhs.TurbulenceOctaves == rhs.TurbulenceOctaves &&
		lhs.Width == rhs.Width &&
		lhs.Absolute == rhs.Absolute &&
		lhs.Active == rhs.Active &&
		lhs.Invert == rhs.Invert &&
		lhs.Subtract == rhs.Subtract;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcGalaxyStarTypes
{
	enum class GalaxyStarTypeEnum : uint32_t
	{
		Yellow = 0,
		Green = 1,
		Blue = 2,
		Red = 3,
		Purple = 4,
	};

	NMS_GameComponents::GcGalaxyStarTypes::GalaxyStarTypeEnum GalaxyStarType;

	friend bool operator==(const GcGalaxyStarTypes& lhs, const GcGalaxyStarTypes& rhs) 
	{
		return lhs.GalaxyStarType == rhs.GalaxyStarType;
	}
};

//Dependency: GcGalaxyStarTypes
//Dependency: NMSString0x20A
struct GcMissionConditionEventRequiresRGB
{
	NMS::NMSString0x20A Event;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	bool IgnoreIfPlayerHasAccess;

	friend bool operator==(const GcMissionConditionEventRequiresRGB& lhs, const GcMissionConditionEventRequiresRGB& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.StarType == rhs.StarType &&
		lhs.IgnoreIfPlayerHasAccess == rhs.IgnoreIfPlayerHasAccess;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourGetTargetData
{
	NMS::NMSString0x10 TargetKey;

	friend bool operator==(const GcBehaviourGetTargetData& lhs, const GcBehaviourGetTargetData& rhs) 
	{
		return lhs.TargetKey == rhs.TargetKey;
	}
};

//Dependency: NMSString0x20A
struct GcNameGeneratorWord
{
	NMS::NMSString0x20A Word;
	int32_t NumOptions;

	friend bool operator==(const GcNameGeneratorWord& lhs, const GcNameGeneratorWord& rhs) 
	{
		return lhs.Word == rhs.Word &&
		lhs.NumOptions == rhs.NumOptions;
	}
};

//Dependency: GcNameGeneratorWord
//Dependency: NMSString0x20
struct GcProceduralProductWord
{
	NMS_GameComponents::GcNameGeneratorWord RareWord;
	NMS_GameComponents::GcNameGeneratorWord UncommonWord;
	NMS_GameComponents::GcNameGeneratorWord Word;
	NMS::NMSString0x20 ReplaceKey;

	friend bool operator==(const GcProceduralProductWord& lhs, const GcProceduralProductWord& rhs) 
	{
		return lhs.RareWord == rhs.RareWord &&
		lhs.UncommonWord == rhs.UncommonWord &&
		lhs.Word == rhs.Word &&
		lhs.ReplaceKey == rhs.ReplaceKey;
	}
};

//Dependency: NMSString0x10
struct GcDungeonRoomParams
{
	NMS::NMSString0x10 RoomId;
	float BranchProbability;

	friend bool operator==(const GcDungeonRoomParams& lhs, const GcDungeonRoomParams& rhs) 
	{
		return lhs.RoomId == rhs.RoomId &&
		lhs.BranchProbability == rhs.BranchProbability;
	}
};

//Dependency: NMSString0x10
struct GcDungeonQuestParams
{
	std::vector<NMS::NMSString0x10> QuestItems;
	float Probability;

	friend bool operator==(const GcDungeonQuestParams& lhs, const GcDungeonQuestParams& rhs) 
	{
		return lhs.QuestItems == rhs.QuestItems &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: GcDungeonRoomParams
//Dependency: GcDungeonQuestParams
//Dependency: NMSString0x10
struct GcDungeonGenerationParams
{
	std::vector<NMS::NMSString0x10> BranchRoomTypes;
	std::vector<NMSTemplate> GenerationRules;
	std::vector<NMS_GameComponents::GcDungeonRoomParams> MainRoomTypes;
	std::vector<NMS::NMSString0x10> PruningRules;
	std::vector<NMS_GameComponents::GcDungeonQuestParams> Quests;
	uint32_t EntranceX;
	uint32_t EntranceY;
	uint32_t EntranceZ;
	uint32_t Rooms;
	uint32_t SizeX;
	uint32_t SizeY;
	uint32_t SizeZ;
	float StraightMultiplier;
	float XProbability;
	float YProbability;
	float ZProbability;

	friend bool operator==(const GcDungeonGenerationParams& lhs, const GcDungeonGenerationParams& rhs) 
	{
		return lhs.BranchRoomTypes == rhs.BranchRoomTypes &&
		lhs.GenerationRules == rhs.GenerationRules &&
		lhs.MainRoomTypes == rhs.MainRoomTypes &&
		lhs.PruningRules == rhs.PruningRules &&
		lhs.Quests == rhs.Quests &&
		lhs.EntranceX == rhs.EntranceX &&
		lhs.EntranceY == rhs.EntranceY &&
		lhs.EntranceZ == rhs.EntranceZ &&
		lhs.Rooms == rhs.Rooms &&
		lhs.SizeX == rhs.SizeX &&
		lhs.SizeY == rhs.SizeY &&
		lhs.SizeZ == rhs.SizeZ &&
		lhs.StraightMultiplier == rhs.StraightMultiplier &&
		lhs.XProbability == rhs.XProbability &&
		lhs.YProbability == rhs.YProbability &&
		lhs.ZProbability == rhs.ZProbability;
	}
};

//Dependency: GcDungeonGenerationParams
//Dependency: NMSString0x10
struct GcFreighterDungeonParams
{
	NMS_GameComponents::GcDungeonGenerationParams DungeonParams;
	NMS::NMSString0x10 Name;

	friend bool operator==(const GcFreighterDungeonParams& lhs, const GcFreighterDungeonParams& rhs) 
	{
		return lhs.DungeonParams == rhs.DungeonParams &&
		lhs.Name == rhs.Name;
	}
};

struct GcMechMeshPart
{
	enum class MechMeshPartEnum : uint32_t
	{
		Scanner = 0,
		Body = 1,
		Legs = 2,
		LeftArm = 3,
		RightArm = 4,
	};

	NMS_GameComponents::GcMechMeshPart::MechMeshPartEnum MechMeshPart;

	friend bool operator==(const GcMechMeshPart& lhs, const GcMechMeshPart& rhs) 
	{
		return lhs.MechMeshPart == rhs.MechMeshPart;
	}
};

struct GcMechMeshType
{
	enum class MechMeshTypeEnum : uint32_t
	{
		Exocraft = 0,
		Sentinel = 1,
		BugHunter = 2,
		Stone = 3,
	};

	NMS_GameComponents::GcMechMeshType::MechMeshTypeEnum MechMeshType;

	friend bool operator==(const GcMechMeshType& lhs, const GcMechMeshType& rhs) 
	{
		return lhs.MechMeshType == rhs.MechMeshType;
	}
};

//Dependency: GcMechMeshPart
//Dependency: GcMechMeshType
//Dependency: NMSString0x10
struct GcMechPartEffectOverride
{
	NMS::NMSString0x10 OverrideEffect;
	NMS_GameComponents::GcMechMeshPart MeshPart;
	NMS_GameComponents::GcMechMeshType MeshType;

	friend bool operator==(const GcMechPartEffectOverride& lhs, const GcMechPartEffectOverride& rhs) 
	{
		return lhs.OverrideEffect == rhs.OverrideEffect &&
		lhs.MeshPart == rhs.MeshPart &&
		lhs.MeshType == rhs.MeshType;
	}
};

//Dependency: GcMechPartEffectOverride
//Dependency: NMSString0x10
struct GcMechEffect
{
	NMS::NMSString0x10 DefaultEffect;
	std::vector<NMS_GameComponents::GcMechPartEffectOverride> MeshPartOverrides;

	friend bool operator==(const GcMechEffect& lhs, const GcMechEffect& rhs) 
	{
		return lhs.DefaultEffect == rhs.DefaultEffect &&
		lhs.MeshPartOverrides == rhs.MeshPartOverrides;
	}
};

//Dependency: Vector3f
struct GcMessageTrackTargetAlert
{
	NMS::Vector3f AlertPos;
	int32_t Attacker;
	int32_t Victim;
	bool Primary;

	friend bool operator==(const GcMessageTrackTargetAlert& lhs, const GcMessageTrackTargetAlert& rhs) 
	{
		return lhs.AlertPos == rhs.AlertPos &&
		lhs.Attacker == rhs.Attacker &&
		lhs.Victim == rhs.Victim &&
		lhs.Primary == rhs.Primary;
	}
};

//Dependency: GcAlienPuzzleEntry
struct GcAlienPuzzleTable
{
	std::vector<NMS_GameComponents::GcAlienPuzzleEntry> Table;

	friend bool operator==(const GcAlienPuzzleTable& lhs, const GcAlienPuzzleTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseFlattenOptions
{
	enum class WaterPlacementEnum : uint32_t
	{
		None = 0,
		OnWater = 1,
		Underwater = 2,
		UnderwaterOnly = 3,
	};

	enum class FlatteningEnum : uint32_t
	{
		None = 0,
		Flatten = 1,
		TerrainEdits = 2,
	};

	NMS_Toolkit::TkNoiseFlattenOptions::FlatteningEnum Flattening;
	NMS_Toolkit::TkNoiseFlattenOptions::WaterPlacementEnum WaterPlacement;

	friend bool operator==(const TkNoiseFlattenOptions& lhs, const TkNoiseFlattenOptions& rhs) 
	{
		return lhs.Flattening == rhs.Flattening &&
		lhs.WaterPlacement == rhs.WaterPlacement;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcAlienPuzzleTableIndex
{
	enum class IndexTypeEnum : uint32_t
	{
		Regular = 0,
		Seeded = 1,
		Random = 2,
	};

	NMS_GameComponents::GcAlienPuzzleTableIndex::IndexTypeEnum IndexType;

	friend bool operator==(const GcAlienPuzzleTableIndex& lhs, const GcAlienPuzzleTableIndex& rhs) 
	{
		return lhs.IndexType == rhs.IndexType;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionFreighterBattle
{
	enum class FreighterBattleStatusEnum : uint32_t
	{
		None = 0,
		Active = 1,
		Joined = 2,
		Reward = 3,
	};

	int32_t FreighterBattleDistance;
	NMS_GameComponents::GcMissionConditionFreighterBattle::FreighterBattleStatusEnum FreighterBattleStatus;
	NMS_Toolkit::TkEqualityEnum FreighterBattleTest;
	bool HostileFreighter;

	friend bool operator==(const GcMissionConditionFreighterBattle& lhs, const GcMissionConditionFreighterBattle& rhs) 
	{
		return lhs.FreighterBattleDistance == rhs.FreighterBattleDistance &&
		lhs.FreighterBattleStatus == rhs.FreighterBattleStatus &&
		lhs.FreighterBattleTest == rhs.FreighterBattleTest &&
		lhs.HostileFreighter == rhs.HostileFreighter;
	}
};

struct GcBaseBuildingCameraMode
{
	enum class BaseBuildingCameraModeEnum : uint32_t
	{
		Inactive = 0,
		FreeCam = 1,
		FocusCam = 2,
	};

	NMS_GameComponents::GcBaseBuildingCameraMode::BaseBuildingCameraModeEnum BaseBuildingCameraMode;

	friend bool operator==(const GcBaseBuildingCameraMode& lhs, const GcBaseBuildingCameraMode& rhs) 
	{
		return lhs.BaseBuildingCameraMode == rhs.BaseBuildingCameraMode;
	}
};

struct GcItemNeedPurpose
{
	enum class ItemPurposeEnum : uint32_t
	{
		None = 0,
		Crafting = 1,
		Building = 2,
		Repairing = 3,
		Charging = 4,
		Paying = 5,
	};

	NMS_GameComponents::GcItemNeedPurpose::ItemPurposeEnum ItemPurpose;

	friend bool operator==(const GcItemNeedPurpose& lhs, const GcItemNeedPurpose& rhs) 
	{
		return lhs.ItemPurpose == rhs.ItemPurpose;
	}
};

//Dependency: GcCurrency
struct GcCostMoneyList
{
	enum class OutOfBoundsBehaviourEnum : uint32_t
	{
		NoCost = 0,
		UseFirst = 1,
		UseLast = 2,
	};

	enum class IndexProviderEnum : uint32_t
	{
		None = 0,
		ShipSlot = 1,
		ShipClass = 2,
		DailyFreighters = 3,
		WeaponClass = 4,
		WeaponSlot = 5,
		PetSlot = 6,
		PilotSlot = 7,
		PilotRank = 8,
	};

	std::vector<int32_t> Costs;
	NMS_GameComponents::GcCurrency CostCurrency;
	NMS_GameComponents::GcCostMoneyList::IndexProviderEnum IndexProvider;
	NMS_GameComponents::GcCostMoneyList::OutOfBoundsBehaviourEnum OutOfBoundsBehaviour;
	bool AssertIfOutOfBounds;

	friend bool operator==(const GcCostMoneyList& lhs, const GcCostMoneyList& rhs) 
	{
		return lhs.Costs == rhs.Costs &&
		lhs.CostCurrency == rhs.CostCurrency &&
		lhs.IndexProvider == rhs.IndexProvider &&
		lhs.OutOfBoundsBehaviour == rhs.OutOfBoundsBehaviour &&
		lhs.AssertIfOutOfBounds == rhs.AssertIfOutOfBounds;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: LinkableNMSTemplate
//Dependency: NMSString0x40
struct TkAnimationNotifyAddEffect
{
	NMS::NMSString0x10 CharacterLocator;
	NMS::NMSString0x10 Effect;
	std::vector<NMS::LinkableNMSTemplate> Modules;
	float FacingDirOffset;
	float Scale;
	NMS::NMSString0x40 Node;
	bool Attach;
	bool MirrorDuplicate;
	bool UseModelFacingDir;

	friend bool operator==(const TkAnimationNotifyAddEffect& lhs, const TkAnimationNotifyAddEffect& rhs) 
	{
		return lhs.CharacterLocator == rhs.CharacterLocator &&
		lhs.Effect == rhs.Effect &&
		lhs.Modules == rhs.Modules &&
		lhs.FacingDirOffset == rhs.FacingDirOffset &&
		lhs.Scale == rhs.Scale &&
		lhs.Node == rhs.Node &&
		lhs.Attach == rhs.Attach &&
		lhs.MirrorDuplicate == rhs.MirrorDuplicate &&
		lhs.UseModelFacingDir == rhs.UseModelFacingDir;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcLinkNetworkTypes
struct GcBaseGridSearchFilter
{
	int32_t GridHasMaxNonPassiveParts;
	int32_t GridHasMaxParts;
	int32_t GridHasMinNonPassiveParts;
	int32_t GridHasMinParts;
	int32_t GridRateIsGreaterThan;
	int32_t GridRateIsLessThan;
	NMS_GameComponents::GcLinkNetworkTypes NetworkType;
	int32_t PartRateIsGreaterThan;
	int32_t PartRateIsLessThan;
	bool GridHasANegativeRate;
	bool GridHasAPositiveRate;
	bool GridHasPositiveRatePotential;
	bool GridIsNotOnline;
	bool GridIsOnline;

	friend bool operator==(const GcBaseGridSearchFilter& lhs, const GcBaseGridSearchFilter& rhs) 
	{
		return lhs.GridHasMaxNonPassiveParts == rhs.GridHasMaxNonPassiveParts &&
		lhs.GridHasMaxParts == rhs.GridHasMaxParts &&
		lhs.GridHasMinNonPassiveParts == rhs.GridHasMinNonPassiveParts &&
		lhs.GridHasMinParts == rhs.GridHasMinParts &&
		lhs.GridRateIsGreaterThan == rhs.GridRateIsGreaterThan &&
		lhs.GridRateIsLessThan == rhs.GridRateIsLessThan &&
		lhs.NetworkType == rhs.NetworkType &&
		lhs.PartRateIsGreaterThan == rhs.PartRateIsGreaterThan &&
		lhs.PartRateIsLessThan == rhs.PartRateIsLessThan &&
		lhs.GridHasANegativeRate == rhs.GridHasANegativeRate &&
		lhs.GridHasAPositiveRate == rhs.GridHasAPositiveRate &&
		lhs.GridHasPositiveRatePotential == rhs.GridHasPositiveRatePotential &&
		lhs.GridIsNotOnline == rhs.GridIsNotOnline &&
		lhs.GridIsOnline == rhs.GridIsOnline;
	}
};

//Dependency: GcBaseGridSearchFilter
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcBasePartSearchFilter
{
	NMS::Vector3f ReferenceWorldPosition;
	NMS::NMSString0x10 IsSpecificID;
	NMS_GameComponents::GcBaseGridSearchFilter BaseGridFilter;
	float MaxDistance;
	bool ApplyGridFilter;
	bool PartIsNotOnline;
	bool PartIsNotVision;
	bool PartIsOnline;
	bool PartIsVision;

	friend bool operator==(const GcBasePartSearchFilter& lhs, const GcBasePartSearchFilter& rhs) 
	{
		return lhs.ReferenceWorldPosition == rhs.ReferenceWorldPosition &&
		lhs.IsSpecificID == rhs.IsSpecificID &&
		lhs.BaseGridFilter == rhs.BaseGridFilter &&
		lhs.MaxDistance == rhs.MaxDistance &&
		lhs.ApplyGridFilter == rhs.ApplyGridFilter &&
		lhs.PartIsNotOnline == rhs.PartIsNotOnline &&
		lhs.PartIsNotVision == rhs.PartIsNotVision &&
		lhs.PartIsOnline == rhs.PartIsOnline &&
		lhs.PartIsVision == rhs.PartIsVision;
	}
};

struct GcPersistentBaseTypes
{
	enum class PersistentBaseTypesEnum : uint32_t
	{
		HomePlanetBase = 0,
		FreighterBase = 1,
		ExternalPlanetBase = 2,
		CivilianFreighterBase = 3,
		FriendsPlanetBase = 4,
		FriendsFreighterBase = 5,
		SpaceBase = 6,
		GeneratedPlanetBase = 7,
		GeneratedPlanetBaseEdits = 8,
		PlayerShipBase = 9,
		FriendsShipBase = 10,
	};

	NMS_GameComponents::GcPersistentBaseTypes::PersistentBaseTypesEnum PersistentBaseTypes;

	friend bool operator==(const GcPersistentBaseTypes& lhs, const GcPersistentBaseTypes& rhs) 
	{
		return lhs.PersistentBaseTypes == rhs.PersistentBaseTypes;
	}
};

//Dependency: GcBasePartSearchFilter
//Dependency: GcPersistentBaseTypes
//Dependency: Vector3f
//Dependency: NMSString0x20A
struct GcBaseSearchFilter
{
	NMS_GameComponents::GcBasePartSearchFilter BasePartFilter;
	NMS::Vector3f ReferenceWorldPosition;
	NMS::NMSString0x20A OnSpecificPlanetScanEvent;
	std::vector<NMS_GameComponents::GcPersistentBaseTypes> MatchingTypes;
	uint64_t InSpecificSystem;
	uint64_t OnSpecificPlanet;
	int32_t ContainsMaxParts;
	int32_t ContainsMinParts;
	float MaxDistance;
	bool InCurrentSystem;
	bool IsBuildable;
	bool IsOverlapping;
	bool OnCurrentPlanet;

	friend bool operator==(const GcBaseSearchFilter& lhs, const GcBaseSearchFilter& rhs) 
	{
		return lhs.BasePartFilter == rhs.BasePartFilter &&
		lhs.ReferenceWorldPosition == rhs.ReferenceWorldPosition &&
		lhs.OnSpecificPlanetScanEvent == rhs.OnSpecificPlanetScanEvent &&
		lhs.MatchingTypes == rhs.MatchingTypes &&
		lhs.InSpecificSystem == rhs.InSpecificSystem &&
		lhs.OnSpecificPlanet == rhs.OnSpecificPlanet &&
		lhs.ContainsMaxParts == rhs.ContainsMaxParts &&
		lhs.ContainsMinParts == rhs.ContainsMinParts &&
		lhs.MaxDistance == rhs.MaxDistance &&
		lhs.InCurrentSystem == rhs.InCurrentSystem &&
		lhs.IsBuildable == rhs.IsBuildable &&
		lhs.IsOverlapping == rhs.IsOverlapping &&
		lhs.OnCurrentPlanet == rhs.OnCurrentPlanet;
	}
};

//Dependency: GcBaseSearchFilter
//Dependency: GcBasePartSearchFilter
struct GcMissionConditionBasePartsQuery
{
	NMS_GameComponents::GcBaseSearchFilter ExcludeBasesFilter;
	NMS_GameComponents::GcBasePartSearchFilter PartsSearchFilter;
	int32_t MaxPartsFound;
	int32_t MinPartsFound;
	float SearchDistanceLimit;
	bool ExcludeGlobalBuffer;

	friend bool operator==(const GcMissionConditionBasePartsQuery& lhs, const GcMissionConditionBasePartsQuery& rhs) 
	{
		return lhs.ExcludeBasesFilter == rhs.ExcludeBasesFilter &&
		lhs.PartsSearchFilter == rhs.PartsSearchFilter &&
		lhs.MaxPartsFound == rhs.MaxPartsFound &&
		lhs.MinPartsFound == rhs.MinPartsFound &&
		lhs.SearchDistanceLimit == rhs.SearchDistanceLimit &&
		lhs.ExcludeGlobalBuffer == rhs.ExcludeGlobalBuffer;
	}
};

//Dependency: NMSString0x10
struct GcInventoryBaseStatEntry
{
	NMS::NMSString0x10 BaseStatID;
	float Value;

	friend bool operator==(const GcInventoryBaseStatEntry& lhs, const GcInventoryBaseStatEntry& rhs) 
	{
		return lhs.BaseStatID == rhs.BaseStatID &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: GcInventoryIndex
//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcInventoryElement
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryIndex Index;
	int32_t Amount;
	float DamageFactor;
	int32_t MaxAmount;
	NMS_GameComponents::GcInventoryType Type;
	bool FullyInstalled;

	friend bool operator==(const GcInventoryElement& lhs, const GcInventoryElement& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Index == rhs.Index &&
		lhs.Amount == rhs.Amount &&
		lhs.DamageFactor == rhs.DamageFactor &&
		lhs.MaxAmount == rhs.MaxAmount &&
		lhs.Type == rhs.Type &&
		lhs.FullyInstalled == rhs.FullyInstalled;
	}
};

struct GcInventoryClass
{
	enum class InventoryClassEnum : uint32_t
	{
		C = 0,
		B = 1,
		A = 2,
		S = 3,
	};

	NMS_GameComponents::GcInventoryClass::InventoryClassEnum InventoryClass;

	friend bool operator==(const GcInventoryClass& lhs, const GcInventoryClass& rhs) 
	{
		return lhs.InventoryClass == rhs.InventoryClass;
	}
};

struct GcInventoryStackSizeGroup
{
	enum class InventoryStackSizeGroupEnum : uint32_t
	{
		Default = 0,
		Personal = 1,
		PersonalCargo = 2,
		Ship = 3,
		ShipCargo = 4,
		Freighter = 5,
		FreighterCargo = 6,
		Vehicle = 7,
		Chest = 8,
		BaseCapsule = 9,
		MaintenanceObject = 10,
		UIPopup = 11,
		SeasonTransfer = 12,
	};

	NMS_GameComponents::GcInventoryStackSizeGroup::InventoryStackSizeGroupEnum InventoryStackSizeGroup;

	friend bool operator==(const GcInventoryStackSizeGroup& lhs, const GcInventoryStackSizeGroup& rhs) 
	{
		return lhs.InventoryStackSizeGroup == rhs.InventoryStackSizeGroup;
	}
};

//Dependency: GcInventoryBaseStatEntry
//Dependency: GcInventoryElement
//Dependency: GcInventoryClass
//Dependency: NMSString0x100
//Dependency: GcInventorySpecialSlot
//Dependency: GcInventoryIndex
//Dependency: GcInventoryStackSizeGroup
struct GcInventoryContainer
{
	std::vector<NMS_GameComponents::GcInventoryBaseStatEntry> BaseStatValues;
	std::vector<NMS_GameComponents::GcInventoryElement> Slots;
	std::vector<NMS_GameComponents::GcInventorySpecialSlot> SpecialSlots;
	std::vector<NMS_GameComponents::GcInventoryIndex> ValidSlotIndices;
	NMS_GameComponents::GcInventoryClass Class;
	int32_t Height;
	NMS_GameComponents::GcInventoryStackSizeGroup StackSizeGroup;
	int32_t Version;
	int32_t Width;
	NMS::NMSString0x100 Name;
	bool IsCool;

	friend bool operator==(const GcInventoryContainer& lhs, const GcInventoryContainer& rhs) 
	{
		return lhs.BaseStatValues == rhs.BaseStatValues &&
		lhs.Slots == rhs.Slots &&
		lhs.SpecialSlots == rhs.SpecialSlots &&
		lhs.ValidSlotIndices == rhs.ValidSlotIndices &&
		lhs.Class == rhs.Class &&
		lhs.Height == rhs.Height &&
		lhs.StackSizeGroup == rhs.StackSizeGroup &&
		lhs.Version == rhs.Version &&
		lhs.Width == rhs.Width &&
		lhs.Name == rhs.Name &&
		lhs.IsCool == rhs.IsCool;
	}
};

//Dependency: GcInventoryContainer
//Dependency: GcInventoryLayout
struct GcSeasonTransferInventoryData
{
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryLayout Layout;
	int32_t SeasonId;

	friend bool operator==(const GcSeasonTransferInventoryData& lhs, const GcSeasonTransferInventoryData& rhs) 
	{
		return lhs.Inventory == rhs.Inventory &&
		lhs.Layout == rhs.Layout &&
		lhs.SeasonId == rhs.SeasonId;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueInteger
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	int32_t DefaultValue;

	friend bool operator==(const TkBlackboardDefaultValueInteger& lhs, const TkBlackboardDefaultValueInteger& rhs) 
	{
		return lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.BlackboardCategory == rhs.BlackboardCategory &&
		lhs.DefaultValue == rhs.DefaultValue;
	}
};

struct TkBlackboardComparisonTypeEnum
{
	enum class ComparisonTypeEnum : uint32_t
	{
		Equal = 0,
		NotEqual = 1,
		GreaterThan = 2,
		GreaterThanEqual = 3,
		LessThan = 4,
		LessThanEqual = 5,
	};

	NMS_Toolkit::TkBlackboardComparisonTypeEnum::ComparisonTypeEnum ComparisonType;

	friend bool operator==(const TkBlackboardComparisonTypeEnum& lhs, const TkBlackboardComparisonTypeEnum& rhs) 
	{
		return lhs.ComparisonType == rhs.ComparisonType;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueInteger
//Dependency: TkBlackboardComparisonTypeEnum
//Dependency: NMSString0x10
struct GcBlackboardIntCompareDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueInteger CompareTo;
	NMS::NMSString0x10 Key;
	NMSTemplate OnFalse;
	NMSTemplate OnTrue;
	NMS_Toolkit::TkBlackboardComparisonTypeEnum Comparison;

	friend bool operator==(const GcBlackboardIntCompareDecoratorData& lhs, const GcBlackboardIntCompareDecoratorData& rhs) 
	{
		return lhs.CompareTo == rhs.CompareTo &&
		lhs.Key == rhs.Key &&
		lhs.OnFalse == rhs.OnFalse &&
		lhs.OnTrue == rhs.OnTrue &&
		lhs.Comparison == rhs.Comparison;
	}
};

//Dependency: Colour
struct GcGalaxyStarColours
{
	NMS::Colour ColourByStarType[5];

	friend bool operator==(const GcGalaxyStarColours& lhs, const GcGalaxyStarColours& rhs) 
	{
		return std::equal(std::begin(lhs.ColourByStarType), std::end(lhs.ColourByStarType), std::begin(rhs.ColourByStarType));
	}
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcAlienSpeechEntry
{
	enum class WordInteractEffectEnum : uint32_t
	{
		Pain = 0,
		Heal = 1,
	};

	NMS::NMSString0x20A Group;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	int32_t Frequency;
	int32_t Level;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcAlienSpeechEntry::WordInteractEffectEnum WordInteractEffect;

	friend bool operator==(const GcAlienSpeechEntry& lhs, const GcAlienSpeechEntry& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.Text == rhs.Text &&
		lhs.Id == rhs.Id &&
		lhs.Category == rhs.Category &&
		lhs.Frequency == rhs.Frequency &&
		lhs.Level == rhs.Level &&
		lhs.Race == rhs.Race &&
		lhs.WordInteractEffect == rhs.WordInteractEffect;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionCookingSearch
{
	NMS::NMSString0x10 Product;
	int32_t Amount;
	bool ReturnTrueIfCanMakeProduct;
	bool SetIcon;

	friend bool operator==(const GcMissionConditionCookingSearch& lhs, const GcMissionConditionCookingSearch& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.Amount == rhs.Amount &&
		lhs.ReturnTrueIfCanMakeProduct == rhs.ReturnTrueIfCanMakeProduct &&
		lhs.SetIcon == rhs.SetIcon;
	}
};

//Dependency: GcAlienSpeechEntry
struct GcAlienSpeechTable
{
	std::vector<NMS_GameComponents::GcAlienSpeechEntry> Table;

	friend bool operator==(const GcAlienSpeechTable& lhs, const GcAlienSpeechTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
struct TkMeshData
{
	NMS::VariableSizeString IdString;
	uint8_t MeshDataStream;
	uint8_t MeshPositionDataStream;
	uint64_t Hash;
	int32_t IndexDataSize;
	int32_t VertexDataSize;
	int32_t VertexPositionDataSize;

	friend bool operator==(const TkMeshData& lhs, const TkMeshData& rhs) 
	{
		return lhs.IdString == rhs.IdString &&
		lhs.MeshDataStream == rhs.MeshDataStream &&
		lhs.MeshPositionDataStream == rhs.MeshPositionDataStream &&
		lhs.Hash == rhs.Hash &&
		lhs.IndexDataSize == rhs.IndexDataSize &&
		lhs.VertexDataSize == rhs.VertexDataSize &&
		lhs.VertexPositionDataSize == rhs.VertexPositionDataSize;
	}
};

//Dependency: TkMeshData
struct TkGeometryStreamData
{
	std::vector<NMS_Toolkit::TkMeshData> StreamDataArray;

	friend bool operator==(const TkGeometryStreamData& lhs, const TkGeometryStreamData& rhs) 
	{
		return lhs.StreamDataArray == rhs.StreamDataArray;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBasePartAudioLocation
//Dependency: NMSString0x10
struct GcBaseBuildingPartAudioLocationEntry
{
	NMS::NMSString0x10 PartId;
	NMS_GameComponents::GcBasePartAudioLocation AudioLocation;

	friend bool operator==(const GcBaseBuildingPartAudioLocationEntry& lhs, const GcBaseBuildingPartAudioLocationEntry& rhs) 
	{
		return lhs.PartId == rhs.PartId &&
		lhs.AudioLocation == rhs.AudioLocation;
	}
};

//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationFreighterEngineEffect
{
	NMS::Colour GlowColour;
	NMS_Toolkit::TkModelResource EffectResource;
	NMS::NMSString0x20A Tip;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 LinkedTechID;
	NMS::NMSString0x10 Name;

	friend bool operator==(const GcCustomisationFreighterEngineEffect& lhs, const GcCustomisationFreighterEngineEffect& rhs) 
	{
		return lhs.GlowColour == rhs.GlowColour &&
		lhs.EffectResource == rhs.EffectResource &&
		lhs.Tip == rhs.Tip &&
		lhs.LinkedSpecialID == rhs.LinkedSpecialID &&
		lhs.LinkedTechID == rhs.LinkedTechID &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: NMSString0x10
struct GcProceduralProductDeployable
{
	NMS::NMSString0x10 BaseID;
	int32_t Variants;

	friend bool operator==(const GcProceduralProductDeployable& lhs, const GcProceduralProductDeployable& rhs) 
	{
		return lhs.BaseID == rhs.BaseID &&
		lhs.Variants == rhs.Variants;
	}
};

struct GcStatsValueTypes
{
	enum class StatsValueEnum : uint32_t
	{
		DistanceJetpacked = 0,
		DistanceWalked = 1,
		DistanceWarped = 2,
		DamageSustained = 3,
	};

	NMS_GameComponents::GcStatsValueTypes::StatsValueEnum StatsValue;

	friend bool operator==(const GcStatsValueTypes& lhs, const GcStatsValueTypes& rhs) 
	{
		return lhs.StatsValue == rhs.StatsValue;
	}
};

//Dependency: Vector3f
struct GcCreatureDestroyInstancesData
{
	NMS::Vector3f Offset;
	float MinInstanceRadius;
	float Radius;
	bool DebugDraw;

	friend bool operator==(const GcCreatureDestroyInstancesData& lhs, const GcCreatureDestroyInstancesData& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.MinInstanceRadius == rhs.MinInstanceRadius &&
		lhs.Radius == rhs.Radius &&
		lhs.DebugDraw == rhs.DebugDraw;
	}
};

struct GcInteractionBufferType
{
	enum class InteractionBufferTypeEnum : uint32_t
	{
		Distress_Signal = 0,
		Crate = 1,
		Destructable = 2,
		Terrain = 3,
		Cost = 4,
		Building = 5,
		Creature = 6,
		Maintenance = 7,
		Personal = 8,
		Personal_Maintenance = 9,
		FireteamSync = 10,
	};

	NMS_GameComponents::GcInteractionBufferType::InteractionBufferTypeEnum InteractionBufferType;

	friend bool operator==(const GcInteractionBufferType& lhs, const GcInteractionBufferType& rhs) 
	{
		return lhs.InteractionBufferType == rhs.InteractionBufferType;
	}
};

//Dependency: GcInteractionBufferType
//Dependency: NMSString0x10
struct GcPersistencyMissionOverride
{
	NMS::NMSString0x10 Mission;
	NMS_GameComponents::GcInteractionBufferType Buffer;

	friend bool operator==(const GcPersistencyMissionOverride& lhs, const GcPersistencyMissionOverride& rhs) 
	{
		return lhs.Mission == rhs.Mission &&
		lhs.Buffer == rhs.Buffer;
	}
};

struct GcMissionGalacticFeature
{
	enum class GalacticFeatureEnum : uint32_t
	{
		Anomaly = 0,
		Atlas = 1,
		BlackHole = 2,
	};

	NMS_GameComponents::GcMissionGalacticFeature::GalacticFeatureEnum GalacticFeature;

	friend bool operator==(const GcMissionGalacticFeature& lhs, const GcMissionGalacticFeature& rhs) 
	{
		return lhs.GalacticFeature == rhs.GalacticFeature;
	}
};

//Dependency: GcMissionGalacticFeature
struct GcMissionConditionHasGalacticFeature
{
	NMS_GameComponents::GcMissionGalacticFeature Type;
	bool RequireUnusedAtlas;

	friend bool operator==(const GcMissionConditionHasGalacticFeature& lhs, const GcMissionConditionHasGalacticFeature& rhs) 
	{
		return lhs.Type == rhs.Type &&
		lhs.RequireUnusedAtlas == rhs.RequireUnusedAtlas;
	}
};

struct GcMiningComponentData
{
	float Range;
	float Speed;

	friend bool operator==(const GcMiningComponentData& lhs, const GcMiningComponentData& rhs) 
	{
		return lhs.Range == rhs.Range &&
		lhs.Speed == rhs.Speed;
	}
};

//Dependency: NMSString0x10
struct GcBuildingCostPartCount
{
	NMS::NMSString0x10 Id;
	int32_t Count;

	friend bool operator==(const GcBuildingCostPartCount& lhs, const GcBuildingCostPartCount& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Count == rhs.Count;
	}
};

//Dependency: NMSString0x20A
struct GcID256Enum
{
	std::vector<NMS::NMSString0x20A> Values;

	friend bool operator==(const GcID256Enum& lhs, const GcID256Enum& rhs) 
	{
		return lhs.Values == rhs.Values;
	}
};

//Dependency: NMSString0x10
struct GcCameraAmbientBuildingData
{
	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	float Offset;
	bool AvailableBuildings[60];
	bool AvailableRaces[9];
	bool AvoidTerrain;
	bool UseLookAt;

	friend bool operator==(const GcCameraAmbientBuildingData& lhs, const GcCameraAmbientBuildingData& rhs) 
	{
		return lhs.Animation == rhs.Animation &&
		lhs.DroneAnimation == rhs.DroneAnimation &&
		lhs.Offset == rhs.Offset &&
		std::equal(std::begin(lhs.AvailableBuildings), std::end(lhs.AvailableBuildings), std::begin(rhs.AvailableBuildings)) &&
		std::equal(std::begin(lhs.AvailableRaces), std::end(lhs.AvailableRaces), std::begin(rhs.AvailableRaces)) &&
		lhs.AvoidTerrain == rhs.AvoidTerrain &&
		lhs.UseLookAt == rhs.UseLookAt;
	}
};

//Dependency: NMSString0x10
struct GcCameraAmbientSpaceData
{
	enum class OriginEnum : uint32_t
	{
		SpaceStationInternals = 0,
		SpaceStationBack = 1,
		FreighterBattle = 2,
		Freighter = 3,
		FreighterHangar = 4,
		AtlasStation = 5,
		BlackHole = 6,
		Anomaly = 7,
	};

	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	NMS_GameComponents::GcCameraAmbientSpaceData::OriginEnum Origin;

	friend bool operator==(const GcCameraAmbientSpaceData& lhs, const GcCameraAmbientSpaceData& rhs) 
	{
		return lhs.Animation == rhs.Animation &&
		lhs.DroneAnimation == rhs.DroneAnimation &&
		lhs.Origin == rhs.Origin;
	}
};

//Dependency: NMSString0x10
struct GcCameraAmbientSpecialData
{
	enum class CameraOriginEnum : uint32_t
	{
		ExternalBase = 0,
	};

	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	NMS_GameComponents::GcCameraAmbientSpecialData::CameraOriginEnum CameraOrigin;
	bool AvoidTerrain;
	bool UseLookAt;

	friend bool operator==(const GcCameraAmbientSpecialData& lhs, const GcCameraAmbientSpecialData& rhs) 
	{
		return lhs.Animation == rhs.Animation &&
		lhs.DroneAnimation == rhs.DroneAnimation &&
		lhs.CameraOrigin == rhs.CameraOrigin &&
		lhs.AvoidTerrain == rhs.AvoidTerrain &&
		lhs.UseLookAt == rhs.UseLookAt;
	}
};

//Dependency: GcCameraAmbientBuildingData
//Dependency: GcCameraAmbientSpaceData
//Dependency: GcCameraAmbientSpecialData
struct GcAmbientModeCameras
{
	std::vector<NMS_GameComponents::GcCameraAmbientBuildingData> BuildingCameraAnimations;
	std::vector<NMS_GameComponents::GcCameraAmbientSpaceData> SpaceCameraAnimations;
	std::vector<NMS_GameComponents::GcCameraAmbientSpecialData> SpecialCameraAnimations;

	friend bool operator==(const GcAmbientModeCameras& lhs, const GcAmbientModeCameras& rhs) 
	{
		return lhs.BuildingCameraAnimations == rhs.BuildingCameraAnimations &&
		lhs.SpaceCameraAnimations == rhs.SpaceCameraAnimations &&
		lhs.SpecialCameraAnimations == rhs.SpecialCameraAnimations;
	}
};

//Dependency: GcNPCHabitationType
struct GcMissionConditionNPCHabitationHasWorker
{
	enum class WorkerInCurrentBaseEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcMissionConditionNPCHabitationHasWorker::WorkerInCurrentBaseEnum WorkerInCurrentBase;
	NMS_GameComponents::GcNPCHabitationType WorkerType;

	friend bool operator==(const GcMissionConditionNPCHabitationHasWorker& lhs, const GcMissionConditionNPCHabitationHasWorker& rhs) 
	{
		return lhs.WorkerInCurrentBase == rhs.WorkerInCurrentBase &&
		lhs.WorkerType == rhs.WorkerType;
	}
};

//Dependency: GcGalaxyStarAnomaly
//Dependency: VariableSizeString
struct GcMissionSequenceStartSummonAnomaly
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;
	float SummonInFrontDistance;

	friend bool operator==(const GcMissionSequenceStartSummonAnomaly& lhs, const GcMissionSequenceStartSummonAnomaly& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Anomaly == rhs.Anomaly &&
		lhs.SummonInFrontDistance == rhs.SummonInFrontDistance;
	}
};

//Dependency: TkCurveType
struct GcVibrationData
{
	float DecayTime;
	float OutputStrength;
	float SmoothTime;
	float Variance;
	float VarianceContrast;
	NMS_Toolkit::TkCurveType OutputStrengthCurve;

	friend bool operator==(const GcVibrationData& lhs, const GcVibrationData& rhs) 
	{
		return lhs.DecayTime == rhs.DecayTime &&
		lhs.OutputStrength == rhs.OutputStrength &&
		lhs.SmoothTime == rhs.SmoothTime &&
		lhs.Variance == rhs.Variance &&
		lhs.VarianceContrast == rhs.VarianceContrast &&
		lhs.OutputStrengthCurve == rhs.OutputStrengthCurve;
	}
};

//Dependency: GcVibrationData
//Dependency: NMSString0x10
struct GcVibrationChannelData
{
	enum class VRAffectedHandsEnum : uint32_t
	{
		Both = 0,
		LeftOnly = 1,
		RightOnly = 2,
		DisableInVR = 3,
	};

	enum class DataEnum : uint32_t
	{
		Left = 0,
		Right = 1,
	};

	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcVibrationData Data[2];
	NMS_GameComponents::GcVibrationChannelData::VRAffectedHandsEnum VRAffectedHands;
	bool VROnly;
	bool VRSwapHandForLeftHanded;

	friend bool operator==(const GcVibrationChannelData& lhs, const GcVibrationChannelData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		std::equal(std::begin(lhs.Data), std::end(lhs.Data), std::begin(rhs.Data)) &&
		lhs.VRAffectedHands == rhs.VRAffectedHands &&
		lhs.VROnly == rhs.VROnly &&
		lhs.VRSwapHandForLeftHanded == rhs.VRSwapHandForLeftHanded;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostMissionActive
{
	NMS::NMSString0x20A CostString;
	NMS::NMSString0x10 MissionID;

	friend bool operator==(const GcCostMissionActive& lhs, const GcCostMissionActive& rhs) 
	{
		return lhs.CostString == rhs.CostString &&
		lhs.MissionID == rhs.MissionID;
	}
};

struct GcCostCanUseShipPad
{
	bool ShipPadAvalible;

	friend bool operator==(const GcCostCanUseShipPad& lhs, const GcCostCanUseShipPad& rhs) 
	{
		return lhs.ShipPadAvalible == rhs.ShipPadAvalible;
	}
};

//Dependency: Vector3f
//Dependency: Vector4f
struct GcInWorldUIScreenData
{
	NMS::Vector3f ScreenOffset;
	NMS::Vector4f ScreenRotation;
	float ScreenScale;

	friend bool operator==(const GcInWorldUIScreenData& lhs, const GcInWorldUIScreenData& rhs) 
	{
		return lhs.ScreenOffset == rhs.ScreenOffset &&
		lhs.ScreenRotation == rhs.ScreenRotation &&
		lhs.ScreenScale == rhs.ScreenScale;
	}
};

//Dependency: NMSString0x10
struct GcCharacterCustomisationBoneScaleData
{
	NMS::NMSString0x10 BoneName;
	float Scale;

	friend bool operator==(const GcCharacterCustomisationBoneScaleData& lhs, const GcCharacterCustomisationBoneScaleData& rhs) 
	{
		return lhs.BoneName == rhs.BoneName &&
		lhs.Scale == rhs.Scale;
	}
};

//Dependency: TkPaletteTexture
//Dependency: Colour
struct GcCharacterCustomisationColourData
{
	NMS::Colour Colour;
	NMS_Toolkit::TkPaletteTexture Palette;

	friend bool operator==(const GcCharacterCustomisationColourData& lhs, const GcCharacterCustomisationColourData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Palette == rhs.Palette;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCharacterCustomisationTextureOptionData
{
	NMS::NMSString0x20A TextureOptionName;
	NMS::NMSString0x10 TextureOptionGroupName;

	friend bool operator==(const GcCharacterCustomisationTextureOptionData& lhs, const GcCharacterCustomisationTextureOptionData& rhs) 
	{
		return lhs.TextureOptionName == rhs.TextureOptionName &&
		lhs.TextureOptionGroupName == rhs.TextureOptionGroupName;
	}
};

//Dependency: GcCharacterCustomisationBoneScaleData
//Dependency: GcCharacterCustomisationColourData
//Dependency: GcCharacterCustomisationTextureOptionData
//Dependency: NMSString0x10
struct GcCharacterCustomisationData
{
	std::vector<NMS_GameComponents::GcCharacterCustomisationBoneScaleData> BoneScales;
	std::vector<NMS_GameComponents::GcCharacterCustomisationColourData> Colours;
	std::vector<NMS::NMSString0x10> DescriptorGroups;
	NMS::NMSString0x10 PaletteID;
	std::vector<NMS_GameComponents::GcCharacterCustomisationTextureOptionData> TextureOptions;
	float Scale;

	friend bool operator==(const GcCharacterCustomisationData& lhs, const GcCharacterCustomisationData& rhs) 
	{
		return lhs.BoneScales == rhs.BoneScales &&
		lhs.Colours == rhs.Colours &&
		lhs.DescriptorGroups == rhs.DescriptorGroups &&
		lhs.PaletteID == rhs.PaletteID &&
		lhs.TextureOptions == rhs.TextureOptions &&
		lhs.Scale == rhs.Scale;
	}
};

//Dependency: GcInWorldUIScreenData
//Dependency: GcCharacterCustomisationData
//Dependency: GcInventoryContainer
//Dependency: GcResourceElement
//Dependency: GcInventoryLayout
//Dependency: GcSeed
//Dependency: NMSString0x20
struct GcMultitoolData
{
	NMS_GameComponents::GcInWorldUIScreenData ScreenData;
	NMS_GameComponents::GcInventoryContainer Store;
	NMS_GameComponents::GcCharacterCustomisationData CustomisationData;
	NMS_GameComponents::GcResourceElement Resource;
	NMS_GameComponents::GcInventoryLayout Layout;
	NMS::GcSeed Seed;
	int32_t PrimaryMode;
	int32_t SecondaryMode;
	NMS::NMSString0x20 Name;
	bool IsLarge;
	bool UseLegacyColours;

	friend bool operator==(const GcMultitoolData& lhs, const GcMultitoolData& rhs) 
	{
		return lhs.ScreenData == rhs.ScreenData &&
		lhs.Store == rhs.Store &&
		lhs.CustomisationData == rhs.CustomisationData &&
		lhs.Resource == rhs.Resource &&
		lhs.Layout == rhs.Layout &&
		lhs.Seed == rhs.Seed &&
		lhs.PrimaryMode == rhs.PrimaryMode &&
		lhs.SecondaryMode == rhs.SecondaryMode &&
		lhs.Name == rhs.Name &&
		lhs.IsLarge == rhs.IsLarge &&
		lhs.UseLegacyColours == rhs.UseLegacyColours;
	}
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x10
struct GcMaintenanceOverride
{
	NMS_GameComponents::GcMaintenanceComponentData Data;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcMaintenanceOverride& lhs, const GcMaintenanceOverride& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: TkPaletteTexture
struct GcTileTypeSet
{
	NMS_Toolkit::TkPaletteTexture Colours[12];
	float Probability;

	friend bool operator==(const GcTileTypeSet& lhs, const GcTileTypeSet& rhs) 
	{
		return std::equal(std::begin(lhs.Colours), std::end(lhs.Colours), std::begin(rhs.Colours)) &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: GcTileTypeSet
struct GcTileTypeSets
{
	std::vector<NMS_GameComponents::GcTileTypeSet> TileTypeSets;

	friend bool operator==(const GcTileTypeSets& lhs, const GcTileTypeSets& rhs) 
	{
		return lhs.TileTypeSets == rhs.TileTypeSets;
	}
};

//Dependency: NMSString0x10
struct GcAntagonistEnemy
{
	std::vector<NMS::NMSString0x10> Perceptions;
	float GrudgeFactor;
	float HatredFactor;

	friend bool operator==(const GcAntagonistEnemy& lhs, const GcAntagonistEnemy& rhs) 
	{
		return lhs.Perceptions == rhs.Perceptions &&
		lhs.GrudgeFactor == rhs.GrudgeFactor &&
		lhs.HatredFactor == rhs.HatredFactor;
	}
};

//Dependency: NMSString0x10
struct GcAntagonistFriend
{
	std::vector<NMS::NMSString0x10> Perceptions;
	float ArticulationFactor;

	friend bool operator==(const GcAntagonistFriend& lhs, const GcAntagonistFriend& rhs) 
	{
		return lhs.Perceptions == rhs.Perceptions &&
		lhs.ArticulationFactor == rhs.ArticulationFactor;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcAntagonistPerception
{
	enum class ViewShapeEnum : uint32_t
	{
		Pyramid = 0,
		Cone = 1,
	};

	NMS::NMSString0x10 Id;
	float Range;
	NMS_GameComponents::GcAntagonistPerception::ViewShapeEnum ViewShape;
	float XFOV;
	float YFOV;
	NMS::NMSString0x20 SenseLocator;
	bool Raycast;

	friend bool operator==(const GcAntagonistPerception& lhs, const GcAntagonistPerception& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Range == rhs.Range &&
		lhs.ViewShape == rhs.ViewShape &&
		lhs.XFOV == rhs.XFOV &&
		lhs.YFOV == rhs.YFOV &&
		lhs.SenseLocator == rhs.SenseLocator &&
		lhs.Raycast == rhs.Raycast;
	}
};

struct GcAntagonistGroup
{
	enum class AntagonistGroupEnum : uint32_t
	{
		Player = 0,
		Fiends = 1,
		Creatures = 2,
		Sentinels = 3,
		Turrets = 4,
		Walls = 5,
	};

	NMS_GameComponents::GcAntagonistGroup::AntagonistGroupEnum AntagonistGroup;

	friend bool operator==(const GcAntagonistGroup& lhs, const GcAntagonistGroup& rhs) 
	{
		return lhs.AntagonistGroup == rhs.AntagonistGroup;
	}
};

//Dependency: GcAntagonistEnemy
//Dependency: GcAntagonistFriend
//Dependency: GcAntagonistPerception
//Dependency: GcAntagonistGroup
struct GcAntagonistComponentData
{
	NMS_GameComponents::GcAntagonistEnemy Enemies[6];
	NMS_GameComponents::GcAntagonistFriend Friends[6];
	std::vector<NMS_GameComponents::GcAntagonistPerception> Perceptions;
	float CommunicationDelay;
	float ComprehensionFactor;
	NMS_GameComponents::GcAntagonistGroup Group;
	float ScarinessFactor;
	float ShockedFactor;

	friend bool operator==(const GcAntagonistComponentData& lhs, const GcAntagonistComponentData& rhs) 
	{
		return std::equal(std::begin(lhs.Enemies), std::end(lhs.Enemies), std::begin(rhs.Enemies)) &&
		std::equal(std::begin(lhs.Friends), std::end(lhs.Friends), std::begin(rhs.Friends)) &&
		lhs.Perceptions == rhs.Perceptions &&
		lhs.CommunicationDelay == rhs.CommunicationDelay &&
		lhs.ComprehensionFactor == rhs.ComprehensionFactor &&
		lhs.Group == rhs.Group &&
		lhs.ScarinessFactor == rhs.ScarinessFactor &&
		lhs.ShockedFactor == rhs.ShockedFactor;
	}
};

//Dependency: NMSString0x10
struct GcRewardCompleteMultiMission
{
	std::vector<NMS::NMSString0x10> Missions;

	friend bool operator==(const GcRewardCompleteMultiMission& lhs, const GcRewardCompleteMultiMission& rhs) 
	{
		return lhs.Missions == rhs.Missions;
	}
};

struct GcModularCustomisationEffectsData
{
	enum class ModularCustomisationEffectModeEnum : uint32_t
	{
		Build = 0,
		BuildOutward = 1,
		Dissolve = 2,
	};

	float EffectTime;
	NMS_GameComponents::GcModularCustomisationEffectsData::ModularCustomisationEffectModeEnum ModularCustomisationEffectMode;

	friend bool operator==(const GcModularCustomisationEffectsData& lhs, const GcModularCustomisationEffectsData& rhs) 
	{
		return lhs.EffectTime == rhs.EffectTime &&
		lhs.ModularCustomisationEffectMode == rhs.ModularCustomisationEffectMode;
	}
};

//Dependency: TkTextureResource
struct GcWaypointComponentData
{
	NMS_Toolkit::TkTextureResource Icon;

	friend bool operator==(const GcWaypointComponentData& lhs, const GcWaypointComponentData& rhs) 
	{
		return lhs.Icon == rhs.Icon;
	}
};

//Dependency: VariableSizeString
struct GcFrigateTraitIcons
{
	NMS::VariableSizeString Icons[11];

	friend bool operator==(const GcFrigateTraitIcons& lhs, const GcFrigateTraitIcons& rhs) 
	{
		return std::equal(std::begin(lhs.Icons), std::end(lhs.Icons), std::begin(rhs.Icons));
	}
};

//Dependency: TkCurveType
struct GcCompositeCurveElementData
{
	float Duration;
	float EndValue;
	NMS_Toolkit::TkCurveType CurveType;

	friend bool operator==(const GcCompositeCurveElementData& lhs, const GcCompositeCurveElementData& rhs) 
	{
		return lhs.Duration == rhs.Duration &&
		lhs.EndValue == rhs.EndValue &&
		lhs.CurveType == rhs.CurveType;
	}
};

//Dependency: GcGameMode
//Dependency: NMSString0x20A
struct GcCostGameMode
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcGameMode Mode;
	int32_t SpecificSeasonIndex;
	bool InvertMode;

	friend bool operator==(const GcCostGameMode& lhs, const GcCostGameMode& rhs) 
	{
		return lhs.CostStringCantAfford == rhs.CostStringCantAfford &&
		lhs.Mode == rhs.Mode &&
		lhs.SpecificSeasonIndex == rhs.SpecificSeasonIndex &&
		lhs.InvertMode == rhs.InvertMode;
	}
};

struct GcReputationGainDifficultyOption
{
	enum class ReputationGainDifficultyEnum : uint32_t
	{
		VeryFast = 0,
		Fast = 1,
		Normal = 2,
		Slow = 3,
	};

	NMS_GameComponents::GcReputationGainDifficultyOption::ReputationGainDifficultyEnum ReputationGainDifficulty;

	friend bool operator==(const GcReputationGainDifficultyOption& lhs, const GcReputationGainDifficultyOption& rhs) 
	{
		return lhs.ReputationGainDifficulty == rhs.ReputationGainDifficulty;
	}
};

struct GcFrigateStatType
{
	enum class FrigateStatTypeEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomatic = 3,
		FuelBurnRate = 4,
		FuelCapacity = 5,
		Speed = 6,
		ExtraLoot = 7,
		Repair = 8,
		Invulnerable = 9,
		Stealth = 10,
	};

	NMS_GameComponents::GcFrigateStatType::FrigateStatTypeEnum FrigateStatType;

	friend bool operator==(const GcFrigateStatType& lhs, const GcFrigateStatType& rhs) 
	{
		return lhs.FrigateStatType == rhs.FrigateStatType;
	}
};

//Dependency: GcFrigateStatType
//Dependency: GcFrigateTraitStrength
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcFrigateTraitData
{
	NMS::NMSString0x20A DisplayName;
	NMS::NMSString0x10 ID;
	int32_t ChanceOfBeingOffered[10];
	NMS_GameComponents::GcFrigateStatType FrigateStatType;
	NMS_GameComponents::GcFrigateTraitStrength Strength;

	friend bool operator==(const GcFrigateTraitData& lhs, const GcFrigateTraitData& rhs) 
	{
		return lhs.DisplayName == rhs.DisplayName &&
		lhs.ID == rhs.ID &&
		std::equal(std::begin(lhs.ChanceOfBeingOffered), std::end(lhs.ChanceOfBeingOffered), std::begin(rhs.ChanceOfBeingOffered)) &&
		lhs.FrigateStatType == rhs.FrigateStatType &&
		lhs.Strength == rhs.Strength;
	}
};

//Dependency: GcScanEffectData
struct GcDiscoveryDisplayComponentData
{
	NMS_GameComponents::GcScanEffectData DiscoveryScanEffect;
	float DiscoveryScale;
	float DiscoveryScalePlanets;

	friend bool operator==(const GcDiscoveryDisplayComponentData& lhs, const GcDiscoveryDisplayComponentData& rhs) 
	{
		return lhs.DiscoveryScanEffect == rhs.DiscoveryScanEffect &&
		lhs.DiscoveryScale == rhs.DiscoveryScale &&
		lhs.DiscoveryScalePlanets == rhs.DiscoveryScalePlanets;
	}
};

struct GcBiomeSubType
{
	enum class BiomeSubTypeEnum : uint32_t
	{
		None = 0,
		Standard = 1,
		HighQuality = 2,
		Structure = 3,
		Beam = 4,
		Hexagon = 5,
		FractCube = 6,
		Bubble = 7,
		Shards = 8,
		Contour = 9,
		Shell = 10,
		BoneSpire = 11,
		WireCell = 12,
		HydroGarden = 13,
		HugePlant = 14,
		HugeLush = 15,
		HugeRing = 16,
		HugeRock = 17,
		HugeScorch = 18,
		HugeToxic = 19,
		Variant_A = 20,
		Variant_B = 21,
		Variant_C = 22,
		Variant_D = 23,
		Infested = 24,
		Swamp = 25,
		Lava = 26,
		Worlds = 27,
		Remix_A = 28,
		Remix_B = 29,
		Remix_C = 30,
		Remix_D = 31,
	};

	NMS_GameComponents::GcBiomeSubType::BiomeSubTypeEnum BiomeSubType;

	friend bool operator==(const GcBiomeSubType& lhs, const GcBiomeSubType& rhs) 
	{
		return lhs.BiomeSubType == rhs.BiomeSubType;
	}
};

//Dependency: GcBiomeSubType
//Dependency: VariableSizeString
struct GcBiomeFileListOption
{
	NMS::VariableSizeString Filename;
	float PurpleSystemWeight;
	NMS_GameComponents::GcBiomeSubType SubType;
	float Weight;

	friend bool operator==(const GcBiomeFileListOption& lhs, const GcBiomeFileListOption& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.PurpleSystemWeight == rhs.PurpleSystemWeight &&
		lhs.SubType == rhs.SubType &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: NMSString0x10
struct GcCostJourneyStatLevel
{
	NMS::NMSString0x10 StatName;
	int32_t RequiredLevel;

	friend bool operator==(const GcCostJourneyStatLevel& lhs, const GcCostJourneyStatLevel& rhs) 
	{
		return lhs.StatName == rhs.StatName &&
		lhs.RequiredLevel == rhs.RequiredLevel;
	}
};

//Dependency: GcLeveledStatData
struct GcLeveledStatTable
{
	std::vector<NMS_GameComponents::GcLeveledStatData> LeveledStatTable;

	friend bool operator==(const GcLeveledStatTable& lhs, const GcLeveledStatTable& rhs) 
	{
		return lhs.LeveledStatTable == rhs.LeveledStatTable;
	}
};

//Dependency: TkPaletteTexture
//Dependency: Colour
struct GcHeavyAirSettingValues
{
	NMS::Colour ForceColour1;
	NMS::Colour ForceColour2;
	NMS_Toolkit::TkPaletteTexture Colour1;
	NMS_Toolkit::TkPaletteTexture Colour2;
	float Alpha1;
	float Alpha2;
	float Speed;
	float Thickness;
	bool ForceColour;
	bool ReduceThicknessWithCloudCoverage;

	friend bool operator==(const GcHeavyAirSettingValues& lhs, const GcHeavyAirSettingValues& rhs) 
	{
		return lhs.ForceColour1 == rhs.ForceColour1 &&
		lhs.ForceColour2 == rhs.ForceColour2 &&
		lhs.Colour1 == rhs.Colour1 &&
		lhs.Colour2 == rhs.Colour2 &&
		lhs.Alpha1 == rhs.Alpha1 &&
		lhs.Alpha2 == rhs.Alpha2 &&
		lhs.Speed == rhs.Speed &&
		lhs.Thickness == rhs.Thickness &&
		lhs.ForceColour == rhs.ForceColour &&
		lhs.ReduceThicknessWithCloudCoverage == rhs.ReduceThicknessWithCloudCoverage;
	}
};

//Dependency: GcHeavyAirSettingValues
struct GcHeavyAirSetting
{
	NMS_GameComponents::GcHeavyAirSettingValues Settings[5];

	friend bool operator==(const GcHeavyAirSetting& lhs, const GcHeavyAirSetting& rhs) 
	{
		return std::equal(std::begin(lhs.Settings), std::end(lhs.Settings), std::begin(rhs.Settings));
	}
};

//Dependency: GcHeavyAirSetting
struct GcFogProperties
{
	NMS_GameComponents::GcHeavyAirSetting HeavyAir;
	float CloudRatio;
	float DepthOfField;
	float DepthOfFieldDistance;
	float DepthOfFieldFade;
	float FogColourMax;
	float FogColourStrength;
	float FogHeight;
	float FogMax;
	float FogStrength;
	float FullscreenEffect;
	float HeightFogFadeOutStrength;
	float HeightFogMax;
	float HeightFogOffset;
	float HeightFogStrength;
	float RainWetness;
	bool IsRaining;

	friend bool operator==(const GcFogProperties& lhs, const GcFogProperties& rhs) 
	{
		return lhs.HeavyAir == rhs.HeavyAir &&
		lhs.CloudRatio == rhs.CloudRatio &&
		lhs.DepthOfField == rhs.DepthOfField &&
		lhs.DepthOfFieldDistance == rhs.DepthOfFieldDistance &&
		lhs.DepthOfFieldFade == rhs.DepthOfFieldFade &&
		lhs.FogColourMax == rhs.FogColourMax &&
		lhs.FogColourStrength == rhs.FogColourStrength &&
		lhs.FogHeight == rhs.FogHeight &&
		lhs.FogMax == rhs.FogMax &&
		lhs.FogStrength == rhs.FogStrength &&
		lhs.FullscreenEffect == rhs.FullscreenEffect &&
		lhs.HeightFogFadeOutStrength == rhs.HeightFogFadeOutStrength &&
		lhs.HeightFogMax == rhs.HeightFogMax &&
		lhs.HeightFogOffset == rhs.HeightFogOffset &&
		lhs.HeightFogStrength == rhs.HeightFogStrength &&
		lhs.RainWetness == rhs.RainWetness &&
		lhs.IsRaining == rhs.IsRaining;
	}
};

struct GcWeaponClasses
{
	enum class WeaponStatClassEnum : uint32_t
	{
		Pistol = 0,
		Rifle = 1,
		Pristine = 2,
		Alien = 3,
		Royal = 4,
		Robot = 5,
		Atlas = 6,
		AtlasYellow = 7,
		AtlasBlue = 8,
		Staff = 9,
	};

	NMS_GameComponents::GcWeaponClasses::WeaponStatClassEnum WeaponStatClass;

	friend bool operator==(const GcWeaponClasses& lhs, const GcWeaponClasses& rhs) 
	{
		return lhs.WeaponStatClass == rhs.WeaponStatClass;
	}
};

//Dependency: GcMultitoolData
//Dependency: NMSString0x20
//Dependency: GcInventoryClass
//Dependency: GcWeaponClasses
struct GcArchivedMultitoolData
{
	NMS_GameComponents::GcMultitoolData MultitoolData;
	NMS_GameComponents::GcInventoryClass ArchivedInventoryClass;
	NMS_GameComponents::GcWeaponClasses WeaponClass;
	NMS::NMSString0x20 ArchivedName;

	friend bool operator==(const GcArchivedMultitoolData& lhs, const GcArchivedMultitoolData& rhs) 
	{
		return lhs.MultitoolData == rhs.MultitoolData &&
		lhs.ArchivedInventoryClass == rhs.ArchivedInventoryClass &&
		lhs.WeaponClass == rhs.WeaponClass &&
		lhs.ArchivedName == rhs.ArchivedName;
	}
};

struct GcMissionConditionIsPartyPlanetUnlocked
{
	int32_t SpecificRendevousPlanetIndex;
	bool TakeIndexFromMilestoneStage;
	bool TakeIndexFromSeasonData;

	friend bool operator==(const GcMissionConditionIsPartyPlanetUnlocked& lhs, const GcMissionConditionIsPartyPlanetUnlocked& rhs) 
	{
		return lhs.SpecificRendevousPlanetIndex == rhs.SpecificRendevousPlanetIndex &&
		lhs.TakeIndexFromMilestoneStage == rhs.TakeIndexFromMilestoneStage &&
		lhs.TakeIndexFromSeasonData == rhs.TakeIndexFromSeasonData;
	}
};

//Dependency: GcInventoryContainer
//Dependency: Vector4f
//Dependency: GcResourceElement
//Dependency: GcInventoryLayout
//Dependency: NMSString0x20
struct GcPlayerOwnershipData
{
	NMS::Vector4f Direction;
	NMS::Vector4f Position;
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcResourceElement Resource;
	NMS_GameComponents::GcInventoryLayout InventoryLayout;
	uint64_t Location;
	NMS::NMSString0x20 Name;

	friend bool operator==(const GcPlayerOwnershipData& lhs, const GcPlayerOwnershipData& rhs) 
	{
		return lhs.Direction == rhs.Direction &&
		lhs.Position == rhs.Position &&
		lhs.Inventory == rhs.Inventory &&
		lhs.Inventory_Cargo == rhs.Inventory_Cargo &&
		lhs.Inventory_TechOnly == rhs.Inventory_TechOnly &&
		lhs.Resource == rhs.Resource &&
		lhs.InventoryLayout == rhs.InventoryLayout &&
		lhs.Location == rhs.Location &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: GcCharacterCustomisationData
//Dependency: NMSString0x10
struct GcCharacterCustomisationSaveData
{
	NMS_GameComponents::GcCharacterCustomisationData CustomData;
	NMS::NMSString0x10 SelectedPreset;

	friend bool operator==(const GcCharacterCustomisationSaveData& lhs, const GcCharacterCustomisationSaveData& rhs) 
	{
		return lhs.CustomData == rhs.CustomData &&
		lhs.SelectedPreset == rhs.SelectedPreset;
	}
};

//Dependency: GcPlayerOwnershipData
//Dependency: GcCharacterCustomisationSaveData
//Dependency: GcSpaceshipClasses
//Dependency: GcInventoryClass
//Dependency: NMSString0x80
struct GcArchivedShipData
{
	NMS_GameComponents::GcPlayerOwnershipData Ownership;
	NMS_GameComponents::GcCharacterCustomisationSaveData Customisation;
	NMS_GameComponents::GcSpaceshipClasses ArchivedClass;
	NMS_GameComponents::GcInventoryClass ArchivedInventoryClass;
	NMS::NMSString0x80 ArchivedName;
	bool UsesLegacyColours;

	friend bool operator==(const GcArchivedShipData& lhs, const GcArchivedShipData& rhs) 
	{
		return lhs.Ownership == rhs.Ownership &&
		lhs.Customisation == rhs.Customisation &&
		lhs.ArchivedClass == rhs.ArchivedClass &&
		lhs.ArchivedInventoryClass == rhs.ArchivedInventoryClass &&
		lhs.ArchivedName == rhs.ArchivedName &&
		lhs.UsesLegacyColours == rhs.UsesLegacyColours;
	}
};

//Dependency: NMSString0x10
struct GcRewardSalvageShip
{
	NMS::NMSString0x10 SpecificCustomisationSlotIDs[10];
	bool RewardShipParts;

	friend bool operator==(const GcRewardSalvageShip& lhs, const GcRewardSalvageShip& rhs) 
	{
		return std::equal(std::begin(lhs.SpecificCustomisationSlotIDs), std::end(lhs.SpecificCustomisationSlotIDs), std::begin(rhs.SpecificCustomisationSlotIDs)) &&
		lhs.RewardShipParts == rhs.RewardShipParts;
	}
};

//Dependency: NMSString0x10
struct GcCharacterMove
{
	enum class ModeEnum : uint32_t
	{
		SetVelocity = 0,
		ApplyForce = 1,
	};

	NMS::NMSString0x10 Input;
	NMS_GameComponents::GcCharacterMove::ModeEnum Mode;
	float Strength;

	friend bool operator==(const GcCharacterMove& lhs, const GcCharacterMove& rhs) 
	{
		return lhs.Input == rhs.Input &&
		lhs.Mode == rhs.Mode &&
		lhs.Strength == rhs.Strength;
	}
};

struct GcBaseBuildingPartStyle
{
	enum class StyleEnum : uint32_t
	{
		None = 0,
		Wood = 1,
		Metal = 2,
		Concrete = 3,
		Stone = 4,
		Timber = 5,
		Fibreglass = 6,
		Builders = 7,
	};

	NMS_GameComponents::GcBaseBuildingPartStyle::StyleEnum Style;

	friend bool operator==(const GcBaseBuildingPartStyle& lhs, const GcBaseBuildingPartStyle& rhs) 
	{
		return lhs.Style == rhs.Style;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkMagicModelData
{
	NMS::Vector3f Centre;
	std::vector<NMS::Vector3f> Vertices;
	float Radius;

	friend bool operator==(const TkMagicModelData& lhs, const TkMagicModelData& rhs) 
	{
		return lhs.Centre == rhs.Centre &&
		lhs.Vertices == rhs.Vertices &&
		lhs.Radius == rhs.Radius;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBaseBuildingPartStyle
//Dependency: TkMagicModelData
//Dependency: NMSString0x20A
struct GcBaseBuildingPartData
{
	NMS_Toolkit::TkMagicModelData MagicData;
	NMS::NMSString0x20A PartID;
	uint64_t InstanceLastProfiledTimestamp;
	uint64_t LastProfiledTimestamp;
	uint32_t InstanceMeshesCost;
	uint32_t InstanceNodesCost;
	uint32_t InstanceTimeCost;
	uint32_t MeshesCost;
	uint32_t NodesCost;
	uint32_t PhysicsCost;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
	uint32_t TimeCost;

	friend bool operator==(const GcBaseBuildingPartData& lhs, const GcBaseBuildingPartData& rhs) 
	{
		return lhs.MagicData == rhs.MagicData &&
		lhs.PartID == rhs.PartID &&
		lhs.InstanceLastProfiledTimestamp == rhs.InstanceLastProfiledTimestamp &&
		lhs.LastProfiledTimestamp == rhs.LastProfiledTimestamp &&
		lhs.InstanceMeshesCost == rhs.InstanceMeshesCost &&
		lhs.InstanceNodesCost == rhs.InstanceNodesCost &&
		lhs.InstanceTimeCost == rhs.InstanceTimeCost &&
		lhs.MeshesCost == rhs.MeshesCost &&
		lhs.NodesCost == rhs.NodesCost &&
		lhs.PhysicsCost == rhs.PhysicsCost &&
		lhs.Style == rhs.Style &&
		lhs.TimeCost == rhs.TimeCost;
	}
};

//Dependency: NMSString0x10
struct GcAreaDamageData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PlayerDamageId;
	float Damage;
	float DelayPerMetre;
	float Radius;
	bool DamageCreatures;
	bool DamagePlayers;
	bool InstantKill;

	friend bool operator==(const GcAreaDamageData& lhs, const GcAreaDamageData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.PlayerDamageId == rhs.PlayerDamageId &&
		lhs.Damage == rhs.Damage &&
		lhs.DelayPerMetre == rhs.DelayPerMetre &&
		lhs.Radius == rhs.Radius &&
		lhs.DamageCreatures == rhs.DamageCreatures &&
		lhs.DamagePlayers == rhs.DamagePlayers &&
		lhs.InstantKill == rhs.InstantKill;
	}
};

//Dependency: GcResourceElement
struct GcSelectableObjectSpawnData
{
	NMS_GameComponents::GcResourceElement Resource;

	friend bool operator==(const GcSelectableObjectSpawnData& lhs, const GcSelectableObjectSpawnData& rhs) 
	{
		return lhs.Resource == rhs.Resource;
	}
};

//Dependency: GcSelectableObjectSpawnData
//Dependency: NMSString0x10
struct GcSelectableObjectSpawnList
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcSelectableObjectSpawnData> Objects;

	friend bool operator==(const GcSelectableObjectSpawnList& lhs, const GcSelectableObjectSpawnList& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Objects == rhs.Objects;
	}
};

//Dependency: NMSString0x10
struct GcCreatureGenerationWeightedListDomainEntry
{
	NMS::NMSString0x10 Archetype;
	float Weight;

	friend bool operator==(const GcCreatureGenerationWeightedListDomainEntry& lhs, const GcCreatureGenerationWeightedListDomainEntry& rhs) 
	{
		return lhs.Archetype == rhs.Archetype &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: GcAreaDamageData
struct GcAreaDamageDataTable
{
	std::vector<NMS_GameComponents::GcAreaDamageData> Table;

	friend bool operator==(const GcAreaDamageDataTable& lhs, const GcAreaDamageDataTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: Vector2f
struct GcAsteroidGenerationData
{
	NMS::Vector2f NoiseRange;
	NMS::Vector2f ScaleVariance;
	float FadeRange;
	int32_t Health;
	float NoiseScale;
	float Scale;
	float Spacing;

	friend bool operator==(const GcAsteroidGenerationData& lhs, const GcAsteroidGenerationData& rhs) 
	{
		return lhs.NoiseRange == rhs.NoiseRange &&
		lhs.ScaleVariance == rhs.ScaleVariance &&
		lhs.FadeRange == rhs.FadeRange &&
		lhs.Health == rhs.Health &&
		lhs.NoiseScale == rhs.NoiseScale &&
		lhs.Scale == rhs.Scale &&
		lhs.Spacing == rhs.Spacing;
	}
};

//Dependency: NMSString0x10
struct GcAtmosphereEntryComponentData
{
	NMS::NMSString0x10 FlareEffect;
	NMS::NMSString0x10 ImpactEffect;
	float EditTerrainRadius;
	float EntryOffset;
	float EntryTime;
	bool AutoEntry;

	friend bool operator==(const GcAtmosphereEntryComponentData& lhs, const GcAtmosphereEntryComponentData& rhs) 
	{
		return lhs.FlareEffect == rhs.FlareEffect &&
		lhs.ImpactEffect == rhs.ImpactEffect &&
		lhs.EditTerrainRadius == rhs.EditTerrainRadius &&
		lhs.EntryOffset == rhs.EntryOffset &&
		lhs.EntryTime == rhs.EntryTime &&
		lhs.AutoEntry == rhs.AutoEntry;
	}
};

//Dependency: GcSolarSystemLocatorChoice
//Dependency: GcSeed
struct GcAsteroidGeneratorAssignment
{
	NMS::GcSeed Seed;
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	int32_t AsteroidCount;
	int32_t PlanetIndex;

	friend bool operator==(const GcAsteroidGeneratorAssignment& lhs, const GcAsteroidGeneratorAssignment& rhs) 
	{
		return lhs.Seed == rhs.Seed &&
		lhs.Locator == rhs.Locator &&
		lhs.AsteroidCount == rhs.AsteroidCount &&
		lhs.PlanetIndex == rhs.PlanetIndex;
	}
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcCreatureFoodList
{
	NMS::NMSString0x10 DebrisEffect;
	NMS::NMSString0x10 FoodProduct;
	NMS::VariableSizeString ResourceFile;

	friend bool operator==(const GcCreatureFoodList& lhs, const GcCreatureFoodList& rhs) 
	{
		return lhs.DebrisEffect == rhs.DebrisEffect &&
		lhs.FoodProduct == rhs.FoodProduct &&
		lhs.ResourceFile == rhs.ResourceFile;
	}
};

struct GcTerrainControls
{
	float GridLayers[9];
	float NoiseLayers[8];
	float Features[7];
	float Caves[1];
	float HighWaterActiveFrequency;
	float RockTileFrequency;
	float SubstanceTileFrequency;
	float WaterActiveFrequency;
	bool ForceContinentalNoise;

	friend bool operator==(const GcTerrainControls& lhs, const GcTerrainControls& rhs) 
	{
		return std::equal(std::begin(lhs.GridLayers), std::end(lhs.GridLayers), std::begin(rhs.GridLayers)) &&
		std::equal(std::begin(lhs.NoiseLayers), std::end(lhs.NoiseLayers), std::begin(rhs.NoiseLayers)) &&
		std::equal(std::begin(lhs.Features), std::end(lhs.Features), std::begin(rhs.Features)) &&
		std::equal(std::begin(lhs.Caves), std::end(lhs.Caves), std::begin(rhs.Caves)) &&
		lhs.HighWaterActiveFrequency == rhs.HighWaterActiveFrequency &&
		lhs.RockTileFrequency == rhs.RockTileFrequency &&
		lhs.SubstanceTileFrequency == rhs.SubstanceTileFrequency &&
		lhs.WaterActiveFrequency == rhs.WaterActiveFrequency &&
		lhs.ForceContinentalNoise == rhs.ForceContinentalNoise;
	}
};

struct GcCreatureHemiSphere
{
	enum class CreatureHemiSphereEnum : uint32_t
	{
		Any = 0,
		Northern = 1,
		Southern = 2,
	};

	NMS_GameComponents::GcCreatureHemiSphere::CreatureHemiSphereEnum CreatureHemiSphere;

	friend bool operator==(const GcCreatureHemiSphere& lhs, const GcCreatureHemiSphere& rhs) 
	{
		return lhs.CreatureHemiSphere == rhs.CreatureHemiSphere;
	}
};

struct GcRarity
{
	enum class RarityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
	};

	NMS_GameComponents::GcRarity::RarityEnum Rarity;

	friend bool operator==(const GcRarity& lhs, const GcRarity& rhs) 
	{
		return lhs.Rarity == rhs.Rarity;
	}
};

//Dependency: GcRarity
//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct GcCreatureInfo
{
	enum class AgeEnum : uint32_t
	{
		Regular = 0,
		Weird = 1,
	};

	NMS::NMSString0x20A BiomeDesc;
	NMS::NMSString0x20A DietDesc;
	NMS::NMSString0x20A NotesDesc;
	NMS::NMSString0x20A TempermentDesc;
	NMS_GameComponents::GcCreatureInfo::AgeEnum Age;
	float Height1;
	float Height2;
	NMS_GameComponents::GcRarity Rarity;
	float Weight1;
	float Weight2;
	NMS::NMSString0x80 Diet;
	NMS::NMSString0x80 Gender1;
	NMS::NMSString0x80 Gender2;
	NMS::NMSString0x80 Height1_NMSString0x80;
	NMS::NMSString0x80 Height2_NMSString0x80;
	NMS::NMSString0x80 Notes;
	NMS::NMSString0x80 Temperament;
	NMS::NMSString0x80 Weight1_NMSString0x80;
	NMS::NMSString0x80 Weight2_NMSString0x80;

	friend bool operator==(const GcCreatureInfo& lhs, const GcCreatureInfo& rhs) 
	{
		return lhs.BiomeDesc == rhs.BiomeDesc &&
		lhs.DietDesc == rhs.DietDesc &&
		lhs.NotesDesc == rhs.NotesDesc &&
		lhs.TempermentDesc == rhs.TempermentDesc &&
		lhs.Age == rhs.Age &&
		lhs.Height1 == rhs.Height1 &&
		lhs.Height2 == rhs.Height2 &&
		lhs.Rarity == rhs.Rarity &&
		lhs.Weight1 == rhs.Weight1 &&
		lhs.Weight2 == rhs.Weight2 &&
		lhs.Diet == rhs.Diet &&
		lhs.Gender1 == rhs.Gender1 &&
		lhs.Gender2 == rhs.Gender2 &&
		lhs.Height1_NMSString0x80 == rhs.Height1_NMSString0x80 &&
		lhs.Height2_NMSString0x80 == rhs.Height2_NMSString0x80 &&
		lhs.Notes == rhs.Notes &&
		lhs.Temperament == rhs.Temperament &&
		lhs.Weight1_NMSString0x80 == rhs.Weight1_NMSString0x80 &&
		lhs.Weight2_NMSString0x80 == rhs.Weight2_NMSString0x80;
	}
};

struct GcCreatureActiveTime
{
	enum class CreatureActiveTimeEnum : uint32_t
	{
		OnlyDay = 0,
		MostlyDay = 1,
		AnyTime = 2,
		MostlyNight = 3,
		OnlyNight = 4,
	};

	NMS_GameComponents::GcCreatureActiveTime::CreatureActiveTimeEnum CreatureActiveTime;

	friend bool operator==(const GcCreatureActiveTime& lhs, const GcCreatureActiveTime& rhs) 
	{
		return lhs.CreatureActiveTime == rhs.CreatureActiveTime;
	}
};

struct GcCreatureRoles
{
	enum class CreatureRoleEnum : uint32_t
	{
		None = 0,
		Predator = 1,
		PlayerPredator = 2,
		Prey = 3,
		Passive = 4,
		Bird = 5,
		FishPrey = 6,
		FishPredator = 7,
		Butterfly = 8,
		Robot = 9,
		Pet = 10,
	};

	NMS_GameComponents::GcCreatureRoles::CreatureRoleEnum CreatureRole;

	friend bool operator==(const GcCreatureRoles& lhs, const GcCreatureRoles& rhs) 
	{
		return lhs.CreatureRole == rhs.CreatureRole;
	}
};

struct GcCreatureSizeClasses
{
	enum class CreatureSizeClassEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
		Huge = 3,
	};

	NMS_GameComponents::GcCreatureSizeClasses::CreatureSizeClassEnum CreatureSizeClass;

	friend bool operator==(const GcCreatureSizeClasses& lhs, const GcCreatureSizeClasses& rhs) 
	{
		return lhs.CreatureSizeClass == rhs.CreatureSizeClass;
	}
};

//Dependency: GcCreatureActiveTime
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcCreatureGenerationDensity
//Dependency: GcCreatureTypes
//Dependency: GcCreatureRoles
//Dependency: GcCreatureSizeClasses
struct GcCreatureRoleDescription
{
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 ForceID;
	NMS::NMSString0x10 RequireTag;
	NMS_GameComponents::GcCreatureActiveTime ActiveTime;
	NMS_GameComponents::GcCreatureGenerationDensity Density;
	NMS_GameComponents::GcCreatureTypes ForceType;
	float IncreasedSpawnDistance;
	int32_t MaxGroupSize;
	NMS_GameComponents::GcCreatureSizeClasses MaxSize;
	int32_t MinGroupSize;
	NMS_GameComponents::GcCreatureSizeClasses MinSize;
	float ProbabilityOfBeingEnabled;
	NMS_GameComponents::GcCreatureRoles Role;

	friend bool operator==(const GcCreatureRoleDescription& lhs, const GcCreatureRoleDescription& rhs) 
	{
		return lhs.Filter == rhs.Filter &&
		lhs.ForceID == rhs.ForceID &&
		lhs.RequireTag == rhs.RequireTag &&
		lhs.ActiveTime == rhs.ActiveTime &&
		lhs.Density == rhs.Density &&
		lhs.ForceType == rhs.ForceType &&
		lhs.IncreasedSpawnDistance == rhs.IncreasedSpawnDistance &&
		lhs.MaxGroupSize == rhs.MaxGroupSize &&
		lhs.MaxSize == rhs.MaxSize &&
		lhs.MinGroupSize == rhs.MinGroupSize &&
		lhs.MinSize == rhs.MinSize &&
		lhs.ProbabilityOfBeingEnabled == rhs.ProbabilityOfBeingEnabled &&
		lhs.Role == rhs.Role;
	}
};

struct GcTerrainTileType
{
	enum class TileTypeEnum : uint32_t
	{
		Air = 0,
		Base = 1,
		Rock = 2,
		Mountain = 3,
		Underwater = 4,
		Cave = 5,
		Dirt = 6,
		Liquid = 7,
		Substance = 8,
	};

	NMS_GameComponents::GcTerrainTileType::TileTypeEnum TileType;

	friend bool operator==(const GcTerrainTileType& lhs, const GcTerrainTileType& rhs) 
	{
		return lhs.TileType == rhs.TileType;
	}
};

struct GcCreatureDiet
{
	enum class DietEnum : uint32_t
	{
		Carnivore = 0,
		Omnivore = 1,
		Herbivore = 2,
		Robot = 3,
	};

	NMS_GameComponents::GcCreatureDiet::DietEnum Diet;

	friend bool operator==(const GcCreatureDiet& lhs, const GcCreatureDiet& rhs) 
	{
		return lhs.Diet == rhs.Diet;
	}
};

//Dependency: GcCreatureHemiSphere
//Dependency: GcCreatureInfo
//Dependency: GcCreatureRoleDescription
//Dependency: GcTerrainTileType
//Dependency: GcCreatureDiet
//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcSeed
struct GcCreatureRoleData
{
	NMS_GameComponents::GcCreatureInfo Info;
	NMS_GameComponents::GcCreatureRoleDescription Description;
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 CreatureId;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcCreatureDiet Diet;
	float GroupsPerSquareKm;
	NMS_GameComponents::GcCreatureHemiSphere HemiSphere;
	NMS_GameComponents::GcTerrainTileType TileType;
	NMS_GameComponents::GcCreatureTypes Type;

	friend bool operator==(const GcCreatureRoleData& lhs, const GcCreatureRoleData& rhs) 
	{
		return lhs.Info == rhs.Info &&
		lhs.Description == rhs.Description &&
		lhs.Filter == rhs.Filter &&
		lhs.CreatureId == rhs.CreatureId &&
		lhs.Seed == rhs.Seed &&
		lhs.Diet == rhs.Diet &&
		lhs.GroupsPerSquareKm == rhs.GroupsPerSquareKm &&
		lhs.HemiSphere == rhs.HemiSphere &&
		lhs.TileType == rhs.TileType &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcCreatureRoleData
struct GcCreatureRoleDataTable
{
	std::vector<NMS_GameComponents::GcCreatureRoleData> AvailableRoles;
	float MaxProportionFlying;
	float SandWormFrequency;
	bool HasSandWorms;

	friend bool operator==(const GcCreatureRoleDataTable& lhs, const GcCreatureRoleDataTable& rhs) 
	{
		return lhs.AvailableRoles == rhs.AvailableRoles &&
		lhs.MaxProportionFlying == rhs.MaxProportionFlying &&
		lhs.SandWormFrequency == rhs.SandWormFrequency &&
		lhs.HasSandWorms == rhs.HasSandWorms;
	}
};

//Dependency: GcTerrainTileType
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcExternalObjectListOptions
{
	NMS::NMSString0x10 Name;
	std::vector<NMS::VariableSizeString> Options;
	NMS::NMSString0x10 ResourceHint;
	NMS::NMSString0x10 ResourceHintIcon;
	int32_t Order;
	float Probability;
	float SeasonalProbabilityOverride;
	NMS_GameComponents::GcTerrainTileType TileType;
	bool AddToFilenameHashmapWhenOptional;
	bool AllowLimiting;
	bool ChooseUsingLifeLevel;
	bool SuppressSpawn;

	friend bool operator==(const GcExternalObjectListOptions& lhs, const GcExternalObjectListOptions& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Options == rhs.Options &&
		lhs.ResourceHint == rhs.ResourceHint &&
		lhs.ResourceHintIcon == rhs.ResourceHintIcon &&
		lhs.Order == rhs.Order &&
		lhs.Probability == rhs.Probability &&
		lhs.SeasonalProbabilityOverride == rhs.SeasonalProbabilityOverride &&
		lhs.TileType == rhs.TileType &&
		lhs.AddToFilenameHashmapWhenOptional == rhs.AddToFilenameHashmapWhenOptional &&
		lhs.AllowLimiting == rhs.AllowLimiting &&
		lhs.ChooseUsingLifeLevel == rhs.ChooseUsingLifeLevel &&
		lhs.SuppressSpawn == rhs.SuppressSpawn;
	}
};

struct GcPlanetClass
{
	enum class PlanetClassEnum : uint32_t
	{
		Default = 0,
		Initial = 1,
		InInitialSystem = 2,
	};

	NMS_GameComponents::GcPlanetClass::PlanetClassEnum PlanetClass;

	friend bool operator==(const GcPlanetClass& lhs, const GcPlanetClass& rhs) 
	{
		return lhs.PlanetClass == rhs.PlanetClass;
	}
};

struct GcPlanetSize
{
	enum class PlanetSizeEnum : uint32_t
	{
		Large = 0,
		Medium = 1,
		Small = 2,
		Moon = 3,
		Giant = 4,
	};

	NMS_GameComponents::GcPlanetSize::PlanetSizeEnum PlanetSize;

	friend bool operator==(const GcPlanetSize& lhs, const GcPlanetSize& rhs) 
	{
		return lhs.PlanetSize == rhs.PlanetSize;
	}
};

//Dependency: GcTerrainControls
//Dependency: GcCreatureRoleDataTable
//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeSubType
//Dependency: GcBiomeType
//Dependency: GcPlanetClass
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlanetSize
//Dependency: VariableSizeString
//Dependency: GcSeed
struct GcPlanetGenerationIntermediateData
{
	NMS_GameComponents::GcCreatureRoleDataTable CreatureRoles;
	NMS::VariableSizeString CreatureAirFile;
	NMS::VariableSizeString CreatureCaveFile;
	NMS::VariableSizeString CreatureExtraWaterFile;
	NMS::VariableSizeString CreatureLandFile;
	NMS::VariableSizeString CreatureRobotFile;
	NMS::VariableSizeString CreatureWaterFile;
	std::vector<int32_t> ExternalObjectListIndices;
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectLists;
	NMS::GcSeed Seed;
	NMS::VariableSizeString TerrainFile;
	NMS_GameComponents::GcTerrainControls Terrain;
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcBiomeSubType BiomeSubType;
	NMS_GameComponents::GcPlanetClass Class;
	NMS_GameComponents::GcPlanetSize Size;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	int32_t TerrainSettingIndex;
	bool Prime;

	friend bool operator==(const GcPlanetGenerationIntermediateData& lhs, const GcPlanetGenerationIntermediateData& rhs) 
	{
		return lhs.CreatureRoles == rhs.CreatureRoles &&
		lhs.CreatureAirFile == rhs.CreatureAirFile &&
		lhs.CreatureCaveFile == rhs.CreatureCaveFile &&
		lhs.CreatureExtraWaterFile == rhs.CreatureExtraWaterFile &&
		lhs.CreatureLandFile == rhs.CreatureLandFile &&
		lhs.CreatureRobotFile == rhs.CreatureRobotFile &&
		lhs.CreatureWaterFile == rhs.CreatureWaterFile &&
		lhs.ExternalObjectListIndices == rhs.ExternalObjectListIndices &&
		lhs.ExternalObjectLists == rhs.ExternalObjectLists &&
		lhs.Seed == rhs.Seed &&
		lhs.TerrainFile == rhs.TerrainFile &&
		lhs.Terrain == rhs.Terrain &&
		lhs.Biome == rhs.Biome &&
		lhs.BiomeSubType == rhs.BiomeSubType &&
		lhs.Class == rhs.Class &&
		lhs.Size == rhs.Size &&
		lhs.StarType == rhs.StarType &&
		lhs.TerrainSettingIndex == rhs.TerrainSettingIndex &&
		lhs.Prime == rhs.Prime;
	}
};

//Dependency: GcAsteroidGeneratorAssignment
//Dependency: Vector3f
struct GcAsteroidGeneratorRing
{
	NMS::Vector3f Rotation;
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float LowerRadius;
	int32_t OffBalance;
	float PushAmount;
	float PushRadius;
	float UpperRadius;
	float USpread;
	bool FlipPush;

	friend bool operator==(const GcAsteroidGeneratorRing& lhs, const GcAsteroidGeneratorRing& rhs) 
	{
		return lhs.Rotation == rhs.Rotation &&
		lhs.Assignment == rhs.Assignment &&
		lhs.LowerRadius == rhs.LowerRadius &&
		lhs.OffBalance == rhs.OffBalance &&
		lhs.PushAmount == rhs.PushAmount &&
		lhs.PushRadius == rhs.PushRadius &&
		lhs.UpperRadius == rhs.UpperRadius &&
		lhs.USpread == rhs.USpread &&
		lhs.FlipPush == rhs.FlipPush;
	}
};

//Dependency: GcCreatureVocalSoundData
struct GcCreatureVocalData
{
	NMS_GameComponents::GcCreatureVocalSoundData AttackVocal;
	NMS_GameComponents::GcCreatureVocalSoundData DeathVocal;
	NMS_GameComponents::GcCreatureVocalSoundData FleeVocal;
	NMS_GameComponents::GcCreatureVocalSoundData IdleVocal;
	float ScaleBias;

	friend bool operator==(const GcCreatureVocalData& lhs, const GcCreatureVocalData& rhs) 
	{
		return lhs.AttackVocal == rhs.AttackVocal &&
		lhs.DeathVocal == rhs.DeathVocal &&
		lhs.FleeVocal == rhs.FleeVocal &&
		lhs.IdleVocal == rhs.IdleVocal &&
		lhs.ScaleBias == rhs.ScaleBias;
	}
};

//Dependency: GcAsteroidGeneratorAssignment
//Dependency: Vector3f
struct GcAsteroidGeneratorSlab
{
	NMS::Vector3f Rotation;
	NMS::Vector3f Scale;
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float NoiseApply;
	float NoiseOffset;
	float NoiseScale;

	friend bool operator==(const GcAsteroidGeneratorSlab& lhs, const GcAsteroidGeneratorSlab& rhs) 
	{
		return lhs.Rotation == rhs.Rotation &&
		lhs.Scale == rhs.Scale &&
		lhs.Assignment == rhs.Assignment &&
		lhs.NoiseApply == rhs.NoiseApply &&
		lhs.NoiseOffset == rhs.NoiseOffset &&
		lhs.NoiseScale == rhs.NoiseScale;
	}
};

//Dependency: TkModelResource
struct GcObjectSpawnerComponentData
{
	NMS_Toolkit::TkModelResource Object;
	float SpawnCooldown;
	int32_t SpawnPowerCost;

	friend bool operator==(const GcObjectSpawnerComponentData& lhs, const GcObjectSpawnerComponentData& rhs) 
	{
		return lhs.Object == rhs.Object &&
		lhs.SpawnCooldown == rhs.SpawnCooldown &&
		lhs.SpawnPowerCost == rhs.SpawnPowerCost;
	}
};

//Dependency: GcAsteroidGeneratorAssignment
struct GcAsteroidGeneratorSurround
{
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float LowerRadius;
	float NoiseApply;
	float NoiseOffset;
	float NoiseScale;
	float UpperRadius;

	friend bool operator==(const GcAsteroidGeneratorSurround& lhs, const GcAsteroidGeneratorSurround& rhs) 
	{
		return lhs.Assignment == rhs.Assignment &&
		lhs.LowerRadius == rhs.LowerRadius &&
		lhs.NoiseApply == rhs.NoiseApply &&
		lhs.NoiseOffset == rhs.NoiseOffset &&
		lhs.NoiseScale == rhs.NoiseScale &&
		lhs.UpperRadius == rhs.UpperRadius;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkCameraData
{
	NMS::Vector3f Offset;
	float AdjustPitch;
	float AdjustRoll;
	float AdjustYaw;
	float Angle;
	float Distance;
	float Fov;
	float HeightAngle;

	friend bool operator==(const TkCameraData& lhs, const TkCameraData& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.AdjustPitch == rhs.AdjustPitch &&
		lhs.AdjustRoll == rhs.AdjustRoll &&
		lhs.AdjustYaw == rhs.AdjustYaw &&
		lhs.Angle == rhs.Angle &&
		lhs.Distance == rhs.Distance &&
		lhs.Fov == rhs.Fov &&
		lhs.HeightAngle == rhs.HeightAngle;
	}
};

//Dependency: TkCameraData
//Dependency: TkCameraWanderData
//Dependency: NMSString0x20A
struct TkModelResourceCameraData
{
	enum class ResourceFocusTypeEnum : uint32_t
	{
		ResourceBounds = 0,
		ResourceBoundingHeight = 1,
		NodeBoundingBox = 2,
		World = 3,
	};

	NMS_Toolkit::TkCameraData CameraData;
	NMS::NMSString0x20A FocusLocator;
	NMS_Toolkit::TkCameraWanderData Wander;
	float FocusInterpTime;
	NMS_Toolkit::TkModelResourceCameraData::ResourceFocusTypeEnum ResourceFocusType;
	bool UseWorldUp;

	friend bool operator==(const TkModelResourceCameraData& lhs, const TkModelResourceCameraData& rhs) 
	{
		return lhs.CameraData == rhs.CameraData &&
		lhs.FocusLocator == rhs.FocusLocator &&
		lhs.Wander == rhs.Wander &&
		lhs.FocusInterpTime == rhs.FocusInterpTime &&
		lhs.ResourceFocusType == rhs.ResourceFocusType &&
		lhs.UseWorldUp == rhs.UseWorldUp;
	}
};

//Dependency: TkModelResourceCameraData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkModelResourceData
{
	enum class ResourceThumbnailModeEnum : uint32_t
	{
		None = 0,
		HUD = 1,
		GUI = 2,
	};

	NMS_Toolkit::TkModelResourceCameraData Camera;
	NMS::NMSString0x20A Anim;
	NMS::NMSString0x10 Id;
	float AspectRatio;
	float BlendInOffset;
	float BlendInTime;
	float HeightOffset;
	float LightPitch;
	float LightRotate;
	NMS_Toolkit::TkModelResourceData::ResourceThumbnailModeEnum ResourceThumbnailMode;
	bool CanRotateWithInput;

	friend bool operator==(const TkModelResourceData& lhs, const TkModelResourceData& rhs) 
	{
		return lhs.Camera == rhs.Camera &&
		lhs.Anim == rhs.Anim &&
		lhs.Id == rhs.Id &&
		lhs.AspectRatio == rhs.AspectRatio &&
		lhs.BlendInOffset == rhs.BlendInOffset &&
		lhs.BlendInTime == rhs.BlendInTime &&
		lhs.HeightOffset == rhs.HeightOffset &&
		lhs.LightPitch == rhs.LightPitch &&
		lhs.LightRotate == rhs.LightRotate &&
		lhs.ResourceThumbnailMode == rhs.ResourceThumbnailMode &&
		lhs.CanRotateWithInput == rhs.CanRotateWithInput;
	}
};

//Dependency: Vector3f
struct TkGravityComponentData
{
	NMS::Vector3f OverrideBounds;
	float FalloffRadius;
	float Strength;
	bool MoveWithParent;

	friend bool operator==(const TkGravityComponentData& lhs, const TkGravityComponentData& rhs) 
	{
		return lhs.OverrideBounds == rhs.OverrideBounds &&
		lhs.FalloffRadius == rhs.FalloffRadius &&
		lhs.Strength == rhs.Strength &&
		lhs.MoveWithParent == rhs.MoveWithParent;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcBiomeList
{
	float BiomeProbability[17];
	float PrimeBiomeProbability[17];

	friend bool operator==(const GcBiomeList& lhs, const GcBiomeList& rhs) 
	{
		return std::equal(std::begin(lhs.BiomeProbability), std::end(lhs.BiomeProbability), std::begin(rhs.BiomeProbability)) &&
		std::equal(std::begin(lhs.PrimeBiomeProbability), std::end(lhs.PrimeBiomeProbability), std::begin(rhs.PrimeBiomeProbability));
	}
};

//Dependency: NMSString0x10
struct GcBuildingDistribution
{
	NMS::NMSString0x10 Name;
	int32_t MaxDistance;
	int32_t MinDistance;

	friend bool operator==(const GcBuildingDistribution& lhs, const GcBuildingDistribution& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.MaxDistance == rhs.MaxDistance &&
		lhs.MinDistance == rhs.MinDistance;
	}
};

//Dependency: GcBiomeSubType
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcAudioWwiseEvents
//Dependency: TkCurveType
//Dependency: NMSString0x20
struct GcCreatureCrystalMovementDataParams
{
	enum class SubTypeEnum : uint32_t
	{
		Crystal = 0,
		Tentacle = 1,
	};

	enum class DeathTypeEnum : uint32_t
	{
		Explode = 0,
		Drop = 1,
	};

	NMS::NMSString0x10 DustEffect;
	std::vector<NMS_GameComponents::GcBiomeSubType> ValidBiomes;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float AppearOvershoot;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	NMS_GameComponents::GcAudioWwiseEvents CreationAudio;
	float DeathFadeStart;
	float DeathFadeTime;
	NMS_GameComponents::GcCreatureCrystalMovementDataParams::DeathTypeEnum DeathType;
	float DespawnDist;
	float HideOffset;
	float IdleSpeedModifier;
	float MaxAppearTime;
	float MaxDisappearTime;
	float MaxOffset;
	float MaxOffsetZ;
	float MaxScale;
	float MaxTilt;
	float MinAppearTime;
	float MinDisappearTime;
	float MinScale;
	float MinShowTime;
	NMS_GameComponents::GcAudioWwiseEvents MoveStartAudio;
	NMS_GameComponents::GcAudioWwiseEvents MoveStopAudio;
	int32_t NumShards;
	float OffsetTilt;
	float ParticleScale;
	NMS_GameComponents::GcAudioWwiseEvents RetractAudio;
	float RunSpeedModifier;
	float ShowOffset;
	float SpawnDist;
	NMS_GameComponents::GcCreatureCrystalMovementDataParams::SubTypeEnum SubType;
	float TentacleChurnSpeed;
	float TentacleIdleLookChance;
	float TentacleMoveSwingAngle;
	float TentacleMoveTimeMax;
	float TentacleMoveTimeMin;
	float TentaclePitchRange;
	float TentacleRollRange;
	float TentacleRotationApplyBase;
	float TentacleRotationApplyTip;
	float TentacleRunSwingSpeed;
	float TentacleSpeed;
	float TentacleStretchMax;
	float TentacleStretchMin;
	float TentacleWalkSwingSpeed;
	float TentacleYawRange;
	float WalkSpeedModifier;
	NMS::NMSString0x20 TentacleEndJoint;
	NMS::NMSString0x20 TentacleStartJoint;
	bool CustomHideCurve;
	NMS_Toolkit::TkCurveType HideCurve;
	bool ScaleOnAppear;
	bool UseTerrainAngle;

	friend bool operator==(const GcCreatureCrystalMovementDataParams& lhs, const GcCreatureCrystalMovementDataParams& rhs) 
	{
		return lhs.DustEffect == rhs.DustEffect &&
		lhs.ValidBiomes == rhs.ValidBiomes &&
		lhs.ValidDescriptors == rhs.ValidDescriptors &&
		lhs.AppearOvershoot == rhs.AppearOvershoot &&
		lhs.Audio == rhs.Audio &&
		lhs.CreationAudio == rhs.CreationAudio &&
		lhs.DeathFadeStart == rhs.DeathFadeStart &&
		lhs.DeathFadeTime == rhs.DeathFadeTime &&
		lhs.DeathType == rhs.DeathType &&
		lhs.DespawnDist == rhs.DespawnDist &&
		lhs.HideOffset == rhs.HideOffset &&
		lhs.IdleSpeedModifier == rhs.IdleSpeedModifier &&
		lhs.MaxAppearTime == rhs.MaxAppearTime &&
		lhs.MaxDisappearTime == rhs.MaxDisappearTime &&
		lhs.MaxOffset == rhs.MaxOffset &&
		lhs.MaxOffsetZ == rhs.MaxOffsetZ &&
		lhs.MaxScale == rhs.MaxScale &&
		lhs.MaxTilt == rhs.MaxTilt &&
		lhs.MinAppearTime == rhs.MinAppearTime &&
		lhs.MinDisappearTime == rhs.MinDisappearTime &&
		lhs.MinScale == rhs.MinScale &&
		lhs.MinShowTime == rhs.MinShowTime &&
		lhs.MoveStartAudio == rhs.MoveStartAudio &&
		lhs.MoveStopAudio == rhs.MoveStopAudio &&
		lhs.NumShards == rhs.NumShards &&
		lhs.OffsetTilt == rhs.OffsetTilt &&
		lhs.ParticleScale == rhs.ParticleScale &&
		lhs.RetractAudio == rhs.RetractAudio &&
		lhs.RunSpeedModifier == rhs.RunSpeedModifier &&
		lhs.ShowOffset == rhs.ShowOffset &&
		lhs.SpawnDist == rhs.SpawnDist &&
		lhs.SubType == rhs.SubType &&
		lhs.TentacleChurnSpeed == rhs.TentacleChurnSpeed &&
		lhs.TentacleIdleLookChance == rhs.TentacleIdleLookChance &&
		lhs.TentacleMoveSwingAngle == rhs.TentacleMoveSwingAngle &&
		lhs.TentacleMoveTimeMax == rhs.TentacleMoveTimeMax &&
		lhs.TentacleMoveTimeMin == rhs.TentacleMoveTimeMin &&
		lhs.TentaclePitchRange == rhs.TentaclePitchRange &&
		lhs.TentacleRollRange == rhs.TentacleRollRange &&
		lhs.TentacleRotationApplyBase == rhs.TentacleRotationApplyBase &&
		lhs.TentacleRotationApplyTip == rhs.TentacleRotationApplyTip &&
		lhs.TentacleRunSwingSpeed == rhs.TentacleRunSwingSpeed &&
		lhs.TentacleSpeed == rhs.TentacleSpeed &&
		lhs.TentacleStretchMax == rhs.TentacleStretchMax &&
		lhs.TentacleStretchMin == rhs.TentacleStretchMin &&
		lhs.TentacleWalkSwingSpeed == rhs.TentacleWalkSwingSpeed &&
		lhs.TentacleYawRange == rhs.TentacleYawRange &&
		lhs.WalkSpeedModifier == rhs.WalkSpeedModifier &&
		lhs.TentacleEndJoint == rhs.TentacleEndJoint &&
		lhs.TentacleStartJoint == rhs.TentacleStartJoint &&
		lhs.CustomHideCurve == rhs.CustomHideCurve &&
		lhs.HideCurve == rhs.HideCurve &&
		lhs.ScaleOnAppear == rhs.ScaleOnAppear &&
		lhs.UseTerrainAngle == rhs.UseTerrainAngle;
	}
};

//Dependency: GcCreatureCrystalMovementDataParams
struct GcCreatureCrystalMovementData
{
	std::vector<NMS_GameComponents::GcCreatureCrystalMovementDataParams> Params;

	friend bool operator==(const GcCreatureCrystalMovementData& lhs, const GcCreatureCrystalMovementData& rhs) 
	{
		return lhs.Params == rhs.Params;
	}
};

//Dependency: GcAsteroidGenerationData
struct GcAsteroidSystemGenerationData
{
	NMS_GameComponents::GcAsteroidGenerationData CommonAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData LargeAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData RareAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData RingAsteroidData;

	friend bool operator==(const GcAsteroidSystemGenerationData& lhs, const GcAsteroidSystemGenerationData& rhs) 
	{
		return lhs.CommonAsteroidData == rhs.CommonAsteroidData &&
		lhs.LargeAsteroidData == rhs.LargeAsteroidData &&
		lhs.RareAsteroidData == rhs.RareAsteroidData &&
		lhs.RingAsteroidData == rhs.RingAsteroidData;
	}
};

//Dependency: NMSString0x20A
struct GcCostSalvageShip
{
	NMS::NMSString0x20A ShipClassStringOverride[10];
	bool CannotAffordIfStringOverrideIsNull;
	bool WillGiveShipParts;

	friend bool operator==(const GcCostSalvageShip& lhs, const GcCostSalvageShip& rhs) 
	{
		return std::equal(std::begin(lhs.ShipClassStringOverride), std::end(lhs.ShipClassStringOverride), std::begin(rhs.ShipClassStringOverride)) &&
		lhs.CannotAffordIfStringOverrideIsNull == rhs.CannotAffordIfStringOverrideIsNull &&
		lhs.WillGiveShipParts == rhs.WillGiveShipParts;
	}
};

//Dependency: GcCompositeCurveElementData
struct GcCompositeCurveData
{
	std::vector<NMS_GameComponents::GcCompositeCurveElementData> Elements;
	float StartValue;

	friend bool operator==(const GcCompositeCurveData& lhs, const GcCompositeCurveData& rhs) 
	{
		return lhs.Elements == rhs.Elements &&
		lhs.StartValue == rhs.StartValue;
	}
};

struct GcCreatureLegIKComponentData
{
	int32_t Stuff;

	friend bool operator==(const GcCreatureLegIKComponentData& lhs, const GcCreatureLegIKComponentData& rhs) 
	{
		return lhs.Stuff == rhs.Stuff;
	}
};

struct GcItemQuality
{
	enum class ItemQualityEnum : uint32_t
	{
		Junk = 0,
		Common = 1,
		Rare = 2,
		Epic = 3,
		Legendary = 4,
	};

	NMS_GameComponents::GcItemQuality::ItemQualityEnum ItemQuality;

	friend bool operator==(const GcItemQuality& lhs, const GcItemQuality& rhs) 
	{
		return lhs.ItemQuality == rhs.ItemQuality;
	}
};

struct GcFishSize
{
	enum class FishSizeEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
		ExtraLarge = 3,
	};

	NMS_GameComponents::GcFishSize::FishSizeEnum FishSize;

	friend bool operator==(const GcFishSize& lhs, const GcFishSize& rhs) 
	{
		return lhs.FishSize == rhs.FishSize;
	}
};

struct GcFishingTime
{
	enum class FishingTimeEnum : uint32_t
	{
		Day = 0,
		Night = 1,
		Both = 2,
	};

	NMS_GameComponents::GcFishingTime::FishingTimeEnum FishingTime;

	friend bool operator==(const GcFishingTime& lhs, const GcFishingTime& rhs) 
	{
		return lhs.FishingTime == rhs.FishingTime;
	}
};

//Dependency: GcItemQuality
//Dependency: NMSString0x10
//Dependency: GcFishSize
//Dependency: GcFishingTime
struct GcMissionFishData
{
	std::vector<NMS::NMSString0x10> SpecificFish;
	NMS_GameComponents::GcItemQuality Quality;
	NMS_GameComponents::GcFishSize Size;
	NMS_GameComponents::GcFishingTime Time;
	bool Biome[17];
	bool NeedsStorm;

	friend bool operator==(const GcMissionFishData& lhs, const GcMissionFishData& rhs) 
	{
		return lhs.SpecificFish == rhs.SpecificFish &&
		lhs.Quality == rhs.Quality &&
		lhs.Size == rhs.Size &&
		lhs.Time == rhs.Time &&
		std::equal(std::begin(lhs.Biome), std::end(lhs.Biome), std::begin(rhs.Biome)) &&
		lhs.NeedsStorm == rhs.NeedsStorm;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcHistoricalSeasonData
{
	NMS::NMSString0x20A SeasonName;
	NMS::NMSString0x20A SeasonNameUpper;
	NMS::NMSString0x20A UnlockedTitle;
	NMS_Toolkit::TkTextureResource MainIcon;
	NMS::NMSString0x10 FinalReward;
	int32_t DisplayNumber;
	int32_t RemixNumber;
	int32_t SeasonNumber;
	NMS::NMSString0x20 Description;

	friend bool operator==(const GcHistoricalSeasonData& lhs, const GcHistoricalSeasonData& rhs) 
	{
		return lhs.SeasonName == rhs.SeasonName &&
		lhs.SeasonNameUpper == rhs.SeasonNameUpper &&
		lhs.UnlockedTitle == rhs.UnlockedTitle &&
		lhs.MainIcon == rhs.MainIcon &&
		lhs.FinalReward == rhs.FinalReward &&
		lhs.DisplayNumber == rhs.DisplayNumber &&
		lhs.RemixNumber == rhs.RemixNumber &&
		lhs.SeasonNumber == rhs.SeasonNumber &&
		lhs.Description == rhs.Description;
	}
};

struct GcAtlasSendSubmitContribution
{
	int32_t Contribution;
	int32_t MissionIndex;

	friend bool operator==(const GcAtlasSendSubmitContribution& lhs, const GcAtlasSendSubmitContribution& rhs) 
	{
		return lhs.Contribution == rhs.Contribution &&
		lhs.MissionIndex == rhs.MissionIndex;
	}
};

//Dependency: GcResourceElement
//Dependency: GcBuildingClassification
//Dependency: TkNoiseFlattenOptions
//Dependency: GcSeed
//Dependency: Vector3f
struct GcBuildingSpawnData
{
	NMS::Vector3f AABBMax;
	NMS::Vector3f AABBMin;
	NMS_GameComponents::GcResourceElement Resource;
	NMS::GcSeed Seed;
	int32_t ClusterLayouts[8];
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	NMS_GameComponents::GcBuildingClassification Classification;
	int32_t ClusterLayoutCount;
	float ClusterSpacing;
	float Density;
	int32_t InstanceID;
	int32_t LSystemID;
	float MaxHeight;
	float MaxXZRotation;
	float MinHeight;
	float Radius;
	float Scale;
	int32_t WFCBuildingPreset;
	int32_t WFCModuleSet;
	bool AlignToNormal;
	bool AutoCollision;
	bool BuildingSizeCalculated;
	bool GivesShelter;
	bool IgnoreParticlesAABB;
	bool LowerIntoGround;

	friend bool operator==(const GcBuildingSpawnData& lhs, const GcBuildingSpawnData& rhs) 
	{
		return lhs.AABBMax == rhs.AABBMax &&
		lhs.AABBMin == rhs.AABBMin &&
		lhs.Resource == rhs.Resource &&
		lhs.Seed == rhs.Seed &&
		std::equal(std::begin(lhs.ClusterLayouts), std::end(lhs.ClusterLayouts), std::begin(rhs.ClusterLayouts)) &&
		lhs.FlattenType == rhs.FlattenType &&
		lhs.Classification == rhs.Classification &&
		lhs.ClusterLayoutCount == rhs.ClusterLayoutCount &&
		lhs.ClusterSpacing == rhs.ClusterSpacing &&
		lhs.Density == rhs.Density &&
		lhs.InstanceID == rhs.InstanceID &&
		lhs.LSystemID == rhs.LSystemID &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MaxXZRotation == rhs.MaxXZRotation &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.Radius == rhs.Radius &&
		lhs.Scale == rhs.Scale &&
		lhs.WFCBuildingPreset == rhs.WFCBuildingPreset &&
		lhs.WFCModuleSet == rhs.WFCModuleSet &&
		lhs.AlignToNormal == rhs.AlignToNormal &&
		lhs.AutoCollision == rhs.AutoCollision &&
		lhs.BuildingSizeCalculated == rhs.BuildingSizeCalculated &&
		lhs.GivesShelter == rhs.GivesShelter &&
		lhs.IgnoreParticlesAABB == rhs.IgnoreParticlesAABB &&
		lhs.LowerIntoGround == rhs.LowerIntoGround;
	}
};

//Dependency: Colour
struct GcSolarSystemSkyColourData
{
	NMS::Colour BottomColour;
	NMS::Colour BottomColourPlanet;
	NMS::Colour CloudColour;
	NMS::Colour FogColour;
	NMS::Colour FogColour2;
	NMS::Colour LightColour;
	NMS::Colour MidColour;
	NMS::Colour MidColourPlanet;
	NMS::Colour NebulaColour1;
	NMS::Colour NebulaColour2;
	NMS::Colour NebulaColour3;
	NMS::Colour TopColour;
	NMS::Colour TopColourPlanet;

	friend bool operator==(const GcSolarSystemSkyColourData& lhs, const GcSolarSystemSkyColourData& rhs) 
	{
		return lhs.BottomColour == rhs.BottomColour &&
		lhs.BottomColourPlanet == rhs.BottomColourPlanet &&
		lhs.CloudColour == rhs.CloudColour &&
		lhs.FogColour == rhs.FogColour &&
		lhs.FogColour2 == rhs.FogColour2 &&
		lhs.LightColour == rhs.LightColour &&
		lhs.MidColour == rhs.MidColour &&
		lhs.MidColourPlanet == rhs.MidColourPlanet &&
		lhs.NebulaColour1 == rhs.NebulaColour1 &&
		lhs.NebulaColour2 == rhs.NebulaColour2 &&
		lhs.NebulaColour3 == rhs.NebulaColour3 &&
		lhs.TopColour == rhs.TopColour &&
		lhs.TopColourPlanet == rhs.TopColourPlanet;
	}
};

struct GcCostCanDispatchFleetExpeditions
{

	friend bool operator==(const GcCostCanDispatchFleetExpeditions& lhs, const GcCostCanDispatchFleetExpeditions& rhs) 
	{
		return true;
	}
};

//Dependency: GcInputActions
struct GcPlayerControlInput
{
	std::vector<NMSTemplate> Inputs;
	std::vector<NMS_GameComponents::GcInputActions> InterceptInputBlackList;
	std::vector<NMS_GameComponents::GcInputActions> InterceptInputWhitelist;
	bool InterceptAllInputs;

	friend bool operator==(const GcPlayerControlInput& lhs, const GcPlayerControlInput& rhs) 
	{
		return lhs.Inputs == rhs.Inputs &&
		lhs.InterceptInputBlackList == rhs.InterceptInputBlackList &&
		lhs.InterceptInputWhitelist == rhs.InterceptInputWhitelist &&
		lhs.InterceptAllInputs == rhs.InterceptAllInputs;
	}
};

//Dependency: GcPlayerControlInput
//Dependency: NMSString0x10
struct GcPlayerControlState
{
	NMS_GameComponents::GcPlayerControlInput OverrideInput;
	std::vector<NMSTemplate> Data;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 OverrideCamera;
	bool StickToGround;

	friend bool operator==(const GcPlayerControlState& lhs, const GcPlayerControlState& rhs) 
	{
		return lhs.OverrideInput == rhs.OverrideInput &&
		lhs.Data == rhs.Data &&
		lhs.Id == rhs.Id &&
		lhs.OverrideCamera == rhs.OverrideCamera &&
		lhs.StickToGround == rhs.StickToGround;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardKey
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;

	friend bool operator==(const TkBlackboardKey& lhs, const TkBlackboardKey& rhs) 
	{
		return lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.BlackboardCategory == rhs.BlackboardCategory;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlayerControlInput
//Dependency: NMSString0x10
//Dependency: GcPlayerControlState
//Dependency: TkBlackboardKey
struct GcPlayerControlComponentData
{
	NMS_GameComponents::GcPlayerControlInput BaseInput;
	NMS_Toolkit::TkBlackboardKey AimDir;
	NMS_Toolkit::TkBlackboardKey CrosshairDir;
	NMS_Toolkit::TkBlackboardKey TorchDir;
	NMS::NMSString0x10 BaseCamera;
	NMS::NMSString0x10 InitialState;
	std::vector<NMS_GameComponents::GcPlayerControlState> States;

	friend bool operator==(const GcPlayerControlComponentData& lhs, const GcPlayerControlComponentData& rhs) 
	{
		return lhs.BaseInput == rhs.BaseInput &&
		lhs.AimDir == rhs.AimDir &&
		lhs.CrosshairDir == rhs.CrosshairDir &&
		lhs.TorchDir == rhs.TorchDir &&
		lhs.BaseCamera == rhs.BaseCamera &&
		lhs.InitialState == rhs.InitialState &&
		lhs.States == rhs.States;
	}
};

//Dependency: VariableSizeString
struct GcAtmosphereList
{
	std::vector<NMS::VariableSizeString> Atmospheres;

	friend bool operator==(const GcAtmosphereList& lhs, const GcAtmosphereList& rhs) 
	{
		return lhs.Atmospheres == rhs.Atmospheres;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcWFCFace
{
	enum class TransformEnum : uint32_t
	{
		None = 0,
		Rotated90 = 1,
		Rotated180 = 2,
		Rotated270 = 3,
		FlippedHorizontally = 4,
	};

	std::vector<NMS::NMSString0x10> ExcludedNeighboursR0;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR1;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR2;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR3;
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcWFCFace::TransformEnum Transform;
	NMS::NMSString0x20 Connector;
	bool Incomplete;
	bool IsEntrance;
	bool Symmetric;
	bool Walkable;

	friend bool operator==(const GcWFCFace& lhs, const GcWFCFace& rhs) 
	{
		return lhs.ExcludedNeighboursR0 == rhs.ExcludedNeighboursR0 &&
		lhs.ExcludedNeighboursR1 == rhs.ExcludedNeighboursR1 &&
		lhs.ExcludedNeighboursR2 == rhs.ExcludedNeighboursR2 &&
		lhs.ExcludedNeighboursR3 == rhs.ExcludedNeighboursR3 &&
		lhs.Name == rhs.Name &&
		lhs.Transform == rhs.Transform &&
		lhs.Connector == rhs.Connector &&
		lhs.Incomplete == rhs.Incomplete &&
		lhs.IsEntrance == rhs.IsEntrance &&
		lhs.Symmetric == rhs.Symmetric &&
		lhs.Walkable == rhs.Walkable;
	}
};

//Dependency: TkModelResource
struct GcWeightedResource
{
	NMS_Toolkit::TkModelResource Geometry;
	float RelativeProbability;

	friend bool operator==(const GcWeightedResource& lhs, const GcWeightedResource& rhs) 
	{
		return lhs.Geometry == rhs.Geometry &&
		lhs.RelativeProbability == rhs.RelativeProbability;
	}
};

struct GcWFCTerrainConstraint
{
	enum class TerrainEnum : uint32_t
	{
		RequireAbove = 0,
		RequireBelow = 1,
	};

	enum class LevelsEnum : uint32_t
	{
		Lower = 0,
		Upper = 1,
		Both = 2,
	};

	enum class DirectionEnum : uint32_t
	{
		Left = 0,
		Back = 1,
		Right = 2,
		Forward = 3,
		LeftBack = 4,
		RightBack = 5,
		RightForward = 6,
		LeftForward = 7,
		All = 8,
	};

	NMS_GameComponents::GcWFCTerrainConstraint::DirectionEnum Direction;
	NMS_GameComponents::GcWFCTerrainConstraint::LevelsEnum Levels;
	NMS_GameComponents::GcWFCTerrainConstraint::TerrainEnum Terrain;

	friend bool operator==(const GcWFCTerrainConstraint& lhs, const GcWFCTerrainConstraint& rhs) 
	{
		return lhs.Direction == rhs.Direction &&
		lhs.Levels == rhs.Levels &&
		lhs.Terrain == rhs.Terrain;
	}
};

//Dependency: GcWFCFace
//Dependency: GcWeightedResource
//Dependency: GcWFCTerrainConstraint
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcWFCModulePrototype
{
	enum class TerrainEditsEnum : uint32_t
	{
		None = 0,
		ClearEntireBlock = 1,
		UseScene = 2,
		UseBasebuildingEdits = 3,
	};

	enum class FreighterModuleTypeEnum : uint32_t
	{
		None = 0,
		Room = 1,
		Corridor = 2,
	};

	NMS_GameComponents::GcWFCFace Back;
	NMS_GameComponents::GcWFCFace Down;
	NMS_GameComponents::GcWFCFace Forward;
	NMS_GameComponents::GcWFCFace Left;
	NMS_GameComponents::GcWFCFace Right;
	NMS_GameComponents::GcWFCFace Up;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LayoutGroup;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	std::vector<NMS_GameComponents::GcWFCTerrainConstraint> TerrainConstraints;
	NMS_GameComponents::GcWFCModulePrototype::FreighterModuleTypeEnum FreighterModuleType;
	float RelativeProbability;
	NMS_GameComponents::GcWFCModulePrototype::TerrainEditsEnum TerrainEdits;
	NMS::NMSString0x80 Group;
	NMS::NMSString0x80 Name;
	bool DontRotateModel;
	bool ExcludeOnGround;
	bool ExcludeOnTop;
	bool ExcludeRotatedVariants;
	bool Include;
	bool Indoors;
	bool LimitToOnePerLevel;

	friend bool operator==(const GcWFCModulePrototype& lhs, const GcWFCModulePrototype& rhs) 
	{
		return lhs.Back == rhs.Back &&
		lhs.Down == rhs.Down &&
		lhs.Forward == rhs.Forward &&
		lhs.Left == rhs.Left &&
		lhs.Right == rhs.Right &&
		lhs.Up == rhs.Up &&
		lhs.Id == rhs.Id &&
		lhs.LayoutGroup == rhs.LayoutGroup &&
		lhs.Scenes == rhs.Scenes &&
		lhs.TerrainConstraints == rhs.TerrainConstraints &&
		lhs.FreighterModuleType == rhs.FreighterModuleType &&
		lhs.RelativeProbability == rhs.RelativeProbability &&
		lhs.TerrainEdits == rhs.TerrainEdits &&
		lhs.Group == rhs.Group &&
		lhs.Name == rhs.Name &&
		lhs.DontRotateModel == rhs.DontRotateModel &&
		lhs.ExcludeOnGround == rhs.ExcludeOnGround &&
		lhs.ExcludeOnTop == rhs.ExcludeOnTop &&
		lhs.ExcludeRotatedVariants == rhs.ExcludeRotatedVariants &&
		lhs.Include == rhs.Include &&
		lhs.Indoors == rhs.Indoors &&
		lhs.LimitToOnePerLevel == rhs.LimitToOnePerLevel;
	}
};

struct GcPlanetLife
{
	enum class LifeSettingEnum : uint32_t
	{
		Dead = 0,
		Low = 1,
		Mid = 2,
		Full = 3,
	};

	NMS_GameComponents::GcPlanetLife::LifeSettingEnum LifeSetting;

	friend bool operator==(const GcPlanetLife& lhs, const GcPlanetLife& rhs) 
	{
		return lhs.LifeSetting == rhs.LifeSetting;
	}
};

//Dependency: GcTerrainTileType
//Dependency: NMSString0x10
struct GcEcosystemCreatureData
{
	NMS::NMSString0x10 Creature;
	float MaxHeight;
	float MinHeight;
	float Rarity;
	NMS_GameComponents::GcTerrainTileType TileType;

	friend bool operator==(const GcEcosystemCreatureData& lhs, const GcEcosystemCreatureData& rhs) 
	{
		return lhs.Creature == rhs.Creature &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.Rarity == rhs.Rarity &&
		lhs.TileType == rhs.TileType;
	}
};

//Dependency: GcTerrainEdit
//Dependency: Vector3f
struct GcPersistentTerrainEdits
{
	std::vector<NMS::Vector3f> BufferAnchors;
	std::vector<int32_t> BufferSizes;
	std::vector<NMS_GameComponents::GcTerrainEdit> Edits;
	uint64_t GalacticAddress;

	friend bool operator==(const GcPersistentTerrainEdits& lhs, const GcPersistentTerrainEdits& rhs) 
	{
		return lhs.BufferAnchors == rhs.BufferAnchors &&
		lhs.BufferSizes == rhs.BufferSizes &&
		lhs.Edits == rhs.Edits &&
		lhs.GalacticAddress == rhs.GalacticAddress;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCreatureHealthData
{
	NMS::NMSString0x10 DeathAnim;
	NMS::NMSString0x10 DeathAudio;
	NMS::NMSString0x10 DeathEffect;
	std::vector<NMS::NMSString0x20A> DespawnOnDeathDescriptors;
	NMS::NMSString0x10 HurtAnim;
	NMS::NMSString0x10 HurtAudio;
	bool DespawnOnDeath;

	friend bool operator==(const GcCreatureHealthData& lhs, const GcCreatureHealthData& rhs) 
	{
		return lhs.DeathAnim == rhs.DeathAnim &&
		lhs.DeathAudio == rhs.DeathAudio &&
		lhs.DeathEffect == rhs.DeathEffect &&
		lhs.DespawnOnDeathDescriptors == rhs.DespawnOnDeathDescriptors &&
		lhs.HurtAnim == rhs.HurtAnim &&
		lhs.HurtAudio == rhs.HurtAudio &&
		lhs.DespawnOnDeath == rhs.DespawnOnDeath;
	}
};

//Dependency: NMSString0x10
struct GcBaseBuildingEntryCosts
{
	NMS::NMSString0x10 ID;
	float Active0AverageFrameTimeCost;
	float Active1AverageFrameTimeCost;
	int32_t ActivePhysicsComponents;
	int32_t ActiveTotalNodes;
	float Inactive0AverageFrameTimeCost;
	float Inactive1AverageFrameTimeCost;
	int32_t InactivePhysicsComponents;
	int32_t InactiveTotalNodes;

	friend bool operator==(const GcBaseBuildingEntryCosts& lhs, const GcBaseBuildingEntryCosts& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Active0AverageFrameTimeCost == rhs.Active0AverageFrameTimeCost &&
		lhs.Active1AverageFrameTimeCost == rhs.Active1AverageFrameTimeCost &&
		lhs.ActivePhysicsComponents == rhs.ActivePhysicsComponents &&
		lhs.ActiveTotalNodes == rhs.ActiveTotalNodes &&
		lhs.Inactive0AverageFrameTimeCost == rhs.Inactive0AverageFrameTimeCost &&
		lhs.Inactive1AverageFrameTimeCost == rhs.Inactive1AverageFrameTimeCost &&
		lhs.InactivePhysicsComponents == rhs.InactivePhysicsComponents &&
		lhs.InactiveTotalNodes == rhs.InactiveTotalNodes;
	}
};

//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: NMSString0x100
struct GcSpaceStationSpawnData
{
	enum class SpawnModeEnum : uint32_t
	{
		None = 0,
		UseSeed = 1,
		UseAltID = 2,
	};

	NMS::Vector3f SpawnFacing;
	NMS::Vector3f SpawnPosition;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcSpaceStationSpawnData::SpawnModeEnum SpawnMode;
	NMS::NMSString0x100 AltId;

	friend bool operator==(const GcSpaceStationSpawnData& lhs, const GcSpaceStationSpawnData& rhs) 
	{
		return lhs.SpawnFacing == rhs.SpawnFacing &&
		lhs.SpawnPosition == rhs.SpawnPosition &&
		lhs.Seed == rhs.Seed &&
		lhs.SpawnMode == rhs.SpawnMode &&
		lhs.AltId == rhs.AltId;
	}
};

//Dependency: NMSString0x20
struct GcCustomisationDescriptorList
{
	std::vector<NMS::NMSString0x20> Descriptors;

	friend bool operator==(const GcCustomisationDescriptorList& lhs, const GcCustomisationDescriptorList& rhs) 
	{
		return lhs.Descriptors == rhs.Descriptors;
	}
};

struct GcWeightingCurve
{
	enum class WeightingCurveEnum : uint32_t
	{
		NoWeighting = 0,
		MaxIsUncommon = 1,
		MaxIsRare = 2,
		MaxIsSuperRare = 3,
		MinIsUncommon = 4,
		MinIsRare = 5,
		MinIsSuperRare = 6,
	};

	NMS_GameComponents::GcWeightingCurve::WeightingCurveEnum WeightingCurve;

	friend bool operator==(const GcWeightingCurve& lhs, const GcWeightingCurve& rhs) 
	{
		return lhs.WeightingCurve == rhs.WeightingCurve;
	}
};

//Dependency: GcStatsTypes
//Dependency: GcWeightingCurve
struct GcProceduralTechnologyStatLevel
{
	NMS_GameComponents::GcStatsTypes Stat;
	float ValueMax;
	float ValueMin;
	NMS_GameComponents::GcWeightingCurve WeightingCurve;
	bool AlwaysChoose;

	friend bool operator==(const GcProceduralTechnologyStatLevel& lhs, const GcProceduralTechnologyStatLevel& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.ValueMax == rhs.ValueMax &&
		lhs.ValueMin == rhs.ValueMin &&
		lhs.WeightingCurve == rhs.WeightingCurve &&
		lhs.AlwaysChoose == rhs.AlwaysChoose;
	}
};

struct GcProceduralTechnologyCategory
{
	enum class ProceduralTechnologyCategoryEnum : uint32_t
	{
		None = 0,
		Combat = 1,
		Mining = 2,
		Scanning = 3,
		Protection = 4,
	};

	NMS_GameComponents::GcProceduralTechnologyCategory::ProceduralTechnologyCategoryEnum ProceduralTechnologyCategory;

	friend bool operator==(const GcProceduralTechnologyCategory& lhs, const GcProceduralTechnologyCategory& rhs) 
	{
		return lhs.ProceduralTechnologyCategory == rhs.ProceduralTechnologyCategory;
	}
};

//Dependency: GcProceduralTechnologyStatLevel
//Dependency: GcProceduralTechnologyCategory
//Dependency: GcWeightingCurve
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcProceduralTechnologyData
{
	enum class QualityEnum : uint32_t
	{
		Normal = 0,
		Rare = 1,
		Epic = 2,
		Legendary = 3,
		Illegal = 4,
		Sentinel = 5,
		Robot = 6,
		SeaTrash = 7,
	};

	NMS::Colour Colour;
	NMS::Colour UpgradeColour;
	NMS::NMSString0x20A Group;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcProceduralTechnologyStatLevel> StatLevels;
	NMS::NMSString0x10 Template;
	NMS_GameComponents::GcProceduralTechnologyCategory Category;
	int32_t NumStatsMax;
	int32_t NumStatsMin;
	NMS_GameComponents::GcProceduralTechnologyData::QualityEnum Quality;
	NMS_GameComponents::GcWeightingCurve WeightingCurve;
	NMS::NMSString0x80 Description;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	NMS::NMSString0x80 Subtitle;

	friend bool operator==(const GcProceduralTechnologyData& lhs, const GcProceduralTechnologyData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.UpgradeColour == rhs.UpgradeColour &&
		lhs.Group == rhs.Group &&
		lhs.ID == rhs.ID &&
		lhs.StatLevels == rhs.StatLevels &&
		lhs.Template == rhs.Template &&
		lhs.Category == rhs.Category &&
		lhs.NumStatsMax == rhs.NumStatsMax &&
		lhs.NumStatsMin == rhs.NumStatsMin &&
		lhs.Quality == rhs.Quality &&
		lhs.WeightingCurve == rhs.WeightingCurve &&
		lhs.Description == rhs.Description &&
		lhs.Name == rhs.Name &&
		lhs.NameLower == rhs.NameLower &&
		lhs.Subtitle == rhs.Subtitle;
	}
};

//Dependency: Vector3f
struct GcSmokeBotStats
{
	NMS::Vector3f MinCpuFPSFacing;
	NMS::Vector3f MinCpuFPSPos;
	NMS::Vector3f MinGpuFPSFacing;
	NMS::Vector3f MinGpuFPSPos;
	NMS::Vector3f MinMemoryFacing;
	NMS::Vector3f MinMemoryPos;
	float AvgCpuFPS;
	float AvgGpuFPS;
	int32_t FrameCount;
	float MaxCpuFPS;
	float MaxGpuFPS;
	float MinCpuFPS;
	float MinGpuFPS;
	float MinMemory;
	float TotalCpuFps;
	float TotalGpuFps;

	friend bool operator==(const GcSmokeBotStats& lhs, const GcSmokeBotStats& rhs) 
	{
		return lhs.MinCpuFPSFacing == rhs.MinCpuFPSFacing &&
		lhs.MinCpuFPSPos == rhs.MinCpuFPSPos &&
		lhs.MinGpuFPSFacing == rhs.MinGpuFPSFacing &&
		lhs.MinGpuFPSPos == rhs.MinGpuFPSPos &&
		lhs.MinMemoryFacing == rhs.MinMemoryFacing &&
		lhs.MinMemoryPos == rhs.MinMemoryPos &&
		lhs.AvgCpuFPS == rhs.AvgCpuFPS &&
		lhs.AvgGpuFPS == rhs.AvgGpuFPS &&
		lhs.FrameCount == rhs.FrameCount &&
		lhs.MaxCpuFPS == rhs.MaxCpuFPS &&
		lhs.MaxGpuFPS == rhs.MaxGpuFPS &&
		lhs.MinCpuFPS == rhs.MinCpuFPS &&
		lhs.MinGpuFPS == rhs.MinGpuFPS &&
		lhs.MinMemory == rhs.MinMemory &&
		lhs.TotalCpuFps == rhs.TotalCpuFps &&
		lhs.TotalGpuFps == rhs.TotalGpuFps;
	}
};

//Dependency: GcSmokeBotStats
struct GcSmokeBotPlanetReport
{
	NMS_GameComponents::GcSmokeBotStats PlanetStats;
	uint64_t UA;

	friend bool operator==(const GcSmokeBotPlanetReport& lhs, const GcSmokeBotPlanetReport& rhs) 
	{
		return lhs.PlanetStats == rhs.PlanetStats &&
		lhs.UA == rhs.UA;
	}
};

//Dependency: GcSmokeBotStats
//Dependency: GcSmokeBotPlanetReport
struct GcSmokeBotSystemReport
{
	NMS_GameComponents::GcSmokeBotStats SpaceStats;
	NMS_GameComponents::GcSmokeBotStats SystemStats;
	std::vector<NMS_GameComponents::GcSmokeBotPlanetReport> PlanetReports;
	uint64_t UA;

	friend bool operator==(const GcSmokeBotSystemReport& lhs, const GcSmokeBotSystemReport& rhs) 
	{
		return lhs.SpaceStats == rhs.SpaceStats &&
		lhs.SystemStats == rhs.SystemStats &&
		lhs.PlanetReports == rhs.PlanetReports &&
		lhs.UA == rhs.UA;
	}
};

struct GcBuildingComponentData
{

	friend bool operator==(const GcBuildingComponentData& lhs, const GcBuildingComponentData& rhs) 
	{
		return true;
	}
};

struct GcCreatureFlockMovementData
{
	float BankTime;
	float FlockAlign;
	float FlockAvoidPredators;
	float FlockAvoidPredatorsMaxDist;
	float FlockAvoidPredatorsMinDist;
	float FlockAvoidPredatorsSpeedBoost;
	float FlockAvoidTerrain;
	float FlockAvoidTerrainMaxDist;
	float FlockAvoidTerrainMinDist;
	float FlockCohere;
	float FlockFollow;
	float FlockHysteresis;
	float FlockMoveDirectionTime;
	float FlockMoveSpeed;
	float FlockSeperate;
	float FlockSeperateMaxDist;
	float FlockSeperateMinDist;
	float FlockTurnAngle;
	float MaxBank;
	float MaxFlapSpeed;
	int32_t MaxFlockMembers;
	float MinFlapSpeed;
	int32_t MinFlockMembers;
	float MoveInFacingStrength;

	friend bool operator==(const GcCreatureFlockMovementData& lhs, const GcCreatureFlockMovementData& rhs) 
	{
		return lhs.BankTime == rhs.BankTime &&
		lhs.FlockAlign == rhs.FlockAlign &&
		lhs.FlockAvoidPredators == rhs.FlockAvoidPredators &&
		lhs.FlockAvoidPredatorsMaxDist == rhs.FlockAvoidPredatorsMaxDist &&
		lhs.FlockAvoidPredatorsMinDist == rhs.FlockAvoidPredatorsMinDist &&
		lhs.FlockAvoidPredatorsSpeedBoost == rhs.FlockAvoidPredatorsSpeedBoost &&
		lhs.FlockAvoidTerrain == rhs.FlockAvoidTerrain &&
		lhs.FlockAvoidTerrainMaxDist == rhs.FlockAvoidTerrainMaxDist &&
		lhs.FlockAvoidTerrainMinDist == rhs.FlockAvoidTerrainMinDist &&
		lhs.FlockCohere == rhs.FlockCohere &&
		lhs.FlockFollow == rhs.FlockFollow &&
		lhs.FlockHysteresis == rhs.FlockHysteresis &&
		lhs.FlockMoveDirectionTime == rhs.FlockMoveDirectionTime &&
		lhs.FlockMoveSpeed == rhs.FlockMoveSpeed &&
		lhs.FlockSeperate == rhs.FlockSeperate &&
		lhs.FlockSeperateMaxDist == rhs.FlockSeperateMaxDist &&
		lhs.FlockSeperateMinDist == rhs.FlockSeperateMinDist &&
		lhs.FlockTurnAngle == rhs.FlockTurnAngle &&
		lhs.MaxBank == rhs.MaxBank &&
		lhs.MaxFlapSpeed == rhs.MaxFlapSpeed &&
		lhs.MaxFlockMembers == rhs.MaxFlockMembers &&
		lhs.MinFlapSpeed == rhs.MinFlapSpeed &&
		lhs.MinFlockMembers == rhs.MinFlockMembers &&
		lhs.MoveInFacingStrength == rhs.MoveInFacingStrength;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcCreatureParticleEffectDataEntry
{
	NMS::VariableSizeString EffectLocator;
	NMS::NMSString0x10 EffectName;
	std::vector<NMSTemplate> Requirements;
	float Scale;
	bool Attached;
	bool DetachOnRetire;

	friend bool operator==(const GcCreatureParticleEffectDataEntry& lhs, const GcCreatureParticleEffectDataEntry& rhs) 
	{
		return lhs.EffectLocator == rhs.EffectLocator &&
		lhs.EffectName == rhs.EffectName &&
		lhs.Requirements == rhs.Requirements &&
		lhs.Scale == rhs.Scale &&
		lhs.Attached == rhs.Attached &&
		lhs.DetachOnRetire == rhs.DetachOnRetire;
	}
};

struct GcCreatureParticleEffectTrigger
{
	enum class CreatureParticleEffectTriggerEnum : uint32_t
	{
		None = 0,
		Spawn = 1,
		Despawn = 2,
		Death = 4,
		Ragdoll = 8,
		Appear = 16,
	};

	NMS_GameComponents::GcCreatureParticleEffectTrigger::CreatureParticleEffectTriggerEnum CreatureParticleEffectTrigger;

	friend bool operator==(const GcCreatureParticleEffectTrigger& lhs, const GcCreatureParticleEffectTrigger& rhs) 
	{
		return lhs.CreatureParticleEffectTrigger == rhs.CreatureParticleEffectTrigger;
	}
};

//Dependency: GcCreatureParticleEffectDataEntry
//Dependency: GcCreatureParticleEffectTrigger
struct GcCreatureParticleEffectData
{
	std::vector<NMS_GameComponents::GcCreatureParticleEffectDataEntry> Effects;
	NMS_GameComponents::GcCreatureParticleEffectTrigger RetireTriggers;
	NMS_GameComponents::GcCreatureParticleEffectTrigger SpawnTriggers;

	friend bool operator==(const GcCreatureParticleEffectData& lhs, const GcCreatureParticleEffectData& rhs) 
	{
		return lhs.Effects == rhs.Effects &&
		lhs.RetireTriggers == rhs.RetireTriggers &&
		lhs.SpawnTriggers == rhs.SpawnTriggers;
	}
};

//Dependency: GcCreatureParticleEffectData
struct GcCreatureParticleEffects
{
	std::vector<NMS_GameComponents::GcCreatureParticleEffectData> ParticleEffects;

	friend bool operator==(const GcCreatureParticleEffects& lhs, const GcCreatureParticleEffects& rhs) 
	{
		return lhs.ParticleEffects == rhs.ParticleEffects;
	}
};

struct GcSolarGenerationData
{
	uint64_t SolarSeed;

	friend bool operator==(const GcSolarGenerationData& lhs, const GcSolarGenerationData& rhs) 
	{
		return lhs.SolarSeed == rhs.SolarSeed;
	}
};

//Dependency: GcAudioWwiseEvents
struct GcAudioAreaTriggerComponentData
{
	float EnterDistance;
	NMS_GameComponents::GcAudioWwiseEvents EventEnter;
	NMS_GameComponents::GcAudioWwiseEvents EventExit;
	float ExitDistance;

	friend bool operator==(const GcAudioAreaTriggerComponentData& lhs, const GcAudioAreaTriggerComponentData& rhs) 
	{
		return lhs.EnterDistance == rhs.EnterDistance &&
		lhs.EventEnter == rhs.EventEnter &&
		lhs.EventExit == rhs.EventExit &&
		lhs.ExitDistance == rhs.ExitDistance;
	}
};

//Dependency: GcStatsTypes
struct GcStatsBonus
{
	float Bonus;
	int32_t Level;
	NMS_GameComponents::GcStatsTypes Stat;

	friend bool operator==(const GcStatsBonus& lhs, const GcStatsBonus& rhs) 
	{
		return lhs.Bonus == rhs.Bonus &&
		lhs.Level == rhs.Level &&
		lhs.Stat == rhs.Stat;
	}
};

//Dependency: GcStatsBonus
//Dependency: Colour
//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcPlayerWeaponBiomeProperties
{
	NMS::Colour UpgradeColourOverride;
	NMS::NMSString0x10 MuzzleChargedAnimId;
	NMS::NMSString0x10 MuzzleChargedParticlesId;
	NMS::NMSString0x10 MuzzleFireAnimId;
	NMS::NMSString0x10 MuzzleFireParticlesId;
	NMS::NMSString0x10 MuzzleIdleAnimId;
	NMS::NMSString0x10 MuzzleIdleParticlesId;
	NMS::NMSString0x10 Projectile;
	std::vector<NMS_GameComponents::GcStatsBonus> StatBonusesOverride;
	NMS::NMSString0x10 WeaponChargedAnimId;
	NMS::NMSString0x10 WeaponFireAnimId;
	NMS::NMSString0x10 WeaponFireParticlesId;
	NMS::NMSString0x10 WeaponIdleAnimId;
	NMS_GameComponents::GcBiomeType Biome;

	friend bool operator==(const GcPlayerWeaponBiomeProperties& lhs, const GcPlayerWeaponBiomeProperties& rhs) 
	{
		return lhs.UpgradeColourOverride == rhs.UpgradeColourOverride &&
		lhs.MuzzleChargedAnimId == rhs.MuzzleChargedAnimId &&
		lhs.MuzzleChargedParticlesId == rhs.MuzzleChargedParticlesId &&
		lhs.MuzzleFireAnimId == rhs.MuzzleFireAnimId &&
		lhs.MuzzleFireParticlesId == rhs.MuzzleFireParticlesId &&
		lhs.MuzzleIdleAnimId == rhs.MuzzleIdleAnimId &&
		lhs.MuzzleIdleParticlesId == rhs.MuzzleIdleParticlesId &&
		lhs.Projectile == rhs.Projectile &&
		lhs.StatBonusesOverride == rhs.StatBonusesOverride &&
		lhs.WeaponChargedAnimId == rhs.WeaponChargedAnimId &&
		lhs.WeaponFireAnimId == rhs.WeaponFireAnimId &&
		lhs.WeaponFireParticlesId == rhs.WeaponFireParticlesId &&
		lhs.WeaponIdleAnimId == rhs.WeaponIdleAnimId &&
		lhs.Biome == rhs.Biome;
	}
};

struct GcRemoteWeapons
{
	enum class RemoteWeaponTypeEnum : uint32_t
	{
		Laser = 0,
		VehicleLaser = 1,
		AIMechLaser = 2,
		ShipLaser = 3,
		ShipLaser2 = 4,
		RailLaser = 5,
		NumLasers = 6,
		BoltCaster = 7,
		Shotgun = 8,
		Cannon = 9,
		Burst = 10,
		Flamethrower = 11,
		MineGrenade = 12,
		BounceGrenade = 13,
		StunGrenade = 14,
		VehicleCanon = 15,
		AIMechCanon = 16,
		ShipPhoton = 17,
		ShipShotgun = 18,
		ShipMinigun = 19,
		ShipPlasma = 20,
		ShipRocket = 21,
		None = 22,
	};

	NMS_GameComponents::GcRemoteWeapons::RemoteWeaponTypeEnum RemoteWeaponType;

	friend bool operator==(const GcRemoteWeapons& lhs, const GcRemoteWeapons& rhs) 
	{
		return lhs.RemoteWeaponType == rhs.RemoteWeaponType;
	}
};

struct GcPlayerWeaponClass
{
	enum class WeaponClassEnum : uint32_t
	{
		None = 0,
		Projectile = 1,
		ChargedProjectile = 2,
		Laser = 3,
		Grenade = 4,
		Utility = 5,
		TerrainEditor = 6,
		Spawner = 7,
		SpawnerAlt = 8,
		Fishing = 9,
	};

	NMS_GameComponents::GcPlayerWeaponClass::WeaponClassEnum WeaponClass;

	friend bool operator==(const GcPlayerWeaponClass& lhs, const GcPlayerWeaponClass& rhs) 
	{
		return lhs.WeaponClass == rhs.WeaponClass;
	}
};

//Dependency: GcPlayerWeaponBiomeProperties
//Dependency: GcStatsTypes
//Dependency: GcRemoteWeapons
//Dependency: GcPlayerWeaponClass
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcPlayerWeaponPropertiesData
{
	NMS::Colour DefaultMuzzleLightColour;
	std::vector<NMS_GameComponents::GcPlayerWeaponBiomeProperties> BiomeProperties;
	NMS::NMSString0x10 DefaultMuzzleChargedAnimId;
	NMS::NMSString0x10 DefaultMuzzleChargedParticlesId;
	NMS::NMSString0x10 DefaultMuzzleFireAnimId;
	NMS::NMSString0x10 DefaultMuzzleFireParticlesId;
	NMS::NMSString0x10 DefaultMuzzleIdleAnimId;
	NMS::NMSString0x10 DefaultMuzzleIdleParticlesId;
	NMS::NMSString0x10 DefaultProjectile;
	NMS::NMSString0x10 DefaultWeaponChargedAnimId;
	NMS::NMSString0x10 DefaultWeaponFireAnimId;
	NMS::NMSString0x10 DefaultWeaponFireParticlesId;
	NMS::NMSString0x10 DefaultWeaponIdleAnimId;
	NMS::VariableSizeString MuzzleGunResource;
	NMS::VariableSizeString MuzzleLaserResource;
	NMS::NMSString0x10 ShakeId;
	NMS::NMSString0x10 VibartionId;
	float ChargingMuzzleFlashMaxScale;
	float ChargingMuzzleFlashMinScale;
	float MuzzleFlashScale;
	float MuzzleLightIntensity;
	float ParticlesOffsetMultiplier;
	NMS_GameComponents::GcRemoteWeapons RemoteType;
	float RumbleScale;
	NMS_GameComponents::GcStatsTypes Stat;
	float VibrationScale;
	NMS_GameComponents::GcPlayerWeaponClass WeaponClass;
	bool FlashMuzzleOnProjectileFire;
	bool MuzzleLightUsesLaserColour;
	bool MuzzleLightUsesMuzzleColour;
	bool UseMuzzleLight;
	bool UsesCustomBiomeAnims;
	bool UsesCustomBiomeColour;
	bool UsesCustomBiomeFireAnims;
	bool UsesCustomBiomeFireParticles;
	bool UsesCustomBiomeMuzzleParticles;
	bool UsesCustomBiomeProjectile;
	bool UsesCustomBiomeStats;

	friend bool operator==(const GcPlayerWeaponPropertiesData& lhs, const GcPlayerWeaponPropertiesData& rhs) 
	{
		return lhs.DefaultMuzzleLightColour == rhs.DefaultMuzzleLightColour &&
		lhs.BiomeProperties == rhs.BiomeProperties &&
		lhs.DefaultMuzzleChargedAnimId == rhs.DefaultMuzzleChargedAnimId &&
		lhs.DefaultMuzzleChargedParticlesId == rhs.DefaultMuzzleChargedParticlesId &&
		lhs.DefaultMuzzleFireAnimId == rhs.DefaultMuzzleFireAnimId &&
		lhs.DefaultMuzzleFireParticlesId == rhs.DefaultMuzzleFireParticlesId &&
		lhs.DefaultMuzzleIdleAnimId == rhs.DefaultMuzzleIdleAnimId &&
		lhs.DefaultMuzzleIdleParticlesId == rhs.DefaultMuzzleIdleParticlesId &&
		lhs.DefaultProjectile == rhs.DefaultProjectile &&
		lhs.DefaultWeaponChargedAnimId == rhs.DefaultWeaponChargedAnimId &&
		lhs.DefaultWeaponFireAnimId == rhs.DefaultWeaponFireAnimId &&
		lhs.DefaultWeaponFireParticlesId == rhs.DefaultWeaponFireParticlesId &&
		lhs.DefaultWeaponIdleAnimId == rhs.DefaultWeaponIdleAnimId &&
		lhs.MuzzleGunResource == rhs.MuzzleGunResource &&
		lhs.MuzzleLaserResource == rhs.MuzzleLaserResource &&
		lhs.ShakeId == rhs.ShakeId &&
		lhs.VibartionId == rhs.VibartionId &&
		lhs.ChargingMuzzleFlashMaxScale == rhs.ChargingMuzzleFlashMaxScale &&
		lhs.ChargingMuzzleFlashMinScale == rhs.ChargingMuzzleFlashMinScale &&
		lhs.MuzzleFlashScale == rhs.MuzzleFlashScale &&
		lhs.MuzzleLightIntensity == rhs.MuzzleLightIntensity &&
		lhs.ParticlesOffsetMultiplier == rhs.ParticlesOffsetMultiplier &&
		lhs.RemoteType == rhs.RemoteType &&
		lhs.RumbleScale == rhs.RumbleScale &&
		lhs.Stat == rhs.Stat &&
		lhs.VibrationScale == rhs.VibrationScale &&
		lhs.WeaponClass == rhs.WeaponClass &&
		lhs.FlashMuzzleOnProjectileFire == rhs.FlashMuzzleOnProjectileFire &&
		lhs.MuzzleLightUsesLaserColour == rhs.MuzzleLightUsesLaserColour &&
		lhs.MuzzleLightUsesMuzzleColour == rhs.MuzzleLightUsesMuzzleColour &&
		lhs.UseMuzzleLight == rhs.UseMuzzleLight &&
		lhs.UsesCustomBiomeAnims == rhs.UsesCustomBiomeAnims &&
		lhs.UsesCustomBiomeColour == rhs.UsesCustomBiomeColour &&
		lhs.UsesCustomBiomeFireAnims == rhs.UsesCustomBiomeFireAnims &&
		lhs.UsesCustomBiomeFireParticles == rhs.UsesCustomBiomeFireParticles &&
		lhs.UsesCustomBiomeMuzzleParticles == rhs.UsesCustomBiomeMuzzleParticles &&
		lhs.UsesCustomBiomeProjectile == rhs.UsesCustomBiomeProjectile &&
		lhs.UsesCustomBiomeStats == rhs.UsesCustomBiomeStats;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkMaterialResource
{
	NMS::VariableSizeString Filename;
	NMS::GcResource ResHandle;

	friend bool operator==(const TkMaterialResource& lhs, const TkMaterialResource& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.ResHandle == rhs.ResHandle;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkMaterialResource
struct GcCamouflageData
{
	NMS_Toolkit::TkMaterialResource CamouflageMaterial;
	float DissolveTime;
	float DissolveTimeVR;
	float FadeInTime;
	float FadeOutTime;
	float LowQualityBrightnessMultiplier;
	float LowQualityFresnelModifier;

	friend bool operator==(const GcCamouflageData& lhs, const GcCamouflageData& rhs) 
	{
		return lhs.CamouflageMaterial == rhs.CamouflageMaterial &&
		lhs.DissolveTime == rhs.DissolveTime &&
		lhs.DissolveTimeVR == rhs.DissolveTimeVR &&
		lhs.FadeInTime == rhs.FadeInTime &&
		lhs.FadeOutTime == rhs.FadeOutTime &&
		lhs.LowQualityBrightnessMultiplier == rhs.LowQualityBrightnessMultiplier &&
		lhs.LowQualityFresnelModifier == rhs.LowQualityFresnelModifier;
	}
};

//Dependency: GcPlayerWeaponPropertiesData
//Dependency: GcCamouflageData
struct GcPlayerWeaponPropertiesTable
{
	NMS_GameComponents::GcPlayerWeaponPropertiesData PropertiesData[20];
	NMS_GameComponents::GcCamouflageData CamouflageData;

	friend bool operator==(const GcPlayerWeaponPropertiesTable& lhs, const GcPlayerWeaponPropertiesTable& rhs) 
	{
		return std::equal(std::begin(lhs.PropertiesData), std::end(lhs.PropertiesData), std::begin(rhs.PropertiesData)) &&
		lhs.CamouflageData == rhs.CamouflageData;
	}
};

//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
struct GcButtonSpawnOffset
{
	float AngleMax;
	float AngleMin;
	int32_t Count;
	float Facing;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	float Offset;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;
	float Spacing;

	friend bool operator==(const GcButtonSpawnOffset& lhs, const GcButtonSpawnOffset& rhs) 
	{
		return lhs.AngleMax == rhs.AngleMax &&
		lhs.AngleMin == rhs.AngleMin &&
		lhs.Count == rhs.Count &&
		lhs.Facing == rhs.Facing &&
		lhs.Faction == rhs.Faction &&
		lhs.Offset == rhs.Offset &&
		lhs.ShipRole == rhs.ShipRole &&
		lhs.Spacing == rhs.Spacing;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionNearScanEvent
{
	NMS::NMSString0x20A Event;
	float Distance;
	bool AllowInShip;
	bool MustMatchThisMissionIDSeed;
	bool RequiresFullFireteam;
	bool ReturnTrueIfMarkerGone;

	friend bool operator==(const GcMissionConditionNearScanEvent& lhs, const GcMissionConditionNearScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.Distance == rhs.Distance &&
		lhs.AllowInShip == rhs.AllowInShip &&
		lhs.MustMatchThisMissionIDSeed == rhs.MustMatchThisMissionIDSeed &&
		lhs.RequiresFullFireteam == rhs.RequiresFullFireteam &&
		lhs.ReturnTrueIfMarkerGone == rhs.ReturnTrueIfMarkerGone;
	}
};

//Dependency: NMSString0x80
struct GcDailyRecurrence
{
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;

	friend bool operator==(const GcDailyRecurrence& lhs, const GcDailyRecurrence& rhs) 
	{
		return lhs.RecurrenceHour == rhs.RecurrenceHour &&
		lhs.RecurrenceMinute == rhs.RecurrenceMinute &&
		lhs.DebugText == rhs.DebugText;
	}
};

struct GcNetworkInterpolationComponentData
{
	enum class SynchroniseScaleEnum : uint32_t
	{
		Never = 0,
		Once = 1,
		Always = 2,
	};

	NMS_GameComponents::GcNetworkInterpolationComponentData::SynchroniseScaleEnum SynchroniseScale;
	bool SupportTeleportation;
	bool UpdateWhileInactive;

	friend bool operator==(const GcNetworkInterpolationComponentData& lhs, const GcNetworkInterpolationComponentData& rhs) 
	{
		return lhs.SynchroniseScale == rhs.SynchroniseScale &&
		lhs.SupportTeleportation == rhs.SupportTeleportation &&
		lhs.UpdateWhileInactive == rhs.UpdateWhileInactive;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimationAttachmentData
{
	NMS::NMSString0x10 AnimGroup;

	friend bool operator==(const TkAnimationAttachmentData& lhs, const TkAnimationAttachmentData& rhs) 
	{
		return lhs.AnimGroup == rhs.AnimGroup;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20
struct GcExpeditionDebriefPunctuation
{
	float Delay;
	NMS::NMSString0x20 Punctuation;

	friend bool operator==(const GcExpeditionDebriefPunctuation& lhs, const GcExpeditionDebriefPunctuation& rhs) 
	{
		return lhs.Delay == rhs.Delay &&
		lhs.Punctuation == rhs.Punctuation;
	}
};

//Dependency: NMSString0x20A
struct GcFrigateTraitStrengthValues
{
	NMS::NMSString0x20A StatLocID;
	int32_t StatAlteration[10];
	bool StatDisplaysPositive;

	friend bool operator==(const GcFrigateTraitStrengthValues& lhs, const GcFrigateTraitStrengthValues& rhs) 
	{
		return lhs.StatLocID == rhs.StatLocID &&
		std::equal(std::begin(lhs.StatAlteration), std::end(lhs.StatAlteration), std::begin(rhs.StatAlteration)) &&
		lhs.StatDisplaysPositive == rhs.StatDisplaysPositive;
	}
};

//Dependency: GcFrigateTraitStrengthValues
struct GcFrigateTraitStrengthByType
{
	NMS_GameComponents::GcFrigateTraitStrengthValues FrigateStatType[11];

	friend bool operator==(const GcFrigateTraitStrengthByType& lhs, const GcFrigateTraitStrengthByType& rhs) 
	{
		return std::equal(std::begin(lhs.FrigateStatType), std::end(lhs.FrigateStatType), std::begin(rhs.FrigateStatType));
	}
};

struct GcFrigateStatRange
{
	int32_t Maximum;
	int32_t Minimum;

	friend bool operator==(const GcFrigateStatRange& lhs, const GcFrigateStatRange& rhs) 
	{
		return lhs.Maximum == rhs.Maximum &&
		lhs.Minimum == rhs.Minimum;
	}
};

//Dependency: GcFrigateStatRange
//Dependency: NMSString0x10
struct GcFrigateStats
{
	NMS::NMSString0x10 InitialTrait;
	NMS_GameComponents::GcFrigateStatRange Stats[11];

	friend bool operator==(const GcFrigateStats& lhs, const GcFrigateStats& rhs) 
	{
		return lhs.InitialTrait == rhs.InitialTrait &&
		std::equal(std::begin(lhs.Stats), std::end(lhs.Stats), std::begin(rhs.Stats));
	}
};

//Dependency: GcFrigateStats
struct GcFrigateStatsByClass
{
	NMS_GameComponents::GcFrigateStats FrigateClass[10];

	friend bool operator==(const GcFrigateStatsByClass& lhs, const GcFrigateStatsByClass& rhs) 
	{
		return std::equal(std::begin(lhs.FrigateClass), std::end(lhs.FrigateClass), std::begin(rhs.FrigateClass));
	}
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcPassiveFrigateIncome
{
	NMS::NMSString0x10 IncomeId;
	int32_t AmountOfIncomeRewarded;
	int32_t ForEveryXAmountOfTheStat;
	NMS_GameComponents::GcInventoryType IncomeType;

	friend bool operator==(const GcPassiveFrigateIncome& lhs, const GcPassiveFrigateIncome& rhs) 
	{
		return lhs.IncomeId == rhs.IncomeId &&
		lhs.AmountOfIncomeRewarded == rhs.AmountOfIncomeRewarded &&
		lhs.ForEveryXAmountOfTheStat == rhs.ForEveryXAmountOfTheStat &&
		lhs.IncomeType == rhs.IncomeType;
	}
};

//Dependency: GcPassiveFrigateIncome
struct GcPassiveFrigateIncomeArray
{
	NMS_GameComponents::GcPassiveFrigateIncome Array[10];

	friend bool operator==(const GcPassiveFrigateIncomeArray& lhs, const GcPassiveFrigateIncomeArray& rhs) 
	{
		return std::equal(std::begin(lhs.Array), std::end(lhs.Array), std::begin(rhs.Array));
	}
};

struct GcExpeditionDifficultyKeyframe
{
	float Difficulty;
	int32_t EventNumber;

	friend bool operator==(const GcExpeditionDifficultyKeyframe& lhs, const GcExpeditionDifficultyKeyframe& rhs) 
	{
		return lhs.Difficulty == rhs.Difficulty &&
		lhs.EventNumber == rhs.EventNumber;
	}
};

//Dependency: NMSString0x10
struct GcExpeditionPaymentToken
{
	NMS::NMSString0x10 TokenName;
	int32_t TokenValue;

	friend bool operator==(const GcExpeditionPaymentToken& lhs, const GcExpeditionPaymentToken& rhs) 
	{
		return lhs.TokenName == rhs.TokenName &&
		lhs.TokenValue == rhs.TokenValue;
	}
};

//Dependency: GcFrigateStatType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcExpeditionPowerup
{
	NMS::NMSString0x20A ModuleDescription;
	NMS::NMSString0x20A SelectionDescription;
	NMS::NMSString0x10 ProductId;
	NMS_GameComponents::GcFrigateStatType StatModified;
	int32_t ValueChange;

	friend bool operator==(const GcExpeditionPowerup& lhs, const GcExpeditionPowerup& rhs) 
	{
		return lhs.ModuleDescription == rhs.ModuleDescription &&
		lhs.SelectionDescription == rhs.SelectionDescription &&
		lhs.ProductId == rhs.ProductId &&
		lhs.StatModified == rhs.StatModified &&
		lhs.ValueChange == rhs.ValueChange;
	}
};

struct GcFrigateUITraitLines
{
	float Line0;
	float Line1;
	float Line2;
	float Line3;
	float Line4;

	friend bool operator==(const GcFrigateUITraitLines& lhs, const GcFrigateUITraitLines& rhs) 
	{
		return lhs.Line0 == rhs.Line0 &&
		lhs.Line1 == rhs.Line1 &&
		lhs.Line2 == rhs.Line2 &&
		lhs.Line3 == rhs.Line3 &&
		lhs.Line4 == rhs.Line4;
	}
};

struct GcExpeditionCategoryStrength
{
	int32_t OccurranceChance[5];

	friend bool operator==(const GcExpeditionCategoryStrength& lhs, const GcExpeditionCategoryStrength& rhs) 
	{
		return std::equal(std::begin(lhs.OccurranceChance), std::end(lhs.OccurranceChance), std::begin(rhs.OccurranceChance));
	}
};

//Dependency: GcExpeditionCategoryStrength
struct GcExpeditionEventOccurrenceRate
{
	NMS_GameComponents::GcExpeditionCategoryStrength ExpeditionCategory[5];

	friend bool operator==(const GcExpeditionEventOccurrenceRate& lhs, const GcExpeditionEventOccurrenceRate& rhs) 
	{
		return std::equal(std::begin(lhs.ExpeditionCategory), std::end(lhs.ExpeditionCategory), std::begin(rhs.ExpeditionCategory));
	}
};

struct GcFrigateClassCost
{
	int32_t Cost[10];

	friend bool operator==(const GcFrigateClassCost& lhs, const GcFrigateClassCost& rhs) 
	{
		return std::equal(std::begin(lhs.Cost), std::end(lhs.Cost), std::begin(rhs.Cost));
	}
};

struct GcExpeditionDurationValues
{
	int32_t Duration[5];

	friend bool operator==(const GcExpeditionDurationValues& lhs, const GcExpeditionDurationValues& rhs) 
	{
		return std::equal(std::begin(lhs.Duration), std::end(lhs.Duration), std::begin(rhs.Duration));
	}
};

struct GcInteractionDof
{
	float FarFadeDistance;
	float FarPlane;
	float NearPlaneAdjust;
	float NearPlaneMin;
	bool IsEnabled;
	bool UseGlobals;

	friend bool operator==(const GcInteractionDof& lhs, const GcInteractionDof& rhs) 
	{
		return lhs.FarFadeDistance == rhs.FarFadeDistance &&
		lhs.FarPlane == rhs.FarPlane &&
		lhs.NearPlaneAdjust == rhs.NearPlaneAdjust &&
		lhs.NearPlaneMin == rhs.NearPlaneMin &&
		lhs.IsEnabled == rhs.IsEnabled &&
		lhs.UseGlobals == rhs.UseGlobals;
	}
};

struct GcInventoryClassCostMultiplier
{
	float Multiplier[4];

	friend bool operator==(const GcInventoryClassCostMultiplier& lhs, const GcInventoryClassCostMultiplier& rhs) 
	{
		return std::equal(std::begin(lhs.Multiplier), std::end(lhs.Multiplier), std::begin(rhs.Multiplier));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcExpeditionDebriefPunctuation
//Dependency: GcFrigateTraitStrengthByType
//Dependency: GcScanEffectData
//Dependency: GcFrigateTraitIcons
//Dependency: GcFrigateStatsByClass
//Dependency: GcPassiveFrigateIncomeArray
//Dependency: GcNumberedTextList
//Dependency: GcExpeditionDifficultyKeyframe
//Dependency: GcExpeditionPaymentToken
//Dependency: Vector3f
//Dependency: GcExpeditionPowerup
//Dependency: GcFrigateUITraitLines
//Dependency: GcExpeditionEventOccurrenceRate
//Dependency: GcFrigateClassCost
//Dependency: GcExpeditionDurationValues
//Dependency: GcInteractionDof
//Dependency: GcInventoryClassCostMultiplier
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcFleetGlobals
{
	enum class ForceDebriefEntryTypeEnum : uint32_t
	{
		None = 0,
		PrimarySuccess = 1,
		WhaleSuccess = 2,
		PrimaryFailure = 3,
		PrimaryDamage = 4,
		SecondarySuccess = 5,
		SecondaryFailure = 6,
		SecondaryDamage = 7,
		GenericSuccess = 8,
		GenericFailure = 9,
		WhaleFailure = 10,
	};

	NMS_GameComponents::GcScanEffectData CompletedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData DamagedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData DestroyedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData FrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData FrigateScanEffect;
	NMS::Vector3f FreighterCustomiserSunAngleAdjust;
	NMS::Vector3f PirateFreighterCustomiserSunAngleAdjust;
	NMS_GameComponents::GcFrigateStatsByClass FrigateInitialStats;
	NMS_GameComponents::GcFrigateTraitStrengthByType FrigateTraitStrengths;
	NMS_GameComponents::GcPassiveFrigateIncomeArray PassiveIncomes;
	NMS_GameComponents::GcNumberedTextList DeepSpaceFrigateMoods[11];
	NMS_GameComponents::GcFrigateTraitIcons NegativeTraitIcons;
	NMS_GameComponents::GcFrigateTraitIcons TraitIcons;
	NMS::NMSString0x20A CivilianMPMissionGiverPuzzle;
	NMS::NMSString0x20A CommunicatorDamagePuzzleTableEntry;
	NMS::NMSString0x20A DeepSpaceFrigateActivePuzzleID;
	NMS::NMSString0x20A DeepSpaceFrigateDebriefPuzzleID;
	NMS::NMSString0x20A FleetCommunicationOSDMessage;
	NMS::NMSString0x20A FrigateDamagePuzzleTableEntry;
	NMS::NMSString0x20A FrigatePurchasePuzzleTableEntry;
	NMS::NMSString0x20A NeedAvailableExpeditionTerminalPuzzleID;
	NMS::NMSString0x20A NeedExpeditionTerminalPuzzleID;
	NMS::NMSString0x20A NeedFrigatesPuzzleID;
	NMS::NMSString0x20A NewExpeditionsAvailablePuzzleID;
	NMS::NMSString0x20A NormandyActivePuzzleID;
	NMS::NMSString0x20A NormandyDebriefPuzzleID;
	NMS::NMSString0x20A SelectExpeditionPuzzleID;
	NMS::NMSString0x20A TerminalActivePuzzleID;
	NMS::NMSString0x20A TerminalDamagePuzzleID;
	NMS::NMSString0x20A TerminalDebriefPuzzleID;
	NMS::NMSString0x20A TerminalInterventionPuzzleID;
	NMS::NMSString0x20A TerminalNeedsAssignmentPuzzleID;
	NMS_GameComponents::GcNumberedTextList FrigateBadMoods;
	NMS_GameComponents::GcNumberedTextList FrigateDamageDescriptions;
	NMS_GameComponents::GcNumberedTextList FrigateExtraNotes;
	NMS_GameComponents::GcNumberedTextList FrigateGoodMoods;
	std::vector<float> CombatSpawnDelayIncreaseByInventoryClass;
	std::vector<NMS_GameComponents::GcExpeditionDebriefPunctuation> DebriefPunctuationList;
	std::vector<NMS::NMSString0x10> DeepSpaceCommonPrimaryTraits;
	std::vector<NMS::NMSString0x10> DeepSpaceFrigateTraits;
	std::vector<int32_t> DifficultyModifier;
	std::vector<NMS_GameComponents::GcExpeditionDifficultyKeyframe> ExpeditionDifficultyKeyframes;
	std::vector<int32_t> ExpeditionRankBoundaries;
	std::vector<NMS_GameComponents::GcExpeditionPaymentToken> FreighterTokenProductIDs;
	std::vector<NMS::NMSString0x20> FrigateCaptainPuzzleIds;
	std::vector<NMS::VariableSizeString> FrigateHologramModels;
	std::vector<NMS::VariableSizeString> FrigateInteriorsToCache;
	std::vector<int32_t> FrigateLevelVictoriesRequired;
	std::vector<NMS::VariableSizeString> FrigatePlanetModels;
	std::vector<NMS::NMSString0x10> GhostShipFrigateTraits;
	std::vector<NMS::NMSString0x10> NormandyTraits;
	std::vector<NMS_GameComponents::GcExpeditionPowerup> Powerups;
	std::vector<NMS_GameComponents::GcFrigateUITraitLines> UITraitLineLengths;
	NMS_GameComponents::GcExpeditionEventOccurrenceRate EventTypeOccurrenceChance;
	NMS_GameComponents::GcFrigateClassCost FrigateBaseCost;
	NMS_GameComponents::GcFrigateClassCost FrigateCostVariance;
	NMS_GameComponents::GcExpeditionDurationValues ExpeditionDurations;
	NMS_GameComponents::GcInteractionDof FleetInteractionDepthOfField;
	NMS_GameComponents::GcInventoryClassCostMultiplier FrigateCostMultiplier;
	NMS::Vector2f PercentChanceOfDamageOnFailedEvent;
	float CameraPauseAfterStartingExpedition;
	float CombatDefenderSpawnDelay;
	float CombatFrigateSpawnAngle;
	float CombatFrigateSpawnMinRange;
	float CombatNotificationTime;
	float CombatSpawnDelay;
	float DamagedListEntryPulseRate;
	float DespawnDelay;
	float DespawnDelayIncreasePerFrigate;
	float DifficultyMultiplierForBalancedExpeditions;
	float DifficultyMultiplierForNonPrimaryEvents;
	float DistanceForPurchaseReset;
	float DistanceForSingleShipFlybyCommsReset;
	float ExpeditionDifficultyIncreaseForEachAdditionalFrigate;
	int32_t ExpeditionDifficultyVariance;
	int32_t ExplorationPointsRequiredForScan;
	int32_t FirstEventIndexWhichCanBeIntervention;
	NMS_Globals::GcFleetGlobals::ForceDebriefEntryTypeEnum ForceDebriefEntryType;
	int32_t ForcedSequentialEventsStartingIndex;
	int32_t FreighterTokenMinimumSpend;
	float FrigateDistanceMultiplierIfNoCaptialShip;
	float FrigatesPerSecondForInstantSpawn;
	float HologramSwapSpeed;
	float LevelupProgressRequiredToNotBeSadAboutDamage;
	int32_t LightYearsPerExpeditionEvent;
	int32_t LightYearsPerExpeditionEvent_Easy;
	int32_t LowDamageNumberOfExpeditions;
	int32_t MaxDiceRollWhenCalculatingExpeditionEventResult;
	int32_t MaxExpeditionStatValue;
	float MaxFrigateDistanceFromFreighter;
	int32_t MaxFrigateStatValue;
	int32_t MaxGapBetweenExpeditionLogEntries;
	int32_t MaximumSpeedDecrease;
	int32_t MaximumSpeedIncrease;
	int32_t MaxNumberOfPlayerShipsInFreighterHangar;
	float MaxPurchaseDistance;
	int32_t MinExpeditionStatValue;
	float MinFrigateDistanceFromFreighter;
	int32_t MinFrigateStatValue;
	int32_t MinGapBetweenExpeditionLogEntries;
	int32_t NextDebriefDescriptionOffset;
	float NonUrgentDamagedListEntryAlpha;
	int32_t NormandyDamageEvents;
	int32_t NormandyFailures;
	int32_t NumberOfExpeditionChoices;
	int32_t NumberOfFrigatesPurchasedToEndEasyExpeditions;
	int32_t NumberOfShipsInInitialFleet;
	int32_t NumberOfUAChangesPerExpeditionEvent;
	int32_t OverrideExpeditionSecondsPerDay;
	int32_t PercentChanceOfFrigateAdditionalSpawnedTrait;
	int32_t PercentChanceOfGenericEventDescription;
	int32_t PercentChanceOfInterventionEvent;
	int32_t PercentChanceOfPrimaryDescriptionForBalancedEvent;
	int32_t PercentChangeOfFrigateBeingPurchasable;
	float PostCombatSpawnDelay;
	float PostFreighterWarpSpawnDelayForFleetFrigates;
	float PreFreighterWarpDepawnDelayForFleetFrigates;
	float RadiusRequiredForFrigateSpawn;
	int32_t RampDamageNumberOfExpeditions;
	float SingleShipFlybyDistance;
	float SingleShipFlybyHeightOffset;
	float SingleShipFlybyMaxAngle;
	float SpawnDelayForFleetFrigates;
	float SpawnDelayForNewFrigates;
	float SpawnDelayForReturningFrigates;
	float SpawnDelayIncreasePerFrigate;
	float SpawnDelayRandomMax;
	float SpawnDelayRandomMin;
	int32_t StatPointsAwardedForLevelUp;
	float TimeBeforeDebriefLogsStart;
	float TimeBeforeHidingHangar;
	float TimeBeforePlayerAlertedToDamagedFrigates;
	float TimeBeforePlayerAlertedToInterventionEvent;
	float TimeBeforeShowingHangar;
	float TimeBetweenDebriefLettersAppearing;
	float TimeBetweenDebriefLogsAppearing;
	float TimeBetweenDebriefLogSectionsAppearing;
	int32_t TimeBetweenPassiveIncomeTicks;
	int32_t TimeTakenForExpeditionEvent;
	int32_t TimeTakenForExpeditionEvent_Easy;
	float UITraitLinesAngle;
	NMS::NMSString0x20 RacialTermForCaptain[9];
	bool DisablePlayerFleets;
	bool ExpeditionsCompleteInstantly;
	bool NewFrigatesStartDamaged;
	bool ShowMissingRewardDescriptions;
	bool ShowSeeds;

	friend bool operator==(const GcFleetGlobals& lhs, const GcFleetGlobals& rhs) 
	{
		return lhs.CompletedFrigateHologramScanEffect == rhs.CompletedFrigateHologramScanEffect &&
		lhs.DamagedFrigateHologramScanEffect == rhs.DamagedFrigateHologramScanEffect &&
		lhs.DestroyedFrigateHologramScanEffect == rhs.DestroyedFrigateHologramScanEffect &&
		lhs.FrigateHologramScanEffect == rhs.FrigateHologramScanEffect &&
		lhs.FrigateScanEffect == rhs.FrigateScanEffect &&
		lhs.FreighterCustomiserSunAngleAdjust == rhs.FreighterCustomiserSunAngleAdjust &&
		lhs.PirateFreighterCustomiserSunAngleAdjust == rhs.PirateFreighterCustomiserSunAngleAdjust &&
		lhs.FrigateInitialStats == rhs.FrigateInitialStats &&
		lhs.FrigateTraitStrengths == rhs.FrigateTraitStrengths &&
		lhs.PassiveIncomes == rhs.PassiveIncomes &&
		std::equal(std::begin(lhs.DeepSpaceFrigateMoods), std::end(lhs.DeepSpaceFrigateMoods), std::begin(rhs.DeepSpaceFrigateMoods)) &&
		lhs.NegativeTraitIcons == rhs.NegativeTraitIcons &&
		lhs.TraitIcons == rhs.TraitIcons &&
		lhs.CivilianMPMissionGiverPuzzle == rhs.CivilianMPMissionGiverPuzzle &&
		lhs.CommunicatorDamagePuzzleTableEntry == rhs.CommunicatorDamagePuzzleTableEntry &&
		lhs.DeepSpaceFrigateActivePuzzleID == rhs.DeepSpaceFrigateActivePuzzleID &&
		lhs.DeepSpaceFrigateDebriefPuzzleID == rhs.DeepSpaceFrigateDebriefPuzzleID &&
		lhs.FleetCommunicationOSDMessage == rhs.FleetCommunicationOSDMessage &&
		lhs.FrigateDamagePuzzleTableEntry == rhs.FrigateDamagePuzzleTableEntry &&
		lhs.FrigatePurchasePuzzleTableEntry == rhs.FrigatePurchasePuzzleTableEntry &&
		lhs.NeedAvailableExpeditionTerminalPuzzleID == rhs.NeedAvailableExpeditionTerminalPuzzleID &&
		lhs.NeedExpeditionTerminalPuzzleID == rhs.NeedExpeditionTerminalPuzzleID &&
		lhs.NeedFrigatesPuzzleID == rhs.NeedFrigatesPuzzleID &&
		lhs.NewExpeditionsAvailablePuzzleID == rhs.NewExpeditionsAvailablePuzzleID &&
		lhs.NormandyActivePuzzleID == rhs.NormandyActivePuzzleID &&
		lhs.NormandyDebriefPuzzleID == rhs.NormandyDebriefPuzzleID &&
		lhs.SelectExpeditionPuzzleID == rhs.SelectExpeditionPuzzleID &&
		lhs.TerminalActivePuzzleID == rhs.TerminalActivePuzzleID &&
		lhs.TerminalDamagePuzzleID == rhs.TerminalDamagePuzzleID &&
		lhs.TerminalDebriefPuzzleID == rhs.TerminalDebriefPuzzleID &&
		lhs.TerminalInterventionPuzzleID == rhs.TerminalInterventionPuzzleID &&
		lhs.TerminalNeedsAssignmentPuzzleID == rhs.TerminalNeedsAssignmentPuzzleID &&
		lhs.FrigateBadMoods == rhs.FrigateBadMoods &&
		lhs.FrigateDamageDescriptions == rhs.FrigateDamageDescriptions &&
		lhs.FrigateExtraNotes == rhs.FrigateExtraNotes &&
		lhs.FrigateGoodMoods == rhs.FrigateGoodMoods &&
		lhs.CombatSpawnDelayIncreaseByInventoryClass == rhs.CombatSpawnDelayIncreaseByInventoryClass &&
		lhs.DebriefPunctuationList == rhs.DebriefPunctuationList &&
		lhs.DeepSpaceCommonPrimaryTraits == rhs.DeepSpaceCommonPrimaryTraits &&
		lhs.DeepSpaceFrigateTraits == rhs.DeepSpaceFrigateTraits &&
		lhs.DifficultyModifier == rhs.DifficultyModifier &&
		lhs.ExpeditionDifficultyKeyframes == rhs.ExpeditionDifficultyKeyframes &&
		lhs.ExpeditionRankBoundaries == rhs.ExpeditionRankBoundaries &&
		lhs.FreighterTokenProductIDs == rhs.FreighterTokenProductIDs &&
		lhs.FrigateCaptainPuzzleIds == rhs.FrigateCaptainPuzzleIds &&
		lhs.FrigateHologramModels == rhs.FrigateHologramModels &&
		lhs.FrigateInteriorsToCache == rhs.FrigateInteriorsToCache &&
		lhs.FrigateLevelVictoriesRequired == rhs.FrigateLevelVictoriesRequired &&
		lhs.FrigatePlanetModels == rhs.FrigatePlanetModels &&
		lhs.GhostShipFrigateTraits == rhs.GhostShipFrigateTraits &&
		lhs.NormandyTraits == rhs.NormandyTraits &&
		lhs.Powerups == rhs.Powerups &&
		lhs.UITraitLineLengths == rhs.UITraitLineLengths &&
		lhs.EventTypeOccurrenceChance == rhs.EventTypeOccurrenceChance &&
		lhs.FrigateBaseCost == rhs.FrigateBaseCost &&
		lhs.FrigateCostVariance == rhs.FrigateCostVariance &&
		lhs.ExpeditionDurations == rhs.ExpeditionDurations &&
		lhs.FleetInteractionDepthOfField == rhs.FleetInteractionDepthOfField &&
		lhs.FrigateCostMultiplier == rhs.FrigateCostMultiplier &&
		lhs.PercentChanceOfDamageOnFailedEvent == rhs.PercentChanceOfDamageOnFailedEvent &&
		lhs.CameraPauseAfterStartingExpedition == rhs.CameraPauseAfterStartingExpedition &&
		lhs.CombatDefenderSpawnDelay == rhs.CombatDefenderSpawnDelay &&
		lhs.CombatFrigateSpawnAngle == rhs.CombatFrigateSpawnAngle &&
		lhs.CombatFrigateSpawnMinRange == rhs.CombatFrigateSpawnMinRange &&
		lhs.CombatNotificationTime == rhs.CombatNotificationTime &&
		lhs.CombatSpawnDelay == rhs.CombatSpawnDelay &&
		lhs.DamagedListEntryPulseRate == rhs.DamagedListEntryPulseRate &&
		lhs.DespawnDelay == rhs.DespawnDelay &&
		lhs.DespawnDelayIncreasePerFrigate == rhs.DespawnDelayIncreasePerFrigate &&
		lhs.DifficultyMultiplierForBalancedExpeditions == rhs.DifficultyMultiplierForBalancedExpeditions &&
		lhs.DifficultyMultiplierForNonPrimaryEvents == rhs.DifficultyMultiplierForNonPrimaryEvents &&
		lhs.DistanceForPurchaseReset == rhs.DistanceForPurchaseReset &&
		lhs.DistanceForSingleShipFlybyCommsReset == rhs.DistanceForSingleShipFlybyCommsReset &&
		lhs.ExpeditionDifficultyIncreaseForEachAdditionalFrigate == rhs.ExpeditionDifficultyIncreaseForEachAdditionalFrigate &&
		lhs.ExpeditionDifficultyVariance == rhs.ExpeditionDifficultyVariance &&
		lhs.ExplorationPointsRequiredForScan == rhs.ExplorationPointsRequiredForScan &&
		lhs.FirstEventIndexWhichCanBeIntervention == rhs.FirstEventIndexWhichCanBeIntervention &&
		lhs.ForceDebriefEntryType == rhs.ForceDebriefEntryType &&
		lhs.ForcedSequentialEventsStartingIndex == rhs.ForcedSequentialEventsStartingIndex &&
		lhs.FreighterTokenMinimumSpend == rhs.FreighterTokenMinimumSpend &&
		lhs.FrigateDistanceMultiplierIfNoCaptialShip == rhs.FrigateDistanceMultiplierIfNoCaptialShip &&
		lhs.FrigatesPerSecondForInstantSpawn == rhs.FrigatesPerSecondForInstantSpawn &&
		lhs.HologramSwapSpeed == rhs.HologramSwapSpeed &&
		lhs.LevelupProgressRequiredToNotBeSadAboutDamage == rhs.LevelupProgressRequiredToNotBeSadAboutDamage &&
		lhs.LightYearsPerExpeditionEvent == rhs.LightYearsPerExpeditionEvent &&
		lhs.LightYearsPerExpeditionEvent_Easy == rhs.LightYearsPerExpeditionEvent_Easy &&
		lhs.LowDamageNumberOfExpeditions == rhs.LowDamageNumberOfExpeditions &&
		lhs.MaxDiceRollWhenCalculatingExpeditionEventResult == rhs.MaxDiceRollWhenCalculatingExpeditionEventResult &&
		lhs.MaxExpeditionStatValue == rhs.MaxExpeditionStatValue &&
		lhs.MaxFrigateDistanceFromFreighter == rhs.MaxFrigateDistanceFromFreighter &&
		lhs.MaxFrigateStatValue == rhs.MaxFrigateStatValue &&
		lhs.MaxGapBetweenExpeditionLogEntries == rhs.MaxGapBetweenExpeditionLogEntries &&
		lhs.MaximumSpeedDecrease == rhs.MaximumSpeedDecrease &&
		lhs.MaximumSpeedIncrease == rhs.MaximumSpeedIncrease &&
		lhs.MaxNumberOfPlayerShipsInFreighterHangar == rhs.MaxNumberOfPlayerShipsInFreighterHangar &&
		lhs.MaxPurchaseDistance == rhs.MaxPurchaseDistance &&
		lhs.MinExpeditionStatValue == rhs.MinExpeditionStatValue &&
		lhs.MinFrigateDistanceFromFreighter == rhs.MinFrigateDistanceFromFreighter &&
		lhs.MinFrigateStatValue == rhs.MinFrigateStatValue &&
		lhs.MinGapBetweenExpeditionLogEntries == rhs.MinGapBetweenExpeditionLogEntries &&
		lhs.NextDebriefDescriptionOffset == rhs.NextDebriefDescriptionOffset &&
		lhs.NonUrgentDamagedListEntryAlpha == rhs.NonUrgentDamagedListEntryAlpha &&
		lhs.NormandyDamageEvents == rhs.NormandyDamageEvents &&
		lhs.NormandyFailures == rhs.NormandyFailures &&
		lhs.NumberOfExpeditionChoices == rhs.NumberOfExpeditionChoices &&
		lhs.NumberOfFrigatesPurchasedToEndEasyExpeditions == rhs.NumberOfFrigatesPurchasedToEndEasyExpeditions &&
		lhs.NumberOfShipsInInitialFleet == rhs.NumberOfShipsInInitialFleet &&
		lhs.NumberOfUAChangesPerExpeditionEvent == rhs.NumberOfUAChangesPerExpeditionEvent &&
		lhs.OverrideExpeditionSecondsPerDay == rhs.OverrideExpeditionSecondsPerDay &&
		lhs.PercentChanceOfFrigateAdditionalSpawnedTrait == rhs.PercentChanceOfFrigateAdditionalSpawnedTrait &&
		lhs.PercentChanceOfGenericEventDescription == rhs.PercentChanceOfGenericEventDescription &&
		lhs.PercentChanceOfInterventionEvent == rhs.PercentChanceOfInterventionEvent &&
		lhs.PercentChanceOfPrimaryDescriptionForBalancedEvent == rhs.PercentChanceOfPrimaryDescriptionForBalancedEvent &&
		lhs.PercentChangeOfFrigateBeingPurchasable == rhs.PercentChangeOfFrigateBeingPurchasable &&
		lhs.PostCombatSpawnDelay == rhs.PostCombatSpawnDelay &&
		lhs.PostFreighterWarpSpawnDelayForFleetFrigates == rhs.PostFreighterWarpSpawnDelayForFleetFrigates &&
		lhs.PreFreighterWarpDepawnDelayForFleetFrigates == rhs.PreFreighterWarpDepawnDelayForFleetFrigates &&
		lhs.RadiusRequiredForFrigateSpawn == rhs.RadiusRequiredForFrigateSpawn &&
		lhs.RampDamageNumberOfExpeditions == rhs.RampDamageNumberOfExpeditions &&
		lhs.SingleShipFlybyDistance == rhs.SingleShipFlybyDistance &&
		lhs.SingleShipFlybyHeightOffset == rhs.SingleShipFlybyHeightOffset &&
		lhs.SingleShipFlybyMaxAngle == rhs.SingleShipFlybyMaxAngle &&
		lhs.SpawnDelayForFleetFrigates == rhs.SpawnDelayForFleetFrigates &&
		lhs.SpawnDelayForNewFrigates == rhs.SpawnDelayForNewFrigates &&
		lhs.SpawnDelayForReturningFrigates == rhs.SpawnDelayForReturningFrigates &&
		lhs.SpawnDelayIncreasePerFrigate == rhs.SpawnDelayIncreasePerFrigate &&
		lhs.SpawnDelayRandomMax == rhs.SpawnDelayRandomMax &&
		lhs.SpawnDelayRandomMin == rhs.SpawnDelayRandomMin &&
		lhs.StatPointsAwardedForLevelUp == rhs.StatPointsAwardedForLevelUp &&
		lhs.TimeBeforeDebriefLogsStart == rhs.TimeBeforeDebriefLogsStart &&
		lhs.TimeBeforeHidingHangar == rhs.TimeBeforeHidingHangar &&
		lhs.TimeBeforePlayerAlertedToDamagedFrigates == rhs.TimeBeforePlayerAlertedToDamagedFrigates &&
		lhs.TimeBeforePlayerAlertedToInterventionEvent == rhs.TimeBeforePlayerAlertedToInterventionEvent &&
		lhs.TimeBeforeShowingHangar == rhs.TimeBeforeShowingHangar &&
		lhs.TimeBetweenDebriefLettersAppearing == rhs.TimeBetweenDebriefLettersAppearing &&
		lhs.TimeBetweenDebriefLogsAppearing == rhs.TimeBetweenDebriefLogsAppearing &&
		lhs.TimeBetweenDebriefLogSectionsAppearing == rhs.TimeBetweenDebriefLogSectionsAppearing &&
		lhs.TimeBetweenPassiveIncomeTicks == rhs.TimeBetweenPassiveIncomeTicks &&
		lhs.TimeTakenForExpeditionEvent == rhs.TimeTakenForExpeditionEvent &&
		lhs.TimeTakenForExpeditionEvent_Easy == rhs.TimeTakenForExpeditionEvent_Easy &&
		lhs.UITraitLinesAngle == rhs.UITraitLinesAngle &&
		std::equal(std::begin(lhs.RacialTermForCaptain), std::end(lhs.RacialTermForCaptain), std::begin(rhs.RacialTermForCaptain)) &&
		lhs.DisablePlayerFleets == rhs.DisablePlayerFleets &&
		lhs.ExpeditionsCompleteInstantly == rhs.ExpeditionsCompleteInstantly &&
		lhs.NewFrigatesStartDamaged == rhs.NewFrigatesStartDamaged &&
		lhs.ShowMissingRewardDescriptions == rhs.ShowMissingRewardDescriptions &&
		lhs.ShowSeeds == rhs.ShowSeeds;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcDroneWeaponData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Projectile;
	float ExplosionRadius;
	float FireRate;
	float FireTimeMax;
	float FireTimeMin;
	float InheritInitialVelocity;
	float MoveDistanceMax;
	float MoveDistanceMin;
	int32_t NumProjectiles;
	int32_t NumShotsMax;
	int32_t NumShotsMin;
	float ProjectileSpread;
	float Range;
	float Timeout;
	bool ChangeBarrelEachShot;

	friend bool operator==(const GcDroneWeaponData& lhs, const GcDroneWeaponData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Projectile == rhs.Projectile &&
		lhs.ExplosionRadius == rhs.ExplosionRadius &&
		lhs.FireRate == rhs.FireRate &&
		lhs.FireTimeMax == rhs.FireTimeMax &&
		lhs.FireTimeMin == rhs.FireTimeMin &&
		lhs.InheritInitialVelocity == rhs.InheritInitialVelocity &&
		lhs.MoveDistanceMax == rhs.MoveDistanceMax &&
		lhs.MoveDistanceMin == rhs.MoveDistanceMin &&
		lhs.NumProjectiles == rhs.NumProjectiles &&
		lhs.NumShotsMax == rhs.NumShotsMax &&
		lhs.NumShotsMin == rhs.NumShotsMin &&
		lhs.ProjectileSpread == rhs.ProjectileSpread &&
		lhs.Range == rhs.Range &&
		lhs.Timeout == rhs.Timeout &&
		lhs.ChangeBarrelEachShot == rhs.ChangeBarrelEachShot;
	}
};

//Dependency: Vector2f
struct GcAudioPulseDemo
{
	NMS::Vector2f InWarp;
	NMS::Vector2f Planet;
	NMS::Vector2f Space;
	NMS::Vector2f SpaceStation;
	NMS::Vector2f Wanted;
	float MixRateSeconds;

	friend bool operator==(const GcAudioPulseDemo& lhs, const GcAudioPulseDemo& rhs) 
	{
		return lhs.InWarp == rhs.InWarp &&
		lhs.Planet == rhs.Planet &&
		lhs.Space == rhs.Space &&
		lhs.SpaceStation == rhs.SpaceStation &&
		lhs.Wanted == rhs.Wanted &&
		lhs.MixRateSeconds == rhs.MixRateSeconds;
	}
};

struct GcRewardShowBlackHoles
{

	friend bool operator==(const GcRewardShowBlackHoles& lhs, const GcRewardShowBlackHoles& rhs) 
	{
		return true;
	}
};

struct GcAudioWwiseRTPCs
{
	enum class AkRTPCEnum : uint32_t
	{
		INVALID_RTPC = 0,
		BASE_BATTERY_CHARGING = 2081665978,
		BASE_SPHERE_ROLLSPEED = 3084205441,
		BINOCULARS_EFFECT = 1697670405,
		BURN_INTENSITY = 2334039880,
		BYTEBEAT_FX = 3691066168,
		BYTEBEAT_RMS = 2736086896,
		COMMS_CHATTER_DISTANCE = 2050431636,
		COMMS_CHATTER_FREIGHTERATTACKED = 1185036508,
		COMMS_CHATTER_PIRATES = 1424501521,
		COMMS_CHATTER_POLICE = 3578259387,
		CREATURE_EXISTENCE = 3148749219,
		CREATURES_STEP_SIZE = 3775298818,
		DOPPLER_DROID_SMALL = 520695608,
		GAMEOBJECT_DISTANCE = 2394244376,
		GLOBAL_HAZARD_LEVEL = 4258379784,
		GLOBAL_HEALTH_LEVEL = 711000894,
		GLOBAL_SHIELD_LEVEL = 3936348003,
		HG_VA_EMOTE = 404305919,
		HG_VA_GAMEOBJECTS = 2298792353,
		HG_VA_HEADBODYRATIO = 4129897572,
		HG_VA_SEED = 590314510,
		HG_VA_SIZE = 774176826,
		INTERACT_TIMER = 518502437,
		JETPACK_HEIGHT = 1890969281,
		MAP_STAR_WOOSH = 3162157229,
		MASTER_CHAT_LEVEL = 1536050791,
		MASTER_MUSIC_LEVEL = 4176915636,
		MASTER_SFX_LEVEL = 3385062136,
		MASTER_VOICE_LEVEL = 3702934039,
		MECH_IDLE = 3137477943,
		METEORITE_INCOMING = 3485432110,
		MOTION_DRIVER_A = 1932490940,
		MOTION_DRIVER_B = 1932490943,
		MUS_FISHING = 1771682885,
		NPC_SHIP_DISTANCE = 2165297203,
		NPC_SHIP_DOPPLER = 3636127990,
		NPC_SHIP_SPEED = 2455698775,
		PL_AMB_HEIGHT = 317995146,
		PL_ATLASGUN = 4051378197,
		PL_CAVE_ENCLOSED = 2571588979,
		PL_EXERTION = 2623861868,
		PL_FALL_SPEED = 1982020859,
		PL_FOLEY_CLOTHING_LOCO_SPEED = 2340579866,
		PL_HAZARD_PROTECTION = 2130060434,
		PL_SHIP_HEIGHT = 4277243060,
		PL_SHIP_LANDINGDISTANCE = 3382333075,
		PL_SHIP_SPEED = 3530269146,
		PL_SHIP_SPEED_REV = 2483547812,
		PL_SHIP_SURFACE_WATER = 3382507686,
		PL_SHIP_THRUST = 3860371139,
		PL_SHIP_VR_EXIT = 2290175096,
		PL_SHIP_YAW = 2437074298,
		PL_UNDERWATER_DEPTH = 1925728869,
		PL_WALK_SPEED = 1542514635,
		PL_WPN_LASER_RESOURCEGATHER = 1987818405,
		PL_WPN_LASERPOWER = 2568549452,
		PL_WPN_NUMBEROFBULLETS = 1022951743,
		PL_WPN_OVERHEAT = 2530555100,
		PLANET_TIME = 1275284849,
		PLAYER_VR_FOLEY_ARMS = 3126959713,
		POD_SQUISH = 1205600278,
		PROTOROLLER = 2566437297,
		PS5_HEADPHONES = 1805558639,
		PULSE_BUS01_MASTER_VOLUME = 1122126612,
		PULSE_EVENT_PANFR = 4145342657,
		PULSE_EVENT_PANLR = 18151427,
		PULSE_EVENT_PITCH = 1891889666,
		PULSE_EVENT_SENDBUS_00 = 2954454839,
		PULSE_EVENT_SENDBUS_01 = 2954454838,
		PULSE_EVENT_SENDBUS_02 = 2954454837,
		PULSE_EVENT_SENDBUS_03 = 2954454836,
		PULSE_EVENT_VOLUME = 3465058902,
		QUAD_LASERBUILDUP = 2231318707,
		RAIN_INTENSITY = 2520241501,
		RAIN_INTENSITY_BUILDING = 2209133296,
		RAIN_ROOF = 4207359364,
		RAIN_SHIP_EXTERIOR = 3413338877,
		RUMBLE_INTENSITY = 2172125472,
		SENTINEL_DETECTOR = 2169975102,
		SETTLEMENT_DISTANCE = 1266882226,
		SETTLEMENT_INTENSITY = 298514682,
		SHIP_WATER_LANDING = 320188335,
		SHORELINE = 27371874,
		SHUTTLE_THRUST = 1372956193,
		SQUADRON_SHIPS = 429575874,
		STORM = 1686739424,
		SUITVOICE_RMS = 142884387,
		THEREMIN_PITCH = 3614757816,
		THEREMIN_VOLUME = 640239972,
		UI_VR_MENU = 746511756,
		VEHICLE_EXIT = 4097279314,
		VEHICLE_IMPACTS = 2236782823,
		VEHICLE_JUMP = 505273650,
		VEHICLE_SKID = 2704293107,
		VEHICLE_SPEED = 1501155019,
		VEHICLE_SUSPENSION = 806810365,
		VEHICLE_TORQUE = 1208829996,
		WALKER_MOOD = 4212868635,
		WAVE_INTENSITY = 3308442616,
		WPN_PL_JAVELIN_CHARGE = 4031014832,
		WPN_PL_NEUTRON_CANNON_CHARGE = 1623797362,
	};

	NMS_GameComponents::GcAudioWwiseRTPCs::AkRTPCEnum AkRTPC;

	friend bool operator==(const GcAudioWwiseRTPCs& lhs, const GcAudioWwiseRTPCs& rhs) 
	{
		return lhs.AkRTPC == rhs.AkRTPC;
	}
};

//Dependency: GcClothPiece
struct GcClothComponentData
{
	std::vector<NMS_GameComponents::GcClothPiece> ClothPieces;
	float InitialOverSolveForConstraints;
	float InitialOverSolveForContacts;
	float MaxAngularSpeedFeltByDynamics;
	float MaxLinearSpeedFeltByDynamics;
	bool Enabled;

	friend bool operator==(const GcClothComponentData& lhs, const GcClothComponentData& rhs) 
	{
		return lhs.ClothPieces == rhs.ClothPieces &&
		lhs.InitialOverSolveForConstraints == rhs.InitialOverSolveForConstraints &&
		lhs.InitialOverSolveForContacts == rhs.InitialOverSolveForContacts &&
		lhs.MaxAngularSpeedFeltByDynamics == rhs.MaxAngularSpeedFeltByDynamics &&
		lhs.MaxLinearSpeedFeltByDynamics == rhs.MaxLinearSpeedFeltByDynamics &&
		lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: NMSString0x10
struct GcRewardTrigger
{
	NMS::NMSString0x10 Trigger;
	bool UseMasterModel;

	friend bool operator==(const GcRewardTrigger& lhs, const GcRewardTrigger& rhs) 
	{
		return lhs.Trigger == rhs.Trigger &&
		lhs.UseMasterModel == rhs.UseMasterModel;
	}
};

struct GcStatDisplayType
{
	enum class StatDisplayTypeEnum : uint32_t
	{
		None = 0,
		Sols = 1,
		Distance = 2,
	};

	NMS_GameComponents::GcStatDisplayType::StatDisplayTypeEnum StatDisplayType;

	friend bool operator==(const GcStatDisplayType& lhs, const GcStatDisplayType& rhs) 
	{
		return lhs.StatDisplayType == rhs.StatDisplayType;
	}
};

struct GcStatTrackType
{
	enum class StatTrackTypeEnum : uint32_t
	{
		Set = 0,
		Add = 1,
		Max = 2,
		Min = 3,
	};

	NMS_GameComponents::GcStatTrackType::StatTrackTypeEnum StatTrackType;

	friend bool operator==(const GcStatTrackType& lhs, const GcStatTrackType& rhs) 
	{
		return lhs.StatTrackType == rhs.StatTrackType;
	}
};

//Dependency: GcStatValueData
//Dependency: GcStatDisplayType
//Dependency: GcStatType
//Dependency: GcStatTrackType
//Dependency: NMSString0x10
struct GcStatDefinition
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcStatValueData DefaultValue;
	NMS_GameComponents::GcStatDisplayType DisplayType;
	int32_t MissionMessageDecimals;
	NMS_GameComponents::GcStatTrackType TrackType;
	NMS_GameComponents::GcStatType Type;
	bool IsProgression;
	bool TelemetryUpload;

	friend bool operator==(const GcStatDefinition& lhs, const GcStatDefinition& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.DefaultValue == rhs.DefaultValue &&
		lhs.DisplayType == rhs.DisplayType &&
		lhs.MissionMessageDecimals == rhs.MissionMessageDecimals &&
		lhs.TrackType == rhs.TrackType &&
		lhs.Type == rhs.Type &&
		lhs.IsProgression == rhs.IsProgression &&
		lhs.TelemetryUpload == rhs.TelemetryUpload;
	}
};

//Dependency: GcStatDefinition
struct GcStatDefinitionTable
{
	std::vector<NMS_GameComponents::GcStatDefinition> StatDefinitionTable;

	friend bool operator==(const GcStatDefinitionTable& lhs, const GcStatDefinitionTable& rhs) 
	{
		return lhs.StatDefinitionTable == rhs.StatDefinitionTable;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcPulseEncounterSpawnObject
{
	NMS_Toolkit::TkModelResource Object;
	NMS::NMSString0x10 DespawnEffect;
	NMS::NMSString0x10 SpawnEffect;
	NMS::NMSString0x10 TriggerActionOnSpawn;
	float Pitch;
	float Roll;
	float SpawnScale;
	float SpawnTime;
	float UpOffset;
	float WarpInDistance;
	float Yaw;
	bool BlockAIShipAutopilot;
	bool LeaveIfAttacked;
	bool WarpIn;

	friend bool operator==(const GcPulseEncounterSpawnObject& lhs, const GcPulseEncounterSpawnObject& rhs) 
	{
		return lhs.Object == rhs.Object &&
		lhs.DespawnEffect == rhs.DespawnEffect &&
		lhs.SpawnEffect == rhs.SpawnEffect &&
		lhs.TriggerActionOnSpawn == rhs.TriggerActionOnSpawn &&
		lhs.Pitch == rhs.Pitch &&
		lhs.Roll == rhs.Roll &&
		lhs.SpawnScale == rhs.SpawnScale &&
		lhs.SpawnTime == rhs.SpawnTime &&
		lhs.UpOffset == rhs.UpOffset &&
		lhs.WarpInDistance == rhs.WarpInDistance &&
		lhs.Yaw == rhs.Yaw &&
		lhs.BlockAIShipAutopilot == rhs.BlockAIShipAutopilot &&
		lhs.LeaveIfAttacked == rhs.LeaveIfAttacked &&
		lhs.WarpIn == rhs.WarpIn;
	}
};

//Dependency: GcGalaxyStarTypes
//Dependency: NMSString0x10
struct GcBackgroundSpaceEncounterSpawnConditions
{
	NMS::NMSString0x10 NeedsMissionActive;
	NMS_GameComponents::GcGalaxyStarTypes NeedsStarType;
	bool NeedsAbandonedSystem;
	bool NeedsAsteroidField;
	bool NeedsEmptySystem;
	bool NeedsNearbyCorruptWorld;
	bool NeedsPirateSystem;
	bool UseStarType;

	friend bool operator==(const GcBackgroundSpaceEncounterSpawnConditions& lhs, const GcBackgroundSpaceEncounterSpawnConditions& rhs) 
	{
		return lhs.NeedsMissionActive == rhs.NeedsMissionActive &&
		lhs.NeedsStarType == rhs.NeedsStarType &&
		lhs.NeedsAbandonedSystem == rhs.NeedsAbandonedSystem &&
		lhs.NeedsAsteroidField == rhs.NeedsAsteroidField &&
		lhs.NeedsEmptySystem == rhs.NeedsEmptySystem &&
		lhs.NeedsNearbyCorruptWorld == rhs.NeedsNearbyCorruptWorld &&
		lhs.NeedsPirateSystem == rhs.NeedsPirateSystem &&
		lhs.UseStarType == rhs.UseStarType;
	}
};

//Dependency: GcPulseEncounterSpawnObject
//Dependency: GcBackgroundSpaceEncounterSpawnConditions
//Dependency: NMSString0x10
struct GcBackgroundSpaceEncounterInfo
{
	NMS_GameComponents::GcPulseEncounterSpawnObject Encounter;
	NMS_GameComponents::GcBackgroundSpaceEncounterSpawnConditions SpawnConditions;
	NMS::NMSString0x10 Id;
	float DespawnDistance;
	float MinDuration;
	float SelectionWeighting;
	float SpawnChance;
	float SpawnDistance;

	friend bool operator==(const GcBackgroundSpaceEncounterInfo& lhs, const GcBackgroundSpaceEncounterInfo& rhs) 
	{
		return lhs.Encounter == rhs.Encounter &&
		lhs.SpawnConditions == rhs.SpawnConditions &&
		lhs.Id == rhs.Id &&
		lhs.DespawnDistance == rhs.DespawnDistance &&
		lhs.MinDuration == rhs.MinDuration &&
		lhs.SelectionWeighting == rhs.SelectionWeighting &&
		lhs.SpawnChance == rhs.SpawnChance &&
		lhs.SpawnDistance == rhs.SpawnDistance;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceDetailMessagePoint
{
	enum class PointStateEnum : uint32_t
	{
		Statement = 0,
		ObjectiveIncomplete = 1,
		ObjectiveComplete = 2,
	};

	NMS::NMSString0x20A Text;
	NMS::NMSString0x10 InsertItemName;
	NMS_GameComponents::GcMissionSequenceDetailMessagePoint::PointStateEnum PointState;

	friend bool operator==(const GcMissionSequenceDetailMessagePoint& lhs, const GcMissionSequenceDetailMessagePoint& rhs) 
	{
		return lhs.Text == rhs.Text &&
		lhs.InsertItemName == rhs.InsertItemName &&
		lhs.PointState == rhs.PointState;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerTitle
{
	NMS::NMSString0x20A AlreadyUnlockedDescription;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A UnlockDescription;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RevealedBy;
	std::vector<NMS::NMSString0x10> TitleUnlocksSpecials;
	NMS::NMSString0x10 UnlockedByMission;
	NMS::NMSString0x10 UnlockedByProductRecipe;
	NMS::NMSString0x10 UnlockedByStat;
	NMS::NMSString0x10 UnlockedByTrophy;
	NMS_GameComponents::GcInteractionType UnlockedByInteraction;
	int32_t UnlockedByInteractionIndex;
	NMS_GameComponents::GcAlienRace UnlockedByInteractionRace;
	int32_t UnlockedByLeveledStatRank;
	float UnlockedByStatValue;
	bool UnlockedByInteractionOnlyTestMainRaces;

	friend bool operator==(const GcPlayerTitle& lhs, const GcPlayerTitle& rhs) 
	{
		return lhs.AlreadyUnlockedDescription == rhs.AlreadyUnlockedDescription &&
		lhs.Title == rhs.Title &&
		lhs.UnlockDescription == rhs.UnlockDescription &&
		lhs.ID == rhs.ID &&
		lhs.RevealedBy == rhs.RevealedBy &&
		lhs.TitleUnlocksSpecials == rhs.TitleUnlocksSpecials &&
		lhs.UnlockedByMission == rhs.UnlockedByMission &&
		lhs.UnlockedByProductRecipe == rhs.UnlockedByProductRecipe &&
		lhs.UnlockedByStat == rhs.UnlockedByStat &&
		lhs.UnlockedByTrophy == rhs.UnlockedByTrophy &&
		lhs.UnlockedByInteraction == rhs.UnlockedByInteraction &&
		lhs.UnlockedByInteractionIndex == rhs.UnlockedByInteractionIndex &&
		lhs.UnlockedByInteractionRace == rhs.UnlockedByInteractionRace &&
		lhs.UnlockedByLeveledStatRank == rhs.UnlockedByLeveledStatRank &&
		lhs.UnlockedByStatValue == rhs.UnlockedByStatValue &&
		lhs.UnlockedByInteractionOnlyTestMainRaces == rhs.UnlockedByInteractionOnlyTestMainRaces;
	}
};

//Dependency: NMSString0x10
struct GcCreatureGroupProbability
{
	NMS::NMSString0x10 Group;
	float Probability;

	friend bool operator==(const GcCreatureGroupProbability& lhs, const GcCreatureGroupProbability& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.Probability == rhs.Probability;
	}
};

struct GcEnvironmentProperties
{
	float SkyHeight[5];
	float AsteroidFadeHeightMax;
	float AsteroidFadeHeightMin;
	float AtmosphereEndHeight;
	float AtmosphereStartHeight;
	float CloudHeightMax;
	float CloudHeightMin;
	float FlightFogBlend;
	float FlightFogHeight;
	float HeavyAirHeightMax;
	float HeavyAirHeightMin;
	float HorizonBlendHeight;
	float HorizonBlendLength;
	float PlanetLodSwitch0;
	float PlanetLodSwitch0Elevation;
	float PlanetLodSwitch1;
	float PlanetLodSwitch2;
	float PlanetLodSwitch3;
	float PlanetObjectSwitch;
	float SkyAtmosphereHeight;
	float SkyColourBlendLength;
	float SkyColourHeight;
	float SkyPositionBlendLength;
	float SkyPositionHeight;
	float SolarSystemLUTBlendLength;
	float SolarSystemLUTHeight;
	float StratosphereHeight;

	friend bool operator==(const GcEnvironmentProperties& lhs, const GcEnvironmentProperties& rhs) 
	{
		return std::equal(std::begin(lhs.SkyHeight), std::end(lhs.SkyHeight), std::begin(rhs.SkyHeight)) &&
		lhs.AsteroidFadeHeightMax == rhs.AsteroidFadeHeightMax &&
		lhs.AsteroidFadeHeightMin == rhs.AsteroidFadeHeightMin &&
		lhs.AtmosphereEndHeight == rhs.AtmosphereEndHeight &&
		lhs.AtmosphereStartHeight == rhs.AtmosphereStartHeight &&
		lhs.CloudHeightMax == rhs.CloudHeightMax &&
		lhs.CloudHeightMin == rhs.CloudHeightMin &&
		lhs.FlightFogBlend == rhs.FlightFogBlend &&
		lhs.FlightFogHeight == rhs.FlightFogHeight &&
		lhs.HeavyAirHeightMax == rhs.HeavyAirHeightMax &&
		lhs.HeavyAirHeightMin == rhs.HeavyAirHeightMin &&
		lhs.HorizonBlendHeight == rhs.HorizonBlendHeight &&
		lhs.HorizonBlendLength == rhs.HorizonBlendLength &&
		lhs.PlanetLodSwitch0 == rhs.PlanetLodSwitch0 &&
		lhs.PlanetLodSwitch0Elevation == rhs.PlanetLodSwitch0Elevation &&
		lhs.PlanetLodSwitch1 == rhs.PlanetLodSwitch1 &&
		lhs.PlanetLodSwitch2 == rhs.PlanetLodSwitch2 &&
		lhs.PlanetLodSwitch3 == rhs.PlanetLodSwitch3 &&
		lhs.PlanetObjectSwitch == rhs.PlanetObjectSwitch &&
		lhs.SkyAtmosphereHeight == rhs.SkyAtmosphereHeight &&
		lhs.SkyColourBlendLength == rhs.SkyColourBlendLength &&
		lhs.SkyColourHeight == rhs.SkyColourHeight &&
		lhs.SkyPositionBlendLength == rhs.SkyPositionBlendLength &&
		lhs.SkyPositionHeight == rhs.SkyPositionHeight &&
		lhs.SolarSystemLUTBlendLength == rhs.SolarSystemLUTBlendLength &&
		lhs.SolarSystemLUTHeight == rhs.SolarSystemLUTHeight &&
		lhs.StratosphereHeight == rhs.StratosphereHeight;
	}
};

//Dependency: NMSString0x10
struct GcBaitData
{
	NMS::NMSString0x10 ProductID;
	float RarityBoosts[5];
	float SizeBoosts[4];
	float DayTimeBoost;
	float NightTimeBoost;
	float StormBoost;

	friend bool operator==(const GcBaitData& lhs, const GcBaitData& rhs) 
	{
		return lhs.ProductID == rhs.ProductID &&
		std::equal(std::begin(lhs.RarityBoosts), std::end(lhs.RarityBoosts), std::begin(rhs.RarityBoosts)) &&
		std::equal(std::begin(lhs.SizeBoosts), std::end(lhs.SizeBoosts), std::begin(rhs.SizeBoosts)) &&
		lhs.DayTimeBoost == rhs.DayTimeBoost &&
		lhs.NightTimeBoost == rhs.NightTimeBoost &&
		lhs.StormBoost == rhs.StormBoost;
	}
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForRefuel
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;

	friend bool operator==(const GcMissionSequenceWaitForRefuel& lhs, const GcMissionSequenceWaitForRefuel& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount &&
		lhs.TargetStat == rhs.TargetStat;
	}
};

struct GcMissionConditionHasGrave
{

	friend bool operator==(const GcMissionConditionHasGrave& lhs, const GcMissionConditionHasGrave& rhs) 
	{
		return true;
	}
};

//Dependency: GcBaitData
struct GcBaitTable
{
	std::vector<NMS_GameComponents::GcBaitData> Bait;

	friend bool operator==(const GcBaitTable& lhs, const GcBaitTable& rhs) 
	{
		return lhs.Bait == rhs.Bait;
	}
};

struct GcBaseAutoPowerSetting
{
	enum class BaseAutoPowerSettingEnum : uint32_t
	{
		UseDefault = 0,
		ForceDisabled = 1,
		ForceEnabled = 2,
	};

	NMS_GameComponents::GcBaseAutoPowerSetting::BaseAutoPowerSettingEnum BaseAutoPowerSetting;

	friend bool operator==(const GcBaseAutoPowerSetting& lhs, const GcBaseAutoPowerSetting& rhs) 
	{
		return lhs.BaseAutoPowerSetting == rhs.BaseAutoPowerSetting;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkResourceFilterData
{
	std::vector<NMS::NMSString0x20A> FilteredResources;
	NMS::NMSString0x10 FilterName;

	friend bool operator==(const TkResourceFilterData& lhs, const TkResourceFilterData& rhs) 
	{
		return lhs.FilteredResources == rhs.FilteredResources &&
		lhs.FilterName == rhs.FilterName;
	}
};

//Dependency: TkResourceFilterData
struct TkResourceFilterList
{
	std::vector<NMS_Toolkit::TkResourceFilterData> Filters;

	friend bool operator==(const TkResourceFilterList& lhs, const TkResourceFilterList& rhs) 
	{
		return lhs.Filters == rhs.Filters;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcCreatureEggComponentData
{
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcCreatureEggComponentData& lhs, const GcCreatureEggComponentData& rhs) 
	{
		return lhs.Id == rhs.Id;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcFontTableEntry
{
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 Id;
	NMS::VariableSizeString LargeOverrideFilename;
	NMS::VariableSizeString VROverrideFilename;
	float Spacing;

	friend bool operator==(const GcFontTableEntry& lhs, const GcFontTableEntry& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.Id == rhs.Id &&
		lhs.LargeOverrideFilename == rhs.LargeOverrideFilename &&
		lhs.VROverrideFilename == rhs.VROverrideFilename &&
		lhs.Spacing == rhs.Spacing;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLanguages
{
	enum class LanguageEnum : uint32_t
	{
		Default = 0,
		English = 1,
		USEnglish = 2,
		French = 3,
		Italian = 4,
		German = 5,
		Spanish = 6,
		Russian = 7,
		Polish = 8,
		Dutch = 9,
		Portuguese = 10,
		LatinAmericanSpanish = 11,
		BrazilianPortuguese = 12,
		Japanese = 13,
		TraditionalChinese = 14,
		SimplifiedChinese = 15,
		TencentChinese = 16,
		Korean = 17,
	};

	NMS_Toolkit::TkLanguages::LanguageEnum Language;

	friend bool operator==(const TkLanguages& lhs, const TkLanguages& rhs) 
	{
		return lhs.Language == rhs.Language;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcFontTableEntry
//Dependency: TkLanguages
struct GcFontTable
{
	std::vector<NMS_GameComponents::GcFontTableEntry> Fonts;
	NMS_Toolkit::TkLanguages Language;

	friend bool operator==(const GcFontTable& lhs, const GcFontTable& rhs) 
	{
		return lhs.Fonts == rhs.Fonts &&
		lhs.Language == rhs.Language;
	}
};

//Dependency: GcFontTable
struct GcLanguageFontTable
{
	std::vector<NMS_GameComponents::GcFontTable> Table;

	friend bool operator==(const GcLanguageFontTable& lhs, const GcLanguageFontTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcVehicleWeaponMuzzleData
{
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 MuzzleFlashEffect;

	friend bool operator==(const GcVehicleWeaponMuzzleData& lhs, const GcVehicleWeaponMuzzleData& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.MuzzleFlashEffect == rhs.MuzzleFlashEffect;
	}
};

//Dependency: GcBaseBuildingEntryCosts
struct GcBaseBuildingCostsTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingEntryCosts> ObjectCosts;

	friend bool operator==(const GcBaseBuildingCostsTable& lhs, const GcBaseBuildingCostsTable& rhs) 
	{
		return lhs.ObjectCosts == rhs.ObjectCosts;
	}
};

struct GcBaseBuildingObjectDecorationTypes
{
	enum class BaseBuildingDecorationTypeEnum : uint32_t
	{
		Normal = 0,
		SurfaceNormal = 1,
		Ceiling = 2,
		Terrain = 3,
		Substance = 4,
		Plant = 5,
		BuildingSurfaceNormal = 6,
		WaterSurface = 7,
	};

	NMS_GameComponents::GcBaseBuildingObjectDecorationTypes::BaseBuildingDecorationTypeEnum BaseBuildingDecorationType;

	friend bool operator==(const GcBaseBuildingObjectDecorationTypes& lhs, const GcBaseBuildingObjectDecorationTypes& rhs) 
	{
		return lhs.BaseBuildingDecorationType == rhs.BaseBuildingDecorationType;
	}
};

//Dependency: GcBaseLinkGridData
//Dependency: GcBaseBuildingEntryGroup
//Dependency: GcBiomeType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcBaseBuildingObjectDecorationTypes
//Dependency: GcBaseBuildingPartStyle
//Dependency: TkModelResource
struct GcBaseBuildingEntry
{
	enum class BaseTerrainEditShapeEnum : uint32_t
	{
		Cube = 0,
		Cylinder = 1,
	};

	NMS_GameComponents::GcBaseLinkGridData LinkGridData;
	NMS::NMSString0x20A ColourPaletteGroupId;
	NMS::NMSString0x20A DefaultColourPaletteId;
	NMS::NMSString0x20A DefaultMaterialId;
	NMS::NMSString0x20A DescriptorID;
	NMS::NMSString0x20A MaterialGroupId;
	NMS_Toolkit::TkModelResource NPCInteractionScene;
	NMS_Toolkit::TkModelResource PlacementScene;
	NMS::NMSString0x20A SinglePartID;
	std::vector<NMS::NMSString0x10> CompositePartObjectIDs;
	std::vector<NMS::NMSString0x10> FamilyIDs;
	NMS::NMSString0x10 FossilDisplayID;
	std::vector<NMS_GameComponents::GcBaseBuildingEntryGroup> Groups;
	NMS::NMSString0x10 IconOverrideProductID;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 ModularCustomisationBaseID;
	NMS::NMSString0x10 OverrideProductID;
	NMS_GameComponents::GcBaseBuildingEntry::BaseTerrainEditShapeEnum BaseTerrainEditShape;
	NMS_GameComponents::GcBiomeType Biome;
	float BuildEffectAccelerator;
	NMS_GameComponents::GcBaseBuildingObjectDecorationTypes DecorationType;
	int32_t FreighterBaseLimit;
	int32_t GhostsCountOverride;
	float MinimumDeleteDistance;
	int32_t PlanetBaseLimit;
	int32_t PlanetLimit;
	int32_t RegionLimit;
	int32_t RegionSpawnLOD;
	float SnappingDistanceOverride;
	int32_t StorageContainerIndex;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
	bool BuildableAboveWater;
	bool BuildableInShip;
	bool BuildableOnFreighter;
	bool BuildableOnPlanet;
	bool BuildableOnPlanetBase;
	bool BuildableOnPlanetWithProduct;
	bool BuildableOnSpaceBase;
	bool BuildableUnderwater;
	bool CanChangeColour;
	bool CanChangeMaterial;
	bool CanPickUp;
	bool CanRotate3D;
	bool CanScale;
	bool CanStack;
	bool CheckPlaceholderCollision;
	bool CheckPlayerCollision;
	bool CloseMenuAfterBuild;
	bool EditsTerrain;
	bool HasDescriptor;
	bool IsDecoration;
	bool IsFromModFolder;
	bool IsModularCustomisation;
	bool IsPlaceable;
	bool IsSealed;
	bool IsTemporary;
	bool RemovesAttachedDecoration;
	bool RemovesWhenUnsnapped;
	bool ShowGhosts;
	bool ShowInBuildMenu;
	bool UseProductIDOverride;

	friend bool operator==(const GcBaseBuildingEntry& lhs, const GcBaseBuildingEntry& rhs) 
	{
		return lhs.LinkGridData == rhs.LinkGridData &&
		lhs.ColourPaletteGroupId == rhs.ColourPaletteGroupId &&
		lhs.DefaultColourPaletteId == rhs.DefaultColourPaletteId &&
		lhs.DefaultMaterialId == rhs.DefaultMaterialId &&
		lhs.DescriptorID == rhs.DescriptorID &&
		lhs.MaterialGroupId == rhs.MaterialGroupId &&
		lhs.NPCInteractionScene == rhs.NPCInteractionScene &&
		lhs.PlacementScene == rhs.PlacementScene &&
		lhs.SinglePartID == rhs.SinglePartID &&
		lhs.CompositePartObjectIDs == rhs.CompositePartObjectIDs &&
		lhs.FamilyIDs == rhs.FamilyIDs &&
		lhs.FossilDisplayID == rhs.FossilDisplayID &&
		lhs.Groups == rhs.Groups &&
		lhs.IconOverrideProductID == rhs.IconOverrideProductID &&
		lhs.ID == rhs.ID &&
		lhs.ModularCustomisationBaseID == rhs.ModularCustomisationBaseID &&
		lhs.OverrideProductID == rhs.OverrideProductID &&
		lhs.BaseTerrainEditShape == rhs.BaseTerrainEditShape &&
		lhs.Biome == rhs.Biome &&
		lhs.BuildEffectAccelerator == rhs.BuildEffectAccelerator &&
		lhs.DecorationType == rhs.DecorationType &&
		lhs.FreighterBaseLimit == rhs.FreighterBaseLimit &&
		lhs.GhostsCountOverride == rhs.GhostsCountOverride &&
		lhs.MinimumDeleteDistance == rhs.MinimumDeleteDistance &&
		lhs.PlanetBaseLimit == rhs.PlanetBaseLimit &&
		lhs.PlanetLimit == rhs.PlanetLimit &&
		lhs.RegionLimit == rhs.RegionLimit &&
		lhs.RegionSpawnLOD == rhs.RegionSpawnLOD &&
		lhs.SnappingDistanceOverride == rhs.SnappingDistanceOverride &&
		lhs.StorageContainerIndex == rhs.StorageContainerIndex &&
		lhs.Style == rhs.Style &&
		lhs.BuildableAboveWater == rhs.BuildableAboveWater &&
		lhs.BuildableInShip == rhs.BuildableInShip &&
		lhs.BuildableOnFreighter == rhs.BuildableOnFreighter &&
		lhs.BuildableOnPlanet == rhs.BuildableOnPlanet &&
		lhs.BuildableOnPlanetBase == rhs.BuildableOnPlanetBase &&
		lhs.BuildableOnPlanetWithProduct == rhs.BuildableOnPlanetWithProduct &&
		lhs.BuildableOnSpaceBase == rhs.BuildableOnSpaceBase &&
		lhs.BuildableUnderwater == rhs.BuildableUnderwater &&
		lhs.CanChangeColour == rhs.CanChangeColour &&
		lhs.CanChangeMaterial == rhs.CanChangeMaterial &&
		lhs.CanPickUp == rhs.CanPickUp &&
		lhs.CanRotate3D == rhs.CanRotate3D &&
		lhs.CanScale == rhs.CanScale &&
		lhs.CanStack == rhs.CanStack &&
		lhs.CheckPlaceholderCollision == rhs.CheckPlaceholderCollision &&
		lhs.CheckPlayerCollision == rhs.CheckPlayerCollision &&
		lhs.CloseMenuAfterBuild == rhs.CloseMenuAfterBuild &&
		lhs.EditsTerrain == rhs.EditsTerrain &&
		lhs.HasDescriptor == rhs.HasDescriptor &&
		lhs.IsDecoration == rhs.IsDecoration &&
		lhs.IsFromModFolder == rhs.IsFromModFolder &&
		lhs.IsModularCustomisation == rhs.IsModularCustomisation &&
		lhs.IsPlaceable == rhs.IsPlaceable &&
		lhs.IsSealed == rhs.IsSealed &&
		lhs.IsTemporary == rhs.IsTemporary &&
		lhs.RemovesAttachedDecoration == rhs.RemovesAttachedDecoration &&
		lhs.RemovesWhenUnsnapped == rhs.RemovesWhenUnsnapped &&
		lhs.ShowGhosts == rhs.ShowGhosts &&
		lhs.ShowInBuildMenu == rhs.ShowInBuildMenu &&
		lhs.UseProductIDOverride == rhs.UseProductIDOverride;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLODDistances
{
	float Distances[5];

	friend bool operator==(const TkLODDistances& lhs, const TkLODDistances& rhs) 
	{
		return std::equal(std::begin(lhs.Distances), std::end(lhs.Distances), std::begin(rhs.Distances));
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBaseBuildingSubGroup
{
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcBaseBuildingSubGroup& lhs, const GcBaseBuildingSubGroup& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: GcBaseBuildingSubGroup
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBaseBuildingGroup
{
	NMS::NMSString0x20A Name;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcBaseBuildingSubGroup> SubGroups;
	int32_t DefaultColourIdx;

	friend bool operator==(const GcBaseBuildingGroup& lhs, const GcBaseBuildingGroup& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Icon == rhs.Icon &&
		lhs.ID == rhs.ID &&
		lhs.SubGroups == rhs.SubGroups &&
		lhs.DefaultColourIdx == rhs.DefaultColourIdx;
	}
};

struct GcMissionFaction
{
	enum class MissionFactionEnum : uint32_t
	{
		Gek = 0,
		Korvax = 1,
		Vykeen = 2,
		TradeGuild = 3,
		WarriorGuild = 4,
		ExplorerGuild = 5,
		Nexus = 6,
		Pirates = 7,
		Builders = 8,
		None = 9,
	};

	NMS_GameComponents::GcMissionFaction::MissionFactionEnum MissionFaction;

	friend bool operator==(const GcMissionFaction& lhs, const GcMissionFaction& rhs) 
	{
		return lhs.MissionFaction == rhs.MissionFaction;
	}
};

//Dependency: NMSString0x10
struct GcLegacyItem
{
	NMS::NMSString0x10 ConvertID;
	NMS::NMSString0x10 ID;
	float ConvertRatio;
	bool AddNewRecipe;
	bool RemoveOldRecipe;

	friend bool operator==(const GcLegacyItem& lhs, const GcLegacyItem& rhs) 
	{
		return lhs.ConvertID == rhs.ConvertID &&
		lhs.ID == rhs.ID &&
		lhs.ConvertRatio == rhs.ConvertRatio &&
		lhs.AddNewRecipe == rhs.AddNewRecipe &&
		lhs.RemoveOldRecipe == rhs.RemoveOldRecipe;
	}
};

//Dependency: GcLegacyItem
struct GcLegacyItemTable
{
	std::vector<NMS_GameComponents::GcLegacyItem> Table;

	friend bool operator==(const GcLegacyItemTable& lhs, const GcLegacyItemTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcFrigateTraitData
struct GcFrigateTraitTable
{
	std::vector<NMS_GameComponents::GcFrigateTraitData> Traits;

	friend bool operator==(const GcFrigateTraitTable& lhs, const GcFrigateTraitTable& rhs) 
	{
		return lhs.Traits == rhs.Traits;
	}
};

//Dependency: GcTechnologyCategory
struct GcRewardRepairTech
{
	NMS_GameComponents::GcTechnologyCategory Category;

	friend bool operator==(const GcRewardRepairTech& lhs, const GcRewardRepairTech& rhs) 
	{
		return lhs.Category == rhs.Category;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourPlayAnimTrigger
{
	NMS::NMSString0x10 Trigger;
	int32_t Frame;

	friend bool operator==(const GcBehaviourPlayAnimTrigger& lhs, const GcBehaviourPlayAnimTrigger& rhs) 
	{
		return lhs.Trigger == rhs.Trigger &&
		lhs.Frame == rhs.Frame;
	}
};

//Dependency: GcBehaviourPlayAnimTrigger
//Dependency: NMSString0x10
struct GcBehaviourPlayAnimData
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS_GameComponents::GcBehaviourPlayAnimTrigger> Triggers;
	float BlendInTime;
	float BlendOutAt;

	friend bool operator==(const GcBehaviourPlayAnimData& lhs, const GcBehaviourPlayAnimData& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Triggers == rhs.Triggers &&
		lhs.BlendInTime == rhs.BlendInTime &&
		lhs.BlendOutAt == rhs.BlendOutAt;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcBaseBuildingMaterial
{
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A LocName;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource SwatchImage;
	int32_t MaterialIndex;

	friend bool operator==(const GcBaseBuildingMaterial& lhs, const GcBaseBuildingMaterial& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.LocName == rhs.LocName &&
		lhs.Icon == rhs.Icon &&
		lhs.SwatchImage == rhs.SwatchImage &&
		lhs.MaterialIndex == rhs.MaterialIndex;
	}
};

//Dependency: NMSString0x20
struct GcChainComponentData
{
	NMS::NMSString0x20 StartBone;

	friend bool operator==(const GcChainComponentData& lhs, const GcChainComponentData& rhs) 
	{
		return lhs.StartBone == rhs.StartBone;
	}
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcNGuiSpecialTextImageData
{
	NMS::NMSString0x10 Name;
	NMS::VariableSizeString Path;
	NMS::Vector2f Size;
	float HeightModifier;
	float ScaleFromFont;
	bool UseFontColour;

	friend bool operator==(const GcNGuiSpecialTextImageData& lhs, const GcNGuiSpecialTextImageData& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Path == rhs.Path &&
		lhs.Size == rhs.Size &&
		lhs.HeightModifier == rhs.HeightModifier &&
		lhs.ScaleFromFont == rhs.ScaleFromFont &&
		lhs.UseFontColour == rhs.UseFontColour;
	}
};

struct GcBaseBuildingMode
{
	enum class BaseBuildingModeEnum : uint32_t
	{
		Inactive = 0,
		Selection = 1,
		Placement = 2,
		Browse = 3,
		Relatives = 4,
	};

	NMS_GameComponents::GcBaseBuildingMode::BaseBuildingModeEnum BaseBuildingMode;

	friend bool operator==(const GcBaseBuildingMode& lhs, const GcBaseBuildingMode& rhs) 
	{
		return lhs.BaseBuildingMode == rhs.BaseBuildingMode;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkSketchNodeConnections
{
	std::vector<uint32_t> Connections;

	friend bool operator==(const TkSketchNodeConnections& lhs, const TkSketchNodeConnections& rhs) 
	{
		return lhs.Connections == rhs.Connections;
	}
};

//Dependency: TkSketchNodeConnections
//Dependency: NMSString0x20
struct TkSketchNodeData
{
	enum class TriggerTypeEnum : uint32_t
	{
		Disabled = 0,
		Interrupt = 1,
		RunParallel = 2,
		Blocked = 3,
		QueueLatest = 4,
		QueueAll = 5,
	};

	std::vector<NMS_Toolkit::TkSketchNodeConnections> Connections;
	std::vector<int8_t> CustomData;
	int32_t PositionX;
	int32_t PositionY;
	int32_t SelectedVariant;
	NMS_Toolkit::TkSketchNodeData::TriggerTypeEnum TriggerType;
	NMS::NMSString0x20 TypeName;

	friend bool operator==(const TkSketchNodeData& lhs, const TkSketchNodeData& rhs) 
	{
		return lhs.Connections == rhs.Connections &&
		lhs.CustomData == rhs.CustomData &&
		lhs.PositionX == rhs.PositionX &&
		lhs.PositionY == rhs.PositionY &&
		lhs.SelectedVariant == rhs.SelectedVariant &&
		lhs.TriggerType == rhs.TriggerType &&
		lhs.TypeName == rhs.TypeName;
	}
};

//Dependency: VariableSizeString
struct TkMetadataFilenameList
{
	std::vector<NMS::VariableSizeString> Filenames;

	friend bool operator==(const TkMetadataFilenameList& lhs, const TkMetadataFilenameList& rhs) 
	{
		return lhs.Filenames == rhs.Filenames;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNPCNavSubgraphNodeType
//Dependency: NMSString0x10
//Dependency: Vector3f
struct GcBaseBuildingPartNavNodeData
{
	NMS::Vector3f AtDir;
	NMS::Vector3f LocalPos;
	std::vector<uint32_t> ConnectedNodeIndices;
	NMS::NMSString0x10 InteractionID;
	float ArriveDist;
	NMS_GameComponents::GcNPCNavSubgraphNodeType Type;

	friend bool operator==(const GcBaseBuildingPartNavNodeData& lhs, const GcBaseBuildingPartNavNodeData& rhs) 
	{
		return lhs.AtDir == rhs.AtDir &&
		lhs.LocalPos == rhs.LocalPos &&
		lhs.ConnectedNodeIndices == rhs.ConnectedNodeIndices &&
		lhs.InteractionID == rhs.InteractionID &&
		lhs.ArriveDist == rhs.ArriveDist &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcBaseBuildingPartInteractionData
{
	NMS::Vector3f AtDir;
	NMS::Vector3f LocalPos;
	NMS::NMSString0x10 InteractionID;

	friend bool operator==(const GcBaseBuildingPartInteractionData& lhs, const GcBaseBuildingPartInteractionData& rhs) 
	{
		return lhs.AtDir == rhs.AtDir &&
		lhs.LocalPos == rhs.LocalPos &&
		lhs.InteractionID == rhs.InteractionID;
	}
};

//Dependency: GcBaseBuildingPartNavNodeData
//Dependency: GcBaseBuildingPartInteractionData
//Dependency: NMSString0x20A
struct GcBaseBuildingPartNavData
{
	NMS::NMSString0x20A PartID;
	std::vector<NMS_GameComponents::GcBaseBuildingPartNavNodeData> NavNodeData;
	std::vector<NMS_GameComponents::GcBaseBuildingPartInteractionData> SharedInteractions;

	friend bool operator==(const GcBaseBuildingPartNavData& lhs, const GcBaseBuildingPartNavData& rhs) 
	{
		return lhs.PartID == rhs.PartID &&
		lhs.NavNodeData == rhs.NavNodeData &&
		lhs.SharedInteractions == rhs.SharedInteractions;
	}
};

struct GcDiscoveryWorth
{
	int32_t OnScan[3];
	int32_t Record[3];
	int32_t Mission;

	friend bool operator==(const GcDiscoveryWorth& lhs, const GcDiscoveryWorth& rhs) 
	{
		return std::equal(std::begin(lhs.OnScan), std::end(lhs.OnScan), std::begin(rhs.OnScan)) &&
		std::equal(std::begin(lhs.Record), std::end(lhs.Record), std::begin(rhs.Record)) &&
		lhs.Mission == rhs.Mission;
	}
};

//Dependency: Colour
//Dependency: NMSString0x20A
struct GcBaseBuildingPalette
{
	enum class SwatchSecondaryColourEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Ternary = 2,
		Quaternary = 3,
	};

	enum class SwatchPrimaryColourEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Ternary = 2,
		Quaternary = 3,
	};

	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A Name;
	NMS_GameComponents::GcBaseBuildingPalette::SwatchPrimaryColourEnum SwatchPrimaryColour;
	NMS_GameComponents::GcBaseBuildingPalette::SwatchSecondaryColourEnum SwatchSecondaryColour;

	friend bool operator==(const GcBaseBuildingPalette& lhs, const GcBaseBuildingPalette& rhs) 
	{
		return lhs.PrimaryColour == rhs.PrimaryColour &&
		lhs.QuaternaryColour == rhs.QuaternaryColour &&
		lhs.SecondaryColour == rhs.SecondaryColour &&
		lhs.TernaryColour == rhs.TernaryColour &&
		lhs.Id == rhs.Id &&
		lhs.Name == rhs.Name &&
		lhs.SwatchPrimaryColour == rhs.SwatchPrimaryColour &&
		lhs.SwatchSecondaryColour == rhs.SwatchSecondaryColour;
	}
};

//Dependency: GcBaseBuildingPartStyle
//Dependency: TkModelResource
struct GcBaseBuildingPartStyleModel
{
	NMS_Toolkit::TkModelResource Inactive;
	NMS_Toolkit::TkModelResource Model;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;

	friend bool operator==(const GcBaseBuildingPartStyleModel& lhs, const GcBaseBuildingPartStyleModel& rhs) 
	{
		return lhs.Inactive == rhs.Inactive &&
		lhs.Model == rhs.Model &&
		lhs.Style == rhs.Style;
	}
};

//Dependency: GcBaseBuildingPartStyleModel
//Dependency: NMSString0x20A
struct GcBaseBuildingPart
{
	NMS::NMSString0x20A ID;
	std::vector<NMS_GameComponents::GcBaseBuildingPartStyleModel> StyleModels;

	friend bool operator==(const GcBaseBuildingPart& lhs, const GcBaseBuildingPart& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.StyleModels == rhs.StyleModels;
	}
};

struct GcNPCTriggerTypes
{
	enum class NPCTriggerEnum : uint32_t
	{
		None = 0,
		Idle = 1,
		Greet = 2,
		Mood = 3,
		StartDead = 4,
		Talk_Start = 5,
		Talk_Stop = 6,
		Interact_Start = 7,
		Interact_Stop = 8,
		Interact_BeginHold = 9,
		Interact_CancelHold = 10,
		LookAt_Player_Start = 11,
		LookAt_Player_Stop = 12,
		SetProp = 13,
		Interact_StartFromRemote = 14,
		StartBusy = 15,
		OneShotMoodResponse = 16,
	};

	NMS_GameComponents::GcNPCTriggerTypes::NPCTriggerEnum NPCTrigger;

	friend bool operator==(const GcNPCTriggerTypes& lhs, const GcNPCTriggerTypes& rhs) 
	{
		return lhs.NPCTrigger == rhs.NPCTrigger;
	}
};

struct GcMissionConditionHasFreighter
{
	enum class FreighterInCurrentSystemEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcMissionConditionHasFreighter::FreighterInCurrentSystemEnum FreighterInCurrentSystem;

	friend bool operator==(const GcMissionConditionHasFreighter& lhs, const GcMissionConditionHasFreighter& rhs) 
	{
		return lhs.FreighterInCurrentSystem == rhs.FreighterInCurrentSystem;
	}
};

//Dependency: NMSString0x100
//Dependency: NMSString0x80
struct GcPresetTextureData
{
	NMS::NMSString0x100 Filename;
	NMS::NMSString0x80 Name;

	friend bool operator==(const GcPresetTextureData& lhs, const GcPresetTextureData& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcPresetTextureData
//Dependency: Colour
struct GcScratchpadGlobals
{
	std::vector<NMS_GameComponents::GcPresetTextureData> IBLMaps;
	std::vector<NMS_GameComponents::GcPresetTextureData> OverlayTextures;
	std::vector<NMS::Colour> TerrainColours;
	std::vector<NMS_GameComponents::GcPresetTextureData> TerrainTextures;

	friend bool operator==(const GcScratchpadGlobals& lhs, const GcScratchpadGlobals& rhs) 
	{
		return lhs.IBLMaps == rhs.IBLMaps &&
		lhs.OverlayTextures == rhs.OverlayTextures &&
		lhs.TerrainColours == rhs.TerrainColours &&
		lhs.TerrainTextures == rhs.TerrainTextures;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcBaseBuildingPartAudioLocationEntry
struct GcBaseBuildingPartAudioLocationTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartAudioLocationEntry> AudioLocations;

	friend bool operator==(const GcBaseBuildingPartAudioLocationTable& lhs, const GcBaseBuildingPartAudioLocationTable& rhs) 
	{
		return lhs.AudioLocations == rhs.AudioLocations;
	}
};

//Dependency: NMSString0x20A
struct GcFrigateInteractionAction
{
	enum class ActionTypeEnum : uint32_t
	{
		Repair = 0,
		UpdateDamagedComponents = 1,
		CargoPhoneCall = 2,
	};

	NMS::NMSString0x20A CommunicatorDialog;
	NMS_GameComponents::GcFrigateInteractionAction::ActionTypeEnum ActionType;

	friend bool operator==(const GcFrigateInteractionAction& lhs, const GcFrigateInteractionAction& rhs) 
	{
		return lhs.CommunicatorDialog == rhs.CommunicatorDialog &&
		lhs.ActionType == rhs.ActionType;
	}
};

//Dependency: Colour
struct GcLightProperties
{
	NMS::Colour BounceColour;
	NMS::Colour LightColour;
	NMS::Colour SunColour;

	friend bool operator==(const GcLightProperties& lhs, const GcLightProperties& rhs) 
	{
		return lhs.BounceColour == rhs.BounceColour &&
		lhs.LightColour == rhs.LightColour &&
		lhs.SunColour == rhs.SunColour;
	}
};

struct GcBaseDefenceStatusType
{
	enum class BaseDefenceStatusEnum : uint32_t
	{
		AttackingTarget = 0,
		Alert = 1,
		SearchingForTarget = 2,
		Disabled = 3,
		Security = 4,
	};

	NMS_GameComponents::GcBaseDefenceStatusType::BaseDefenceStatusEnum BaseDefenceStatus;

	friend bool operator==(const GcBaseDefenceStatusType& lhs, const GcBaseDefenceStatusType& rhs) 
	{
		return lhs.BaseDefenceStatus == rhs.BaseDefenceStatus;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct TkOpenVRControllerLookup
{
	NMS::VariableSizeString DeviceSpec;
	NMS::NMSString0x10 ResetVRViewLayerName;
	NMS::NMSString0x20 DeviceKeywords;

	friend bool operator==(const TkOpenVRControllerLookup& lhs, const TkOpenVRControllerLookup& rhs) 
	{
		return lhs.DeviceSpec == rhs.DeviceSpec &&
		lhs.ResetVRViewLayerName == rhs.ResetVRViewLayerName &&
		lhs.DeviceKeywords == rhs.DeviceKeywords;
	}
};

//Dependency: TkOpenVRControllerLookup
struct TkOpenVRControllerList
{
	std::vector<NMS_Toolkit::TkOpenVRControllerLookup> Devices;

	friend bool operator==(const TkOpenVRControllerList& lhs, const TkOpenVRControllerList& rhs) 
	{
		return lhs.Devices == rhs.Devices;
	}
};

struct TkBehaviourTreePriorityDecoratorData
{
	NMSTemplate Child;

	friend bool operator==(const TkBehaviourTreePriorityDecoratorData& lhs, const TkBehaviourTreePriorityDecoratorData& rhs) 
	{
		return lhs.Child == rhs.Child;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcPurchaseableSpecial
{
	NMS::NMSString0x10 ID;
	int32_t MissionTier;
	int32_t ShopNumber;
	bool IsConsumable;

	friend bool operator==(const GcPurchaseableSpecial& lhs, const GcPurchaseableSpecial& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.MissionTier == rhs.MissionTier &&
		lhs.ShopNumber == rhs.ShopNumber &&
		lhs.IsConsumable == rhs.IsConsumable;
	}
};

//Dependency: GcPurchaseableSpecial
struct GcPurchaseableSpecials
{
	std::vector<NMS_GameComponents::GcPurchaseableSpecial> Table;

	friend bool operator==(const GcPurchaseableSpecials& lhs, const GcPurchaseableSpecials& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcIDPair
{
	NMS::NMSString0x10 Item1;
	NMS::NMSString0x10 Item2;

	friend bool operator==(const GcIDPair& lhs, const GcIDPair& rhs) 
	{
		return lhs.Item1 == rhs.Item1 &&
		lhs.Item2 == rhs.Item2;
	}
};

//Dependency: GcIDPair
//Dependency: NMSString0x20
//Dependency: GcWFCModulePrototype
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcWFCModuleSet
{
	NMS::Vector3f BlockSize;
	std::vector<NMS_GameComponents::GcIDPair> CompatibleConnectors;
	std::vector<NMS::NMSString0x20> ConnectorsOnHorizontalBoundary;
	std::vector<NMS::NMSString0x20> ConnectorsOnLowerBoundary;
	std::vector<NMS::NMSString0x20> ConnectorsOnUpperBoundary;
	std::vector<NMS::NMSString0x10> DefaultGroups;
	std::vector<NMS_GameComponents::GcWFCModulePrototype> ModulePrototypes;
	float VerticalOffset;
	NMS::NMSString0x20 Name;
	bool ApplyWallThemes;

	friend bool operator==(const GcWFCModuleSet& lhs, const GcWFCModuleSet& rhs) 
	{
		return lhs.BlockSize == rhs.BlockSize &&
		lhs.CompatibleConnectors == rhs.CompatibleConnectors &&
		lhs.ConnectorsOnHorizontalBoundary == rhs.ConnectorsOnHorizontalBoundary &&
		lhs.ConnectorsOnLowerBoundary == rhs.ConnectorsOnLowerBoundary &&
		lhs.ConnectorsOnUpperBoundary == rhs.ConnectorsOnUpperBoundary &&
		lhs.DefaultGroups == rhs.DefaultGroups &&
		lhs.ModulePrototypes == rhs.ModulePrototypes &&
		lhs.VerticalOffset == rhs.VerticalOffset &&
		lhs.Name == rhs.Name &&
		lhs.ApplyWallThemes == rhs.ApplyWallThemes;
	}
};

//Dependency: GcSubstanceSecondary
struct GcSubstanceSecondaryBiome
{
	NMS_GameComponents::GcSubstanceSecondary SecondarySubstanceByBiome[17];

	friend bool operator==(const GcSubstanceSecondaryBiome& lhs, const GcSubstanceSecondaryBiome& rhs) 
	{
		return std::equal(std::begin(lhs.SecondarySubstanceByBiome), std::end(lhs.SecondarySubstanceByBiome), std::begin(rhs.SecondarySubstanceByBiome));
	}
};

//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupFallbackData
{
	NMS::NMSString0x10 DescriptorGroupID;
	std::vector<NMS::NMSString0x10> FallbackPriorityList;

	friend bool operator==(const GcCustomisationDescriptorGroupFallbackData& lhs, const GcCustomisationDescriptorGroupFallbackData& rhs) 
	{
		return lhs.DescriptorGroupID == rhs.DescriptorGroupID &&
		lhs.FallbackPriorityList == rhs.FallbackPriorityList;
	}
};

//Dependency: GcVehicleType
struct GcMissionConditionCanSummonExocraft
{
	NMS_GameComponents::GcVehicleType SummonableExocraft;
	bool SpecificExocraft;

	friend bool operator==(const GcMissionConditionCanSummonExocraft& lhs, const GcMissionConditionCanSummonExocraft& rhs) 
	{
		return lhs.SummonableExocraft == rhs.SummonableExocraft &&
		lhs.SpecificExocraft == rhs.SpecificExocraft;
	}
};

//Dependency: NMSString0x10
struct GcRewardSpecificProductRecipeFromList
{
	enum class ProductListRewardOrderEnum : uint32_t
	{
		OneRandom = 0,
		InOrder = 1,
		TryAllRandom = 2,
		TryUnknownRandom = 3,
	};

	std::vector<NMS::NMSString0x10> ProductList;
	NMS_GameComponents::GcRewardSpecificProductRecipeFromList::ProductListRewardOrderEnum ProductListRewardOrder;
	bool FailIfAllKnown;

	friend bool operator==(const GcRewardSpecificProductRecipeFromList& lhs, const GcRewardSpecificProductRecipeFromList& rhs) 
	{
		return lhs.ProductList == rhs.ProductList &&
		lhs.ProductListRewardOrder == rhs.ProductListRewardOrder &&
		lhs.FailIfAllKnown == rhs.FailIfAllKnown;
	}
};

//Dependency: NMSString0x20A
struct GcWordGroupKnowledge
{
	NMS::NMSString0x20A Group;
	bool Races[9];

	friend bool operator==(const GcWordGroupKnowledge& lhs, const GcWordGroupKnowledge& rhs) 
	{
		return lhs.Group == rhs.Group &&
		std::equal(std::begin(lhs.Races), std::end(lhs.Races), std::begin(rhs.Races));
	}
};

//Dependency: NMSString0x10
struct GcWordKnowledge
{
	NMS::NMSString0x10 Word;
	bool Races[9];

	friend bool operator==(const GcWordKnowledge& lhs, const GcWordKnowledge& rhs) 
	{
		return lhs.Word == rhs.Word &&
		std::equal(std::begin(lhs.Races), std::end(lhs.Races), std::begin(rhs.Races));
	}
};

//Dependency: GcWordGroupKnowledge
//Dependency: GcWordKnowledge
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcKnownThingsPreset
{
	std::vector<NMS::NMSString0x10> KnownProducts;
	std::vector<NMS::NMSString0x20A> KnownRefinerRecipes;
	std::vector<NMS::NMSString0x10> KnownSpecials;
	std::vector<NMS::NMSString0x10> KnownTech;
	std::vector<NMS_GameComponents::GcWordGroupKnowledge> KnownWordGroups;
	std::vector<NMS_GameComponents::GcWordKnowledge> KnownWords;

	friend bool operator==(const GcKnownThingsPreset& lhs, const GcKnownThingsPreset& rhs) 
	{
		return lhs.KnownProducts == rhs.KnownProducts &&
		lhs.KnownRefinerRecipes == rhs.KnownRefinerRecipes &&
		lhs.KnownSpecials == rhs.KnownSpecials &&
		lhs.KnownTech == rhs.KnownTech &&
		lhs.KnownWordGroups == rhs.KnownWordGroups &&
		lhs.KnownWords == rhs.KnownWords;
	}
};

//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcGalaxyMarkerSettings
{
	NMS::Colour Colours[3];
	NMS::Colour OutlineColour;
	NMS::VariableSizeString Icon;
	NMS::Vector2f IconSize;
	NMS::Vector2f TimeScaleRange;
	int32_t EdgeCount;
	float LineWidth;
	float LineWidthFade;
	float OutlineWidth;
	float RadiusBaseOffset;
	float RadiusEdge;
	float RadiusFixed;
	float RadiusMinimum;
	float RotationBase;
	float SizeScale;
	NMS::NMSString0x20 MarkerLabel;

	friend bool operator==(const GcGalaxyMarkerSettings& lhs, const GcGalaxyMarkerSettings& rhs) 
	{
		return std::equal(std::begin(lhs.Colours), std::end(lhs.Colours), std::begin(rhs.Colours)) &&
		lhs.OutlineColour == rhs.OutlineColour &&
		lhs.Icon == rhs.Icon &&
		lhs.IconSize == rhs.IconSize &&
		lhs.TimeScaleRange == rhs.TimeScaleRange &&
		lhs.EdgeCount == rhs.EdgeCount &&
		lhs.LineWidth == rhs.LineWidth &&
		lhs.LineWidthFade == rhs.LineWidthFade &&
		lhs.OutlineWidth == rhs.OutlineWidth &&
		lhs.RadiusBaseOffset == rhs.RadiusBaseOffset &&
		lhs.RadiusEdge == rhs.RadiusEdge &&
		lhs.RadiusFixed == rhs.RadiusFixed &&
		lhs.RadiusMinimum == rhs.RadiusMinimum &&
		lhs.RotationBase == rhs.RotationBase &&
		lhs.SizeScale == rhs.SizeScale &&
		lhs.MarkerLabel == rhs.MarkerLabel;
	}
};

//Dependency: GcBaseBuildingPartData
struct GcBaseBuildingPartsDataTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartData> PartsData;

	friend bool operator==(const GcBaseBuildingPartsDataTable& lhs, const GcBaseBuildingPartsDataTable& rhs) 
	{
		return lhs.PartsData == rhs.PartsData;
	}
};

struct GcChargingRequirementsDifficultyOption
{
	enum class ChargingRequirementsDifficultyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcChargingRequirementsDifficultyOption::ChargingRequirementsDifficultyEnum ChargingRequirementsDifficulty;

	friend bool operator==(const GcChargingRequirementsDifficultyOption& lhs, const GcChargingRequirementsDifficultyOption& rhs) 
	{
		return lhs.ChargingRequirementsDifficulty == rhs.ChargingRequirementsDifficulty;
	}
};

//Dependency: GcBaseBuildingPartNavData
struct GcBaseBuildingPartsNavDataTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartNavData> Parts;

	friend bool operator==(const GcBaseBuildingPartsNavDataTable& lhs, const GcBaseBuildingPartsNavDataTable& rhs) 
	{
		return lhs.Parts == rhs.Parts;
	}
};

struct GcNGuiStyleAnimationKeyframeData
{
	std::vector<NMSTemplate> StyleProperties;
	float Position;

	friend bool operator==(const GcNGuiStyleAnimationKeyframeData& lhs, const GcNGuiStyleAnimationKeyframeData& rhs) 
	{
		return lhs.StyleProperties == rhs.StyleProperties &&
		lhs.Position == rhs.Position;
	}
};

//Dependency: GcNGuiStyleAnimationKeyframeData
struct GcNGuiStyleAnimationData
{
	std::vector<NMS_GameComponents::GcNGuiStyleAnimationKeyframeData> KeyFrames;
	float Length;
	bool AnimateByDefault;
	bool Loop;

	friend bool operator==(const GcNGuiStyleAnimationData& lhs, const GcNGuiStyleAnimationData& rhs) 
	{
		return lhs.KeyFrames == rhs.KeyFrames &&
		lhs.Length == rhs.Length &&
		lhs.AnimateByDefault == rhs.AnimateByDefault &&
		lhs.Loop == rhs.Loop;
	}
};

struct GcStatusMessageMissionMarkup
{
	enum class MissionMarkupEnum : uint32_t
	{
		KillFiend = 0,
		KillPirate = 1,
		KillSentinel = 2,
		KillHazardousPlants = 3,
		KillTraders = 4,
		KillCreatures = 5,
		KillPredators = 6,
		KillDepot = 7,
		KillWorms = 8,
		KillSpookSquids = 9,
		FeedCreature = 10,
		CollectBones = 11,
		CollectScrap = 12,
		Discover = 13,
		CollectSubstanceProduct = 14,
		Build = 15,
		Always = 16,
		None = 17,
	};

	NMS_GameComponents::GcStatusMessageMissionMarkup::MissionMarkupEnum MissionMarkup;

	friend bool operator==(const GcStatusMessageMissionMarkup& lhs, const GcStatusMessageMissionMarkup& rhs) 
	{
		return lhs.MissionMarkup == rhs.MissionMarkup;
	}
};

//Dependency: GcMissionConditionTest
//Dependency: GcStatusMessageMissionMarkup
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForConditions
{
	NMS::NMSString0x20A ForceAllowMissionRestartEvent;
	std::vector<NMSTemplate> Conditions;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	NMS_GameComponents::GcStatusMessageMissionMarkup StatusMessageMissionMarkup;
	bool AllowedToFormatObjectives;
	bool ForceAllowMissionRestart;

	friend bool operator==(const GcMissionSequenceWaitForConditions& lhs, const GcMissionSequenceWaitForConditions& rhs) 
	{
		return lhs.ForceAllowMissionRestartEvent == rhs.ForceAllowMissionRestartEvent &&
		lhs.Conditions == rhs.Conditions &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.ConditionTest == rhs.ConditionTest &&
		lhs.StatusMessageMissionMarkup == rhs.StatusMessageMissionMarkup &&
		lhs.AllowedToFormatObjectives == rhs.AllowedToFormatObjectives &&
		lhs.ForceAllowMissionRestart == rhs.ForceAllowMissionRestart;
	}
};

struct GcMechTargetSelectionWeightingSettings
{
	float CloseDistance;
	float CloseDistanceWeightFactorExponent;
	float DistanceWeightFactorBase;
	float FarDistance;
	float FarDistanceWeightFactorExponent;
	float FwdDirectionWeightFactorBase;
	float MidDistance;
	float MidDistanceWeightFactorExponent;
	float ThreatWeightFactorBase;
	float VeryCloseDistance;
	float VeryCloseDistanceWeightFactorExponent;
	float VeryFarDistanceWeightFactorExponent;

	friend bool operator==(const GcMechTargetSelectionWeightingSettings& lhs, const GcMechTargetSelectionWeightingSettings& rhs) 
	{
		return lhs.CloseDistance == rhs.CloseDistance &&
		lhs.CloseDistanceWeightFactorExponent == rhs.CloseDistanceWeightFactorExponent &&
		lhs.DistanceWeightFactorBase == rhs.DistanceWeightFactorBase &&
		lhs.FarDistance == rhs.FarDistance &&
		lhs.FarDistanceWeightFactorExponent == rhs.FarDistanceWeightFactorExponent &&
		lhs.FwdDirectionWeightFactorBase == rhs.FwdDirectionWeightFactorBase &&
		lhs.MidDistance == rhs.MidDistance &&
		lhs.MidDistanceWeightFactorExponent == rhs.MidDistanceWeightFactorExponent &&
		lhs.ThreatWeightFactorBase == rhs.ThreatWeightFactorBase &&
		lhs.VeryCloseDistance == rhs.VeryCloseDistance &&
		lhs.VeryCloseDistanceWeightFactorExponent == rhs.VeryCloseDistanceWeightFactorExponent &&
		lhs.VeryFarDistanceWeightFactorExponent == rhs.VeryFarDistanceWeightFactorExponent;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcOutpostLSystemPair
{
	NMS::VariableSizeString LSystems[9];
	NMS::NMSString0x20 Locator;

	friend bool operator==(const GcOutpostLSystemPair& lhs, const GcOutpostLSystemPair& rhs) 
	{
		return std::equal(std::begin(lhs.LSystems), std::end(lhs.LSystems), std::begin(rhs.LSystems)) &&
		lhs.Locator == rhs.Locator;
	}
};

struct GcGenericMissionVersionProgress
{
	int32_t Progress;
	int32_t Version;

	friend bool operator==(const GcGenericMissionVersionProgress& lhs, const GcGenericMissionVersionProgress& rhs) 
	{
		return lhs.Progress == rhs.Progress &&
		lhs.Version == rhs.Version;
	}
};

//Dependency: GcGenericMissionVersionProgress
struct GcGenericMissionStage
{
	NMSTemplate Stage;
	std::vector<NMS_GameComponents::GcGenericMissionVersionProgress> Versions;

	friend bool operator==(const GcGenericMissionStage& lhs, const GcGenericMissionStage& rhs) 
	{
		return lhs.Stage == rhs.Stage &&
		lhs.Versions == rhs.Versions;
	}
};

//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcGasGiantAtmosphereSetting
{
	NMS::Colour DiscoveryPlanetColour;
	NMS::NMSString0x10 AtmosphereID;
	NMS::VariableSizeString GradientMapResource;

	friend bool operator==(const GcGasGiantAtmosphereSetting& lhs, const GcGasGiantAtmosphereSetting& rhs) 
	{
		return lhs.DiscoveryPlanetColour == rhs.DiscoveryPlanetColour &&
		lhs.AtmosphereID == rhs.AtmosphereID &&
		lhs.GradientMapResource == rhs.GradientMapResource;
	}
};

//Dependency: GcGasGiantAtmosphereSetting
//Dependency: VariableSizeString
struct GcGasGiantAtmosphereSettingsList
{
	std::vector<NMS::VariableSizeString> LookUps;
	std::vector<NMS::VariableSizeString> Normals;
	std::vector<NMS_GameComponents::GcGasGiantAtmosphereSetting> Settings;

	friend bool operator==(const GcGasGiantAtmosphereSettingsList& lhs, const GcGasGiantAtmosphereSettingsList& rhs) 
	{
		return lhs.LookUps == rhs.LookUps &&
		lhs.Normals == rhs.Normals &&
		lhs.Settings == rhs.Settings;
	}
};

//Dependency: GcBaseBuildingPart
struct GcBaseBuildingPartsTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPart> Parts;

	friend bool operator==(const GcBaseBuildingPartsTable& lhs, const GcBaseBuildingPartsTable& rhs) 
	{
		return lhs.Parts == rhs.Parts;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementGiftDetails
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 Reward;

	friend bool operator==(const GcSettlementGiftDetails& lhs, const GcSettlementGiftDetails& rhs) 
	{
		return lhs.LocID == rhs.LocID &&
		lhs.Reward == rhs.Reward;
	}
};

//Dependency: NMSString0x10
struct GcBaseBuildingProperties
{
	NMS::NMSString0x10 DefaultInBaseObject;
	NMS::NMSString0x10 DefaultInFreighterObject;
	NMS::NMSString0x10 DefaultOnTerrainObject;

	friend bool operator==(const GcBaseBuildingProperties& lhs, const GcBaseBuildingProperties& rhs) 
	{
		return lhs.DefaultInBaseObject == rhs.DefaultInBaseObject &&
		lhs.DefaultInFreighterObject == rhs.DefaultInFreighterObject &&
		lhs.DefaultOnTerrainObject == rhs.DefaultOnTerrainObject;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkGraphicsDetailTypes
{
	enum class GraphicDetailEnum : uint32_t
	{
		Low = 0,
		Medium = 1,
		High = 2,
		Ultra = 3,
	};

	NMS_Toolkit::TkGraphicsDetailTypes::GraphicDetailEnum GraphicDetail;

	friend bool operator==(const TkGraphicsDetailTypes& lhs, const TkGraphicsDetailTypes& rhs) 
	{
		return lhs.GraphicDetail == rhs.GraphicDetail;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkGraphicsDetailTypes
struct GcBaseBuildingSettingsAction
{
	enum class UseCorePartsOnlyEnum : uint32_t
	{
		False = 0,
		True = 1,
		DontCare = 2,
	};

	NMS_Toolkit::TkGraphicsDetailTypes MaxAffectedDetail;
	NMS_GameComponents::GcBaseBuildingSettingsAction::UseCorePartsOnlyEnum UseCorePartsOnly;

	friend bool operator==(const GcBaseBuildingSettingsAction& lhs, const GcBaseBuildingSettingsAction& rhs) 
	{
		return lhs.MaxAffectedDetail == rhs.MaxAffectedDetail &&
		lhs.UseCorePartsOnly == rhs.UseCorePartsOnly;
	}
};

struct GcBehaviourLegacyData
{
	enum class LegacyBehaviourEnum : uint32_t
	{
		Riding = 0,
		Interaction = 1,
		Attracted = 2,
		Flee = 3,
		Defend = 4,
		FollowPlayer = 5,
		AvoidPlayer = 6,
		NoticePlayer = 7,
		FollowRoutine = 8,
	};

	NMS_GameComponents::GcBehaviourLegacyData::LegacyBehaviourEnum LegacyBehaviour;

	friend bool operator==(const GcBehaviourLegacyData& lhs, const GcBehaviourLegacyData& rhs) 
	{
		return lhs.LegacyBehaviour == rhs.LegacyBehaviour;
	}
};

struct GcSpawnedObjectComponentData
{
	bool CanBeTeleported;

	friend bool operator==(const GcSpawnedObjectComponentData& lhs, const GcSpawnedObjectComponentData& rhs) 
	{
		return lhs.CanBeTeleported == rhs.CanBeTeleported;
	}
};

//Dependency: NMSString0x20A
struct GcId256List
{
	NMS::NMSString0x20A Id;
	std::vector<NMS::NMSString0x20A> IdList;

	friend bool operator==(const GcId256List& lhs, const GcId256List& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.IdList == rhs.IdList;
	}
};

//Dependency: GcBaseBuildingPalette
//Dependency: TkMaterialResource
//Dependency: GcBaseBuildingGroup
//Dependency: GcBaseBuildingMaterial
//Dependency: GcId256List
//Dependency: GcBaseBuildingProperties
//Dependency: GcBaseBuildingFamily
//Dependency: GcBaseBuildingEntry
//Dependency: TkModelResource
struct GcBaseBuildingTable
{
	NMS_GameComponents::GcBaseBuildingGroup RelativesTabSetupData;
	NMS_GameComponents::GcBaseBuildingProperties Properties;
	NMS_Toolkit::TkModelResource GhostHeart;
	NMS_Toolkit::TkModelResource GhostHeartSelected;
	NMS_Toolkit::TkModelResource LegModel;
	NMS_Toolkit::TkModelResource RotateScaleGizmo;
	NMS_Toolkit::TkModelResource WiringFirefly;
	NMS_Toolkit::TkModelResource WiringSnapPoint;
	NMS_Toolkit::TkModelResource WiringSnapSelected;
	NMS_Toolkit::TkMaterialResource BuildEffectMaterial;
	std::vector<NMS_GameComponents::GcBaseBuildingFamily> Families;
	std::vector<NMS_GameComponents::GcBaseBuildingGroup> Groups;
	std::vector<NMS_GameComponents::GcId256List> MaterialGroups;
	std::vector<NMS_GameComponents::GcBaseBuildingMaterial> Materials;
	std::vector<NMS_GameComponents::GcBaseBuildingEntry> Objects;
	std::vector<NMS_GameComponents::GcId256List> PaletteGroups;
	std::vector<NMS_GameComponents::GcBaseBuildingPalette> Palettes;

	friend bool operator==(const GcBaseBuildingTable& lhs, const GcBaseBuildingTable& rhs) 
	{
		return lhs.RelativesTabSetupData == rhs.RelativesTabSetupData &&
		lhs.Properties == rhs.Properties &&
		lhs.GhostHeart == rhs.GhostHeart &&
		lhs.GhostHeartSelected == rhs.GhostHeartSelected &&
		lhs.LegModel == rhs.LegModel &&
		lhs.RotateScaleGizmo == rhs.RotateScaleGizmo &&
		lhs.WiringFirefly == rhs.WiringFirefly &&
		lhs.WiringSnapPoint == rhs.WiringSnapPoint &&
		lhs.WiringSnapSelected == rhs.WiringSnapSelected &&
		lhs.BuildEffectMaterial == rhs.BuildEffectMaterial &&
		lhs.Families == rhs.Families &&
		lhs.Groups == rhs.Groups &&
		lhs.MaterialGroups == rhs.MaterialGroups &&
		lhs.Materials == rhs.Materials &&
		lhs.Objects == rhs.Objects &&
		lhs.PaletteGroups == rhs.PaletteGroups &&
		lhs.Palettes == rhs.Palettes;
	}
};

struct GcPlanetaryBuildingRestrictions
{
	bool RequiresCorruptSentinels;
	bool RequiresRelicWorld;
	bool RequiresWater;

	friend bool operator==(const GcPlanetaryBuildingRestrictions& lhs, const GcPlanetaryBuildingRestrictions& rhs) 
	{
		return lhs.RequiresCorruptSentinels == rhs.RequiresCorruptSentinels &&
		lhs.RequiresRelicWorld == rhs.RequiresRelicWorld &&
		lhs.RequiresWater == rhs.RequiresWater;
	}
};

//Dependency: GcPlanetaryBuildingRestrictions
//Dependency: TkNoiseFlattenOptions
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBuildingDefinitionData
{
	NMS::Vector3f AABBOverrideMax;
	NMS::Vector3f AABBOverrideMin;
	NMS::NMSString0x20A TextureNameHint;
	NMS::NMSString0x10 ClusterLayout;
	float Density[8];
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	float ClusterSpacing;
	float MaxHeight;
	float MinHeight;
	int32_t NumModelsToGenerate;
	int32_t NumOverridesToGenerate;
	int32_t NumOverridesToGenerateWaterworlds;
	float OverrideRadius;
	NMS_GameComponents::GcPlanetaryBuildingRestrictions PlanetRestrictions;
	bool EnabledWhenPlanetHasNoNPCs;
	bool GivesShelter;
	bool IgnoreParticlesInAABB;

	friend bool operator==(const GcBuildingDefinitionData& lhs, const GcBuildingDefinitionData& rhs) 
	{
		return lhs.AABBOverrideMax == rhs.AABBOverrideMax &&
		lhs.AABBOverrideMin == rhs.AABBOverrideMin &&
		lhs.TextureNameHint == rhs.TextureNameHint &&
		lhs.ClusterLayout == rhs.ClusterLayout &&
		std::equal(std::begin(lhs.Density), std::end(lhs.Density), std::begin(rhs.Density)) &&
		lhs.FlattenType == rhs.FlattenType &&
		lhs.ClusterSpacing == rhs.ClusterSpacing &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.NumModelsToGenerate == rhs.NumModelsToGenerate &&
		lhs.NumOverridesToGenerate == rhs.NumOverridesToGenerate &&
		lhs.NumOverridesToGenerateWaterworlds == rhs.NumOverridesToGenerateWaterworlds &&
		lhs.OverrideRadius == rhs.OverrideRadius &&
		lhs.PlanetRestrictions == rhs.PlanetRestrictions &&
		lhs.EnabledWhenPlanetHasNoNPCs == rhs.EnabledWhenPlanetHasNoNPCs &&
		lhs.GivesShelter == rhs.GivesShelter &&
		lhs.IgnoreParticlesInAABB == rhs.IgnoreParticlesInAABB;
	}
};

//Dependency: GcBuildingClassification
struct GcBuildingClusterLayoutEntry
{
	NMS_GameComponents::GcBuildingClassification Building;
	int32_t Max;
	int32_t Min;
	float Probability;
	bool FacesCentre;

	friend bool operator==(const GcBuildingClusterLayoutEntry& lhs, const GcBuildingClusterLayoutEntry& rhs) 
	{
		return lhs.Building == rhs.Building &&
		lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min &&
		lhs.Probability == rhs.Probability &&
		lhs.FacesCentre == rhs.FacesCentre;
	}
};

//Dependency: GcBuildingClusterLayoutEntry
//Dependency: NMSString0x10
struct GcBuildingClusterLayout
{
	std::vector<NMS_GameComponents::GcBuildingClusterLayoutEntry> ClusterBuildings;
	NMS::NMSString0x10 ID;
	float AlignmentJitter;
	int32_t AlignmentSteps;
	float RelativeProbability;

	friend bool operator==(const GcBuildingClusterLayout& lhs, const GcBuildingClusterLayout& rhs) 
	{
		return lhs.ClusterBuildings == rhs.ClusterBuildings &&
		lhs.ID == rhs.ID &&
		lhs.AlignmentJitter == rhs.AlignmentJitter &&
		lhs.AlignmentSteps == rhs.AlignmentSteps &&
		lhs.RelativeProbability == rhs.RelativeProbability;
	}
};

//Dependency: GcBuildingDefinitionData
//Dependency: GcBuildingFilenameList
//Dependency: GcBuildingClusterLayout
struct GcBuildingDefinitionTable
{
	NMS_GameComponents::GcBuildingDefinitionData BuildingPlacement[60];
	NMS_GameComponents::GcBuildingFilenameList BuildingFiles[9];
	std::vector<NMS_GameComponents::GcBuildingClusterLayout> ClusterLayouts;

	friend bool operator==(const GcBuildingDefinitionTable& lhs, const GcBuildingDefinitionTable& rhs) 
	{
		return std::equal(std::begin(lhs.BuildingPlacement), std::end(lhs.BuildingPlacement), std::begin(rhs.BuildingPlacement)) &&
		std::equal(std::begin(lhs.BuildingFiles), std::end(lhs.BuildingFiles), std::begin(rhs.BuildingFiles)) &&
		lhs.ClusterLayouts == rhs.ClusterLayouts;
	}
};

struct GcFiendCrime
{
	enum class FiendCrimeEnum : uint32_t
	{
		None = 0,
		EggDamaged = 1,
		EggDestroyed = 2,
		EggCollected = 3,
		UnderwaterPropDamaged = 4,
		UnderwaterPropCollected = 5,
		RockTransform = 6,
		GroundPropDamage = 7,
		ShotWorm = 8,
		Carnage = 9,
		FishCarnage = 10,
		Bugs = 11,
		JellyBoss = 12,
	};

	NMS_GameComponents::GcFiendCrime::FiendCrimeEnum FiendCrime;

	friend bool operator==(const GcFiendCrime& lhs, const GcFiendCrime& rhs) 
	{
		return lhs.FiendCrime == rhs.FiendCrime;
	}
};

//Dependency: GcFiendCrime
struct GcFiendCrimeAction
{
	float FiendCrimeModifier;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;

	friend bool operator==(const GcFiendCrimeAction& lhs, const GcFiendCrimeAction& rhs) 
	{
		return lhs.FiendCrimeModifier == rhs.FiendCrimeModifier &&
		lhs.FiendCrimeType == rhs.FiendCrimeType;
	}
};

//Dependency: GcCreatureHoverTintableEffect
//Dependency: NMSString0x20A
//Dependency: NMSString0x100
struct GcCreatureHoverMovementDataParams
{
	std::vector<NMS_GameComponents::GcCreatureHoverTintableEffect> TintableEffects;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float ElevationAvoidStrength;
	float GroundAlignTimeModifier;
	float GroundEffectHeightForMaxAlpha;
	float GroundEffectHeightForMinAlpha;
	float GroundHeightOffset;
	float HeightForMaxElevationAvoid;
	float HeightForMaxGroundAlign;
	float HeightForMaxGroundAvoid;
	float HeightForMinElevationAvoid;
	float HeightForMinGroundAlign;
	float HeightForMinGroundAvoid;
	float NavOffsetY;
	float NavOffsetZ;
	float RayCastDown;
	float RayCastUp;
	NMS::NMSString0x100 GroundEffect;
	bool CanJump;
	bool ElevationAvoid;
	bool GroundAlign;
	bool GroundAvoid;

	friend bool operator==(const GcCreatureHoverMovementDataParams& lhs, const GcCreatureHoverMovementDataParams& rhs) 
	{
		return lhs.TintableEffects == rhs.TintableEffects &&
		lhs.ValidDescriptors == rhs.ValidDescriptors &&
		lhs.ElevationAvoidStrength == rhs.ElevationAvoidStrength &&
		lhs.GroundAlignTimeModifier == rhs.GroundAlignTimeModifier &&
		lhs.GroundEffectHeightForMaxAlpha == rhs.GroundEffectHeightForMaxAlpha &&
		lhs.GroundEffectHeightForMinAlpha == rhs.GroundEffectHeightForMinAlpha &&
		lhs.GroundHeightOffset == rhs.GroundHeightOffset &&
		lhs.HeightForMaxElevationAvoid == rhs.HeightForMaxElevationAvoid &&
		lhs.HeightForMaxGroundAlign == rhs.HeightForMaxGroundAlign &&
		lhs.HeightForMaxGroundAvoid == rhs.HeightForMaxGroundAvoid &&
		lhs.HeightForMinElevationAvoid == rhs.HeightForMinElevationAvoid &&
		lhs.HeightForMinGroundAlign == rhs.HeightForMinGroundAlign &&
		lhs.HeightForMinGroundAvoid == rhs.HeightForMinGroundAvoid &&
		lhs.NavOffsetY == rhs.NavOffsetY &&
		lhs.NavOffsetZ == rhs.NavOffsetZ &&
		lhs.RayCastDown == rhs.RayCastDown &&
		lhs.RayCastUp == rhs.RayCastUp &&
		lhs.GroundEffect == rhs.GroundEffect &&
		lhs.CanJump == rhs.CanJump &&
		lhs.ElevationAvoid == rhs.ElevationAvoid &&
		lhs.GroundAlign == rhs.GroundAlign &&
		lhs.GroundAvoid == rhs.GroundAvoid;
	}
};

//Dependency: GcCreatureHoverMovementDataParams
struct GcCreatureHoverMovementData
{
	std::vector<NMS_GameComponents::GcCreatureHoverMovementDataParams> Params;

	friend bool operator==(const GcCreatureHoverMovementData& lhs, const GcCreatureHoverMovementData& rhs) 
	{
		return lhs.Params == rhs.Params;
	}
};

//Dependency: NMSString0x10
struct GcBaseDefenceTrigger
{
	NMS::NMSString0x10 LaserEffectId;
	NMS::NMSString0x10 PerceptionId;
	bool ActiveWhenIdle;
	bool ActiveWhenSearching;
	bool ActiveWhenTargetAcquired;

	friend bool operator==(const GcBaseDefenceTrigger& lhs, const GcBaseDefenceTrigger& rhs) 
	{
		return lhs.LaserEffectId == rhs.LaserEffectId &&
		lhs.PerceptionId == rhs.PerceptionId &&
		lhs.ActiveWhenIdle == rhs.ActiveWhenIdle &&
		lhs.ActiveWhenSearching == rhs.ActiveWhenSearching &&
		lhs.ActiveWhenTargetAcquired == rhs.ActiveWhenTargetAcquired;
	}
};

//Dependency: GcBaseDefenceTrigger
struct GcBaseDefenceComponentData
{
	std::vector<NMS_GameComponents::GcBaseDefenceTrigger> Triggers;
	float LaserRangeAnimateTime;
	float LostUncertaintyThreshold;
	float SearchTime;
	bool PrioritiseThreats;

	friend bool operator==(const GcBaseDefenceComponentData& lhs, const GcBaseDefenceComponentData& rhs) 
	{
		return lhs.Triggers == rhs.Triggers &&
		lhs.LaserRangeAnimateTime == rhs.LaserRangeAnimateTime &&
		lhs.LostUncertaintyThreshold == rhs.LostUncertaintyThreshold &&
		lhs.SearchTime == rhs.SearchTime &&
		lhs.PrioritiseThreats == rhs.PrioritiseThreats;
	}
};

//Dependency: Colour
struct GcSpaceSkyColours
{
	NMS::Colour CloudColour;
	NMS::Colour ColourBottom;
	NMS::Colour ColourBottomPlanet;
	NMS::Colour ColourMid;
	NMS::Colour ColourMidPlanet;
	NMS::Colour ColourTop;
	NMS::Colour ColourTopPlanet;
	NMS::Colour FogColour;
	NMS::Colour FogColour2;
	NMS::Colour NebulaColour1;
	NMS::Colour NebulaColour2;
	NMS::Colour NebulaColour3;
	NMS::Colour NebulaShadowColour;
	NMS::Colour SunColour;

	friend bool operator==(const GcSpaceSkyColours& lhs, const GcSpaceSkyColours& rhs) 
	{
		return lhs.CloudColour == rhs.CloudColour &&
		lhs.ColourBottom == rhs.ColourBottom &&
		lhs.ColourBottomPlanet == rhs.ColourBottomPlanet &&
		lhs.ColourMid == rhs.ColourMid &&
		lhs.ColourMidPlanet == rhs.ColourMidPlanet &&
		lhs.ColourTop == rhs.ColourTop &&
		lhs.ColourTopPlanet == rhs.ColourTopPlanet &&
		lhs.FogColour == rhs.FogColour &&
		lhs.FogColour2 == rhs.FogColour2 &&
		lhs.NebulaColour1 == rhs.NebulaColour1 &&
		lhs.NebulaColour2 == rhs.NebulaColour2 &&
		lhs.NebulaColour3 == rhs.NebulaColour3 &&
		lhs.NebulaShadowColour == rhs.NebulaShadowColour &&
		lhs.SunColour == rhs.SunColour;
	}
};

//Dependency: GcBaseDefenceStatusType
struct GcBaseDefenceStatusAction
{
	NMS_GameComponents::GcBaseDefenceStatusType TryState;

	friend bool operator==(const GcBaseDefenceStatusAction& lhs, const GcBaseDefenceStatusAction& rhs) 
	{
		return lhs.TryState == rhs.TryState;
	}
};

//Dependency: NMSString0x10
struct GcSentinelDamagedData
{
	NMS::NMSString0x10 DamageEffect;
	NMS::NMSString0x10 DamageType;
	NMS::NMSString0x10 SelfDestructEffect;
	float DamageEffectHealthPercentThreshold;
	float RangeTrigger;
	float TimeTrigger;
	bool CanSelfDestruct;
	bool UseDamageEffect;

	friend bool operator==(const GcSentinelDamagedData& lhs, const GcSentinelDamagedData& rhs) 
	{
		return lhs.DamageEffect == rhs.DamageEffect &&
		lhs.DamageType == rhs.DamageType &&
		lhs.SelfDestructEffect == rhs.SelfDestructEffect &&
		lhs.DamageEffectHealthPercentThreshold == rhs.DamageEffectHealthPercentThreshold &&
		lhs.RangeTrigger == rhs.RangeTrigger &&
		lhs.TimeTrigger == rhs.TimeTrigger &&
		lhs.CanSelfDestruct == rhs.CanSelfDestruct &&
		lhs.UseDamageEffect == rhs.UseDamageEffect;
	}
};

//Dependency: GcCharacterCustomisationData
//Dependency: NMSString0x10
struct GcCustomisationPreset
{
	NMS_GameComponents::GcCharacterCustomisationData Data;
	NMS::NMSString0x10 Name;

	friend bool operator==(const GcCustomisationPreset& lhs, const GcCustomisationPreset& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.Name == rhs.Name;
	}
};

struct GcSettlementWeaponRespawnData
{
	uint64_t InteractionSeed;
	uint64_t LastWeaponRefreshTimestamp;

	friend bool operator==(const GcSettlementWeaponRespawnData& lhs, const GcSettlementWeaponRespawnData& rhs) 
	{
		return lhs.InteractionSeed == rhs.InteractionSeed &&
		lhs.LastWeaponRefreshTimestamp == rhs.LastWeaponRefreshTimestamp;
	}
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: TkBlackboardComparisonTypeEnum
//Dependency: NMSString0x10
struct GcBlackboardFloatCompareDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat CompareTo;
	NMS::NMSString0x10 Key;
	NMSTemplate OnFalse;
	NMSTemplate OnTrue;
	NMS_Toolkit::TkBlackboardComparisonTypeEnum CompareBlackboardValueType;

	friend bool operator==(const GcBlackboardFloatCompareDecoratorData& lhs, const GcBlackboardFloatCompareDecoratorData& rhs) 
	{
		return lhs.CompareTo == rhs.CompareTo &&
		lhs.Key == rhs.Key &&
		lhs.OnFalse == rhs.OnFalse &&
		lhs.OnTrue == rhs.OnTrue &&
		lhs.CompareBlackboardValueType == rhs.CompareBlackboardValueType;
	}
};

//Dependency: GcFishingRodData
//Dependency: VariableSizeString
struct GcFishingRodTable
{
	NMS::VariableSizeString FishingRodResource;
	std::vector<NMS_GameComponents::GcFishingRodData> FishingRods;

	friend bool operator==(const GcFishingRodTable& lhs, const GcFishingRodTable& rhs) 
	{
		return lhs.FishingRodResource == rhs.FishingRodResource &&
		lhs.FishingRods == rhs.FishingRods;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStatSeasonal
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Amount;
	bool EncouragesFighting;
	bool TakeAmountFromSeasonalData;

	friend bool operator==(const GcMissionSequenceWaitForStatSeasonal& lhs, const GcMissionSequenceWaitForStatSeasonal& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Stat == rhs.Stat &&
		lhs.StatGroup == rhs.StatGroup &&
		lhs.Amount == rhs.Amount &&
		lhs.EncouragesFighting == rhs.EncouragesFighting &&
		lhs.TakeAmountFromSeasonalData == rhs.TakeAmountFromSeasonalData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkAudioIDArray
{
	std::vector<NMS::NMSString0x80> Array;

	friend bool operator==(const TkAudioIDArray& lhs, const TkAudioIDArray& rhs) 
	{
		return lhs.Array == rhs.Array;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x100
struct GcCreaturePetPartHider
{
	std::vector<NMS::NMSString0x20A> PartName;
	NMS::NMSString0x100 AccessorySlot;

	friend bool operator==(const GcCreaturePetPartHider& lhs, const GcCreaturePetPartHider& rhs) 
	{
		return lhs.PartName == rhs.PartName &&
		lhs.AccessorySlot == rhs.AccessorySlot;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcRewardDisguisedProduct
{
	NMS::NMSString0x10 AwardDisplayIDDuringMission;
	NMS::NMSString0x10 DisplayAs;
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool UseDisplayIDWhenInShip;

	friend bool operator==(const GcRewardDisguisedProduct& lhs, const GcRewardDisguisedProduct& rhs) 
	{
		return lhs.AwardDisplayIDDuringMission == rhs.AwardDisplayIDDuringMission &&
		lhs.DisplayAs == rhs.DisplayAs &&
		lhs.ID == rhs.ID &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Default == rhs.Default &&
		lhs.UseDisplayIDWhenInShip == rhs.UseDisplayIDWhenInShip;
	}
};

struct GcNPCNavSubgraphNodeTypeConnectivity
{
	float ConnectionToPOI;
	float ExternalConnection;
	float InternalConnection;
	float PathToPOI;

	friend bool operator==(const GcNPCNavSubgraphNodeTypeConnectivity& lhs, const GcNPCNavSubgraphNodeTypeConnectivity& rhs) 
	{
		return lhs.ConnectionToPOI == rhs.ConnectionToPOI &&
		lhs.ExternalConnection == rhs.ExternalConnection &&
		lhs.InternalConnection == rhs.InternalConnection &&
		lhs.PathToPOI == rhs.PathToPOI;
	}
};

//Dependency: GcBuildingClassification
struct GcRewardBeginSettlementBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> ValidBuildings;
	bool IsUpgrade;

	friend bool operator==(const GcRewardBeginSettlementBuilding& lhs, const GcRewardBeginSettlementBuilding& rhs) 
	{
		return lhs.ValidBuildings == rhs.ValidBuildings &&
		lhs.IsUpgrade == rhs.IsUpgrade;
	}
};

struct GcItemFilterMatchIDType
{
	enum class MatchItemIDTypeEnum : uint32_t
	{
		Exact = 0,
		Prefix = 1,
		Postfix = 2,
	};

	NMS_GameComponents::GcItemFilterMatchIDType::MatchItemIDTypeEnum MatchItemIDType;

	friend bool operator==(const GcItemFilterMatchIDType& lhs, const GcItemFilterMatchIDType& rhs) 
	{
		return lhs.MatchItemIDType == rhs.MatchItemIDType;
	}
};

struct GcPhotoPlant
{
	enum class PhotoPlantTypeEnum : uint32_t
	{
		Sodium = 0,
		Oxygen = 1,
		BluePlant = 2,
	};

	NMS_GameComponents::GcPhotoPlant::PhotoPlantTypeEnum PhotoPlantType;

	friend bool operator==(const GcPhotoPlant& lhs, const GcPhotoPlant& rhs) 
	{
		return lhs.PhotoPlantType == rhs.PhotoPlantType;
	}
};

//Dependency: TkCurveType
struct GcDiscoveryTrimScoringRules
{
	float MaxScoreValue;
	float MinScoreValue;
	NMS_Toolkit::TkCurveType Curve;

	friend bool operator==(const GcDiscoveryTrimScoringRules& lhs, const GcDiscoveryTrimScoringRules& rhs) 
	{
		return lhs.MaxScoreValue == rhs.MaxScoreValue &&
		lhs.MinScoreValue == rhs.MinScoreValue &&
		lhs.Curve == rhs.Curve;
	}
};

//Dependency: NMSString0x10
struct GcItemShopAvailabilityDifficultyOptionData
{
	std::vector<NMS::NMSString0x10> NeverSoldItems;

	friend bool operator==(const GcItemShopAvailabilityDifficultyOptionData& lhs, const GcItemShopAvailabilityDifficultyOptionData& rhs) 
	{
		return lhs.NeverSoldItems == rhs.NeverSoldItems;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreaturePetAccessorySlot
{
	NMS::NMSString0x10 AccessoryGroup;
	NMS::NMSString0x100 AttachLocator;

	friend bool operator==(const GcCreaturePetAccessorySlot& lhs, const GcCreaturePetAccessorySlot& rhs) 
	{
		return lhs.AccessoryGroup == rhs.AccessoryGroup &&
		lhs.AttachLocator == rhs.AttachLocator;
	}
};

//Dependency: GcCreaturePetAccessorySlot
//Dependency: NMSString0x20A
struct GcCreaturePetAccessory
{
	NMS::NMSString0x20A RequiredDescriptor;
	std::vector<NMS::NMSString0x20A> HideParts;
	std::vector<NMS_GameComponents::GcCreaturePetAccessorySlot> Slots;

	friend bool operator==(const GcCreaturePetAccessory& lhs, const GcCreaturePetAccessory& rhs) 
	{
		return lhs.RequiredDescriptor == rhs.RequiredDescriptor &&
		lhs.HideParts == rhs.HideParts &&
		lhs.Slots == rhs.Slots;
	}
};

//Dependency: NMSString0x10
struct GcBaseMiniPortalComponentData
{
	enum class DestinationSortTypeEnum : uint32_t
	{
		NearestPotal = 0,
		BaseBuildingConnection = 1,
		AbandonedFreighter = 2,
		PortalNearestPlayerShip = 3,
	};

	NMS::NMSString0x10 DestinationGroupID;
	NMS::NMSString0x10 GroupID;
	NMS_GameComponents::GcBaseMiniPortalComponentData::DestinationSortTypeEnum DestinationSortType;
	int32_t PowerCost;
	float SnapFacingAngle;
	bool AllowSpawnedObjects;
	bool AllowVehicles;
	bool DoPlayerEffects;
	bool FlipFacingDirection;
	bool SnapFacingDirection;
	bool TeleportCamera;

	friend bool operator==(const GcBaseMiniPortalComponentData& lhs, const GcBaseMiniPortalComponentData& rhs) 
	{
		return lhs.DestinationGroupID == rhs.DestinationGroupID &&
		lhs.GroupID == rhs.GroupID &&
		lhs.DestinationSortType == rhs.DestinationSortType &&
		lhs.PowerCost == rhs.PowerCost &&
		lhs.SnapFacingAngle == rhs.SnapFacingAngle &&
		lhs.AllowSpawnedObjects == rhs.AllowSpawnedObjects &&
		lhs.AllowVehicles == rhs.AllowVehicles &&
		lhs.DoPlayerEffects == rhs.DoPlayerEffects &&
		lhs.FlipFacingDirection == rhs.FlipFacingDirection &&
		lhs.SnapFacingDirection == rhs.SnapFacingDirection &&
		lhs.TeleportCamera == rhs.TeleportCamera;
	}
};

//Dependency: VariableSizeString
struct GcBaseObjectDescriptorComponentData
{
	NMS::VariableSizeString ProcSceneFile;
	bool ForceShowPickUpLabel;

	friend bool operator==(const GcBaseObjectDescriptorComponentData& lhs, const GcBaseObjectDescriptorComponentData& rhs) 
	{
		return lhs.ProcSceneFile == rhs.ProcSceneFile &&
		lhs.ForceShowPickUpLabel == rhs.ForceShowPickUpLabel;
	}
};

struct GcMissionConditionCameraControlStealing
{

	friend bool operator==(const GcMissionConditionCameraControlStealing& lhs, const GcMissionConditionCameraControlStealing& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct GcBasePlacementRule
{
	enum class TwinCriteriaEnum : uint32_t
	{
		None = 0,
		MoveToTwin = 1,
		StretchToTwin = 2,
		StretchToRaycast = 3,
		MoveToTwinRelative = 4,
	};

	NMS::NMSString0x20A PartID;
	std::vector<NMSTemplate> Conditions;
	NMS_GameComponents::GcBasePlacementRule::TwinCriteriaEnum TwinCriteria;
	NMS::NMSString0x80 PositionLocator;
	bool ORConditions;

	friend bool operator==(const GcBasePlacementRule& lhs, const GcBasePlacementRule& rhs) 
	{
		return lhs.PartID == rhs.PartID &&
		lhs.Conditions == rhs.Conditions &&
		lhs.TwinCriteria == rhs.TwinCriteria &&
		lhs.PositionLocator == rhs.PositionLocator &&
		lhs.ORConditions == rhs.ORConditions;
	}
};

//Dependency: GcBasePlacementRule
struct GcBasePlacementComponentData
{
	std::vector<NMS_GameComponents::GcBasePlacementRule> Rules;

	friend bool operator==(const GcBasePlacementComponentData& lhs, const GcBasePlacementComponentData& rhs) 
	{
		return lhs.Rules == rhs.Rules;
	}
};

//Dependency: GcBiomeFileListOption
struct GcBiomeFileListOptions
{
	std::vector<NMS_GameComponents::GcBiomeFileListOption> FileOptions;

	friend bool operator==(const GcBiomeFileListOptions& lhs, const GcBiomeFileListOptions& rhs) 
	{
		return lhs.FileOptions == rhs.FileOptions;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimPoseBabyModifier
{
	NMS::NMSString0x10 Item;
	float Value;
	float Weight;

	friend bool operator==(const TkAnimPoseBabyModifier& lhs, const TkAnimPoseBabyModifier& rhs) 
	{
		return lhs.Item == rhs.Item &&
		lhs.Value == rhs.Value &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: NMSString0x10
struct TkAnimPoseCorrelationData
{
	NMS::NMSString0x10 ItemA;
	NMS::NMSString0x10 ItemB;
	float Correlation;

	friend bool operator==(const TkAnimPoseCorrelationData& lhs, const TkAnimPoseCorrelationData& rhs) 
	{
		return lhs.ItemA == rhs.ItemA &&
		lhs.ItemB == rhs.ItemB &&
		lhs.Correlation == rhs.Correlation;
	}
};

//Dependency: NMSString0x10
struct TkAnimPoseExampleElement
{
	NMS::NMSString0x10 Anim;
	float Value;

	friend bool operator==(const TkAnimPoseExampleElement& lhs, const TkAnimPoseExampleElement& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: TkAnimPoseExampleElement
struct TkAnimPoseExampleData
{
	std::vector<NMS_Toolkit::TkAnimPoseExampleElement> Elements;

	friend bool operator==(const TkAnimPoseExampleData& lhs, const TkAnimPoseExampleData& rhs) 
	{
		return lhs.Elements == rhs.Elements;
	}
};

//Dependency: TkAnimPoseBabyModifier
//Dependency: TkAnimPoseCorrelationData
//Dependency: TkAnimPoseExampleData
//Dependency: TkAnimPoseData
//Dependency: VariableSizeString
struct TkAnimPoseComponentData
{
	std::vector<NMS_Toolkit::TkAnimPoseBabyModifier> BabyModifiers;
	std::vector<float> CorrelationMat;
	std::vector<NMS_Toolkit::TkAnimPoseCorrelationData> Correlations;
	std::vector<NMS_Toolkit::TkAnimPoseExampleData> Examples;
	NMS::VariableSizeString Filename;
	std::vector<NMS_Toolkit::TkAnimPoseData> PoseAnims;
	float AdultCorrelationValue;
	bool DisableForAnimOverrides;
	bool ShouldRandomise;

	friend bool operator==(const TkAnimPoseComponentData& lhs, const TkAnimPoseComponentData& rhs) 
	{
		return lhs.BabyModifiers == rhs.BabyModifiers &&
		lhs.CorrelationMat == rhs.CorrelationMat &&
		lhs.Correlations == rhs.Correlations &&
		lhs.Examples == rhs.Examples &&
		lhs.Filename == rhs.Filename &&
		lhs.PoseAnims == rhs.PoseAnims &&
		lhs.AdultCorrelationValue == rhs.AdultCorrelationValue &&
		lhs.DisableForAnimOverrides == rhs.DisableForAnimOverrides &&
		lhs.ShouldRandomise == rhs.ShouldRandomise;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcInputActions
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct GcInputActionInfo
{
	enum class InputActionInfoFlagsEnum : uint32_t
	{
		None = 0,
		HideInControlsPage = 1,
		HideInMenusMenu = 2,
		OnlyVR = 4,
	};

	NMS::NMSString0x20A ConsoleLocTag;
	NMS::NMSString0x20A LocTag;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS::VariableSizeString VirtualButtonIcon;
	NMS_GameComponents::GcInputActionInfo::InputActionInfoFlagsEnum InputActionInfoFlags;
	NMS_GameComponents::GcInputActions Pairing;
	NMS::NMSString0x80 TextTag;
	NMS::NMSString0x20 ExternalDigitalAliasId;
	NMS::NMSString0x20 ExternalId;
	NMS::NMSString0x20 ExternalLoc;
	bool Analogue;

	friend bool operator==(const GcInputActionInfo& lhs, const GcInputActionInfo& rhs) 
	{
		return lhs.ConsoleLocTag == rhs.ConsoleLocTag &&
		lhs.LocTag == rhs.LocTag &&
		lhs.OverlayIcon == rhs.OverlayIcon &&
		lhs.SolidIcon == rhs.SolidIcon &&
		lhs.SpecialIcon == rhs.SpecialIcon &&
		lhs.VirtualButtonIcon == rhs.VirtualButtonIcon &&
		lhs.InputActionInfoFlags == rhs.InputActionInfoFlags &&
		lhs.Pairing == rhs.Pairing &&
		lhs.TextTag == rhs.TextTag &&
		lhs.ExternalDigitalAliasId == rhs.ExternalDigitalAliasId &&
		lhs.ExternalId == rhs.ExternalId &&
		lhs.ExternalLoc == rhs.ExternalLoc &&
		lhs.Analogue == rhs.Analogue;
	}
};

//Dependency: GcInputActionInfo
struct GcInputActionInfoMap
{
	NMS_GameComponents::GcInputActionInfo ActionMap[291];

	friend bool operator==(const GcInputActionInfoMap& lhs, const GcInputActionInfoMap& rhs) 
	{
		return std::equal(std::begin(lhs.ActionMap), std::end(lhs.ActionMap), std::begin(rhs.ActionMap));
	}
};

struct GcCreaturePetMood
{
	enum class PetMoodEnum : uint32_t
	{
		Hungry = 0,
		Lonely = 1,
	};

	NMS_GameComponents::GcCreaturePetMood::PetMoodEnum PetMood;

	friend bool operator==(const GcCreaturePetMood& lhs, const GcCreaturePetMood& rhs) 
	{
		return lhs.PetMood == rhs.PetMood;
	}
};

struct GcBaseSnapState
{
	enum class SnapStateEnum : uint32_t
	{
		IsSnapped = 0,
		NotSnapped = 1,
	};

	NMS_GameComponents::GcBaseSnapState::SnapStateEnum SnapState;

	friend bool operator==(const GcBaseSnapState& lhs, const GcBaseSnapState& rhs) 
	{
		return lhs.SnapState == rhs.SnapState;
	}
};

//Dependency: NMSString0x10
struct GcShipAIPlanetPatrolData
{
	NMS::NMSString0x10 Squad;
	float AlignForce;
	float AlongPathForce;
	float BrakeForce;
	float PathOffset;
	float PathSpeed;
	float PlayerFalloff;
	float PlayerOffset;
	float ToPathForce;
	float WaypointDistance;

	friend bool operator==(const GcShipAIPlanetPatrolData& lhs, const GcShipAIPlanetPatrolData& rhs) 
	{
		return lhs.Squad == rhs.Squad &&
		lhs.AlignForce == rhs.AlignForce &&
		lhs.AlongPathForce == rhs.AlongPathForce &&
		lhs.BrakeForce == rhs.BrakeForce &&
		lhs.PathOffset == rhs.PathOffset &&
		lhs.PathSpeed == rhs.PathSpeed &&
		lhs.PlayerFalloff == rhs.PlayerFalloff &&
		lhs.PlayerOffset == rhs.PlayerOffset &&
		lhs.ToPathForce == rhs.ToPathForce &&
		lhs.WaypointDistance == rhs.WaypointDistance;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationBoneScales
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<float> Positions;
	NMS::NMSString0x10 ScaleBoneName;

	friend bool operator==(const GcCustomisationBoneScales& lhs, const GcCustomisationBoneScales& rhs) 
	{
		return lhs.GroupTitle == rhs.GroupTitle &&
		lhs.Positions == rhs.Positions &&
		lhs.ScaleBoneName == rhs.ScaleBoneName;
	}
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationColourGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 GroupID;
	NMS_Toolkit::TkPaletteTexture Palette;
	bool HiddenForFirstOption;

	friend bool operator==(const GcCustomisationColourGroup& lhs, const GcCustomisationColourGroup& rhs) 
	{
		return lhs.Title == rhs.Title &&
		lhs.GroupID == rhs.GroupID &&
		lhs.Palette == rhs.Palette &&
		lhs.HiddenForFirstOption == rhs.HiddenForFirstOption;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationTextureGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 TextureOptionGroup;

	friend bool operator==(const GcCustomisationTextureGroup& lhs, const GcCustomisationTextureGroup& rhs) 
	{
		return lhs.Title == rhs.Title &&
		lhs.GroupID == rhs.GroupID &&
		lhs.TextureOptionGroup == rhs.TextureOptionGroup;
	}
};

//Dependency: GcCustomisationBoneScales
//Dependency: GcCustomisationColourGroup
//Dependency: GcCustomisationTextureGroup
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCustomisationDescriptorGroupOption
{
	std::vector<NMS_GameComponents::GcCustomisationBoneScales> BoneScales;
	std::vector<NMS_GameComponents::GcCustomisationColourGroup> ColourGroups;
	NMS::NMSString0x10 DescriptorOption;
	std::vector<NMS::NMSString0x10> HideIfGroupActive;
	std::vector<NMS::NMSString0x10> SelectingAddsGroup;
	std::vector<NMS::NMSString0x10> SelectingRemovesGroup;
	std::vector<NMS_GameComponents::GcCustomisationTextureGroup> TextureGroups;
	std::vector<NMS::NMSString0x10> UnselectingAddsGroup;
	std::vector<NMS::NMSString0x10> UnselectingRemovesGroup;
	int32_t InteractionCameraIndexOverride;
	NMS::NMSString0x20 InteracttionCameraFocusJointOverride;
	bool ForceDisableDoF;
	bool ReplaceBaseBoneScales;
	bool ReplaceBaseColours;

	friend bool operator==(const GcCustomisationDescriptorGroupOption& lhs, const GcCustomisationDescriptorGroupOption& rhs) 
	{
		return lhs.BoneScales == rhs.BoneScales &&
		lhs.ColourGroups == rhs.ColourGroups &&
		lhs.DescriptorOption == rhs.DescriptorOption &&
		lhs.HideIfGroupActive == rhs.HideIfGroupActive &&
		lhs.SelectingAddsGroup == rhs.SelectingAddsGroup &&
		lhs.SelectingRemovesGroup == rhs.SelectingRemovesGroup &&
		lhs.TextureGroups == rhs.TextureGroups &&
		lhs.UnselectingAddsGroup == rhs.UnselectingAddsGroup &&
		lhs.UnselectingRemovesGroup == rhs.UnselectingRemovesGroup &&
		lhs.InteractionCameraIndexOverride == rhs.InteractionCameraIndexOverride &&
		lhs.InteracttionCameraFocusJointOverride == rhs.InteracttionCameraFocusJointOverride &&
		lhs.ForceDisableDoF == rhs.ForceDisableDoF &&
		lhs.ReplaceBaseBoneScales == rhs.ReplaceBaseBoneScales &&
		lhs.ReplaceBaseColours == rhs.ReplaceBaseColours;
	}
};

//Dependency: GcCustomisationDescriptorGroupOption
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupOptions
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupOption> DescriptorGroupOptions;
	std::vector<NMS::NMSString0x10> PrerequisiteGroup;
	bool FirstOptionIsEmpty;

	friend bool operator==(const GcCustomisationDescriptorGroupOptions& lhs, const GcCustomisationDescriptorGroupOptions& rhs) 
	{
		return lhs.GroupTitle == rhs.GroupTitle &&
		lhs.DescriptorGroupOptions == rhs.DescriptorGroupOptions &&
		lhs.PrerequisiteGroup == rhs.PrerequisiteGroup &&
		lhs.FirstOptionIsEmpty == rhs.FirstOptionIsEmpty;
	}
};

//Dependency: NMSString0x20
struct GcCustomisationCameraData
{
	int32_t InteractionCameraIndex;
	float MaxPitch;
	float MaxYaw;
	float MinPitch;
	float MinYaw;
	NMS::NMSString0x20 InteracttionCameraFocusJoint;

	friend bool operator==(const GcCustomisationCameraData& lhs, const GcCustomisationCameraData& rhs) 
	{
		return lhs.InteractionCameraIndex == rhs.InteractionCameraIndex &&
		lhs.MaxPitch == rhs.MaxPitch &&
		lhs.MaxYaw == rhs.MaxYaw &&
		lhs.MinPitch == rhs.MinPitch &&
		lhs.MinYaw == rhs.MinYaw &&
		lhs.InteracttionCameraFocusJoint == rhs.InteracttionCameraFocusJoint;
	}
};

//Dependency: GcCustomisationBoneScales
//Dependency: GcCustomisationColourGroup
//Dependency: GcCustomisationDescriptorGroupOptions
//Dependency: GcCustomisationTextureGroup
//Dependency: GcCustomisationCameraData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationGroup
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<NMS_GameComponents::GcCustomisationBoneScales> BoneScales;
	std::vector<NMS_GameComponents::GcCustomisationColourGroup> ColourGroups;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupOptions> DescriptorOptions;
	NMS::NMSString0x10 GroupID;
	std::vector<NMS_GameComponents::GcCustomisationTextureGroup> TextureGroups;
	NMS_GameComponents::GcCustomisationCameraData CameraData;
	bool ForceShowAllColourOptions;
	bool IsBannerGroup;

	friend bool operator==(const GcCustomisationGroup& lhs, const GcCustomisationGroup& rhs) 
	{
		return lhs.GroupTitle == rhs.GroupTitle &&
		lhs.BoneScales == rhs.BoneScales &&
		lhs.ColourGroups == rhs.ColourGroups &&
		lhs.DescriptorOptions == rhs.DescriptorOptions &&
		lhs.GroupID == rhs.GroupID &&
		lhs.TextureGroups == rhs.TextureGroups &&
		lhs.CameraData == rhs.CameraData &&
		lhs.ForceShowAllColourOptions == rhs.ForceShowAllColourOptions &&
		lhs.IsBannerGroup == rhs.IsBannerGroup;
	}
};

//Dependency: GcCustomisationGroup
struct GcCustomisationGroups
{
	std::vector<NMS_GameComponents::GcCustomisationGroup> CustomisationGroups;

	friend bool operator==(const GcCustomisationGroups& lhs, const GcCustomisationGroups& rhs) 
	{
		return lhs.CustomisationGroups == rhs.CustomisationGroups;
	}
};

//Dependency: GcCustomisationGroup
//Dependency: NMSString0x10
struct GcCustomisationRace
{
	std::vector<NMS_GameComponents::GcCustomisationGroup> CustomisationGroups;
	NMS::NMSString0x10 DescriptorGroupOption;
	std::vector<NMS::NMSString0x10> Presets;
	float Scale;
	bool IsGek;

	friend bool operator==(const GcCustomisationRace& lhs, const GcCustomisationRace& rhs) 
	{
		return lhs.CustomisationGroups == rhs.CustomisationGroups &&
		lhs.DescriptorGroupOption == rhs.DescriptorGroupOption &&
		lhs.Presets == rhs.Presets &&
		lhs.Scale == rhs.Scale &&
		lhs.IsGek == rhs.IsGek;
	}
};

//Dependency: GcCustomisationGroups
//Dependency: GcCustomisationRace
//Dependency: GcCustomisationCameraData
struct GcCustomisationUI
{
	NMS_GameComponents::GcCustomisationGroups Common;
	std::vector<NMS_GameComponents::GcCustomisationRace> Races;
	NMS_GameComponents::GcCustomisationCameraData RacesCameraData;

	friend bool operator==(const GcCustomisationUI& lhs, const GcCustomisationUI& rhs) 
	{
		return lhs.Common == rhs.Common &&
		lhs.Races == rhs.Races &&
		lhs.RacesCameraData == rhs.RacesCameraData;
	}
};

//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkEqualityEnum
//Dependency: NMSString0x20A
struct GcCostDifficultySpaceCombat
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcCombatTimerDifficultyOption SpaceCombatTimers;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcCostDifficultySpaceCombat& lhs, const GcCostDifficultySpaceCombat& rhs) 
	{
		return lhs.CostStringCantAfford == rhs.CostStringCantAfford &&
		lhs.SpaceCombatTimers == rhs.SpaceCombatTimers &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: NMSString0x10
struct GcShipAIAttackData
{
	NMS::NMSString0x10 Id;
	float AttackAngle;
	float AttackApproachMaxRange;
	float AttackApproachMinRange;
	float AttackApproachOffset;
	float AttackBoostAngle;
	float AttackBoostRange;
	float AttackBoostTimeToRange;
	float AttackFlybyOffset;
	float AttackMaxPlanetHeight;
	float AttackMaxTime;
	float AttackReadyTime;
	float AttackShootTimeMax;
	float AttackShootTimeMin;
	float AttackShootWaitTime;
	float AttackTargetMaxRange;
	float AttackTargetMinRange;
	float AttackTargetOffsetMax;
	float AttackTargetOffsetMin;
	float AttackTargetSwitchTargetTime;
	float AttackTooCloseRange;
	float AttackTurnMaxMinTime;
	float AttackTurnMaxTimeRange;
	float AttackTurnMultiplier;
	float AttackTurnMultiplierMax;
	float AttackWeaponRange;
	float FleeBoost;
	float FleeBrake;
	float FleeBrakeTime;
	float FleeMaxTime;
	float FleeMinTime;
	float FleeRange;
	float FleeRepositionAngleMax;
	float FleeRepositionAngleMin;
	float FleeRepositionTime;
	float FleeRepositionUrgentAngleMax;
	float FleeRepositionUrgentAngleMin;
	float FleeRepositionUrgentTime;
	float FleeUrgentBoost;
	float FleeUrgentBrake;
	float FleeUrgentBrakeTime;
	float FleeUrgentRange;
	float GunDispersionAngle;
	float GunFireRate;
	float LaserHealthPoint;
	int32_t NumHitsBeforeBail;
	int32_t NumHitsBeforeReposition;
	float PlanetFleeHeightExtra;

	friend bool operator==(const GcShipAIAttackData& lhs, const GcShipAIAttackData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.AttackAngle == rhs.AttackAngle &&
		lhs.AttackApproachMaxRange == rhs.AttackApproachMaxRange &&
		lhs.AttackApproachMinRange == rhs.AttackApproachMinRange &&
		lhs.AttackApproachOffset == rhs.AttackApproachOffset &&
		lhs.AttackBoostAngle == rhs.AttackBoostAngle &&
		lhs.AttackBoostRange == rhs.AttackBoostRange &&
		lhs.AttackBoostTimeToRange == rhs.AttackBoostTimeToRange &&
		lhs.AttackFlybyOffset == rhs.AttackFlybyOffset &&
		lhs.AttackMaxPlanetHeight == rhs.AttackMaxPlanetHeight &&
		lhs.AttackMaxTime == rhs.AttackMaxTime &&
		lhs.AttackReadyTime == rhs.AttackReadyTime &&
		lhs.AttackShootTimeMax == rhs.AttackShootTimeMax &&
		lhs.AttackShootTimeMin == rhs.AttackShootTimeMin &&
		lhs.AttackShootWaitTime == rhs.AttackShootWaitTime &&
		lhs.AttackTargetMaxRange == rhs.AttackTargetMaxRange &&
		lhs.AttackTargetMinRange == rhs.AttackTargetMinRange &&
		lhs.AttackTargetOffsetMax == rhs.AttackTargetOffsetMax &&
		lhs.AttackTargetOffsetMin == rhs.AttackTargetOffsetMin &&
		lhs.AttackTargetSwitchTargetTime == rhs.AttackTargetSwitchTargetTime &&
		lhs.AttackTooCloseRange == rhs.AttackTooCloseRange &&
		lhs.AttackTurnMaxMinTime == rhs.AttackTurnMaxMinTime &&
		lhs.AttackTurnMaxTimeRange == rhs.AttackTurnMaxTimeRange &&
		lhs.AttackTurnMultiplier == rhs.AttackTurnMultiplier &&
		lhs.AttackTurnMultiplierMax == rhs.AttackTurnMultiplierMax &&
		lhs.AttackWeaponRange == rhs.AttackWeaponRange &&
		lhs.FleeBoost == rhs.FleeBoost &&
		lhs.FleeBrake == rhs.FleeBrake &&
		lhs.FleeBrakeTime == rhs.FleeBrakeTime &&
		lhs.FleeMaxTime == rhs.FleeMaxTime &&
		lhs.FleeMinTime == rhs.FleeMinTime &&
		lhs.FleeRange == rhs.FleeRange &&
		lhs.FleeRepositionAngleMax == rhs.FleeRepositionAngleMax &&
		lhs.FleeRepositionAngleMin == rhs.FleeRepositionAngleMin &&
		lhs.FleeRepositionTime == rhs.FleeRepositionTime &&
		lhs.FleeRepositionUrgentAngleMax == rhs.FleeRepositionUrgentAngleMax &&
		lhs.FleeRepositionUrgentAngleMin == rhs.FleeRepositionUrgentAngleMin &&
		lhs.FleeRepositionUrgentTime == rhs.FleeRepositionUrgentTime &&
		lhs.FleeUrgentBoost == rhs.FleeUrgentBoost &&
		lhs.FleeUrgentBrake == rhs.FleeUrgentBrake &&
		lhs.FleeUrgentBrakeTime == rhs.FleeUrgentBrakeTime &&
		lhs.FleeUrgentRange == rhs.FleeUrgentRange &&
		lhs.GunDispersionAngle == rhs.GunDispersionAngle &&
		lhs.GunFireRate == rhs.GunFireRate &&
		lhs.LaserHealthPoint == rhs.LaserHealthPoint &&
		lhs.NumHitsBeforeBail == rhs.NumHitsBeforeBail &&
		lhs.NumHitsBeforeReposition == rhs.NumHitsBeforeReposition &&
		lhs.PlanetFleeHeightExtra == rhs.PlanetFleeHeightExtra;
	}
};

struct GcBeenShotEvent
{
	enum class ShotByEnum : uint32_t
	{
		Player = 0,
		Anything = 1,
		PlayerOrRemotePlayer = 2,
	};

	int32_t DamageThreshold;
	float HealthThreshold;
	NMS_GameComponents::GcBeenShotEvent::ShotByEnum ShotBy;

	friend bool operator==(const GcBeenShotEvent& lhs, const GcBeenShotEvent& rhs) 
	{
		return lhs.DamageThreshold == rhs.DamageThreshold &&
		lhs.HealthThreshold == rhs.HealthThreshold &&
		lhs.ShotBy == rhs.ShotBy;
	}
};

struct GcSkyProperties
{
	float AtmosphereThickness;
	float DayHorizonTightness;
	float DuskHorizonMultiplier;
	float HorizonFadeSpeed;
	float HorizonMultiplier;
	float NightHorizonMultiplier;
	float SunSize;
	float SunStrength;
	float SunSurroundSize;
	float SunSurroundStrength;
	float UpperSkyFadeOffset;
	float UpperSkyFadeSpeed;

	friend bool operator==(const GcSkyProperties& lhs, const GcSkyProperties& rhs) 
	{
		return lhs.AtmosphereThickness == rhs.AtmosphereThickness &&
		lhs.DayHorizonTightness == rhs.DayHorizonTightness &&
		lhs.DuskHorizonMultiplier == rhs.DuskHorizonMultiplier &&
		lhs.HorizonFadeSpeed == rhs.HorizonFadeSpeed &&
		lhs.HorizonMultiplier == rhs.HorizonMultiplier &&
		lhs.NightHorizonMultiplier == rhs.NightHorizonMultiplier &&
		lhs.SunSize == rhs.SunSize &&
		lhs.SunStrength == rhs.SunStrength &&
		lhs.SunSurroundSize == rhs.SunSurroundSize &&
		lhs.SunSurroundStrength == rhs.SunSurroundStrength &&
		lhs.UpperSkyFadeOffset == rhs.UpperSkyFadeOffset &&
		lhs.UpperSkyFadeSpeed == rhs.UpperSkyFadeSpeed;
	}
};

//Dependency: GcFogProperties
//Dependency: GcSkyProperties
struct GcPlanetSkyProperties
{
	NMS_GameComponents::GcFogProperties PlanetExtremeFog;
	NMS_GameComponents::GcFogProperties PlanetFlightFog;
	NMS_GameComponents::GcFogProperties PlanetFog;
	NMS_GameComponents::GcFogProperties PlanetStormFog;
	NMS_GameComponents::GcSkyProperties PlanetSky;

	friend bool operator==(const GcPlanetSkyProperties& lhs, const GcPlanetSkyProperties& rhs) 
	{
		return lhs.PlanetExtremeFog == rhs.PlanetExtremeFog &&
		lhs.PlanetFlightFog == rhs.PlanetFlightFog &&
		lhs.PlanetFog == rhs.PlanetFog &&
		lhs.PlanetStormFog == rhs.PlanetStormFog &&
		lhs.PlanetSky == rhs.PlanetSky;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourAppearData
{
	NMS::NMSString0x10 AppearAnim;

	friend bool operator==(const GcBehaviourAppearData& lhs, const GcBehaviourAppearData& rhs) 
	{
		return lhs.AppearAnim == rhs.AppearAnim;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: Vector3f
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueVector
{
	NMS::Vector3f DefaultValue;
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;

	friend bool operator==(const TkBlackboardDefaultValueVector& lhs, const TkBlackboardDefaultValueVector& rhs) 
	{
		return lhs.DefaultValue == rhs.DefaultValue &&
		lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.BlackboardCategory == rhs.BlackboardCategory;
	}
};

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueId
{
	NMS::NMSString0x10 BlackboardKey;
	NMS::NMSString0x10 DefaultValue;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;

	friend bool operator==(const TkBlackboardDefaultValueId& lhs, const TkBlackboardDefaultValueId& rhs) 
	{
		return lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.DefaultValue == rhs.DefaultValue &&
		lhs.BlackboardCategory == rhs.BlackboardCategory;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueVector
//Dependency: TkBlackboardDefaultValueId
//Dependency: TkBlackboardDefaultValueFloat
struct GcBehaviourApplyDamageData
{
	NMS_Toolkit::TkBlackboardDefaultValueVector Offset;
	NMS_Toolkit::TkBlackboardDefaultValueId PlayerDamageType;
	NMS_Toolkit::TkBlackboardDefaultValueFloat Radius;

	friend bool operator==(const GcBehaviourApplyDamageData& lhs, const GcBehaviourApplyDamageData& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.PlayerDamageType == rhs.PlayerDamageType &&
		lhs.Radius == rhs.Radius;
	}
};

//Dependency: NMSString0x20A
struct GcObjectiveTextFormatOptions
{
	NMS::NMSString0x20A FormattableObjective;
	NMS::NMSString0x20A FormattableObjectiveTip;
	bool ObjectivesCanBeFormattedBySequences;

	friend bool operator==(const GcObjectiveTextFormatOptions& lhs, const GcObjectiveTextFormatOptions& rhs) 
	{
		return lhs.FormattableObjective == rhs.FormattableObjective &&
		lhs.FormattableObjectiveTip == rhs.FormattableObjectiveTip &&
		lhs.ObjectivesCanBeFormattedBySequences == rhs.ObjectivesCanBeFormattedBySequences;
	}
};

//Dependency: GcPlayerHazardType
struct GcMissionConditionHazard
{
	NMS_GameComponents::GcPlayerHazardType Hazard;

	friend bool operator==(const GcMissionConditionHazard& lhs, const GcMissionConditionHazard& rhs) 
	{
		return lhs.Hazard == rhs.Hazard;
	}
};

struct GcBehaviourCheckDeathData
{

	friend bool operator==(const GcBehaviourCheckDeathData& lhs, const GcBehaviourCheckDeathData& rhs) 
	{
		return true;
	}
};

//Dependency: GcAlienRace
//Dependency: NMSString0x100
//Dependency: NMSString0x20A
struct GcDisplayText
{
	enum class HUDTextDisplayTypeEnum : uint32_t
	{
		Full = 0,
		Compact = 1,
		EyeLevel = 2,
		Prompt = 3,
		Tooltip = 4,
	};

	std::vector<NMS::NMSString0x20A> ChooseRandomTextOptions;
	NMS_GameComponents::GcDisplayText::HUDTextDisplayTypeEnum HUDTextDisplayType;
	NMS_GameComponents::GcAlienRace UseAlienLanguage;
	NMS::NMSString0x100 Subtitle1;
	NMS::NMSString0x100 Subtitle2;
	NMS::NMSString0x100 Title;

	friend bool operator==(const GcDisplayText& lhs, const GcDisplayText& rhs) 
	{
		return lhs.ChooseRandomTextOptions == rhs.ChooseRandomTextOptions &&
		lhs.HUDTextDisplayType == rhs.HUDTextDisplayType &&
		lhs.UseAlienLanguage == rhs.UseAlienLanguage &&
		lhs.Subtitle1 == rhs.Subtitle1 &&
		lhs.Subtitle2 == rhs.Subtitle2 &&
		lhs.Title == rhs.Title;
	}
};

struct GcMissionConditionTrial
{

	friend bool operator==(const GcMissionConditionTrial& lhs, const GcMissionConditionTrial& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourCooldownBeginData
{
	NMS::NMSString0x10 Key;

	friend bool operator==(const GcBehaviourCooldownBeginData& lhs, const GcBehaviourCooldownBeginData& rhs) 
	{
		return lhs.Key == rhs.Key;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueBool
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	bool DefaultValue;

	friend bool operator==(const TkBlackboardDefaultValueBool& lhs, const TkBlackboardDefaultValueBool& rhs) 
	{
		return lhs.BlackboardKey == rhs.BlackboardKey &&
		lhs.BlackboardCategory == rhs.BlackboardCategory &&
		lhs.DefaultValue == rhs.DefaultValue;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueBool
struct GcBehaviourDetailAnimsData
{
	NMS_Toolkit::TkBlackboardDefaultValueBool CanDetail;

	friend bool operator==(const GcBehaviourDetailAnimsData& lhs, const GcBehaviourDetailAnimsData& rhs) 
	{
		return lhs.CanDetail == rhs.CanDetail;
	}
};

struct GcItemShopAvailabilityDifficultyOption
{
	enum class ItemShopAvailabilityDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcItemShopAvailabilityDifficultyOption::ItemShopAvailabilityDifficultyEnum ItemShopAvailabilityDifficulty;

	friend bool operator==(const GcItemShopAvailabilityDifficultyOption& lhs, const GcItemShopAvailabilityDifficultyOption& rhs) 
	{
		return lhs.ItemShopAvailabilityDifficulty == rhs.ItemShopAvailabilityDifficulty;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourFaceTargetData
{
	NMS::NMSString0x10 TargetKey;
	float ArriveAngle;

	friend bool operator==(const GcBehaviourFaceTargetData& lhs, const GcBehaviourFaceTargetData& rhs) 
	{
		return lhs.TargetKey == rhs.TargetKey &&
		lhs.ArriveAngle == rhs.ArriveAngle;
	}
};

//Dependency: NMSString0x20A
struct GcCostAnyCookedProduct
{
	NMS::NMSString0x20A CostString;
	NMS::NMSString0x20A CostStringCantAfford;
	int32_t Index;
	bool MixRandomAndBetter;
	bool PreferBetterItems;

	friend bool operator==(const GcCostAnyCookedProduct& lhs, const GcCostAnyCookedProduct& rhs) 
	{
		return lhs.CostString == rhs.CostString &&
		lhs.CostStringCantAfford == rhs.CostStringCantAfford &&
		lhs.Index == rhs.Index &&
		lhs.MixRandomAndBetter == rhs.MixRandomAndBetter &&
		lhs.PreferBetterItems == rhs.PreferBetterItems;
	}
};

struct GcDifficultySettingEditability
{
	enum class DifficultySettingEditabilityEnum : uint32_t
	{
		FullyEditable = 0,
		IncreaseOnly = 1,
		DecreaseOnly = 2,
		LockedVisible = 3,
		LockedHidden = 4,
	};

	NMS_GameComponents::GcDifficultySettingEditability::DifficultySettingEditabilityEnum DifficultySettingEditability;

	friend bool operator==(const GcDifficultySettingEditability& lhs, const GcDifficultySettingEditability& rhs) 
	{
		return lhs.DifficultySettingEditability == rhs.DifficultySettingEditability;
	}
};

struct GcUniqueIdComponentData
{

	friend bool operator==(const GcUniqueIdComponentData& lhs, const GcUniqueIdComponentData& rhs) 
	{
		return true;
	}
};

struct GcBehaviourIdleData
{

	friend bool operator==(const GcBehaviourIdleData& lhs, const GcBehaviourIdleData& rhs) 
	{
		return true;
	}
};

struct GcNPCInteractiveObjectType
{
	enum class NPCInteractiveObjectTypeEnum : uint32_t
	{
		Idle = 0,
		Generic = 1,
		Chair = 2,
		Conversation = 3,
		WatchShip = 4,
		Shop = 5,
		Dance = 6,
		None = 7,
	};

	NMS_GameComponents::GcNPCInteractiveObjectType::NPCInteractiveObjectTypeEnum NPCInteractiveObjectType;

	friend bool operator==(const GcNPCInteractiveObjectType& lhs, const GcNPCInteractiveObjectType& rhs) 
	{
		return lhs.NPCInteractiveObjectType == rhs.NPCInteractiveObjectType;
	}
};

//Dependency: GcNPCInteractiveObjectType
struct GcNPCSettlementBehaviourObjectTypeWeightEntry
{
	NMS_GameComponents::GcNPCInteractiveObjectType ObjectType;
	float Weight;

	friend bool operator==(const GcNPCSettlementBehaviourObjectTypeWeightEntry& lhs, const GcNPCSettlementBehaviourObjectTypeWeightEntry& rhs) 
	{
		return lhs.ObjectType == rhs.ObjectType &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourIncrementCounter
{
	NMS::NMSString0x10 Key;

	friend bool operator==(const GcBehaviourIncrementCounter& lhs, const GcBehaviourIncrementCounter& rhs) 
	{
		return lhs.Key == rhs.Key;
	}
};

//Dependency: GcPrimaryAxis
//Dependency: NMSString0x10
struct GcCharacterRotate
{
	NMS::NMSString0x10 Input;
	float Damping;
	NMS_GameComponents::GcPrimaryAxis RotateAxis;
	float RotateTime;

	friend bool operator==(const GcCharacterRotate& lhs, const GcCharacterRotate& rhs) 
	{
		return lhs.Input == rhs.Input &&
		lhs.Damping == rhs.Damping &&
		lhs.RotateAxis == rhs.RotateAxis &&
		lhs.RotateTime == rhs.RotateTime;
	}
};

struct GcFleetHologramComponentData
{

	friend bool operator==(const GcFleetHologramComponentData& lhs, const GcFleetHologramComponentData& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardAction
{
	NMS::NMSString0x10 Reward;

	friend bool operator==(const GcRewardAction& lhs, const GcRewardAction& rhs) 
	{
		return lhs.Reward == rhs.Reward;
	}
};

//Dependency: TkBlackboardDefaultValueId
//Dependency: NMSString0x40
struct GcBehaviourLaunchProjectileData
{
	NMS_Toolkit::TkBlackboardDefaultValueId Projectile;
	int32_t Amount;
	float HorizontalDispersion;
	float VerticalDispersion;
	NMS::NMSString0x40 LaunchJoint;

	friend bool operator==(const GcBehaviourLaunchProjectileData& lhs, const GcBehaviourLaunchProjectileData& rhs) 
	{
		return lhs.Projectile == rhs.Projectile &&
		lhs.Amount == rhs.Amount &&
		lhs.HorizontalDispersion == rhs.HorizontalDispersion &&
		lhs.VerticalDispersion == rhs.VerticalDispersion &&
		lhs.LaunchJoint == rhs.LaunchJoint;
	}
};

//Dependency: NMSString0x10
struct GcRoomCountRule
{
	NMS::NMSString0x10 RoomID;
	int32_t Max;
	int32_t Min;

	friend bool operator==(const GcRoomCountRule& lhs, const GcRoomCountRule& rhs) 
	{
		return lhs.RoomID == rhs.RoomID &&
		lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min;
	}
};

//Dependency: NMSString0x20A
struct GcRewardCrashSiteFly
{
	NMS::NMSString0x20A NPCScanEvent;

	friend bool operator==(const GcRewardCrashSiteFly& lhs, const GcRewardCrashSiteFly& rhs) 
	{
		return lhs.NPCScanEvent == rhs.NPCScanEvent;
	}
};

//Dependency: TkBlackboardDefaultValueBool
//Dependency: NMSString0x10
struct GcBehaviourLookData
{
	NMS_Toolkit::TkBlackboardDefaultValueBool CanLook;
	NMS_Toolkit::TkBlackboardDefaultValueBool FocusOnTarget;
	NMS_Toolkit::TkBlackboardDefaultValueBool RelaxedLook;
	NMS::NMSString0x10 LookTargetKey;
	bool LookWhenBeyondMaxAngle;

	friend bool operator==(const GcBehaviourLookData& lhs, const GcBehaviourLookData& rhs) 
	{
		return lhs.CanLook == rhs.CanLook &&
		lhs.FocusOnTarget == rhs.FocusOnTarget &&
		lhs.RelaxedLook == rhs.RelaxedLook &&
		lhs.LookTargetKey == rhs.LookTargetKey &&
		lhs.LookWhenBeyondMaxAngle == rhs.LookWhenBeyondMaxAngle;
	}
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcBehaviourMaintainRangeFromTargetData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat MaxDist;
	NMS_Toolkit::TkBlackboardDefaultValueFloat MinDist;
	NMS::NMSString0x10 TargetKey;
	float AvoidCreaturesStrength;
	float SpeedModifier;
	bool _2D;
	bool SucceedWhenInRange;

	friend bool operator==(const GcBehaviourMaintainRangeFromTargetData& lhs, const GcBehaviourMaintainRangeFromTargetData& rhs) 
	{
		return lhs.MaxDist == rhs.MaxDist &&
		lhs.MinDist == rhs.MinDist &&
		lhs.TargetKey == rhs.TargetKey &&
		lhs.AvoidCreaturesStrength == rhs.AvoidCreaturesStrength &&
		lhs.SpeedModifier == rhs.SpeedModifier &&
		lhs._2D == rhs._2D &&
		lhs.SucceedWhenInRange == rhs.SucceedWhenInRange;
	}
};

//Dependency: GcMechEffect
struct GcMechEffectTable
{
	NMS_GameComponents::GcMechEffect FootDust;
	NMS_GameComponents::GcMechEffect Jetpack;
	NMS_GameComponents::GcMechEffect JetpackLaunch;
	NMS_GameComponents::GcMechEffect JetpackLaunchGroundEffect;
	NMS_GameComponents::GcMechEffect LandingImpact;

	friend bool operator==(const GcMechEffectTable& lhs, const GcMechEffectTable& rhs) 
	{
		return lhs.FootDust == rhs.FootDust &&
		lhs.Jetpack == rhs.Jetpack &&
		lhs.JetpackLaunch == rhs.JetpackLaunch &&
		lhs.JetpackLaunchGroundEffect == rhs.JetpackLaunchGroundEffect &&
		lhs.LandingImpact == rhs.LandingImpact;
	}
};

struct GcRewardOpenPage
{
	enum class PageToOpenEnum : uint32_t
	{
		FreighterShipTransfer = 0,
		DisplayPortalUa = 1,
		ExpeditionSelect = 2,
		TraderInventory = 3,
		ExpeditionDetails = 4,
		ExpeditionDebrief = 5,
		BuildingPartsShop = 6,
		ExocraftShop = 7,
		NexusTechShop = 8,
		ScrapDealerShop = 9,
		BuyShip = 10,
		SettlementsOverview = 11,
		SettlementManagement = 12,
		SettlerNPCDetails = 13,
		SquadronManagement = 14,
		SquadronRecruitment = 15,
		FleetManagement = 16,
		WeaponCustomisation = 17,
		FoodUnit = 18,
		CookTrade = 19,
		ArchiveManagementShip = 20,
		BoneShop = 21,
	};

	NMS_GameComponents::GcRewardOpenPage::PageToOpenEnum PageToOpen;
	bool ReinteractWhenComplete;

	friend bool operator==(const GcRewardOpenPage& lhs, const GcRewardOpenPage& rhs) 
	{
		return lhs.PageToOpen == rhs.PageToOpen &&
		lhs.ReinteractWhenComplete == rhs.ReinteractWhenComplete;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForCompletionMessage
{
	NMS::NMSString0x20A MessageWhenInterstellar;
	NMS::NMSString0x20A ReturnToOptionalScanEvent;
	NMS::NMSString0x10 CompletionCost;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceWaitForCompletionMessage& lhs, const GcMissionSequenceWaitForCompletionMessage& rhs) 
	{
		return lhs.MessageWhenInterstellar == rhs.MessageWhenInterstellar &&
		lhs.ReturnToOptionalScanEvent == rhs.ReturnToOptionalScanEvent &&
		lhs.CompletionCost == rhs.CompletionCost &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcBehaviourMoveToTargetData
{
	enum class BehaviourMoveSpeedEnum : uint32_t
	{
		Normal = 0,
		Fast = 1,
		Dynamic = 2,
	};

	NMS_Toolkit::TkBlackboardDefaultValueFloat ArriveDist;
	NMS::NMSString0x10 TargetKey;
	float AvoidCreaturesStrength;
	NMS_GameComponents::GcBehaviourMoveToTargetData::BehaviourMoveSpeedEnum BehaviourMoveSpeed;
	float DynamicMoveSlowdownDistMul;
	float SpeedModifier;

	friend bool operator==(const GcBehaviourMoveToTargetData& lhs, const GcBehaviourMoveToTargetData& rhs) 
	{
		return lhs.ArriveDist == rhs.ArriveDist &&
		lhs.TargetKey == rhs.TargetKey &&
		lhs.AvoidCreaturesStrength == rhs.AvoidCreaturesStrength &&
		lhs.BehaviourMoveSpeed == rhs.BehaviourMoveSpeed &&
		lhs.DynamicMoveSlowdownDistMul == rhs.DynamicMoveSlowdownDistMul &&
		lhs.SpeedModifier == rhs.SpeedModifier;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: NMSString0x80
struct GcCustomisationDescriptorGroup
{
	NMS::NMSString0x20A Tip;
	NMS::NMSString0x20A Title;
	std::vector<NMS::NMSString0x20> Descriptors;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 LinkedSpecialID;
	std::vector<NMS::NMSString0x20> SuffixInclusionList;
	NMS::NMSString0x80 Image;
	bool HiddenInCustomiser;

	friend bool operator==(const GcCustomisationDescriptorGroup& lhs, const GcCustomisationDescriptorGroup& rhs) 
	{
		return lhs.Tip == rhs.Tip &&
		lhs.Title == rhs.Title &&
		lhs.Descriptors == rhs.Descriptors &&
		lhs.GroupID == rhs.GroupID &&
		lhs.LinkedSpecialID == rhs.LinkedSpecialID &&
		lhs.SuffixInclusionList == rhs.SuffixInclusionList &&
		lhs.Image == rhs.Image &&
		lhs.HiddenInCustomiser == rhs.HiddenInCustomiser;
	}
};

//Dependency: GcInventoryContainer
//Dependency: GcKnownThingsPreset
struct GcDifficultyStartWithAllItemsKnownOptionData
{
	NMS_GameComponents::GcInventoryContainer InitialShipInventory;
	NMS_GameComponents::GcInventoryContainer InitialWeaponInventory;
	NMS_GameComponents::GcKnownThingsPreset InitialKnownThings;

	friend bool operator==(const GcDifficultyStartWithAllItemsKnownOptionData& lhs, const GcDifficultyStartWithAllItemsKnownOptionData& rhs) 
	{
		return lhs.InitialShipInventory == rhs.InitialShipInventory &&
		lhs.InitialWeaponInventory == rhs.InitialWeaponInventory &&
		lhs.InitialKnownThings == rhs.InitialKnownThings;
	}
};

//Dependency: NMSString0x10
struct GcBehaviourRegisterAttackerData
{
	NMS::NMSString0x10 TargetKey;

	friend bool operator==(const GcBehaviourRegisterAttackerData& lhs, const GcBehaviourRegisterAttackerData& rhs) 
	{
		return lhs.TargetKey == rhs.TargetKey;
	}
};

struct GcProceduralProductCategory
{
	enum class ProceduralProductCategoryEnum : uint32_t
	{
		Loot = 0,
		Document = 1,
		BioSample = 2,
		Fossil = 3,
		Plant = 4,
		Tool = 5,
		Farm = 6,
		SeaLoot = 7,
		SeaHorror = 8,
		Salvage = 9,
		Bones = 10,
		SpaceHorror = 11,
		SpaceBones = 12,
		FreighterPassword = 13,
		FreighterCaptLog = 14,
		FreighterCrewList = 15,
		FreighterTechHyp = 16,
		FreighterTechSpeed = 17,
		FreighterTechFuel = 18,
		FreighterTechTrade = 19,
		FreighterTechCombat = 20,
		FreighterTechMine = 21,
		FreighterTechExp = 22,
		DismantleBio = 23,
		DismantleTech = 24,
		DismantleData = 25,
		MessageInBottle = 26,
		ExhibitFossil = 27,
	};

	NMS_GameComponents::GcProceduralProductCategory::ProceduralProductCategoryEnum ProceduralProductCategory;

	friend bool operator==(const GcProceduralProductCategory& lhs, const GcProceduralProductCategory& rhs) 
	{
		return lhs.ProceduralProductCategory == rhs.ProceduralProductCategory;
	}
};

//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJobGiftDetails
{
	NMS::NMSString0x20A GiftItemLoc;
	std::vector<NMS::NMSString0x10> PotentialGiftItems;
	int32_t GiftAmount;
	NMS_GameComponents::GcProceduralProductCategory ProcProductType;
	bool GiveProcProduct;
	bool GiveStanding;
	bool GiveWords;

	friend bool operator==(const GcSettlementJobGiftDetails& lhs, const GcSettlementJobGiftDetails& rhs) 
	{
		return lhs.GiftItemLoc == rhs.GiftItemLoc &&
		lhs.PotentialGiftItems == rhs.PotentialGiftItems &&
		lhs.GiftAmount == rhs.GiftAmount &&
		lhs.ProcProductType == rhs.ProcProductType &&
		lhs.GiveProcProduct == rhs.GiveProcProduct &&
		lhs.GiveStanding == rhs.GiveStanding &&
		lhs.GiveWords == rhs.GiveWords;
	}
};

//Dependency: GcSettlementJobGiftDetails
//Dependency: NMSString0x20A
//Dependency: GcSettlementStatType
struct GcSettlementJobDetails
{
	NMS_GameComponents::GcSettlementJobGiftDetails Gifts;
	NMS::NMSString0x20A InTextTitle;
	NMS::NMSString0x20A PerkTitle;
	NMS_GameComponents::GcSettlementStatType Stat;

	friend bool operator==(const GcSettlementJobDetails& lhs, const GcSettlementJobDetails& rhs) 
	{
		return lhs.Gifts == rhs.Gifts &&
		lhs.InTextTitle == rhs.InTextTitle &&
		lhs.PerkTitle == rhs.PerkTitle &&
		lhs.Stat == rhs.Stat;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcCreatureHarvestSubstanceList
{
	NMS::NMSString0x10 CreatureType;
	NMS::NMSString0x10 Item;
	int32_t MinBlobs;
	NMS::NMSString0x80 Desc;

	friend bool operator==(const GcCreatureHarvestSubstanceList& lhs, const GcCreatureHarvestSubstanceList& rhs) 
	{
		return lhs.CreatureType == rhs.CreatureType &&
		lhs.Item == rhs.Item &&
		lhs.MinBlobs == rhs.MinBlobs &&
		lhs.Desc == rhs.Desc;
	}
};

struct GcBehaviourWaitData
{
	float Seconds;

	friend bool operator==(const GcBehaviourWaitData& lhs, const GcBehaviourWaitData& rhs) 
	{
		return lhs.Seconds == rhs.Seconds;
	}
};

//Dependency: TkCurveType
struct GcCameraAerialViewData
{
	enum class AerialViewModeEnum : uint32_t
	{
		FaceDown = 0,
		FaceOut = 1,
		FaceDownThenOut = 2,
		FaceDownThenFocus = 3,
	};

	NMS_GameComponents::GcCameraAerialViewData::AerialViewModeEnum AerialViewMode;
	float Distance;
	float FocusTargetOffsetDistance;
	float LookTime;
	float PauseTime;
	float SpeedLineDist;
	float StartTime;
	float TargetOffsetAngle;
	float Time;
	float TimeBack;
	NMS_Toolkit::TkCurveType Curve;
	NMS_Toolkit::TkCurveType CurveDown;
	bool IgnoreDistanceRestrictions;
	NMS_Toolkit::TkCurveType SlerpCurve;

	friend bool operator==(const GcCameraAerialViewData& lhs, const GcCameraAerialViewData& rhs) 
	{
		return lhs.AerialViewMode == rhs.AerialViewMode &&
		lhs.Distance == rhs.Distance &&
		lhs.FocusTargetOffsetDistance == rhs.FocusTargetOffsetDistance &&
		lhs.LookTime == rhs.LookTime &&
		lhs.PauseTime == rhs.PauseTime &&
		lhs.SpeedLineDist == rhs.SpeedLineDist &&
		lhs.StartTime == rhs.StartTime &&
		lhs.TargetOffsetAngle == rhs.TargetOffsetAngle &&
		lhs.Time == rhs.Time &&
		lhs.TimeBack == rhs.TimeBack &&
		lhs.Curve == rhs.Curve &&
		lhs.CurveDown == rhs.CurveDown &&
		lhs.IgnoreDistanceRestrictions == rhs.IgnoreDistanceRestrictions &&
		lhs.SlerpCurve == rhs.SlerpCurve;
	}
};

//Dependency: GcCameraAerialViewData
//Dependency: NMSString0x10
struct GcCameraAerialViewDataTableEntry
{
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcCameraAerialViewData CameraAerialViewData;

	friend bool operator==(const GcCameraAerialViewDataTableEntry& lhs, const GcCameraAerialViewDataTableEntry& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.CameraAerialViewData == rhs.CameraAerialViewData;
	}
};

//Dependency: Colour
struct GcBiomeCloudSettings
{
	NMS::Colour StormCloudBottomColour;
	NMS::Colour StormCloudTopColour;
	float MaxCover;
	float MaxCoverage;
	float MaxCoverageVariance;
	float MaxRateOfChange;
	float MaxRatio;
	float MaxVariance;
	float MinCover;
	float MinCoverage;
	float MinCoverageVariance;
	float MinRateOfChange;
	float MinRatio;
	float MinVariance;
	float TendencyTowardsBeingCloudy;

	friend bool operator==(const GcBiomeCloudSettings& lhs, const GcBiomeCloudSettings& rhs) 
	{
		return lhs.StormCloudBottomColour == rhs.StormCloudBottomColour &&
		lhs.StormCloudTopColour == rhs.StormCloudTopColour &&
		lhs.MaxCover == rhs.MaxCover &&
		lhs.MaxCoverage == rhs.MaxCoverage &&
		lhs.MaxCoverageVariance == rhs.MaxCoverageVariance &&
		lhs.MaxRateOfChange == rhs.MaxRateOfChange &&
		lhs.MaxRatio == rhs.MaxRatio &&
		lhs.MaxVariance == rhs.MaxVariance &&
		lhs.MinCover == rhs.MinCover &&
		lhs.MinCoverage == rhs.MinCoverage &&
		lhs.MinCoverageVariance == rhs.MinCoverageVariance &&
		lhs.MinRateOfChange == rhs.MinRateOfChange &&
		lhs.MinRatio == rhs.MinRatio &&
		lhs.MinVariance == rhs.MinVariance &&
		lhs.TendencyTowardsBeingCloudy == rhs.TendencyTowardsBeingCloudy;
	}
};

struct GcFonts
{
	enum class FontTypeEnum : uint32_t
	{
		Body = 0,
		Title = 1,
		Console1 = 2,
		Console2 = 3,
	};

	NMS_GameComponents::GcFonts::FontTypeEnum FontType;

	friend bool operator==(const GcFonts& lhs, const GcFonts& rhs) 
	{
		return lhs.FontType == rhs.FontType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: TkTextureResource
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcMultiplayerGlobals
{
	NMS_Toolkit::TkTextureResource EpicMissionIcon;
	NMS_Toolkit::TkTextureResource EpicMissionIconNotSelected;
	NMS_Toolkit::TkTextureResource EpicMissionIconSelected;
	NMS::NMSString0x10 EpicMissionRewardOverride;
	NMS::NMSString0x10 EpicMissionSecondReward;
	NMS::NMSString0x10 NexusMissionStandardReward;
	NMS::NMSString0x10 QuicksilverMissionSecondReward;
	NMS::NMSString0x10 StandardMissionSecondReward;
	NMS::NMSString0x10 WeekendMissionSecondReward;
	uint64_t AbandonedEntityWaitPeriod;
	NMS::Vector2f FullSimHandUpdateDistance;
	NMS::Vector2f FullSimHandUpdateInterval;
	float BaseHeaderBroadcastInterval;
	float BlobHeightOffset;
	float ChanceMissionEpic;
	float CharacterDirectionLerpModifier;
	float ConstantScoreDepletionRate;
	float DisconnectionDisplayTime;
	float DistanceBetweenTeleportMovementEffects;
	float EditMessageInterval;
	float EditMessageReceivedSyncBackOffTime;
	float EditMessageSentSyncBackOffTime;
	float EntityUpdateMaxRateDist;
	float EntityUpdateMinRateDist;
	float FactorScoreDepletionRate;
	float FullSimHandUpdateDisabledDistance;
	float FullSimUpdateInterval;
	float HashCheckMessageInterval;
	float HashCheckMessageOverdueDistanceDivisor;
	int32_t HashMessageSentCooldown;
	int32_t HashReceivedCooldown;
	float HostBiasScore;
	float HostOnConnectedTimeout;
	float InviteInteractionTimeout;
	float JoinInteractionTimeout;
	int32_t MaxDownloadableBases;
	int32_t MaxSyncResponsesPerHash;
	int32_t MessageQueueSize;
	int32_t MessageQueueSizeDropUnreliable;
	float MinScore;
	int32_t MissionRecurrenceTime;
	float MissionWaitOnceAllPlayersReadyTime;
	float NewBlockMessageInterval;
	float NewBlockMessageOverdueDistanceDivisor;
	int32_t NewBlockMessageSentCooldown;
	int32_t NewerHashReceivedCooldown;
	float NPCInteractionTimeout;
	float NPCReplicateEndDistance;
	float NPCReplicateStartDistance;
	float PlaceholderBroadcastInterval;
	float PlanetLocalEnitityInterestEnd;
	float PlanetLocalEnitityInterestStart;
	float PlayerInteractCooldown;
	float PlayerMarkerDisplayDistance;
	float PlayerMarkerLargeIconCloseSize;
	float PlayerMarkerLargeIconDist;
	float PlayerMarkerLargeIconFarSize;
	float PlayerMarkerMinShowDistance;
	float PlayerMarkerScreenOffsetY;
	float PlayerMarkerSmallIconSize;
	float RemoveDuplicateChatMessageTime;
	float ShipDirectionLerpModifier;
	float ShipLandShakeMaxDist;
	float ShipSyncConvervengeMultiplier;
	float StatSyncRadiusPlanet;
	float StatSyncRadiusSpace;
	float SyncMessageInterval;
	int32_t TransactionTimeout;
	float UpdateSlerpModifier;
	int32_t UsefulSyncResponseCooldown;
	float UsefulSyncResponseScore;
	int32_t UselessSyncResponseCooldown;
	float UselessSyncResponseScore;
	float VehicleStickLerpModifier;
	float VehicleThrottleLerpModifier;
	bool PlayerMarkerCenteredName;
	bool VoiceChatEnabled;

	friend bool operator==(const GcMultiplayerGlobals& lhs, const GcMultiplayerGlobals& rhs) 
	{
		return lhs.EpicMissionIcon == rhs.EpicMissionIcon &&
		lhs.EpicMissionIconNotSelected == rhs.EpicMissionIconNotSelected &&
		lhs.EpicMissionIconSelected == rhs.EpicMissionIconSelected &&
		lhs.EpicMissionRewardOverride == rhs.EpicMissionRewardOverride &&
		lhs.EpicMissionSecondReward == rhs.EpicMissionSecondReward &&
		lhs.NexusMissionStandardReward == rhs.NexusMissionStandardReward &&
		lhs.QuicksilverMissionSecondReward == rhs.QuicksilverMissionSecondReward &&
		lhs.StandardMissionSecondReward == rhs.StandardMissionSecondReward &&
		lhs.WeekendMissionSecondReward == rhs.WeekendMissionSecondReward &&
		lhs.AbandonedEntityWaitPeriod == rhs.AbandonedEntityWaitPeriod &&
		lhs.FullSimHandUpdateDistance == rhs.FullSimHandUpdateDistance &&
		lhs.FullSimHandUpdateInterval == rhs.FullSimHandUpdateInterval &&
		lhs.BaseHeaderBroadcastInterval == rhs.BaseHeaderBroadcastInterval &&
		lhs.BlobHeightOffset == rhs.BlobHeightOffset &&
		lhs.ChanceMissionEpic == rhs.ChanceMissionEpic &&
		lhs.CharacterDirectionLerpModifier == rhs.CharacterDirectionLerpModifier &&
		lhs.ConstantScoreDepletionRate == rhs.ConstantScoreDepletionRate &&
		lhs.DisconnectionDisplayTime == rhs.DisconnectionDisplayTime &&
		lhs.DistanceBetweenTeleportMovementEffects == rhs.DistanceBetweenTeleportMovementEffects &&
		lhs.EditMessageInterval == rhs.EditMessageInterval &&
		lhs.EditMessageReceivedSyncBackOffTime == rhs.EditMessageReceivedSyncBackOffTime &&
		lhs.EditMessageSentSyncBackOffTime == rhs.EditMessageSentSyncBackOffTime &&
		lhs.EntityUpdateMaxRateDist == rhs.EntityUpdateMaxRateDist &&
		lhs.EntityUpdateMinRateDist == rhs.EntityUpdateMinRateDist &&
		lhs.FactorScoreDepletionRate == rhs.FactorScoreDepletionRate &&
		lhs.FullSimHandUpdateDisabledDistance == rhs.FullSimHandUpdateDisabledDistance &&
		lhs.FullSimUpdateInterval == rhs.FullSimUpdateInterval &&
		lhs.HashCheckMessageInterval == rhs.HashCheckMessageInterval &&
		lhs.HashCheckMessageOverdueDistanceDivisor == rhs.HashCheckMessageOverdueDistanceDivisor &&
		lhs.HashMessageSentCooldown == rhs.HashMessageSentCooldown &&
		lhs.HashReceivedCooldown == rhs.HashReceivedCooldown &&
		lhs.HostBiasScore == rhs.HostBiasScore &&
		lhs.HostOnConnectedTimeout == rhs.HostOnConnectedTimeout &&
		lhs.InviteInteractionTimeout == rhs.InviteInteractionTimeout &&
		lhs.JoinInteractionTimeout == rhs.JoinInteractionTimeout &&
		lhs.MaxDownloadableBases == rhs.MaxDownloadableBases &&
		lhs.MaxSyncResponsesPerHash == rhs.MaxSyncResponsesPerHash &&
		lhs.MessageQueueSize == rhs.MessageQueueSize &&
		lhs.MessageQueueSizeDropUnreliable == rhs.MessageQueueSizeDropUnreliable &&
		lhs.MinScore == rhs.MinScore &&
		lhs.MissionRecurrenceTime == rhs.MissionRecurrenceTime &&
		lhs.MissionWaitOnceAllPlayersReadyTime == rhs.MissionWaitOnceAllPlayersReadyTime &&
		lhs.NewBlockMessageInterval == rhs.NewBlockMessageInterval &&
		lhs.NewBlockMessageOverdueDistanceDivisor == rhs.NewBlockMessageOverdueDistanceDivisor &&
		lhs.NewBlockMessageSentCooldown == rhs.NewBlockMessageSentCooldown &&
		lhs.NewerHashReceivedCooldown == rhs.NewerHashReceivedCooldown &&
		lhs.NPCInteractionTimeout == rhs.NPCInteractionTimeout &&
		lhs.NPCReplicateEndDistance == rhs.NPCReplicateEndDistance &&
		lhs.NPCReplicateStartDistance == rhs.NPCReplicateStartDistance &&
		lhs.PlaceholderBroadcastInterval == rhs.PlaceholderBroadcastInterval &&
		lhs.PlanetLocalEnitityInterestEnd == rhs.PlanetLocalEnitityInterestEnd &&
		lhs.PlanetLocalEnitityInterestStart == rhs.PlanetLocalEnitityInterestStart &&
		lhs.PlayerInteractCooldown == rhs.PlayerInteractCooldown &&
		lhs.PlayerMarkerDisplayDistance == rhs.PlayerMarkerDisplayDistance &&
		lhs.PlayerMarkerLargeIconCloseSize == rhs.PlayerMarkerLargeIconCloseSize &&
		lhs.PlayerMarkerLargeIconDist == rhs.PlayerMarkerLargeIconDist &&
		lhs.PlayerMarkerLargeIconFarSize == rhs.PlayerMarkerLargeIconFarSize &&
		lhs.PlayerMarkerMinShowDistance == rhs.PlayerMarkerMinShowDistance &&
		lhs.PlayerMarkerScreenOffsetY == rhs.PlayerMarkerScreenOffsetY &&
		lhs.PlayerMarkerSmallIconSize == rhs.PlayerMarkerSmallIconSize &&
		lhs.RemoveDuplicateChatMessageTime == rhs.RemoveDuplicateChatMessageTime &&
		lhs.ShipDirectionLerpModifier == rhs.ShipDirectionLerpModifier &&
		lhs.ShipLandShakeMaxDist == rhs.ShipLandShakeMaxDist &&
		lhs.ShipSyncConvervengeMultiplier == rhs.ShipSyncConvervengeMultiplier &&
		lhs.StatSyncRadiusPlanet == rhs.StatSyncRadiusPlanet &&
		lhs.StatSyncRadiusSpace == rhs.StatSyncRadiusSpace &&
		lhs.SyncMessageInterval == rhs.SyncMessageInterval &&
		lhs.TransactionTimeout == rhs.TransactionTimeout &&
		lhs.UpdateSlerpModifier == rhs.UpdateSlerpModifier &&
		lhs.UsefulSyncResponseCooldown == rhs.UsefulSyncResponseCooldown &&
		lhs.UsefulSyncResponseScore == rhs.UsefulSyncResponseScore &&
		lhs.UselessSyncResponseCooldown == rhs.UselessSyncResponseCooldown &&
		lhs.UselessSyncResponseScore == rhs.UselessSyncResponseScore &&
		lhs.VehicleStickLerpModifier == rhs.VehicleStickLerpModifier &&
		lhs.VehicleThrottleLerpModifier == rhs.VehicleThrottleLerpModifier &&
		lhs.PlayerMarkerCenteredName == rhs.PlayerMarkerCenteredName &&
		lhs.VoiceChatEnabled == rhs.VoiceChatEnabled;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcBiomeType
struct GcBiomeCondition
{
	NMS_GameComponents::GcBiomeType BiomeType;

	friend bool operator==(const GcBiomeCondition& lhs, const GcBiomeCondition& rhs) 
	{
		return lhs.BiomeType == rhs.BiomeType;
	}
};

struct GcMessageSummonAndDismiss
{
	enum class SummonEventTypeEnum : uint32_t
	{
		Summon = 0,
		Dismiss = 1,
	};

	NMS_GameComponents::GcMessageSummonAndDismiss::SummonEventTypeEnum SummonEventType;

	friend bool operator==(const GcMessageSummonAndDismiss& lhs, const GcMessageSummonAndDismiss& rhs) 
	{
		return lhs.SummonEventType == rhs.SummonEventType;
	}
};

//Dependency: GcMissionFaction
struct GcFactionSelectOptions
{
	enum class FactionOptionEnum : uint32_t
	{
		DataDefined = 0,
		CurrentMission = 1,
		CurrentSystem = 2,
	};

	NMS_GameComponents::GcMissionFaction Faction;
	NMS_GameComponents::GcFactionSelectOptions::FactionOptionEnum FactionOption;

	friend bool operator==(const GcFactionSelectOptions& lhs, const GcFactionSelectOptions& rhs) 
	{
		return lhs.Faction == rhs.Faction &&
		lhs.FactionOption == rhs.FactionOption;
	}
};

//Dependency: GcDate
//Dependency: NMSString0x10
struct GcMissionSchedulingData
{
	std::vector<NMS::NMSString0x10> MissionIDs;
	NMSTemplate RecurrenceType;
	uint64_t EarlyEndOffset;
	NMS_GameComponents::GcDate EndDate;
	NMS_GameComponents::GcDate StartDate;
	bool HasEndDate;
	bool IndependentStart;

	friend bool operator==(const GcMissionSchedulingData& lhs, const GcMissionSchedulingData& rhs) 
	{
		return lhs.MissionIDs == rhs.MissionIDs &&
		lhs.RecurrenceType == rhs.RecurrenceType &&
		lhs.EarlyEndOffset == rhs.EarlyEndOffset &&
		lhs.EndDate == rhs.EndDate &&
		lhs.StartDate == rhs.StartDate &&
		lhs.HasEndDate == rhs.HasEndDate &&
		lhs.IndependentStart == rhs.IndependentStart;
	}
};

struct GcRealitySubstanceCategory
{
	enum class SubstanceCategoryEnum : uint32_t
	{
		Fuel = 0,
		Metal = 1,
		Catalyst = 2,
		Stellar = 3,
		Flora = 4,
		Earth = 5,
		Exotic = 6,
		Special = 7,
		BuildingPart = 8,
	};

	NMS_GameComponents::GcRealitySubstanceCategory::SubstanceCategoryEnum SubstanceCategory;

	friend bool operator==(const GcRealitySubstanceCategory& lhs, const GcRealitySubstanceCategory& rhs) 
	{
		return lhs.SubstanceCategory == rhs.SubstanceCategory;
	}
};

//Dependency: GcRarity
//Dependency: GcRealitySubstanceCategory
struct GcMiningSubstanceData
{
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcRealitySubstanceCategory SubstanceCategory;
	bool UseRarity;

	friend bool operator==(const GcMiningSubstanceData& lhs, const GcMiningSubstanceData& rhs) 
	{
		return lhs.Rarity == rhs.Rarity &&
		lhs.SubstanceCategory == rhs.SubstanceCategory &&
		lhs.UseRarity == rhs.UseRarity;
	}
};

struct GcWaterEmissionBehaviourType
{
	enum class WaterEmissionBehaviourTypeEnum : uint32_t
	{
		None = 0,
		Constant = 1,
		Pulse = 2,
		NightOnly = 3,
	};

	NMS_GameComponents::GcWaterEmissionBehaviourType::WaterEmissionBehaviourTypeEnum WaterEmissionBehaviourType;

	friend bool operator==(const GcWaterEmissionBehaviourType& lhs, const GcWaterEmissionBehaviourType& rhs) 
	{
		return lhs.WaterEmissionBehaviourType == rhs.WaterEmissionBehaviourType;
	}
};

//Dependency: GcWaterEmissionBehaviourType
struct GcPlanetWaterData
{
	int32_t ColourIndex;
	NMS_GameComponents::GcWaterEmissionBehaviourType FoamEmission;
	float Murkyness;
	NMS_GameComponents::GcWaterEmissionBehaviourType WaterEmission;

	friend bool operator==(const GcPlanetWaterData& lhs, const GcPlanetWaterData& rhs) 
	{
		return lhs.ColourIndex == rhs.ColourIndex &&
		lhs.FoamEmission == rhs.FoamEmission &&
		lhs.Murkyness == rhs.Murkyness &&
		lhs.WaterEmission == rhs.WaterEmission;
	}
};

struct GcScreenFilters
{
	enum class ScreenFilterEnum : uint32_t
	{
		Default = 0,
		DefaultStorm = 1,
		Frozen = 2,
		FrozenStorm = 3,
		Toxic = 4,
		ToxicStorm = 5,
		Radioactive = 6,
		RadioactiveStorm = 7,
		Scorched = 8,
		ScorchedStorm = 9,
		Barren = 10,
		BarrenStorm = 11,
		Weird1 = 12,
		Weird2 = 13,
		Weird3 = 14,
		Weird4 = 15,
		Weird5 = 16,
		Weird6 = 17,
		Weird7 = 18,
		Weird8 = 19,
		Vintage = 20,
		HyperReal = 21,
		Desaturated = 22,
		Amber = 23,
		GBGreen = 24,
		Apocalypse = 25,
		Diffusion = 26,
		Green = 27,
		BlackAndWhite = 28,
		Isolation = 29,
		Sepia = 30,
		Filmic = 31,
		GBGrey = 32,
		Binoculars = 33,
		Surveying = 34,
		Nexus = 35,
		SpaceStation = 36,
		Freighter = 37,
		FreighterAbandoned = 38,
		Frigate = 39,
		MissionSurvey = 40,
		NewVibrant = 41,
		NewVibrantBright = 42,
		NewVibrantWarm = 43,
		NewVintageBright = 44,
		NewVintageWash = 45,
		Drama = 46,
		MemoryBold = 47,
		Memory = 48,
		MemoryWash = 49,
		Autumn = 50,
		AutumnFade = 51,
		ClassicBright = 52,
		Classic = 53,
		ClassicWash = 54,
		BlackAndWhiteDream = 55,
		ColourTouchB = 56,
		ColourTouchC = 57,
		NegativePrint = 58,
		SepiaExtreme = 59,
		Solarise = 60,
		TwoToneStrong = 61,
		TwoTone = 62,
		Dramatic = 63,
		Fuchsia = 64,
		Violet = 65,
		Cyan = 66,
		GreenNew = 67,
		AmberNew = 68,
		Red = 69,
		HueShiftA = 70,
		HueShiftB = 71,
		HueShiftC = 72,
		HueShiftD = 73,
		WarmStripe = 74,
		NMSRetroA = 75,
		NMSRetroB = 76,
		NMSRetroC = 77,
		NMSRetroD = 78,
		NMSRetroE = 79,
		NMSRetroF = 80,
		NMSRetroG = 81,
		CorruptSentinels = 82,
		DeepWater = 83,
	};

	NMS_GameComponents::GcScreenFilters::ScreenFilterEnum ScreenFilter;

	friend bool operator==(const GcScreenFilters& lhs, const GcScreenFilters& rhs) 
	{
		return lhs.ScreenFilter == rhs.ScreenFilter;
	}
};

//Dependency: GcScreenFilters
struct GcScreenFilterOption
{
	NMS_GameComponents::GcScreenFilters Filter;
	float Weight;

	friend bool operator==(const GcScreenFilterOption& lhs, const GcScreenFilterOption& rhs) 
	{
		return lhs.Filter == rhs.Filter &&
		lhs.Weight == rhs.Weight;
	}
};

struct GcWeatherWeightings
{
	float WeatherWeightings[17];

	friend bool operator==(const GcWeatherWeightings& lhs, const GcWeatherWeightings& rhs) 
	{
		return std::equal(std::begin(lhs.WeatherWeightings), std::end(lhs.WeatherWeightings), std::begin(rhs.WeatherWeightings));
	}
};

//Dependency: GcMiningSubstanceData
//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeCloudSettings
//Dependency: GcPlanetWaterData
//Dependency: GcScreenFilterOption
//Dependency: GcWeatherWeightings
//Dependency: GcTerrainControls
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcBiomeData
{
	NMS_GameComponents::GcBiomeCloudSettings CloudSettings;
	NMS::NMSString0x20A FloraLifeLocID;
	NMS::VariableSizeString ColourPaletteFile;
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectLists;
	std::vector<NMS_GameComponents::GcScreenFilterOption> FilterOptions;
	NMS::VariableSizeString LegacyColourPaletteFile;
	NMS::VariableSizeString OverlayFile;
	NMS::VariableSizeString TextureFile;
	NMS::VariableSizeString TileTypesFile;
	NMS_GameComponents::GcWeatherWeightings WeatherOptions[5];
	NMS_GameComponents::GcTerrainControls Terrain;
	NMS_GameComponents::GcPlanetWaterData Water;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance1;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance2;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance3;
	NMS::Vector2f WeatherChangeTime;
	float DarknessVariation;
	float FuelMultiplier;

	friend bool operator==(const GcBiomeData& lhs, const GcBiomeData& rhs) 
	{
		return lhs.CloudSettings == rhs.CloudSettings &&
		lhs.FloraLifeLocID == rhs.FloraLifeLocID &&
		lhs.ColourPaletteFile == rhs.ColourPaletteFile &&
		lhs.ExternalObjectLists == rhs.ExternalObjectLists &&
		lhs.FilterOptions == rhs.FilterOptions &&
		lhs.LegacyColourPaletteFile == rhs.LegacyColourPaletteFile &&
		lhs.OverlayFile == rhs.OverlayFile &&
		lhs.TextureFile == rhs.TextureFile &&
		lhs.TileTypesFile == rhs.TileTypesFile &&
		std::equal(std::begin(lhs.WeatherOptions), std::end(lhs.WeatherOptions), std::begin(rhs.WeatherOptions)) &&
		lhs.Terrain == rhs.Terrain &&
		lhs.Water == rhs.Water &&
		lhs.MiningSubstance1 == rhs.MiningSubstance1 &&
		lhs.MiningSubstance2 == rhs.MiningSubstance2 &&
		lhs.MiningSubstance3 == rhs.MiningSubstance3 &&
		lhs.WeatherChangeTime == rhs.WeatherChangeTime &&
		lhs.DarknessVariation == rhs.DarknessVariation &&
		lhs.FuelMultiplier == rhs.FuelMultiplier;
	}
};

struct GcGyroSettingsData
{
	enum class YawAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class RollAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class PitchAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class LookStickEnabledEnum : uint32_t
	{
		None = 0,
		Disabled = 1,
		Enabled = 2,
	};

	enum class HandednessEnum : uint32_t
	{
		Left = 0,
		Right = 1,
	};

	enum class GyroRotationSpaceHandheldEnum : uint32_t
	{
		Local = 0,
		Player = 1,
	};

	enum class GyroRotationSpaceEnum : uint32_t
	{
		Local = 0,
		Player = 1,
	};

	enum class EnableGyroInBuildingFreeCamEnum : uint32_t
	{
		Never = 0,
		MatchActiveModeWhenBuilding = 1,
		Always = 2,
	};

	enum class CursorLookStickEnabledEnum : uint32_t
	{
		None = 0,
		Disabled = 1,
	};

	enum class ActiveModeWhenBuildingEnum : uint32_t
	{
		None = 0,
		BuildPlacementOnly = 1,
		SelectionModeOnly = 2,
		Always = 3,
	};

	enum class ActiveModeOnFootEnum : uint32_t
	{
		None = 0,
		ScopeOnly = 1,
		ScopeOrFiring = 2,
		Always = 3,
	};

	enum class ActiveModeInExocraftEnum : uint32_t
	{
		None = 0,
		Firing = 1,
		Always = 2,
	};

	float Acceleration;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeInExocraftEnum ActiveModeInExocraft;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeOnFootEnum ActiveModeOnFoot;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeWhenBuildingEnum ActiveModeWhenBuilding;
	float AimingMultiplier;
	float BuildingMultiplier;
	NMS_GameComponents::GcGyroSettingsData::CursorLookStickEnabledEnum CursorLookStickEnabled;
	float CursorSensitivityX;
	float CursorSensitivityY;
	float CursorTighteningThreshold;
	float Deadzone;
	NMS_GameComponents::GcGyroSettingsData::EnableGyroInBuildingFreeCamEnum EnableGyroInBuildingFreeCam;
	float ExocraftMultiplier;
	NMS_GameComponents::GcGyroSettingsData::GyroRotationSpaceEnum GyroRotationSpace;
	NMS_GameComponents::GcGyroSettingsData::GyroRotationSpaceHandheldEnum GyroRotationSpaceHandheld;
	NMS_GameComponents::GcGyroSettingsData::HandednessEnum Handedness;
	NMS_GameComponents::GcGyroSettingsData::LookStickEnabledEnum LookStickEnabled;
	NMS_GameComponents::GcGyroSettingsData::PitchAxisDirectionEnum PitchAxisDirection;
	NMS_GameComponents::GcGyroSettingsData::RollAxisDirectionEnum RollAxisDirection;
	float ScopeMultiplier;
	float SensitivityX;
	float SensitivityY;
	float SmoothingThreshold;
	float SmoothingWindow;
	float Steadying;
	float TighteningThreshold;
	NMS_GameComponents::GcGyroSettingsData::YawAxisDirectionEnum YawAxisDirection;
	bool AllowWhenRidingCreatures;
	bool EnableAdvancedOptions;
	bool FilterControllerVibrations;
	bool GyroCursorEnabled;
	bool GyroEnabled;
	bool GyroEnabledHandheld;
	bool ZoomScalesSensitivity;

	friend bool operator==(const GcGyroSettingsData& lhs, const GcGyroSettingsData& rhs) 
	{
		return lhs.Acceleration == rhs.Acceleration &&
		lhs.ActiveModeInExocraft == rhs.ActiveModeInExocraft &&
		lhs.ActiveModeOnFoot == rhs.ActiveModeOnFoot &&
		lhs.ActiveModeWhenBuilding == rhs.ActiveModeWhenBuilding &&
		lhs.AimingMultiplier == rhs.AimingMultiplier &&
		lhs.BuildingMultiplier == rhs.BuildingMultiplier &&
		lhs.CursorLookStickEnabled == rhs.CursorLookStickEnabled &&
		lhs.CursorSensitivityX == rhs.CursorSensitivityX &&
		lhs.CursorSensitivityY == rhs.CursorSensitivityY &&
		lhs.CursorTighteningThreshold == rhs.CursorTighteningThreshold &&
		lhs.Deadzone == rhs.Deadzone &&
		lhs.EnableGyroInBuildingFreeCam == rhs.EnableGyroInBuildingFreeCam &&
		lhs.ExocraftMultiplier == rhs.ExocraftMultiplier &&
		lhs.GyroRotationSpace == rhs.GyroRotationSpace &&
		lhs.GyroRotationSpaceHandheld == rhs.GyroRotationSpaceHandheld &&
		lhs.Handedness == rhs.Handedness &&
		lhs.LookStickEnabled == rhs.LookStickEnabled &&
		lhs.PitchAxisDirection == rhs.PitchAxisDirection &&
		lhs.RollAxisDirection == rhs.RollAxisDirection &&
		lhs.ScopeMultiplier == rhs.ScopeMultiplier &&
		lhs.SensitivityX == rhs.SensitivityX &&
		lhs.SensitivityY == rhs.SensitivityY &&
		lhs.SmoothingThreshold == rhs.SmoothingThreshold &&
		lhs.SmoothingWindow == rhs.SmoothingWindow &&
		lhs.Steadying == rhs.Steadying &&
		lhs.TighteningThreshold == rhs.TighteningThreshold &&
		lhs.YawAxisDirection == rhs.YawAxisDirection &&
		lhs.AllowWhenRidingCreatures == rhs.AllowWhenRidingCreatures &&
		lhs.EnableAdvancedOptions == rhs.EnableAdvancedOptions &&
		lhs.FilterControllerVibrations == rhs.FilterControllerVibrations &&
		lhs.GyroCursorEnabled == rhs.GyroCursorEnabled &&
		lhs.GyroEnabled == rhs.GyroEnabled &&
		lhs.GyroEnabledHandheld == rhs.GyroEnabledHandheld &&
		lhs.ZoomScalesSensitivity == rhs.ZoomScalesSensitivity;
	}
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcCreatureJellyBossAttackData
{
	NMS::NMSString0x10 BroodSpawnID;
	NMS::NMSString0x10 OrbAttackProjectile;
	NMS::Vector2f OrbAttackCooldownRange;
	NMS::Vector2f SpawnBroodCooldownRange;
	float DelayBetweenOrbAttacks;
	float FadeInTime;
	int32_t MaxBroodCountPreventSpawn;
	float MaxIdleRange;
	float MinIdleRange;
	float MinWaterDepth;
	int32_t OrbAttackCount;
	float OrbAttackExplosionRadius;
	float OrbAttackLaunchSpeed;
	float OrbAttackPauseTime;
	float OrbAttackPickWeight;
	int32_t OrbAttackProjectileCount;
	int32_t SpawnBroodCount;
	float SpawnBroodPauseTime;
	float SpawnBroodPickWeight;
	bool CanOrbAttack;
	bool CanSpawnBrood;
	bool ExplodeOnPlayer;
	bool IsSpooky;

	friend bool operator==(const GcCreatureJellyBossAttackData& lhs, const GcCreatureJellyBossAttackData& rhs) 
	{
		return lhs.BroodSpawnID == rhs.BroodSpawnID &&
		lhs.OrbAttackProjectile == rhs.OrbAttackProjectile &&
		lhs.OrbAttackCooldownRange == rhs.OrbAttackCooldownRange &&
		lhs.SpawnBroodCooldownRange == rhs.SpawnBroodCooldownRange &&
		lhs.DelayBetweenOrbAttacks == rhs.DelayBetweenOrbAttacks &&
		lhs.FadeInTime == rhs.FadeInTime &&
		lhs.MaxBroodCountPreventSpawn == rhs.MaxBroodCountPreventSpawn &&
		lhs.MaxIdleRange == rhs.MaxIdleRange &&
		lhs.MinIdleRange == rhs.MinIdleRange &&
		lhs.MinWaterDepth == rhs.MinWaterDepth &&
		lhs.OrbAttackCount == rhs.OrbAttackCount &&
		lhs.OrbAttackExplosionRadius == rhs.OrbAttackExplosionRadius &&
		lhs.OrbAttackLaunchSpeed == rhs.OrbAttackLaunchSpeed &&
		lhs.OrbAttackPauseTime == rhs.OrbAttackPauseTime &&
		lhs.OrbAttackPickWeight == rhs.OrbAttackPickWeight &&
		lhs.OrbAttackProjectileCount == rhs.OrbAttackProjectileCount &&
		lhs.SpawnBroodCount == rhs.SpawnBroodCount &&
		lhs.SpawnBroodPauseTime == rhs.SpawnBroodPauseTime &&
		lhs.SpawnBroodPickWeight == rhs.SpawnBroodPickWeight &&
		lhs.CanOrbAttack == rhs.CanOrbAttack &&
		lhs.CanSpawnBrood == rhs.CanSpawnBrood &&
		lhs.ExplodeOnPlayer == rhs.ExplodeOnPlayer &&
		lhs.IsSpooky == rhs.IsSpooky;
	}
};

//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcExternalObjectFileList
{
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectFiles;
	std::vector<int32_t> ForceOnDuringSeasons;
	NMS::NMSString0x10 Id;
	float SubBiomeProbability[32];
	int32_t MaxFilesToChoose;
	int32_t MinFilesToChoose;
	NMS_GameComponents::GcBiomeType OnlyOnBiome;
	float ProbabilityOfBeingActive;
	bool ForceOnSeasonStart;
	bool NotOnDeadPlanets;
	bool NotOnExtremePlanets;
	bool NotOnGasGiant;
	bool NotOnInfested;
	bool NotOnStartPlanets;
	bool NotOnWeirdPlanets;
	bool OnlyOnCorruptSentinels;
	bool OnlyOnDeepWater;
	bool OnlyOnExtremeSentinels;
	bool OnlyOnExtremeWeather;
	bool OnlyOnInfested;

	friend bool operator==(const GcExternalObjectFileList& lhs, const GcExternalObjectFileList& rhs) 
	{
		return lhs.ExternalObjectFiles == rhs.ExternalObjectFiles &&
		lhs.ForceOnDuringSeasons == rhs.ForceOnDuringSeasons &&
		lhs.Id == rhs.Id &&
		std::equal(std::begin(lhs.SubBiomeProbability), std::end(lhs.SubBiomeProbability), std::begin(rhs.SubBiomeProbability)) &&
		lhs.MaxFilesToChoose == rhs.MaxFilesToChoose &&
		lhs.MinFilesToChoose == rhs.MinFilesToChoose &&
		lhs.OnlyOnBiome == rhs.OnlyOnBiome &&
		lhs.ProbabilityOfBeingActive == rhs.ProbabilityOfBeingActive &&
		lhs.ForceOnSeasonStart == rhs.ForceOnSeasonStart &&
		lhs.NotOnDeadPlanets == rhs.NotOnDeadPlanets &&
		lhs.NotOnExtremePlanets == rhs.NotOnExtremePlanets &&
		lhs.NotOnGasGiant == rhs.NotOnGasGiant &&
		lhs.NotOnInfested == rhs.NotOnInfested &&
		lhs.NotOnStartPlanets == rhs.NotOnStartPlanets &&
		lhs.NotOnWeirdPlanets == rhs.NotOnWeirdPlanets &&
		lhs.OnlyOnCorruptSentinels == rhs.OnlyOnCorruptSentinels &&
		lhs.OnlyOnDeepWater == rhs.OnlyOnDeepWater &&
		lhs.OnlyOnExtremeSentinels == rhs.OnlyOnExtremeSentinels &&
		lhs.OnlyOnExtremeWeather == rhs.OnlyOnExtremeWeather &&
		lhs.OnlyOnInfested == rhs.OnlyOnInfested;
	}
};

//Dependency: GcBiomeFileListOptions
//Dependency: GcExternalObjectListOptions
//Dependency: GcExternalObjectFileList
//Dependency: GcBiomeType
struct GcBiomeFileList
{
	NMS_GameComponents::GcBiomeFileListOptions BiomeFiles[17];
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> CommonExternalObjectLists;
	std::vector<NMS_GameComponents::GcExternalObjectFileList> OptionalExternalObjectLists;
	std::vector<NMS_GameComponents::GcBiomeType> ValidGiantPlanetBiome;
	std::vector<NMS_GameComponents::GcBiomeType> ValidPurpleMoonBiome;
	std::vector<NMS_GameComponents::GcBiomeType> ValidStartPlanetBiome;

	friend bool operator==(const GcBiomeFileList& lhs, const GcBiomeFileList& rhs) 
	{
		return std::equal(std::begin(lhs.BiomeFiles), std::end(lhs.BiomeFiles), std::begin(rhs.BiomeFiles)) &&
		lhs.CommonExternalObjectLists == rhs.CommonExternalObjectLists &&
		lhs.OptionalExternalObjectLists == rhs.OptionalExternalObjectLists &&
		lhs.ValidGiantPlanetBiome == rhs.ValidGiantPlanetBiome &&
		lhs.ValidPurpleMoonBiome == rhs.ValidPurpleMoonBiome &&
		lhs.ValidStartPlanetBiome == rhs.ValidStartPlanetBiome;
	}
};

//Dependency: NMSString0x10
struct GcConstructionPart
{
	NMS::NMSString0x10 Part;
	int32_t Amount;

	friend bool operator==(const GcConstructionPart& lhs, const GcConstructionPart& rhs) 
	{
		return lhs.Part == rhs.Part &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: GcBiomeList
struct GcBiomeListPerStarType
{
	NMS_GameComponents::GcBiomeList StarType[5];
	NMS_GameComponents::GcBiomeList AbandonedYellow;
	NMS_GameComponents::GcBiomeList LushYellow;
	float AbandonedLifeChance[4];
	float LifeChance[4];
	float ConvertDeadToWeird;

	friend bool operator==(const GcBiomeListPerStarType& lhs, const GcBiomeListPerStarType& rhs) 
	{
		return std::equal(std::begin(lhs.StarType), std::end(lhs.StarType), std::begin(rhs.StarType)) &&
		lhs.AbandonedYellow == rhs.AbandonedYellow &&
		lhs.LushYellow == rhs.LushYellow &&
		std::equal(std::begin(lhs.AbandonedLifeChance), std::end(lhs.AbandonedLifeChance), std::begin(rhs.AbandonedLifeChance)) &&
		std::equal(std::begin(lhs.LifeChance), std::end(lhs.LifeChance), std::begin(rhs.LifeChance)) &&
		lhs.ConvertDeadToWeird == rhs.ConvertDeadToWeird;
	}
};

//Dependency: NMSString0x80
struct GcBirdData
{
	float FlapAccel;
	float FlapSpeed;
	float FlapSpeedForMaxScale;
	float FlapSpeedForMinScale;
	float FlapSpeedMax;
	float FlapSpeedMaxScale;
	float FlapSpeedMin;
	float FlapSpeedMinScale;
	float FlapTurn;
	NMS::NMSString0x80 CircleAttractor;

	friend bool operator==(const GcBirdData& lhs, const GcBirdData& rhs) 
	{
		return lhs.FlapAccel == rhs.FlapAccel &&
		lhs.FlapSpeed == rhs.FlapSpeed &&
		lhs.FlapSpeedForMaxScale == rhs.FlapSpeedForMaxScale &&
		lhs.FlapSpeedForMinScale == rhs.FlapSpeedForMinScale &&
		lhs.FlapSpeedMax == rhs.FlapSpeedMax &&
		lhs.FlapSpeedMaxScale == rhs.FlapSpeedMaxScale &&
		lhs.FlapSpeedMin == rhs.FlapSpeedMin &&
		lhs.FlapSpeedMinScale == rhs.FlapSpeedMinScale &&
		lhs.FlapTurn == rhs.FlapTurn &&
		lhs.CircleAttractor == rhs.CircleAttractor;
	}
};

//Dependency: NMSString0x10
struct GcDefaultMissionSubstance
{
	NMS::NMSString0x10 Substance;

	friend bool operator==(const GcDefaultMissionSubstance& lhs, const GcDefaultMissionSubstance& rhs) 
	{
		return lhs.Substance == rhs.Substance;
	}
};

//Dependency: NMSString0x10
struct GcBlackboardIntModifyData
{
	enum class ModifyIntTypeEnum : uint32_t
	{
		SetValue = 0,
		IncrementValue = 1,
	};

	NMS::NMSString0x10 Key;
	NMS_GameComponents::GcBlackboardIntModifyData::ModifyIntTypeEnum ModifyIntType;
	int32_t Value;

	friend bool operator==(const GcBlackboardIntModifyData& lhs, const GcBlackboardIntModifyData& rhs) 
	{
		return lhs.Key == rhs.Key &&
		lhs.ModifyIntType == rhs.ModifyIntType &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: NMSString0x10
struct GcSentinelSpawnSequenceStep
{
	std::vector<NMS::NMSString0x10> WavePool;

	friend bool operator==(const GcSentinelSpawnSequenceStep& lhs, const GcSentinelSpawnSequenceStep& rhs) 
	{
		return lhs.WavePool == rhs.WavePool;
	}
};

//Dependency: GcItemQuality
//Dependency: NMSString0x10
//Dependency: GcFishSize
//Dependency: GcFishingTime
//Dependency: GcSeed
struct GcFishData
{
	NMS::NMSString0x10 CatchIncrementsStat;
	NMS::GcSeed MissionSeed;
	NMS::NMSString0x10 ProductID;
	NMS::NMSString0x10 RequiresMissionActive;
	float MissionCatchChanceOverride;
	NMS_GameComponents::GcItemQuality Quality;
	NMS_GameComponents::GcFishSize Size;
	NMS_GameComponents::GcFishingTime Time;
	bool Biome[17];
	bool MissionMustAlsoBeSelected;
	bool NeedsStorm;

	friend bool operator==(const GcFishData& lhs, const GcFishData& rhs) 
	{
		return lhs.CatchIncrementsStat == rhs.CatchIncrementsStat &&
		lhs.MissionSeed == rhs.MissionSeed &&
		lhs.ProductID == rhs.ProductID &&
		lhs.RequiresMissionActive == rhs.RequiresMissionActive &&
		lhs.MissionCatchChanceOverride == rhs.MissionCatchChanceOverride &&
		lhs.Quality == rhs.Quality &&
		lhs.Size == rhs.Size &&
		lhs.Time == rhs.Time &&
		std::equal(std::begin(lhs.Biome), std::end(lhs.Biome), std::begin(rhs.Biome)) &&
		lhs.MissionMustAlsoBeSelected == rhs.MissionMustAlsoBeSelected &&
		lhs.NeedsStorm == rhs.NeedsStorm;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
//Dependency: NMSString0x10
struct TkBlackboardValueVector
{
	NMS::Vector3f Value;
	NMS::NMSString0x10 Key;

	friend bool operator==(const TkBlackboardValueVector& lhs, const TkBlackboardValueVector& rhs) 
	{
		return lhs.Value == rhs.Value &&
		lhs.Key == rhs.Key;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcBlackboardValueDecoratorData
{
	NMSTemplate Child;
	NMS::NMSString0x10 Key;
	bool ClearOnSuccess;

	friend bool operator==(const GcBlackboardValueDecoratorData& lhs, const GcBlackboardValueDecoratorData& rhs) 
	{
		return lhs.Child == rhs.Child &&
		lhs.Key == rhs.Key &&
		lhs.ClearOnSuccess == rhs.ClearOnSuccess;
	}
};

//Dependency: GcMechMeshPart
//Dependency: GcMechMeshType
//Dependency: GcAudioWwiseEvents
struct GcMechPartAudioEventOverride
{
	NMS_GameComponents::GcMechMeshPart MeshPart;
	NMS_GameComponents::GcMechMeshType MeshType;
	NMS_GameComponents::GcAudioWwiseEvents OverrideEvent;

	friend bool operator==(const GcMechPartAudioEventOverride& lhs, const GcMechPartAudioEventOverride& rhs) 
	{
		return lhs.MeshPart == rhs.MeshPart &&
		lhs.MeshType == rhs.MeshType &&
		lhs.OverrideEvent == rhs.OverrideEvent;
	}
};

//Dependency: GcMechPartAudioEventOverride
//Dependency: GcAudioWwiseEvents
struct GcMechAudioEvent
{
	std::vector<NMS_GameComponents::GcMechPartAudioEventOverride> MeshPartOverrides;
	NMS_GameComponents::GcAudioWwiseEvents DefaultEvent;

	friend bool operator==(const GcMechAudioEvent& lhs, const GcMechAudioEvent& rhs) 
	{
		return lhs.MeshPartOverrides == rhs.MeshPartOverrides &&
		lhs.DefaultEvent == rhs.DefaultEvent;
	}
};

//Dependency: GcMechAudioEvent
struct GcMechAudioEventTable
{
	NMS_GameComponents::GcMechAudioEvent JetpackLP;
	NMS_GameComponents::GcMechAudioEvent JetpackLPEnd;
	NMS_GameComponents::GcMechAudioEvent JetpackRetrigger;
	NMS_GameComponents::GcMechAudioEvent JetpackTrigger;
	NMS_GameComponents::GcMechAudioEvent JumpLanding;
	NMS_GameComponents::GcMechAudioEvent JumpLandingSkid;
	NMS_GameComponents::GcMechAudioEvent MechEnter;
	NMS_GameComponents::GcMechAudioEvent MechExit;
	NMS_GameComponents::GcMechAudioEvent StepRun;
	NMS_GameComponents::GcMechAudioEvent StepWalk;
	NMS_GameComponents::GcMechAudioEvent TitanFallLanding;
	NMS_GameComponents::GcMechAudioEvent TitanFallPoseIntro;

	friend bool operator==(const GcMechAudioEventTable& lhs, const GcMechAudioEventTable& rhs) 
	{
		return lhs.JetpackLP == rhs.JetpackLP &&
		lhs.JetpackLPEnd == rhs.JetpackLPEnd &&
		lhs.JetpackRetrigger == rhs.JetpackRetrigger &&
		lhs.JetpackTrigger == rhs.JetpackTrigger &&
		lhs.JumpLanding == rhs.JumpLanding &&
		lhs.JumpLandingSkid == rhs.JumpLandingSkid &&
		lhs.MechEnter == rhs.MechEnter &&
		lhs.MechExit == rhs.MechExit &&
		lhs.StepRun == rhs.StepRun &&
		lhs.StepWalk == rhs.StepWalk &&
		lhs.TitanFallLanding == rhs.TitanFallLanding &&
		lhs.TitanFallPoseIntro == rhs.TitanFallPoseIntro;
	}
};

struct GcMissionConditionExpeditionNearlyOver
{
	uint64_t RemainingTimeToStartWarning;

	friend bool operator==(const GcMissionConditionExpeditionNearlyOver& lhs, const GcMissionConditionExpeditionNearlyOver& rhs) 
	{
		return lhs.RemainingTimeToStartWarning == rhs.RemainingTimeToStartWarning;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkDynamicResScalingSettings
{
	enum class DynamicResScalingAggressivenessEnum : uint32_t
	{
		Moderate = 0,
		Balanced = 1,
		Aggressive = 2,
	};

	NMS_Toolkit::TkDynamicResScalingSettings::DynamicResScalingAggressivenessEnum DynamicResScalingAggressiveness;
	float FrametimeHeadroomProportion;
	float LowestDynamicResScalingFactor;

	friend bool operator==(const TkDynamicResScalingSettings& lhs, const TkDynamicResScalingSettings& rhs) 
	{
		return lhs.DynamicResScalingAggressiveness == rhs.DynamicResScalingAggressiveness &&
		lhs.FrametimeHeadroomProportion == rhs.FrametimeHeadroomProportion &&
		lhs.LowestDynamicResScalingFactor == rhs.LowestDynamicResScalingFactor;
	}
};

//Dependency: TkDynamicResScalingSettings
//Dependency: TkGraphicsDetailTypes
struct TkGraphicsDetailPreset
{
	enum class XESSQualityEnum : uint32_t
	{
		UltraPerformance = 0,
		Performance = 1,
		Balanced = 2,
		Quality = 3,
		UltraQuality = 4,
		UltraQualityPlus = 5,
		Native = 6,
	};

	enum class UIQualityEnum : uint32_t
	{
		Normal = 0,
		_4K = 1,
	};

	enum class NVIDIAReflexLowLatencyEnum : uint32_t
	{
		On = 0,
		Off = 1,
		OnWithBoost = 2,
	};

	enum class MetalFXQualityEnum : uint32_t
	{
		UltraQuality = 0,
		Quality = 1,
		Balanced = 2,
		Performance = 3,
	};

	enum class MetalFXModeEnum : uint32_t
	{
		Off = 0,
		Spatial = 1,
		Temporal = 2,
	};

	enum class FFXSRQualityEnum : uint32_t
	{
		Off = 0,
		UltraQuality = 1,
		Quality = 2,
		Balanced = 3,
		Performance = 4,
	};

	enum class FFXSR2QualityEnum : uint32_t
	{
		UltraPerformance = 0,
		Performance = 1,
		Balanced = 2,
		Quality = 3,
		Native = 4,
	};

	enum class DLSSQualityEnum : uint32_t
	{
		MaxPerformance = 0,
		Balanced = 1,
		MaxQuality = 2,
		UltraPerformance = 3,
		UltraQuality = 4,
	};

	enum class DLSSFrameGenerationEnum : uint32_t
	{
		On = 0,
		Off = 1,
	};

	enum class AntiAliasingEnum : uint32_t
	{
		None = 0,
		TAA_LOW = 1,
		TAA = 2,
		FXAA = 3,
		FFXSR2 = 4,
		DLSS = 5,
		DLAA = 6,
		XESS = 7,
		MetalFXSpatial = 8,
		MetalFXTemporal = 9,
	};

	enum class AnisotropyLevelEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_4 = 2,
		_8 = 3,
		_16 = 4,
	};

	enum class AmbientOcclusionEnum : uint32_t
	{
		Off = 0,
		GTAO_Low = 1,
		GTAO_Medium = 2,
		GTAO_High = 3,
		GTAO_Ultra = 4,
		HBAO_Low = 5,
		HBAO_High = 6,
	};

	NMS_Toolkit::TkDynamicResScalingSettings DynamicResScalingSettings;
	NMS_Toolkit::TkGraphicsDetailPreset::AmbientOcclusionEnum AmbientOcclusion;
	NMS_Toolkit::TkGraphicsDetailTypes AnimationQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::AnisotropyLevelEnum AnisotropyLevel;
	NMS_Toolkit::TkGraphicsDetailPreset::AntiAliasingEnum AntiAliasing;
	NMS_Toolkit::TkGraphicsDetailTypes BaseQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::DLSSFrameGenerationEnum DLSSFrameGeneration;
	NMS_Toolkit::TkGraphicsDetailPreset::DLSSQualityEnum DLSSQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::FFXSR2QualityEnum FFXSR2Quality;
	NMS_Toolkit::TkGraphicsDetailPreset::FFXSRQualityEnum FFXSRQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::MetalFXModeEnum MetalFXMode;
	NMS_Toolkit::TkGraphicsDetailPreset::MetalFXQualityEnum MetalFXQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::NVIDIAReflexLowLatencyEnum NVIDIAReflexLowLatency;
	NMS_Toolkit::TkGraphicsDetailTypes PlanetQuality;
	NMS_Toolkit::TkGraphicsDetailTypes PostProcessingEffects;
	NMS_Toolkit::TkGraphicsDetailTypes ReflectionsQuality;
	NMS_Toolkit::TkGraphicsDetailTypes ShadowQuality;
	NMS_Toolkit::TkGraphicsDetailTypes TerrainTessellation;
	NMS_Toolkit::TkGraphicsDetailTypes TextureQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::UIQualityEnum UIQuality;
	NMS_Toolkit::TkGraphicsDetailTypes VolumetricsQuality;
	NMS_Toolkit::TkGraphicsDetailTypes WaterQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::XESSQualityEnum XESSQuality;

	friend bool operator==(const TkGraphicsDetailPreset& lhs, const TkGraphicsDetailPreset& rhs) 
	{
		return lhs.DynamicResScalingSettings == rhs.DynamicResScalingSettings &&
		lhs.AmbientOcclusion == rhs.AmbientOcclusion &&
		lhs.AnimationQuality == rhs.AnimationQuality &&
		lhs.AnisotropyLevel == rhs.AnisotropyLevel &&
		lhs.AntiAliasing == rhs.AntiAliasing &&
		lhs.BaseQuality == rhs.BaseQuality &&
		lhs.DLSSFrameGeneration == rhs.DLSSFrameGeneration &&
		lhs.DLSSQuality == rhs.DLSSQuality &&
		lhs.FFXSR2Quality == rhs.FFXSR2Quality &&
		lhs.FFXSRQuality == rhs.FFXSRQuality &&
		lhs.MetalFXMode == rhs.MetalFXMode &&
		lhs.MetalFXQuality == rhs.MetalFXQuality &&
		lhs.NVIDIAReflexLowLatency == rhs.NVIDIAReflexLowLatency &&
		lhs.PlanetQuality == rhs.PlanetQuality &&
		lhs.PostProcessingEffects == rhs.PostProcessingEffects &&
		lhs.ReflectionsQuality == rhs.ReflectionsQuality &&
		lhs.ShadowQuality == rhs.ShadowQuality &&
		lhs.TerrainTessellation == rhs.TerrainTessellation &&
		lhs.TextureQuality == rhs.TextureQuality &&
		lhs.UIQuality == rhs.UIQuality &&
		lhs.VolumetricsQuality == rhs.VolumetricsQuality &&
		lhs.WaterQuality == rhs.WaterQuality &&
		lhs.XESSQuality == rhs.XESSQuality;
	}
};

//Dependency: TkGraphicsDetailPreset
//Dependency: NMSString0x100
struct TkGraphicsSettings
{
	enum class VsyncExEnum : uint32_t
	{
		Off = 0,
		On = 1,
		Adaptive = 2,
		Triple = 3,
	};

	enum class TextureStreamingVkEnum : uint32_t
	{
		Off = 0,
		On = 1,
		Auto = 2,
		NonDynamic = 3,
	};

	enum class HDRModeEnum : uint32_t
	{
		Off = 0,
		HDR400 = 1,
		HDR600 = 2,
		HDR1000 = 3,
	};

	std::vector<NMS::NMSString0x100> MonitorNames;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetail;
	int32_t AdapterIndex;
	int32_t Brightness;
	float FoVInShip;
	float FoVOnFoot;
	NMS_Toolkit::TkGraphicsSettings::HDRModeEnum HDRMode;
	int32_t MaxframeRate;
	int32_t Monitor;
	float MotionBlurStrength;
	float MouseClickSpeedMultiplier;
	int32_t NumGraphicsThreadsBeta;
	int32_t NumHighThreads;
	int32_t NumLowThreads;
	int32_t ResolutionHeight;
	float ResolutionScale;
	int32_t ResolutionWidth;
	float RetinaScaleIOS;
	NMS_Toolkit::TkGraphicsSettings::TextureStreamingVkEnum TextureStreamingVk;
	int32_t Version;
	NMS_Toolkit::TkGraphicsSettings::VsyncExEnum VsyncEx;
	NMS::NMSString0x100 AdapterName;
	bool Borderless;
	bool FullScreen;
	bool RemoveBaseBuildingRestrictions;
	bool ShowRequirementsWarnings;
	bool UseArbSparseTexture;
	bool UseTerrainTextureCache;
	bool VignetteAndScanlines;

	friend bool operator==(const TkGraphicsSettings& lhs, const TkGraphicsSettings& rhs) 
	{
		return lhs.MonitorNames == rhs.MonitorNames &&
		lhs.GraphicsDetail == rhs.GraphicsDetail &&
		lhs.AdapterIndex == rhs.AdapterIndex &&
		lhs.Brightness == rhs.Brightness &&
		lhs.FoVInShip == rhs.FoVInShip &&
		lhs.FoVOnFoot == rhs.FoVOnFoot &&
		lhs.HDRMode == rhs.HDRMode &&
		lhs.MaxframeRate == rhs.MaxframeRate &&
		lhs.Monitor == rhs.Monitor &&
		lhs.MotionBlurStrength == rhs.MotionBlurStrength &&
		lhs.MouseClickSpeedMultiplier == rhs.MouseClickSpeedMultiplier &&
		lhs.NumGraphicsThreadsBeta == rhs.NumGraphicsThreadsBeta &&
		lhs.NumHighThreads == rhs.NumHighThreads &&
		lhs.NumLowThreads == rhs.NumLowThreads &&
		lhs.ResolutionHeight == rhs.ResolutionHeight &&
		lhs.ResolutionScale == rhs.ResolutionScale &&
		lhs.ResolutionWidth == rhs.ResolutionWidth &&
		lhs.RetinaScaleIOS == rhs.RetinaScaleIOS &&
		lhs.TextureStreamingVk == rhs.TextureStreamingVk &&
		lhs.Version == rhs.Version &&
		lhs.VsyncEx == rhs.VsyncEx &&
		lhs.AdapterName == rhs.AdapterName &&
		lhs.Borderless == rhs.Borderless &&
		lhs.FullScreen == rhs.FullScreen &&
		lhs.RemoveBaseBuildingRestrictions == rhs.RemoveBaseBuildingRestrictions &&
		lhs.ShowRequirementsWarnings == rhs.ShowRequirementsWarnings &&
		lhs.UseArbSparseTexture == rhs.UseArbSparseTexture &&
		lhs.UseTerrainTextureCache == rhs.UseTerrainTextureCache &&
		lhs.VignetteAndScanlines == rhs.VignetteAndScanlines;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcBlockedUser
{
	NMS::NMSString0x40 UserId;
	NMS::NMSString0x40 Username;
	NMS::NMSString0x20 Platform;

	friend bool operator==(const GcBlockedUser& lhs, const GcBlockedUser& rhs) 
	{
		return lhs.UserId == rhs.UserId &&
		lhs.Username == rhs.Username &&
		lhs.Platform == rhs.Platform;
	}
};

//Dependency: NMSString0x80
struct GcBlockedMessage
{
	NMS::NMSString0x80 MessageId;

	friend bool operator==(const GcBlockedMessage& lhs, const GcBlockedMessage& rhs) 
	{
		return lhs.MessageId == rhs.MessageId;
	}
};

//Dependency: GcBlockedUser
//Dependency: GcBlockedMessage
struct GcBlockListPersistence
{
	int32_t ListSize;
	int32_t MessageListSize;
	int32_t MessageNextSlot;
	int32_t NextSlot;
	NMS_GameComponents::GcBlockedUser BlockedUserArray[50];
	NMS_GameComponents::GcBlockedMessage BlockedMessageArray[50];

	friend bool operator==(const GcBlockListPersistence& lhs, const GcBlockListPersistence& rhs) 
	{
		return lhs.ListSize == rhs.ListSize &&
		lhs.MessageListSize == rhs.MessageListSize &&
		lhs.MessageNextSlot == rhs.MessageNextSlot &&
		lhs.NextSlot == rhs.NextSlot &&
		std::equal(std::begin(lhs.BlockedUserArray), std::end(lhs.BlockedUserArray), std::begin(rhs.BlockedUserArray)) &&
		std::equal(std::begin(lhs.BlockedMessageArray), std::end(lhs.BlockedMessageArray), std::begin(rhs.BlockedMessageArray));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkEmitterWindDrift
{
	float CurveBlendMidpoint;
	float CurveEndValue;
	float CurveMidValue;
	float CurveStartValue;
	float Speed;
	float Strength;
	NMS_Toolkit::TkCurveType Curve1Shape;
	NMS_Toolkit::TkCurveType Curve2Shape;
	bool LimitEmitterLifetime;
	bool LimitEmitterSpeed;

	friend bool operator==(const TkEmitterWindDrift& lhs, const TkEmitterWindDrift& rhs) 
	{
		return lhs.CurveBlendMidpoint == rhs.CurveBlendMidpoint &&
		lhs.CurveEndValue == rhs.CurveEndValue &&
		lhs.CurveMidValue == rhs.CurveMidValue &&
		lhs.CurveStartValue == rhs.CurveStartValue &&
		lhs.Speed == rhs.Speed &&
		lhs.Strength == rhs.Strength &&
		lhs.Curve1Shape == rhs.Curve1Shape &&
		lhs.Curve2Shape == rhs.Curve2Shape &&
		lhs.LimitEmitterLifetime == rhs.LimitEmitterLifetime &&
		lhs.LimitEmitterSpeed == rhs.LimitEmitterSpeed;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMetaBallComponentData
{
	NMS::Vector3f MaxSize;
	NMS::Vector3f MinSize;
	NMS::VariableSizeString File;
	float Radius;
	NMS::NMSString0x20 Root;

	friend bool operator==(const GcMetaBallComponentData& lhs, const GcMetaBallComponentData& rhs) 
	{
		return lhs.MaxSize == rhs.MaxSize &&
		lhs.MinSize == rhs.MinSize &&
		lhs.File == rhs.File &&
		lhs.Radius == rhs.Radius &&
		lhs.Root == rhs.Root;
	}
};

struct GcBoidData
{
	float Alignment;
	float Coherence;
	float DirectionBrake;
	float Follow;
	float InitFacingOffset;
	float InitOffset;
	float InitTime;
	float LeadTime;
	float MaxSpeed;
	float Separation;
	float Spacing;

	friend bool operator==(const GcBoidData& lhs, const GcBoidData& rhs) 
	{
		return lhs.Alignment == rhs.Alignment &&
		lhs.Coherence == rhs.Coherence &&
		lhs.DirectionBrake == rhs.DirectionBrake &&
		lhs.Follow == rhs.Follow &&
		lhs.InitFacingOffset == rhs.InitFacingOffset &&
		lhs.InitOffset == rhs.InitOffset &&
		lhs.InitTime == rhs.InitTime &&
		lhs.LeadTime == rhs.LeadTime &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.Separation == rhs.Separation &&
		lhs.Spacing == rhs.Spacing;
	}
};

struct GcMessageRequestTakeOff
{
	float Delay;
	bool ImmediatelyDissolveNPC;

	friend bool operator==(const GcMessageRequestTakeOff& lhs, const GcMessageRequestTakeOff& rhs) 
	{
		return lhs.Delay == rhs.Delay &&
		lhs.ImmediatelyDissolveNPC == rhs.ImmediatelyDissolveNPC;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct TkAudioAnimTrigger
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x20A> OnlyValidWithParts;
	int32_t FrameStart;
	NMS::NMSString0x80 Sound;

	friend bool operator==(const TkAudioAnimTrigger& lhs, const TkAudioAnimTrigger& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.OnlyValidWithParts == rhs.OnlyValidWithParts &&
		lhs.FrameStart == rhs.FrameStart &&
		lhs.Sound == rhs.Sound;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x100
struct GcBootLogoData
{
	float DisplayTime[4];
	NMS::NMSString0x100 Textures[4];

	friend bool operator==(const GcBootLogoData& lhs, const GcBootLogoData& rhs) 
	{
		return std::equal(std::begin(lhs.DisplayTime), std::end(lhs.DisplayTime), std::begin(rhs.DisplayTime)) &&
		std::equal(std::begin(lhs.Textures), std::end(lhs.Textures), std::begin(rhs.Textures));
	}
};

//Dependency: GcAtlasSendSubmitContribution
//Dependency: NMSString0x10
struct GcRewardCommunityContribution
{
	enum class SubmitTypeEnum : uint32_t
	{
		Value = 0,
		Stat = 1,
		StatsDiff = 2,
	};

	NMS::NMSString0x10 OtherStat;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcAtlasSendSubmitContribution Contribution;
	NMS_GameComponents::GcRewardCommunityContribution::SubmitTypeEnum SubmitType;
	bool AutosaveOnHandIn;

	friend bool operator==(const GcRewardCommunityContribution& lhs, const GcRewardCommunityContribution& rhs) 
	{
		return lhs.OtherStat == rhs.OtherStat &&
		lhs.Stat == rhs.Stat &&
		lhs.Contribution == rhs.Contribution &&
		lhs.SubmitType == rhs.SubmitType &&
		lhs.AutosaveOnHandIn == rhs.AutosaveOnHandIn;
	}
};

//Dependency: GcAIShipSpawnData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBountySpawnInfo
{
	NMS_GameComponents::GcAIShipSpawnData Data;
	NMS::NMSString0x20A Label;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 AttackData;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcBountySpawnInfo& lhs, const GcBountySpawnInfo& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.Label == rhs.Label &&
		lhs.Icon == rhs.Icon &&
		lhs.AttackData == rhs.AttackData &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: GcStatsTypes
struct GcBreakTechByStatData
{
	NMS_GameComponents::GcStatsTypes DamageTechWithStat;
	bool IncludeStatChildren;

	friend bool operator==(const GcBreakTechByStatData& lhs, const GcBreakTechByStatData& rhs) 
	{
		return lhs.DamageTechWithStat == rhs.DamageTechWithStat &&
		lhs.IncludeStatChildren == rhs.IncludeStatChildren;
	}
};

//Dependency: NMSString0x10
struct GcDefaultMissionProduct
{
	NMS::NMSString0x10 Product;

	friend bool operator==(const GcDefaultMissionProduct& lhs, const GcDefaultMissionProduct& rhs) 
	{
		return lhs.Product == rhs.Product;
	}
};

struct GcFireSimpleInteractionAction
{

	friend bool operator==(const GcFireSimpleInteractionAction& lhs, const GcFireSimpleInteractionAction& rhs) 
	{
		return true;
	}
};

struct GcRewardSwapMultiTool
{

	friend bool operator==(const GcRewardSwapMultiTool& lhs, const GcRewardSwapMultiTool& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCustomisationDescriptorVisualEffect
{
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x20 AttachTo;

	friend bool operator==(const GcCustomisationDescriptorVisualEffect& lhs, const GcCustomisationDescriptorVisualEffect& rhs) 
	{
		return lhs.Effect == rhs.Effect &&
		lhs.AttachTo == rhs.AttachTo;
	}
};

//Dependency: GcCustomisationDescriptorVisualEffect
//Dependency: NMSString0x20A
struct GcCustomisationDescriptorVisualEffects
{
	NMS::NMSString0x20A DescriptorId;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorVisualEffect> Effects;

	friend bool operator==(const GcCustomisationDescriptorVisualEffects& lhs, const GcCustomisationDescriptorVisualEffects& rhs) 
	{
		return lhs.DescriptorId == rhs.DescriptorId &&
		lhs.Effects == rhs.Effects;
	}
};

struct GcBreakTechOnDamageDifficultyOption
{
	enum class BreakTechOnDamageProbabilityEnum : uint32_t
	{
		None = 0,
		Low = 1,
		High = 2,
	};

	NMS_GameComponents::GcBreakTechOnDamageDifficultyOption::BreakTechOnDamageProbabilityEnum BreakTechOnDamageProbability;

	friend bool operator==(const GcBreakTechOnDamageDifficultyOption& lhs, const GcBreakTechOnDamageDifficultyOption& rhs) 
	{
		return lhs.BreakTechOnDamageProbability == rhs.BreakTechOnDamageProbability;
	}
};

struct GcSentinelTypes
{
	enum class SentinelTypeEnum : uint32_t
	{
		PatrolDrone = 0,
		CombatDrone = 1,
		MedicDrone = 2,
		SummonerDrone = 3,
		CorruptedDrone = 4,
		Quad = 5,
		SpiderQuad = 6,
		SpiderQuadMini = 7,
		Mech = 8,
		Walker = 9,
		FriendlyDrone = 10,
		StoneMech = 11,
		StoneFloater = 12,
	};

	NMS_GameComponents::GcSentinelTypes::SentinelTypeEnum SentinelType;

	friend bool operator==(const GcSentinelTypes& lhs, const GcSentinelTypes& rhs) 
	{
		return lhs.SentinelType == rhs.SentinelType;
	}
};

//Dependency: GcSentinelTypes
struct GcSentinelSpawnData
{
	int32_t MaxAmount;
	int32_t MinAmount;
	NMS_GameComponents::GcSentinelTypes Type;

	friend bool operator==(const GcSentinelSpawnData& lhs, const GcSentinelSpawnData& rhs) 
	{
		return lhs.MaxAmount == rhs.MaxAmount &&
		lhs.MinAmount == rhs.MinAmount &&
		lhs.Type == rhs.Type;
	}
};

struct GcCostCargo
{
	int32_t Slots;

	friend bool operator==(const GcCostCargo& lhs, const GcCostCargo& rhs) 
	{
		return lhs.Slots == rhs.Slots;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVertexStream
{
	std::vector<int8_t> VertexStream;

	friend bool operator==(const TkVertexStream& lhs, const TkVertexStream& rhs) 
	{
		return lhs.VertexStream == rhs.VertexStream;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPlayerStickData
{
	float Accelerate;
	float AccelerateAngle;
	float AcceleratorMinTime;
	float AcceleratorStickPoint;
	float StickyFactor;
	float Turn;
	float TurnFast;

	friend bool operator==(const GcPlayerStickData& lhs, const GcPlayerStickData& rhs) 
	{
		return lhs.Accelerate == rhs.Accelerate &&
		lhs.AccelerateAngle == rhs.AccelerateAngle &&
		lhs.AcceleratorMinTime == rhs.AcceleratorMinTime &&
		lhs.AcceleratorStickPoint == rhs.AcceleratorStickPoint &&
		lhs.StickyFactor == rhs.StickyFactor &&
		lhs.Turn == rhs.Turn &&
		lhs.TurnFast == rhs.TurnFast;
	}
};

//Dependency: TkTextureResource
struct GcBuildMenuIconSet
{
	NMS_Toolkit::TkTextureResource Glow;
	NMS_Toolkit::TkTextureResource Normal;

	friend bool operator==(const GcBuildMenuIconSet& lhs, const GcBuildMenuIconSet& rhs) 
	{
		return lhs.Glow == rhs.Glow &&
		lhs.Normal == rhs.Normal;
	}
};

struct GcNPCPopulationDifficultyOption
{
	enum class NPCPopulationDifficultyEnum : uint32_t
	{
		Full = 0,
		Abandoned = 1,
	};

	NMS_GameComponents::GcNPCPopulationDifficultyOption::NPCPopulationDifficultyEnum NPCPopulationDifficulty;

	friend bool operator==(const GcNPCPopulationDifficultyOption& lhs, const GcNPCPopulationDifficultyOption& rhs) 
	{
		return lhs.NPCPopulationDifficulty == rhs.NPCPopulationDifficulty;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkImGuiWindowData
{
	int32_t WindowH;
	int32_t WindowMinH;
	int32_t WindowMinW;
	int32_t WindowScroll;
	int32_t WindowTab;
	int32_t WindowW;
	int32_t WindowX;
	int32_t WindowY;
	NMS::NMSString0x80 Type;
	bool WindowMinimised;
	bool WindowOpen;
	bool WindowResize;
	bool WindowUsed;

	friend bool operator==(const TkImGuiWindowData& lhs, const TkImGuiWindowData& rhs) 
	{
		return lhs.WindowH == rhs.WindowH &&
		lhs.WindowMinH == rhs.WindowMinH &&
		lhs.WindowMinW == rhs.WindowMinW &&
		lhs.WindowScroll == rhs.WindowScroll &&
		lhs.WindowTab == rhs.WindowTab &&
		lhs.WindowW == rhs.WindowW &&
		lhs.WindowX == rhs.WindowX &&
		lhs.WindowY == rhs.WindowY &&
		lhs.Type == rhs.Type &&
		lhs.WindowMinimised == rhs.WindowMinimised &&
		lhs.WindowOpen == rhs.WindowOpen &&
		lhs.WindowResize == rhs.WindowResize &&
		lhs.WindowUsed == rhs.WindowUsed;
	}
};

//Dependency: TkImGuiWindowData
//Dependency: VariableSizeString
struct TkImGuiData
{
	NMS::VariableSizeString RecentToolbox[10];
	NMS_Toolkit::TkImGuiWindowData WindowTable[128];
	NMS_Toolkit::TkImGuiWindowData MainWindow;
	int32_t DimensionX;
	int32_t DimensionY;
	int32_t WindowCount;
	bool Maximised;

	friend bool operator==(const TkImGuiData& lhs, const TkImGuiData& rhs) 
	{
		return std::equal(std::begin(lhs.RecentToolbox), std::end(lhs.RecentToolbox), std::begin(rhs.RecentToolbox)) &&
		std::equal(std::begin(lhs.WindowTable), std::end(lhs.WindowTable), std::begin(rhs.WindowTable)) &&
		lhs.MainWindow == rhs.MainWindow &&
		lhs.DimensionX == rhs.DimensionX &&
		lhs.DimensionY == rhs.DimensionY &&
		lhs.WindowCount == rhs.WindowCount &&
		lhs.Maximised == rhs.Maximised;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMessageRequestWarp
{
	float Delay;

	friend bool operator==(const GcMessageRequestWarp& lhs, const GcMessageRequestWarp& rhs) 
	{
		return lhs.Delay == rhs.Delay;
	}
};

struct GcBuilderPadType
{
	enum class BuilderPadTypeEnum : uint32_t
	{
		NoBuild = 0,
		ExclusivelyBuild = 1,
		Hybrid = 2,
	};

	NMS_GameComponents::GcBuilderPadType::BuilderPadTypeEnum BuilderPadType;

	friend bool operator==(const GcBuilderPadType& lhs, const GcBuilderPadType& rhs) 
	{
		return lhs.BuilderPadType == rhs.BuilderPadType;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardUnlockSeasonReward
{
	NMS::NMSString0x20A EncryptedText;
	NMS::NMSString0x10 ProductID;
	bool MarkAsClaimedInShop;
	bool Silent;
	bool UniqueInventoryItem;
	bool UseSpecialFormatting;

	friend bool operator==(const GcRewardUnlockSeasonReward& lhs, const GcRewardUnlockSeasonReward& rhs) 
	{
		return lhs.EncryptedText == rhs.EncryptedText &&
		lhs.ProductID == rhs.ProductID &&
		lhs.MarkAsClaimedInShop == rhs.MarkAsClaimedInShop &&
		lhs.Silent == rhs.Silent &&
		lhs.UniqueInventoryItem == rhs.UniqueInventoryItem &&
		lhs.UseSpecialFormatting == rhs.UseSpecialFormatting;
	}
};

//Dependency: NMSString0x10
struct GcBuildingBlueprint
{
	NMS::NMSString0x10 ProductID;
	int32_t GroupId;

	friend bool operator==(const GcBuildingBlueprint& lhs, const GcBuildingBlueprint& rhs) 
	{
		return lhs.ProductID == rhs.ProductID &&
		lhs.GroupId == rhs.GroupId;
	}
};

struct GcRewardDeactivateFiends
{

	friend bool operator==(const GcRewardDeactivateFiends& lhs, const GcRewardDeactivateFiends& rhs) 
	{
		return true;
	}
};

struct GcBuildingDensity
{
	float BuildingSpacing;

	friend bool operator==(const GcBuildingDensity& lhs, const GcBuildingDensity& rhs) 
	{
		return lhs.BuildingSpacing == rhs.BuildingSpacing;
	}
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcTechnologyRequirement
{
	NMS::NMSString0x10 ID;
	int32_t Amount;
	NMS_GameComponents::GcInventoryType Type;

	friend bool operator==(const GcTechnologyRequirement& lhs, const GcTechnologyRequirement& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Amount == rhs.Amount &&
		lhs.Type == rhs.Type;
	}
};

struct GcItemPriceModifiers
{
	float BuyBaseMarkup;
	float BuyMarkupMod;
	float HighPriceMod;
	float LowPriceMod;
	float SpaceStationMarkup;

	friend bool operator==(const GcItemPriceModifiers& lhs, const GcItemPriceModifiers& rhs) 
	{
		return lhs.BuyBaseMarkup == rhs.BuyBaseMarkup &&
		lhs.BuyMarkupMod == rhs.BuyMarkupMod &&
		lhs.HighPriceMod == rhs.HighPriceMod &&
		lhs.LowPriceMod == rhs.LowPriceMod &&
		lhs.SpaceStationMarkup == rhs.SpaceStationMarkup;
	}
};

struct GcFossilCategory
{
	enum class FossilCategoryEnum : uint32_t
	{
		None = 0,
		Head = 1,
		Body = 2,
		Limb = 3,
		Tail = 4,
	};

	NMS_GameComponents::GcFossilCategory::FossilCategoryEnum FossilCategory;

	friend bool operator==(const GcFossilCategory& lhs, const GcFossilCategory& rhs) 
	{
		return lhs.FossilCategory == rhs.FossilCategory;
	}
};

struct GcScannerIconTypes
{
	enum class ScanIconTypeEnum : uint32_t
	{
		None = 0,
		Health = 1,
		Shield = 2,
		Hazard = 3,
		LifeSupport = 4,
		Tech = 5,
		BluePlant = 6,
		CaveSubstance = 7,
		LaunchCrystals = 8,
		Power = 9,
		Carbon = 10,
		CarbonPlus = 11,
		Oxygen = 12,
		Mineral = 13,
		Sodium = 14,
		SodiumPlus = 15,
		Crate = 16,
		Artifact = 17,
		Plant = 18,
		HazardPlant = 19,
		ArtifactCrate = 20,
		BuriedTech = 21,
		BuriedRare = 22,
		Drone = 23,
		CustomMarker = 24,
		SignalBooster = 25,
		Refiner = 26,
		Grave = 27,
		Rare1 = 28,
		Rare2 = 29,
		Rare3 = 30,
		Pearl = 31,
		RareEgg = 32,
		HazardEgg = 33,
		FishFiend = 34,
		Clam = 35,
		CaveStone = 36,
		StormCrystal = 37,
		BiomeTrophy = 38,
		PowerHotspot = 39,
		MineralHotspot = 40,
		GasHotspot = 41,
		HarvestPlant = 42,
		Cooker = 43,
		CreaturePoop = 44,
		FreighterTeleporter = 45,
		FreighterDoor = 46,
		FreighterTerminal = 47,
		FreighterHeater = 48,
		FreighterDataPad = 49,
		LandedPilot = 50,
		PetEgg = 51,
		Sandworm = 52,
		FriendlyDrone = 53,
		CorruptedCrystal = 54,
		CorruptedMachine = 55,
		RobotHead = 56,
		HiddenCrystal = 57,
		SpaceDestrutibleSmall = 58,
		SpaceDestrutibleLarge = 59,
		ShieldGenerator = 60,
		FreighterEngine = 61,
		FreighterWeakPoint = 62,
		FreighterTrenchEntrance = 63,
		Terrain = 64,
		FuelAsteroid = 65,
		Grub = 66,
		FishPlatform = 67,
		FishPot = 68,
		RuinBeacon = 69,
		SeaGlass = 70,
		LocalWeatherHazard = 71,
		StoneEnemy = 72,
		BuriedFossil = 73,
		BuriedFossilHazard = 74,
	};

	NMS_GameComponents::GcScannerIconTypes::ScanIconTypeEnum ScanIconType;

	friend bool operator==(const GcScannerIconTypes& lhs, const GcScannerIconTypes& rhs) 
	{
		return lhs.ScanIconType == rhs.ScanIconType;
	}
};

struct GcTradeCategory
{
	enum class TradeCategoryEnum : uint32_t
	{
		Mineral = 0,
		Tech = 1,
		Commodity = 2,
		Component = 3,
		Alloy = 4,
		Exotic = 5,
		Energy = 6,
		None = 7,
		SpecialShop = 8,
	};

	NMS_GameComponents::GcTradeCategory::TradeCategoryEnum TradeCategory;

	friend bool operator==(const GcTradeCategory& lhs, const GcTradeCategory& rhs) 
	{
		return lhs.TradeCategory == rhs.TradeCategory;
	}
};

struct GcProductCategory
{
	enum class ProductCategoryEnum : uint32_t
	{
		Component = 0,
		Consumable = 1,
		Tradeable = 2,
		Curiosity = 3,
		BuildingPart = 4,
		Procedural = 5,
		Emote = 6,
		CustomisationPart = 7,
		CreatureEgg = 8,
		Fish = 9,
		ExhibitBone = 10,
	};

	NMS_GameComponents::GcProductCategory::ProductCategoryEnum ProductCategory;

	friend bool operator==(const GcProductCategory& lhs, const GcProductCategory& rhs) 
	{
		return lhs.ProductCategory == rhs.ProductCategory;
	}
};

//Dependency: GcLegality
//Dependency: GcTechnologyRequirement
//Dependency: GcRealitySubstanceCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcFossilCategory
//Dependency: GcStatsTypes
//Dependency: GcScannerIconTypes
//Dependency: GcRarity
//Dependency: GcTradeCategory
//Dependency: GcProductCategory
//Dependency: TkModelResource
//Dependency: TkTextureResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcProductData
{
	enum class WikiCategoryEnum : uint32_t
	{
		NotEnabled = 0,
		Crafting = 1,
		Tech = 2,
		Construction = 3,
		Trade = 4,
		Curio = 5,
		Cooking = 6,
	};

	NMS::Colour Colour;
	NMS_Toolkit::TkModelResource DebrisFile;
	NMS::NMSString0x20A Hint;
	NMS::NMSString0x20A PinObjective;
	NMS::NMSString0x20A PinObjectiveMessage;
	NMS::NMSString0x20A PinObjectiveTip;
	NMS_Toolkit::TkTextureResource HeroIcon;
	NMS_Toolkit::TkTextureResource Icon;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> AltRequirements;
	NMS::NMSString0x10 DeploysInto;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 GiveRewardOnSpecialPurchase;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> Requirements;
	NMS::VariableSizeString Subtitle;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	int32_t BaseValue;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	int32_t ChargeValue;
	float CookingValue;
	int32_t CraftAmountMultiplier;
	int32_t CraftAmountStepSize;
	int32_t DefaultCraftAmount;
	float EconomyInfluenceMultiplier;
	NMS_GameComponents::GcStatsTypes FoodBonusStat;
	float FoodBonusStatAmount;
	NMS_GameComponents::GcFossilCategory FossilCategory;
	NMS_GameComponents::GcLegality Legality;
	int32_t Level;
	float NormalisedValueOffWorld;
	float NormalisedValueOnWorld;
	NMS_GameComponents::GcScannerIconTypes PinObjectiveScannableType;
	NMS_GameComponents::GcRarity Rarity;
	int32_t RecipeCost;
	int32_t StackMultiplier;
	NMS_GameComponents::GcTradeCategory TradeCategory;
	NMS_GameComponents::GcProductCategory Type;
	NMS_GameComponents::GcProductData::WikiCategoryEnum WikiCategory;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	bool CanSendToOtherPlayers;
	bool Consumable;
	bool CookingIngredient;
	bool EggModifierIngredient;
	bool GoodForSelling;
	bool IsCraftable;
	bool IsTechbox;
	bool NeverPinnable;
	bool PinObjectiveEasyToRefine;
	bool SpecificChargeOnly;

	friend bool operator==(const GcProductData& lhs, const GcProductData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.DebrisFile == rhs.DebrisFile &&
		lhs.Hint == rhs.Hint &&
		lhs.PinObjective == rhs.PinObjective &&
		lhs.PinObjectiveMessage == rhs.PinObjectiveMessage &&
		lhs.PinObjectiveTip == rhs.PinObjectiveTip &&
		lhs.HeroIcon == rhs.HeroIcon &&
		lhs.Icon == rhs.Icon &&
		lhs.AltRequirements == rhs.AltRequirements &&
		lhs.DeploysInto == rhs.DeploysInto &&
		lhs.Description == rhs.Description &&
		lhs.GiveRewardOnSpecialPurchase == rhs.GiveRewardOnSpecialPurchase &&
		lhs.GroupID == rhs.GroupID &&
		lhs.ID == rhs.ID &&
		lhs.Requirements == rhs.Requirements &&
		lhs.Subtitle == rhs.Subtitle &&
		lhs.Cost == rhs.Cost &&
		lhs.BaseValue == rhs.BaseValue &&
		lhs.Category == rhs.Category &&
		lhs.ChargeValue == rhs.ChargeValue &&
		lhs.CookingValue == rhs.CookingValue &&
		lhs.CraftAmountMultiplier == rhs.CraftAmountMultiplier &&
		lhs.CraftAmountStepSize == rhs.CraftAmountStepSize &&
		lhs.DefaultCraftAmount == rhs.DefaultCraftAmount &&
		lhs.EconomyInfluenceMultiplier == rhs.EconomyInfluenceMultiplier &&
		lhs.FoodBonusStat == rhs.FoodBonusStat &&
		lhs.FoodBonusStatAmount == rhs.FoodBonusStatAmount &&
		lhs.FossilCategory == rhs.FossilCategory &&
		lhs.Legality == rhs.Legality &&
		lhs.Level == rhs.Level &&
		lhs.NormalisedValueOffWorld == rhs.NormalisedValueOffWorld &&
		lhs.NormalisedValueOnWorld == rhs.NormalisedValueOnWorld &&
		lhs.PinObjectiveScannableType == rhs.PinObjectiveScannableType &&
		lhs.Rarity == rhs.Rarity &&
		lhs.RecipeCost == rhs.RecipeCost &&
		lhs.StackMultiplier == rhs.StackMultiplier &&
		lhs.TradeCategory == rhs.TradeCategory &&
		lhs.Type == rhs.Type &&
		lhs.WikiCategory == rhs.WikiCategory &&
		lhs.Name == rhs.Name &&
		lhs.NameLower == rhs.NameLower &&
		lhs.CanSendToOtherPlayers == rhs.CanSendToOtherPlayers &&
		lhs.Consumable == rhs.Consumable &&
		lhs.CookingIngredient == rhs.CookingIngredient &&
		lhs.EggModifierIngredient == rhs.EggModifierIngredient &&
		lhs.GoodForSelling == rhs.GoodForSelling &&
		lhs.IsCraftable == rhs.IsCraftable &&
		lhs.IsTechbox == rhs.IsTechbox &&
		lhs.NeverPinnable == rhs.NeverPinnable &&
		lhs.PinObjectiveEasyToRefine == rhs.PinObjectiveEasyToRefine &&
		lhs.SpecificChargeOnly == rhs.SpecificChargeOnly;
	}
};

//Dependency: GcProductData
//Dependency: GcBaseBuildingEntry
//Dependency: NMSString0x40
struct GcModBasePart
{
	NMS_GameComponents::GcProductData ProductData;
	NMS_GameComponents::GcBaseBuildingEntry PartData;
	NMS::NMSString0x40 ID;

	friend bool operator==(const GcModBasePart& lhs, const GcModBasePart& rhs) 
	{
		return lhs.ProductData == rhs.ProductData &&
		lhs.PartData == rhs.PartData &&
		lhs.ID == rhs.ID;
	}
};

struct GcMissionConditionHasLegacyBasePending
{

	friend bool operator==(const GcMissionConditionHasLegacyBasePending& lhs, const GcMissionConditionHasLegacyBasePending& rhs) 
	{
		return true;
	}
};

struct GcRewardClosePortal
{

	friend bool operator==(const GcRewardClosePortal& lhs, const GcRewardClosePortal& rhs) 
	{
		return true;
	}
};

struct GcQuickMenuActions
{
	enum class QuickMenuActionsEnum : uint32_t
	{
		None = 0,
		CallFreighter = 1,
		DismissFreighter = 2,
		SummonNexus = 3,
		CallShip = 4,
		CallSquadron = 5,
		SummonVehicleSubMenu = 6,
		SummonBuggy = 7,
		SummonBike = 8,
		SummonTruck = 9,
		SummonWheeledBike = 10,
		SummonHovercraft = 11,
		SummonSubmarine = 12,
		SummonMech = 13,
		VehicleAIToggle = 14,
		VehicleScan = 15,
		VehicleScanSelect = 16,
		VehicleRestartRace = 17,
		Torch = 18,
		GalaxyMap = 19,
		PhotoMode = 20,
		ChargeMenu = 21,
		Charge = 22,
		ChargeSubMenu = 23,
		Repair = 24,
		BuildMenu = 25,
		CommunicatorReceive = 26,
		CommunicatorInitiate = 27,
		ThirdPersonCharacter = 28,
		ThirdPersonShip = 29,
		ThirdPersonVehicle = 30,
		EconomyScan = 31,
		EmoteMenu = 32,
		Emote = 33,
		UtilitySubMenu = 34,
		SummonSubMenu = 35,
		SummonShipSubMenu = 36,
		ChangeSecondaryWeaponMenu = 37,
		ChangeSecondaryWeapon = 38,
		ChooseCreatureFoodMenu = 39,
		ChooseCreatureFood = 40,
		EmergencyWarp = 41,
		SwapMultitool = 42,
		SwapMultitoolSubMenu = 43,
		CreatureSubMenu = 44,
		SummonPet = 45,
		SummonPetSubMenu = 46,
		WarpToNexus = 47,
		PetUI = 48,
		ByteBeatSubMenu = 49,
		ByteBeatPlay = 50,
		ByteBeatStop = 51,
		ByteBeatLibrary = 52,
		ReportBase = 53,
		CargoShield = 54,
		CallRocket = 55,
		SummonSkiff = 56,
		FishBaitBox = 57,
		FoodUnit = 58,
		SettlementOverview = 59,
		Invalid = 60,
	};

	NMS_GameComponents::GcQuickMenuActions::QuickMenuActionsEnum QuickMenuActions;

	friend bool operator==(const GcQuickMenuActions& lhs, const GcQuickMenuActions& rhs) 
	{
		return lhs.QuickMenuActions == rhs.QuickMenuActions;
	}
};

//Dependency: GcInventoryIndex
//Dependency: GcQuickMenuActions
//Dependency: NMSString0x10
struct GcQuickMenuActionSaveData
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryIndex InventoryIndex;
	NMS_GameComponents::GcQuickMenuActions Action;
	int32_t Number;

	friend bool operator==(const GcQuickMenuActionSaveData& lhs, const GcQuickMenuActionSaveData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.InventoryIndex == rhs.InventoryIndex &&
		lhs.Action == rhs.Action &&
		lhs.Number == rhs.Number;
	}
};

struct GcBuildingDensityLevels
{
	enum class BuildingDensityEnum : uint32_t
	{
		Dead = 0,
		Low = 1,
		Mid = 2,
		Full = 3,
		Weird = 4,
		HalfWeird = 5,
		Waterworld = 6,
		GasGiant = 7,
	};

	NMS_GameComponents::GcBuildingDensityLevels::BuildingDensityEnum BuildingDensity;

	friend bool operator==(const GcBuildingDensityLevels& lhs, const GcBuildingDensityLevels& rhs) 
	{
		return lhs.BuildingDensity == rhs.BuildingDensity;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcCreatureStupidName
{
	NMS::NMSString0x10 Id;
	std::vector<NMS::NMSString0x80> Names;
	int32_t Count;

	friend bool operator==(const GcCreatureStupidName& lhs, const GcCreatureStupidName& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Names == rhs.Names &&
		lhs.Count == rhs.Count;
	}
};

struct GcCombatEffectsProperties
{
	float DamageMultiplier;
	float DurationMultiplier;
	bool IgnoreFromOtherPlayers;
	bool IgnoreFromSelf;
	bool IsAffected;

	friend bool operator==(const GcCombatEffectsProperties& lhs, const GcCombatEffectsProperties& rhs) 
	{
		return lhs.DamageMultiplier == rhs.DamageMultiplier &&
		lhs.DurationMultiplier == rhs.DurationMultiplier &&
		lhs.IgnoreFromOtherPlayers == rhs.IgnoreFromOtherPlayers &&
		lhs.IgnoreFromSelf == rhs.IgnoreFromSelf &&
		lhs.IsAffected == rhs.IsAffected;
	}
};

struct GcDifficultySettingType
{
	enum class DifficultySettingTypeEnum : uint32_t
	{
		Toggle = 0,
		OptionList = 1,
	};

	NMS_GameComponents::GcDifficultySettingType::DifficultySettingTypeEnum DifficultySettingType;

	friend bool operator==(const GcDifficultySettingType& lhs, const GcDifficultySettingType& rhs) 
	{
		return lhs.DifficultySettingType == rhs.DifficultySettingType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLODSettingsData
{
	int32_t ImposterOverrideRange[6];
	int32_t MaxObjectDistanceOverride[6];
	int32_t RegionLODHiddenRanges[6];
	int32_t RegionLODRadius[6];
	float LODAdjust[5];
	int32_t AsteroidCountMultiplier;
	int32_t AsteroidDividerMultiplier;
	float AsteroidFadeRangeMultiplier;
	int32_t ImposterResolutionMultiplier;
	int32_t MaxAsteroidGenerationPerFrame;
	int32_t MaxAsteroidGenerationPerFramePulseJump;
	int32_t NumberOfImposterViews;
	bool EnableOctahedralImposters;
	bool ViewImpostersFromSpace;

	friend bool operator==(const TkLODSettingsData& lhs, const TkLODSettingsData& rhs) 
	{
		return std::equal(std::begin(lhs.ImposterOverrideRange), std::end(lhs.ImposterOverrideRange), std::begin(rhs.ImposterOverrideRange)) &&
		std::equal(std::begin(lhs.MaxObjectDistanceOverride), std::end(lhs.MaxObjectDistanceOverride), std::begin(rhs.MaxObjectDistanceOverride)) &&
		std::equal(std::begin(lhs.RegionLODHiddenRanges), std::end(lhs.RegionLODHiddenRanges), std::begin(rhs.RegionLODHiddenRanges)) &&
		std::equal(std::begin(lhs.RegionLODRadius), std::end(lhs.RegionLODRadius), std::begin(rhs.RegionLODRadius)) &&
		std::equal(std::begin(lhs.LODAdjust), std::end(lhs.LODAdjust), std::begin(rhs.LODAdjust)) &&
		lhs.AsteroidCountMultiplier == rhs.AsteroidCountMultiplier &&
		lhs.AsteroidDividerMultiplier == rhs.AsteroidDividerMultiplier &&
		lhs.AsteroidFadeRangeMultiplier == rhs.AsteroidFadeRangeMultiplier &&
		lhs.ImposterResolutionMultiplier == rhs.ImposterResolutionMultiplier &&
		lhs.MaxAsteroidGenerationPerFrame == rhs.MaxAsteroidGenerationPerFrame &&
		lhs.MaxAsteroidGenerationPerFramePulseJump == rhs.MaxAsteroidGenerationPerFramePulseJump &&
		lhs.NumberOfImposterViews == rhs.NumberOfImposterViews &&
		lhs.EnableOctahedralImposters == rhs.EnableOctahedralImposters &&
		lhs.ViewImpostersFromSpace == rhs.ViewImpostersFromSpace;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPaletteData
//Dependency: GcCustomisationColourPaletteExtraData
//Dependency: GcCustomisationBannerImageData
struct GcCustomisationBannerGroup
{
	NMS_GameComponents::GcPaletteData BackgroundColours;
	NMS_GameComponents::GcPaletteData MainColours;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData BackgroundColoursExtraData;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData MainColoursExtraData;
	std::vector<NMS_GameComponents::GcCustomisationBannerImageData> BannerImages;

	friend bool operator==(const GcCustomisationBannerGroup& lhs, const GcCustomisationBannerGroup& rhs) 
	{
		return lhs.BackgroundColours == rhs.BackgroundColours &&
		lhs.MainColours == rhs.MainColours &&
		lhs.BackgroundColoursExtraData == rhs.BackgroundColoursExtraData &&
		lhs.MainColoursExtraData == rhs.MainColoursExtraData &&
		lhs.BannerImages == rhs.BannerImages;
	}
};

//Dependency: GcPlanetSize
struct GcPlanetaryMappingValues
{
	NMS_GameComponents::GcPlanetSize PlanetSize;
	uint16_t PolesPerSection;
	uint16_t SectionPerSide;

	friend bool operator==(const GcPlanetaryMappingValues& lhs, const GcPlanetaryMappingValues& rhs) 
	{
		return lhs.PlanetSize == rhs.PlanetSize &&
		lhs.PolesPerSection == rhs.PolesPerSection &&
		lhs.SectionPerSide == rhs.SectionPerSide;
	}
};

struct GcRewardAtlasPathProgress
{
	enum class AtlasPathProgressTypeEnum : uint32_t
	{
		IncrementPathProgress = 0,
		FinalStoryAtlas = 1,
		StoreLoopingCompleteStations = 2,
	};

	NMS_GameComponents::GcRewardAtlasPathProgress::AtlasPathProgressTypeEnum AtlasPathProgressType;

	friend bool operator==(const GcRewardAtlasPathProgress& lhs, const GcRewardAtlasPathProgress& rhs) 
	{
		return lhs.AtlasPathProgressType == rhs.AtlasPathProgressType;
	}
};

//Dependency: Vector3f
//Dependency: GcSeed
struct GcBuildingOverrideData
{
	NMS::Vector3f Position;
	NMS::GcSeed Seed;
	int32_t Index;

	friend bool operator==(const GcBuildingOverrideData& lhs, const GcBuildingOverrideData& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Seed == rhs.Seed &&
		lhs.Index == rhs.Index;
	}
};

//Dependency: NMSString0x20A
struct GcRewardScanEvent
{
	enum class ScanEventTableEnum : uint32_t
	{
		Space = 0,
		Planet = 1,
		Missions = 2,
		Tutorial = 3,
		MissionsCreative = 4,
		NPCPlanetSite = 5,
	};

	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A FailureOSD;
	NMS_GameComponents::GcRewardScanEvent::ScanEventTableEnum ScanEventTable;
	float StartDelay;
	bool DoAerialScan;
	bool ForceSilentFailure;
	bool UseMissionSeedForEvent;
	bool UseStartDelayWhenNoAerialScan;

	friend bool operator==(const GcRewardScanEvent& lhs, const GcRewardScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.FailureOSD == rhs.FailureOSD &&
		lhs.ScanEventTable == rhs.ScanEventTable &&
		lhs.StartDelay == rhs.StartDelay &&
		lhs.DoAerialScan == rhs.DoAerialScan &&
		lhs.ForceSilentFailure == rhs.ForceSilentFailure &&
		lhs.UseMissionSeedForEvent == rhs.UseMissionSeedForEvent &&
		lhs.UseStartDelayWhenNoAerialScan == rhs.UseStartDelayWhenNoAerialScan;
	}
};

//Dependency: NMSString0x10
struct GcObjectSpawnDataVariant
{
	NMS::NMSString0x10 ID;
	float LodDistances[5];
	float Coverage;
	float FadeOutEndDistance;
	float FadeOutOffsetDistance;
	float FadeOutStartDistance;
	float FlatDensity;
	int32_t MaxImposterRadius;
	int32_t MaxRegionRadius;
	float SlopeDensity;
	float SlopeMultiplier;

	friend bool operator==(const GcObjectSpawnDataVariant& lhs, const GcObjectSpawnDataVariant& rhs) 
	{
		return lhs.ID == rhs.ID &&
		std::equal(std::begin(lhs.LodDistances), std::end(lhs.LodDistances), std::begin(rhs.LodDistances)) &&
		lhs.Coverage == rhs.Coverage &&
		lhs.FadeOutEndDistance == rhs.FadeOutEndDistance &&
		lhs.FadeOutOffsetDistance == rhs.FadeOutOffsetDistance &&
		lhs.FadeOutStartDistance == rhs.FadeOutStartDistance &&
		lhs.FlatDensity == rhs.FlatDensity &&
		lhs.MaxImposterRadius == rhs.MaxImposterRadius &&
		lhs.MaxRegionRadius == rhs.MaxRegionRadius &&
		lhs.SlopeDensity == rhs.SlopeDensity &&
		lhs.SlopeMultiplier == rhs.SlopeMultiplier;
	}
};

//Dependency: GcObjectSpawnDataVariant
//Dependency: GcTerrainTileType
//Dependency: GcResourceElement
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcObjectSpawnData
{
	enum class TypeEnum : uint32_t
	{
		Instanced = 0,
		Single = 1,
	};

	enum class PlacementPriorityEnum : uint32_t
	{
		Low = 0,
		Normal = 1,
		High = 2,
	};

	enum class OverlapStyleEnum : uint32_t
	{
		None = 0,
		SameSeed = 1,
		All = 2,
	};

	enum class LargeObjectCoverageEnum : uint32_t
	{
		DoNotPlace = 0,
		DoNotPlaceIgnoreFootprint = 1,
		DoNotPlaceClose = 2,
		DoNotPlaceAnywhereNear = 3,
		OnlyPlaceAround = 4,
		OnlyPlaceAroundIgnoreFootprint = 5,
		AlwaysPlace = 6,
	};

	enum class GroundColourIndexEnum : uint32_t
	{
		Auto = 0,
		Main = 1,
		Patch = 2,
	};

	NMS_GameComponents::GcObjectSpawnDataVariant QualityVariantData;
	NMS_GameComponents::GcResourceElement Resource;
	std::vector<NMS_GameComponents::GcResourceElement> AltResources;
	NMS::NMSString0x10 DebugName;
	NMS::NMSString0x10 DestroyedByVehicleEffect;
	std::vector<NMS_GameComponents::GcTerrainTileType> ExtraTileTypes;
	NMS::NMSString0x10 Placement;
	std::vector<NMS_GameComponents::GcObjectSpawnDataVariant> QualityVariants;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcObjectSpawnData::GroundColourIndexEnum GroundColourIndex;
	NMS_GameComponents::GcObjectSpawnData::LargeObjectCoverageEnum LargeObjectCoverage;
	float MaxAngle;
	float MaxHeight;
	float MaxLower;
	float MaxRaise;
	float MaxScale;
	float MaxScaleY;
	float MaxXZRotation;
	float MaxYRotation;
	float MinAngle;
	float MinHeight;
	float MinScale;
	float MinScaleY;
	int32_t Order;
	NMS_GameComponents::GcObjectSpawnData::OverlapStyleEnum OverlapStyle;
	float PatchEdgeScaling;
	NMS_GameComponents::GcObjectSpawnData::PlacementPriorityEnum PlacementPriority;
	float ShearWindStrength;
	float SlopeScaling;
	NMS_GameComponents::GcObjectSpawnData::TypeEnum Type;
	bool AlignToNormal;
	bool AutoCollision;
	bool CollideWithPlayer;
	bool CollideWithPlayerVehicle;
	bool CreaturesCanEat;
	bool DestroyedByPlayerShip;
	bool DestroyedByPlayerVehicle;
	bool DestroyedByTerrainEdit;
	bool InvisibleToCamera;
	bool IsFloatingIsland;
	bool MatchGroundColour;
	bool MoveToGroundOnUpgrade;
	bool RelativeToSeaLevel;
	bool SupportsScanToReveal;
	bool SwapPrimaryForRandomColour;
	bool SwapPrimaryForSecondaryColour;

	friend bool operator==(const GcObjectSpawnData& lhs, const GcObjectSpawnData& rhs) 
	{
		return lhs.QualityVariantData == rhs.QualityVariantData &&
		lhs.Resource == rhs.Resource &&
		lhs.AltResources == rhs.AltResources &&
		lhs.DebugName == rhs.DebugName &&
		lhs.DestroyedByVehicleEffect == rhs.DestroyedByVehicleEffect &&
		lhs.ExtraTileTypes == rhs.ExtraTileTypes &&
		lhs.Placement == rhs.Placement &&
		lhs.QualityVariants == rhs.QualityVariants &&
		lhs.Seed == rhs.Seed &&
		lhs.GroundColourIndex == rhs.GroundColourIndex &&
		lhs.LargeObjectCoverage == rhs.LargeObjectCoverage &&
		lhs.MaxAngle == rhs.MaxAngle &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MaxLower == rhs.MaxLower &&
		lhs.MaxRaise == rhs.MaxRaise &&
		lhs.MaxScale == rhs.MaxScale &&
		lhs.MaxScaleY == rhs.MaxScaleY &&
		lhs.MaxXZRotation == rhs.MaxXZRotation &&
		lhs.MaxYRotation == rhs.MaxYRotation &&
		lhs.MinAngle == rhs.MinAngle &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.MinScale == rhs.MinScale &&
		lhs.MinScaleY == rhs.MinScaleY &&
		lhs.Order == rhs.Order &&
		lhs.OverlapStyle == rhs.OverlapStyle &&
		lhs.PatchEdgeScaling == rhs.PatchEdgeScaling &&
		lhs.PlacementPriority == rhs.PlacementPriority &&
		lhs.ShearWindStrength == rhs.ShearWindStrength &&
		lhs.SlopeScaling == rhs.SlopeScaling &&
		lhs.Type == rhs.Type &&
		lhs.AlignToNormal == rhs.AlignToNormal &&
		lhs.AutoCollision == rhs.AutoCollision &&
		lhs.CollideWithPlayer == rhs.CollideWithPlayer &&
		lhs.CollideWithPlayerVehicle == rhs.CollideWithPlayerVehicle &&
		lhs.CreaturesCanEat == rhs.CreaturesCanEat &&
		lhs.DestroyedByPlayerShip == rhs.DestroyedByPlayerShip &&
		lhs.DestroyedByPlayerVehicle == rhs.DestroyedByPlayerVehicle &&
		lhs.DestroyedByTerrainEdit == rhs.DestroyedByTerrainEdit &&
		lhs.InvisibleToCamera == rhs.InvisibleToCamera &&
		lhs.IsFloatingIsland == rhs.IsFloatingIsland &&
		lhs.MatchGroundColour == rhs.MatchGroundColour &&
		lhs.MoveToGroundOnUpgrade == rhs.MoveToGroundOnUpgrade &&
		lhs.RelativeToSeaLevel == rhs.RelativeToSeaLevel &&
		lhs.SupportsScanToReveal == rhs.SupportsScanToReveal &&
		lhs.SwapPrimaryForRandomColour == rhs.SwapPrimaryForRandomColour &&
		lhs.SwapPrimaryForSecondaryColour == rhs.SwapPrimaryForSecondaryColour;
	}
};

struct GcModularCustomisationResourceType
{
	enum class ModularCustomisationResourceTypeEnum : uint32_t
	{
		MultiToolStaff = 0,
		Fighter = 1,
		Dropship = 2,
		Scientific = 3,
		Shuttle = 4,
		Sail = 5,
		ExhibitTRex = 6,
		ExhibitWorm = 7,
		ExhibitGrunt = 8,
		ExhibitQuadruped = 9,
		ExhibitBird = 10,
	};

	NMS_GameComponents::GcModularCustomisationResourceType::ModularCustomisationResourceTypeEnum ModularCustomisationResourceType;

	friend bool operator==(const GcModularCustomisationResourceType& lhs, const GcModularCustomisationResourceType& rhs) 
	{
		return lhs.ModularCustomisationResourceType == rhs.ModularCustomisationResourceType;
	}
};

//Dependency: GcModularCustomisationResourceType
struct GcExhibitAssemblyComponentData
{
	NMS_GameComponents::GcModularCustomisationResourceType ExhibitType;

	friend bool operator==(const GcExhibitAssemblyComponentData& lhs, const GcExhibitAssemblyComponentData& rhs) 
	{
		return lhs.ExhibitType == rhs.ExhibitType;
	}
};

//Dependency: GcPersistentBaseTypes
struct GcBuildingPartSearchType
{
	enum class BuildPartSearchTypeEnum : uint32_t
	{
		Base = 0,
		Freighter = 1,
		AllPlayerOwned = 2,
		OtherPlayerBase = 3,
	};

	std::vector<NMS_GameComponents::GcPersistentBaseTypes> BaseSearchFilters;
	NMS_GameComponents::GcBuildingPartSearchType::BuildPartSearchTypeEnum BuildPartSearchType;
	bool IncludeGlobalBaseObjects;
	bool IncludeOnlyOverlappingBases;

	friend bool operator==(const GcBuildingPartSearchType& lhs, const GcBuildingPartSearchType& rhs) 
	{
		return lhs.BaseSearchFilters == rhs.BaseSearchFilters &&
		lhs.BuildPartSearchType == rhs.BuildPartSearchType &&
		lhs.IncludeGlobalBaseObjects == rhs.IncludeGlobalBaseObjects &&
		lhs.IncludeOnlyOverlappingBases == rhs.IncludeOnlyOverlappingBases;
	}
};

//Dependency: NMSString0x20A
struct GcFriendlyDroneVocabularyEntry
{
	NMS::NMSString0x20A GenericFallback;

	friend bool operator==(const GcFriendlyDroneVocabularyEntry& lhs, const GcFriendlyDroneVocabularyEntry& rhs) 
	{
		return lhs.GenericFallback == rhs.GenericFallback;
	}
};

//Dependency: GcStatusMessageMissionMarkup
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatusMessageDefinition
{
	enum class ReplicateToEnum : uint32_t
	{
		None = 0,
		Fireteam = 1,
		Fireteam_SameUA = 2,
		Global = 3,
		Global_Distance = 4,
		Fireteam_Distance = 5,
		Fireteam_Global_Distance = 6,
		Not_Fireteam = 7,
	};

	NMS::NMSString0x20A CustomPrefixLocID;
	NMS::NMSString0x20A Message;
	NMS::NMSString0x10 Id;
	float DisplayDurationMultiplier;
	float Distance;
	NMS_GameComponents::GcStatusMessageMissionMarkup MissionMarkup;
	NMS_GameComponents::GcStatusMessageDefinition::ReplicateToEnum ReplicateTo;
	bool AddFriendlyDronePrefix;
	bool AddPetNamePrefix;
	bool AddPlayerNamePrefix;
	bool IncludePlayerName;
	bool OnlyInMultiplayer;
	bool OnlyOnFireteam;
	bool PostLocally;

	friend bool operator==(const GcStatusMessageDefinition& lhs, const GcStatusMessageDefinition& rhs) 
	{
		return lhs.CustomPrefixLocID == rhs.CustomPrefixLocID &&
		lhs.Message == rhs.Message &&
		lhs.Id == rhs.Id &&
		lhs.DisplayDurationMultiplier == rhs.DisplayDurationMultiplier &&
		lhs.Distance == rhs.Distance &&
		lhs.MissionMarkup == rhs.MissionMarkup &&
		lhs.ReplicateTo == rhs.ReplicateTo &&
		lhs.AddFriendlyDronePrefix == rhs.AddFriendlyDronePrefix &&
		lhs.AddPetNamePrefix == rhs.AddPetNamePrefix &&
		lhs.AddPlayerNamePrefix == rhs.AddPlayerNamePrefix &&
		lhs.IncludePlayerName == rhs.IncludePlayerName &&
		lhs.OnlyInMultiplayer == rhs.OnlyInMultiplayer &&
		lhs.OnlyOnFireteam == rhs.OnlyOnFireteam &&
		lhs.PostLocally == rhs.PostLocally;
	}
};

//Dependency: GcPetVocabularyEntry
//Dependency: GcFriendlyDroneVocabularyEntry
//Dependency: GcStatusMessageDefinition
//Dependency: Colour
struct GcStatusMessageDefinitions
{
	NMS::Colour MissionMarkupColour;
	NMS_GameComponents::GcPetVocabularyEntry PetChatTemplates[21];
	NMS_GameComponents::GcPetVocabularyEntry PetVocabulary[15];
	NMS_GameComponents::GcFriendlyDroneVocabularyEntry FriendlyDroneChatTemplates[5];
	std::vector<NMS_GameComponents::GcStatusMessageDefinition> Messages;

	friend bool operator==(const GcStatusMessageDefinitions& lhs, const GcStatusMessageDefinitions& rhs) 
	{
		return lhs.MissionMarkupColour == rhs.MissionMarkupColour &&
		std::equal(std::begin(lhs.PetChatTemplates), std::end(lhs.PetChatTemplates), std::begin(rhs.PetChatTemplates)) &&
		std::equal(std::begin(lhs.PetVocabulary), std::end(lhs.PetVocabulary), std::begin(rhs.PetVocabulary)) &&
		std::equal(std::begin(lhs.FriendlyDroneChatTemplates), std::end(lhs.FriendlyDroneChatTemplates), std::begin(rhs.FriendlyDroneChatTemplates)) &&
		lhs.Messages == rhs.Messages;
	}
};

struct GcItemFilterData
{
	NMSTemplate Root;

	friend bool operator==(const GcItemFilterData& lhs, const GcItemFilterData& rhs) 
	{
		return lhs.Root == rhs.Root;
	}
};

//Dependency: GcItemFilterData
//Dependency: NMSString0x10
struct GcItemFilterDataTableEntry
{
	NMS_GameComponents::GcItemFilterData Filter;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcItemFilterDataTableEntry& lhs, const GcItemFilterDataTableEntry& rhs) 
	{
		return lhs.Filter == rhs.Filter &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: NMSString0x100
struct GcCreatureWeirdMovementData
{
	enum class MoveModeEnum : uint32_t
	{
		Roll = 0,
		Float = 1,
		Drill = 2,
	};

	std::vector<NMS::NMSString0x100> FeetNames;
	float BobAmount;
	float BobSpeed;
	float JumpAngle;
	NMS_GameComponents::GcCreatureWeirdMovementData::MoveModeEnum MoveMode;
	float SpinSpeed;
	NMS::NMSString0x100 Node;

	friend bool operator==(const GcCreatureWeirdMovementData& lhs, const GcCreatureWeirdMovementData& rhs) 
	{
		return lhs.FeetNames == rhs.FeetNames &&
		lhs.BobAmount == rhs.BobAmount &&
		lhs.BobSpeed == rhs.BobSpeed &&
		lhs.JumpAngle == rhs.JumpAngle &&
		lhs.MoveMode == rhs.MoveMode &&
		lhs.SpinSpeed == rhs.SpinSpeed &&
		lhs.Node == rhs.Node;
	}
};

//Dependency: GcPersistentBaseTypes
struct GcMissionConditionBaseClaimed
{
	enum class IsOnCurrentSystemEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcPersistentBaseTypes Base;
	NMS_GameComponents::GcMissionConditionBaseClaimed::IsOnCurrentSystemEnum IsOnCurrentSystem;
	int32_t MinParts;
	bool Claimed;
	bool MustBeInBase;

	friend bool operator==(const GcMissionConditionBaseClaimed& lhs, const GcMissionConditionBaseClaimed& rhs) 
	{
		return lhs.Base == rhs.Base &&
		lhs.IsOnCurrentSystem == rhs.IsOnCurrentSystem &&
		lhs.MinParts == rhs.MinParts &&
		lhs.Claimed == rhs.Claimed &&
		lhs.MustBeInBase == rhs.MustBeInBase;
	}
};

struct GcCostPoliceCargoBribe
{
	int32_t Amount;
	bool IncludeNipNip;
	bool OnlyCargoProbeInventories;

	friend bool operator==(const GcCostPoliceCargoBribe& lhs, const GcCostPoliceCargoBribe& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.IncludeNipNip == rhs.IncludeNipNip &&
		lhs.OnlyCargoProbeInventories == rhs.OnlyCargoProbeInventories;
	}
};

//Dependency: VariableSizeString
struct GcHUDMarkerData
{
	NMS::VariableSizeString Distance;
	NMS::VariableSizeString Icon;
	NMS::VariableSizeString IconBehind;

	friend bool operator==(const GcHUDMarkerData& lhs, const GcHUDMarkerData& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.Icon == rhs.Icon &&
		lhs.IconBehind == rhs.IconBehind;
	}
};

struct GcCostFossilComponent
{

	friend bool operator==(const GcCostFossilComponent& lhs, const GcCostFossilComponent& rhs) 
	{
		return true;
	}
};

struct GcCostCreatureCanLayEggs
{

	friend bool operator==(const GcCostCreatureCanLayEggs& lhs, const GcCostCreatureCanLayEggs& rhs) 
	{
		return true;
	}
};

//Dependency: Vector4f
struct GcInteractionData
{
	NMS::Vector4f Position;
	uint64_t GalacticAddress;
	uint64_t Value;

	friend bool operator==(const GcInteractionData& lhs, const GcInteractionData& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.Value == rhs.Value;
	}
};

struct GcPlayerWeaponComponentData
{

	friend bool operator==(const GcPlayerWeaponComponentData& lhs, const GcPlayerWeaponComponentData& rhs) 
	{
		return true;
	}
};

struct GcBuildingPlacementErrorTypes
{
	enum class InvalidPlacementReasonEnum : uint32_t
	{
		Offline = 0,
		InvalidBiome = 1,
		InvalidAboveWater = 2,
		InvalidUnderwater = 3,
		PlanetLimitReached = 4,
		BaseLimitReached = 5,
		RegionLimitReached = 6,
		InvalidMaxBasesReached = 7,
		InvalidOverlappingAnyBase = 8,
		InvalidOverlappingSettlement = 9,
		InvalidOverlappingBase = 10,
		OutOfBaseRange = 11,
		OutOfConnectionRange = 12,
		LinkGridMismatch = 13,
		InsufficientResources = 14,
		ComplexityLimitReached = 15,
		SubstanceOnly = 16,
		InvalidPosition = 17,
		InvalidSnap = 18,
		MustPlaceOnTerrain = 19,
		Collision = 20,
		ShipInside = 21,
		PlayerInside = 22,
	};

	NMS_GameComponents::GcBuildingPlacementErrorTypes::InvalidPlacementReasonEnum InvalidPlacementReason;

	friend bool operator==(const GcBuildingPlacementErrorTypes& lhs, const GcBuildingPlacementErrorTypes& rhs) 
	{
		return lhs.InvalidPlacementReason == rhs.InvalidPlacementReason;
	}
};

//Dependency: GcHand
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcGrabbableData
{
	enum class GrabTypeEnum : uint32_t
	{
		Default = 0,
		EjectHandle = 1,
		ControlStickLeft = 2,
		ControlStickRight = 3,
	};

	NMS::NMSString0x10 HandPose;
	NMS::Vector2f RotationLimits;
	float AttachTime;
	float DetachTime;
	float GrabRadius;
	NMS_GameComponents::GcGrabbableData::GrabTypeEnum GrabType;
	NMS_GameComponents::GcHand Hand;
	float MovementMaxSpeed;
	float MovementRequiredForActivation;
	float MovementReturnSpeed;
	float ReleaseRadius;
	float ToggleGrabTime;
	NMS::NMSString0x20 LocatorName;
	NMS::NMSString0x20 MovementEndLocator;
	NMS::NMSString0x20 MovementStartLocator;
	bool AllowOtherWayUp;
	bool AutoGrab;

	friend bool operator==(const GcGrabbableData& lhs, const GcGrabbableData& rhs) 
	{
		return lhs.HandPose == rhs.HandPose &&
		lhs.RotationLimits == rhs.RotationLimits &&
		lhs.AttachTime == rhs.AttachTime &&
		lhs.DetachTime == rhs.DetachTime &&
		lhs.GrabRadius == rhs.GrabRadius &&
		lhs.GrabType == rhs.GrabType &&
		lhs.Hand == rhs.Hand &&
		lhs.MovementMaxSpeed == rhs.MovementMaxSpeed &&
		lhs.MovementRequiredForActivation == rhs.MovementRequiredForActivation &&
		lhs.MovementReturnSpeed == rhs.MovementReturnSpeed &&
		lhs.ReleaseRadius == rhs.ReleaseRadius &&
		lhs.ToggleGrabTime == rhs.ToggleGrabTime &&
		lhs.LocatorName == rhs.LocatorName &&
		lhs.MovementEndLocator == rhs.MovementEndLocator &&
		lhs.MovementStartLocator == rhs.MovementStartLocator &&
		lhs.AllowOtherWayUp == rhs.AllowOtherWayUp &&
		lhs.AutoGrab == rhs.AutoGrab;
	}
};

//Dependency: NMSString0x10
struct GcInteractionBaseBuildingState
{
	NMS::NMSString0x10 TriggerAction;
	int32_t Time;

	friend bool operator==(const GcInteractionBaseBuildingState& lhs, const GcInteractionBaseBuildingState& rhs) 
	{
		return lhs.TriggerAction == rhs.TriggerAction &&
		lhs.Time == rhs.Time;
	}
};

struct GcInventorySortOptions
{
	enum class InventorySortEnum : uint32_t
	{
		None = 0,
		Value = 1,
		Type = 2,
		Name = 3,
		Colour = 4,
	};

	NMS_GameComponents::GcInventorySortOptions::InventorySortEnum InventorySort;

	friend bool operator==(const GcInventorySortOptions& lhs, const GcInventorySortOptions& rhs) 
	{
		return lhs.InventorySort == rhs.InventorySort;
	}
};

struct GcBuildingSpawnSlot
{
	int32_t BuildingDataIndex;
	float Probability;
	bool HasBuilding;

	friend bool operator==(const GcBuildingSpawnSlot& lhs, const GcBuildingSpawnSlot& rhs) 
	{
		return lhs.BuildingDataIndex == rhs.BuildingDataIndex &&
		lhs.Probability == rhs.Probability &&
		lhs.HasBuilding == rhs.HasBuilding;
	}
};

//Dependency: NMSString0x100
struct GcIkPistonData
{
	NMS::NMSString0x100 Joint1Name;
	NMS::NMSString0x100 Joint2Name;

	friend bool operator==(const GcIkPistonData& lhs, const GcIkPistonData& rhs) 
	{
		return lhs.Joint1Name == rhs.Joint1Name &&
		lhs.Joint2Name == rhs.Joint2Name;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCreatureVocalTestData
{
	NMS::NMSString0x10 Id;
	float Size;
	float Squawk;
	NMS::NMSString0x20 Genus;

	friend bool operator==(const GcCreatureVocalTestData& lhs, const GcCreatureVocalTestData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Size == rhs.Size &&
		lhs.Squawk == rhs.Squawk &&
		lhs.Genus == rhs.Genus;
	}
};

struct GcBuildingSystemTypeEnum
{
	enum class BuildingSystemTypeEnum : uint32_t
	{
		Normal = 0,
		AbandonedSystem = 1,
	};

	NMS_GameComponents::GcBuildingSystemTypeEnum::BuildingSystemTypeEnum BuildingSystemType;

	friend bool operator==(const GcBuildingSystemTypeEnum& lhs, const GcBuildingSystemTypeEnum& rhs) 
	{
		return lhs.BuildingSystemType == rhs.BuildingSystemType;
	}
};

struct GcDeathConsequencesDifficultyOption
{
	enum class DeathConsequencesDifficultyEnum : uint32_t
	{
		None = 0,
		ItemGrave = 1,
		DestroyItems = 2,
		DestroySave = 3,
	};

	NMS_GameComponents::GcDeathConsequencesDifficultyOption::DeathConsequencesDifficultyEnum DeathConsequencesDifficulty;

	friend bool operator==(const GcDeathConsequencesDifficultyOption& lhs, const GcDeathConsequencesDifficultyOption& rhs) 
	{
		return lhs.DeathConsequencesDifficulty == rhs.DeathConsequencesDifficulty;
	}
};

struct GcDamageReceivedDifficultyOption
{
	enum class DamageReceivedDifficultyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcDamageReceivedDifficultyOption::DamageReceivedDifficultyEnum DamageReceivedDifficulty;

	friend bool operator==(const GcDamageReceivedDifficultyOption& lhs, const GcDamageReceivedDifficultyOption& rhs) 
	{
		return lhs.DamageReceivedDifficulty == rhs.DamageReceivedDifficulty;
	}
};

struct GcScannerRechargeDifficultyOption
{
	enum class ScannerRechargeDifficultyEnum : uint32_t
	{
		VeryFast = 0,
		Fast = 1,
		Normal = 2,
		Slow = 3,
	};

	NMS_GameComponents::GcScannerRechargeDifficultyOption::ScannerRechargeDifficultyEnum ScannerRechargeDifficulty;

	friend bool operator==(const GcScannerRechargeDifficultyOption& lhs, const GcScannerRechargeDifficultyOption& rhs) 
	{
		return lhs.ScannerRechargeDifficulty == rhs.ScannerRechargeDifficulty;
	}
};

struct GcCurrencyCostDifficultyOption
{
	enum class CurrencyCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Cheap = 1,
		Normal = 2,
		Expensive = 3,
	};

	NMS_GameComponents::GcCurrencyCostDifficultyOption::CurrencyCostDifficultyEnum CurrencyCostDifficulty;

	friend bool operator==(const GcCurrencyCostDifficultyOption& lhs, const GcCurrencyCostDifficultyOption& rhs) 
	{
		return lhs.CurrencyCostDifficulty == rhs.CurrencyCostDifficulty;
	}
};

struct GcEnergyDrainDifficultyOption
{
	enum class EnergyDrainDifficultyEnum : uint32_t
	{
		Slow = 0,
		Normal = 1,
		Fast = 2,
	};

	NMS_GameComponents::GcEnergyDrainDifficultyOption::EnergyDrainDifficultyEnum EnergyDrainDifficulty;

	friend bool operator==(const GcEnergyDrainDifficultyOption& lhs, const GcEnergyDrainDifficultyOption& rhs) 
	{
		return lhs.EnergyDrainDifficulty == rhs.EnergyDrainDifficulty;
	}
};

struct GcFishingDifficultyOption
{
	enum class FishingDifficultyEnum : uint32_t
	{
		AutoCatch = 0,
		LongCatchWindow = 1,
		NormalCatchWindow = 2,
		ShortCatchWindow = 3,
	};

	NMS_GameComponents::GcFishingDifficultyOption::FishingDifficultyEnum FishingDifficulty;

	friend bool operator==(const GcFishingDifficultyOption& lhs, const GcFishingDifficultyOption& rhs) 
	{
		return lhs.FishingDifficulty == rhs.FishingDifficulty;
	}
};

struct GcHazardDrainDifficultyOption
{
	enum class HazardDrainDifficultyEnum : uint32_t
	{
		Slow = 0,
		Normal = 1,
		Fast = 2,
	};

	NMS_GameComponents::GcHazardDrainDifficultyOption::HazardDrainDifficultyEnum HazardDrainDifficulty;

	friend bool operator==(const GcHazardDrainDifficultyOption& lhs, const GcHazardDrainDifficultyOption& rhs) 
	{
		return lhs.HazardDrainDifficulty == rhs.HazardDrainDifficulty;
	}
};

struct GcInventoryStackLimitsDifficultyOption
{
	enum class InventoryStackLimitsDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcInventoryStackLimitsDifficultyOption::InventoryStackLimitsDifficultyEnum InventoryStackLimitsDifficulty;

	friend bool operator==(const GcInventoryStackLimitsDifficultyOption& lhs, const GcInventoryStackLimitsDifficultyOption& rhs) 
	{
		return lhs.InventoryStackLimitsDifficulty == rhs.InventoryStackLimitsDifficulty;
	}
};

struct GcSubstanceCollectionDifficultyOption
{
	enum class SubstanceCollectionDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcSubstanceCollectionDifficultyOption::SubstanceCollectionDifficultyEnum SubstanceCollectionDifficulty;

	friend bool operator==(const GcSubstanceCollectionDifficultyOption& lhs, const GcSubstanceCollectionDifficultyOption& rhs) 
	{
		return lhs.SubstanceCollectionDifficulty == rhs.SubstanceCollectionDifficulty;
	}
};

struct GcSprintingCostDifficultyOption
{
	enum class SprintingCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Low = 1,
		Full = 2,
	};

	NMS_GameComponents::GcSprintingCostDifficultyOption::SprintingCostDifficultyEnum SprintingCostDifficulty;

	friend bool operator==(const GcSprintingCostDifficultyOption& lhs, const GcSprintingCostDifficultyOption& rhs) 
	{
		return lhs.SprintingCostDifficulty == rhs.SprintingCostDifficulty;
	}
};

//Dependency: GcDeathConsequencesDifficultyOption
//Dependency: GcDamageReceivedDifficultyOption
//Dependency: GcActiveSurvivalBarsDifficultyOption
//Dependency: GcBreakTechOnDamageDifficultyOption
//Dependency: GcScannerRechargeDifficultyOption
//Dependency: GcChargingRequirementsDifficultyOption
//Dependency: GcDamageGivenDifficultyOption
//Dependency: GcCreatureHostilityDifficultyOption
//Dependency: GcCurrencyCostDifficultyOption
//Dependency: GcNPCPopulationDifficultyOption
//Dependency: GcEnergyDrainDifficultyOption
//Dependency: GcFishingDifficultyOption
//Dependency: GcFuelUseDifficultyOption
//Dependency: GcCombatTimerDifficultyOption
//Dependency: GcHazardDrainDifficultyOption
//Dependency: GcInventoryStackLimitsDifficultyOption
//Dependency: GcItemShopAvailabilityDifficultyOption
//Dependency: GcSubstanceCollectionDifficultyOption
//Dependency: GcLaunchFuelCostDifficultyOption
//Dependency: GcReputationGainDifficultyOption
//Dependency: GcSprintingCostDifficultyOption
struct GcDifficultySettingsData
{
	NMS_GameComponents::GcActiveSurvivalBarsDifficultyOption ActiveSurvivalBars;
	NMS_GameComponents::GcBreakTechOnDamageDifficultyOption BreakTechOnDamage;
	NMS_GameComponents::GcChargingRequirementsDifficultyOption ChargingRequirements;
	NMS_GameComponents::GcCreatureHostilityDifficultyOption CreatureHostility;
	NMS_GameComponents::GcCurrencyCostDifficultyOption CurrencyCost;
	NMS_GameComponents::GcDamageGivenDifficultyOption DamageGiven;
	NMS_GameComponents::GcDamageReceivedDifficultyOption DamageReceived;
	NMS_GameComponents::GcDeathConsequencesDifficultyOption DeathConsequences;
	NMS_GameComponents::GcEnergyDrainDifficultyOption EnergyDrain;
	NMS_GameComponents::GcFishingDifficultyOption Fishing;
	NMS_GameComponents::GcFuelUseDifficultyOption FuelUse;
	NMS_GameComponents::GcCombatTimerDifficultyOption GroundCombatTimers;
	NMS_GameComponents::GcHazardDrainDifficultyOption HazardDrain;
	NMS_GameComponents::GcInventoryStackLimitsDifficultyOption InventoryStackLimits;
	NMS_GameComponents::GcItemShopAvailabilityDifficultyOption ItemShopAvailability;
	NMS_GameComponents::GcLaunchFuelCostDifficultyOption LaunchFuelCost;
	NMS_GameComponents::GcNPCPopulationDifficultyOption NPCPopulation;
	NMS_GameComponents::GcReputationGainDifficultyOption ReputationGain;
	NMS_GameComponents::GcScannerRechargeDifficultyOption ScannerRecharge;
	NMS_GameComponents::GcCombatTimerDifficultyOption SpaceCombatTimers;
	NMS_GameComponents::GcSprintingCostDifficultyOption SprintingCost;
	NMS_GameComponents::GcSubstanceCollectionDifficultyOption SubstanceCollection;
	bool AllSlotsUnlocked;
	bool BaseAutoPower;
	bool CraftingIsFree;
	bool InventoriesAlwaysInRange;
	bool SettingsLocked;
	bool StartWithAllItemsKnown;
	bool TutorialEnabled;
	bool WarpDriveRequirements;

	friend bool operator==(const GcDifficultySettingsData& lhs, const GcDifficultySettingsData& rhs) 
	{
		return lhs.ActiveSurvivalBars == rhs.ActiveSurvivalBars &&
		lhs.BreakTechOnDamage == rhs.BreakTechOnDamage &&
		lhs.ChargingRequirements == rhs.ChargingRequirements &&
		lhs.CreatureHostility == rhs.CreatureHostility &&
		lhs.CurrencyCost == rhs.CurrencyCost &&
		lhs.DamageGiven == rhs.DamageGiven &&
		lhs.DamageReceived == rhs.DamageReceived &&
		lhs.DeathConsequences == rhs.DeathConsequences &&
		lhs.EnergyDrain == rhs.EnergyDrain &&
		lhs.Fishing == rhs.Fishing &&
		lhs.FuelUse == rhs.FuelUse &&
		lhs.GroundCombatTimers == rhs.GroundCombatTimers &&
		lhs.HazardDrain == rhs.HazardDrain &&
		lhs.InventoryStackLimits == rhs.InventoryStackLimits &&
		lhs.ItemShopAvailability == rhs.ItemShopAvailability &&
		lhs.LaunchFuelCost == rhs.LaunchFuelCost &&
		lhs.NPCPopulation == rhs.NPCPopulation &&
		lhs.ReputationGain == rhs.ReputationGain &&
		lhs.ScannerRecharge == rhs.ScannerRecharge &&
		lhs.SpaceCombatTimers == rhs.SpaceCombatTimers &&
		lhs.SprintingCost == rhs.SprintingCost &&
		lhs.SubstanceCollection == rhs.SubstanceCollection &&
		lhs.AllSlotsUnlocked == rhs.AllSlotsUnlocked &&
		lhs.BaseAutoPower == rhs.BaseAutoPower &&
		lhs.CraftingIsFree == rhs.CraftingIsFree &&
		lhs.InventoriesAlwaysInRange == rhs.InventoriesAlwaysInRange &&
		lhs.SettingsLocked == rhs.SettingsLocked &&
		lhs.StartWithAllItemsKnown == rhs.StartWithAllItemsKnown &&
		lhs.TutorialEnabled == rhs.TutorialEnabled &&
		lhs.WarpDriveRequirements == rhs.WarpDriveRequirements;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCavesEnum
{
	enum class CaveTypesEnum : uint32_t
	{
		Underground = 0,
	};

	NMS_Toolkit::TkCavesEnum::CaveTypesEnum CaveTypes;

	friend bool operator==(const TkCavesEnum& lhs, const TkCavesEnum& rhs) 
	{
		return lhs.CaveTypes == rhs.CaveTypes;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcEncounterType
{
	enum class EncounterTypeEnum : uint32_t
	{
		FactoryGuards = 0,
		HarvesterGuards = 1,
		ScrapHeap = 2,
		Reward = 3,
		CorruptedDroneInteract = 4,
		GroundWorms = 5,
		DroneHiveGuards = 6,
		CorruptDronePillar = 7,
		Fossil = 8,
	};

	NMS_GameComponents::GcEncounterType::EncounterTypeEnum EncounterType;

	friend bool operator==(const GcEncounterType& lhs, const GcEncounterType& rhs) 
	{
		return lhs.EncounterType == rhs.EncounterType;
	}
};

//Dependency: GcEncounterType
//Dependency: NMSString0x10
struct GcEncounterComponentData
{
	std::vector<NMS::NMSString0x10> InteractMissionTable;
	NMS_GameComponents::GcEncounterType EncounterType;

	friend bool operator==(const GcEncounterComponentData& lhs, const GcEncounterComponentData& rhs) 
	{
		return lhs.InteractMissionTable == rhs.InteractMissionTable &&
		lhs.EncounterType == rhs.EncounterType;
	}
};

//Dependency: GcEncounterComponentData
struct GcPerformanceGuard
{
	NMS_GameComponents::GcEncounterComponentData Encounter;
	float Radius;

	friend bool operator==(const GcPerformanceGuard& lhs, const GcPerformanceGuard& rhs) 
	{
		return lhs.Encounter == rhs.Encounter &&
		lhs.Radius == rhs.Radius;
	}
};

struct GcBuoyancyComponentData
{
	float AirborneSpringTime;
	float AnchorArrivalTime;
	float MaximumAnchorForce;
	float MaximumForce;
	float MinimumForce;
	float SelfRightingStrength;
	float TargetHeightBufferFactor;
	float TargetSurfaceHeightCalm;
	float TargetSurfaceHeightRough;
	float UnderwaterSpringTime;
	float UpwardRotationFactor;
	float WaveRotationFactor;
	bool SetAnchorOnPrepare;

	friend bool operator==(const GcBuoyancyComponentData& lhs, const GcBuoyancyComponentData& rhs) 
	{
		return lhs.AirborneSpringTime == rhs.AirborneSpringTime &&
		lhs.AnchorArrivalTime == rhs.AnchorArrivalTime &&
		lhs.MaximumAnchorForce == rhs.MaximumAnchorForce &&
		lhs.MaximumForce == rhs.MaximumForce &&
		lhs.MinimumForce == rhs.MinimumForce &&
		lhs.SelfRightingStrength == rhs.SelfRightingStrength &&
		lhs.TargetHeightBufferFactor == rhs.TargetHeightBufferFactor &&
		lhs.TargetSurfaceHeightCalm == rhs.TargetSurfaceHeightCalm &&
		lhs.TargetSurfaceHeightRough == rhs.TargetSurfaceHeightRough &&
		lhs.UnderwaterSpringTime == rhs.UnderwaterSpringTime &&
		lhs.UpwardRotationFactor == rhs.UpwardRotationFactor &&
		lhs.WaveRotationFactor == rhs.WaveRotationFactor &&
		lhs.SetAnchorOnPrepare == rhs.SetAnchorOnPrepare;
	}
};

//Dependency: NMSString0x10
struct GcRewardMissionOverride
{
	NMS::NMSString0x10 ForceLocalMissionSelection;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 Reward;

	friend bool operator==(const GcRewardMissionOverride& lhs, const GcRewardMissionOverride& rhs) 
	{
		return lhs.ForceLocalMissionSelection == rhs.ForceLocalMissionSelection &&
		lhs.Mission == rhs.Mission &&
		lhs.Reward == rhs.Reward;
	}
};

//Dependency: GcRewardMissionOverride
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryUtilityOverride
{
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 Reward;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> SpecificRewardOverrideTable;

	friend bool operator==(const GcStoryUtilityOverride& lhs, const GcStoryUtilityOverride& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Reward == rhs.Reward &&
		lhs.SpecificRewardOverrideTable == rhs.SpecificRewardOverrideTable;
	}
};

//Dependency: GcInteractionActivationCost
//Dependency: GcAlienPuzzleMissionOverride
//Dependency: GcStoryUtilityOverride
//Dependency: GcAlienRace
//Dependency: GcAdditionalOptionMissionOverride
//Dependency: TkModelRendererData
//Dependency: GcInteractionDof
//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcInteractionComponentData
{
	enum class OverrideInteriorExteriorMarkerEnum : uint32_t
	{
		No = 0,
		Interior = 1,
		Exterior = 2,
	};

	enum class InteractionActionEnum : uint32_t
	{
		PressButton = 0,
		HoldButton = 1,
		Shoot = 2,
	};

	NMS_Toolkit::TkModelRendererData Renderer;
	NMS_Toolkit::TkModelRendererData RendererAlt;
	NMS_GameComponents::GcInteractionActivationCost ActivationCost;
	NMS_GameComponents::GcInteractionActivationCost SecondaryActivationCost;
	NMS_GameComponents::GcStoryUtilityOverride StoryUtilityOverrideData;
	std::vector<NMS_GameComponents::GcAdditionalOptionMissionOverride> AdditionalOptionsOverrideTable;
	std::vector<NMS_Toolkit::TkModelRendererData> EventRenderers;
	std::vector<NMS_Toolkit::TkModelRendererData> EventRenderersAlt;
	std::vector<NMS_GameComponents::GcInteractionDof> EventRenderersDoF;
	NMSTemplate InteractionSpecificData;
	std::vector<NMS_GameComponents::GcAlienPuzzleMissionOverride> PuzzleMissionOverrideTable;
	NMS::NMSString0x10 StartMissionOnUse;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 TriggerActionOnPrepare;
	NMS_GameComponents::GcInteractionDof DepthOfField;
	float AttractDistanceSq;
	float BlendFromCameraTime;
	float BlendToCameraTime;
	float InteractAngle;
	float InteractDistance;
	NMS_GameComponents::GcInteractionComponentData::InteractionActionEnum InteractionAction;
	NMS_GameComponents::GcInteractionType InteractionType;
	float InWorldUIForcedOffset;
	float InWorldUIForcedOffsetV2;
	float InWorldUIMinDistOverride;
	float InWorldUIMinDistOverrideV2;
	float InWorldUIScaler;
	NMS_GameComponents::GcInteractionComponentData::OverrideInteriorExteriorMarkerEnum OverrideInteriorExteriorMarker;
	NMS_GameComponents::GcAlienRace Race;
	float SecondaryCameraTransitionTime;
	NMS_GameComponents::GcInteractionType SecondaryInteractionType;
	bool AllowMissionUnderwater;
	bool BroadcastTriggerAction;
	bool InteractInvertFace;
	bool InWorldUIUseCameraUp;
	bool OnlyAvailableInAbandonedMode;
	bool RepeatInteraction;
	bool ReseedAfterRewardSuccess;
	bool SecondaryMeshAlwaysVisible;
	bool UseInteractCamera;
	bool UseIntermediateUI;
	bool UsePersonalPersistentBuffer;
	bool UseUnlockedInteractionIfMaintDone;

	friend bool operator==(const GcInteractionComponentData& lhs, const GcInteractionComponentData& rhs) 
	{
		return lhs.Renderer == rhs.Renderer &&
		lhs.RendererAlt == rhs.RendererAlt &&
		lhs.ActivationCost == rhs.ActivationCost &&
		lhs.SecondaryActivationCost == rhs.SecondaryActivationCost &&
		lhs.StoryUtilityOverrideData == rhs.StoryUtilityOverrideData &&
		lhs.AdditionalOptionsOverrideTable == rhs.AdditionalOptionsOverrideTable &&
		lhs.EventRenderers == rhs.EventRenderers &&
		lhs.EventRenderersAlt == rhs.EventRenderersAlt &&
		lhs.EventRenderersDoF == rhs.EventRenderersDoF &&
		lhs.InteractionSpecificData == rhs.InteractionSpecificData &&
		lhs.PuzzleMissionOverrideTable == rhs.PuzzleMissionOverrideTable &&
		lhs.StartMissionOnUse == rhs.StartMissionOnUse &&
		lhs.TriggerAction == rhs.TriggerAction &&
		lhs.TriggerActionOnPrepare == rhs.TriggerActionOnPrepare &&
		lhs.DepthOfField == rhs.DepthOfField &&
		lhs.AttractDistanceSq == rhs.AttractDistanceSq &&
		lhs.BlendFromCameraTime == rhs.BlendFromCameraTime &&
		lhs.BlendToCameraTime == rhs.BlendToCameraTime &&
		lhs.InteractAngle == rhs.InteractAngle &&
		lhs.InteractDistance == rhs.InteractDistance &&
		lhs.InteractionAction == rhs.InteractionAction &&
		lhs.InteractionType == rhs.InteractionType &&
		lhs.InWorldUIForcedOffset == rhs.InWorldUIForcedOffset &&
		lhs.InWorldUIForcedOffsetV2 == rhs.InWorldUIForcedOffsetV2 &&
		lhs.InWorldUIMinDistOverride == rhs.InWorldUIMinDistOverride &&
		lhs.InWorldUIMinDistOverrideV2 == rhs.InWorldUIMinDistOverrideV2 &&
		lhs.InWorldUIScaler == rhs.InWorldUIScaler &&
		lhs.OverrideInteriorExteriorMarker == rhs.OverrideInteriorExteriorMarker &&
		lhs.Race == rhs.Race &&
		lhs.SecondaryCameraTransitionTime == rhs.SecondaryCameraTransitionTime &&
		lhs.SecondaryInteractionType == rhs.SecondaryInteractionType &&
		lhs.AllowMissionUnderwater == rhs.AllowMissionUnderwater &&
		lhs.BroadcastTriggerAction == rhs.BroadcastTriggerAction &&
		lhs.InteractInvertFace == rhs.InteractInvertFace &&
		lhs.InWorldUIUseCameraUp == rhs.InWorldUIUseCameraUp &&
		lhs.OnlyAvailableInAbandonedMode == rhs.OnlyAvailableInAbandonedMode &&
		lhs.RepeatInteraction == rhs.RepeatInteraction &&
		lhs.ReseedAfterRewardSuccess == rhs.ReseedAfterRewardSuccess &&
		lhs.SecondaryMeshAlwaysVisible == rhs.SecondaryMeshAlwaysVisible &&
		lhs.UseInteractCamera == rhs.UseInteractCamera &&
		lhs.UseIntermediateUI == rhs.UseIntermediateUI &&
		lhs.UsePersonalPersistentBuffer == rhs.UsePersonalPersistentBuffer &&
		lhs.UseUnlockedInteractionIfMaintDone == rhs.UseUnlockedInteractionIfMaintDone;
	}
};

//Dependency: NMSString0x10
struct GcRewardForgetSpecificProductRecipe
{
	std::vector<NMS::NMSString0x10> ProductList;

	friend bool operator==(const GcRewardForgetSpecificProductRecipe& lhs, const GcRewardForgetSpecificProductRecipe& rhs) 
	{
		return lhs.ProductList == rhs.ProductList;
	}
};

//Dependency: GcButtonSpawnOffset
//Dependency: TkInputEnum
struct GcButtonSpawn
{
	enum class EventEnum : uint32_t
	{
		None = 0,
		Pirates = 1,
		Police = 2,
		Traders = 3,
		Walker = 4,
	};

	NMS_GameComponents::GcButtonSpawnOffset Offset;
	NMS_Toolkit::TkInputEnum Button;
	NMS_GameComponents::GcButtonSpawn::EventEnum Event;

	friend bool operator==(const GcButtonSpawn& lhs, const GcButtonSpawn& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.Button == rhs.Button &&
		lhs.Event == rhs.Event;
	}
};

//Dependency: GcButtonSpawn
struct GcButtonSpawnTable
{
	std::vector<NMS_GameComponents::GcButtonSpawn> ButtonSpawns;

	friend bool operator==(const GcButtonSpawnTable& lhs, const GcButtonSpawnTable& rhs) 
	{
		return lhs.ButtonSpawns == rhs.ButtonSpawns;
	}
};

//Dependency: GcPlayerCommunicatorMessage
struct GcPlayerCommunicatorMessageWeighted
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Message;
	int32_t Weight;

	friend bool operator==(const GcPlayerCommunicatorMessageWeighted& lhs, const GcPlayerCommunicatorMessageWeighted& rhs) 
	{
		return lhs.Message == rhs.Message &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: NMSString0x10
struct GcByteBeatJukeboxData
{
	NMS::NMSString0x10 Playlist[16];
	bool Playing;
	bool Shuffle;

	friend bool operator==(const GcByteBeatJukeboxData& lhs, const GcByteBeatJukeboxData& rhs) 
	{
		return std::equal(std::begin(lhs.Playlist), std::end(lhs.Playlist), std::begin(rhs.Playlist)) &&
		lhs.Playing == rhs.Playing &&
		lhs.Shuffle == rhs.Shuffle;
	}
};

//Dependency: NMSString0x10
struct GcDestroyAction
{
	NMS::NMSString0x10 PlayEffect;
	bool DestroyAll;
	bool UseDestructables;

	friend bool operator==(const GcDestroyAction& lhs, const GcDestroyAction& rhs) 
	{
		return lhs.PlayEffect == rhs.PlayEffect &&
		lhs.DestroyAll == rhs.DestroyAll &&
		lhs.UseDestructables == rhs.UseDestructables;
	}
};

//Dependency: NMSString0x10
struct GcRewardSetCurrentMission
{
	NMS::NMSString0x10 Mission;
	bool Seeded;
	bool Silent;

	friend bool operator==(const GcRewardSetCurrentMission& lhs, const GcRewardSetCurrentMission& rhs) 
	{
		return lhs.Mission == rhs.Mission &&
		lhs.Seeded == rhs.Seeded &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceShowSeasonTimeWarning
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	float TimeToShow;

	friend bool operator==(const GcMissionSequenceShowSeasonTimeWarning& lhs, const GcMissionSequenceShowSeasonTimeWarning& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.TimeToShow == rhs.TimeToShow;
	}
};

struct GcCreatureAttractorComponentData
{
	enum class AttractorTypeEnum : uint32_t
	{
		Food = 0,
		Harvester = 1,
	};

	float ArriveDist;
	NMS_GameComponents::GcCreatureAttractorComponentData::AttractorTypeEnum AttractorType;
	bool Static;
	bool Universal;

	friend bool operator==(const GcCreatureAttractorComponentData& lhs, const GcCreatureAttractorComponentData& rhs) 
	{
		return lhs.ArriveDist == rhs.ArriveDist &&
		lhs.AttractorType == rhs.AttractorType &&
		lhs.Static == rhs.Static &&
		lhs.Universal == rhs.Universal;
	}
};

//Dependency: TkTextureResource
struct GcByteBeatIcons
{
	NMS_Toolkit::TkTextureResource Icons[18];
	NMS_Toolkit::TkTextureResource SawTooth;
	NMS_Toolkit::TkTextureResource Sine;
	NMS_Toolkit::TkTextureResource Square;
	NMS_Toolkit::TkTextureResource Triangle;

	friend bool operator==(const GcByteBeatIcons& lhs, const GcByteBeatIcons& rhs) 
	{
		return std::equal(std::begin(lhs.Icons), std::end(lhs.Icons), std::begin(rhs.Icons)) &&
		lhs.SawTooth == rhs.SawTooth &&
		lhs.Sine == rhs.Sine &&
		lhs.Square == rhs.Square &&
		lhs.Triangle == rhs.Triangle;
	}
};

struct GcMessageTitanFall
{

	friend bool operator==(const GcMessageTitanFall& lhs, const GcMessageTitanFall& rhs) 
	{
		return true;
	}
};

//Dependency: GcByteBeatSong
//Dependency: NMSString0x10
struct GcByteBeatLibraryData
{
	NMS_GameComponents::GcByteBeatSong MySongs[8];
	NMS::NMSString0x10 Playlist[16];
	bool AutoplayInShip;
	bool AutoplayInVehicle;
	bool AutoplayOnFoot;
	bool Shuffle;

	friend bool operator==(const GcByteBeatLibraryData& lhs, const GcByteBeatLibraryData& rhs) 
	{
		return std::equal(std::begin(lhs.MySongs), std::end(lhs.MySongs), std::begin(rhs.MySongs)) &&
		std::equal(std::begin(lhs.Playlist), std::end(lhs.Playlist), std::begin(rhs.Playlist)) &&
		lhs.AutoplayInShip == rhs.AutoplayInShip &&
		lhs.AutoplayInVehicle == rhs.AutoplayInVehicle &&
		lhs.AutoplayOnFoot == rhs.AutoplayOnFoot &&
		lhs.Shuffle == rhs.Shuffle;
	}
};

//Dependency: TkCurveType
struct GcPlayerSpaceshipWarpData
{
	float EntryTime;
	float ExitTime;
	float TravelTunnelTime;
	NMS_Toolkit::TkCurveType EntryTunnelCurve;
	NMS_Toolkit::TkCurveType ExitTunnelCurve;

	friend bool operator==(const GcPlayerSpaceshipWarpData& lhs, const GcPlayerSpaceshipWarpData& rhs) 
	{
		return lhs.EntryTime == rhs.EntryTime &&
		lhs.ExitTime == rhs.ExitTime &&
		lhs.TravelTunnelTime == rhs.TravelTunnelTime &&
		lhs.EntryTunnelCurve == rhs.EntryTunnelCurve &&
		lhs.ExitTunnelCurve == rhs.ExitTunnelCurve;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x800
//Dependency: NMSString0x80
struct GcIDLookupPath
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x800 Path;
	NMS::NMSString0x80 DescriptionField;
	NMS::NMSString0x80 ImageField;
	NMS::NMSString0x80 NameField;
	NMS::NMSString0x80 SubTitleField;
	bool GlobalSort;

	friend bool operator==(const GcIDLookupPath& lhs, const GcIDLookupPath& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Path == rhs.Path &&
		lhs.DescriptionField == rhs.DescriptionField &&
		lhs.ImageField == rhs.ImageField &&
		lhs.NameField == rhs.NameField &&
		lhs.SubTitleField == rhs.SubTitleField &&
		lhs.GlobalSort == rhs.GlobalSort;
	}
};

//Dependency: GcIDLookupPath
struct GcIDLookupPaths
{
	std::vector<NMS_GameComponents::GcIDLookupPath> Paths;

	friend bool operator==(const GcIDLookupPaths& lhs, const GcIDLookupPaths& rhs) 
	{
		return lhs.Paths == rhs.Paths;
	}
};

struct GcMissionConditionSeasonNumber
{
	std::vector<int32_t> IncludeOtherSeasons;
	int32_t ActiveSeason;
	bool IncludeRemix;

	friend bool operator==(const GcMissionConditionSeasonNumber& lhs, const GcMissionConditionSeasonNumber& rhs) 
	{
		return lhs.IncludeOtherSeasons == rhs.IncludeOtherSeasons &&
		lhs.ActiveSeason == rhs.ActiveSeason &&
		lhs.IncludeRemix == rhs.IncludeRemix;
	}
};

struct GcSentinelPounceBalance
{
	float MaxAngle;
	float MaxFireRateScore;
	float MaxRange;
	float MinFireRateScore;
	float MinRange;
	float MinTimeBetweenPounces;
	float OtherPounceTimeMultiplier;
	float PounceTimeFireRateScoreExtra;

	friend bool operator==(const GcSentinelPounceBalance& lhs, const GcSentinelPounceBalance& rhs) 
	{
		return lhs.MaxAngle == rhs.MaxAngle &&
		lhs.MaxFireRateScore == rhs.MaxFireRateScore &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.MinFireRateScore == rhs.MinFireRateScore &&
		lhs.MinRange == rhs.MinRange &&
		lhs.MinTimeBetweenPounces == rhs.MinTimeBetweenPounces &&
		lhs.OtherPounceTimeMultiplier == rhs.OtherPounceTimeMultiplier &&
		lhs.PounceTimeFireRateScoreExtra == rhs.PounceTimeFireRateScoreExtra;
	}
};

//Dependency: NMSString0x10
struct GcProductToCollect
{
	NMS::NMSString0x10 Product;
	int32_t Amount;

	friend bool operator==(const GcProductToCollect& lhs, const GcProductToCollect& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.Amount == rhs.Amount;
	}
};

struct GcByteBeatPlayerComponentData
{
	enum class ByteBeatPlayerTypeEnum : uint32_t
	{
		Player = 0,
		Settlement = 1,
	};

	NMS_GameComponents::GcByteBeatPlayerComponentData::ByteBeatPlayerTypeEnum ByteBeatPlayerType;

	friend bool operator==(const GcByteBeatPlayerComponentData& lhs, const GcByteBeatPlayerComponentData& rhs) 
	{
		return lhs.ByteBeatPlayerType == rhs.ByteBeatPlayerType;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcDroneGun
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x20> RequiredDestructibles;
	NMS::NMSString0x20 Locator;
	bool LaunchDuringAnim;
	bool MirrorAnim;

	friend bool operator==(const GcDroneGun& lhs, const GcDroneGun& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.RequiredDestructibles == rhs.RequiredDestructibles &&
		lhs.Locator == rhs.Locator &&
		lhs.LaunchDuringAnim == rhs.LaunchDuringAnim &&
		lhs.MirrorAnim == rhs.MirrorAnim;
	}
};

struct GcPlayerConflictData
{
	enum class ConflictLevelEnum : uint32_t
	{
		Low = 0,
		Default = 1,
		High = 2,
		Pirate = 3,
	};

	NMS_GameComponents::GcPlayerConflictData::ConflictLevelEnum ConflictLevel;

	friend bool operator==(const GcPlayerConflictData& lhs, const GcPlayerConflictData& rhs) 
	{
		return lhs.ConflictLevel == rhs.ConflictLevel;
	}
};

struct GcByteBeatSwitchComponentData
{
	float Temp;

	friend bool operator==(const GcByteBeatSwitchComponentData& lhs, const GcByteBeatSwitchComponentData& rhs) 
	{
		return lhs.Temp == rhs.Temp;
	}
};

struct GcDroneControlData
{
	float DirectionBrake;
	float HeightAdjustDownStrength;
	float HeightAdjustStrength;
	float LeanInMoveDirStrength;
	float LookStrength;
	float LookStrengthVertical;
	float MaxHeight;
	float MaxPitch;
	float MaxSpeed;
	float MinHeight;
	float RepelForce;
	float RepelRange;
	float StopTime;
	float Strength;

	friend bool operator==(const GcDroneControlData& lhs, const GcDroneControlData& rhs) 
	{
		return lhs.DirectionBrake == rhs.DirectionBrake &&
		lhs.HeightAdjustDownStrength == rhs.HeightAdjustDownStrength &&
		lhs.HeightAdjustStrength == rhs.HeightAdjustStrength &&
		lhs.LeanInMoveDirStrength == rhs.LeanInMoveDirStrength &&
		lhs.LookStrength == rhs.LookStrength &&
		lhs.LookStrengthVertical == rhs.LookStrengthVertical &&
		lhs.MaxHeight == rhs.MaxHeight &&
		lhs.MaxPitch == rhs.MaxPitch &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.RepelForce == rhs.RepelForce &&
		lhs.RepelRange == rhs.RepelRange &&
		lhs.StopTime == rhs.StopTime &&
		lhs.Strength == rhs.Strength;
	}
};

struct GcMissionConditionSystemHasRuinsPlanet
{

	friend bool operator==(const GcMissionConditionSystemHasRuinsPlanet& lhs, const GcMissionConditionSystemHasRuinsPlanet& rhs) 
	{
		return true;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificProduct
{
	NMS::NMSString0x20A SeasonRewardListFormat;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RequiresTech;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool ForceSpecialMessage;
	bool HideAmountInMessage;
	bool HideInSeasonRewards;
	bool Silent;

	friend bool operator==(const GcRewardSpecificProduct& lhs, const GcRewardSpecificProduct& rhs) 
	{
		return lhs.SeasonRewardListFormat == rhs.SeasonRewardListFormat &&
		lhs.ID == rhs.ID &&
		lhs.RequiresTech == rhs.RequiresTech &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Default == rhs.Default &&
		lhs.ForceSpecialMessage == rhs.ForceSpecialMessage &&
		lhs.HideAmountInMessage == rhs.HideAmountInMessage &&
		lhs.HideInSeasonRewards == rhs.HideInSeasonRewards &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: NMSString0x20A
struct GcRewardDummyLocID
{
	NMS::NMSString0x20A LocID;
	int32_t AmountMax;
	int32_t AmountMin;

	friend bool operator==(const GcRewardDummyLocID& lhs, const GcRewardDummyLocID& rhs) 
	{
		return lhs.LocID == rhs.LocID &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcCustomisationBackpackData
{
	NMS::Vector3f ActiveJetOffset;
	NMS::NMSString0x20 NodeName;

	friend bool operator==(const GcCustomisationBackpackData& lhs, const GcCustomisationBackpackData& rhs) 
	{
		return lhs.ActiveJetOffset == rhs.ActiveJetOffset &&
		lhs.NodeName == rhs.NodeName;
	}
};

struct GcCostCanFreighterMegaWarp
{

	friend bool operator==(const GcCostCanFreighterMegaWarp& lhs, const GcCostCanFreighterMegaWarp& rhs) 
	{
		return true;
	}
};

//Dependency: GcAlienRace
struct GcNPCRaceProbabilityModifierData
{
	float Modifier;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcNPCRaceProbabilityModifierData& lhs, const GcNPCRaceProbabilityModifierData& rhs) 
	{
		return lhs.Modifier == rhs.Modifier &&
		lhs.Race == rhs.Race;
	}
};

//Dependency: GcNPCRaceProbabilityModifierData
//Dependency: NMSString0x10
struct GcNPCProbabilityReactionData
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcNPCRaceProbabilityModifierData> RaceModifiers;
	float Probability;

	friend bool operator==(const GcNPCProbabilityReactionData& lhs, const GcNPCProbabilityReactionData& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.RaceModifiers == rhs.RaceModifiers &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: NMSString0x10
struct GcCostItemListIndexed
{
	enum class ItemOutOfBoundsBehaviourEnum : uint32_t
	{
		NoCost = 0,
		UseFirst = 1,
		UseLast = 2,
	};

	enum class ItemIndexProviderEnum : uint32_t
	{
		None = 0,
		Biome = 1,
		SubBiome = 2,
	};

	std::vector<NMS::NMSString0x10> Costs;
	int32_t Amount;
	NMS_GameComponents::GcCostItemListIndexed::ItemIndexProviderEnum ItemIndexProvider;
	NMS_GameComponents::GcCostItemListIndexed::ItemOutOfBoundsBehaviourEnum ItemOutOfBoundsBehaviour;
	bool AssertIfOutOfBounds;

	friend bool operator==(const GcCostItemListIndexed& lhs, const GcCostItemListIndexed& rhs) 
	{
		return lhs.Costs == rhs.Costs &&
		lhs.Amount == rhs.Amount &&
		lhs.ItemIndexProvider == rhs.ItemIndexProvider &&
		lhs.ItemOutOfBoundsBehaviour == rhs.ItemOutOfBoundsBehaviour &&
		lhs.AssertIfOutOfBounds == rhs.AssertIfOutOfBounds;
	}
};

//Dependency: NMSString0x20A
struct GcCostHasActiveScanEvent
{
	NMS::NMSString0x20A OptionalEventID;
	NMS::NMSString0x20A Text;

	friend bool operator==(const GcCostHasActiveScanEvent& lhs, const GcCostHasActiveScanEvent& rhs) 
	{
		return lhs.OptionalEventID == rhs.OptionalEventID &&
		lhs.Text == rhs.Text;
	}
};

struct GcStateTimeEvent
{
	float RandomSeconds;
	float Seconds;
	bool UseMissionClock;

	friend bool operator==(const GcStateTimeEvent& lhs, const GcStateTimeEvent& rhs) 
	{
		return lhs.RandomSeconds == rhs.RandomSeconds &&
		lhs.Seconds == rhs.Seconds &&
		lhs.UseMissionClock == rhs.UseMissionClock;
	}
};

struct GcHologramType
{
	enum class HologramTypeEnum : uint32_t
	{
		Mesh = 0,
		PlayerCharacter = 1,
		PlayerShip = 2,
		PlayerMultiTool = 3,
	};

	NMS_GameComponents::GcHologramType::HologramTypeEnum HologramType;

	friend bool operator==(const GcHologramType& lhs, const GcHologramType& rhs) 
	{
		return lhs.HologramType == rhs.HologramType;
	}
};

struct GcHologramState
{
	enum class HologramStateEnum : uint32_t
	{
		Hologram = 0,
		Attract = 1,
		Explode = 2,
		Disabled = 3,
	};

	NMS_GameComponents::GcHologramState::HologramStateEnum HologramState;

	friend bool operator==(const GcHologramState& lhs, const GcHologramState& rhs) 
	{
		return lhs.HologramState == rhs.HologramState;
	}
};

struct GcHologramPivotType
{
	enum class HologramPivotTypeEnum : uint32_t
	{
		Origin = 0,
		CentreBounds = 1,
	};

	NMS_GameComponents::GcHologramPivotType::HologramPivotTypeEnum HologramPivotType;

	friend bool operator==(const GcHologramPivotType& lhs, const GcHologramPivotType& rhs) 
	{
		return lhs.HologramPivotType == rhs.HologramPivotType;
	}
};

//Dependency: GcHologramType
//Dependency: GcHologramState
//Dependency: GcHologramPivotType
//Dependency: Colour
struct GcHologramComponentData
{
	NMS::Colour HologramColour;
	float AttractDistance;
	NMS_GameComponents::GcHologramType HologramType;
	float MaxSize;
	float MinSize;
	NMS_GameComponents::GcHologramState OnInteractState;
	float RotateTime;
	NMS_GameComponents::GcHologramPivotType xPivot;
	NMS_GameComponents::GcHologramPivotType yPivot;
	NMS_GameComponents::GcHologramPivotType zPivot;
	bool DisableOnInteract;
	bool DisableWhenNotInteracting;
	bool ScaleInAndOut;
	bool UseStationLightColour;

	friend bool operator==(const GcHologramComponentData& lhs, const GcHologramComponentData& rhs) 
	{
		return lhs.HologramColour == rhs.HologramColour &&
		lhs.AttractDistance == rhs.AttractDistance &&
		lhs.HologramType == rhs.HologramType &&
		lhs.MaxSize == rhs.MaxSize &&
		lhs.MinSize == rhs.MinSize &&
		lhs.OnInteractState == rhs.OnInteractState &&
		lhs.RotateTime == rhs.RotateTime &&
		lhs.xPivot == rhs.xPivot &&
		lhs.yPivot == rhs.yPivot &&
		lhs.zPivot == rhs.zPivot &&
		lhs.DisableOnInteract == rhs.DisableOnInteract &&
		lhs.DisableWhenNotInteracting == rhs.DisableWhenNotInteracting &&
		lhs.ScaleInAndOut == rhs.ScaleInAndOut &&
		lhs.UseStationLightColour == rhs.UseStationLightColour;
	}
};

struct GcRewardFrigateDamageResponse
{
	enum class ResponseEnum : uint32_t
	{
		StayOut = 0,
		ReturnHome = 1,
		CheckForMoreDamage = 2,
		ShowDamagedCaptain = 3,
		ShowExpeditionCaptain = 4,
		AbortExpedition = 5,
	};

	NMS_GameComponents::GcRewardFrigateDamageResponse::ResponseEnum Response;

	friend bool operator==(const GcRewardFrigateDamageResponse& lhs, const GcRewardFrigateDamageResponse& rhs) 
	{
		return lhs.Response == rhs.Response;
	}
};

//Dependency: Vector3f
struct GcDebugPlanetPos
{
	NMS::Vector3f Position;
	bool OverridePosition;

	friend bool operator==(const GcDebugPlanetPos& lhs, const GcDebugPlanetPos& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.OverridePosition == rhs.OverridePosition;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcCreatureDebugWaypoint
{
	enum class WaypointTypeEnum : uint32_t
	{
		Move = 0,
		MoveAlt = 1,
		Idle = 2,
	};

	NMS::Vector3f Position;
	NMS::NMSString0x10 Anim;
	float Time;
	NMS_GameComponents::GcCreatureDebugWaypoint::WaypointTypeEnum WaypointType;

	friend bool operator==(const GcCreatureDebugWaypoint& lhs, const GcCreatureDebugWaypoint& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Anim == rhs.Anim &&
		lhs.Time == rhs.Time &&
		lhs.WaypointType == rhs.WaypointType;
	}
};

//Dependency: GcCreatureDebugWaypoint
//Dependency: GcCreatureTypes
struct GcCreatureDebugSpawnData
{
	enum class OnCompleteEnum : uint32_t
	{
		Hold = 0,
		Loop = 1,
		Destroy = 2,
	};

	std::vector<NMS_GameComponents::GcCreatureDebugWaypoint> Waypoints;
	int32_t CreatureIndex;
	int32_t CurrentWaypoint;
	float InitialDelay;
	NMS_GameComponents::GcCreatureDebugSpawnData::OnCompleteEnum OnComplete;
	float SmoothTime;
	float SmoothTimer;
	NMS_GameComponents::GcCreatureTypes SpecialCreatureType;
	float Timer;
	bool ArrivedAtCurrentWaypoint;
	bool EcosystemCreature;

	friend bool operator==(const GcCreatureDebugSpawnData& lhs, const GcCreatureDebugSpawnData& rhs) 
	{
		return lhs.Waypoints == rhs.Waypoints &&
		lhs.CreatureIndex == rhs.CreatureIndex &&
		lhs.CurrentWaypoint == rhs.CurrentWaypoint &&
		lhs.InitialDelay == rhs.InitialDelay &&
		lhs.OnComplete == rhs.OnComplete &&
		lhs.SmoothTime == rhs.SmoothTime &&
		lhs.SmoothTimer == rhs.SmoothTimer &&
		lhs.SpecialCreatureType == rhs.SpecialCreatureType &&
		lhs.Timer == rhs.Timer &&
		lhs.ArrivedAtCurrentWaypoint == rhs.ArrivedAtCurrentWaypoint &&
		lhs.EcosystemCreature == rhs.EcosystemCreature;
	}
};

//Dependency: NMSString0x40
struct GcDiscoveryOwner
{
	int32_t Timestamp;
	NMS::NMSString0x40 LocalID;
	NMS::NMSString0x40 OnlineID;
	NMS::NMSString0x40 Platform;
	NMS::NMSString0x40 Username;

	friend bool operator==(const GcDiscoveryOwner& lhs, const GcDiscoveryOwner& rhs) 
	{
		return lhs.Timestamp == rhs.Timestamp &&
		lhs.LocalID == rhs.LocalID &&
		lhs.OnlineID == rhs.OnlineID &&
		lhs.Platform == rhs.Platform &&
		lhs.Username == rhs.Username;
	}
};

//Dependency: GcDiscoveryOwner
//Dependency: GcSeed
//Dependency: NMSString0x20
//Dependency: GcBiomeType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcCreatureTypes
struct GcPetData
{
	NMS::NMSString0x20A CustomSpeciesName;
	NMS::GcSeed BoneScaleSeed;
	NMS::GcSeed ColourBaseSeed;
	NMS::NMSString0x10 CreatureID;
	NMS::GcSeed CreatureSecondarySeed;
	NMS::GcSeed CreatureSeed;
	std::vector<NMS::NMSString0x20A> Descriptors;
	uint64_t BirthTime;
	uint64_t GenusSeed;
	uint64_t LastEggTime;
	uint64_t LastTrustDecreaseTime;
	uint64_t LastTrustIncreaseTime;
	uint64_t SpeciesSeed;
	uint64_t UA;
	NMS_GameComponents::GcDiscoveryOwner SenderData;
	float Traits[3];
	float Moods[2];
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	float Scale;
	float Trust;
	NMS::NMSString0x20 CustomName;
	bool AllowUnmodifiedReroll;
	bool EggModified;
	bool HasBeenSummoned;
	bool HasFur;
	bool Predator;

	friend bool operator==(const GcPetData& lhs, const GcPetData& rhs) 
	{
		return lhs.CustomSpeciesName == rhs.CustomSpeciesName &&
		lhs.BoneScaleSeed == rhs.BoneScaleSeed &&
		lhs.ColourBaseSeed == rhs.ColourBaseSeed &&
		lhs.CreatureID == rhs.CreatureID &&
		lhs.CreatureSecondarySeed == rhs.CreatureSecondarySeed &&
		lhs.CreatureSeed == rhs.CreatureSeed &&
		lhs.Descriptors == rhs.Descriptors &&
		lhs.BirthTime == rhs.BirthTime &&
		lhs.GenusSeed == rhs.GenusSeed &&
		lhs.LastEggTime == rhs.LastEggTime &&
		lhs.LastTrustDecreaseTime == rhs.LastTrustDecreaseTime &&
		lhs.LastTrustIncreaseTime == rhs.LastTrustIncreaseTime &&
		lhs.SpeciesSeed == rhs.SpeciesSeed &&
		lhs.UA == rhs.UA &&
		lhs.SenderData == rhs.SenderData &&
		std::equal(std::begin(lhs.Traits), std::end(lhs.Traits), std::begin(rhs.Traits)) &&
		std::equal(std::begin(lhs.Moods), std::end(lhs.Moods), std::begin(rhs.Moods)) &&
		lhs.Biome == rhs.Biome &&
		lhs.CreatureType == rhs.CreatureType &&
		lhs.Scale == rhs.Scale &&
		lhs.Trust == rhs.Trust &&
		lhs.CustomName == rhs.CustomName &&
		lhs.AllowUnmodifiedReroll == rhs.AllowUnmodifiedReroll &&
		lhs.EggModified == rhs.EggModified &&
		lhs.HasBeenSummoned == rhs.HasBeenSummoned &&
		lhs.HasFur == rhs.HasFur &&
		lhs.Predator == rhs.Predator;
	}
};

struct GcPetBehaviours
{
	enum class PetBehaviourEnum : uint32_t
	{
		None = 0,
		Idle = 1,
		Eat = 2,
		Poop = 3,
		LayEgg = 4,
		FollowPlayer = 5,
		AdoptedFollowPlayer = 6,
		ScanForResource = 7,
		FindResource = 8,
		FindHazards = 9,
		AttackHazard = 10,
		FindBuilding = 11,
		Fetch = 12,
		Explore = 13,
		Emote = 14,
		GestureReact = 15,
		OrderedToPos = 16,
		ComeHere = 17,
		Mine = 18,
		Summoned = 19,
		Adopted = 20,
		Hatched = 21,
		PostInteract = 22,
		Rest = 23,
		Attack = 24,
		Watch = 25,
		Greet = 26,
		TeleportToPlayer = 27,
	};

	NMS_GameComponents::GcPetBehaviours::PetBehaviourEnum PetBehaviour;

	friend bool operator==(const GcPetBehaviours& lhs, const GcPetBehaviours& rhs) 
	{
		return lhs.PetBehaviour == rhs.PetBehaviour;
	}
};

//Dependency: NMSString0x10
struct GcCameraFollowSettings
{
	NMS::NMSString0x10 Name;
	float AvoidCollisionLRSpeed;
	float AvoidCollisionPushSpeed;
	float AvoidCollisionUDSpeed;
	float BackMaxDistance;
	float BackMinDistance;
	float BackSlopeAdjust;
	float BackSlopeRotationAdjust;
	float CenterBlendTime;
	float CenterMaxSpeed;
	float CenterMaxSpring;
	float CenterStartSpeed;
	float CenterStartTime;
	float CustomBlendTime;
	float DistSpeed;
	float DistSpeedOutsideMainRange;
	float DistStiffness;
	float HorizRotationAngleMaxPerFrame;
	float LeftMaxDistance;
	float LeftMinDistance;
	float LookStickLimitAngle;
	float LRProbesRadius;
	float LRProbesRange;
	float MinMoveVelToTriggerSpring;
	float MinSpeed;
	int32_t NumLRProbes;
	int32_t NumUDProbes;
	float OffsetX;
	float OffsetY;
	float OffsetYAlt;
	float OffsetYExtraMaxDistance;
	float OffsetYSlopeExtra;
	float OffsetZFlat;
	float PanFar;
	float PanNear;
	float ProbeCenterX;
	float ProbeCenterY;
	float PushForwardDropoffLR;
	float PushForwardDropoffUD;
	float SpeedRange;
	float SpringSpeed;
	float UDProbesRange;
	float UpGamma;
	float UpMaxDistance;
	float UpMinDistance;
	float UpSlopeAdjust;
	float UpWaveAdjust;
	float UpWaveAdjustMaxHeight;
	float VelocityAnticipate;
	float VelocityAnticipateSpringSpeed;
	float VertMaxSpring;
	float VertRotationMax;
	float VertRotationMin;
	float VertRotationOffset;
	float VertRotationOffsetMaxAngle;
	float VertRotationOffsetMinAngle;
	float VertRotationSpeed;
	bool AvoidCollisionLRUseStickDelay;
	bool AvoidCollisionUDUseStickDelay;
	bool EnableCollisionDetection;
	bool LockToObjectOnIdle;
	bool UseCustomBlendTime;
	bool UseSpeedBasedSpring;
	bool VertStartLookingDown;

	friend bool operator==(const GcCameraFollowSettings& lhs, const GcCameraFollowSettings& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.AvoidCollisionLRSpeed == rhs.AvoidCollisionLRSpeed &&
		lhs.AvoidCollisionPushSpeed == rhs.AvoidCollisionPushSpeed &&
		lhs.AvoidCollisionUDSpeed == rhs.AvoidCollisionUDSpeed &&
		lhs.BackMaxDistance == rhs.BackMaxDistance &&
		lhs.BackMinDistance == rhs.BackMinDistance &&
		lhs.BackSlopeAdjust == rhs.BackSlopeAdjust &&
		lhs.BackSlopeRotationAdjust == rhs.BackSlopeRotationAdjust &&
		lhs.CenterBlendTime == rhs.CenterBlendTime &&
		lhs.CenterMaxSpeed == rhs.CenterMaxSpeed &&
		lhs.CenterMaxSpring == rhs.CenterMaxSpring &&
		lhs.CenterStartSpeed == rhs.CenterStartSpeed &&
		lhs.CenterStartTime == rhs.CenterStartTime &&
		lhs.CustomBlendTime == rhs.CustomBlendTime &&
		lhs.DistSpeed == rhs.DistSpeed &&
		lhs.DistSpeedOutsideMainRange == rhs.DistSpeedOutsideMainRange &&
		lhs.DistStiffness == rhs.DistStiffness &&
		lhs.HorizRotationAngleMaxPerFrame == rhs.HorizRotationAngleMaxPerFrame &&
		lhs.LeftMaxDistance == rhs.LeftMaxDistance &&
		lhs.LeftMinDistance == rhs.LeftMinDistance &&
		lhs.LookStickLimitAngle == rhs.LookStickLimitAngle &&
		lhs.LRProbesRadius == rhs.LRProbesRadius &&
		lhs.LRProbesRange == rhs.LRProbesRange &&
		lhs.MinMoveVelToTriggerSpring == rhs.MinMoveVelToTriggerSpring &&
		lhs.MinSpeed == rhs.MinSpeed &&
		lhs.NumLRProbes == rhs.NumLRProbes &&
		lhs.NumUDProbes == rhs.NumUDProbes &&
		lhs.OffsetX == rhs.OffsetX &&
		lhs.OffsetY == rhs.OffsetY &&
		lhs.OffsetYAlt == rhs.OffsetYAlt &&
		lhs.OffsetYExtraMaxDistance == rhs.OffsetYExtraMaxDistance &&
		lhs.OffsetYSlopeExtra == rhs.OffsetYSlopeExtra &&
		lhs.OffsetZFlat == rhs.OffsetZFlat &&
		lhs.PanFar == rhs.PanFar &&
		lhs.PanNear == rhs.PanNear &&
		lhs.ProbeCenterX == rhs.ProbeCenterX &&
		lhs.ProbeCenterY == rhs.ProbeCenterY &&
		lhs.PushForwardDropoffLR == rhs.PushForwardDropoffLR &&
		lhs.PushForwardDropoffUD == rhs.PushForwardDropoffUD &&
		lhs.SpeedRange == rhs.SpeedRange &&
		lhs.SpringSpeed == rhs.SpringSpeed &&
		lhs.UDProbesRange == rhs.UDProbesRange &&
		lhs.UpGamma == rhs.UpGamma &&
		lhs.UpMaxDistance == rhs.UpMaxDistance &&
		lhs.UpMinDistance == rhs.UpMinDistance &&
		lhs.UpSlopeAdjust == rhs.UpSlopeAdjust &&
		lhs.UpWaveAdjust == rhs.UpWaveAdjust &&
		lhs.UpWaveAdjustMaxHeight == rhs.UpWaveAdjustMaxHeight &&
		lhs.VelocityAnticipate == rhs.VelocityAnticipate &&
		lhs.VelocityAnticipateSpringSpeed == rhs.VelocityAnticipateSpringSpeed &&
		lhs.VertMaxSpring == rhs.VertMaxSpring &&
		lhs.VertRotationMax == rhs.VertRotationMax &&
		lhs.VertRotationMin == rhs.VertRotationMin &&
		lhs.VertRotationOffset == rhs.VertRotationOffset &&
		lhs.VertRotationOffsetMaxAngle == rhs.VertRotationOffsetMaxAngle &&
		lhs.VertRotationOffsetMinAngle == rhs.VertRotationOffsetMinAngle &&
		lhs.VertRotationSpeed == rhs.VertRotationSpeed &&
		lhs.AvoidCollisionLRUseStickDelay == rhs.AvoidCollisionLRUseStickDelay &&
		lhs.AvoidCollisionUDUseStickDelay == rhs.AvoidCollisionUDUseStickDelay &&
		lhs.EnableCollisionDetection == rhs.EnableCollisionDetection &&
		lhs.LockToObjectOnIdle == rhs.LockToObjectOnIdle &&
		lhs.UseCustomBlendTime == rhs.UseCustomBlendTime &&
		lhs.UseSpeedBasedSpring == rhs.UseSpeedBasedSpring &&
		lhs.VertStartLookingDown == rhs.VertStartLookingDown;
	}
};

//Dependency: GcCharacterCustomisationSaveData
struct GcPetCustomisationData
{
	NMS_GameComponents::GcCharacterCustomisationSaveData Data[3];

	friend bool operator==(const GcPetCustomisationData& lhs, const GcPetCustomisationData& rhs) 
	{
		return std::equal(std::begin(lhs.Data), std::end(lhs.Data), std::begin(rhs.Data));
	}
};

//Dependency: Vector3f
struct GcDebugCameraEntry
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	float Distance;
	float FOV;
	float SpeedModifier;

	friend bool operator==(const GcDebugCameraEntry& lhs, const GcDebugCameraEntry& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Local == rhs.Local &&
		lhs.Offset == rhs.Offset &&
		lhs.Up == rhs.Up &&
		lhs.Distance == rhs.Distance &&
		lhs.FOV == rhs.FOV &&
		lhs.SpeedModifier == rhs.SpeedModifier;
	}
};

//Dependency: GcDebugCameraEntry
struct GcDebugCamera
{
	std::vector<NMS_GameComponents::GcDebugCameraEntry> Waypoints;
	float BaseSpeed;
	int32_t CurrentWaypoint;
	float CurrentWaypointProgress;
	float Smoothing;

	friend bool operator==(const GcDebugCamera& lhs, const GcDebugCamera& rhs) 
	{
		return lhs.Waypoints == rhs.Waypoints &&
		lhs.BaseSpeed == rhs.BaseSpeed &&
		lhs.CurrentWaypoint == rhs.CurrentWaypoint &&
		lhs.CurrentWaypointProgress == rhs.CurrentWaypointProgress &&
		lhs.Smoothing == rhs.Smoothing;
	}
};

//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: GcResource
struct GcDebugObjectDecoration
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS::VariableSizeString Filename;
	NMS::GcSeed Seed;
	NMS::GcResource Resource;

	friend bool operator==(const GcDebugObjectDecoration& lhs, const GcDebugObjectDecoration& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Local == rhs.Local &&
		lhs.Offset == rhs.Offset &&
		lhs.Up == rhs.Up &&
		lhs.Filename == rhs.Filename &&
		lhs.Seed == rhs.Seed &&
		lhs.Resource == rhs.Resource;
	}
};

//Dependency: GcCharacterCustomisationSaveData
//Dependency: Vector3f
struct GcMechDebugSpawnData
{
	NMS::Vector3f Destination;
	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS_GameComponents::GcCharacterCustomisationSaveData CustomisatonData;
	float MoveDelay;
	float TitanFallDelay;
	bool Running;
	bool UseCustomisation;

	friend bool operator==(const GcMechDebugSpawnData& lhs, const GcMechDebugSpawnData& rhs) 
	{
		return lhs.Destination == rhs.Destination &&
		lhs.Facing == rhs.Facing &&
		lhs.Position == rhs.Position &&
		lhs.Up == rhs.Up &&
		lhs.CustomisatonData == rhs.CustomisatonData &&
		lhs.MoveDelay == rhs.MoveDelay &&
		lhs.TitanFallDelay == rhs.TitanFallDelay &&
		lhs.Running == rhs.Running &&
		lhs.UseCustomisation == rhs.UseCustomisation;
	}
};

//Dependency: GcPetData
//Dependency: GcPetCustomisationData
//Dependency: GcResourceElement
//Dependency: GcAlienRace
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcNPCDebugSpawnData
{
	enum class DebugNPCBehaviourEnum : uint32_t
	{
		None = 0,
		Fishing = 1,
	};

	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS_GameComponents::GcPetData Pet;
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation;
	NMS_GameComponents::GcResourceElement PropResource;
	std::vector<NMS::NMSString0x10> Idles;
	NMS::GcSeed PropSeed;
	NMS::GcSeed Seed;
	std::vector<NMS::Vector3f> Waypoints;
	NMS_GameComponents::GcNPCDebugSpawnData::DebugNPCBehaviourEnum DebugNPCBehaviour;
	float InitialDelay;
	float PetFollowOffset;
	NMS_GameComponents::GcAlienRace Race;
	bool AddPetAccessories;
	bool FollowWaypoints;
	bool PlayIdles;
	bool RidePet;
	bool Run;

	friend bool operator==(const GcNPCDebugSpawnData& lhs, const GcNPCDebugSpawnData& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Position == rhs.Position &&
		lhs.Up == rhs.Up &&
		lhs.Pet == rhs.Pet &&
		lhs.PetAccessoryCustomisation == rhs.PetAccessoryCustomisation &&
		lhs.PropResource == rhs.PropResource &&
		lhs.Idles == rhs.Idles &&
		lhs.PropSeed == rhs.PropSeed &&
		lhs.Seed == rhs.Seed &&
		lhs.Waypoints == rhs.Waypoints &&
		lhs.DebugNPCBehaviour == rhs.DebugNPCBehaviour &&
		lhs.InitialDelay == rhs.InitialDelay &&
		lhs.PetFollowOffset == rhs.PetFollowOffset &&
		lhs.Race == rhs.Race &&
		lhs.AddPetAccessories == rhs.AddPetAccessories &&
		lhs.FollowWaypoints == rhs.FollowWaypoints &&
		lhs.PlayIdles == rhs.PlayIdles &&
		lhs.RidePet == rhs.RidePet &&
		lhs.Run == rhs.Run;
	}
};

//Dependency: GcExperienceDebugTriggerActionTypes
struct GcExperienceDebugTriggerAction
{
	NMS_GameComponents::GcExperienceDebugTriggerActionTypes Action;
	int32_t IntParameter;

	friend bool operator==(const GcExperienceDebugTriggerAction& lhs, const GcExperienceDebugTriggerAction& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.IntParameter == rhs.IntParameter;
	}
};

//Dependency: GcExperienceDebugTriggerAction
struct GcExperienceDebugTriggerInput
{
	enum class KeyPressEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_3 = 2,
		_4 = 3,
		_5 = 4,
		_6 = 5,
		_7 = 6,
		_8 = 7,
		_9 = 8,
		PadUp = 9,
		PadDown = 10,
		PadLeft = 11,
		PadRight = 12,
	};

	std::vector<NMS_GameComponents::GcExperienceDebugTriggerAction> Actions;
	NMS_GameComponents::GcExperienceDebugTriggerInput::KeyPressEnum KeyPress;

	friend bool operator==(const GcExperienceDebugTriggerInput& lhs, const GcExperienceDebugTriggerInput& rhs) 
	{
		return lhs.Actions == rhs.Actions &&
		lhs.KeyPress == rhs.KeyPress;
	}
};

//Dependency: GcDebugPlanetPos
//Dependency: GcCreatureDebugSpawnData
//Dependency: GcPetData
//Dependency: GcPetBehaviours
//Dependency: GcCameraFollowSettings
//Dependency: GcPetCustomisationData
//Dependency: GcDebugCamera
//Dependency: GcDebugObjectDecoration
//Dependency: GcAIShipDebugSpawnData
//Dependency: GcMechDebugSpawnData
//Dependency: GcNPCDebugSpawnData
//Dependency: GcDebugShipTravelLine
//Dependency: GcExperienceDebugTriggerInput
//Dependency: GcSentinelTypes
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: Vector2f
struct GcDebugScene
{
	NMS_GameComponents::GcDebugPlanetPos PlanetPositions[6];
	NMS::Vector3f DebugDroneSpawn;
	NMS::Vector3f DebugDroneTarget;
	NMS::Vector3f DebugFlybyDir;
	NMS::Vector3f DebugFlybyTarget;
	NMS::Vector3f DebugFrigateFlybySpawnPos;
	NMS::Vector3f DebugQueenSpawn;
	NMS::Vector3f DebugShipSpawnFacing;
	NMS::Vector3f DebugShipSpawnPos;
	NMS::Vector3f DebugShipSpawnUp;
	NMS::Vector3f DebugSpaceBattleSpawnPosOffset;
	NMS::Vector3f DebugSpaceBattleSpawnRotOffset;
	NMS::Vector3f DebugWalkerSpawn;
	NMS::Vector3f DebugWalkerTarget;
	NMS::Vector3f ForcedSunPosition;
	NMS::Vector3f SandwormSpawnPos;
	NMS_GameComponents::GcPetData Pets[18];
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation[18];
	NMS_GameComponents::GcCameraFollowSettings VehicleCameraOverride[7];
	NMS::NMSString0x10 BackgroundSpaceEncounter;
	std::vector<NMS_GameComponents::GcDebugCamera> DebugCameraPaths;
	std::vector<NMS_GameComponents::GcCreatureDebugSpawnData> DebugCreatureSpawns;
	std::vector<NMS_GameComponents::GcDebugObjectDecoration> DebugDecorations;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugEnemyShipSpawns;
	NMS::NMSString0x10 DebugExperienceCamShake;
	NMS::GcSeed DebugFlybySeed;
	std::vector<NMS_GameComponents::GcMechDebugSpawnData> DebugMechSpawns;
	std::vector<NMS_GameComponents::GcNPCDebugSpawnData> DebugNPCSpawns;
	std::vector<NMS_GameComponents::GcDebugShipTravelLine> DebugShipPaths;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugShipSpawns;
	std::vector<NMS::NMSString0x10> DefaultNPCIdles;
	NMS::NMSString0x10 GhostShipReward;
	NMS::NMSString0x10 LivingFrigateReward;
	NMS::NMSString0x10 NormandyReward;
	std::vector<NMS::Vector3f> PetRideWayPoints;
	NMS::NMSString0x10 PulseEncounter;
	std::vector<NMS_GameComponents::GcExperienceDebugTriggerInput> TriggerActions;
	NMS::Vector2f CloudStratosphereWindOffset;
	NMS::Vector2f CloudWindOffset;
	float CameraSpinDistanceOffset;
	float CameraSpinRevolutions;
	float CameraSpinTime;
	float CameraSpinVerticalOffset;
	float CloudAnimScale;
	float CloudCover;
	float CustomShipDockedTime;
	NMS_GameComponents::GcSentinelTypes DebugDroneType;
	float DebugFlybyRange;
	float DebugFrigateFlybyHeightOffset;
	float DebugFrigateFlybyRotation;
	int32_t DebugNumDrones;
	float FlyCamSmoothFactor;
	float FlyCamSpeedModifier;
	float NPCIdleMaxDelay;
	float NPCIdleMinDelay;
	NMS_GameComponents::GcPetBehaviours PetForceBehaviour;
	int32_t PetRideIndex;
	float PlayerWalkSpeed;
	float ShipSpawningMultiplier;
	bool Active;
	bool AllowOverrideWaterSettings;
	bool AutoCreateDecorations;
	bool AutoSave;
	bool BusyShips;
	NMS_Toolkit::TkCurveType CameraSpinEasing;
	bool ControlClouds;
	bool DebugDraw;
	bool DebugDroneScanPlayer;
	bool FlyCamSmooth;
	bool ForcePlayerWalk;
	bool ForceSunPosition;
	bool LoadPetsFromDebugScene;
	bool PulseEncountersAlwaysPersist;
	bool ResetMoodsOnSummon;
	bool ShowAccessoryMoods;
	bool UpdatePetMoods;

	friend bool operator==(const GcDebugScene& lhs, const GcDebugScene& rhs) 
	{
		return std::equal(std::begin(lhs.PlanetPositions), std::end(lhs.PlanetPositions), std::begin(rhs.PlanetPositions)) &&
		lhs.DebugDroneSpawn == rhs.DebugDroneSpawn &&
		lhs.DebugDroneTarget == rhs.DebugDroneTarget &&
		lhs.DebugFlybyDir == rhs.DebugFlybyDir &&
		lhs.DebugFlybyTarget == rhs.DebugFlybyTarget &&
		lhs.DebugFrigateFlybySpawnPos == rhs.DebugFrigateFlybySpawnPos &&
		lhs.DebugQueenSpawn == rhs.DebugQueenSpawn &&
		lhs.DebugShipSpawnFacing == rhs.DebugShipSpawnFacing &&
		lhs.DebugShipSpawnPos == rhs.DebugShipSpawnPos &&
		lhs.DebugShipSpawnUp == rhs.DebugShipSpawnUp &&
		lhs.DebugSpaceBattleSpawnPosOffset == rhs.DebugSpaceBattleSpawnPosOffset &&
		lhs.DebugSpaceBattleSpawnRotOffset == rhs.DebugSpaceBattleSpawnRotOffset &&
		lhs.DebugWalkerSpawn == rhs.DebugWalkerSpawn &&
		lhs.DebugWalkerTarget == rhs.DebugWalkerTarget &&
		lhs.ForcedSunPosition == rhs.ForcedSunPosition &&
		lhs.SandwormSpawnPos == rhs.SandwormSpawnPos &&
		std::equal(std::begin(lhs.Pets), std::end(lhs.Pets), std::begin(rhs.Pets)) &&
		std::equal(std::begin(lhs.PetAccessoryCustomisation), std::end(lhs.PetAccessoryCustomisation), std::begin(rhs.PetAccessoryCustomisation)) &&
		std::equal(std::begin(lhs.VehicleCameraOverride), std::end(lhs.VehicleCameraOverride), std::begin(rhs.VehicleCameraOverride)) &&
		lhs.BackgroundSpaceEncounter == rhs.BackgroundSpaceEncounter &&
		lhs.DebugCameraPaths == rhs.DebugCameraPaths &&
		lhs.DebugCreatureSpawns == rhs.DebugCreatureSpawns &&
		lhs.DebugDecorations == rhs.DebugDecorations &&
		lhs.DebugEnemyShipSpawns == rhs.DebugEnemyShipSpawns &&
		lhs.DebugExperienceCamShake == rhs.DebugExperienceCamShake &&
		lhs.DebugFlybySeed == rhs.DebugFlybySeed &&
		lhs.DebugMechSpawns == rhs.DebugMechSpawns &&
		lhs.DebugNPCSpawns == rhs.DebugNPCSpawns &&
		lhs.DebugShipPaths == rhs.DebugShipPaths &&
		lhs.DebugShipSpawns == rhs.DebugShipSpawns &&
		lhs.DefaultNPCIdles == rhs.DefaultNPCIdles &&
		lhs.GhostShipReward == rhs.GhostShipReward &&
		lhs.LivingFrigateReward == rhs.LivingFrigateReward &&
		lhs.NormandyReward == rhs.NormandyReward &&
		lhs.PetRideWayPoints == rhs.PetRideWayPoints &&
		lhs.PulseEncounter == rhs.PulseEncounter &&
		lhs.TriggerActions == rhs.TriggerActions &&
		lhs.CloudStratosphereWindOffset == rhs.CloudStratosphereWindOffset &&
		lhs.CloudWindOffset == rhs.CloudWindOffset &&
		lhs.CameraSpinDistanceOffset == rhs.CameraSpinDistanceOffset &&
		lhs.CameraSpinRevolutions == rhs.CameraSpinRevolutions &&
		lhs.CameraSpinTime == rhs.CameraSpinTime &&
		lhs.CameraSpinVerticalOffset == rhs.CameraSpinVerticalOffset &&
		lhs.CloudAnimScale == rhs.CloudAnimScale &&
		lhs.CloudCover == rhs.CloudCover &&
		lhs.CustomShipDockedTime == rhs.CustomShipDockedTime &&
		lhs.DebugDroneType == rhs.DebugDroneType &&
		lhs.DebugFlybyRange == rhs.DebugFlybyRange &&
		lhs.DebugFrigateFlybyHeightOffset == rhs.DebugFrigateFlybyHeightOffset &&
		lhs.DebugFrigateFlybyRotation == rhs.DebugFrigateFlybyRotation &&
		lhs.DebugNumDrones == rhs.DebugNumDrones &&
		lhs.FlyCamSmoothFactor == rhs.FlyCamSmoothFactor &&
		lhs.FlyCamSpeedModifier == rhs.FlyCamSpeedModifier &&
		lhs.NPCIdleMaxDelay == rhs.NPCIdleMaxDelay &&
		lhs.NPCIdleMinDelay == rhs.NPCIdleMinDelay &&
		lhs.PetForceBehaviour == rhs.PetForceBehaviour &&
		lhs.PetRideIndex == rhs.PetRideIndex &&
		lhs.PlayerWalkSpeed == rhs.PlayerWalkSpeed &&
		lhs.ShipSpawningMultiplier == rhs.ShipSpawningMultiplier &&
		lhs.Active == rhs.Active &&
		lhs.AllowOverrideWaterSettings == rhs.AllowOverrideWaterSettings &&
		lhs.AutoCreateDecorations == rhs.AutoCreateDecorations &&
		lhs.AutoSave == rhs.AutoSave &&
		lhs.BusyShips == rhs.BusyShips &&
		lhs.CameraSpinEasing == rhs.CameraSpinEasing &&
		lhs.ControlClouds == rhs.ControlClouds &&
		lhs.DebugDraw == rhs.DebugDraw &&
		lhs.DebugDroneScanPlayer == rhs.DebugDroneScanPlayer &&
		lhs.FlyCamSmooth == rhs.FlyCamSmooth &&
		lhs.ForcePlayerWalk == rhs.ForcePlayerWalk &&
		lhs.ForceSunPosition == rhs.ForceSunPosition &&
		lhs.LoadPetsFromDebugScene == rhs.LoadPetsFromDebugScene &&
		lhs.PulseEncountersAlwaysPersist == rhs.PulseEncountersAlwaysPersist &&
		lhs.ResetMoodsOnSummon == rhs.ResetMoodsOnSummon &&
		lhs.ShowAccessoryMoods == rhs.ShowAccessoryMoods &&
		lhs.UpdatePetMoods == rhs.UpdatePetMoods;
	}
};

//Dependency: TkModelResource
struct GcCameraAnimationData
{
	NMS_Toolkit::TkModelResource CameraAnimation;

	friend bool operator==(const GcCameraAnimationData& lhs, const GcCameraAnimationData& rhs) 
	{
		return lhs.CameraAnimation == rhs.CameraAnimation;
	}
};

struct GcMissionConditionCanRenameDiscovery
{
	bool ValueToReturnWhileSearchActive;

	friend bool operator==(const GcMissionConditionCanRenameDiscovery& lhs, const GcMissionConditionCanRenameDiscovery& rhs) 
	{
		return lhs.ValueToReturnWhileSearchActive == rhs.ValueToReturnWhileSearchActive;
	}
};

//Dependency: Vector4f
struct GcCameraAnomalySetupData
{
	NMS::Vector4f CameraAt;
	NMS::Vector4f CameraOffset;
	NMS::Vector4f CameraUp;
	NMS::Vector4f SunDirection;

	friend bool operator==(const GcCameraAnomalySetupData& lhs, const GcCameraAnomalySetupData& rhs) 
	{
		return lhs.CameraAt == rhs.CameraAt &&
		lhs.CameraOffset == rhs.CameraOffset &&
		lhs.CameraUp == rhs.CameraUp &&
		lhs.SunDirection == rhs.SunDirection;
	}
};

//Dependency: VariableSizeString
struct GcSelectableObjectData
{
	NMS::VariableSizeString Filename;

	friend bool operator==(const GcSelectableObjectData& lhs, const GcSelectableObjectData& rhs) 
	{
		return lhs.Filename == rhs.Filename;
	}
};

//Dependency: GcSelectableObjectData
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcSelectableObjectList
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcSelectableObjectData> Options;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcSelectableObjectList& lhs, const GcSelectableObjectList& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Options == rhs.Options &&
		lhs.Race == rhs.Race;
	}
};

//Dependency: TkCurveType
//Dependency: Vector2f
struct GcCameraFocusBuildingControlSettings
{
	NMS::Vector2f ClampRange;
	float MaxStepRate;
	float MaxStepRateAccumulatedInput;
	float MinStepRate;
	float SmoothTime;
	float StepSize;
	bool Clamp;
	NMS_Toolkit::TkCurveType StepRateCurve;

	friend bool operator==(const GcCameraFocusBuildingControlSettings& lhs, const GcCameraFocusBuildingControlSettings& rhs) 
	{
		return lhs.ClampRange == rhs.ClampRange &&
		lhs.MaxStepRate == rhs.MaxStepRate &&
		lhs.MaxStepRateAccumulatedInput == rhs.MaxStepRateAccumulatedInput &&
		lhs.MinStepRate == rhs.MinStepRate &&
		lhs.SmoothTime == rhs.SmoothTime &&
		lhs.StepSize == rhs.StepSize &&
		lhs.Clamp == rhs.Clamp &&
		lhs.StepRateCurve == rhs.StepRateCurve;
	}
};

//Dependency: GcResourceElement
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcSpawnComponentOption
{
	NMS_GameComponents::GcResourceElement SpecificModel;
	NMS::NMSString0x10 Name;
	NMS::GcSeed Seed;

	friend bool operator==(const GcSpawnComponentOption& lhs, const GcSpawnComponentOption& rhs) 
	{
		return lhs.SpecificModel == rhs.SpecificModel &&
		lhs.Name == rhs.Name &&
		lhs.Seed == rhs.Seed;
	}
};

//Dependency: GcResourceElement
//Dependency: VariableSizeString
//Dependency: GcSpawnComponentOption
//Dependency: GcAISpaceshipTypes
//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcCreatureSpawnComponentData
{
	enum class SpawnerModeEnum : uint32_t
	{
		Hidden = 0,
		Visible = 1,
		HideOnSpawn = 2,
		HiddenTimer = 3,
	};

	NMS_GameComponents::GcResourceElement SpecificModel;
	NMS::NMSString0x10 Creature;
	NMS::VariableSizeString Model;
	NMS::GcSeed Seed;
	std::vector<NMS_GameComponents::GcSpawnComponentOption> SpawnOptionList;
	NMS::NMSString0x10 TriggerID;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	int32_t FunctionKey;
	float Scale;
	NMS_GameComponents::GcAISpaceshipTypes ShipAIOverride;
	NMS_GameComponents::GcCreatureSpawnComponentData::SpawnerModeEnum SpawnerMode;
	float StartTimeMax;
	float StartTimeMin;
	float TriggerDistance;
	bool SpawnAlert;

	friend bool operator==(const GcCreatureSpawnComponentData& lhs, const GcCreatureSpawnComponentData& rhs) 
	{
		return lhs.SpecificModel == rhs.SpecificModel &&
		lhs.Creature == rhs.Creature &&
		lhs.Model == rhs.Model &&
		lhs.Seed == rhs.Seed &&
		lhs.SpawnOptionList == rhs.SpawnOptionList &&
		lhs.TriggerID == rhs.TriggerID &&
		lhs.CreatureType == rhs.CreatureType &&
		lhs.FunctionKey == rhs.FunctionKey &&
		lhs.Scale == rhs.Scale &&
		lhs.ShipAIOverride == rhs.ShipAIOverride &&
		lhs.SpawnerMode == rhs.SpawnerMode &&
		lhs.StartTimeMax == rhs.StartTimeMax &&
		lhs.StartTimeMin == rhs.StartTimeMin &&
		lhs.TriggerDistance == rhs.TriggerDistance &&
		lhs.SpawnAlert == rhs.SpawnAlert;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasBait
{
	NMS::NMSString0x10 SpecificID;
	bool OnlyPrimaryBait;
	bool RequireInBaitBox;
	bool TakeSpecificBaitIDFromSeasonData;

	friend bool operator==(const GcMissionConditionHasBait& lhs, const GcMissionConditionHasBait& rhs) 
	{
		return lhs.SpecificID == rhs.SpecificID &&
		lhs.OnlyPrimaryBait == rhs.OnlyPrimaryBait &&
		lhs.RequireInBaitBox == rhs.RequireInBaitBox &&
		lhs.TakeSpecificBaitIDFromSeasonData == rhs.TakeSpecificBaitIDFromSeasonData;
	}
};

//Dependency: NMSString0x10
struct GcCameraShakeAction
{
	NMS::NMSString0x10 Shake;
	float FalloffMax;
	float FalloffMin;

	friend bool operator==(const GcCameraShakeAction& lhs, const GcCameraShakeAction& rhs) 
	{
		return lhs.Shake == rhs.Shake &&
		lhs.FalloffMax == rhs.FalloffMax &&
		lhs.FalloffMin == rhs.FalloffMin;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCommunityResearchTier
{
	int32_t CompletedTiers;
	int32_t MissionIndex;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeTierFromSeasonData;

	friend bool operator==(const GcMissionConditionCommunityResearchTier& lhs, const GcMissionConditionCommunityResearchTier& rhs) 
	{
		return lhs.CompletedTiers == rhs.CompletedTiers &&
		lhs.MissionIndex == rhs.MissionIndex &&
		lhs.Test == rhs.Test &&
		lhs.TakeTierFromSeasonData == rhs.TakeTierFromSeasonData;
	}
};

struct GcCameraShakeCapturedData
{
	float ShakeFrequency;
	float ShakeStrength;
	float VibrateFrequency;
	float VibrateStrength;
	bool Active;

	friend bool operator==(const GcCameraShakeCapturedData& lhs, const GcCameraShakeCapturedData& rhs) 
	{
		return lhs.ShakeFrequency == rhs.ShakeFrequency &&
		lhs.ShakeStrength == rhs.ShakeStrength &&
		lhs.VibrateFrequency == rhs.VibrateFrequency &&
		lhs.VibrateStrength == rhs.VibrateStrength &&
		lhs.Active == rhs.Active;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: VariableSizeString
struct GcMissionSequenceCommunicatorOnTakeOff
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceCommunicatorOnTakeOff& lhs, const GcMissionSequenceCommunicatorOnTakeOff& rhs) 
	{
		return lhs.Comms == rhs.Comms &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: NMSString0x10
struct GcCameraShakeComponentData
{
	NMS::NMSString0x10 ShakeID;
	float FalloffDistanceMax;
	float FalloffDistanceMin;

	friend bool operator==(const GcCameraShakeComponentData& lhs, const GcCameraShakeComponentData& rhs) 
	{
		return lhs.ShakeID == rhs.ShakeID &&
		lhs.FalloffDistanceMax == rhs.FalloffDistanceMax &&
		lhs.FalloffDistanceMin == rhs.FalloffDistanceMin;
	}
};

//Dependency: NMSString0x10
struct GcRewardMissionMessage
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastInMultiplayer;

	friend bool operator==(const GcRewardMissionMessage& lhs, const GcRewardMissionMessage& rhs) 
	{
		return lhs.MessageID == rhs.MessageID &&
		lhs.BroadcastInMultiplayer == rhs.BroadcastInMultiplayer;
	}
};

//Dependency: Vector3f
struct GcCameraShakeMechanicalData
{
	NMS::Vector3f ExtraShakeFrequency;
	NMS::Vector3f ExtraVibrateFrequency;
	NMS::Vector3f ShakeFrequency;
	NMS::Vector3f ShakeStrength;
	NMS::Vector3f VibrateFrequency;
	NMS::Vector3f VibrateStrength;
	bool Active;

	friend bool operator==(const GcCameraShakeMechanicalData& lhs, const GcCameraShakeMechanicalData& rhs) 
	{
		return lhs.ExtraShakeFrequency == rhs.ExtraShakeFrequency &&
		lhs.ExtraVibrateFrequency == rhs.ExtraVibrateFrequency &&
		lhs.ShakeFrequency == rhs.ShakeFrequency &&
		lhs.ShakeStrength == rhs.ShakeStrength &&
		lhs.VibrateFrequency == rhs.VibrateFrequency &&
		lhs.VibrateStrength == rhs.VibrateStrength &&
		lhs.Active == rhs.Active;
	}
};

//Dependency: GcCameraShakeMechanicalData
//Dependency: NMSString0x10
//Dependency: GcCameraShakeCapturedData
struct GcCameraShakeData
{
	NMS_GameComponents::GcCameraShakeMechanicalData MechanicalData;
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcCameraShakeCapturedData CapturedData;
	float DecayRate;
	float FovFrequency;
	float FovStrength;
	float StrengthScale;
	float ThirdPersonDamp;
	float TimeStart;
	float TotalTime;
	float VRStrength;

	friend bool operator==(const GcCameraShakeData& lhs, const GcCameraShakeData& rhs) 
	{
		return lhs.MechanicalData == rhs.MechanicalData &&
		lhs.Name == rhs.Name &&
		lhs.CapturedData == rhs.CapturedData &&
		lhs.DecayRate == rhs.DecayRate &&
		lhs.FovFrequency == rhs.FovFrequency &&
		lhs.FovStrength == rhs.FovStrength &&
		lhs.StrengthScale == rhs.StrengthScale &&
		lhs.ThirdPersonDamp == rhs.ThirdPersonDamp &&
		lhs.TimeStart == rhs.TimeStart &&
		lhs.TotalTime == rhs.TotalTime &&
		lhs.VRStrength == rhs.VRStrength;
	}
};

struct GcCostSalvageTool
{

	friend bool operator==(const GcCostSalvageTool& lhs, const GcCostSalvageTool& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: VariableSizeString
struct TkSpeedLineData
{
	enum class LinesPositionEnum : uint32_t
	{
		Absolute = 0,
		Relative = 1,
	};

	NMS::Colour ColourEnd;
	NMS::Colour ColourOrigin;
	NMS::VariableSizeString Material;
	float Alpha;
	float FadeTime;
	float Length;
	float Lifetime;
	NMS_Toolkit::TkSpeedLineData::LinesPositionEnum LinesPosition;
	float MaxVisibleSpeed;
	float MinVisibleSpeed;
	int32_t NumberOfParticles;
	float Radius;
	float RemoveCylinderRadius;
	float Speed;
	float Width;

	friend bool operator==(const TkSpeedLineData& lhs, const TkSpeedLineData& rhs) 
	{
		return lhs.ColourEnd == rhs.ColourEnd &&
		lhs.ColourOrigin == rhs.ColourOrigin &&
		lhs.Material == rhs.Material &&
		lhs.Alpha == rhs.Alpha &&
		lhs.FadeTime == rhs.FadeTime &&
		lhs.Length == rhs.Length &&
		lhs.Lifetime == rhs.Lifetime &&
		lhs.LinesPosition == rhs.LinesPosition &&
		lhs.MaxVisibleSpeed == rhs.MaxVisibleSpeed &&
		lhs.MinVisibleSpeed == rhs.MinVisibleSpeed &&
		lhs.NumberOfParticles == rhs.NumberOfParticles &&
		lhs.Radius == rhs.Radius &&
		lhs.RemoveCylinderRadius == rhs.RemoveCylinderRadius &&
		lhs.Speed == rhs.Speed &&
		lhs.Width == rhs.Width;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcCostInteractionNeedsMaintenance
{
	NMS::NMSString0x20A CantAffordLocID;

	friend bool operator==(const GcCostInteractionNeedsMaintenance& lhs, const GcCostInteractionNeedsMaintenance& rhs) 
	{
		return lhs.CantAffordLocID == rhs.CantAffordLocID;
	}
};

//Dependency: GcOutpostLSystemPair
//Dependency: NMSString0x10
struct GcOutpostComponentData
{
	NMS::NMSString0x10 Door;
	std::vector<NMS_GameComponents::GcOutpostLSystemPair> LSystems;
	float ApproachAngle;
	float ApproachNodeTargetOffset;
	float ApproachRange;
	float ApproachSpeed;
	float CircleRadius;
	float DockingAttractConeAngle;
	float DockingAttractFacingAngle;
	float DockingAttractRange;
	float LandingHeight;
	float LandingSpeed;
	float PlayerAutoLandRange;
	float PostTakeOffExtraPlayerHeight;
	float PostTakeOffExtraPlayerSpeed;
	float TakeOffAlignTime;
	float TakeOffBoost;
	float TakeOffExtraAIHeight;
	float TakeOffFwdDist;
	float TakeOffHeight;
	float TakeOffProgressForExtraHeight;
	float TakeOffSpeed;
	float TakeOffTime;
	bool AIDestination;
	bool Anomaly;
	bool CheckLandingAreaClear;
	bool Frigate;
	bool HasDoors;
	bool HasOwnGravity;
	bool NexusExterior;
	bool NexusInterior;
	bool RotateToDock;
	bool SpaceStation;

	friend bool operator==(const GcOutpostComponentData& lhs, const GcOutpostComponentData& rhs) 
	{
		return lhs.Door == rhs.Door &&
		lhs.LSystems == rhs.LSystems &&
		lhs.ApproachAngle == rhs.ApproachAngle &&
		lhs.ApproachNodeTargetOffset == rhs.ApproachNodeTargetOffset &&
		lhs.ApproachRange == rhs.ApproachRange &&
		lhs.ApproachSpeed == rhs.ApproachSpeed &&
		lhs.CircleRadius == rhs.CircleRadius &&
		lhs.DockingAttractConeAngle == rhs.DockingAttractConeAngle &&
		lhs.DockingAttractFacingAngle == rhs.DockingAttractFacingAngle &&
		lhs.DockingAttractRange == rhs.DockingAttractRange &&
		lhs.LandingHeight == rhs.LandingHeight &&
		lhs.LandingSpeed == rhs.LandingSpeed &&
		lhs.PlayerAutoLandRange == rhs.PlayerAutoLandRange &&
		lhs.PostTakeOffExtraPlayerHeight == rhs.PostTakeOffExtraPlayerHeight &&
		lhs.PostTakeOffExtraPlayerSpeed == rhs.PostTakeOffExtraPlayerSpeed &&
		lhs.TakeOffAlignTime == rhs.TakeOffAlignTime &&
		lhs.TakeOffBoost == rhs.TakeOffBoost &&
		lhs.TakeOffExtraAIHeight == rhs.TakeOffExtraAIHeight &&
		lhs.TakeOffFwdDist == rhs.TakeOffFwdDist &&
		lhs.TakeOffHeight == rhs.TakeOffHeight &&
		lhs.TakeOffProgressForExtraHeight == rhs.TakeOffProgressForExtraHeight &&
		lhs.TakeOffSpeed == rhs.TakeOffSpeed &&
		lhs.TakeOffTime == rhs.TakeOffTime &&
		lhs.AIDestination == rhs.AIDestination &&
		lhs.Anomaly == rhs.Anomaly &&
		lhs.CheckLandingAreaClear == rhs.CheckLandingAreaClear &&
		lhs.Frigate == rhs.Frigate &&
		lhs.HasDoors == rhs.HasDoors &&
		lhs.HasOwnGravity == rhs.HasOwnGravity &&
		lhs.NexusExterior == rhs.NexusExterior &&
		lhs.NexusInterior == rhs.NexusInterior &&
		lhs.RotateToDock == rhs.RotateToDock &&
		lhs.SpaceStation == rhs.SpaceStation;
	}
};

struct GcMissionDifficulty
{
	enum class MissionDifficultyEnum : uint32_t
	{
		Easy = 0,
		Normal = 1,
		Hard = 2,
	};

	NMS_GameComponents::GcMissionDifficulty::MissionDifficultyEnum MissionDifficulty;

	friend bool operator==(const GcMissionDifficulty& lhs, const GcMissionDifficulty& rhs) 
	{
		return lhs.MissionDifficulty == rhs.MissionDifficulty;
	}
};

struct GcMissionConditionExocraftMoving
{

	friend bool operator==(const GcMissionConditionExocraftMoving& lhs, const GcMissionConditionExocraftMoving& rhs) 
	{
		return true;
	}
};

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcPlayerHazardData
{
	NMS::NMSString0x10 Damage;
	NMS::Vector2f DamageRate;
	NMS::Vector2f ProtectionTime;
	NMS::Vector2f WoundRate;
	float CapValue;
	float CriticalValue;
	float OutputMaxAddition;
	float OutputMinAddition;
	float OutputMultiplier;
	float ProtectionInitialTime;
	float RechargeInitialTime;
	float RechargeTime;
	float TriggerValue;
	NMS_Toolkit::TkCurveType DisplayCurve;
	bool Increases;

	friend bool operator==(const GcPlayerHazardData& lhs, const GcPlayerHazardData& rhs) 
	{
		return lhs.Damage == rhs.Damage &&
		lhs.DamageRate == rhs.DamageRate &&
		lhs.ProtectionTime == rhs.ProtectionTime &&
		lhs.WoundRate == rhs.WoundRate &&
		lhs.CapValue == rhs.CapValue &&
		lhs.CriticalValue == rhs.CriticalValue &&
		lhs.OutputMaxAddition == rhs.OutputMaxAddition &&
		lhs.OutputMinAddition == rhs.OutputMinAddition &&
		lhs.OutputMultiplier == rhs.OutputMultiplier &&
		lhs.ProtectionInitialTime == rhs.ProtectionInitialTime &&
		lhs.RechargeInitialTime == rhs.RechargeInitialTime &&
		lhs.RechargeTime == rhs.RechargeTime &&
		lhs.TriggerValue == rhs.TriggerValue &&
		lhs.DisplayCurve == rhs.DisplayCurve &&
		lhs.Increases == rhs.Increases;
	}
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcMissionConditionIsTechnologyRepaired
{
	NMS::NMSString0x10 SpecificComponent;
	NMS::NMSString0x10 Technology;
	int32_t RepairedComponents;
	NMS_GameComponents::GcStatsTypes TechStat;
	bool CountAsRepairIfTechMissing;

	friend bool operator==(const GcMissionConditionIsTechnologyRepaired& lhs, const GcMissionConditionIsTechnologyRepaired& rhs) 
	{
		return lhs.SpecificComponent == rhs.SpecificComponent &&
		lhs.Technology == rhs.Technology &&
		lhs.RepairedComponents == rhs.RepairedComponents &&
		lhs.TechStat == rhs.TechStat &&
		lhs.CountAsRepairIfTechMissing == rhs.CountAsRepairIfTechMissing;
	}
};

//Dependency: GcConstructionPart
struct GcConstructionPartGroup
{
	std::vector<NMS_GameComponents::GcConstructionPart> ValidParts;

	friend bool operator==(const GcConstructionPartGroup& lhs, const GcConstructionPartGroup& rhs) 
	{
		return lhs.ValidParts == rhs.ValidParts;
	}
};

struct GcDifficultyInventoryStackSizeOptionData
{
	int32_t MaxProductStackSizes[13];
	int32_t MaxSubstanceStackSizes[13];
	int32_t ProductStackLimit;
	int32_t SubstanceStackLimit;

	friend bool operator==(const GcDifficultyInventoryStackSizeOptionData& lhs, const GcDifficultyInventoryStackSizeOptionData& rhs) 
	{
		return std::equal(std::begin(lhs.MaxProductStackSizes), std::end(lhs.MaxProductStackSizes), std::begin(rhs.MaxProductStackSizes)) &&
		std::equal(std::begin(lhs.MaxSubstanceStackSizes), std::end(lhs.MaxSubstanceStackSizes), std::begin(rhs.MaxSubstanceStackSizes)) &&
		lhs.ProductStackLimit == rhs.ProductStackLimit &&
		lhs.SubstanceStackLimit == rhs.SubstanceStackLimit;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCameraShakeTriggerData
{
	NMS::NMSString0x10 Anim;
	int32_t FrameStart;
	NMS::NMSString0x20 Shake;

	friend bool operator==(const GcCameraShakeTriggerData& lhs, const GcCameraShakeTriggerData& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.FrameStart == rhs.FrameStart &&
		lhs.Shake == rhs.Shake;
	}
};

struct GcRewardSetFirstPurpleSystemUA
{

	friend bool operator==(const GcRewardSetFirstPurpleSystemUA& lhs, const GcRewardSetFirstPurpleSystemUA& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardInstallTech
{
	enum class InventoryToInstallInEnum : uint32_t
	{
		Personal = 0,
		PersonalTech = 1,
		Ship = 2,
		ShipTech = 3,
		Freighter = 4,
		Vehicle = 5,
		Weapon = 6,
	};

	NMS::NMSString0x10 ReplaceExistingTech;
	NMS::NMSString0x10 TechId;
	NMS_GameComponents::GcRewardInstallTech::InventoryToInstallInEnum InventoryToInstallIn;
	int32_t SeedOffset;
	bool InstallBroken;
	bool Silent;

	friend bool operator==(const GcRewardInstallTech& lhs, const GcRewardInstallTech& rhs) 
	{
		return lhs.ReplaceExistingTech == rhs.ReplaceExistingTech &&
		lhs.TechId == rhs.TechId &&
		lhs.InventoryToInstallIn == rhs.InventoryToInstallIn &&
		lhs.SeedOffset == rhs.SeedOffset &&
		lhs.InstallBroken == rhs.InstallBroken &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcCreatureFilename
{
	NMS::VariableSizeString ExtraFilename;
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcCreatureFilename& lhs, const GcCreatureFilename& rhs) 
	{
		return lhs.ExtraFilename == rhs.ExtraFilename &&
		lhs.Filename == rhs.Filename &&
		lhs.ID == rhs.ID;
	}
};

struct GcShipAIDeathData
{
	float BrakeForce;
	float DroneDeathBoomTotalTime;
	float DroneDeathForce;
	float DroneDeathOffset;
	float DroneDeathTime;
	float DroneDeathTimeout;
	int32_t DroneNumDeathBooms;

	friend bool operator==(const GcShipAIDeathData& lhs, const GcShipAIDeathData& rhs) 
	{
		return lhs.BrakeForce == rhs.BrakeForce &&
		lhs.DroneDeathBoomTotalTime == rhs.DroneDeathBoomTotalTime &&
		lhs.DroneDeathForce == rhs.DroneDeathForce &&
		lhs.DroneDeathOffset == rhs.DroneDeathOffset &&
		lhs.DroneDeathTime == rhs.DroneDeathTime &&
		lhs.DroneDeathTimeout == rhs.DroneDeathTimeout &&
		lhs.DroneNumDeathBooms == rhs.DroneNumDeathBooms;
	}
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMultiSpecificItemEntry
{
	enum class MultiItemRewardTypeEnum : uint32_t
	{
		Product = 0,
		Substance = 1,
		ProcTech = 2,
		ProcProduct = 3,
		InventorySlot = 4,
		InventorySlotShip = 5,
		InventorySlotWeapon = 6,
		CommunityTierProduct = 7,
	};

	NMS::NMSString0x20A CustomRewardLocID;
	NMS::NMSString0x20A ProcTechGroup;
	std::vector<NMS::NMSString0x10> CommunityTierProductList;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 SeasonRewardListFormat;
	int32_t Amount;
	NMS_GameComponents::GcMultiSpecificItemEntry::MultiItemRewardTypeEnum MultiItemRewardType;
	NMS_GameComponents::GcRarity ProcProdRarity;
	NMS_GameComponents::GcProceduralProductCategory ProcProdType;
	int32_t ProcTechQuality;
	bool AlsoTeachTechBoxRecipe;
	bool HideInSeasonRewards;
	bool IllegalProcTech;
	bool SentinelProcTech;

	friend bool operator==(const GcMultiSpecificItemEntry& lhs, const GcMultiSpecificItemEntry& rhs) 
	{
		return lhs.CustomRewardLocID == rhs.CustomRewardLocID &&
		lhs.ProcTechGroup == rhs.ProcTechGroup &&
		lhs.CommunityTierProductList == rhs.CommunityTierProductList &&
		lhs.Id == rhs.Id &&
		lhs.SeasonRewardListFormat == rhs.SeasonRewardListFormat &&
		lhs.Amount == rhs.Amount &&
		lhs.MultiItemRewardType == rhs.MultiItemRewardType &&
		lhs.ProcProdRarity == rhs.ProcProdRarity &&
		lhs.ProcProdType == rhs.ProcProdType &&
		lhs.ProcTechQuality == rhs.ProcTechQuality &&
		lhs.AlsoTeachTechBoxRecipe == rhs.AlsoTeachTechBoxRecipe &&
		lhs.HideInSeasonRewards == rhs.HideInSeasonRewards &&
		lhs.IllegalProcTech == rhs.IllegalProcTech &&
		lhs.SentinelProcTech == rhs.SentinelProcTech;
	}
};

//Dependency: GcMultiSpecificItemEntry
struct GcRewardMultiSpecificItems
{
	std::vector<NMS_GameComponents::GcMultiSpecificItemEntry> Items;
	bool Silent;

	friend bool operator==(const GcRewardMultiSpecificItems& lhs, const GcRewardMultiSpecificItems& rhs) 
	{
		return lhs.Items == rhs.Items &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: TkCurveType
struct GcCameraWarpSettings
{
	float FocusPointDist;
	float OffsetXFrequency;
	float OffsetXPhase;
	float OffsetXRange;
	float OffsetYBias;
	float OffsetYFrequency_1;
	float OffsetYFrequency_2;
	float OffsetYPhase_1;
	float OffsetYPhase_2;
	float OffsetYRange;
	float OffsetYStartBias;
	float OffsetZBias;
	float OffsetZFrequency_1;
	float OffsetZFrequency_2;
	float OffsetZPhase_1;
	float OffsetZPhase_2;
	float OffsetZRange;
	float OffsetZStartBias;
	float RollRange;
	float YawnRange;
	NMS_Toolkit::TkCurveType OffsetXCurve;

	friend bool operator==(const GcCameraWarpSettings& lhs, const GcCameraWarpSettings& rhs) 
	{
		return lhs.FocusPointDist == rhs.FocusPointDist &&
		lhs.OffsetXFrequency == rhs.OffsetXFrequency &&
		lhs.OffsetXPhase == rhs.OffsetXPhase &&
		lhs.OffsetXRange == rhs.OffsetXRange &&
		lhs.OffsetYBias == rhs.OffsetYBias &&
		lhs.OffsetYFrequency_1 == rhs.OffsetYFrequency_1 &&
		lhs.OffsetYFrequency_2 == rhs.OffsetYFrequency_2 &&
		lhs.OffsetYPhase_1 == rhs.OffsetYPhase_1 &&
		lhs.OffsetYPhase_2 == rhs.OffsetYPhase_2 &&
		lhs.OffsetYRange == rhs.OffsetYRange &&
		lhs.OffsetYStartBias == rhs.OffsetYStartBias &&
		lhs.OffsetZBias == rhs.OffsetZBias &&
		lhs.OffsetZFrequency_1 == rhs.OffsetZFrequency_1 &&
		lhs.OffsetZFrequency_2 == rhs.OffsetZFrequency_2 &&
		lhs.OffsetZPhase_1 == rhs.OffsetZPhase_1 &&
		lhs.OffsetZPhase_2 == rhs.OffsetZPhase_2 &&
		lhs.OffsetZRange == rhs.OffsetZRange &&
		lhs.OffsetZStartBias == rhs.OffsetZStartBias &&
		lhs.RollRange == rhs.RollRange &&
		lhs.YawnRange == rhs.YawnRange &&
		lhs.OffsetXCurve == rhs.OffsetXCurve;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkGridLayersEnum
{
	enum class GridLayerTypesEnum : uint32_t
	{
		Small = 0,
		Large = 1,
		Resources_Heridium = 2,
		Resources_Iridium = 3,
		Resources_Copper = 4,
		Resources_Nickel = 5,
		Resources_Aluminium = 6,
		Resources_Gold = 7,
		Resources_Emeril = 8,
	};

	NMS_Toolkit::TkGridLayersEnum::GridLayerTypesEnum GridLayerTypes;

	friend bool operator==(const TkGridLayersEnum& lhs, const TkGridLayersEnum& rhs) 
	{
		return lhs.GridLayerTypes == rhs.GridLayerTypes;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCatalogueGroups
{
	enum class CatalogueGroupEnum : uint32_t
	{
		MaterialsAndItems = 0,
		CraftingAndTechnology = 1,
		Buildables = 2,
		Recipes = 3,
		Wonders = 4,
	};

	NMS_GameComponents::GcCatalogueGroups::CatalogueGroupEnum CatalogueGroup;

	friend bool operator==(const GcCatalogueGroups& lhs, const GcCatalogueGroups& rhs) 
	{
		return lhs.CatalogueGroup == rhs.CatalogueGroup;
	}
};

struct GcHazardValues
{
	float Extreme;
	float Normal;

	friend bool operator==(const GcHazardValues& lhs, const GcHazardValues& rhs) 
	{
		return lhs.Extreme == rhs.Extreme &&
		lhs.Normal == rhs.Normal;
	}
};

//Dependency: Colour
struct GcColourModifier
{
	NMS::Colour ForceColourTo;
	float MultiplySaturation;
	float MultiplyValue;
	float OffsetSaturation;
	float OffsetValue;
	bool ForceColour;

	friend bool operator==(const GcColourModifier& lhs, const GcColourModifier& rhs) 
	{
		return lhs.ForceColourTo == rhs.ForceColourTo &&
		lhs.MultiplySaturation == rhs.MultiplySaturation &&
		lhs.MultiplyValue == rhs.MultiplyValue &&
		lhs.OffsetSaturation == rhs.OffsetSaturation &&
		lhs.OffsetValue == rhs.OffsetValue &&
		lhs.ForceColour == rhs.ForceColour;
	}
};

//Dependency: GcColourModifier
struct GcWeatherColourModifiers
{
	NMS_GameComponents::GcColourModifier HeavyAirColour[5];
	NMS_GameComponents::GcColourModifier CloudColour1;
	NMS_GameComponents::GcColourModifier CloudColour2;
	NMS_GameComponents::GcColourModifier FogColour;
	NMS_GameComponents::GcColourModifier HeightFogColour;
	NMS_GameComponents::GcColourModifier HorizonColour;
	NMS_GameComponents::GcColourModifier LightColour;
	NMS_GameComponents::GcColourModifier SkyColour;
	NMS_GameComponents::GcColourModifier SkyUpperColour;
	NMS_GameComponents::GcColourModifier SunColour;

	friend bool operator==(const GcWeatherColourModifiers& lhs, const GcWeatherColourModifiers& rhs) 
	{
		return std::equal(std::begin(lhs.HeavyAirColour), std::end(lhs.HeavyAirColour), std::begin(rhs.HeavyAirColour)) &&
		lhs.CloudColour1 == rhs.CloudColour1 &&
		lhs.CloudColour2 == rhs.CloudColour2 &&
		lhs.FogColour == rhs.FogColour &&
		lhs.HeightFogColour == rhs.HeightFogColour &&
		lhs.HorizonColour == rhs.HorizonColour &&
		lhs.LightColour == rhs.LightColour &&
		lhs.SkyColour == rhs.SkyColour &&
		lhs.SkyUpperColour == rhs.SkyUpperColour &&
		lhs.SunColour == rhs.SunColour;
	}
};

//Dependency: GcWeatherColourModifiers
//Dependency: GcFogProperties
//Dependency: Vector2f
struct GcStormProperties
{
	NMS_GameComponents::GcWeatherColourModifiers ColourModifiers;
	NMS_GameComponents::GcFogProperties Fog;
	NMS::Vector2f HazardModifiers[6];
	float Weighting;

	friend bool operator==(const GcStormProperties& lhs, const GcStormProperties& rhs) 
	{
		return lhs.ColourModifiers == rhs.ColourModifiers &&
		lhs.Fog == rhs.Fog &&
		std::equal(std::begin(lhs.HazardModifiers), std::end(lhs.HazardModifiers), std::begin(rhs.HazardModifiers)) &&
		lhs.Weighting == rhs.Weighting;
	}
};

//Dependency: Colour
struct GcLightShaftProperties
{
	NMS::Colour LightShaftColourBottom;
	NMS::Colour LightShaftColourTop;
	float LightShaftBottom;
	float LightShaftScattering;
	float LightShaftStrength;
	float LightShaftTop;

	friend bool operator==(const GcLightShaftProperties& lhs, const GcLightShaftProperties& rhs) 
	{
		return lhs.LightShaftColourBottom == rhs.LightShaftColourBottom &&
		lhs.LightShaftColourTop == rhs.LightShaftColourTop &&
		lhs.LightShaftBottom == rhs.LightShaftBottom &&
		lhs.LightShaftScattering == rhs.LightShaftScattering &&
		lhs.LightShaftStrength == rhs.LightShaftStrength &&
		lhs.LightShaftTop == rhs.LightShaftTop;
	}
};

//Dependency: VariableSizeString
//Dependency: GcHazardValues
//Dependency: GcStormProperties
//Dependency: GcWeatherColourModifiers
//Dependency: GcFogProperties
//Dependency: GcScreenFilters
//Dependency: GcLightShaftProperties
//Dependency: GcSkyProperties
//Dependency: NMSString0x10
struct GcWeatherProperties
{
	NMS_GameComponents::GcWeatherColourModifiers ExtremeColourModifiers;
	NMS_GameComponents::GcFogProperties ExtremeFog;
	NMS_GameComponents::GcFogProperties FlightFog;
	NMS_GameComponents::GcFogProperties Fog;
	NMS_GameComponents::GcFogProperties StormFog;
	NMS_GameComponents::GcLightShaftProperties LightShaftProperties;
	NMS_GameComponents::GcLightShaftProperties StormLightShaftProperties;
	std::vector<NMS::VariableSizeString> HeavyAir;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcScreenFilters> StormFilterOptions;
	std::vector<NMS_GameComponents::GcStormProperties> Storms;
	std::vector<NMS::NMSString0x10> WeatherEffectsIds;
	std::vector<NMS::NMSString0x10> WeatherHazardsIds;
	NMS_GameComponents::GcHazardValues LifeSupportDrain[6];
	NMS_GameComponents::GcHazardValues Radiation[6];
	NMS_GameComponents::GcSkyProperties Sky;
	NMS_GameComponents::GcHazardValues SpookLevel[6];
	NMS_GameComponents::GcHazardValues Temperature[6];
	NMS_GameComponents::GcHazardValues Toxicity[6];
	float RainbowChance[4];
	float ExtremeWeatherChance;
	float HighStormsChance;
	float LowStormsChance;
	float MaxStormFilterBlend;
	bool OverrideRadiation;
	bool OverrideSpookLevel;
	bool OverrideTemperature;
	bool OverrideToxicity;
	bool UseLightShaftProperties;
	bool UseStormLightShaftProperties;
	bool UseWeatherFog;
	bool UseWeatherSky;

	friend bool operator==(const GcWeatherProperties& lhs, const GcWeatherProperties& rhs) 
	{
		return lhs.ExtremeColourModifiers == rhs.ExtremeColourModifiers &&
		lhs.ExtremeFog == rhs.ExtremeFog &&
		lhs.FlightFog == rhs.FlightFog &&
		lhs.Fog == rhs.Fog &&
		lhs.StormFog == rhs.StormFog &&
		lhs.LightShaftProperties == rhs.LightShaftProperties &&
		lhs.StormLightShaftProperties == rhs.StormLightShaftProperties &&
		lhs.HeavyAir == rhs.HeavyAir &&
		lhs.Name == rhs.Name &&
		lhs.StormFilterOptions == rhs.StormFilterOptions &&
		lhs.Storms == rhs.Storms &&
		lhs.WeatherEffectsIds == rhs.WeatherEffectsIds &&
		lhs.WeatherHazardsIds == rhs.WeatherHazardsIds &&
		std::equal(std::begin(lhs.LifeSupportDrain), std::end(lhs.LifeSupportDrain), std::begin(rhs.LifeSupportDrain)) &&
		std::equal(std::begin(lhs.Radiation), std::end(lhs.Radiation), std::begin(rhs.Radiation)) &&
		lhs.Sky == rhs.Sky &&
		std::equal(std::begin(lhs.SpookLevel), std::end(lhs.SpookLevel), std::begin(rhs.SpookLevel)) &&
		std::equal(std::begin(lhs.Temperature), std::end(lhs.Temperature), std::begin(rhs.Temperature)) &&
		std::equal(std::begin(lhs.Toxicity), std::end(lhs.Toxicity), std::begin(rhs.Toxicity)) &&
		std::equal(std::begin(lhs.RainbowChance), std::end(lhs.RainbowChance), std::begin(rhs.RainbowChance)) &&
		lhs.ExtremeWeatherChance == rhs.ExtremeWeatherChance &&
		lhs.HighStormsChance == rhs.HighStormsChance &&
		lhs.LowStormsChance == rhs.LowStormsChance &&
		lhs.MaxStormFilterBlend == rhs.MaxStormFilterBlend &&
		lhs.OverrideRadiation == rhs.OverrideRadiation &&
		lhs.OverrideSpookLevel == rhs.OverrideSpookLevel &&
		lhs.OverrideTemperature == rhs.OverrideTemperature &&
		lhs.OverrideToxicity == rhs.OverrideToxicity &&
		lhs.UseLightShaftProperties == rhs.UseLightShaftProperties &&
		lhs.UseStormLightShaftProperties == rhs.UseStormLightShaftProperties &&
		lhs.UseWeatherFog == rhs.UseWeatherFog &&
		lhs.UseWeatherSky == rhs.UseWeatherSky;
	}
};

//Dependency: GcCombatEffectType
struct GcImpactCombatEffectData
{
	NMS_GameComponents::GcCombatEffectType CombatEffectType;
	float CurrentDuration;
	float DamagePerSeccond;
	float TotalDuration;

	friend bool operator==(const GcImpactCombatEffectData& lhs, const GcImpactCombatEffectData& rhs) 
	{
		return lhs.CombatEffectType == rhs.CombatEffectType &&
		lhs.CurrentDuration == rhs.CurrentDuration &&
		lhs.DamagePerSeccond == rhs.DamagePerSeccond &&
		lhs.TotalDuration == rhs.TotalDuration;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryEntryBranch
{
	NMS::NMSString0x20A Entry;
	NMS::NMSString0x10 RequiresMission;
	bool ConditionMissionComplete;

	friend bool operator==(const GcStoryEntryBranch& lhs, const GcStoryEntryBranch& rhs) 
	{
		return lhs.Entry == rhs.Entry &&
		lhs.RequiresMission == rhs.RequiresMission &&
		lhs.ConditionMissionComplete == rhs.ConditionMissionComplete;
	}
};

//Dependency: NMSString0x10
struct GcRewardIncrementStat
{
	NMS::NMSString0x10 Stat;
	int32_t Amount;

	friend bool operator==(const GcRewardIncrementStat& lhs, const GcRewardIncrementStat& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: VariableSizeString
struct GcWeightedFilename
{
	NMS::VariableSizeString Filename;
	float Weight;

	friend bool operator==(const GcWeightedFilename& lhs, const GcWeightedFilename& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.Weight == rhs.Weight;
	}
};

struct GcChairComponentData
{

	friend bool operator==(const GcChairComponentData& lhs, const GcChairComponentData& rhs) 
	{
		return true;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionIsPlayerWanted
{
	int32_t Level;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionIsPlayerWanted& lhs, const GcMissionConditionIsPlayerWanted& rhs) 
	{
		return lhs.Level == rhs.Level &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: GcCombatEffectsProperties
struct GcCombatEffectsComponentData
{
	NMS_GameComponents::GcCombatEffectsProperties EffectsProperties[6];

	friend bool operator==(const GcCombatEffectsComponentData& lhs, const GcCombatEffectsComponentData& rhs) 
	{
		return std::equal(std::begin(lhs.EffectsProperties), std::end(lhs.EffectsProperties), std::begin(rhs.EffectsProperties));
	}
};

//Dependency: NMSString0x10
struct GcCharacterAlternateAnimation
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Replacement;

	friend bool operator==(const GcCharacterAlternateAnimation& lhs, const GcCharacterAlternateAnimation& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Replacement == rhs.Replacement;
	}
};

struct GcRewardPoliceScanSignal
{
	bool Attack;

	friend bool operator==(const GcRewardPoliceScanSignal& lhs, const GcRewardPoliceScanSignal& rhs) 
	{
		return lhs.Attack == rhs.Attack;
	}
};

//Dependency: NMSString0x80
struct GcModSettingsInfo
{
	std::vector<uint64_t> Dependencies;
	uint64_t AuthorID;
	uint64_t ID;
	uint64_t LastUpdated;
	uint16_t ModPriority;
	NMS::NMSString0x80 Author;
	NMS::NMSString0x80 Name;
	bool Enabled;
	bool EnabledVR;

	friend bool operator==(const GcModSettingsInfo& lhs, const GcModSettingsInfo& rhs) 
	{
		return lhs.Dependencies == rhs.Dependencies &&
		lhs.AuthorID == rhs.AuthorID &&
		lhs.ID == rhs.ID &&
		lhs.LastUpdated == rhs.LastUpdated &&
		lhs.ModPriority == rhs.ModPriority &&
		lhs.Author == rhs.Author &&
		lhs.Name == rhs.Name &&
		lhs.Enabled == rhs.Enabled &&
		lhs.EnabledVR == rhs.EnabledVR;
	}
};

//Dependency: GcModSettingsInfo
struct GcModSettings
{
	std::vector<NMS_GameComponents::GcModSettingsInfo> Data;
	bool DisableAllMods;

	friend bool operator==(const GcModSettings& lhs, const GcModSettings& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.DisableAllMods == rhs.DisableAllMods;
	}
};

struct GcRewardHazard
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool Silent;

	friend bool operator==(const GcRewardHazard& lhs, const GcRewardHazard& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: NMSString0x10
struct GcCreatureBehaviourTreeData
{
	NMS::NMSString0x10 Id;
	std::vector<NMSTemplate> Nodes;

	friend bool operator==(const GcCreatureBehaviourTreeData& lhs, const GcCreatureBehaviourTreeData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Nodes == rhs.Nodes;
	}
};

//Dependency: GcCreatureBehaviourTreeData
struct GcCreatureBehaviourTrees
{
	std::vector<NMS_GameComponents::GcCreatureBehaviourTreeData> BehaviourTree;

	friend bool operator==(const GcCreatureBehaviourTrees& lhs, const GcCreatureBehaviourTrees& rhs) 
	{
		return lhs.BehaviourTree == rhs.BehaviourTree;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkRandomComponentData
{
	int32_t Seed;

	friend bool operator==(const TkRandomComponentData& lhs, const TkRandomComponentData& rhs) 
	{
		return lhs.Seed == rhs.Seed;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostTableEntry
{
	NMS::NMSString0x20A CannotAffordOSDMsg;
	NMS::NMSString0x20A CommunityContributionCapLocID;
	NMSTemplate Cost;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 MissionMessageWhenCharged;
	int32_t CommunityContributionValue;
	bool DisplayCost;
	bool DisplayOnlyCostIfCantAfford;
	bool DontCharge;
	bool HideCostStringIfCanAfford;
	bool HideOptionAndDisplayCostOnly;
	bool InvertCanAffordOutcome;
	bool MustAffordInCreative;
	bool RemoveOptionIfCantAfford;

	friend bool operator==(const GcCostTableEntry& lhs, const GcCostTableEntry& rhs) 
	{
		return lhs.CannotAffordOSDMsg == rhs.CannotAffordOSDMsg &&
		lhs.CommunityContributionCapLocID == rhs.CommunityContributionCapLocID &&
		lhs.Cost == rhs.Cost &&
		lhs.Id == rhs.Id &&
		lhs.MissionMessageWhenCharged == rhs.MissionMessageWhenCharged &&
		lhs.CommunityContributionValue == rhs.CommunityContributionValue &&
		lhs.DisplayCost == rhs.DisplayCost &&
		lhs.DisplayOnlyCostIfCantAfford == rhs.DisplayOnlyCostIfCantAfford &&
		lhs.DontCharge == rhs.DontCharge &&
		lhs.HideCostStringIfCanAfford == rhs.HideCostStringIfCanAfford &&
		lhs.HideOptionAndDisplayCostOnly == rhs.HideOptionAndDisplayCostOnly &&
		lhs.InvertCanAffordOutcome == rhs.InvertCanAffordOutcome &&
		lhs.MustAffordInCreative == rhs.MustAffordInCreative &&
		lhs.RemoveOptionIfCantAfford == rhs.RemoveOptionIfCantAfford;
	}
};

//Dependency: GcCostTableEntry
struct GcCostTable
{
	std::vector<NMS_GameComponents::GcCostTableEntry> AtlasPathCosts;
	std::vector<NMS_GameComponents::GcCostTableEntry> InteractionTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> ItemCostsTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> SimpleInteractionTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> UnusedCostsTable;

	friend bool operator==(const GcCostTable& lhs, const GcCostTable& rhs) 
	{
		return lhs.AtlasPathCosts == rhs.AtlasPathCosts &&
		lhs.InteractionTable == rhs.InteractionTable &&
		lhs.ItemCostsTable == rhs.ItemCostsTable &&
		lhs.SimpleInteractionTable == rhs.SimpleInteractionTable &&
		lhs.UnusedCostsTable == rhs.UnusedCostsTable;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionIsMissionInProgress
{
	NMS::NMSString0x10 MissionID;
	bool MustBeSelectedMission;

	friend bool operator==(const GcMissionConditionIsMissionInProgress& lhs, const GcMissionConditionIsMissionInProgress& rhs) 
	{
		return lhs.MissionID == rhs.MissionID &&
		lhs.MustBeSelectedMission == rhs.MustBeSelectedMission;
	}
};

//Dependency: GcMaintenanceOverride
struct GcMaintenanceOverrideTable
{
	std::vector<NMS_GameComponents::GcMaintenanceOverride> Table;

	friend bool operator==(const GcMaintenanceOverrideTable& lhs, const GcMaintenanceOverrideTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcStoryEntryBranch
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcStoryEntry
{
	NMS::NMSString0x20A AlienText;
	NMS::NMSString0x20A Entry;
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcStoryEntryBranch> BranchedEntries;
	NMS_GameComponents::GcAlienRace AlienTextForceRace;
	bool AutoPrefixWithAlienText;

	friend bool operator==(const GcStoryEntry& lhs, const GcStoryEntry& rhs) 
	{
		return lhs.AlienText == rhs.AlienText &&
		lhs.Entry == rhs.Entry &&
		lhs.Title == rhs.Title &&
		lhs.BranchedEntries == rhs.BranchedEntries &&
		lhs.AlienTextForceRace == rhs.AlienTextForceRace &&
		lhs.AutoPrefixWithAlienText == rhs.AutoPrefixWithAlienText;
	}
};

struct GcCharacterInterfaceComponentData
{

	friend bool operator==(const GcCharacterInterfaceComponentData& lhs, const GcCharacterInterfaceComponentData& rhs) 
	{
		return true;
	}
};

struct GcPortalComponentData
{
	float Temp;

	friend bool operator==(const GcPortalComponentData& lhs, const GcPortalComponentData& rhs) 
	{
		return lhs.Temp == rhs.Temp;
	}
};

struct GcMissionSequenceSuppressMarkers
{
	bool Suppressed;
	bool SuppressedAfterNextWarp;

	friend bool operator==(const GcMissionSequenceSuppressMarkers& lhs, const GcMissionSequenceSuppressMarkers& rhs) 
	{
		return lhs.Suppressed == rhs.Suppressed &&
		lhs.SuppressedAfterNextWarp == rhs.SuppressedAfterNextWarp;
	}
};

struct GcPhysicsCollisionGroups
{
	enum class CollisionGroupEnum : uint32_t
	{
		Normal = 0,
		Terrain = 1,
		TerrainInstance = 2,
		TerrainActivated = 3,
		Water = 4,
		Substance = 5,
		Asteroid = 6,
		Player = 7,
		NetworkPlayer = 8,
		NPC = 9,
		Ragdoll = 10,
		Vehicle = 11,
		Vehicle_Piloted = 12,
		Creature = 13,
		Spaceship = 14,
		Spaceship_Landing = 15,
		Debris = 16,
		Shield = 17,
		Loot = 18,
		Trigger = 19,
		CollidesWithNothing = 20,
		CollidesWithEverything = 21,
		DefaultRaycast = 22,
		Raycast = 23,
		Raycast_Camera = 24,
		Raycast_SampleCollisionWithCamera = 25,
		Raycast_PlayerInteract = 26,
		Raycast_PlayerInteract_Shoot = 27,
		Raycast_Projectile = 28,
		Raycast_LaserBeam = 29,
		Raycast_WeaponOfPlayer = 30,
		Raycast_WeaponOfAgent = 31,
		Raycast_Binoculars = 32,
		Raycast_TerrainEditingBeam = 33,
		Raycast_TerrainEditing_OverlappingObjects = 34,
		Raycast_PlayerClimb = 35,
		Raycast_PlayerAim = 36,
		Raycast_PlayerThrow = 37,
		Raycast_PlayerSpawn = 38,
		Raycast_ObjectPlacement = 39,
		Raycast_DroneControl = 40,
		Raycast_PlanetHeightTest = 41,
		Raycast_PlanetHeightTestIncludingStructures = 42,
		Raycast_LineOfSight = 43,
		Raycast_VehicleCanDriveOn = 44,
		Raycast_SpaceshipAvoidance = 45,
		Raycast_SpaceshipAvoidanceOnLeaving = 46,
		Raycast_HudPing = 47,
		Raycast_HudPingNoTerrain = 48,
		Raycast_ObstacleToAgentMovement = 49,
		Raycast_DebugEditor = 50,
		Raycast_PlayerIk = 51,
		Raycast_MechIk = 52,
		Raycast_CreatureIk = 53,
		Raycast_CreatureIk_Indoors = 54,
		Raycast_NavigationLink = 55,
		Raycast_AiShipAtack = 56,
		Raycast_AiShipTravel = 57,
		Raycast_ObstructionQuery = 58,
		Raycast_GeometryProbe = 59,
		Raycast_DroneTargetSensing_Friendly = 60,
		Raycast_DroneTargetSensing_Unfriendly = 61,
		Raycast_DroneTargetSensing_Friendly_NoShield = 62,
		Raycast_DroneTargetSensing_Unfriendly_NoShield = 63,
		Raycast_ObjectPlacementAddObject = 64,
		Raycast_CatchCreatures = 65,
		Raycast_CatchNormal = 66,
		Raycast_CatchTerrain = 67,
		Raycast_CatchTerrainAndNormal = 68,
		Raycast_CatchCreatureObstacles = 69,
	};

	NMS_GameComponents::GcPhysicsCollisionGroups::CollisionGroupEnum CollisionGroup;

	friend bool operator==(const GcPhysicsCollisionGroups& lhs, const GcPhysicsCollisionGroups& rhs) 
	{
		return lhs.CollisionGroup == rhs.CollisionGroup;
	}
};

//Dependency: GcPhysicsCollisionGroups
struct GcPhysicsCollisionGroupCollidesWith
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroups> CollidesWith;
	NMS_GameComponents::GcPhysicsCollisionGroups Group;

	friend bool operator==(const GcPhysicsCollisionGroupCollidesWith& lhs, const GcPhysicsCollisionGroupCollidesWith& rhs) 
	{
		return lhs.CollidesWith == rhs.CollidesWith &&
		lhs.Group == rhs.Group;
	}
};

//Dependency: GcPhysicsCollisionGroupCollidesWith
struct GcCollisionTable
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroupCollidesWith> CollisionTable;

	friend bool operator==(const GcCollisionTable& lhs, const GcCollisionTable& rhs) 
	{
		return lhs.CollisionTable == rhs.CollisionTable;
	}
};

struct GcRainbowType
{
	enum class RainbowTypeEnum : uint32_t
	{
		Always = 0,
		Occasional = 1,
		Storm = 2,
		None = 3,
	};

	NMS_GameComponents::GcRainbowType::RainbowTypeEnum RainbowType;

	friend bool operator==(const GcRainbowType& lhs, const GcRainbowType& rhs) 
	{
		return lhs.RainbowType == rhs.RainbowType;
	}
};

struct GcStyleProp_Font
{
	int32_t FontIndex;

	friend bool operator==(const GcStyleProp_Font& lhs, const GcStyleProp_Font& rhs) 
	{
		return lhs.FontIndex == rhs.FontIndex;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: Vector2f
struct TkPlatformButtonPair
{
	NMS::NMSString0x10 ButtonId;
	NMS::NMSString0x10 PlatformId;
	NMS::Vector2f Size;

	friend bool operator==(const TkPlatformButtonPair& lhs, const TkPlatformButtonPair& rhs) 
	{
		return lhs.ButtonId == rhs.ButtonId &&
		lhs.PlatformId == rhs.PlatformId &&
		lhs.Size == rhs.Size;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCreaturePetTraitRange
{
	float Max;
	float Min;

	friend bool operator==(const GcCreaturePetTraitRange& lhs, const GcCreaturePetTraitRange& rhs) 
	{
		return lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min;
	}
};

//Dependency: NMSString0x20
struct GcObjectPlacementComponentData
{
	enum class ActivationTypeEnum : uint32_t
	{
		GroupNode = 0,
		Locator = 1,
	};

	NMS_GameComponents::GcObjectPlacementComponentData::ActivationTypeEnum ActivationType;
	float FractionOfNodesActive;
	int32_t MaxGroupsActivated;
	int32_t MaxNodesActivated;
	NMS::NMSString0x20 GroupNodeName;
	bool UseNodeParent;
	bool UseRaycast;

	friend bool operator==(const GcObjectPlacementComponentData& lhs, const GcObjectPlacementComponentData& rhs) 
	{
		return lhs.ActivationType == rhs.ActivationType &&
		lhs.FractionOfNodesActive == rhs.FractionOfNodesActive &&
		lhs.MaxGroupsActivated == rhs.MaxGroupsActivated &&
		lhs.MaxNodesActivated == rhs.MaxNodesActivated &&
		lhs.GroupNodeName == rhs.GroupNodeName &&
		lhs.UseNodeParent == rhs.UseNodeParent &&
		lhs.UseRaycast == rhs.UseRaycast;
	}
};

//Dependency: VariableSizeString
//Dependency: GcSeed
struct GcExactResource
{
	NMS::VariableSizeString Filename;
	NMS::GcSeed GenerationSeed;

	friend bool operator==(const GcExactResource& lhs, const GcExactResource& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.GenerationSeed == rhs.GenerationSeed;
	}
};

struct GcProjectileImpactType
{
	enum class ImpactEnum : uint32_t
	{
		Default = 0,
		Terrain = 1,
		Substance = 2,
		Rock = 3,
		Asteroid = 4,
		Shield = 5,
		Creature = 6,
		Robot = 7,
		Freighter = 8,
		Cargo = 9,
		Ship = 10,
		Plant = 11,
		NeedsTech = 12,
		Player = 13,
		OtherPlayer = 14,
		SentinelShield = 15,
		SpaceshipShield = 16,
		FreighterShield = 17,
	};

	NMS_GameComponents::GcProjectileImpactType::ImpactEnum Impact;

	friend bool operator==(const GcProjectileImpactType& lhs, const GcProjectileImpactType& rhs) 
	{
		return lhs.Impact == rhs.Impact;
	}
};

//Dependency: GcProjectileImpactType
//Dependency: NMSString0x10
struct GcProjectileImpactData
{
	enum class ImpactAttachmentEnum : uint32_t
	{
		World = 0,
		HitBody = 1,
	};

	enum class ImpactAlignmentEnum : uint32_t
	{
		ImpactNormal = 0,
		ImpactReflected = 1,
		GravityUp = 2,
	};

	NMS::NMSString0x10 Effect;
	NMS_GameComponents::GcProjectileImpactType Impact;
	NMS_GameComponents::GcProjectileImpactData::ImpactAlignmentEnum ImpactAlignment;
	NMS_GameComponents::GcProjectileImpactData::ImpactAttachmentEnum ImpactAttachment;

	friend bool operator==(const GcProjectileImpactData& lhs, const GcProjectileImpactData& rhs) 
	{
		return lhs.Effect == rhs.Effect &&
		lhs.Impact == rhs.Impact &&
		lhs.ImpactAlignment == rhs.ImpactAlignment &&
		lhs.ImpactAttachment == rhs.ImpactAttachment;
	}
};

//Dependency: Colour
struct GcColourPaletteData
{
	NMS::Colour Colours[5];
	int32_t ColourIndices[5];

	friend bool operator==(const GcColourPaletteData& lhs, const GcColourPaletteData& rhs) 
	{
		return std::equal(std::begin(lhs.Colours), std::end(lhs.Colours), std::begin(rhs.Colours)) &&
		std::equal(std::begin(lhs.ColourIndices), std::end(lhs.ColourIndices), std::begin(rhs.ColourIndices));
	}
};

//Dependency: Colour
struct GcColouriseComponentData
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;

	friend bool operator==(const GcColouriseComponentData& lhs, const GcColouriseComponentData& rhs) 
	{
		return lhs.PrimaryColour == rhs.PrimaryColour &&
		lhs.QuaternaryColour == rhs.QuaternaryColour &&
		lhs.SecondaryColour == rhs.SecondaryColour &&
		lhs.TernaryColour == rhs.TernaryColour;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemRuleTemplate
{
	NMS::VariableSizeString LSystem;
	NMS::NMSString0x20 Name;

	friend bool operator==(const TkLSystemRuleTemplate& lhs, const TkLSystemRuleTemplate& rhs) 
	{
		return lhs.LSystem == rhs.LSystem &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcShieldComponentData
{
	int32_t Type;

	friend bool operator==(const GcShieldComponentData& lhs, const GcShieldComponentData& rhs) 
	{
		return lhs.Type == rhs.Type;
	}
};

//Dependency: Colour
struct GcColourisePalette
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;

	friend bool operator==(const GcColourisePalette& lhs, const GcColourisePalette& rhs) 
	{
		return lhs.PrimaryColour == rhs.PrimaryColour &&
		lhs.QuaternaryColour == rhs.QuaternaryColour &&
		lhs.SecondaryColour == rhs.SecondaryColour &&
		lhs.TernaryColour == rhs.TernaryColour;
	}
};

//Dependency: NMSString0x10
struct GcSpaceshipTravelData
{
	NMS::NMSString0x10 Id;
	float AvoidTime;
	float BoostSpeed;
	float DirectionBrake;
	float Falloff;
	float Force;
	float MaxSpeed;
	float MaxSpeedBrake;
	float MinHeight;
	float MinSpeed;
	float MinSpeedForce;
	float Roll;
	float TurnMax;
	float TurnMin;
	bool Hovering;

	friend bool operator==(const GcSpaceshipTravelData& lhs, const GcSpaceshipTravelData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.AvoidTime == rhs.AvoidTime &&
		lhs.BoostSpeed == rhs.BoostSpeed &&
		lhs.DirectionBrake == rhs.DirectionBrake &&
		lhs.Falloff == rhs.Falloff &&
		lhs.Force == rhs.Force &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MaxSpeedBrake == rhs.MaxSpeedBrake &&
		lhs.MinHeight == rhs.MinHeight &&
		lhs.MinSpeed == rhs.MinSpeed &&
		lhs.MinSpeedForce == rhs.MinSpeedForce &&
		lhs.Roll == rhs.Roll &&
		lhs.TurnMax == rhs.TurnMax &&
		lhs.TurnMin == rhs.TurnMin &&
		lhs.Hovering == rhs.Hovering;
	}
};

//Dependency: GcCombatEffectData
struct GcCombatEffectsTable
{
	NMS_GameComponents::GcCombatEffectData EffectsData[6];

	friend bool operator==(const GcCombatEffectsTable& lhs, const GcCombatEffectsTable& rhs) 
	{
		return std::equal(std::begin(lhs.EffectsData), std::end(lhs.EffectsData), std::begin(rhs.EffectsData));
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasEndpointForEvent
{
	NMS::NMSString0x20A EventID;
	float MaxDistance;

	friend bool operator==(const GcMissionConditionHasEndpointForEvent& lhs, const GcMissionConditionHasEndpointForEvent& rhs) 
	{
		return lhs.EventID == rhs.EventID &&
		lhs.MaxDistance == rhs.MaxDistance;
	}
};

//Dependency: GcMaintenanceComponentData
struct GcEggMachineComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumInputs;

	friend bool operator==(const GcEggMachineComponentData& lhs, const GcEggMachineComponentData& rhs) 
	{
		return lhs.MaintenanceData == rhs.MaintenanceData &&
		lhs.NumInputs == rhs.NumInputs;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkIndexStream
{
	std::vector<int32_t> IndexStream;

	friend bool operator==(const TkIndexStream& lhs, const TkIndexStream& rhs) 
	{
		return lhs.IndexStream == rhs.IndexStream;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostSpecificCreatureBait
{

	friend bool operator==(const GcCostSpecificCreatureBait& lhs, const GcCostSpecificCreatureBait& rhs) 
	{
		return true;
	}
};

//Dependency: GcRewardMissionOverride
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcConsumableItem
{
	NMS::NMSString0x20A CustomOSD;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RequiresMissionActive;
	NMS::NMSString0x10 RewardID;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TutorialRewardID;
	NMS_GameComponents::GcAudioWwiseEvents AudioEventOnOpen;
	NMS::NMSString0x40 ButtonLocID;
	NMS::NMSString0x40 ButtonSubLocID;
	NMS::NMSString0x40 RewardFailedLocID;
	bool AddCommunityTierClassIcon;
	bool CloseInventoryWhenUsed;
	bool DestroyItemWhenConsumed;
	bool OverrideMissionMustBeSelected;
	bool SuppressResourceMessage;

	friend bool operator==(const GcConsumableItem& lhs, const GcConsumableItem& rhs) 
	{
		return lhs.CustomOSD == rhs.CustomOSD &&
		lhs.ID == rhs.ID &&
		lhs.RequiresMissionActive == rhs.RequiresMissionActive &&
		lhs.RewardID == rhs.RewardID &&
		lhs.RewardOverrideTable == rhs.RewardOverrideTable &&
		lhs.TutorialRewardID == rhs.TutorialRewardID &&
		lhs.AudioEventOnOpen == rhs.AudioEventOnOpen &&
		lhs.ButtonLocID == rhs.ButtonLocID &&
		lhs.ButtonSubLocID == rhs.ButtonSubLocID &&
		lhs.RewardFailedLocID == rhs.RewardFailedLocID &&
		lhs.AddCommunityTierClassIcon == rhs.AddCommunityTierClassIcon &&
		lhs.CloseInventoryWhenUsed == rhs.CloseInventoryWhenUsed &&
		lhs.DestroyItemWhenConsumed == rhs.DestroyItemWhenConsumed &&
		lhs.OverrideMissionMustBeSelected == rhs.OverrideMissionMustBeSelected &&
		lhs.SuppressResourceMessage == rhs.SuppressResourceMessage;
	}
};

//Dependency: GcWeaponClasses
//Dependency: NMSString0x20A
struct GcCostMultiTool
{
	NMS::NMSString0x20A CostString;
	NMS_GameComponents::GcWeaponClasses WeaponClass;

	friend bool operator==(const GcCostMultiTool& lhs, const GcCostMultiTool& rhs) 
	{
		return lhs.CostString == rhs.CostString &&
		lhs.WeaponClass == rhs.WeaponClass;
	}
};

//Dependency: GcConsumableItem
struct GcConsumableItemTable
{
	std::vector<NMS_GameComponents::GcConsumableItem> Table;

	friend bool operator==(const GcConsumableItemTable& lhs, const GcConsumableItemTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcCooldownDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat CooldownTime;
	NMSTemplate Child;
	NMS::NMSString0x10 Key;

	friend bool operator==(const GcCooldownDecoratorData& lhs, const GcCooldownDecoratorData& rhs) 
	{
		return lhs.CooldownTime == rhs.CooldownTime &&
		lhs.Child == rhs.Child &&
		lhs.Key == rhs.Key;
	}
};

//Dependency: NMSString0x10
struct GcItemCostData
{
	NMS::NMSString0x10 ID;
	float ChangePerSale;
	float Cost;
	float MaxCost;
	float MinCost;

	friend bool operator==(const GcItemCostData& lhs, const GcItemCostData& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.ChangePerSale == rhs.ChangePerSale &&
		lhs.Cost == rhs.Cost &&
		lhs.MaxCost == rhs.MaxCost &&
		lhs.MinCost == rhs.MinCost;
	}
};

//Dependency: GcItemCostData
struct GcItemCostTable
{
	std::vector<NMS_GameComponents::GcItemCostData> Items;

	friend bool operator==(const GcItemCostTable& lhs, const GcItemCostTable& rhs) 
	{
		return lhs.Items == rhs.Items;
	}
};

struct GcCustomiseShipInteractionData
{
	bool IsSettlementPad;

	friend bool operator==(const GcCustomiseShipInteractionData& lhs, const GcCustomiseShipInteractionData& rhs) 
	{
		return lhs.IsSettlementPad == rhs.IsSettlementPad;
	}
};

//Dependency: NMSString0x10
struct GcCostAdvanceSettlementBuilding
{
	NMS::NMSString0x10 Id;
	int32_t Amount;

	friend bool operator==(const GcCostAdvanceSettlementBuilding& lhs, const GcCostAdvanceSettlementBuilding& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: GcBuildingCostPartCount
//Dependency: NMSString0x20A
struct GcCostBuildingParts
{
	NMS::NMSString0x20A Description;
	std::vector<NMS_GameComponents::GcBuildingCostPartCount> RequiredParts;

	friend bool operator==(const GcCostBuildingParts& lhs, const GcCostBuildingParts& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.RequiredParts == rhs.RequiredParts;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcGeneratedBaseStructuralTemplate
{
	NMS_Toolkit::TkModelResource TemplateScene;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcGeneratedBaseStructuralTemplate& lhs, const GcGeneratedBaseStructuralTemplate& rhs) 
	{
		return lhs.TemplateScene == rhs.TemplateScene &&
		lhs.Id == rhs.Id;
	}
};

struct GcSentinelCoverState
{
	enum class SentinelCoverStateEnum : uint32_t
	{
		Deploying = 0,
		Deployed = 1,
		ShuttingDown = 2,
		ShutDown = 3,
	};

	NMS_GameComponents::GcSentinelCoverState::SentinelCoverStateEnum SentinelCoverState;

	friend bool operator==(const GcSentinelCoverState& lhs, const GcSentinelCoverState& rhs) 
	{
		return lhs.SentinelCoverState == rhs.SentinelCoverState;
	}
};

struct GcCostCanAdoptCreature
{

	friend bool operator==(const GcCostCanAdoptCreature& lhs, const GcCostCanAdoptCreature& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcPlayerNearbyEvent
{
	enum class RequirePlayerActionEnum : uint32_t
	{
		None = 0,
		Fire = 1,
		InShip = 2,
		OnFoot = 3,
		OnFootOutside = 4,
		Upload = 5,
	};

	enum class DistanceCheckTypeEnum : uint32_t
	{
		Radius = 0,
		BoundingBox = 1,
	};

	NMS::NMSString0x10 MustAffordCostID;
	float Angle;
	float AngleMinDistance;
	float AngleOffset;
	float Distance;
	NMS_GameComponents::GcPlayerNearbyEvent::DistanceCheckTypeEnum DistanceCheckType;
	NMS_GameComponents::GcPlayerNearbyEvent::RequirePlayerActionEnum RequirePlayerAction;
	bool AnglePlayerRelative;
	bool AngleReflected;
	bool IncludeAllPhysics;
	bool IncludeMobileNPCs;
	bool Inverse;
	bool OnlyForLocalPlayer;
	bool TeleporterCountsAsPlayer;

	friend bool operator==(const GcPlayerNearbyEvent& lhs, const GcPlayerNearbyEvent& rhs) 
	{
		return lhs.MustAffordCostID == rhs.MustAffordCostID &&
		lhs.Angle == rhs.Angle &&
		lhs.AngleMinDistance == rhs.AngleMinDistance &&
		lhs.AngleOffset == rhs.AngleOffset &&
		lhs.Distance == rhs.Distance &&
		lhs.DistanceCheckType == rhs.DistanceCheckType &&
		lhs.RequirePlayerAction == rhs.RequirePlayerAction &&
		lhs.AnglePlayerRelative == rhs.AnglePlayerRelative &&
		lhs.AngleReflected == rhs.AngleReflected &&
		lhs.IncludeAllPhysics == rhs.IncludeAllPhysics &&
		lhs.IncludeMobileNPCs == rhs.IncludeMobileNPCs &&
		lhs.Inverse == rhs.Inverse &&
		lhs.OnlyForLocalPlayer == rhs.OnlyForLocalPlayer &&
		lhs.TeleporterCountsAsPlayer == rhs.TeleporterCountsAsPlayer;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct TkNGuiLayoutListData
{
	NMS::VariableSizeString Default;
	NMS::VariableSizeString Filename;
	NMS::NMSString0x80 Name;
	bool Autosave;
	bool CanBeDeleted;

	friend bool operator==(const TkNGuiLayoutListData& lhs, const TkNGuiLayoutListData& rhs) 
	{
		return lhs.Default == rhs.Default &&
		lhs.Filename == rhs.Filename &&
		lhs.Name == rhs.Name &&
		lhs.Autosave == rhs.Autosave &&
		lhs.CanBeDeleted == rhs.CanBeDeleted;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkCurveType
//Dependency: NMSString0x10
struct GcTradeData
{
	std::vector<NMS::NMSString0x10> AlwaysConsideredBarterProducts;
	std::vector<NMS::NMSString0x10> AlwaysPresentProducts;
	std::vector<NMS::NMSString0x10> AlwaysPresentSubstances;
	std::vector<NMS::NMSString0x10> OptionalProducts;
	std::vector<NMS::NMSString0x10> OptionalSubstances;
	int32_t MaxAmountOfProductAvailable[4];
	int32_t MaxAmountOfSubstanceAvailable[4];
	int32_t MaxExtraSystemProducts[4];
	int32_t MinAmountOfProductAvailable[4];
	int32_t MinAmountOfSubstanceAvailable[4];
	int32_t MinExtraSystemProducts[4];
	float TradeProductsPriceImprovements[4];
	float BarterItemPreferenceFloor;
	float BarterPriceMultiplier;
	float BuyPriceDecreaseGreenThreshold;
	float BuyPriceIncreaseRedThreshold;
	int32_t MaxItemsForSale;
	int32_t MinItemsForSale;
	float PercentageOfItemsAreProducts;
	float SellPriceDecreaseRedThreshold;
	float SellPriceIncreaseGreenThreshold;
	NMS_Toolkit::TkCurveType BarterAcceptanceCurve;
	bool ShowSeasonRewards;
	bool UseBarterForBuy;

	friend bool operator==(const GcTradeData& lhs, const GcTradeData& rhs) 
	{
		return lhs.AlwaysConsideredBarterProducts == rhs.AlwaysConsideredBarterProducts &&
		lhs.AlwaysPresentProducts == rhs.AlwaysPresentProducts &&
		lhs.AlwaysPresentSubstances == rhs.AlwaysPresentSubstances &&
		lhs.OptionalProducts == rhs.OptionalProducts &&
		lhs.OptionalSubstances == rhs.OptionalSubstances &&
		std::equal(std::begin(lhs.MaxAmountOfProductAvailable), std::end(lhs.MaxAmountOfProductAvailable), std::begin(rhs.MaxAmountOfProductAvailable)) &&
		std::equal(std::begin(lhs.MaxAmountOfSubstanceAvailable), std::end(lhs.MaxAmountOfSubstanceAvailable), std::begin(rhs.MaxAmountOfSubstanceAvailable)) &&
		std::equal(std::begin(lhs.MaxExtraSystemProducts), std::end(lhs.MaxExtraSystemProducts), std::begin(rhs.MaxExtraSystemProducts)) &&
		std::equal(std::begin(lhs.MinAmountOfProductAvailable), std::end(lhs.MinAmountOfProductAvailable), std::begin(rhs.MinAmountOfProductAvailable)) &&
		std::equal(std::begin(lhs.MinAmountOfSubstanceAvailable), std::end(lhs.MinAmountOfSubstanceAvailable), std::begin(rhs.MinAmountOfSubstanceAvailable)) &&
		std::equal(std::begin(lhs.MinExtraSystemProducts), std::end(lhs.MinExtraSystemProducts), std::begin(rhs.MinExtraSystemProducts)) &&
		std::equal(std::begin(lhs.TradeProductsPriceImprovements), std::end(lhs.TradeProductsPriceImprovements), std::begin(rhs.TradeProductsPriceImprovements)) &&
		lhs.BarterItemPreferenceFloor == rhs.BarterItemPreferenceFloor &&
		lhs.BarterPriceMultiplier == rhs.BarterPriceMultiplier &&
		lhs.BuyPriceDecreaseGreenThreshold == rhs.BuyPriceDecreaseGreenThreshold &&
		lhs.BuyPriceIncreaseRedThreshold == rhs.BuyPriceIncreaseRedThreshold &&
		lhs.MaxItemsForSale == rhs.MaxItemsForSale &&
		lhs.MinItemsForSale == rhs.MinItemsForSale &&
		lhs.PercentageOfItemsAreProducts == rhs.PercentageOfItemsAreProducts &&
		lhs.SellPriceDecreaseRedThreshold == rhs.SellPriceDecreaseRedThreshold &&
		lhs.SellPriceIncreaseGreenThreshold == rhs.SellPriceIncreaseGreenThreshold &&
		lhs.BarterAcceptanceCurve == rhs.BarterAcceptanceCurve &&
		lhs.ShowSeasonRewards == rhs.ShowSeasonRewards &&
		lhs.UseBarterForBuy == rhs.UseBarterForBuy;
	}
};

//Dependency: GcMissionFaction
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcMissionDifficulty
//Dependency: GcMissionType
struct GcMissionBoardOptions
{
	enum class DefaultItemTypeForInitialWarpEnum : uint32_t
	{
		None = 0,
		PrimaryProduct = 1,
		PrimarySubstance = 2,
		SecondaryProduct = 3,
		SecondarySubstance = 4,
	};

	NMS::NMSString0x20A MultiplayerMissionInitialWarpScanEvent;
	std::vector<NMS::NMSString0x10> BasePartBlueprints;
	std::vector<NMS::NMSString0x20A> DefaultItemInitialWarpScanEvents;
	std::vector<NMS_GameComponents::GcMissionFaction> Faction;
	NMS::NMSString0x10 RewardPenaltyOnAbandon;
	NMS_GameComponents::GcMissionBoardOptions::DefaultItemTypeForInitialWarpEnum DefaultItemTypeForInitialWarp;
	NMS_GameComponents::GcMissionDifficulty Difficulty;
	int32_t MinRank;
	NMS_GameComponents::GcMissionType Type;
	int32_t Weighting;
	bool CloseMissionGiver;
	bool IgnoreCalculatedObjective;
	bool IsGuildShopMission;
	bool IsMultiplayerEventMission;
	bool IsPlanetProcMission;

	friend bool operator==(const GcMissionBoardOptions& lhs, const GcMissionBoardOptions& rhs) 
	{
		return lhs.MultiplayerMissionInitialWarpScanEvent == rhs.MultiplayerMissionInitialWarpScanEvent &&
		lhs.BasePartBlueprints == rhs.BasePartBlueprints &&
		lhs.DefaultItemInitialWarpScanEvents == rhs.DefaultItemInitialWarpScanEvents &&
		lhs.Faction == rhs.Faction &&
		lhs.RewardPenaltyOnAbandon == rhs.RewardPenaltyOnAbandon &&
		lhs.DefaultItemTypeForInitialWarp == rhs.DefaultItemTypeForInitialWarp &&
		lhs.Difficulty == rhs.Difficulty &&
		lhs.MinRank == rhs.MinRank &&
		lhs.Type == rhs.Type &&
		lhs.Weighting == rhs.Weighting &&
		lhs.CloseMissionGiver == rhs.CloseMissionGiver &&
		lhs.IgnoreCalculatedObjective == rhs.IgnoreCalculatedObjective &&
		lhs.IsGuildShopMission == rhs.IsGuildShopMission &&
		lhs.IsMultiplayerEventMission == rhs.IsMultiplayerEventMission &&
		lhs.IsPlanetProcMission == rhs.IsPlanetProcMission;
	}
};

//Dependency: GcDefaultMissionProduct
//Dependency: GcDefaultMissionSubstance
struct GcDefaultMissionItemsTable
{
	std::vector<NMS_GameComponents::GcDefaultMissionProduct> PrimaryProducts;
	std::vector<NMS_GameComponents::GcDefaultMissionSubstance> PrimarySubstances;
	std::vector<NMS_GameComponents::GcDefaultMissionProduct> SecondaryProducts;
	std::vector<NMS_GameComponents::GcDefaultMissionSubstance> SecondarySubstances;
	int32_t AmountMax;
	int32_t AmountMin;
	bool AmountShouldBeRoundNumber;

	friend bool operator==(const GcDefaultMissionItemsTable& lhs, const GcDefaultMissionItemsTable& rhs) 
	{
		return lhs.PrimaryProducts == rhs.PrimaryProducts &&
		lhs.PrimarySubstances == rhs.PrimarySubstances &&
		lhs.SecondaryProducts == rhs.SecondaryProducts &&
		lhs.SecondarySubstances == rhs.SecondarySubstances &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.AmountShouldBeRoundNumber == rhs.AmountShouldBeRoundNumber;
	}
};

//Dependency: VariableSizeString
struct GcRewardTableItem
{
	NMS::VariableSizeString LabelID;
	NMSTemplate Reward;
	float PercentageChance;

	friend bool operator==(const GcRewardTableItem& lhs, const GcRewardTableItem& rhs) 
	{
		return lhs.LabelID == rhs.LabelID &&
		lhs.Reward == rhs.Reward &&
		lhs.PercentageChance == rhs.PercentageChance;
	}
};

//Dependency: GcRewardTableItem
//Dependency: NMSString0x10
struct GcRewardTableItemList
{
	enum class RewardChoiceEnum : uint32_t
	{
		GiveAll = 0,
		Select = 1,
		SelectAlways = 2,
		TryEach = 3,
		TryEachSilent = 4,
		SelectSilent = 5,
		GiveAllSilent = 6,
		TryFirst_ThenSelectAlways = 7,
		GiveFirst_ThenAlsoSelectAlwaysFromRest = 8,
		SelectFromSuccess = 9,
		SelectAlwaysSilent = 10,
		SelectFromSuccessSilent = 11,
	};

	NMS::NMSString0x10 IncrementStat;
	std::vector<NMS_GameComponents::GcRewardTableItem> List;
	NMS_GameComponents::GcRewardTableItemList::RewardChoiceEnum RewardChoice;
	bool OverrideZeroSeed;
	bool UseInventoryChoiceOverride;

	friend bool operator==(const GcRewardTableItemList& lhs, const GcRewardTableItemList& rhs) 
	{
		return lhs.IncrementStat == rhs.IncrementStat &&
		lhs.List == rhs.List &&
		lhs.RewardChoice == rhs.RewardChoice &&
		lhs.OverrideZeroSeed == rhs.OverrideZeroSeed &&
		lhs.UseInventoryChoiceOverride == rhs.UseInventoryChoiceOverride;
	}
};

//Dependency: GcRewardTableItemList
//Dependency: NMSString0x10
struct GcGenericRewardTableEntry
{
	NMS_GameComponents::GcRewardTableItemList List;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcGenericRewardTableEntry& lhs, const GcGenericRewardTableEntry& rhs) 
	{
		return lhs.List == rhs.List &&
		lhs.Id == rhs.Id;
	}
};

struct GcTradingClass
{
	enum class TradingClassEnum : uint32_t
	{
		Mining = 0,
		HighTech = 1,
		Trading = 2,
		Manufacturing = 3,
		Fusion = 4,
		Scientific = 5,
		PowerGeneration = 6,
	};

	NMS_GameComponents::GcTradingClass::TradingClassEnum TradingClass;

	friend bool operator==(const GcTradingClass& lhs, const GcTradingClass& rhs) 
	{
		return lhs.TradingClass == rhs.TradingClass;
	}
};

struct GcWealthClass
{
	enum class WealthClassEnum : uint32_t
	{
		Poor = 0,
		Average = 1,
		Wealthy = 2,
		Pirate = 3,
	};

	NMS_GameComponents::GcWealthClass::WealthClassEnum WealthClass;

	friend bool operator==(const GcWealthClass& lhs, const GcWealthClass& rhs) 
	{
		return lhs.WealthClass == rhs.WealthClass;
	}
};

//Dependency: GcTradingClass
//Dependency: GcWealthClass
struct GcPlanetTradingData
{
	NMS_GameComponents::GcTradingClass TradingClass;
	NMS_GameComponents::GcWealthClass WealthClass;

	friend bool operator==(const GcPlanetTradingData& lhs, const GcPlanetTradingData& rhs) 
	{
		return lhs.TradingClass == rhs.TradingClass &&
		lhs.WealthClass == rhs.WealthClass;
	}
};

//Dependency: GcPlanetTradingData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcBiomeSubType
//Dependency: GcBiomeType
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlayerConflictData
//Dependency: GcGalaxyStarAnomaly
//Dependency: GcAlienRace
struct GcScanEventSolarSystemLookup
{
	NMS::NMSString0x20A SamePlanetAsEvent;
	NMS::NMSString0x10 NeedsResourceHint;
	NMS::NMSString0x10 SystemNeedsResourceHint;
	NMS_GameComponents::GcPlanetTradingData TradingData;
	int32_t MinPlanets;
	NMS_GameComponents::GcBiomeType NeedsBiomeType;
	int32_t SamePlanetAsSeasonParty;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	NMS_GameComponents::GcGalaxyStarAnomaly UseAnomaly;
	NMS_GameComponents::GcBiomeSubType UseBiomeSubType;
	NMS_GameComponents::GcPlayerConflictData UseConflict;
	NMS_GameComponents::GcAlienRace UseRace;
	bool AllowedToBePurpleWithoutAccess;
	bool AllowUnsafeMatches;
	bool AnyBiomeNotWeirdOrDead;
	bool AnyInfestedBiome;
	bool AnyRGBBiome;
	bool NeedsAbandonedSystem;
	bool NeedsBiome;
	bool NeedsCorruptSentinelPlanet;
	bool NeedsDeepWaterPlanet;
	bool NeedsEmptySystem;
	bool NeedsExtremeHazardPlanet;
	bool NeedsExtremeSentinelPlanet;
	bool NeedsExtremeWeatherPlanet;
	bool NeedsPrimePlanet;
	bool NeedsSentinels;
	bool NeedsWaterPlanet;
	bool NeverAllowAbandoned;
	bool NeverAllowEmpty;
	bool NeverAllowExtremeSentinelPlanet;
	bool NeverAllowExtremeWeatherPlanet;
	bool NeverAllowGasGiantSystem;
	bool RequireUndiscovered;
	bool SuitableForCreatureDiscovery;
	bool SuitableForCreatureTaming;
	bool SuitableForRobotCreatureDiscovery;
	bool SuitableForWeirdCreatureDiscovery;
	bool SystemNeedsCorruptSentinelPlanet;
	bool SystemNeedsExtremeStormPlanet;
	bool SystemNeedsGasGiant;
	bool SystemNeedsInfestedPlanet;
	bool SystemNeedsWater;
	bool SystemNeedsWeirdPlanet;
	bool UseStarType;
	bool UseTrading;
	bool UseWealth;

	friend bool operator==(const GcScanEventSolarSystemLookup& lhs, const GcScanEventSolarSystemLookup& rhs) 
	{
		return lhs.SamePlanetAsEvent == rhs.SamePlanetAsEvent &&
		lhs.NeedsResourceHint == rhs.NeedsResourceHint &&
		lhs.SystemNeedsResourceHint == rhs.SystemNeedsResourceHint &&
		lhs.TradingData == rhs.TradingData &&
		lhs.MinPlanets == rhs.MinPlanets &&
		lhs.NeedsBiomeType == rhs.NeedsBiomeType &&
		lhs.SamePlanetAsSeasonParty == rhs.SamePlanetAsSeasonParty &&
		lhs.StarType == rhs.StarType &&
		lhs.UseAnomaly == rhs.UseAnomaly &&
		lhs.UseBiomeSubType == rhs.UseBiomeSubType &&
		lhs.UseConflict == rhs.UseConflict &&
		lhs.UseRace == rhs.UseRace &&
		lhs.AllowedToBePurpleWithoutAccess == rhs.AllowedToBePurpleWithoutAccess &&
		lhs.AllowUnsafeMatches == rhs.AllowUnsafeMatches &&
		lhs.AnyBiomeNotWeirdOrDead == rhs.AnyBiomeNotWeirdOrDead &&
		lhs.AnyInfestedBiome == rhs.AnyInfestedBiome &&
		lhs.AnyRGBBiome == rhs.AnyRGBBiome &&
		lhs.NeedsAbandonedSystem == rhs.NeedsAbandonedSystem &&
		lhs.NeedsBiome == rhs.NeedsBiome &&
		lhs.NeedsCorruptSentinelPlanet == rhs.NeedsCorruptSentinelPlanet &&
		lhs.NeedsDeepWaterPlanet == rhs.NeedsDeepWaterPlanet &&
		lhs.NeedsEmptySystem == rhs.NeedsEmptySystem &&
		lhs.NeedsExtremeHazardPlanet == rhs.NeedsExtremeHazardPlanet &&
		lhs.NeedsExtremeSentinelPlanet == rhs.NeedsExtremeSentinelPlanet &&
		lhs.NeedsExtremeWeatherPlanet == rhs.NeedsExtremeWeatherPlanet &&
		lhs.NeedsPrimePlanet == rhs.NeedsPrimePlanet &&
		lhs.NeedsSentinels == rhs.NeedsSentinels &&
		lhs.NeedsWaterPlanet == rhs.NeedsWaterPlanet &&
		lhs.NeverAllowAbandoned == rhs.NeverAllowAbandoned &&
		lhs.NeverAllowEmpty == rhs.NeverAllowEmpty &&
		lhs.NeverAllowExtremeSentinelPlanet == rhs.NeverAllowExtremeSentinelPlanet &&
		lhs.NeverAllowExtremeWeatherPlanet == rhs.NeverAllowExtremeWeatherPlanet &&
		lhs.NeverAllowGasGiantSystem == rhs.NeverAllowGasGiantSystem &&
		lhs.RequireUndiscovered == rhs.RequireUndiscovered &&
		lhs.SuitableForCreatureDiscovery == rhs.SuitableForCreatureDiscovery &&
		lhs.SuitableForCreatureTaming == rhs.SuitableForCreatureTaming &&
		lhs.SuitableForRobotCreatureDiscovery == rhs.SuitableForRobotCreatureDiscovery &&
		lhs.SuitableForWeirdCreatureDiscovery == rhs.SuitableForWeirdCreatureDiscovery &&
		lhs.SystemNeedsCorruptSentinelPlanet == rhs.SystemNeedsCorruptSentinelPlanet &&
		lhs.SystemNeedsExtremeStormPlanet == rhs.SystemNeedsExtremeStormPlanet &&
		lhs.SystemNeedsGasGiant == rhs.SystemNeedsGasGiant &&
		lhs.SystemNeedsInfestedPlanet == rhs.SystemNeedsInfestedPlanet &&
		lhs.SystemNeedsWater == rhs.SystemNeedsWater &&
		lhs.SystemNeedsWeirdPlanet == rhs.SystemNeedsWeirdPlanet &&
		lhs.UseStarType == rhs.UseStarType &&
		lhs.UseTrading == rhs.UseTrading &&
		lhs.UseWealth == rhs.UseWealth;
	}
};

struct GcScannerIconHighlightTypes
{
	enum class ScannerIconHighlightTypeEnum : uint32_t
	{
		Diamond = 0,
		Hexagon = 1,
		Tag = 2,
		Octagon = 3,
		Circle = 4,
	};

	NMS_GameComponents::GcScannerIconHighlightTypes::ScannerIconHighlightTypeEnum ScannerIconHighlightType;

	friend bool operator==(const GcScannerIconHighlightTypes& lhs, const GcScannerIconHighlightTypes& rhs) 
	{
		return lhs.ScannerIconHighlightType == rhs.ScannerIconHighlightType;
	}
};

//Dependency: NMSString0x10
struct GcScanEventTriggers
{
	std::vector<NMS::NMSString0x10> Triggers;
	float Range;
	bool AllowRetrigger;

	friend bool operator==(const GcScanEventTriggers& lhs, const GcScanEventTriggers& rhs) 
	{
		return lhs.Triggers == rhs.Triggers &&
		lhs.Range == rhs.Range &&
		lhs.AllowRetrigger == rhs.AllowRetrigger;
	}
};

//Dependency: GcScanEventSolarSystemLookup
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcInteractionType
//Dependency: GcResourceElement
//Dependency: GcBuildingClassification
//Dependency: GcAlienRace
//Dependency: GcScannerIconHighlightTypes
//Dependency: GcScanEventTriggers
//Dependency: GcTechnologyCategory
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcScanEventData
{
	enum class SolarSystemLocationEnum : uint32_t
	{
		Local = 0,
		Near = 1,
		LocalOrNear = 2,
		NearWithNoExpeditions = 3,
		FromList = 4,
		SeasonParty = 5,
		FirstPurpleSystemUA = 6,
	};

	enum class SearchTypeEnum : uint32_t
	{
		Any = 0,
		AnyShelter = 1,
		AnyNPC = 2,
		FindBuildingClass = 3,
		SpaceStation = 4,
		SpaceAnomaly = 5,
		Atlas = 6,
		Freighter = 7,
		FreighterBase = 8,
		ExternalPlanetBase = 9,
		PlanetBaseTerminal = 10,
		Expedition = 11,
		ExpeditionLeader = 12,
		TutorialShelter = 13,
		MPMissionFreighter = 14,
		Nexus = 15,
		InitialDistressSignal = 16,
		SpaceMarker = 17,
		NexusEggMachine = 18,
		PhotoTarget = 19,
		SettlementConstruction = 20,
		UnownedSettlement = 21,
		NPC_HideOut = 22,
		FriendlyDrone = 23,
		AnyRobotSite = 24,
		UnownedSettlement_Builders = 25,
		OwnedSettlementHub = 26,
	};

	enum class EventStartTypeEnum : uint32_t
	{
		None = 0,
		Special = 1,
		Discovered = 2,
		Timer = 3,
		ObjectScan = 4,
		LeaveBuilding = 5,
	};

	enum class EventPriorityEnum : uint32_t
	{
		Regular = 0,
		High = 1,
	};

	enum class EventEndTypeEnum : uint32_t
	{
		None = 0,
		Proximity = 1,
		Interact = 2,
		EnterBuilding = 3,
		TimedInteract = 4,
	};

	enum class BuildingLocationEnum : uint32_t
	{
		Nearest = 0,
		AllNearest = 1,
		Random = 2,
		RandomOnNearPlanet = 3,
		RandomOnFarPlanet = 4,
		PlanetSearch = 5,
		PlayerSettlement = 6,
	};

	NMS_GameComponents::GcScanEventSolarSystemLookup SolarSystemAttributes;
	NMS_GameComponents::GcScanEventSolarSystemLookup SolarSystemAttributesFallback;
	NMS_GameComponents::GcResourceElement ResourceOverride;
	NMS::NMSString0x20A ForceInteraction;
	NMS::NMSString0x20A MustMatchStoryUtilityPuzzle;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A NextOption;
	NMS::NMSString0x20A PlanetLabelText;
	NMS::NMSString0x20A SurveyDiscoveryOSDMessage;
	NMS::NMSString0x20A SurveyHUDName;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMS_GameComponents::GcScanEventTriggers TriggerActions;
	NMS::NMSString0x10 ForceOverrideEncounter;
	NMS::NMSString0x10 HasReward;
	NMS::VariableSizeString InterstellarOSDMessage;
	NMS::VariableSizeString MarkerLabel;
	NMS::NMSString0x10 MissionMessageOnInteract;
	NMS::VariableSizeString OSDMessage;
	NMS::NMSString0x10 ReplacementMaintData;
	NMS::VariableSizeString TooltipMessage;
	std::vector<NMS::VariableSizeString> UAsList;
	NMS_GameComponents::GcScanEventData::BuildingLocationEnum BuildingLocation;
	float BuildingPreventionRadius;
	NMS_GameComponents::GcScanEventData::EventEndTypeEnum EventEndType;
	NMS_GameComponents::GcScanEventData::EventPriorityEnum EventPriority;
	NMS_GameComponents::GcScanEventData::EventStartTypeEnum EventStartType;
	NMS_GameComponents::GcInteractionType ForceInteractionType;
	float IconTime;
	NMS_GameComponents::GcAudioWwiseEvents MessageAudio;
	float MessageDisplayTime;
	float MessageTime;
	NMS_GameComponents::GcScannerIconHighlightTypes MissionMarkerHighlightStyleOverride;
	NMS_GameComponents::GcAlienRace OverrideInteractionRace;
	NMS_GameComponents::GcAlienRace RequireInteractionRace;
	NMS_GameComponents::GcScanEventData::SearchTypeEnum SearchType;
	NMS_GameComponents::GcScanEventData::SolarSystemLocationEnum SolarSystemLocation;
	NMS_GameComponents::GcBuildingClassification SpecificBuildingClass;
	float StartTime;
	float SurveyDistance;
	NMS_GameComponents::GcTechnologyCategory TechShopType;
	float TooltipTime;
	bool AllowFriendsBases;
	bool AllowOverriddenBuildings;
	bool AlwaysShow;
	bool BlockStartedOnUseEvents;
	bool CanEndFromOutsideMission;
	bool ClearForcedInteractionOnCompletion;
	bool DisableMultiplayerSync;
	bool ForceBroken;
	bool ForceFixed;
	bool ForceOverridesAll;
	bool ForceReplaceStoryPortalSeed;
	bool ForceResetPortal;
	bool ForceRestartInteraction;
	bool ForceWideRandom;
	bool IsCommunityPortalOverride;
	bool MustFindSystem;
	bool NeverShow;
	bool NPCReactsToPlayer;
	bool ReplaceEventIfAlreadyActive;
	bool ShowEndTooltip;
	bool ShowOnlyIfSequenceTarget;
	bool TargetMustMatchMissionSeed;
	bool TooltipRepeats;
	bool UseBuildingFromRendezvousStage;
	bool UseMissionTradingDataOverride;
	bool UseSeasonDataAsInteraction;

	friend bool operator==(const GcScanEventData& lhs, const GcScanEventData& rhs) 
	{
		return lhs.SolarSystemAttributes == rhs.SolarSystemAttributes &&
		lhs.SolarSystemAttributesFallback == rhs.SolarSystemAttributesFallback &&
		lhs.ResourceOverride == rhs.ResourceOverride &&
		lhs.ForceInteraction == rhs.ForceInteraction &&
		lhs.MustMatchStoryUtilityPuzzle == rhs.MustMatchStoryUtilityPuzzle &&
		lhs.Name == rhs.Name &&
		lhs.NextOption == rhs.NextOption &&
		lhs.PlanetLabelText == rhs.PlanetLabelText &&
		lhs.SurveyDiscoveryOSDMessage == rhs.SurveyDiscoveryOSDMessage &&
		lhs.SurveyHUDName == rhs.SurveyHUDName &&
		lhs.MarkerIcon == rhs.MarkerIcon &&
		lhs.TriggerActions == rhs.TriggerActions &&
		lhs.ForceOverrideEncounter == rhs.ForceOverrideEncounter &&
		lhs.HasReward == rhs.HasReward &&
		lhs.InterstellarOSDMessage == rhs.InterstellarOSDMessage &&
		lhs.MarkerLabel == rhs.MarkerLabel &&
		lhs.MissionMessageOnInteract == rhs.MissionMessageOnInteract &&
		lhs.OSDMessage == rhs.OSDMessage &&
		lhs.ReplacementMaintData == rhs.ReplacementMaintData &&
		lhs.TooltipMessage == rhs.TooltipMessage &&
		lhs.UAsList == rhs.UAsList &&
		lhs.BuildingLocation == rhs.BuildingLocation &&
		lhs.BuildingPreventionRadius == rhs.BuildingPreventionRadius &&
		lhs.EventEndType == rhs.EventEndType &&
		lhs.EventPriority == rhs.EventPriority &&
		lhs.EventStartType == rhs.EventStartType &&
		lhs.ForceInteractionType == rhs.ForceInteractionType &&
		lhs.IconTime == rhs.IconTime &&
		lhs.MessageAudio == rhs.MessageAudio &&
		lhs.MessageDisplayTime == rhs.MessageDisplayTime &&
		lhs.MessageTime == rhs.MessageTime &&
		lhs.MissionMarkerHighlightStyleOverride == rhs.MissionMarkerHighlightStyleOverride &&
		lhs.OverrideInteractionRace == rhs.OverrideInteractionRace &&
		lhs.RequireInteractionRace == rhs.RequireInteractionRace &&
		lhs.SearchType == rhs.SearchType &&
		lhs.SolarSystemLocation == rhs.SolarSystemLocation &&
		lhs.SpecificBuildingClass == rhs.SpecificBuildingClass &&
		lhs.StartTime == rhs.StartTime &&
		lhs.SurveyDistance == rhs.SurveyDistance &&
		lhs.TechShopType == rhs.TechShopType &&
		lhs.TooltipTime == rhs.TooltipTime &&
		lhs.AllowFriendsBases == rhs.AllowFriendsBases &&
		lhs.AllowOverriddenBuildings == rhs.AllowOverriddenBuildings &&
		lhs.AlwaysShow == rhs.AlwaysShow &&
		lhs.BlockStartedOnUseEvents == rhs.BlockStartedOnUseEvents &&
		lhs.CanEndFromOutsideMission == rhs.CanEndFromOutsideMission &&
		lhs.ClearForcedInteractionOnCompletion == rhs.ClearForcedInteractionOnCompletion &&
		lhs.DisableMultiplayerSync == rhs.DisableMultiplayerSync &&
		lhs.ForceBroken == rhs.ForceBroken &&
		lhs.ForceFixed == rhs.ForceFixed &&
		lhs.ForceOverridesAll == rhs.ForceOverridesAll &&
		lhs.ForceReplaceStoryPortalSeed == rhs.ForceReplaceStoryPortalSeed &&
		lhs.ForceResetPortal == rhs.ForceResetPortal &&
		lhs.ForceRestartInteraction == rhs.ForceRestartInteraction &&
		lhs.ForceWideRandom == rhs.ForceWideRandom &&
		lhs.IsCommunityPortalOverride == rhs.IsCommunityPortalOverride &&
		lhs.MustFindSystem == rhs.MustFindSystem &&
		lhs.NeverShow == rhs.NeverShow &&
		lhs.NPCReactsToPlayer == rhs.NPCReactsToPlayer &&
		lhs.ReplaceEventIfAlreadyActive == rhs.ReplaceEventIfAlreadyActive &&
		lhs.ShowEndTooltip == rhs.ShowEndTooltip &&
		lhs.ShowOnlyIfSequenceTarget == rhs.ShowOnlyIfSequenceTarget &&
		lhs.TargetMustMatchMissionSeed == rhs.TargetMustMatchMissionSeed &&
		lhs.TooltipRepeats == rhs.TooltipRepeats &&
		lhs.UseBuildingFromRendezvousStage == rhs.UseBuildingFromRendezvousStage &&
		lhs.UseMissionTradingDataOverride == rhs.UseMissionTradingDataOverride &&
		lhs.UseSeasonDataAsInteraction == rhs.UseSeasonDataAsInteraction;
	}
};

struct GcMissionCategory
{
	enum class MissionCategoryEnum : uint32_t
	{
		Info = 0,
		SelectableHint = 1,
		Mission = 2,
		Danger = 3,
		Urgent = 4,
	};

	NMS_GameComponents::GcMissionCategory::MissionCategoryEnum MissionCategory;

	friend bool operator==(const GcMissionCategory& lhs, const GcMissionCategory& rhs) 
	{
		return lhs.MissionCategory == rhs.MissionCategory;
	}
};

struct GcMissionPageHint
{
	enum class MissionPageHintEnum : uint32_t
	{
		None = 0,
		Suit = 1,
		Ship = 2,
		Weapon = 3,
		Vehicle = 4,
		Freighter = 5,
		Wiki = 6,
		Catalogue = 7,
		MissionLog = 8,
		Discovery = 9,
		Journey = 10,
		Expedition = 11,
		Options = 12,
	};

	NMS_GameComponents::GcMissionPageHint::MissionPageHintEnum MissionPageHint;

	friend bool operator==(const GcMissionPageHint& lhs, const GcMissionPageHint& rhs) 
	{
		return lhs.MissionPageHint == rhs.MissionPageHint;
	}
};

//Dependency: GcTradeData
//Dependency: GcGenericMissionVersionProgress
//Dependency: GcMissionBoardOptions
//Dependency: GcSeasonalLogOverrides
//Dependency: GcAlienPuzzleTable
//Dependency: GcDefaultMissionItemsTable
//Dependency: GcNumberedTextList
//Dependency: GcCostTableEntry
//Dependency: NMSString0x20
//Dependency: GcGenericRewardTableEntry
//Dependency: GcScanEventData
//Dependency: GcGenericMissionStage
//Dependency: GcMissionConditionTest
//Dependency: GcMissionCategory
//Dependency: GcMissionPageHint
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcGenericMissionSequence
{
	enum class MissionClassEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		ChainedSecondary = 2,
		Guide = 3,
		Wiki = 4,
		Seasonal = 5,
		Milestone = 6,
		Atlas = 7,
		BlackHole = 8,
		FleetSupport = 9,
		Settlement = 10,
	};

	enum class MessageStartEnum : uint32_t
	{
		Default = 0,
		Always = 1,
		Never = 2,
	};

	enum class MessageCompleteEnum : uint32_t
	{
		Default = 0,
		Always = 1,
		Never = 2,
	};

	enum class AutoStartEnum : uint32_t
	{
		None = 0,
		AllModes = 1,
		Seasonal = 2,
		OnSelected = 3,
	};

	NMS::Colour MissionColourOverride;
	NMS_GameComponents::GcTradeData TradingDataOverride;
	NMS_GameComponents::GcMissionBoardOptions MissionBoardOptions;
	NMS_GameComponents::GcSeasonalLogOverrides SeasonalLogTextOverrides;
	NMS_GameComponents::GcDefaultMissionItemsTable DefaultItems;
	NMS::NMSString0x20A MissionPageLocID;
	NMS::NMSString0x20A SettlementAbandonOSD;
	NMS_GameComponents::GcNumberedTextList MissionDescriptions;
	NMS_Toolkit::TkTextureResource MissionIcon;
	NMS_Toolkit::TkTextureResource MissionIconNotSelected;
	NMS_Toolkit::TkTextureResource MissionIconSelected;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionA;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionB;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionC;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionHeader;
	NMS_GameComponents::GcNumberedTextList MissionSubtitles;
	NMS_GameComponents::GcNumberedTextList MissionTitles;
	std::vector<NMSTemplate> CancelingConditions;
	std::vector<NMS_GameComponents::GcCostTableEntry> Costs;
	NMS_GameComponents::GcAlienPuzzleTable Dialog;
	std::vector<NMS_GameComponents::GcGenericMissionVersionProgress> FinalStageVersions;
	NMS::NMSString0x10 MissionBuildMenuHint;
	NMS::NMSString0x10 MissionID;
	NMS::NMSString0x10 NextMissionHint;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> Rewards;
	std::vector<NMS_GameComponents::GcScanEventData> ScanEvents;
	std::vector<NMS_GameComponents::GcGenericMissionStage> Stages;
	std::vector<NMSTemplate> StartingConditions;
	NMS::NMSString0x10 UseCommunityMissionForLog;
	std::vector<int32_t> WikiMissionBlockedBySeasons;
	NMS_GameComponents::GcGenericMissionSequence::AutoStartEnum AutoStart;
	int32_t BeginCheckFrequency;
	NMS_GameComponents::GcMissionConditionTest CancelConditionTest;
	NMS_GameComponents::GcGenericMissionSequence::MessageCompleteEnum MessageComplete;
	NMS_GameComponents::GcGenericMissionSequence::MessageStartEnum MessageStart;
	NMS_GameComponents::GcMissionCategory MissionCategory;
	NMS_GameComponents::GcGenericMissionSequence::MissionClassEnum MissionClass;
	NMS_GameComponents::GcMissionPageHint MissionPageHint;
	int32_t MissionPriority;
	NMS_GameComponents::GcMissionConditionTest StartConditionTest;
	NMS::NMSString0x20 MissionDescSwitchOverride;
	NMS::NMSString0x20 MissionObjective;
	bool BlocksPinning;
	bool CancelSetsComplete;
	bool CanRenounce;
	bool ForcesBuildMenuHint;
	bool ForcesPageHint;
	bool IsLegacy;
	bool IsProceduralAllowed;
	bool IsRecurring;
	bool MissionHasColourOverride;
	bool MissionIsCritical;
	bool PrefixTitle;
	bool RequiresSettlement;
	bool RestartOnCompletion;
	bool StartIsCancel;
	bool TakeCommunityMissionIDFromSeasonData;
	bool TelemetryUpload;
	bool UseFirstPurpleSystemDetailsInLogInfo;
	bool UseScanEventDetailsInLogInfo;
	bool UseSeasonTitleOverride;

	friend bool operator==(const GcGenericMissionSequence& lhs, const GcGenericMissionSequence& rhs) 
	{
		return lhs.MissionColourOverride == rhs.MissionColourOverride &&
		lhs.TradingDataOverride == rhs.TradingDataOverride &&
		lhs.MissionBoardOptions == rhs.MissionBoardOptions &&
		lhs.SeasonalLogTextOverrides == rhs.SeasonalLogTextOverrides &&
		lhs.DefaultItems == rhs.DefaultItems &&
		lhs.MissionPageLocID == rhs.MissionPageLocID &&
		lhs.SettlementAbandonOSD == rhs.SettlementAbandonOSD &&
		lhs.MissionDescriptions == rhs.MissionDescriptions &&
		lhs.MissionIcon == rhs.MissionIcon &&
		lhs.MissionIconNotSelected == rhs.MissionIconNotSelected &&
		lhs.MissionIconSelected == rhs.MissionIconSelected &&
		lhs.MissionProcDescriptionA == rhs.MissionProcDescriptionA &&
		lhs.MissionProcDescriptionB == rhs.MissionProcDescriptionB &&
		lhs.MissionProcDescriptionC == rhs.MissionProcDescriptionC &&
		lhs.MissionProcDescriptionHeader == rhs.MissionProcDescriptionHeader &&
		lhs.MissionSubtitles == rhs.MissionSubtitles &&
		lhs.MissionTitles == rhs.MissionTitles &&
		lhs.CancelingConditions == rhs.CancelingConditions &&
		lhs.Costs == rhs.Costs &&
		lhs.Dialog == rhs.Dialog &&
		lhs.FinalStageVersions == rhs.FinalStageVersions &&
		lhs.MissionBuildMenuHint == rhs.MissionBuildMenuHint &&
		lhs.MissionID == rhs.MissionID &&
		lhs.NextMissionHint == rhs.NextMissionHint &&
		lhs.Rewards == rhs.Rewards &&
		lhs.ScanEvents == rhs.ScanEvents &&
		lhs.Stages == rhs.Stages &&
		lhs.StartingConditions == rhs.StartingConditions &&
		lhs.UseCommunityMissionForLog == rhs.UseCommunityMissionForLog &&
		lhs.WikiMissionBlockedBySeasons == rhs.WikiMissionBlockedBySeasons &&
		lhs.AutoStart == rhs.AutoStart &&
		lhs.BeginCheckFrequency == rhs.BeginCheckFrequency &&
		lhs.CancelConditionTest == rhs.CancelConditionTest &&
		lhs.MessageComplete == rhs.MessageComplete &&
		lhs.MessageStart == rhs.MessageStart &&
		lhs.MissionCategory == rhs.MissionCategory &&
		lhs.MissionClass == rhs.MissionClass &&
		lhs.MissionPageHint == rhs.MissionPageHint &&
		lhs.MissionPriority == rhs.MissionPriority &&
		lhs.StartConditionTest == rhs.StartConditionTest &&
		lhs.MissionDescSwitchOverride == rhs.MissionDescSwitchOverride &&
		lhs.MissionObjective == rhs.MissionObjective &&
		lhs.BlocksPinning == rhs.BlocksPinning &&
		lhs.CancelSetsComplete == rhs.CancelSetsComplete &&
		lhs.CanRenounce == rhs.CanRenounce &&
		lhs.ForcesBuildMenuHint == rhs.ForcesBuildMenuHint &&
		lhs.ForcesPageHint == rhs.ForcesPageHint &&
		lhs.IsLegacy == rhs.IsLegacy &&
		lhs.IsProceduralAllowed == rhs.IsProceduralAllowed &&
		lhs.IsRecurring == rhs.IsRecurring &&
		lhs.MissionHasColourOverride == rhs.MissionHasColourOverride &&
		lhs.MissionIsCritical == rhs.MissionIsCritical &&
		lhs.PrefixTitle == rhs.PrefixTitle &&
		lhs.RequiresSettlement == rhs.RequiresSettlement &&
		lhs.RestartOnCompletion == rhs.RestartOnCompletion &&
		lhs.StartIsCancel == rhs.StartIsCancel &&
		lhs.TakeCommunityMissionIDFromSeasonData == rhs.TakeCommunityMissionIDFromSeasonData &&
		lhs.TelemetryUpload == rhs.TelemetryUpload &&
		lhs.UseFirstPurpleSystemDetailsInLogInfo == rhs.UseFirstPurpleSystemDetailsInLogInfo &&
		lhs.UseScanEventDetailsInLogInfo == rhs.UseScanEventDetailsInLogInfo &&
		lhs.UseSeasonTitleOverride == rhs.UseSeasonTitleOverride;
	}
};

struct GcMissionConditionAimingTeleporter
{

	friend bool operator==(const GcMissionConditionAimingTeleporter& lhs, const GcMissionConditionAimingTeleporter& rhs) 
	{
		return true;
	}
};

struct GcCostCanCustomiseCreature
{

	friend bool operator==(const GcCostCanCustomiseCreature& lhs, const GcCostCanCustomiseCreature& rhs) 
	{
		return true;
	}
};

//Dependency: GcCreatureIkType
//Dependency: NMSString0x100
struct GcCreatureIkData
{
	NMS_GameComponents::GcCreatureIkType Type;
	NMS::NMSString0x100 JointName;

	friend bool operator==(const GcCreatureIkData& lhs, const GcCreatureIkData& rhs) 
	{
		return lhs.Type == rhs.Type &&
		lhs.JointName == rhs.JointName;
	}
};

//Dependency: GcCreatureIkData
//Dependency: GcIkPistonData
struct GcCreatureFullBodyIKComponentData
{
	std::vector<NMS_GameComponents::GcCreatureIkData> JointData;
	std::vector<NMS_GameComponents::GcIkPistonData> PistonData;
	float BodyMassWeight;
	float FootAngleSpeed;
	float FootPlantSpringTime;
	float MaxFootAngle;
	float MaxHeadPitch;
	float MaxHeadRoll;
	float MaxHeadYaw;
	float MovementDamp;
	float Omega;
	float OmegaDropOff;
	bool Mech;
	bool UseFootAngle;
	bool UseFootGlue;
	bool UseFootRaycasts;
	bool UsePistons;

	friend bool operator==(const GcCreatureFullBodyIKComponentData& lhs, const GcCreatureFullBodyIKComponentData& rhs) 
	{
		return lhs.JointData == rhs.JointData &&
		lhs.PistonData == rhs.PistonData &&
		lhs.BodyMassWeight == rhs.BodyMassWeight &&
		lhs.FootAngleSpeed == rhs.FootAngleSpeed &&
		lhs.FootPlantSpringTime == rhs.FootPlantSpringTime &&
		lhs.MaxFootAngle == rhs.MaxFootAngle &&
		lhs.MaxHeadPitch == rhs.MaxHeadPitch &&
		lhs.MaxHeadRoll == rhs.MaxHeadRoll &&
		lhs.MaxHeadYaw == rhs.MaxHeadYaw &&
		lhs.MovementDamp == rhs.MovementDamp &&
		lhs.Omega == rhs.Omega &&
		lhs.OmegaDropOff == rhs.OmegaDropOff &&
		lhs.Mech == rhs.Mech &&
		lhs.UseFootAngle == rhs.UseFootAngle &&
		lhs.UseFootGlue == rhs.UseFootGlue &&
		lhs.UseFootRaycasts == rhs.UseFootRaycasts &&
		lhs.UsePistons == rhs.UsePistons;
	}
};

struct GcCostCanMilkCreature
{

	friend bool operator==(const GcCostCanMilkCreature& lhs, const GcCostCanMilkCreature& rhs) 
	{
		return true;
	}
};

struct GcCostCanRideCreature
{

	friend bool operator==(const GcCostCanRideCreature& lhs, const GcCostCanRideCreature& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionOnMultiplayerMission
{

	friend bool operator==(const GcMissionConditionOnMultiplayerMission& lhs, const GcMissionConditionOnMultiplayerMission& rhs) 
	{
		return true;
	}
};

struct GcDiscoveryType
{
	enum class DiscoveryTypeEnum : uint32_t
	{
		Unknown = 0,
		SolarSystem = 1,
		Planet = 2,
		Animal = 3,
		Flora = 4,
		Mineral = 5,
		Sector = 6,
		Building = 7,
		Interactable = 8,
		Sentinel = 9,
		Starship = 10,
		Artifact = 11,
		Mystery = 12,
		Treasure = 13,
		Control = 14,
		HarvestPlant = 15,
		FriendlyDrone = 16,
	};

	NMS_GameComponents::GcDiscoveryType::DiscoveryTypeEnum DiscoveryType;

	friend bool operator==(const GcDiscoveryType& lhs, const GcDiscoveryType& rhs) 
	{
		return lhs.DiscoveryType == rhs.DiscoveryType;
	}
};

//Dependency: GcDiscoveryType
//Dependency: NMSString0x20A
struct GcCostDiscovery
{
	NMS::NMSString0x20A CostString;
	NMS_GameComponents::GcDiscoveryType DiscoveryType;
	int32_t Index;

	friend bool operator==(const GcCostDiscovery& lhs, const GcCostDiscovery& rhs) 
	{
		return lhs.CostString == rhs.CostString &&
		lhs.DiscoveryType == rhs.DiscoveryType &&
		lhs.Index == rhs.Index;
	}
};

//Dependency: GcFrigateClass
struct GcCostFleetStoredIncome
{
	NMS_GameComponents::GcFrigateClass Class;
	int32_t RequiredAmount;

	friend bool operator==(const GcCostFleetStoredIncome& lhs, const GcCostFleetStoredIncome& rhs) 
	{
		return lhs.Class == rhs.Class &&
		lhs.RequiredAmount == rhs.RequiredAmount;
	}
};

//Dependency: GcResourceElement
//Dependency: NMSString0x10
struct GcPulseEncounterSpawnSpaceHostiles
{
	NMS_GameComponents::GcResourceElement CustomShipResource;
	NMS::NMSString0x10 AttackDefinition;
	int32_t NumberOfShips;

	friend bool operator==(const GcPulseEncounterSpawnSpaceHostiles& lhs, const GcPulseEncounterSpawnSpaceHostiles& rhs) 
	{
		return lhs.CustomShipResource == rhs.CustomShipResource &&
		lhs.AttackDefinition == rhs.AttackDefinition &&
		lhs.NumberOfShips == rhs.NumberOfShips;
	}
};

//Dependency: NMSString0x10
struct GcFreighterRoomNPCData
{
	NMS::NMSString0x10 RoomID;
	float POISelectionWeight[5];
	float SpawnCapacity[5];

	friend bool operator==(const GcFreighterRoomNPCData& lhs, const GcFreighterRoomNPCData& rhs) 
	{
		return lhs.RoomID == rhs.RoomID &&
		std::equal(std::begin(lhs.POISelectionWeight), std::end(lhs.POISelectionWeight), std::begin(rhs.POISelectionWeight)) &&
		std::equal(std::begin(lhs.SpawnCapacity), std::end(lhs.SpawnCapacity), std::begin(rhs.SpawnCapacity));
	}
};

struct GcCostHasFireteamMember
{
	int32_t Index;
	bool BlockIfCannotAccessTheirPurpleSystem;

	friend bool operator==(const GcCostHasFireteamMember& lhs, const GcCostHasFireteamMember& rhs) 
	{
		return lhs.Index == rhs.Index &&
		lhs.BlockIfCannotAccessTheirPurpleSystem == rhs.BlockIfCannotAccessTheirPurpleSystem;
	}
};

struct GcLandingHelperComponentData
{
	float ActiveDistanceMax;
	float ActiveDistanceMin;
	bool LandPoint;

	friend bool operator==(const GcLandingHelperComponentData& lhs, const GcLandingHelperComponentData& rhs) 
	{
		return lhs.ActiveDistanceMax == rhs.ActiveDistanceMax &&
		lhs.ActiveDistanceMin == rhs.ActiveDistanceMin &&
		lhs.LandPoint == rhs.LandPoint;
	}
};

struct GcCostHealth
{
	int32_t HealthUnits;

	friend bool operator==(const GcCostHealth& lhs, const GcCostHealth& rhs) 
	{
		return lhs.HealthUnits == rhs.HealthUnits;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20
struct TkMaterialShaderMillConnect
{
	int32_t Count;
	NMS::NMSString0x20 Name;
	bool Expanded;

	friend bool operator==(const TkMaterialShaderMillConnect& lhs, const TkMaterialShaderMillConnect& rhs) 
	{
		return lhs.Count == rhs.Count &&
		lhs.Name == rhs.Name &&
		lhs.Expanded == rhs.Expanded;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCustomisationComponentData
{
	enum class CustomisationDataTypeEnum : uint32_t
	{
		Player = 0,
		Vehicle = 1,
		Weapon = 2,
		Ship_01 = 3,
		Ship_02 = 4,
		Ship_03 = 5,
		Ship_04 = 6,
		Ship_05 = 7,
		Ship_06 = 8,
		Vehicle_Bike = 9,
		Vehicle_Truck = 10,
		Vehicle_WheeledBike = 11,
		Vehicle_Hovercraft = 12,
		Vehicle_Submarine = 13,
		Vehicle_Mech = 14,
		Freighter = 15,
		Pet = 16,
		Ship_07 = 17,
		Ship_08 = 18,
		Ship_09 = 19,
		Ship_10 = 20,
		Ship_11 = 21,
		Ship_12 = 22,
		PirateFreighter = 23,
		Skiff = 24,
		FishingRod = 25,
	};

	NMS_GameComponents::GcCustomisationComponentData::CustomisationDataTypeEnum CustomisationDataType;

	friend bool operator==(const GcCustomisationComponentData& lhs, const GcCustomisationComponentData& rhs) 
	{
		return lhs.CustomisationDataType == rhs.CustomisationDataType;
	}
};

//Dependency: NMSString0x20
struct GcLookAtComponentData
{
	enum class LookAtTypeEnum : uint32_t
	{
		Player = 0,
	};

	NMS_GameComponents::GcLookAtComponentData::LookAtTypeEnum LookAtType;
	float MinRotationRateDegrees;
	float RotationRateFactor;
	NMS::NMSString0x20 NodeName;

	friend bool operator==(const GcLookAtComponentData& lhs, const GcLookAtComponentData& rhs) 
	{
		return lhs.LookAtType == rhs.LookAtType &&
		lhs.MinRotationRateDegrees == rhs.MinRotationRateDegrees &&
		lhs.RotationRateFactor == rhs.RotationRateFactor &&
		lhs.NodeName == rhs.NodeName;
	}
};

//Dependency: NMSString0x10
struct GcCreatureFootParticleSingleData
{
	enum class MoveSpeedEnum : uint32_t
	{
		Always = 0,
		Walk = 1,
		Run = 2,
	};

	NMS::NMSString0x10 EffectName;
	float MaxCreatureSize;
	float MinCreatureSize;
	NMS_GameComponents::GcCreatureFootParticleSingleData::MoveSpeedEnum MoveSpeed;
	float Scale;

	friend bool operator==(const GcCreatureFootParticleSingleData& lhs, const GcCreatureFootParticleSingleData& rhs) 
	{
		return lhs.EffectName == rhs.EffectName &&
		lhs.MaxCreatureSize == rhs.MaxCreatureSize &&
		lhs.MinCreatureSize == rhs.MinCreatureSize &&
		lhs.MoveSpeed == rhs.MoveSpeed &&
		lhs.Scale == rhs.Scale;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkPlatformButtonPair
//Dependency: TkInputEnum
//Dependency: NMSString0x10
struct TkActionButtonMap
{
	NMS::NMSString0x10 ActionId;
	std::vector<NMS_Toolkit::TkPlatformButtonPair> Platforms;
	NMS_Toolkit::TkInputEnum PadButtonId;
	bool ScaleToFitFont;

	friend bool operator==(const TkActionButtonMap& lhs, const TkActionButtonMap& rhs) 
	{
		return lhs.ActionId == rhs.ActionId &&
		lhs.Platforms == rhs.Platforms &&
		lhs.PadButtonId == rhs.PadButtonId &&
		lhs.ScaleToFitFont == rhs.ScaleToFitFont;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostPirateTribute
{
	float CargoValuePercent;
	int32_t MinimumValue;

	friend bool operator==(const GcCostPirateTribute& lhs, const GcCostPirateTribute& rhs) 
	{
		return lhs.CargoValuePercent == rhs.CargoValuePercent &&
		lhs.MinimumValue == rhs.MinimumValue;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcCostInteractionIndex
{
	NMS::NMSString0x20A CantAffordLocID;
	int32_t Index;
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;
	bool AffordIfGreaterThanIndex;

	friend bool operator==(const GcCostInteractionIndex& lhs, const GcCostInteractionIndex& rhs) 
	{
		return lhs.CantAffordLocID == rhs.CantAffordLocID &&
		lhs.Index == rhs.Index &&
		lhs.InteractionType == rhs.InteractionType &&
		lhs.Race == rhs.Race &&
		lhs.AffordIfGreaterThanIndex == rhs.AffordIfGreaterThanIndex;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkPaletteTexture
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
struct TkProceduralTexture
{
	enum class TextureGameplayUseEnum : uint32_t
	{
		IgnoreName = 0,
		MatchName = 1,
		DoNotMatchName = 2,
	};

	NMS::Colour AverageColour;
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString TextureName;
	NMS_Toolkit::TkPaletteTexture Palette;
	float Probability;
	NMS_Toolkit::TkProceduralTexture::TextureGameplayUseEnum TextureGameplayUse;
	bool Multiply;
	bool OverrideAverageColour;

	friend bool operator==(const TkProceduralTexture& lhs, const TkProceduralTexture& rhs) 
	{
		return lhs.AverageColour == rhs.AverageColour &&
		lhs.Name == rhs.Name &&
		lhs.TextureName == rhs.TextureName &&
		lhs.Palette == rhs.Palette &&
		lhs.Probability == rhs.Probability &&
		lhs.TextureGameplayUse == rhs.TextureGameplayUse &&
		lhs.Multiply == rhs.Multiply &&
		lhs.OverrideAverageColour == rhs.OverrideAverageColour;
	}
};

//Dependency: TkProceduralTexture
//Dependency: NMSString0x10
struct TkProceduralTextureLayer
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Name;
	std::vector<NMS_Toolkit::TkProceduralTexture> Textures;
	float Probability;
	bool SelectToMatchBase;

	friend bool operator==(const TkProceduralTextureLayer& lhs, const TkProceduralTextureLayer& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.Name == rhs.Name &&
		lhs.Textures == rhs.Textures &&
		lhs.Probability == rhs.Probability &&
		lhs.SelectToMatchBase == rhs.SelectToMatchBase;
	}
};

//Dependency: TkProceduralTextureLayer
struct TkProceduralTextureList
{
	NMS_Toolkit::TkProceduralTextureLayer Layers[8];
	bool AlwaysEnableUnnamedTextureLayers;

	friend bool operator==(const TkProceduralTextureList& lhs, const TkProceduralTextureList& rhs) 
	{
		return std::equal(std::begin(lhs.Layers), std::end(lhs.Layers), std::begin(rhs.Layers)) &&
		lhs.AlwaysEnableUnnamedTextureLayers == rhs.AlwaysEnableUnnamedTextureLayers;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcCreatureRoleFilename
{
	NMS::VariableSizeString File;
	float BiomeProbability[4];

	friend bool operator==(const GcCreatureRoleFilename& lhs, const GcCreatureRoleFilename& rhs) 
	{
		return lhs.File == rhs.File &&
		std::equal(std::begin(lhs.BiomeProbability), std::end(lhs.BiomeProbability), std::begin(rhs.BiomeProbability));
	}
};

//Dependency: GcCreatureRoleFilename
struct GcCreatureRoleFilenameList
{
	std::vector<NMS_GameComponents::GcCreatureRoleFilename> Options;

	friend bool operator==(const GcCreatureRoleFilenameList& lhs, const GcCreatureRoleFilenameList& rhs) 
	{
		return lhs.Options == rhs.Options;
	}
};

//Dependency: GcCreatureRoleFilenameList
struct GcCreatureRoleFilenameTable
{
	NMS_GameComponents::GcCreatureRoleFilenameList WeirdBiomeFiles[32];
	NMS_GameComponents::GcCreatureRoleFilenameList BiomeFiles[17];
	NMS_GameComponents::GcCreatureRoleFilenameList AirFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList CaveFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList RobotFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList UnderwaterFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList UnderwaterFilesExtra;
	float LifeChance[4];
	float RoleFrequencyModifiers[4];

	friend bool operator==(const GcCreatureRoleFilenameTable& lhs, const GcCreatureRoleFilenameTable& rhs) 
	{
		return std::equal(std::begin(lhs.WeirdBiomeFiles), std::end(lhs.WeirdBiomeFiles), std::begin(rhs.WeirdBiomeFiles)) &&
		std::equal(std::begin(lhs.BiomeFiles), std::end(lhs.BiomeFiles), std::begin(rhs.BiomeFiles)) &&
		lhs.AirFiles == rhs.AirFiles &&
		lhs.CaveFiles == rhs.CaveFiles &&
		lhs.RobotFiles == rhs.RobotFiles &&
		lhs.UnderwaterFiles == rhs.UnderwaterFiles &&
		lhs.UnderwaterFilesExtra == rhs.UnderwaterFilesExtra &&
		std::equal(std::begin(lhs.LifeChance), std::end(lhs.LifeChance), std::begin(rhs.LifeChance)) &&
		std::equal(std::begin(lhs.RoleFrequencyModifiers), std::end(lhs.RoleFrequencyModifiers), std::begin(rhs.RoleFrequencyModifiers));
	}
};

struct GcInteractionMissionState
{
	enum class InteractionMissionStateEnum : uint32_t
	{
		Unused = 0,
		Unlocked = 1,
		MonoCorrupted = 2,
		GiftGiven = 3,
	};

	NMS_GameComponents::GcInteractionMissionState::InteractionMissionStateEnum InteractionMissionState;

	friend bool operator==(const GcInteractionMissionState& lhs, const GcInteractionMissionState& rhs) 
	{
		return lhs.InteractionMissionState == rhs.InteractionMissionState;
	}
};

//Dependency: GcInteractionMissionState
//Dependency: GcInteractionType
//Dependency: NMSString0x20A
struct GcCostInteractionMissionState
{
	NMS::NMSString0x20A CanAffordLocID;
	NMS::NMSString0x20A CantAffordLocID;
	NMS_GameComponents::GcInteractionMissionState RequiredState;
	NMS_GameComponents::GcInteractionType ThisInteractionClassInMyBuilding;
	bool AlsoAcceptMaintenanceDone;
	bool TestThisInteraction;

	friend bool operator==(const GcCostInteractionMissionState& lhs, const GcCostInteractionMissionState& rhs) 
	{
		return lhs.CanAffordLocID == rhs.CanAffordLocID &&
		lhs.CantAffordLocID == rhs.CantAffordLocID &&
		lhs.RequiredState == rhs.RequiredState &&
		lhs.ThisInteractionClassInMyBuilding == rhs.ThisInteractionClassInMyBuilding &&
		lhs.AlsoAcceptMaintenanceDone == rhs.AlsoAcceptMaintenanceDone &&
		lhs.TestThisInteraction == rhs.TestThisInteraction;
	}
};

//Dependency: GcGenericRewardTableEntry
struct GcExpeditionRewardTable
{
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> Table;

	friend bool operator==(const GcExpeditionRewardTable& lhs, const GcExpeditionRewardTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcCostItemFromList
{
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t Amount;
	int32_t Index;

	friend bool operator==(const GcCostItemFromList& lhs, const GcCostItemFromList& rhs) 
	{
		return lhs.ItemList == rhs.ItemList &&
		lhs.Amount == rhs.Amount &&
		lhs.Index == rhs.Index;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostItemFromListOfValue
{
	NMS::NMSString0x20A CostText;
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t UnitValue;
	bool UseDefaultAmount;

	friend bool operator==(const GcCostItemFromListOfValue& lhs, const GcCostItemFromListOfValue& rhs) 
	{
		return lhs.CostText == rhs.CostText &&
		lhs.ItemList == rhs.ItemList &&
		lhs.UnitValue == rhs.UnitValue &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
struct GcHUDStartup
{
	NMS::NMSString0x10 RequiresTechBroken;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	float Time;

	friend bool operator==(const GcHUDStartup& lhs, const GcHUDStartup& rhs) 
	{
		return lhs.RequiresTechBroken == rhs.RequiresTechBroken &&
		lhs.Audio == rhs.Audio &&
		lhs.Time == rhs.Time;
	}
};

//Dependency: NMSString0x10
struct GcCostJourneyMilestone
{
	NMS::NMSString0x10 RequiredMilestone;

	friend bool operator==(const GcCostJourneyMilestone& lhs, const GcCostJourneyMilestone& rhs) 
	{
		return lhs.RequiredMilestone == rhs.RequiredMilestone;
	}
};

//Dependency: NMSString0x20A
struct GcCostLocalMissionAvailable
{
	NMS::NMSString0x20A TextOverride;

	friend bool operator==(const GcCostLocalMissionAvailable& lhs, const GcCostLocalMissionAvailable& rhs) 
	{
		return lhs.TextOverride == rhs.TextOverride;
	}
};

struct GcExpeditionDuration
{
	enum class ExpeditionDurationEnum : uint32_t
	{
		VeryShort = 0,
		Short = 1,
		Medium = 2,
		Long = 3,
		VeryLong = 4,
	};

	NMS_GameComponents::GcExpeditionDuration::ExpeditionDurationEnum ExpeditionDuration;

	friend bool operator==(const GcExpeditionDuration& lhs, const GcExpeditionDuration& rhs) 
	{
		return lhs.ExpeditionDuration == rhs.ExpeditionDuration;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationBobbleHead
{
	NMS_Toolkit::TkModelResource BobbleHead;
	NMS::NMSString0x10 LinkedTechId;

	friend bool operator==(const GcCustomisationBobbleHead& lhs, const GcCustomisationBobbleHead& rhs) 
	{
		return lhs.BobbleHead == rhs.BobbleHead &&
		lhs.LinkedTechId == rhs.LinkedTechId;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostMissionComplete
{
	NMS::NMSString0x20A TextOverride;
	NMS::NMSString0x10 Cost;
	bool HideIfCompleted;

	friend bool operator==(const GcCostMissionComplete& lhs, const GcCostMissionComplete& rhs) 
	{
		return lhs.TextOverride == rhs.TextOverride &&
		lhs.Cost == rhs.Cost &&
		lhs.HideIfCompleted == rhs.HideIfCompleted;
	}
};

//Dependency: GcCurrency
struct GcCostMoney
{
	int32_t Cost;
	NMS_GameComponents::GcCurrency CostCurrency;

	friend bool operator==(const GcCostMoney& lhs, const GcCostMoney& rhs) 
	{
		return lhs.Cost == rhs.Cost &&
		lhs.CostCurrency == rhs.CostCurrency;
	}
};

//Dependency: NMSString0x10
struct GcMechMeshPartTypeData
{
	NMS::NMSString0x10 DescriptorGroupID;
	std::vector<NMS::NMSString0x10> RequiredTechs;

	friend bool operator==(const GcMechMeshPartTypeData& lhs, const GcMechMeshPartTypeData& rhs) 
	{
		return lhs.DescriptorGroupID == rhs.DescriptorGroupID &&
		lhs.RequiredTechs == rhs.RequiredTechs;
	}
};

//Dependency: GcMechMeshPartTypeData
struct GcMechMeshPartData
{
	NMS_GameComponents::GcMechMeshPartTypeData MeshTypes[4];

	friend bool operator==(const GcMechMeshPartData& lhs, const GcMechMeshPartData& rhs) 
	{
		return std::equal(std::begin(lhs.MeshTypes), std::end(lhs.MeshTypes), std::begin(rhs.MeshTypes));
	}
};

//Dependency: NMSString0x10
struct GcItemAmountCostPair
{
	NMS::NMSString0x10 ItemId;
	int32_t Amount;

	friend bool operator==(const GcItemAmountCostPair& lhs, const GcItemAmountCostPair& rhs) 
	{
		return lhs.ItemId == rhs.ItemId &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: GcItemAmountCostPair
//Dependency: NMSString0x20A
struct GcCostMultiItem
{
	NMS::NMSString0x20A DisplayLocID;
	std::vector<NMS_GameComponents::GcItemAmountCostPair> ItemList;
	bool OnlyTakeIfCanAfford;

	friend bool operator==(const GcCostMultiItem& lhs, const GcCostMultiItem& rhs) 
	{
		return lhs.DisplayLocID == rhs.DisplayLocID &&
		lhs.ItemList == rhs.ItemList &&
		lhs.OnlyTakeIfCanAfford == rhs.OnlyTakeIfCanAfford;
	}
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
struct GcCostProcProduct
{
	int32_t FreighterPasswordIndex;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcProceduralProductCategory Type;
	bool CareAboutRarity;

	friend bool operator==(const GcCostProcProduct& lhs, const GcCostProcProduct& rhs) 
	{
		return lhs.FreighterPasswordIndex == rhs.FreighterPasswordIndex &&
		lhs.Rarity == rhs.Rarity &&
		lhs.Type == rhs.Type &&
		lhs.CareAboutRarity == rhs.CareAboutRarity;
	}
};

struct GcCostSentinelBlockStatus
{
	bool CanAffordIfSentinelsDisabled;

	friend bool operator==(const GcCostSentinelBlockStatus& lhs, const GcCostSentinelBlockStatus& rhs) 
	{
		return lhs.CanAffordIfSentinelsDisabled == rhs.CanAffordIfSentinelsDisabled;
	}
};

struct GcCostOwnSettlement
{
	int8_t NumRequired;

	friend bool operator==(const GcCostOwnSettlement& lhs, const GcCostOwnSettlement& rhs) 
	{
		return lhs.NumRequired == rhs.NumRequired;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableSeasonReward
{
	NMS::NMSString0x20A SpecificMilestoneLoc;
	NMS::NMSString0x10 ID;
	std::vector<int32_t> SeasonIds;
	std::vector<int32_t> StageIds;
	bool MustBeUnlocked;
	bool SwitchExclusive;
	bool UniqueInventoryItem;

	friend bool operator==(const GcUnlockableSeasonReward& lhs, const GcUnlockableSeasonReward& rhs) 
	{
		return lhs.SpecificMilestoneLoc == rhs.SpecificMilestoneLoc &&
		lhs.ID == rhs.ID &&
		lhs.SeasonIds == rhs.SeasonIds &&
		lhs.StageIds == rhs.StageIds &&
		lhs.MustBeUnlocked == rhs.MustBeUnlocked &&
		lhs.SwitchExclusive == rhs.SwitchExclusive &&
		lhs.UniqueInventoryItem == rhs.UniqueInventoryItem;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcEasyRagdollSetUpBodyDimensions
{
	NMS::Vector3f Centre;
	NMS::Vector3f Size;
	NMS::NMSString0x20 Joint;

	friend bool operator==(const GcEasyRagdollSetUpBodyDimensions& lhs, const GcEasyRagdollSetUpBodyDimensions& rhs) 
	{
		return lhs.Centre == rhs.Centre &&
		lhs.Size == rhs.Size &&
		lhs.Joint == rhs.Joint;
	}
};

//Dependency: GcEasyRagdollSetUpBodyDimensions
//Dependency: NMSString0x20
struct GcEasyRagdollSetUpData
{
	std::vector<NMS::NMSString0x20> ChainEnds;
	std::vector<NMS::NMSString0x20> ExcludeJoints;
	std::vector<NMS_GameComponents::GcEasyRagdollSetUpBodyDimensions> ForceBodyDimensions;

	friend bool operator==(const GcEasyRagdollSetUpData& lhs, const GcEasyRagdollSetUpData& rhs) 
	{
		return lhs.ChainEnds == rhs.ChainEnds &&
		lhs.ExcludeJoints == rhs.ExcludeJoints &&
		lhs.ForceBodyDimensions == rhs.ForceBodyDimensions;
	}
};

//Dependency: GcEasyRagdollSetUpData
//Dependency: GcRagdollBone
//Dependency: NMSString0x40
struct GcRagdollComponentData
{
	NMS_GameComponents::GcEasyRagdollSetUpData EasySetUpData;
	std::vector<NMS::NMSString0x40> OtherKnownAnimations;
	std::vector<NMS_GameComponents::GcRagdollBone> RagdollBones;
	float AnimationSpeedOverride;
	float BlendIntoStartPoseDuration;
	float InertiaScale;
	float JointFriction;
	float KineticEnergyForRest;
	float MaxDamping;
	float MaxWaitForRest;
	float MinWaitForRest;
	float ModelScaleAtCreation;
	float OverallDurationScale;
	float PhasingOutRagdollDuration;
	float PlayAnimationDuration;
	float WholeBodyMass;
	NMS::NMSString0x40 FallAnimation_Back;
	NMS::NMSString0x40 FallAnimation_Front;
	NMS::NMSString0x40 FallAnimation_Left;
	NMS::NMSString0x40 FallAnimation_Right;
	NMS::NMSString0x40 GetUpAnimation_Back;
	NMS::NMSString0x40 GetUpAnimation_Front;
	NMS::NMSString0x40 GetUpAnimation_Left;
	NMS::NMSString0x40 GetUpAnimation_Right;
	NMS::NMSString0x40 Name;
	bool EasySetUp;
	bool Enabled;

	friend bool operator==(const GcRagdollComponentData& lhs, const GcRagdollComponentData& rhs) 
	{
		return lhs.EasySetUpData == rhs.EasySetUpData &&
		lhs.OtherKnownAnimations == rhs.OtherKnownAnimations &&
		lhs.RagdollBones == rhs.RagdollBones &&
		lhs.AnimationSpeedOverride == rhs.AnimationSpeedOverride &&
		lhs.BlendIntoStartPoseDuration == rhs.BlendIntoStartPoseDuration &&
		lhs.InertiaScale == rhs.InertiaScale &&
		lhs.JointFriction == rhs.JointFriction &&
		lhs.KineticEnergyForRest == rhs.KineticEnergyForRest &&
		lhs.MaxDamping == rhs.MaxDamping &&
		lhs.MaxWaitForRest == rhs.MaxWaitForRest &&
		lhs.MinWaitForRest == rhs.MinWaitForRest &&
		lhs.ModelScaleAtCreation == rhs.ModelScaleAtCreation &&
		lhs.OverallDurationScale == rhs.OverallDurationScale &&
		lhs.PhasingOutRagdollDuration == rhs.PhasingOutRagdollDuration &&
		lhs.PlayAnimationDuration == rhs.PlayAnimationDuration &&
		lhs.WholeBodyMass == rhs.WholeBodyMass &&
		lhs.FallAnimation_Back == rhs.FallAnimation_Back &&
		lhs.FallAnimation_Front == rhs.FallAnimation_Front &&
		lhs.FallAnimation_Left == rhs.FallAnimation_Left &&
		lhs.FallAnimation_Right == rhs.FallAnimation_Right &&
		lhs.GetUpAnimation_Back == rhs.GetUpAnimation_Back &&
		lhs.GetUpAnimation_Front == rhs.GetUpAnimation_Front &&
		lhs.GetUpAnimation_Left == rhs.GetUpAnimation_Left &&
		lhs.GetUpAnimation_Right == rhs.GetUpAnimation_Right &&
		lhs.Name == rhs.Name &&
		lhs.EasySetUp == rhs.EasySetUp &&
		lhs.Enabled == rhs.Enabled;
	}
};

struct GcGalacticAddressData
{
	int32_t PlanetIndex;
	int32_t SolarSystemIndex;
	int32_t VoxelX;
	int32_t VoxelY;
	int32_t VoxelZ;

	friend bool operator==(const GcGalacticAddressData& lhs, const GcGalacticAddressData& rhs) 
	{
		return lhs.PlanetIndex == rhs.PlanetIndex &&
		lhs.SolarSystemIndex == rhs.SolarSystemIndex &&
		lhs.VoxelX == rhs.VoxelX &&
		lhs.VoxelY == rhs.VoxelY &&
		lhs.VoxelZ == rhs.VoxelZ;
	}
};

//Dependency: GcGalacticAddressData
struct GcUniverseAddressData
{
	NMS_GameComponents::GcGalacticAddressData GalacticAddress;
	int32_t RealityIndex;

	friend bool operator==(const GcUniverseAddressData& lhs, const GcUniverseAddressData& rhs) 
	{
		return lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.RealityIndex == rhs.RealityIndex;
	}
};

//Dependency: GcUniverseAddressData
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcTeleportEndpoint
{
	enum class TeleporterTypeEnum : uint32_t
	{
		Base = 0,
		Spacestation = 1,
		Atlas = 2,
		PlanetAwayFromShip = 3,
		ExternalBase = 4,
		EmergencyGalaxyFix = 5,
		OnNexus = 6,
		SpacestationFixPosition = 7,
		Settlement = 8,
		Freighter = 9,
		Frigate = 10,
	};

	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS_GameComponents::GcUniverseAddressData UniverseAddress;
	NMS_GameComponents::GcTeleportEndpoint::TeleporterTypeEnum TeleporterType;
	NMS::NMSString0x40 Name;
	bool CalcWarpOffset;
	bool IsFavourite;
	bool IsFeatured;

	friend bool operator==(const GcTeleportEndpoint& lhs, const GcTeleportEndpoint& rhs) 
	{
		return lhs.Facing == rhs.Facing &&
		lhs.Position == rhs.Position &&
		lhs.UniverseAddress == rhs.UniverseAddress &&
		lhs.TeleporterType == rhs.TeleporterType &&
		lhs.Name == rhs.Name &&
		lhs.CalcWarpOffset == rhs.CalcWarpOffset &&
		lhs.IsFavourite == rhs.IsFavourite &&
		lhs.IsFeatured == rhs.IsFeatured;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcCostProduct
{
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool TakeIDFromSeasonData;
	bool UseDefaultAmount;

	friend bool operator==(const GcCostProduct& lhs, const GcCostProduct& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Amount == rhs.Amount &&
		lhs.Default == rhs.Default &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostProductOnlyTakeIfCanAfford
{
	NMS::NMSString0x20A AltCostLocID;
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;

	friend bool operator==(const GcCostProductOnlyTakeIfCanAfford& lhs, const GcCostProductOnlyTakeIfCanAfford& rhs) 
	{
		return lhs.AltCostLocID == rhs.AltCostLocID &&
		lhs.Id == rhs.Id &&
		lhs.Amount == rhs.Amount &&
		lhs.Default == rhs.Default;
	}
};

//Dependency: GcSentinelSpawnSequenceStep
//Dependency: NMSString0x10
struct GcSentinelSpawnNamedSequence
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcSentinelSpawnSequenceStep> Waves;

	friend bool operator==(const GcSentinelSpawnNamedSequence& lhs, const GcSentinelSpawnNamedSequence& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Waves == rhs.Waves;
	}
};

//Dependency: GcPetData
struct GcRewardSpecificPetEgg
{
	NMS_GameComponents::GcPetData EggData;
	bool ImmediatelyHatchable;

	friend bool operator==(const GcRewardSpecificPetEgg& lhs, const GcRewardSpecificPetEgg& rhs) 
	{
		return lhs.EggData == rhs.EggData &&
		lhs.ImmediatelyHatchable == rhs.ImmediatelyHatchable;
	}
};

//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcCostRaceItemCombo
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcAlienRace AlienRace;
	int32_t Amount;

	friend bool operator==(const GcCostRaceItemCombo& lhs, const GcCostRaceItemCombo& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.AlienRace == rhs.AlienRace &&
		lhs.Amount == rhs.Amount;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkModelResource
struct TkLODModelResource
{
	NMS_Toolkit::TkModelResource LODModel;
	float Distance;
	float SwapThreshold;

	friend bool operator==(const TkLODModelResource& lhs, const TkLODModelResource& rhs) 
	{
		return lhs.LODModel == rhs.LODModel &&
		lhs.Distance == rhs.Distance &&
		lhs.SwapThreshold == rhs.SwapThreshold;
	}
};

//Dependency: TkLODModelResource
struct TkLODComponentData
{
	std::vector<NMS_Toolkit::TkLODModelResource> LODModels;
	float CrossFadeOverlap;
	float CrossFadeTime;

	friend bool operator==(const TkLODComponentData& lhs, const TkLODComponentData& rhs) 
	{
		return lhs.LODModels == rhs.LODModels &&
		lhs.CrossFadeOverlap == rhs.CrossFadeOverlap &&
		lhs.CrossFadeTime == rhs.CrossFadeTime;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostSettlementBuildingUpgrade
{
	int32_t LevelRequired;

	friend bool operator==(const GcCostSettlementBuildingUpgrade& lhs, const GcCostSettlementBuildingUpgrade& rhs) 
	{
		return lhs.LevelRequired == rhs.LevelRequired;
	}
};

//Dependency: GcSettlementTowerPower
struct GcCostSettlementTowerReward
{
	NMS_GameComponents::GcSettlementTowerPower Power;

	friend bool operator==(const GcCostSettlementTowerReward& lhs, const GcCostSettlementTowerReward& rhs) 
	{
		return lhs.Power == rhs.Power;
	}
};

//Dependency: NMSString0x10
struct GcRewardSpecificSeasonalSubstance
{
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	float ChanceToUse;
	int32_t SeasonNumber;

	friend bool operator==(const GcRewardSpecificSeasonalSubstance& lhs, const GcRewardSpecificSeasonalSubstance& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ChanceToUse == rhs.ChanceToUse &&
		lhs.SeasonNumber == rhs.SeasonNumber;
	}
};

//Dependency: GcAlienRace
struct GcCostStanding
{
	NMS_GameComponents::GcAlienRace Race;
	int32_t RequiredStanding;
	bool UseCurrentRankString;

	friend bool operator==(const GcCostStanding& lhs, const GcCostStanding& rhs) 
	{
		return lhs.Race == rhs.Race &&
		lhs.RequiredStanding == rhs.RequiredStanding &&
		lhs.UseCurrentRankString == rhs.UseCurrentRankString;
	}
};

struct GcDoShipFlybyIntercept
{
	float Speed;
	float Time;

	friend bool operator==(const GcDoShipFlybyIntercept& lhs, const GcDoShipFlybyIntercept& rhs) 
	{
		return lhs.Speed == rhs.Speed &&
		lhs.Time == rhs.Time;
	}
};

struct GcMissionConditionGunOut
{

	friend bool operator==(const GcMissionConditionGunOut& lhs, const GcMissionConditionGunOut& rhs) 
	{
		return true;
	}
};

struct GcMissionCommunityMissionData
{
	bool ShowTimeToDeadline;

	friend bool operator==(const GcMissionCommunityMissionData& lhs, const GcMissionCommunityMissionData& rhs) 
	{
		return lhs.ShowTimeToDeadline == rhs.ShowTimeToDeadline;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
struct TkEmitterData
{
	NMS::VariableSizeString Particle;

	friend bool operator==(const TkEmitterData& lhs, const TkEmitterData& rhs) 
	{
		return lhs.Particle == rhs.Particle;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostStat
{
	NMS::NMSString0x20A CostAsString;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Value;

	friend bool operator==(const GcCostStat& lhs, const GcCostStat& rhs) 
	{
		return lhs.CostAsString == rhs.CostAsString &&
		lhs.Stat == rhs.Stat &&
		lhs.StatGroup == rhs.StatGroup &&
		lhs.Value == rhs.Value;
	}
};

struct GcMovementDirection
{
	enum class MovementDirectionEnum : uint32_t
	{
		WorldRelative = 0,
		BodyRelative = 1,
		HeadRelative = 2,
		NotSet = 3,
	};

	NMS_GameComponents::GcMovementDirection::MovementDirectionEnum MovementDirection;

	friend bool operator==(const GcMovementDirection& lhs, const GcMovementDirection& rhs) 
	{
		return lhs.MovementDirection == rhs.MovementDirection;
	}
};

//Dependency: GcMissionConditionTest
struct GcMissionConditionGroup
{
	std::vector<NMSTemplate> Conditions;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	bool OnlyUsedForTextFormatting;
	bool ValueToReturnForTextFormatting;

	friend bool operator==(const GcMissionConditionGroup& lhs, const GcMissionConditionGroup& rhs) 
	{
		return lhs.Conditions == rhs.Conditions &&
		lhs.ConditionTest == rhs.ConditionTest &&
		lhs.OnlyUsedForTextFormatting == rhs.OnlyUsedForTextFormatting &&
		lhs.ValueToReturnForTextFormatting == rhs.ValueToReturnForTextFormatting;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostStatCompare
{
	NMS::NMSString0x20A CostStringCanAfford;
	NMS::NMSString0x20A CostStringCantAfford;
	NMS::NMSString0x10 CanAffordIfMissionActive;
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;

	friend bool operator==(const GcCostStatCompare& lhs, const GcCostStatCompare& rhs) 
	{
		return lhs.CostStringCanAfford == rhs.CostStringCanAfford &&
		lhs.CostStringCantAfford == rhs.CostStringCantAfford &&
		lhs.CanAffordIfMissionActive == rhs.CanAffordIfMissionActive &&
		lhs.CompareAndSetStat == rhs.CompareAndSetStat &&
		lhs.CoreStat == rhs.CoreStat;
	}
};

struct GcWaterEmissionData
{
	float FoamEmissionSelectionWeights[4];
	float WaterEmissionSelectionWeights[4];
	bool OverrideDefault;

	friend bool operator==(const GcWaterEmissionData& lhs, const GcWaterEmissionData& rhs) 
	{
		return std::equal(std::begin(lhs.FoamEmissionSelectionWeights), std::end(lhs.FoamEmissionSelectionWeights), std::begin(rhs.FoamEmissionSelectionWeights)) &&
		std::equal(std::begin(lhs.WaterEmissionSelectionWeights), std::end(lhs.WaterEmissionSelectionWeights), std::begin(rhs.WaterEmissionSelectionWeights)) &&
		lhs.OverrideDefault == rhs.OverrideDefault;
	}
};

//Dependency: GcWaterEmissionData
struct GcWaterEmissionBiomeData
{
	NMS_GameComponents::GcWaterEmissionData SubBiomeOverrides[32];

	friend bool operator==(const GcWaterEmissionBiomeData& lhs, const GcWaterEmissionBiomeData& rhs) 
	{
		return std::equal(std::begin(lhs.SubBiomeOverrides), std::end(lhs.SubBiomeOverrides), std::begin(rhs.SubBiomeOverrides));
	}
};

//Dependency: NMSString0x10
struct GcCustomSpaceStormComponentData
{
	NMS::NMSString0x10 StormId;

	friend bool operator==(const GcCustomSpaceStormComponentData& lhs, const GcCustomSpaceStormComponentData& rhs) 
	{
		return lhs.StormId == rhs.StormId;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcGroundWormComponentData
{
	NMS::NMSString0x10 AttackDamageType;
	NMS::NMSString0x10 EmergeEffect;
	NMS::NMSString0x10 EmergeShake;
	NMS::NMSString0x10 RoarShake;
	NMS::NMSString0x10 SpitProjectile;
	NMS::NMSString0x10 SubmergeEffect;
	float AttackAngle;
	float AttackCooldown;
	float AttackDamageRadius;
	float AttackDistMax;
	float AttackDistMin;
	float CollisionBodySize;
	float EmergeDist;
	float EmergeEffectTime;
	float EmergeLookBlendEnd;
	float EmergeLookBlendStart;
	float EmergeTime;
	float FlinchAngleMax;
	float FlinchAngleMin;
	float FlinchSmooth;
	float FlinchTime;
	float LungeAngleBase;
	float LungeAngleHead;
	float LungeBeginTime;
	float LungeBlendInSpeed;
	float LungeBlendOutSpeed;
	float LungeEndTime;
	float LungeStrength;
	float RearUpBeginDist;
	float RearUpEndDist;
	float RestTime;
	float RoarCooldown;
	float RumbleTime;
	float SpitCooldown;
	int32_t SpitCount;
	float SubmergeDepth;
	float SubmergeDist;
	float TrackTime;
	float TurnSpeed;
	float WindUpAngleBase;
	float WindUpAngleHead;
	float WindUpStrength;
	NMS::NMSString0x100 GrabJoint;
	NMS::NMSString0x100 LookJoint;

	friend bool operator==(const GcGroundWormComponentData& lhs, const GcGroundWormComponentData& rhs) 
	{
		return lhs.AttackDamageType == rhs.AttackDamageType &&
		lhs.EmergeEffect == rhs.EmergeEffect &&
		lhs.EmergeShake == rhs.EmergeShake &&
		lhs.RoarShake == rhs.RoarShake &&
		lhs.SpitProjectile == rhs.SpitProjectile &&
		lhs.SubmergeEffect == rhs.SubmergeEffect &&
		lhs.AttackAngle == rhs.AttackAngle &&
		lhs.AttackCooldown == rhs.AttackCooldown &&
		lhs.AttackDamageRadius == rhs.AttackDamageRadius &&
		lhs.AttackDistMax == rhs.AttackDistMax &&
		lhs.AttackDistMin == rhs.AttackDistMin &&
		lhs.CollisionBodySize == rhs.CollisionBodySize &&
		lhs.EmergeDist == rhs.EmergeDist &&
		lhs.EmergeEffectTime == rhs.EmergeEffectTime &&
		lhs.EmergeLookBlendEnd == rhs.EmergeLookBlendEnd &&
		lhs.EmergeLookBlendStart == rhs.EmergeLookBlendStart &&
		lhs.EmergeTime == rhs.EmergeTime &&
		lhs.FlinchAngleMax == rhs.FlinchAngleMax &&
		lhs.FlinchAngleMin == rhs.FlinchAngleMin &&
		lhs.FlinchSmooth == rhs.FlinchSmooth &&
		lhs.FlinchTime == rhs.FlinchTime &&
		lhs.LungeAngleBase == rhs.LungeAngleBase &&
		lhs.LungeAngleHead == rhs.LungeAngleHead &&
		lhs.LungeBeginTime == rhs.LungeBeginTime &&
		lhs.LungeBlendInSpeed == rhs.LungeBlendInSpeed &&
		lhs.LungeBlendOutSpeed == rhs.LungeBlendOutSpeed &&
		lhs.LungeEndTime == rhs.LungeEndTime &&
		lhs.LungeStrength == rhs.LungeStrength &&
		lhs.RearUpBeginDist == rhs.RearUpBeginDist &&
		lhs.RearUpEndDist == rhs.RearUpEndDist &&
		lhs.RestTime == rhs.RestTime &&
		lhs.RoarCooldown == rhs.RoarCooldown &&
		lhs.RumbleTime == rhs.RumbleTime &&
		lhs.SpitCooldown == rhs.SpitCooldown &&
		lhs.SpitCount == rhs.SpitCount &&
		lhs.SubmergeDepth == rhs.SubmergeDepth &&
		lhs.SubmergeDist == rhs.SubmergeDist &&
		lhs.TrackTime == rhs.TrackTime &&
		lhs.TurnSpeed == rhs.TurnSpeed &&
		lhs.WindUpAngleBase == rhs.WindUpAngleBase &&
		lhs.WindUpAngleHead == rhs.WindUpAngleHead &&
		lhs.WindUpStrength == rhs.WindUpStrength &&
		lhs.GrabJoint == rhs.GrabJoint &&
		lhs.LookJoint == rhs.LookJoint;
	}
};

//Dependency: GcAlienRace
struct GcCostWordKnowledge
{
	enum class RequirementEnum : uint32_t
	{
		CanLearn = 0,
		CanSpeak = 1,
	};

	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcCostWordKnowledge::RequirementEnum Requirement;

	friend bool operator==(const GcCostWordKnowledge& lhs, const GcCostWordKnowledge& rhs) 
	{
		return lhs.Race == rhs.Race &&
		lhs.Requirement == rhs.Requirement;
	}
};

struct GcFontTypesEnum
{
	enum class FontEnum : uint32_t
	{
		Impact = 0,
		Bebas = 1,
		GeosansLightWide = 2,
		GeosansLight = 3,
		GeosansLightMedium = 4,
		GeosansLightSmall = 5,
		Segoeuib = 6,
		Segoeui32 = 7,
	};

	NMS_GameComponents::GcFontTypesEnum::FontEnum Font;

	friend bool operator==(const GcFontTypesEnum& lhs, const GcFontTypesEnum& rhs) 
	{
		return lhs.Font == rhs.Font;
	}
};

//Dependency: NMSString0x80
struct GcTexturePrefetchData
{
	std::vector<NMS::NMSString0x80> Textures;

	friend bool operator==(const GcTexturePrefetchData& lhs, const GcTexturePrefetchData& rhs) 
	{
		return lhs.Textures == rhs.Textures;
	}
};

//Dependency: NMSString0x10
struct GcRewardSystemSpecificProductFromList
{
	std::vector<NMS::NMSString0x10> ProductList;
	int32_t AmountMax;
	int32_t AmountMin;
	bool ForceSpecialMessage;

	friend bool operator==(const GcRewardSystemSpecificProductFromList& lhs, const GcRewardSystemSpecificProductFromList& rhs) 
	{
		return lhs.ProductList == rhs.ProductList &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ForceSpecialMessage == rhs.ForceSpecialMessage;
	}
};

struct GcMissionConditionWaterPlanet
{

	friend bool operator==(const GcMissionConditionWaterPlanet& lhs, const GcMissionConditionWaterPlanet& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcCreatureBaitComponentData
{
	std::vector<NMS::NMSString0x10> AttractList;
	float BaitRadius;
	float BaitStrength;
	bool Debug;
	bool InducesRage;

	friend bool operator==(const GcCreatureBaitComponentData& lhs, const GcCreatureBaitComponentData& rhs) 
	{
		return lhs.AttractList == rhs.AttractList &&
		lhs.BaitRadius == rhs.BaitRadius &&
		lhs.BaitStrength == rhs.BaitStrength &&
		lhs.Debug == rhs.Debug &&
		lhs.InducesRage == rhs.InducesRage;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureEffectTrigger
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Effect;
	std::vector<NMS::NMSString0x100> JointName;
	int32_t Frame;
	float Scale;
	bool GroundTint;

	friend bool operator==(const GcCreatureEffectTrigger& lhs, const GcCreatureEffectTrigger& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Effect == rhs.Effect &&
		lhs.JointName == rhs.JointName &&
		lhs.Frame == rhs.Frame &&
		lhs.Scale == rhs.Scale &&
		lhs.GroundTint == rhs.GroundTint;
	}
};

//Dependency: GcAlienMood
//Dependency: NMSString0x10
struct GcNPCInteractiveObjectStateTransition
{
	enum class RequireModeEnum : uint32_t
	{
		Seated = 0,
		Standing = 1,
		None = 2,
	};

	std::vector<NMS::NMSString0x10> ExcludeTags;
	std::vector<NMS_GameComponents::GcAlienMood> ForceIfMood;
	NMS::NMSString0x10 NewState;
	NMS::NMSString0x10 RequireEvent;
	NMS::NMSString0x10 RequireLocator;
	float Probability;
	NMS_GameComponents::GcNPCInteractiveObjectStateTransition::RequireModeEnum RequireMode;

	friend bool operator==(const GcNPCInteractiveObjectStateTransition& lhs, const GcNPCInteractiveObjectStateTransition& rhs) 
	{
		return lhs.ExcludeTags == rhs.ExcludeTags &&
		lhs.ForceIfMood == rhs.ForceIfMood &&
		lhs.NewState == rhs.NewState &&
		lhs.RequireEvent == rhs.RequireEvent &&
		lhs.RequireLocator == rhs.RequireLocator &&
		lhs.Probability == rhs.Probability &&
		lhs.RequireMode == rhs.RequireMode;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkJointBindingData
{
	float InvBindMatrix[16];
	float BindRotate[4];
	float BindScale[3];
	float BindTranslate[3];

	friend bool operator==(const TkJointBindingData& lhs, const TkJointBindingData& rhs) 
	{
		return std::equal(std::begin(lhs.InvBindMatrix), std::end(lhs.InvBindMatrix), std::begin(rhs.InvBindMatrix)) &&
		std::equal(std::begin(lhs.BindRotate), std::end(lhs.BindRotate), std::begin(rhs.BindRotate)) &&
		std::equal(std::begin(lhs.BindScale), std::end(lhs.BindScale), std::begin(rhs.BindScale)) &&
		std::equal(std::begin(lhs.BindTranslate), std::end(lhs.BindTranslate), std::begin(rhs.BindTranslate));
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceStartPartyEventForStage
{
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceStartPartyEventForStage& lhs, const GcMissionSequenceStartPartyEventForStage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText;
	}
};

//Dependency: GcCreaturePetAccessory
struct GcCreaturePetData
{
	std::vector<NMS_GameComponents::GcCreaturePetAccessory> AccessorySlots;

	friend bool operator==(const GcCreaturePetData& lhs, const GcCreaturePetData& rhs) 
	{
		return lhs.AccessorySlots == rhs.AccessorySlots;
	}
};

struct GcStyleProp_Size
{
	float FontSize;

	friend bool operator==(const GcStyleProp_Size& lhs, const GcStyleProp_Size& rhs) 
	{
		return lhs.FontSize == rhs.FontSize;
	}
};

struct GcMissionConditionAllSystemPlanetsDiscovered
{
	int32_t DisplayNumberOffset;

	friend bool operator==(const GcMissionConditionAllSystemPlanetsDiscovered& lhs, const GcMissionConditionAllSystemPlanetsDiscovered& rhs) 
	{
		return lhs.DisplayNumberOffset == rhs.DisplayNumberOffset;
	}
};

struct GcSettlementJudgementType
{
	enum class SettlementJudgementTypeEnum : uint32_t
	{
		None = 0,
		StrangerVisit = 1,
		Policy = 2,
		NewBuilding = 3,
		BuildingChoice = 4,
		Conflict = 5,
		Request = 6,
		BlessingPerkRelated = 7,
		JobPerkRelated = 8,
		ProcPerkRelated = 9,
		UpgradeBuilding = 10,
		UpgradeBuildingChoice = 11,
	};

	NMS_GameComponents::GcSettlementJudgementType::SettlementJudgementTypeEnum SettlementJudgementType;

	friend bool operator==(const GcSettlementJudgementType& lhs, const GcSettlementJudgementType& rhs) 
	{
		return lhs.SettlementJudgementType == rhs.SettlementJudgementType;
	}
};

//Dependency: GcSettlementJudgementType
struct GcRewardSettlementJudgement
{
	std::vector<NMS_GameComponents::GcSettlementJudgementType> JudgementTypes;
	bool Silent;

	friend bool operator==(const GcRewardSettlementJudgement& lhs, const GcRewardSettlementJudgement& rhs) 
	{
		return lhs.JudgementTypes == rhs.JudgementTypes &&
		lhs.Silent == rhs.Silent;
	}
};

struct GcCreatureRarity
{
	enum class CreatureRarityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
		SuperRare = 3,
	};

	NMS_GameComponents::GcCreatureRarity::CreatureRarityEnum CreatureRarity;

	friend bool operator==(const GcCreatureRarity& lhs, const GcCreatureRarity& rhs) 
	{
		return lhs.CreatureRarity == rhs.CreatureRarity;
	}
};

//Dependency: GcCreatureRarity
//Dependency: NMSString0x10
struct GcCreatureTagAndRarity
{
	NMS::NMSString0x10 Tag;
	NMS_GameComponents::GcCreatureRarity RarityOverride;

	friend bool operator==(const GcCreatureTagAndRarity& lhs, const GcCreatureTagAndRarity& rhs) 
	{
		return lhs.Tag == rhs.Tag &&
		lhs.RarityOverride == rhs.RarityOverride;
	}
};

struct GcCreatureRoleFrequencyModifier
{
	enum class CreatureRoleFrequencyModifierEnum : uint32_t
	{
		Never = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcCreatureRoleFrequencyModifier::CreatureRoleFrequencyModifierEnum CreatureRoleFrequencyModifier;

	friend bool operator==(const GcCreatureRoleFrequencyModifier& lhs, const GcCreatureRoleFrequencyModifier& rhs) 
	{
		return lhs.CreatureRoleFrequencyModifier == rhs.CreatureRoleFrequencyModifier;
	}
};

//Dependency: GcCreatureTagAndRarity
//Dependency: GcCreatureTypes
//Dependency: GcCreatureRoleFrequencyModifier
//Dependency: GcCreatureRarity
//Dependency: NMSString0x10
struct GcCreatureData
{
	enum class MoveAreaEnum : uint32_t
	{
		Ground = 0,
		Water = 1,
		Air = 2,
		Space = 3,
	};

	std::vector<NMSTemplate> Data;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 KillingBlowMessageID;
	NMS::NMSString0x10 KillStatID;
	std::vector<NMS_GameComponents::GcCreatureTagAndRarity> Tags;
	NMS_GameComponents::GcCreatureTypes ForceType;
	float FurChance;
	float FurLengthModifierAtMaxScale;
	float FurLengthModifierAtMinScale;
	NMS_GameComponents::GcCreatureRoleFrequencyModifier HerbivoreProbabilityModifier;
	float MaxScale;
	float MinScale;
	NMS_GameComponents::GcCreatureData::MoveAreaEnum MoveArea;
	NMS_GameComponents::GcCreatureRoleFrequencyModifier PredatorProbabilityModifier;
	NMS_GameComponents::GcCreatureRarity Rarity;
	NMS_GameComponents::GcCreatureTypes RealType;
	bool CanBeFemale;
	bool EcoSystemCreature;
	bool OnlySpawnWhenIdIsForced;

	friend bool operator==(const GcCreatureData& lhs, const GcCreatureData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.Id == rhs.Id &&
		lhs.KillingBlowMessageID == rhs.KillingBlowMessageID &&
		lhs.KillStatID == rhs.KillStatID &&
		lhs.Tags == rhs.Tags &&
		lhs.ForceType == rhs.ForceType &&
		lhs.FurChance == rhs.FurChance &&
		lhs.FurLengthModifierAtMaxScale == rhs.FurLengthModifierAtMaxScale &&
		lhs.FurLengthModifierAtMinScale == rhs.FurLengthModifierAtMinScale &&
		lhs.HerbivoreProbabilityModifier == rhs.HerbivoreProbabilityModifier &&
		lhs.MaxScale == rhs.MaxScale &&
		lhs.MinScale == rhs.MinScale &&
		lhs.MoveArea == rhs.MoveArea &&
		lhs.PredatorProbabilityModifier == rhs.PredatorProbabilityModifier &&
		lhs.Rarity == rhs.Rarity &&
		lhs.RealType == rhs.RealType &&
		lhs.CanBeFemale == rhs.CanBeFemale &&
		lhs.EcoSystemCreature == rhs.EcoSystemCreature &&
		lhs.OnlySpawnWhenIdIsForced == rhs.OnlySpawnWhenIdIsForced;
	}
};

struct GcInventoryValueData
{
	float BaseCostPerSlot;
	float BaseMaxValue;
	float BaseMinValue;
	float ExponentialValue;
	float SlotExponentialValue;
	float SlotsPerLevel;
	float ValueToCost;

	friend bool operator==(const GcInventoryValueData& lhs, const GcInventoryValueData& rhs) 
	{
		return lhs.BaseCostPerSlot == rhs.BaseCostPerSlot &&
		lhs.BaseMaxValue == rhs.BaseMaxValue &&
		lhs.BaseMinValue == rhs.BaseMinValue &&
		lhs.ExponentialValue == rhs.ExponentialValue &&
		lhs.SlotExponentialValue == rhs.SlotExponentialValue &&
		lhs.SlotsPerLevel == rhs.SlotsPerLevel &&
		lhs.ValueToCost == rhs.ValueToCost;
	}
};

//Dependency: GcItemFilterDataTableEntry
struct GcItemFilterDataTable
{
	std::vector<NMS_GameComponents::GcItemFilterDataTableEntry> Filters;

	friend bool operator==(const GcItemFilterDataTable& lhs, const GcItemFilterDataTable& rhs) 
	{
		return lhs.Filters == rhs.Filters;
	}
};

//Dependency: NMSString0x10
struct GcCreatureMoveAnimData
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 AnimLeft;
	NMS::NMSString0x10 AnimRight;
	float AnimMoveSpeed;
	float AnimSpeed;
	float MaxPetSpeedScale;
	float MaxPredatorSpeedScale;
	float MaxSpeedScale;
	float MinPetSpeedScale;
	float MinSpeedScale;
	bool AnimMoveSpeedCached;

	friend bool operator==(const GcCreatureMoveAnimData& lhs, const GcCreatureMoveAnimData& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.AnimLeft == rhs.AnimLeft &&
		lhs.AnimRight == rhs.AnimRight &&
		lhs.AnimMoveSpeed == rhs.AnimMoveSpeed &&
		lhs.AnimSpeed == rhs.AnimSpeed &&
		lhs.MaxPetSpeedScale == rhs.MaxPetSpeedScale &&
		lhs.MaxPredatorSpeedScale == rhs.MaxPredatorSpeedScale &&
		lhs.MaxSpeedScale == rhs.MaxSpeedScale &&
		lhs.MinPetSpeedScale == rhs.MinPetSpeedScale &&
		lhs.MinSpeedScale == rhs.MinSpeedScale &&
		lhs.AnimMoveSpeedCached == rhs.AnimMoveSpeedCached;
	}
};

//Dependency: GcCreatureData
struct GcCreatureDataTable
{
	std::vector<NMS_GameComponents::GcCreatureData> Table;

	friend bool operator==(const GcCreatureDataTable& lhs, const GcCreatureDataTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStatMilestone
{
	enum class MilestoneEnum : uint32_t
	{
		Bronze = 0,
		Silver = 1,
		Gold = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcMissionSequenceWaitForStatMilestone::MilestoneEnum Milestone;
	bool EveryMilestone;

	friend bool operator==(const GcMissionSequenceWaitForStatMilestone& lhs, const GcMissionSequenceWaitForStatMilestone& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Stat == rhs.Stat &&
		lhs.Milestone == rhs.Milestone &&
		lhs.EveryMilestone == rhs.EveryMilestone;
	}
};

//Dependency: NMSString0x10
struct GcNPCPlacementComponentData
{
	std::vector<NMS::NMSString0x10> PlacementInfosToApply;
	bool PlaceInAbandonedSystems;
	bool SearchPlacementFromMaster;
	bool WaitToPlace;

	friend bool operator==(const GcNPCPlacementComponentData& lhs, const GcNPCPlacementComponentData& rhs) 
	{
		return lhs.PlacementInfosToApply == rhs.PlacementInfosToApply &&
		lhs.PlaceInAbandonedSystems == rhs.PlaceInAbandonedSystems &&
		lhs.SearchPlacementFromMaster == rhs.SearchPlacementFromMaster &&
		lhs.WaitToPlace == rhs.WaitToPlace;
	}
};

struct GcMissionConditionWristMenuOpen
{
	bool GunHandOnly;
	bool InventoryOnly;
	bool LeftHandOnly;
	bool QuickMenuOnly;

	friend bool operator==(const GcMissionConditionWristMenuOpen& lhs, const GcMissionConditionWristMenuOpen& rhs) 
	{
		return lhs.GunHandOnly == rhs.GunHandOnly &&
		lhs.InventoryOnly == rhs.InventoryOnly &&
		lhs.LeftHandOnly == rhs.LeftHandOnly &&
		lhs.QuickMenuOnly == rhs.QuickMenuOnly;
	}
};

//Dependency: NMSString0x10
struct GcCreatureSubstanceList
{
	NMS::NMSString0x10 CreatureType;
	NMS::NMSString0x10 Item;

	friend bool operator==(const GcCreatureSubstanceList& lhs, const GcCreatureSubstanceList& rhs) 
	{
		return lhs.CreatureType == rhs.CreatureType &&
		lhs.Item == rhs.Item;
	}
};

//Dependency: GcSentinelTypes
//Dependency: NMSString0x10
struct GcSentinelRobotComponentData
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcSentinelTypes Type;

	friend bool operator==(const GcSentinelRobotComponentData& lhs, const GcSentinelRobotComponentData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcLootComponentData
{
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 TimeOutEffect;
	NMS::Vector2f Timed;
	float FlashPercent;
	int32_t NumFlashes;
	bool DeathPoint;
	bool KeepUpright;
	bool PhysicsControlled;

	friend bool operator==(const GcLootComponentData& lhs, const GcLootComponentData& rhs) 
	{
		return lhs.Reward == rhs.Reward &&
		lhs.TimeOutEffect == rhs.TimeOutEffect &&
		lhs.Timed == rhs.Timed &&
		lhs.FlashPercent == rhs.FlashPercent &&
		lhs.NumFlashes == rhs.NumFlashes &&
		lhs.DeathPoint == rhs.DeathPoint &&
		lhs.KeepUpright == rhs.KeepUpright &&
		lhs.PhysicsControlled == rhs.PhysicsControlled;
	}
};

//Dependency: GcBuildingPartSearchType
//Dependency: NMSString0x10
struct GcMissionConditionBasePartBuilt
{
	enum class PartInCurrentBaseEnum : uint32_t
	{
		DontCare = 0,
		YesAllPlayerOwned = 1,
	};

	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::NMSString0x10 PartID;
	int32_t Count;
	NMS_GameComponents::GcMissionConditionBasePartBuilt::PartInCurrentBaseEnum PartInCurrentBase;
	bool TakeIDFromSeasonData;

	friend bool operator==(const GcMissionConditionBasePartBuilt& lhs, const GcMissionConditionBasePartBuilt& rhs) 
	{
		return lhs.Type == rhs.Type &&
		lhs.PartID == rhs.PartID &&
		lhs.Count == rhs.Count &&
		lhs.PartInCurrentBase == rhs.PartInCurrentBase &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData;
	}
};

//Dependency: GcCreatureEffectTrigger
struct GcCreatureEffectComponentData
{
	std::vector<NMS_GameComponents::GcCreatureEffectTrigger> AnimTriggers;

	friend bool operator==(const GcCreatureEffectComponentData& lhs, const GcCreatureEffectComponentData& rhs) 
	{
		return lhs.AnimTriggers == rhs.AnimTriggers;
	}
};

struct GcCreatureEffectTriggerRequirementCreatureSize
{
	float MaxCreatureSize;
	float MinCreatureSize;

	friend bool operator==(const GcCreatureEffectTriggerRequirementCreatureSize& lhs, const GcCreatureEffectTriggerRequirementCreatureSize& rhs) 
	{
		return lhs.MaxCreatureSize == rhs.MaxCreatureSize &&
		lhs.MinCreatureSize == rhs.MinCreatureSize;
	}
};

//Dependency: NMSString0x20A
struct GcRewardSettlementParty
{
	NMS::NMSString0x20A OSD;
	float FireworksDuration;
	float FireworksFrequency;

	friend bool operator==(const GcRewardSettlementParty& lhs, const GcRewardSettlementParty& rhs) 
	{
		return lhs.OSD == rhs.OSD &&
		lhs.FireworksDuration == rhs.FireworksDuration &&
		lhs.FireworksFrequency == rhs.FireworksFrequency;
	}
};

//Dependency: GcCreatureFilename
struct GcCreatureFilenameTable
{
	std::vector<NMS_GameComponents::GcCreatureFilename> Table;

	friend bool operator==(const GcCreatureFilenameTable& lhs, const GcCreatureFilenameTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcNPCProbabilityAnimationData
{
	enum class AnimationIntensityEnum : uint32_t
	{
		Low = 0,
		Medium = 1,
		High = 2,
		None = 3,
	};

	std::vector<NMS_GameComponents::GcAlienRace> ExcludeRace;
	NMS::NMSString0x10 Name;
	std::vector<NMS::NMSString0x10> Tags;
	NMS_GameComponents::GcNPCProbabilityAnimationData::AnimationIntensityEnum AnimationIntensity;
	float Probability;

	friend bool operator==(const GcNPCProbabilityAnimationData& lhs, const GcNPCProbabilityAnimationData& rhs) 
	{
		return lhs.ExcludeRace == rhs.ExcludeRace &&
		lhs.Name == rhs.Name &&
		lhs.Tags == rhs.Tags &&
		lhs.AnimationIntensity == rhs.AnimationIntensity &&
		lhs.Probability == rhs.Probability;
	}
};

struct GcNPCSeatedPosture
{
	enum class NPCSeatedPostureEnum : uint32_t
	{
		Sofa = 0,
		Sit = 1,
	};

	NMS_GameComponents::GcNPCSeatedPosture::NPCSeatedPostureEnum NPCSeatedPosture;

	friend bool operator==(const GcNPCSeatedPosture& lhs, const GcNPCSeatedPosture& rhs) 
	{
		return lhs.NPCSeatedPosture == rhs.NPCSeatedPosture;
	}
};

//Dependency: GcNPCProbabilityAnimationData
//Dependency: NMSString0x10
//Dependency: GcNPCInteractiveObjectStateTransition
//Dependency: GcNPCPropType
//Dependency: GcNPCSeatedPosture
//Dependency: NMSString0x40
struct GcNPCInteractiveObjectState
{
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> Animations;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcNPCInteractiveObjectStateTransition> Transitions;
	float BlendTime;
	float EarlyOutTime;
	int32_t MaxAnims;
	float MaxTime;
	int32_t MinAnims;
	float MinTime;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcNPCSeatedPosture SeatedPosture;
	float SpineAdjustAmount;
	NMS::NMSString0x40 LookAtNode;
	bool CanConverse;
	bool FaceInvNodeDir;
	bool FaceLookAt;
	bool FaceNodeDir;
	bool FaceSpawnDir;
	bool LookAtModel;
	bool MaintainLookAt;
	bool PlayIdles;

	friend bool operator==(const GcNPCInteractiveObjectState& lhs, const GcNPCInteractiveObjectState& rhs) 
	{
		return lhs.Animations == rhs.Animations &&
		lhs.Name == rhs.Name &&
		lhs.Transitions == rhs.Transitions &&
		lhs.BlendTime == rhs.BlendTime &&
		lhs.EarlyOutTime == rhs.EarlyOutTime &&
		lhs.MaxAnims == rhs.MaxAnims &&
		lhs.MaxTime == rhs.MaxTime &&
		lhs.MinAnims == rhs.MinAnims &&
		lhs.MinTime == rhs.MinTime &&
		lhs.Prop == rhs.Prop &&
		lhs.SeatedPosture == rhs.SeatedPosture &&
		lhs.SpineAdjustAmount == rhs.SpineAdjustAmount &&
		lhs.LookAtNode == rhs.LookAtNode &&
		lhs.CanConverse == rhs.CanConverse &&
		lhs.FaceInvNodeDir == rhs.FaceInvNodeDir &&
		lhs.FaceLookAt == rhs.FaceLookAt &&
		lhs.FaceNodeDir == rhs.FaceNodeDir &&
		lhs.FaceSpawnDir == rhs.FaceSpawnDir &&
		lhs.LookAtModel == rhs.LookAtModel &&
		lhs.MaintainLookAt == rhs.MaintainLookAt &&
		lhs.PlayIdles == rhs.PlayIdles;
	}
};

//Dependency: GcNPCInteractiveObjectState
//Dependency: GcNPCInteractiveObjectType
struct GcNPCInteractiveObjectComponentData
{
	std::vector<NMS_GameComponents::GcNPCInteractiveObjectState> States;
	float DurationMax;
	float DurationMin;
	NMS_GameComponents::GcNPCInteractiveObjectType InteractiveObjectType;
	int32_t MaxCapacity;

	friend bool operator==(const GcNPCInteractiveObjectComponentData& lhs, const GcNPCInteractiveObjectComponentData& rhs) 
	{
		return lhs.States == rhs.States &&
		lhs.DurationMax == rhs.DurationMax &&
		lhs.DurationMin == rhs.DurationMin &&
		lhs.InteractiveObjectType == rhs.InteractiveObjectType &&
		lhs.MaxCapacity == rhs.MaxCapacity;
	}
};

//Dependency: GcCreatureFootParticleSingleData
struct GcCreatureFootParticleData
{
	std::vector<NMS_GameComponents::GcCreatureFootParticleSingleData> ParticleData;

	friend bool operator==(const GcCreatureFootParticleData& lhs, const GcCreatureFootParticleData& rhs) 
	{
		return lhs.ParticleData == rhs.ParticleData;
	}
};

struct GcMissionConsequenceSetMissionStat
{
	int32_t ValueToAdd;
	int32_t ValueToSet;

	friend bool operator==(const GcMissionConsequenceSetMissionStat& lhs, const GcMissionConsequenceSetMissionStat& rhs) 
	{
		return lhs.ValueToAdd == rhs.ValueToAdd &&
		lhs.ValueToSet == rhs.ValueToSet;
	}
};

//Dependency: GcCreatureGenerationDomainTable
struct GcCreatureGenerationArchetypes
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> AirArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> CaveArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> GroundArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> WaterArchetypes;

	friend bool operator==(const GcCreatureGenerationArchetypes& lhs, const GcCreatureGenerationArchetypes& rhs) 
	{
		return lhs.AirArchetypes == rhs.AirArchetypes &&
		lhs.CaveArchetypes == rhs.CaveArchetypes &&
		lhs.GroundArchetypes == rhs.GroundArchetypes &&
		lhs.WaterArchetypes == rhs.WaterArchetypes;
	}
};

//Dependency: GcCreatureGenerationWeightedListDomainEntry
struct GcCreatureGenerationWeightedList
{
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Air;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Cave;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Ground;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Water;

	friend bool operator==(const GcCreatureGenerationWeightedList& lhs, const GcCreatureGenerationWeightedList& rhs) 
	{
		return lhs.Air == rhs.Air &&
		lhs.Cave == rhs.Cave &&
		lhs.Ground == rhs.Ground &&
		lhs.Water == rhs.Water;
	}
};

//Dependency: GcCreatureGenerationWeightedList
struct GcCreatureGenerationOptionalWeightedList
{
	NMS_GameComponents::GcCreatureGenerationWeightedList Archetypes;
	float Probability;
	bool OverrideAllDomains;

	friend bool operator==(const GcCreatureGenerationOptionalWeightedList& lhs, const GcCreatureGenerationOptionalWeightedList& rhs) 
	{
		return lhs.Archetypes == rhs.Archetypes &&
		lhs.Probability == rhs.Probability &&
		lhs.OverrideAllDomains == rhs.OverrideAllDomains;
	}
};

//Dependency: GcCreatureGenerationOptionalWeightedList
//Dependency: GcCreatureGenerationWeightedList
//Dependency: GcCreatureGenerationWeightedListDomainEntry
struct GcCreatureGenerationData
{
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList SubBiomeSpecific[32];
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList BiomeSpecific[17];
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList AbandonedSystemSpecific;
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList EmptySystemSpecific;
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList PurpleSystemSpecific;
	NMS_GameComponents::GcCreatureGenerationWeightedList Generic;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> AirArchetypesForEmptyGround;
	float SandwormPresenceChance[17];
	float AirGroupsPerKm[4];
	float CaveGroupsPerKm[4];
	float DensityModifiers[4];
	float GroundGroupsPerKm[4];
	float LifeChance[4];
	float LifeLevelDensityModifiers[4];
	float RarityFrequencyModifiers[4];
	float RoleFrequencyModifiers[4];
	float WaterGroupsPerKm[4];
	float HerdCreaturePenalty;

	friend bool operator==(const GcCreatureGenerationData& lhs, const GcCreatureGenerationData& rhs) 
	{
		return std::equal(std::begin(lhs.SubBiomeSpecific), std::end(lhs.SubBiomeSpecific), std::begin(rhs.SubBiomeSpecific)) &&
		std::equal(std::begin(lhs.BiomeSpecific), std::end(lhs.BiomeSpecific), std::begin(rhs.BiomeSpecific)) &&
		lhs.AbandonedSystemSpecific == rhs.AbandonedSystemSpecific &&
		lhs.EmptySystemSpecific == rhs.EmptySystemSpecific &&
		lhs.PurpleSystemSpecific == rhs.PurpleSystemSpecific &&
		lhs.Generic == rhs.Generic &&
		lhs.AirArchetypesForEmptyGround == rhs.AirArchetypesForEmptyGround &&
		std::equal(std::begin(lhs.SandwormPresenceChance), std::end(lhs.SandwormPresenceChance), std::begin(rhs.SandwormPresenceChance)) &&
		std::equal(std::begin(lhs.AirGroupsPerKm), std::end(lhs.AirGroupsPerKm), std::begin(rhs.AirGroupsPerKm)) &&
		std::equal(std::begin(lhs.CaveGroupsPerKm), std::end(lhs.CaveGroupsPerKm), std::begin(rhs.CaveGroupsPerKm)) &&
		std::equal(std::begin(lhs.DensityModifiers), std::end(lhs.DensityModifiers), std::begin(rhs.DensityModifiers)) &&
		std::equal(std::begin(lhs.GroundGroupsPerKm), std::end(lhs.GroundGroupsPerKm), std::begin(rhs.GroundGroupsPerKm)) &&
		std::equal(std::begin(lhs.LifeChance), std::end(lhs.LifeChance), std::begin(rhs.LifeChance)) &&
		std::equal(std::begin(lhs.LifeLevelDensityModifiers), std::end(lhs.LifeLevelDensityModifiers), std::begin(rhs.LifeLevelDensityModifiers)) &&
		std::equal(std::begin(lhs.RarityFrequencyModifiers), std::end(lhs.RarityFrequencyModifiers), std::begin(rhs.RarityFrequencyModifiers)) &&
		std::equal(std::begin(lhs.RoleFrequencyModifiers), std::end(lhs.RoleFrequencyModifiers), std::begin(rhs.RoleFrequencyModifiers)) &&
		std::equal(std::begin(lhs.WaterGroupsPerKm), std::end(lhs.WaterGroupsPerKm), std::begin(rhs.WaterGroupsPerKm)) &&
		lhs.HerdCreaturePenalty == rhs.HerdCreaturePenalty;
	}
};

struct GcRewardRepairWholeInventory
{
	enum class InventoryToRepairEnum : uint32_t
	{
		Personal = 0,
		PersonalTech = 1,
		Ship = 2,
		ShipTech = 3,
		Freighter = 4,
		Vehicle = 5,
		AttachedAbandonedShip = 6,
		Weapon = 7,
	};

	NMS_GameComponents::GcRewardRepairWholeInventory::InventoryToRepairEnum InventoryToRepair;

	friend bool operator==(const GcRewardRepairWholeInventory& lhs, const GcRewardRepairWholeInventory& rhs) 
	{
		return lhs.InventoryToRepair == rhs.InventoryToRepair;
	}
};

//Dependency: Vector3f
struct GcSquadronHologramComponentData
{
	NMS::Vector3f SpawnOffset;
	float HologramRotationSpeedDegPerSec;
	float PilotScale;
	float SpawnRotation;

	friend bool operator==(const GcSquadronHologramComponentData& lhs, const GcSquadronHologramComponentData& rhs) 
	{
		return lhs.SpawnOffset == rhs.SpawnOffset &&
		lhs.HologramRotationSpeedDegPerSec == rhs.HologramRotationSpeedDegPerSec &&
		lhs.PilotScale == rhs.PilotScale &&
		lhs.SpawnRotation == rhs.SpawnRotation;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCoordinateOrientation
{
	enum class CoordinateOrientationEnum : uint32_t
	{
		None = 0,
		Random = 1,
	};

	NMS_Toolkit::TkCoordinateOrientation::CoordinateOrientationEnum CoordinateOrientation;

	friend bool operator==(const TkCoordinateOrientation& lhs, const TkCoordinateOrientation& rhs) 
	{
		return lhs.CoordinateOrientation == rhs.CoordinateOrientation;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcLodAction
{
	int32_t LodOverride;

	friend bool operator==(const GcLodAction& lhs, const GcLodAction& rhs) 
	{
		return lhs.LodOverride == rhs.LodOverride;
	}
};

struct GcMissionConditionExpeditionProgress
{

	friend bool operator==(const GcMissionConditionExpeditionProgress& lhs, const GcMissionConditionExpeditionProgress& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionFirstPurpleSystemValid
{
	bool CheckDistance;

	friend bool operator==(const GcMissionConditionFirstPurpleSystemValid& lhs, const GcMissionConditionFirstPurpleSystemValid& rhs) 
	{
		return lhs.CheckDistance == rhs.CheckDistance;
	}
};

struct GcItemFilterStageDataStageGroup
{
	enum class FilterStageGroupOperatorEnum : uint32_t
	{
		AND = 0,
		OR = 1,
	};

	std::vector<NMSTemplate> Children;
	NMS_GameComponents::GcItemFilterStageDataStageGroup::FilterStageGroupOperatorEnum FilterStageGroupOperator;

	friend bool operator==(const GcItemFilterStageDataStageGroup& lhs, const GcItemFilterStageDataStageGroup& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.FilterStageGroupOperator == rhs.FilterStageGroupOperator;
	}
};

struct GcMissionConditionWaitForTime
{
	uint64_t WaitTimeInSeconds;
	bool ThisConditionWillSetMissionUserDataIsThatOk;

	friend bool operator==(const GcMissionConditionWaitForTime& lhs, const GcMissionConditionWaitForTime& rhs) 
	{
		return lhs.WaitTimeInSeconds == rhs.WaitTimeInSeconds &&
		lhs.ThisConditionWillSetMissionUserDataIsThatOk == rhs.ThisConditionWillSetMissionUserDataIsThatOk;
	}
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionCombinedStatLevel
{
	std::vector<NMS::NMSString0x10> Stats;
	int32_t Amount;
	int32_t Modulo;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionCombinedStatLevel& lhs, const GcMissionConditionCombinedStatLevel& rhs) 
	{
		return lhs.Stats == rhs.Stats &&
		lhs.Amount == rhs.Amount &&
		lhs.Modulo == rhs.Modulo &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: NMSString0x10
struct GcCreatureGroupDescription
{
	NMS::NMSString0x10 Group;
	float GroupsPerSquareKm;
	int32_t MaxGroupSize;
	int32_t MinGroupSize;

	friend bool operator==(const GcCreatureGroupDescription& lhs, const GcCreatureGroupDescription& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.GroupsPerSquareKm == rhs.GroupsPerSquareKm &&
		lhs.MaxGroupSize == rhs.MaxGroupSize &&
		lhs.MinGroupSize == rhs.MinGroupSize;
	}
};

struct GcJourneyCategoryType
{
	enum class CategoryTypeEnum : uint32_t
	{
		Journey = 0,
		SeasonHistory = 1,
		Race = 2,
		Guild = 3,
	};

	NMS_GameComponents::GcJourneyCategoryType::CategoryTypeEnum CategoryType;

	friend bool operator==(const GcJourneyCategoryType& lhs, const GcJourneyCategoryType& rhs) 
	{
		return lhs.CategoryType == rhs.CategoryType;
	}
};

//Dependency: GcJourneyMedal
//Dependency: GcMissionFaction
//Dependency: NMSString0x20A
//Dependency: GcGameMode
//Dependency: GcJourneyCategoryType
//Dependency: TkTextureResource
struct GcJourneyCategory
{
	NMS::NMSString0x20A DescriptionID;
	NMS::NMSString0x20A NameIDLower;
	NMS::NMSString0x20A NameIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS_GameComponents::GcJourneyMedal> Medals;
	NMS_GameComponents::GcMissionFaction Faction;
	NMS_GameComponents::GcGameMode GameModeRestriction;
	NMS_GameComponents::GcJourneyCategoryType Type;

	friend bool operator==(const GcJourneyCategory& lhs, const GcJourneyCategory& rhs) 
	{
		return lhs.DescriptionID == rhs.DescriptionID &&
		lhs.NameIDLower == rhs.NameIDLower &&
		lhs.NameIDUpper == rhs.NameIDUpper &&
		lhs.IconOff == rhs.IconOff &&
		lhs.IconOn == rhs.IconOn &&
		lhs.Medals == rhs.Medals &&
		lhs.Faction == rhs.Faction &&
		lhs.GameModeRestriction == rhs.GameModeRestriction &&
		lhs.Type == rhs.Type;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionBoolData
{
	NMS::NMSString0x10 Parameter;
	bool CompareValue;

	friend bool operator==(const TkAnimStateMachineTransitionConditionBoolData& lhs, const TkAnimStateMachineTransitionConditionBoolData& rhs) 
	{
		return lhs.Parameter == rhs.Parameter &&
		lhs.CompareValue == rhs.CompareValue;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCreatureGroups
{
	enum class CreatureGroupEnum : uint32_t
	{
		Solo = 0,
		Couple = 1,
		Group = 2,
		Herd = 3,
	};

	NMS_GameComponents::GcCreatureGroups::CreatureGroupEnum CreatureGroup;

	friend bool operator==(const GcCreatureGroups& lhs, const GcCreatureGroups& rhs) 
	{
		return lhs.CreatureGroup == rhs.CreatureGroup;
	}
};

//Dependency: GcBiomeType
//Dependency: GcPlayerHazardType
struct GcMissionConditionSystemPlanetTest
{
	NMS_GameComponents::GcBiomeType PlanetBiomeRequirement;
	NMS_GameComponents::GcPlayerHazardType PlanetWeatherRequirement;
	bool RequiresExtremePlanet;

	friend bool operator==(const GcMissionConditionSystemPlanetTest& lhs, const GcMissionConditionSystemPlanetTest& rhs) 
	{
		return lhs.PlanetBiomeRequirement == rhs.PlanetBiomeRequirement &&
		lhs.PlanetWeatherRequirement == rhs.PlanetWeatherRequirement &&
		lhs.RequiresExtremePlanet == rhs.RequiresExtremePlanet;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationThrusterJet
{
	NMS_Toolkit::TkModelResource JetMesh;
	NMS_Toolkit::TkModelResource Trail;
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x10 LocatorPrefix;

	friend bool operator==(const GcCustomisationThrusterJet& lhs, const GcCustomisationThrusterJet& rhs) 
	{
		return lhs.JetMesh == rhs.JetMesh &&
		lhs.Trail == rhs.Trail &&
		lhs.Effect == rhs.Effect &&
		lhs.LocatorPrefix == rhs.LocatorPrefix;
	}
};

//Dependency: GcMaintenanceComponentData
struct GcCreatureHarvesterComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumSlots;

	friend bool operator==(const GcCreatureHarvesterComponentData& lhs, const GcCreatureHarvesterComponentData& rhs) 
	{
		return lhs.MaintenanceData == rhs.MaintenanceData &&
		lhs.NumSlots == rhs.NumSlots;
	}
};

//Dependency: NMSString0x10
struct GcRepShopDonation
{
	std::vector<NMS::NMSString0x10> AltIDs;
	NMS::NMSString0x10 ProductID;
	int32_t DonationValue;
	int32_t MaxDonations;
	bool ValidProcProdCategories[28];

	friend bool operator==(const GcRepShopDonation& lhs, const GcRepShopDonation& rhs) 
	{
		return lhs.AltIDs == rhs.AltIDs &&
		lhs.ProductID == rhs.ProductID &&
		lhs.DonationValue == rhs.DonationValue &&
		lhs.MaxDonations == rhs.MaxDonations &&
		std::equal(std::begin(lhs.ValidProcProdCategories), std::end(lhs.ValidProcProdCategories), std::begin(rhs.ValidProcProdCategories));
	}
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcRepShopItem
{
	std::vector<NMS::NMSString0x10> AltIDs;
	NMS::NMSString0x10 ProductID;
	int32_t AmountForSale;
	NMS_GameComponents::GcCurrency Currency;
	float PriceMul;
	int32_t RepLevelRequired;

	friend bool operator==(const GcRepShopItem& lhs, const GcRepShopItem& rhs) 
	{
		return lhs.AltIDs == rhs.AltIDs &&
		lhs.ProductID == rhs.ProductID &&
		lhs.AmountForSale == rhs.AmountForSale &&
		lhs.Currency == rhs.Currency &&
		lhs.PriceMul == rhs.PriceMul &&
		lhs.RepLevelRequired == rhs.RepLevelRequired;
	}
};

//Dependency: GcRepShopDonation
//Dependency: GcRepShopItem
struct GcRepShopData
{
	std::vector<NMS_GameComponents::GcRepShopDonation> DonatableItems;
	std::vector<NMS_GameComponents::GcRepShopItem> RepItems;

	friend bool operator==(const GcRepShopData& lhs, const GcRepShopData& rhs) 
	{
		return lhs.DonatableItems == rhs.DonatableItems &&
		lhs.RepItems == rhs.RepItems;
	}
};

//Dependency: GcCutSceneData
struct GcCutSceneComponentData
{
	NMS_GameComponents::GcCutSceneData CutSceneData;

	friend bool operator==(const GcCutSceneComponentData& lhs, const GcCutSceneComponentData& rhs) 
	{
		return lhs.CutSceneData == rhs.CutSceneData;
	}
};

//Dependency: GcFrigateClass
//Dependency: GcInventoryClass
//Dependency: GcAlienRace
//Dependency: NMSString0x100
//Dependency: GcSeed
//Dependency: NMSString0x10
struct GcFleetFrigateSaveData
{
	NMS::GcSeed ForcedTraitsSeed;
	NMS::GcSeed HomeSystemSeed;
	NMS::GcSeed ResourceSeed;
	std::vector<int32_t> Stats;
	std::vector<NMS::NMSString0x10> TraitIDs;
	uint64_t TimeOfLastIncomeCollection;
	int32_t DamageTaken;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	NMS_GameComponents::GcInventoryClass InventoryClass;
	int32_t NumberOfTimesDamaged;
	NMS_GameComponents::GcAlienRace Race;
	int32_t RepairsMade;
	int32_t TotalNumberOfExpeditions;
	int32_t TotalNumberOfFailedEvents;
	int32_t TotalNumberOfSuccessfulEvents;
	NMS::NMSString0x100 CustomName;

	friend bool operator==(const GcFleetFrigateSaveData& lhs, const GcFleetFrigateSaveData& rhs) 
	{
		return lhs.ForcedTraitsSeed == rhs.ForcedTraitsSeed &&
		lhs.HomeSystemSeed == rhs.HomeSystemSeed &&
		lhs.ResourceSeed == rhs.ResourceSeed &&
		lhs.Stats == rhs.Stats &&
		lhs.TraitIDs == rhs.TraitIDs &&
		lhs.TimeOfLastIncomeCollection == rhs.TimeOfLastIncomeCollection &&
		lhs.DamageTaken == rhs.DamageTaken &&
		lhs.FrigateClass == rhs.FrigateClass &&
		lhs.InventoryClass == rhs.InventoryClass &&
		lhs.NumberOfTimesDamaged == rhs.NumberOfTimesDamaged &&
		lhs.Race == rhs.Race &&
		lhs.RepairsMade == rhs.RepairsMade &&
		lhs.TotalNumberOfExpeditions == rhs.TotalNumberOfExpeditions &&
		lhs.TotalNumberOfFailedEvents == rhs.TotalNumberOfFailedEvents &&
		lhs.TotalNumberOfSuccessfulEvents == rhs.TotalNumberOfSuccessfulEvents &&
		lhs.CustomName == rhs.CustomName;
	}
};

struct GcMissionConditionBuildMenuOpen
{

	friend bool operator==(const GcMissionConditionBuildMenuOpen& lhs, const GcMissionConditionBuildMenuOpen& rhs) 
	{
		return true;
	}
};

struct GcScanType
{
	enum class ScanTypeEnum : uint32_t
	{
		Tool = 0,
		Beacon = 1,
		RadioTower = 2,
		Observatory = 3,
		DistressSignal = 4,
		Waypoint = 5,
		Ship = 6,
		DebugPlanet = 7,
		DebugSpace = 8,
		VisualOnly = 9,
		VisualOnlyAerial = 10,
	};

	NMS_GameComponents::GcScanType::ScanTypeEnum ScanType;

	friend bool operator==(const GcScanType& lhs, const GcScanType& rhs) 
	{
		return lhs.ScanType == rhs.ScanType;
	}
};

//Dependency: GcScanType
//Dependency: NMSString0x10
struct GcScanData
{
	enum class CameraEventTypeEnum : uint32_t
	{
		None = 0,
		AerialView = 1,
		LookAt = 2,
	};

	enum class CameraEventFocusTargetTypeEnum : uint32_t
	{
		None = 0,
		ScanEventBuilding = 1,
		RevealedNPC = 2,
	};

	NMS::NMSString0x10 CameraEventId;
	NMS_GameComponents::GcScanData::CameraEventFocusTargetTypeEnum CameraEventFocusTargetType;
	NMS_GameComponents::GcScanData::CameraEventTypeEnum CameraEventType;
	float ChargeTime;
	float PulseRange;
	float PulseTime;
	float ScanRevealDelay;
	NMS_GameComponents::GcScanType ScanType;
	bool AddMarkers;
	bool PlayAudioOnMarkers;

	friend bool operator==(const GcScanData& lhs, const GcScanData& rhs) 
	{
		return lhs.CameraEventId == rhs.CameraEventId &&
		lhs.CameraEventFocusTargetType == rhs.CameraEventFocusTargetType &&
		lhs.CameraEventType == rhs.CameraEventType &&
		lhs.ChargeTime == rhs.ChargeTime &&
		lhs.PulseRange == rhs.PulseRange &&
		lhs.PulseTime == rhs.PulseTime &&
		lhs.ScanRevealDelay == rhs.ScanRevealDelay &&
		lhs.ScanType == rhs.ScanType &&
		lhs.AddMarkers == rhs.AddMarkers &&
		lhs.PlayAudioOnMarkers == rhs.PlayAudioOnMarkers;
	}
};

//Dependency: GcScanData
//Dependency: NMSString0x10
struct GcScanDataTableEntry
{
	NMS_GameComponents::GcScanData ScanData;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcScanDataTableEntry& lhs, const GcScanDataTableEntry& rhs) 
	{
		return lhs.ScanData == rhs.ScanData &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: GcScanDataTableEntry
struct GcScanDataTable
{
	std::vector<NMS_GameComponents::GcScanDataTableEntry> ScanData;

	friend bool operator==(const GcScanDataTable& lhs, const GcScanDataTable& rhs) 
	{
		return lhs.ScanData == rhs.ScanData;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCreatureSlots
{
	int32_t CreatureSlots;
	NMS_Toolkit::TkEqualityEnum Test;
	bool OnlyCountFreeSlots;

	friend bool operator==(const GcMissionConditionCreatureSlots& lhs, const GcMissionConditionCreatureSlots& rhs) 
	{
		return lhs.CreatureSlots == rhs.CreatureSlots &&
		lhs.Test == rhs.Test &&
		lhs.OnlyCountFreeSlots == rhs.OnlyCountFreeSlots;
	}
};

//Dependency: GcSentinelSpawnSequenceStep
struct GcSentinelSpawnSequence
{
	std::vector<NMS_GameComponents::GcSentinelSpawnSequenceStep> Waves;

	friend bool operator==(const GcSentinelSpawnSequence& lhs, const GcSentinelSpawnSequence& rhs) 
	{
		return lhs.Waves == rhs.Waves;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceGetInShip
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceGetInShip& lhs, const GcMissionSequenceGetInShip& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: GcCreatureMoveAnimData
struct GcCreatureMovementData
{
	std::vector<NMS_GameComponents::GcCreatureMoveAnimData> Anims;
	float HeightMax;
	float HeightMin;
	float HeightRangeMax;
	float HeightRangeMin;
	float HeightTime;
	float MoveRange;
	float MoveSpeedScale;
	float TurnRadiusScale;
	bool Herd;
	bool IgnoreRotationInPounce;
	bool LimitHeightRange;

	friend bool operator==(const GcCreatureMovementData& lhs, const GcCreatureMovementData& rhs) 
	{
		return lhs.Anims == rhs.Anims &&
		lhs.HeightMax == rhs.HeightMax &&
		lhs.HeightMin == rhs.HeightMin &&
		lhs.HeightRangeMax == rhs.HeightRangeMax &&
		lhs.HeightRangeMin == rhs.HeightRangeMin &&
		lhs.HeightTime == rhs.HeightTime &&
		lhs.MoveRange == rhs.MoveRange &&
		lhs.MoveSpeedScale == rhs.MoveSpeedScale &&
		lhs.TurnRadiusScale == rhs.TurnRadiusScale &&
		lhs.Herd == rhs.Herd &&
		lhs.IgnoreRotationInPounce == rhs.IgnoreRotationInPounce &&
		lhs.LimitHeightRange == rhs.LimitHeightRange;
	}
};

//Dependency: GcCustomisationUI
struct GcCustomisationUIData
{
	NMS_GameComponents::GcCustomisationUI CustomisationUIData[26];

	friend bool operator==(const GcCustomisationUIData& lhs, const GcCustomisationUIData& rhs) 
	{
		return std::equal(std::begin(lhs.CustomisationUIData), std::end(lhs.CustomisationUIData), std::begin(rhs.CustomisationUIData));
	}
};

//Dependency: GcBlockListPersistence
//Dependency: GcGyroSettingsData
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcHand
//Dependency: GcMovementDirection
//Dependency: TkLanguages
//Dependency: NMSString0x80
struct GcUserSettingsData
{
	enum class UIColourSchemeEnum : uint32_t
	{
		Default = 0,
		Protanopia = 1,
		Deuteranopia = 2,
		Tritanopia = 3,
	};

	enum class TurnModeEnum : uint32_t
	{
		Smooth = 0,
		Snap = 1,
	};

	enum class TemperatureUnitEnum : uint32_t
	{
		Invalid = 0,
		C = 1,
		F = 2,
		K = 3,
	};

	enum class SuitVoiceEnum : uint32_t
	{
		Off = 0,
		High = 1,
		Low = 2,
	};

	enum class SpaceCombatFollowModeEnum : uint32_t
	{
		Disabled = 0,
		Hold = 1,
		Toggle = 2,
	};

	enum class PS4FixedFPSEnum : uint32_t
	{
		Invalid = 0,
		True = 1,
		False = 2,
		MaxPerformance = 3,
	};

	enum class PlayerVoiceEnum : uint32_t
	{
		Off = 0,
		High = 1,
		Low = 2,
		Alien = 3,
	};

	enum class MovementModeEnum : uint32_t
	{
		Teleporter = 0,
		Smooth = 1,
	};

	enum class HighResVRUIEnum : uint32_t
	{
		High = 0,
		Low = 1,
	};

	enum class EyeTrackingFlagsEnum : uint32_t
	{
		None = 0,
		BaseBuilding = 1,
		WristMenus = 2,
	};

	enum class ConsoleHFREnum : uint32_t
	{
		False = 0,
		True = 1,
	};

	enum class BaseSharingModeEnum : uint32_t
	{
		Undecided = 0,
		On = 1,
		Off = 2,
	};

	std::vector<NMS::NMSString0x10> SeenProducts;
	std::vector<NMS::NMSString0x10> SeenSubstances;
	std::vector<NMS::NMSString0x10> SeenTechnologies;
	std::vector<NMS::NMSString0x20A> SeenWikiTopics;
	std::vector<NMS::NMSString0x10> UnlockedPlatformRewards;
	std::vector<NMS::NMSString0x10> UnlockedSeasonRewards;
	std::vector<NMS::NMSString0x10> UnlockedSpecials;
	std::vector<NMS::NMSString0x10> UnlockedTitles;
	std::vector<NMS::NMSString0x10> UnlockedTwitchRewards;
	std::vector<NMS::NMSString0x20A> UnlockedWikiTopics;
	std::vector<NMS::NMSString0x80> UpgradedUsers;
	NMS_GameComponents::GcBlockListPersistence BlockList;
	NMS_GameComponents::GcGyroSettingsData GyroSettings;
	NMS_GameComponents::GcUserSettingsData::BaseSharingModeEnum BaseSharingMode;
	int32_t CamerShakeStrength;
	NMS_GameComponents::GcUserSettingsData::ConsoleHFREnum ConsoleHFR;
	float CrossSavesUploadTimeout;
	int32_t CursorSensitivityMode1;
	int32_t CursorSensitivityMode2;
	NMS_GameComponents::GcHand DominantHand;
	NMS_GameComponents::GcUserSettingsData::EyeTrackingFlagsEnum EyeTrackingFlags;
	int32_t Filter;
	int32_t FireteamSessionCount;
	int32_t FlightSensitivityMode1;
	int32_t FlightSensitivityMode2;
	float FrontendZoom;
	float HazardEffectsStrength;
	int32_t HeadsetVibrationStrength;
	NMS_GameComponents::GcUserSettingsData::HighResVRUIEnum HighResVRUI;
	float HUDZoom;
	NMS_Toolkit::TkLanguages Language;
	int32_t LastSeenCommunityMission;
	int32_t LastSeenCommunityMissionTier;
	int32_t LookSensitivityMode1;
	int32_t LookSensitivityMode2;
	int32_t MotionBlurAmount;
	int32_t MouseSpringSmoothing;
	NMS_GameComponents::GcMovementDirection MovementDirectionHands;
	NMS_GameComponents::GcMovementDirection MovementDirectionPad;
	NMS_GameComponents::GcUserSettingsData::MovementModeEnum MovementMode;
	int32_t MusicVolume;
	float PlayerHUDVROffset;
	NMS_GameComponents::GcUserSettingsData::PlayerVoiceEnum PlayerVoice;
	NMS_GameComponents::GcUserSettingsData::PS4FixedFPSEnum PS4FixedFPS;
	float PS4FOVFoot;
	float PS4FOVShip;
	int32_t ScreenBrightness;
	int32_t SfxVolume;
	float ShipHUDVROffset;
	NMS_GameComponents::GcUserSettingsData::SpaceCombatFollowModeEnum SpaceCombatFollowMode;
	NMS_GameComponents::GcUserSettingsData::SuitVoiceEnum SuitVoice;
	NMS_GameComponents::GcUserSettingsData::TemperatureUnitEnum TemperatureUnit;
	int32_t TriggerFeedbackStrength;
	NMS_GameComponents::GcUserSettingsData::TurnModeEnum TurnMode;
	NMS_GameComponents::GcUserSettingsData::UIColourSchemeEnum UIColourScheme;
	int32_t VibrationStrength;
	int32_t VoiceVolume;
	float VRVignetteStrength;
	bool AccessibleText;
	bool AllowWhiteScreenTransitions;
	bool AutoRotateThirdPersonPlayerCamera;
	bool AutoScanDiscoveries;
	bool BaseBuildingShowOptionsFromVision;
	bool BaseComplexityLimitsEnabled;
	bool CrossPlatform;
	bool CrossSaves;
	bool CrossSavesAutoUploads;
	bool CrossSavesSuppressAutoUploadTimeoutPopup;
	bool DamageNumbers;
	bool EnableControllerCursorInVR;
	bool EnableLargeLobbies;
	bool EnableModdingConsole;
	bool HeadBob;
	bool HighlightInteractableObjects;
	bool HUDHidden;
	bool IncreaseMissionTextContrast;
	bool InstantUIDelete;
	bool InstantUIInputs;
	bool InvertFlightControls;
	bool InvertLookControls;
	bool InvertVRInWorldFlightControls;
	bool MoveableWristMenus;
	bool Multiplayer;
	bool PlaceJumpSwap;
	bool PS4VignetteAndScanlines;
	bool QuickMenuBuildMenuSwap;
	bool SpeechToText;
	bool SpookHazardSkySpin;
	bool SprintScanSwap;
	bool Translate;
	bool UseAutoTorch;
	bool UseCharacterHeightForCamera;
	bool UseOldMouseFlight;
	bool UseShipAutoControlVignette;
	bool Vibration;
	bool VoiceChat;
	bool VRHandControllerEnableTwist;
	bool VRHandControllerSwapYawAndRoll;
	bool VRHeadBob;
	bool VRShowBody;
	bool VRVehiclesUseWorldControls;
	bool XboxOneXHighResolutionMode;

	friend bool operator==(const GcUserSettingsData& lhs, const GcUserSettingsData& rhs) 
	{
		return lhs.SeenProducts == rhs.SeenProducts &&
		lhs.SeenSubstances == rhs.SeenSubstances &&
		lhs.SeenTechnologies == rhs.SeenTechnologies &&
		lhs.SeenWikiTopics == rhs.SeenWikiTopics &&
		lhs.UnlockedPlatformRewards == rhs.UnlockedPlatformRewards &&
		lhs.UnlockedSeasonRewards == rhs.UnlockedSeasonRewards &&
		lhs.UnlockedSpecials == rhs.UnlockedSpecials &&
		lhs.UnlockedTitles == rhs.UnlockedTitles &&
		lhs.UnlockedTwitchRewards == rhs.UnlockedTwitchRewards &&
		lhs.UnlockedWikiTopics == rhs.UnlockedWikiTopics &&
		lhs.UpgradedUsers == rhs.UpgradedUsers &&
		lhs.BlockList == rhs.BlockList &&
		lhs.GyroSettings == rhs.GyroSettings &&
		lhs.BaseSharingMode == rhs.BaseSharingMode &&
		lhs.CamerShakeStrength == rhs.CamerShakeStrength &&
		lhs.ConsoleHFR == rhs.ConsoleHFR &&
		lhs.CrossSavesUploadTimeout == rhs.CrossSavesUploadTimeout &&
		lhs.CursorSensitivityMode1 == rhs.CursorSensitivityMode1 &&
		lhs.CursorSensitivityMode2 == rhs.CursorSensitivityMode2 &&
		lhs.DominantHand == rhs.DominantHand &&
		lhs.EyeTrackingFlags == rhs.EyeTrackingFlags &&
		lhs.Filter == rhs.Filter &&
		lhs.FireteamSessionCount == rhs.FireteamSessionCount &&
		lhs.FlightSensitivityMode1 == rhs.FlightSensitivityMode1 &&
		lhs.FlightSensitivityMode2 == rhs.FlightSensitivityMode2 &&
		lhs.FrontendZoom == rhs.FrontendZoom &&
		lhs.HazardEffectsStrength == rhs.HazardEffectsStrength &&
		lhs.HeadsetVibrationStrength == rhs.HeadsetVibrationStrength &&
		lhs.HighResVRUI == rhs.HighResVRUI &&
		lhs.HUDZoom == rhs.HUDZoom &&
		lhs.Language == rhs.Language &&
		lhs.LastSeenCommunityMission == rhs.LastSeenCommunityMission &&
		lhs.LastSeenCommunityMissionTier == rhs.LastSeenCommunityMissionTier &&
		lhs.LookSensitivityMode1 == rhs.LookSensitivityMode1 &&
		lhs.LookSensitivityMode2 == rhs.LookSensitivityMode2 &&
		lhs.MotionBlurAmount == rhs.MotionBlurAmount &&
		lhs.MouseSpringSmoothing == rhs.MouseSpringSmoothing &&
		lhs.MovementDirectionHands == rhs.MovementDirectionHands &&
		lhs.MovementDirectionPad == rhs.MovementDirectionPad &&
		lhs.MovementMode == rhs.MovementMode &&
		lhs.MusicVolume == rhs.MusicVolume &&
		lhs.PlayerHUDVROffset == rhs.PlayerHUDVROffset &&
		lhs.PlayerVoice == rhs.PlayerVoice &&
		lhs.PS4FixedFPS == rhs.PS4FixedFPS &&
		lhs.PS4FOVFoot == rhs.PS4FOVFoot &&
		lhs.PS4FOVShip == rhs.PS4FOVShip &&
		lhs.ScreenBrightness == rhs.ScreenBrightness &&
		lhs.SfxVolume == rhs.SfxVolume &&
		lhs.ShipHUDVROffset == rhs.ShipHUDVROffset &&
		lhs.SpaceCombatFollowMode == rhs.SpaceCombatFollowMode &&
		lhs.SuitVoice == rhs.SuitVoice &&
		lhs.TemperatureUnit == rhs.TemperatureUnit &&
		lhs.TriggerFeedbackStrength == rhs.TriggerFeedbackStrength &&
		lhs.TurnMode == rhs.TurnMode &&
		lhs.UIColourScheme == rhs.UIColourScheme &&
		lhs.VibrationStrength == rhs.VibrationStrength &&
		lhs.VoiceVolume == rhs.VoiceVolume &&
		lhs.VRVignetteStrength == rhs.VRVignetteStrength &&
		lhs.AccessibleText == rhs.AccessibleText &&
		lhs.AllowWhiteScreenTransitions == rhs.AllowWhiteScreenTransitions &&
		lhs.AutoRotateThirdPersonPlayerCamera == rhs.AutoRotateThirdPersonPlayerCamera &&
		lhs.AutoScanDiscoveries == rhs.AutoScanDiscoveries &&
		lhs.BaseBuildingShowOptionsFromVision == rhs.BaseBuildingShowOptionsFromVision &&
		lhs.BaseComplexityLimitsEnabled == rhs.BaseComplexityLimitsEnabled &&
		lhs.CrossPlatform == rhs.CrossPlatform &&
		lhs.CrossSaves == rhs.CrossSaves &&
		lhs.CrossSavesAutoUploads == rhs.CrossSavesAutoUploads &&
		lhs.CrossSavesSuppressAutoUploadTimeoutPopup == rhs.CrossSavesSuppressAutoUploadTimeoutPopup &&
		lhs.DamageNumbers == rhs.DamageNumbers &&
		lhs.EnableControllerCursorInVR == rhs.EnableControllerCursorInVR &&
		lhs.EnableLargeLobbies == rhs.EnableLargeLobbies &&
		lhs.EnableModdingConsole == rhs.EnableModdingConsole &&
		lhs.HeadBob == rhs.HeadBob &&
		lhs.HighlightInteractableObjects == rhs.HighlightInteractableObjects &&
		lhs.HUDHidden == rhs.HUDHidden &&
		lhs.IncreaseMissionTextContrast == rhs.IncreaseMissionTextContrast &&
		lhs.InstantUIDelete == rhs.InstantUIDelete &&
		lhs.InstantUIInputs == rhs.InstantUIInputs &&
		lhs.InvertFlightControls == rhs.InvertFlightControls &&
		lhs.InvertLookControls == rhs.InvertLookControls &&
		lhs.InvertVRInWorldFlightControls == rhs.InvertVRInWorldFlightControls &&
		lhs.MoveableWristMenus == rhs.MoveableWristMenus &&
		lhs.Multiplayer == rhs.Multiplayer &&
		lhs.PlaceJumpSwap == rhs.PlaceJumpSwap &&
		lhs.PS4VignetteAndScanlines == rhs.PS4VignetteAndScanlines &&
		lhs.QuickMenuBuildMenuSwap == rhs.QuickMenuBuildMenuSwap &&
		lhs.SpeechToText == rhs.SpeechToText &&
		lhs.SpookHazardSkySpin == rhs.SpookHazardSkySpin &&
		lhs.SprintScanSwap == rhs.SprintScanSwap &&
		lhs.Translate == rhs.Translate &&
		lhs.UseAutoTorch == rhs.UseAutoTorch &&
		lhs.UseCharacterHeightForCamera == rhs.UseCharacterHeightForCamera &&
		lhs.UseOldMouseFlight == rhs.UseOldMouseFlight &&
		lhs.UseShipAutoControlVignette == rhs.UseShipAutoControlVignette &&
		lhs.Vibration == rhs.Vibration &&
		lhs.VoiceChat == rhs.VoiceChat &&
		lhs.VRHandControllerEnableTwist == rhs.VRHandControllerEnableTwist &&
		lhs.VRHandControllerSwapYawAndRoll == rhs.VRHandControllerSwapYawAndRoll &&
		lhs.VRHeadBob == rhs.VRHeadBob &&
		lhs.VRShowBody == rhs.VRShowBody &&
		lhs.VRVehiclesUseWorldControls == rhs.VRVehiclesUseWorldControls &&
		lhs.XboxOneXHighResolutionMode == rhs.XboxOneXHighResolutionMode;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionMissionSelected
{
	NMS::NMSString0x10 MissionID;

	friend bool operator==(const GcMissionConditionMissionSelected& lhs, const GcMissionConditionMissionSelected& rhs) 
	{
		return lhs.MissionID == rhs.MissionID;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcProductCategory
//Dependency: GcItemNeedPurpose
//Dependency: NMSString0x10
struct GcMissionConditionHasProduct
{
	NMS::NMSString0x10 Product;
	NMS::NMSString0x10 UseAmountToAffordRecipe;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	NMS_GameComponents::GcProductCategory ProductCategory;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool AllowedToSetInventoryHint;
	bool DependentOnSeasonMilestone;
	bool DoNotFormatText;
	bool ForceInventoryHintAtAllTimes;
	bool ForceSearchFreighterAndChests;
	bool MustBeImmediatelyAccessible;
	bool SearchCookingIngredients;
	bool SearchEveryShip;
	bool SearchGrave;
	bool SyncWithMissionFireteam;
	bool TakeAffordRecipeFromSeasonData;
	bool TakeAmountFromSeasonData;
	bool TakeIdFromSeasonData;
	bool TeachIfNotKnown;
	bool UseAffordRecipeForTextFormatting;
	bool UseDefaultAmount;
	bool UseProductCategory;
	bool UseProductIconAsMissionIcon;

	friend bool operator==(const GcMissionConditionHasProduct& lhs, const GcMissionConditionHasProduct& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.UseAmountToAffordRecipe == rhs.UseAmountToAffordRecipe &&
		lhs.Amount == rhs.Amount &&
		lhs.Default == rhs.Default &&
		lhs.ProductCategory == rhs.ProductCategory &&
		lhs.Purpose == rhs.Purpose &&
		lhs.AllowedToSetInventoryHint == rhs.AllowedToSetInventoryHint &&
		lhs.DependentOnSeasonMilestone == rhs.DependentOnSeasonMilestone &&
		lhs.DoNotFormatText == rhs.DoNotFormatText &&
		lhs.ForceInventoryHintAtAllTimes == rhs.ForceInventoryHintAtAllTimes &&
		lhs.ForceSearchFreighterAndChests == rhs.ForceSearchFreighterAndChests &&
		lhs.MustBeImmediatelyAccessible == rhs.MustBeImmediatelyAccessible &&
		lhs.SearchCookingIngredients == rhs.SearchCookingIngredients &&
		lhs.SearchEveryShip == rhs.SearchEveryShip &&
		lhs.SearchGrave == rhs.SearchGrave &&
		lhs.SyncWithMissionFireteam == rhs.SyncWithMissionFireteam &&
		lhs.TakeAffordRecipeFromSeasonData == rhs.TakeAffordRecipeFromSeasonData &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.TakeIdFromSeasonData == rhs.TakeIdFromSeasonData &&
		lhs.TeachIfNotKnown == rhs.TeachIfNotKnown &&
		lhs.UseAffordRecipeForTextFormatting == rhs.UseAffordRecipeForTextFormatting &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount &&
		lhs.UseProductCategory == rhs.UseProductCategory &&
		lhs.UseProductIconAsMissionIcon == rhs.UseProductIconAsMissionIcon;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x100
struct GcGrabPlayerComponentData
{
	NMS::Vector3f GrabOffset;
	NMS::NMSString0x10 DamageType;
	NMS::NMSString0x10 DefendAnim;
	NMS::NMSString0x10 GrabAnim;
	NMS::NMSString0x10 HitReactAnim;
	NMS::NMSString0x10 HoldAnim;
	NMS::NMSString0x10 IdleAnim;
	NMS::NMSString0x10 PlayerGrabbedAnim;
	NMS::Vector2f HitReactAngles;
	NMS::Vector2f LookAroundAngles;
	NMS::Vector2f LookAroundAnglesFine;
	NMS::Vector2f LookAroundTime;
	NMS::Vector2f LookAroundTrackTime;
	NMS::Vector2f LookAtPlayerTime;
	NMS::Vector2f SleepTime;
	float ActivateRange;
	float BodgeInputAngle;
	float BodgeOutputAngle;
	float CooldownTime;
	float DamageTime;
	float EjectImpulse;
	float FocusRange;
	float GrabAttachStrength;
	NMS_GameComponents::GcAudioWwiseEvents GrabBeginAudioEvent;
	float GrabBlendTime;
	NMS_GameComponents::GcAudioWwiseEvents GrabEndAudioEvent;
	float GrabRadius;
	float HitReactAnimChance;
	float HoldTime;
	float LookAroundFineModifier;
	float LookAtPlayerChance;
	float LungeRadius;
	float MaxLookAngle;
	float RestTime;
	float SleepChance;
	float TrackTime;
	float TriggerRange;
	NMS::NMSString0x100 GrabJoint;
	NMS::NMSString0x100 LookJoint;

	friend bool operator==(const GcGrabPlayerComponentData& lhs, const GcGrabPlayerComponentData& rhs) 
	{
		return lhs.GrabOffset == rhs.GrabOffset &&
		lhs.DamageType == rhs.DamageType &&
		lhs.DefendAnim == rhs.DefendAnim &&
		lhs.GrabAnim == rhs.GrabAnim &&
		lhs.HitReactAnim == rhs.HitReactAnim &&
		lhs.HoldAnim == rhs.HoldAnim &&
		lhs.IdleAnim == rhs.IdleAnim &&
		lhs.PlayerGrabbedAnim == rhs.PlayerGrabbedAnim &&
		lhs.HitReactAngles == rhs.HitReactAngles &&
		lhs.LookAroundAngles == rhs.LookAroundAngles &&
		lhs.LookAroundAnglesFine == rhs.LookAroundAnglesFine &&
		lhs.LookAroundTime == rhs.LookAroundTime &&
		lhs.LookAroundTrackTime == rhs.LookAroundTrackTime &&
		lhs.LookAtPlayerTime == rhs.LookAtPlayerTime &&
		lhs.SleepTime == rhs.SleepTime &&
		lhs.ActivateRange == rhs.ActivateRange &&
		lhs.BodgeInputAngle == rhs.BodgeInputAngle &&
		lhs.BodgeOutputAngle == rhs.BodgeOutputAngle &&
		lhs.CooldownTime == rhs.CooldownTime &&
		lhs.DamageTime == rhs.DamageTime &&
		lhs.EjectImpulse == rhs.EjectImpulse &&
		lhs.FocusRange == rhs.FocusRange &&
		lhs.GrabAttachStrength == rhs.GrabAttachStrength &&
		lhs.GrabBeginAudioEvent == rhs.GrabBeginAudioEvent &&
		lhs.GrabBlendTime == rhs.GrabBlendTime &&
		lhs.GrabEndAudioEvent == rhs.GrabEndAudioEvent &&
		lhs.GrabRadius == rhs.GrabRadius &&
		lhs.HitReactAnimChance == rhs.HitReactAnimChance &&
		lhs.HoldTime == rhs.HoldTime &&
		lhs.LookAroundFineModifier == rhs.LookAroundFineModifier &&
		lhs.LookAtPlayerChance == rhs.LookAtPlayerChance &&
		lhs.LungeRadius == rhs.LungeRadius &&
		lhs.MaxLookAngle == rhs.MaxLookAngle &&
		lhs.RestTime == rhs.RestTime &&
		lhs.SleepChance == rhs.SleepChance &&
		lhs.TrackTime == rhs.TrackTime &&
		lhs.TriggerRange == rhs.TriggerRange &&
		lhs.GrabJoint == rhs.GrabJoint &&
		lhs.LookJoint == rhs.LookJoint;
	}
};

struct GcMissionConditionMissionMessageWarp
{

	friend bool operator==(const GcMissionConditionMissionMessageWarp& lhs, const GcMissionConditionMissionMessageWarp& rhs) 
	{
		return true;
	}
};

//Dependency: TkModelRendererData
struct GcModelViewCollection
{
	NMS_Toolkit::TkModelRendererData ModelViewData[49];

	friend bool operator==(const GcModelViewCollection& lhs, const GcModelViewCollection& rhs) 
	{
		return std::equal(std::begin(lhs.ModelViewData), std::end(lhs.ModelViewData), std::begin(rhs.ModelViewData));
	}
};

//Dependency: GcSeasonalRingData
struct GcSeasonalRingArray
{
	std::vector<NMS_GameComponents::GcSeasonalRingData> SeasonalRingData;

	friend bool operator==(const GcSeasonalRingArray& lhs, const GcSeasonalRingArray& rhs) 
	{
		return lhs.SeasonalRingData == rhs.SeasonalRingData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
struct TkNGuiTreeViewTemplate
{
	NMS::Colour FilteredTextColour;
	NMS::Colour HighlightColour;
	NMS::Colour InactiveTextColour;
	NMS::Colour LineColour;
	NMS::Colour TextColour;
	float ElementHeight;
	float IconMargin;
	float IconPad;
	float IconWidth;
	float LineWidth;
	float NestIndent;
	float VerticalSplitPad;
	float VerticalSplitWidth;
	bool AllowVerticalSplit;
	bool FilteringHidesElements;

	friend bool operator==(const TkNGuiTreeViewTemplate& lhs, const TkNGuiTreeViewTemplate& rhs) 
	{
		return lhs.FilteredTextColour == rhs.FilteredTextColour &&
		lhs.HighlightColour == rhs.HighlightColour &&
		lhs.InactiveTextColour == rhs.InactiveTextColour &&
		lhs.LineColour == rhs.LineColour &&
		lhs.TextColour == rhs.TextColour &&
		lhs.ElementHeight == rhs.ElementHeight &&
		lhs.IconMargin == rhs.IconMargin &&
		lhs.IconPad == rhs.IconPad &&
		lhs.IconWidth == rhs.IconWidth &&
		lhs.LineWidth == rhs.LineWidth &&
		lhs.NestIndent == rhs.NestIndent &&
		lhs.VerticalSplitPad == rhs.VerticalSplitPad &&
		lhs.VerticalSplitWidth == rhs.VerticalSplitWidth &&
		lhs.AllowVerticalSplit == rhs.AllowVerticalSplit &&
		lhs.FilteringHidesElements == rhs.FilteringHidesElements;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWonderCategoryConfig
{
	enum class WonderCategoryComparisonTypeEnum : uint32_t
	{
		Max = 0,
		Min = 1,
	};

	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 StatID;
	float ThresholdValue;
	NMS_GameComponents::GcWonderCategoryConfig::WonderCategoryComparisonTypeEnum WonderCategoryComparisonType;

	friend bool operator==(const GcWonderCategoryConfig& lhs, const GcWonderCategoryConfig& rhs) 
	{
		return lhs.LocID == rhs.LocID &&
		lhs.StatID == rhs.StatID &&
		lhs.ThresholdValue == rhs.ThresholdValue &&
		lhs.WonderCategoryComparisonType == rhs.WonderCategoryComparisonType;
	}
};

//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector2f
struct GcHUDEffectRewardData
{
	NMS::Colour BoxColourEnd;
	NMS::Colour BoxColourStart;
	NMS::Vector2f BoxSizeEnd;
	NMS::Vector2f BoxSizeStart;
	float BoxAnimTime;
	float BoxAnimTimeBetweenBoxes;
	float BoxRotate;
	float BoxThicknessEnd;
	float BoxThicknessStart;
	int32_t NumBoxes;
	NMS_Toolkit::TkCurveType BoxAnimTimeCurve;

	friend bool operator==(const GcHUDEffectRewardData& lhs, const GcHUDEffectRewardData& rhs) 
	{
		return lhs.BoxColourEnd == rhs.BoxColourEnd &&
		lhs.BoxColourStart == rhs.BoxColourStart &&
		lhs.BoxSizeEnd == rhs.BoxSizeEnd &&
		lhs.BoxSizeStart == rhs.BoxSizeStart &&
		lhs.BoxAnimTime == rhs.BoxAnimTime &&
		lhs.BoxAnimTimeBetweenBoxes == rhs.BoxAnimTimeBetweenBoxes &&
		lhs.BoxRotate == rhs.BoxRotate &&
		lhs.BoxThicknessEnd == rhs.BoxThicknessEnd &&
		lhs.BoxThicknessStart == rhs.BoxThicknessStart &&
		lhs.NumBoxes == rhs.NumBoxes &&
		lhs.BoxAnimTimeCurve == rhs.BoxAnimTimeCurve;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkNGuiRectanglePulseEffect
{
	float PulseOffset;
	float PulseRate;
	float PulseWidth;
	NMS_Toolkit::TkCurveType PulseAlphaCurve;
	NMS_Toolkit::TkCurveType PulseSizeCurve;

	friend bool operator==(const TkNGuiRectanglePulseEffect& lhs, const TkNGuiRectanglePulseEffect& rhs) 
	{
		return lhs.PulseOffset == rhs.PulseOffset &&
		lhs.PulseRate == rhs.PulseRate &&
		lhs.PulseWidth == rhs.PulseWidth &&
		lhs.PulseAlphaCurve == rhs.PulseAlphaCurve &&
		lhs.PulseSizeCurve == rhs.PulseSizeCurve;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Colour
struct GcSpaceMapObjectData
{
	NMS::Colour Colour;
	float DistanceMin;
	float DistanceRange;
	float Radius;
	float ScaleMagnitude;
	float ScaleMin;
	float ScaleRange;
	bool Orient;
	bool TintModel;

	friend bool operator==(const GcSpaceMapObjectData& lhs, const GcSpaceMapObjectData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.DistanceMin == rhs.DistanceMin &&
		lhs.DistanceRange == rhs.DistanceRange &&
		lhs.Radius == rhs.Radius &&
		lhs.ScaleMagnitude == rhs.ScaleMagnitude &&
		lhs.ScaleMin == rhs.ScaleMin &&
		lhs.ScaleRange == rhs.ScaleRange &&
		lhs.Orient == rhs.Orient &&
		lhs.TintModel == rhs.TintModel;
	}
};

//Dependency: GcHUDStartup
struct GcHUDStartupTable
{
	enum class HUDStartupEnum : uint32_t
	{
		WaitingForInit = 0,
		Startup = 1,
		Booting = 2,
		LifeSupport = 3,
		Shield = 4,
		ShieldEffect = 5,
		Scanner = 6,
		Jetpack = 7,
		Weapon = 8,
		Finishing = 9,
		DiscoverPlanet = 10,
		Done = 11,
		Inactive = 12,
	};

	NMS_GameComponents::GcHUDStartup HUDStartup[13];
	float BackgroundAlpha;
	float ButtonFlashAlpha;
	float ButtonFlashRate;
	float FadeInFlashTime;
	float LookSpeed;
	float StartHoldTime;

	friend bool operator==(const GcHUDStartupTable& lhs, const GcHUDStartupTable& rhs) 
	{
		return std::equal(std::begin(lhs.HUDStartup), std::end(lhs.HUDStartup), std::begin(rhs.HUDStartup)) &&
		lhs.BackgroundAlpha == rhs.BackgroundAlpha &&
		lhs.ButtonFlashAlpha == rhs.ButtonFlashAlpha &&
		lhs.ButtonFlashRate == rhs.ButtonFlashRate &&
		lhs.FadeInFlashTime == rhs.FadeInFlashTime &&
		lhs.LookSpeed == rhs.LookSpeed &&
		lhs.StartHoldTime == rhs.StartHoldTime;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: TkCurveType
struct GcInventorySlotActionData
{
	NMS_GameComponents::GcAudioWwiseEvents ActionAudio;
	float ScaleAtMax;
	float ScaleAtMin;
	NMS_GameComponents::GcAudioWwiseEvents SuitAudio;
	float Time;
	NMS_Toolkit::TkCurveType AnimCurve;
	bool Disabled;
	bool Glows;
	bool Loops;
	bool Scales;

	friend bool operator==(const GcInventorySlotActionData& lhs, const GcInventorySlotActionData& rhs) 
	{
		return lhs.ActionAudio == rhs.ActionAudio &&
		lhs.ScaleAtMax == rhs.ScaleAtMax &&
		lhs.ScaleAtMin == rhs.ScaleAtMin &&
		lhs.SuitAudio == rhs.SuitAudio &&
		lhs.Time == rhs.Time &&
		lhs.AnimCurve == rhs.AnimCurve &&
		lhs.Disabled == rhs.Disabled &&
		lhs.Glows == rhs.Glows &&
		lhs.Loops == rhs.Loops &&
		lhs.Scales == rhs.Scales;
	}
};

struct GcWorldUISettings
{
	float GameModeSelectorQuadOffset;
	float GameModeSelectorQuadOffsetV2;
	float HUDDefWorldQuadOffset;
	float HUDDefWorldQuadOffsetV2;
	float HUDDefWorldQuadShipAddOffset;
	float HUDDefWorldQuadShipAddOffsetV2;
	float HUDInterpSpeed;
	float HUDThresholdHorz;
	float HUDThresholdVert;
	float HUDWorldQuadScale;
	float HUDWorldQuadShipScale;
	float UIWorldQuadOffset;
	float UIWorldQuadOffsetBuildMenu;
	float UIWorldQuadOffsetBuildMenuV2;
	float UIWorldQuadOffsetV2;
	float UIWorldQuadScale;
	float UIWorldQuadShipAddOffset;
	float UIWorldQuadShipAddOffsetV2;
	float UIWorldQuadShipScale;
	float UIWorldQuadSideOffset;

	friend bool operator==(const GcWorldUISettings& lhs, const GcWorldUISettings& rhs) 
	{
		return lhs.GameModeSelectorQuadOffset == rhs.GameModeSelectorQuadOffset &&
		lhs.GameModeSelectorQuadOffsetV2 == rhs.GameModeSelectorQuadOffsetV2 &&
		lhs.HUDDefWorldQuadOffset == rhs.HUDDefWorldQuadOffset &&
		lhs.HUDDefWorldQuadOffsetV2 == rhs.HUDDefWorldQuadOffsetV2 &&
		lhs.HUDDefWorldQuadShipAddOffset == rhs.HUDDefWorldQuadShipAddOffset &&
		lhs.HUDDefWorldQuadShipAddOffsetV2 == rhs.HUDDefWorldQuadShipAddOffsetV2 &&
		lhs.HUDInterpSpeed == rhs.HUDInterpSpeed &&
		lhs.HUDThresholdHorz == rhs.HUDThresholdHorz &&
		lhs.HUDThresholdVert == rhs.HUDThresholdVert &&
		lhs.HUDWorldQuadScale == rhs.HUDWorldQuadScale &&
		lhs.HUDWorldQuadShipScale == rhs.HUDWorldQuadShipScale &&
		lhs.UIWorldQuadOffset == rhs.UIWorldQuadOffset &&
		lhs.UIWorldQuadOffsetBuildMenu == rhs.UIWorldQuadOffsetBuildMenu &&
		lhs.UIWorldQuadOffsetBuildMenuV2 == rhs.UIWorldQuadOffsetBuildMenuV2 &&
		lhs.UIWorldQuadOffsetV2 == rhs.UIWorldQuadOffsetV2 &&
		lhs.UIWorldQuadScale == rhs.UIWorldQuadScale &&
		lhs.UIWorldQuadShipAddOffset == rhs.UIWorldQuadShipAddOffset &&
		lhs.UIWorldQuadShipAddOffsetV2 == rhs.UIWorldQuadShipAddOffsetV2 &&
		lhs.UIWorldQuadShipScale == rhs.UIWorldQuadShipScale &&
		lhs.UIWorldQuadSideOffset == rhs.UIWorldQuadSideOffset;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkInOutCurve
{
	float Midpoint;
	NMS_Toolkit::TkCurveType InCurve;
	NMS_Toolkit::TkCurveType OutCurve;

	friend bool operator==(const TkInOutCurve& lhs, const TkInOutCurve& rhs) 
	{
		return lhs.Midpoint == rhs.Midpoint &&
		lhs.InCurve == rhs.InCurve &&
		lhs.OutCurve == rhs.OutCurve;
	}
};

//Dependency: TkInOutCurve
struct TkHitCurveData
{
	NMS_Toolkit::TkInOutCurve Curve;
	float Time;

	friend bool operator==(const TkHitCurveData& lhs, const TkHitCurveData& rhs) 
	{
		return lhs.Curve == rhs.Curve &&
		lhs.Time == rhs.Time;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcModelViewCollection
//Dependency: GcScanEffectData
//Dependency: GcSeasonalRingArray
//Dependency: GcDiscoveryHelperTimings
//Dependency: TkNGuiTreeViewTemplate
//Dependency: GcWonderCategoryConfig
//Dependency: GcHUDEffectRewardData
//Dependency: TkNGuiRectanglePulseEffect
//Dependency: GcSpaceMapObjectData
//Dependency: GcHUDStartupTable
//Dependency: GcInventorySlotActionData
//Dependency: GcWorldUISettings
//Dependency: GcInteractionDof
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: TkModelRendererData
//Dependency: TkTextureResource
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: NMSString0x100
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector4f
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcUIGlobals
{
	NMS_GameComponents::GcModelViewCollection ModelViews;
	NMS_Toolkit::TkModelRendererData ShipThumbnailRenderSettings[10];
	NMS_Toolkit::TkModelRendererData HoverShipThumbnailModelView;
	NMS_Toolkit::TkModelRendererData LargeMultitoolThumbnailModelView;
	NMS_Toolkit::TkModelRendererData MultitoolThumbnailModelView;
	NMS_Toolkit::TkModelRendererData PetThumbnailModelView;
	NMS_Toolkit::TkModelRendererData RepairBackpackCamera;
	NMS_Toolkit::TkModelRendererData RepairCamera;
	NMS_Toolkit::TkModelRendererData RepairShipCameraInWorld;
	NMS_Toolkit::TkModelRendererData RepairShipCameraModelView;
	NMS_Toolkit::TkModelRendererData RepairShipCameraVR;
	NMS_Toolkit::TkModelRendererData RepairWeaponCamera;
	NMS_Toolkit::TkModelRendererData SpookShipThumbnailModelView;
	NMS_Toolkit::TkNGuiTreeViewTemplate FileBrowserTreeViewTemplate;
	NMS_Toolkit::TkNGuiTreeViewTemplate SceneInfoTreeViewTemplate;
	NMS_Toolkit::TkNGuiTreeViewTemplate SkeletonToolsTreeViewTemplate;
	NMS_GameComponents::GcScanEffectData DebugEditorPreviewEffect;
	NMS_GameComponents::GcScanEffectData FreighterSummonScanEffect;
	NMS_GameComponents::GcHUDEffectRewardData OSDEpicItemRewardEffect;
	NMS_GameComponents::GcHUDEffectRewardData OSDRareItemRewardEffect;
	NMS::Colour SystemHooverLEDColours[5];
	NMS::Colour SystemHooverStatusBarColours[5];
	NMS_GameComponents::GcScanEffectData TargetDisplayScanEffect;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapAtlasData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapBlackHoleData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapFreighterData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapMarkerData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapNexusData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapPlanetData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapPulseEncounterData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapShipData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapStationData;
	NMS::Colour AltimeterBandColour1;
	NMS::Colour AltimeterBandColour2;
	NMS::Colour AltimeterColour1;
	NMS::Colour AltimeterColour2;
	NMS::Colour BaseComplexityDangerColour;
	NMS::Colour BaseComplexityDefaultColour;
	NMS::Colour BaseComplexityWarningColour;
	NMS::Vector3f BinocularPanelLinePointOffset;
	NMS::Colour BuildMenuErrorTextColour;
	NMS::Colour BuildMenuErrorTextFlashColour;
	NMS::Colour BuildMenuErrorTextOutlineColour;
	NMS::Colour BuildMenuErrorTextOutlineFlashColour;
	NMS::Colour BuildMenuInfoTextColour;
	NMS::Colour BuildMenuInfoTextOutlineColour;
	NMS::Colour BuildMenuPassiveErrorTextColour;
	NMS::Colour BuildMenuPassiveErrorTextOutlineColour;
	NMS::Colour ByteBeatArpGridActiveColour;
	NMS::Colour ByteBeatArpGridInactiveColour;
	NMS::Colour ByteBeatArpPipActiveColour;
	NMS::Colour ByteBeatArpPipInactiveColour;
	NMS::Colour ByteBeatRhythmColour0Active;
	NMS::Colour ByteBeatRhythmColour0Inactive;
	NMS::Colour ByteBeatRhythmColour1Active;
	NMS::Colour ByteBeatRhythmColour1Inactive;
	NMS::Colour ByteBeatRhythmColour2Active;
	NMS::Colour ByteBeatRhythmColour2Inactive;
	NMS::Colour ByteBeatSequencerBGColourActive;
	NMS::Colour ByteBeatSequencerBGColourInactive;
	NMS::Colour ByteBeatSequencerHighlightColour;
	NMS::Colour ByteBeatSequencerRimColourActive;
	NMS::Colour ByteBeatSequencerRimColourInactive;
	NMS::Colour ByteBeatSequencerUnpoweredTint;
	NMS::Colour ByteBeatSliderFGColour;
	NMS::Colour ByteBeatSliderTextActiveColour;
	NMS::Colour ByteBeatSliderTextInactiveColour;
	NMS::Colour ByteBeatTreeLineColour;
	NMS::Colour ByteBeatVisGridColour;
	NMS::Colour ByteBeatVisLineColour;
	NMS::Colour CommunicatorMessageColour;
	NMS::Colour CrosshairColour;
	NMS::Colour CrosshairLeadPassiveColour;
	NMS::Colour CrosshairLeadThreatColour;
	NMS::Colour CursorColour;
	NMS::Colour CursorConfirmColour;
	NMS::Colour CursorDeleteColour;
	NMS::Colour CursorTransferUploadColour;
	NMS::Colour DamageNumberCriticalColour;
	NMS::Colour DamageNumberIneffectiveColour;
	NMS::Colour DamageNumberIneffectiveWarningColour;
	NMS::Colour DeathMessageColour;
	NMS::Colour DebugEditorAxisColourAtActive;
	NMS::Colour DebugEditorAxisColourAtInactive;
	NMS::Colour DebugEditorAxisColourRightActive;
	NMS::Colour DebugEditorAxisColourRightInactive;
	NMS::Colour DebugEditorAxisColourUpActive;
	NMS::Colour DebugEditorAxisColourUpInactive;
	NMS::Vector3f DefaultRefinerOffsetIn;
	NMS::Vector3f DefaultRefinerOffsetOut;
	NMS::Colour EnergyBgColour;
	NMS::Colour EnergyBgPulseColour;
	NMS::Vector3f FaceLockedScreenOffset;
	NMS::Colour FreighterSummonScanEffectColourBlocked;
	NMS::Colour FreighterSummonScanEffectColourHighlight;
	NMS::Colour FrontendCursorBackgroundColour;
	NMS::Colour FuelBgColour;
	NMS::Colour GridBackgroundNegativeColour;
	NMS::Colour GridBackgroundNeutralColour;
	NMS::Colour GridBackgroundPositiveColour;
	NMS::Colour GridDisconnectedColour;
	NMS::Colour GridOfflineColour;
	NMS::Colour GridOnlineColour;
	NMS::Colour HazardBgPulseColour;
	NMS::Colour HazardDamagePulseColour;
	NMS::Vector3f HmdFramerateScreenOffset;
	NMS::Colour HUDMarkerColour;
	NMS::Colour HUDNotifyColour;
	NMS::Colour HUDOutpostColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowHullHitMaxColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowHullHitMinColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowShieldHitMaxColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowShieldHitMinColour;
	NMS::Colour HUDPlayerTrackArrowDotColour;
	NMS::Colour HUDPlayerTrackArrowDotColourPirate;
	NMS::Colour HUDPlayerTrackArrowDotColourPolice;
	NMS::Colour HUDPlayerTrackArrowDotColourTrader;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldDepletedGlowMaxColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldDepletedGlowMinColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldLowColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldStartChargeGlowMaxColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldStartChargeGlowMinColour;
	NMS::Colour HUDPlayerTrackArrowTextColour;
	NMS::Colour HUDRelicMarkerColourDiscovered;
	NMS::Colour HUDRelicMarkerColourUnknown;
	NMS::Colour HUDSpaceshipColour;
	NMS::Colour HUDWarningColour;
	NMS::Colour IconGlowColourActive;
	NMS::Colour IconGlowColourError;
	NMS::Colour IconGlowColourHighlight;
	NMS::Colour IconGlowColourNeutral;
	NMS::Colour InteractionLabelCostColour;
	NMS::Colour InteractionLabelPickupColour;
	NMS::Colour InteractionLabelPickupFillColour;
	NMS::Colour InvSlotGradientBaseColour;
	NMS::Vector3f InWorldInteractLabelCentreOffset;
	NMS::Vector3f InWorldInteractLabelLineOffset;
	NMS::Vector3f InWorldInteractLabelTopOffset;
	NMS::Vector3f InWorldNGuiScreenRotation;
	NMS::Vector3f InWorldStaffBinocsScreenOffset;
	NMS::Colour ItemSlotColourPartiallyInstalled;
	NMS::Colour ItemSlotColourProduct;
	NMS::Colour ItemSlotColourSubstance;
	NMS::Colour ItemSlotColourTech;
	NMS::Colour ItemSlotColourTechCharge;
	NMS::Colour ItemSlotColourTechDamage;
	NMS::Colour ItemSlotTextColourProduct;
	NMS::Colour ItemSlotTextColourSubstance;
	NMS::Colour ItemSlotTextColourTech;
	NMS::Colour JoaoBoxCompletedObjectiveColour;
	NMS::Colour LockOnMarkerActiveColour;
	NMS::Vector3f LowerHelmetScreenOffset;
	NMS::Colour MarkerRingBGColour;
	NMS::Colour MissionOSDMessageBarColour;
	NMS::Colour MultiplayerMissionParticipantsColour;
	NMS::Colour NetworkPopupTextDisabledColour;
	NMS::Colour NetworkPopupTextEnabledColour;
	NMS::Vector3f NGuiModelTranslationFactors;
	NMS::Vector3f NGuiModelTranslationFactorsInteraction;
	NMS::Vector3f NGuiThumbnailModelTranslationFactors;
	NMS::Colour NotificationDangerColour;
	NMS::Colour NotificationDefaultColour;
	NMS::Colour NotificationInfoColour;
	NMS::Colour NotificationUrgentColour;
	NMS::Colour PhotoModeSelectedColour;
	NMS::Colour PhotoModeUnselectedColour;
	NMS::Colour PickedItemBorderColour;
	NMS::Colour PinnedRecipeBorder;
	NMS::Colour ProcProductColourCommon;
	NMS::Colour ProcProductColourRare;
	NMS::Colour ProcProductColourUncommon;
	NMS::Colour PulseAlertColour;
	NMS::Colour PulseDamageColour;
	NMS::Colour QuickMenuSelectedItemColour1;
	NMS::Colour QuickMenuSelectedItemColour2;
	NMS::Colour RadialMenuInnerColourDisabled;
	NMS::Colour RadialMenuInnerColourSelected;
	NMS::Colour RadialMenuInnerColourUnselected;
	NMS::Colour RadialMenuOuterColourDisabled;
	NMS::Colour RadialMenuOuterColourSelected;
	NMS::Colour RadialMenuOuterColourUnselected;
	NMS::Colour RefinerBackgroundColour;
	NMS::Colour RefinerErrorBackgroundColour;
	NMS::Colour RemappedControlColour;
	NMS::Colour SelectedControlColour;
	NMS::Colour SettlementStatBackgroundColour;
	NMS::Colour SettlementStatColour;
	NMS::Colour ShieldBgColour;
	NMS::Colour ShieldColour;
	NMS::Colour ShieldDamageBgColour;
	NMS::Colour ShieldDamageColour;
	NMS::Colour ShipBuilderLineColour;
	NMS::Colour ShipBuilderLineColourHologram;
	NMS::Colour ShipHUDAimTargetColour;
	NMS::Colour ShipHUDAimTargetCritColour;
	NMS::Colour ShipHUDTargetArrowsColourLocal;
	NMS::Colour ShipHUDTargetArrowsColourOutOfRange;
	NMS::Colour ShipHUDTargetArrowsColourThreat;
	NMS::Colour SpaceEnemyShipLineColour;
	NMS::Colour SpaceFriendlyShipLineColour;
	NMS::Colour SpaceMapAttackColour;
	NMS::Vector3f SpaceMapCockpitOffset;
	NMS::Colour SpaceMapDeathPointColour;
	NMS::Colour SpaceMapNeutralColour;
	NMS::Colour SpaceMapOtherPlayerColour;
	NMS::Vector3f SpaceMapPosScaler;
	NMS::Colour SpaceMapSquadronColour;
	NMS::Colour SpaceMapThreatColour;
	NMS::Colour SpookMeterColour;
	NMS::Colour StoreDialFillColour;
	NMS::Colour SuperchargeGradientBaseColour;
	NMS::Colour SuperchargeGradientBlendColour;
	NMS::Colour SuperchargeGradientTechColour;
	NMS::Colour SuperchargePopupColour;
	NMS::Vector3f TargetDisplayShipOffset;
	NMS::Vector3f TargetDisplayTorpedoOffset;
	NMS::Colour TargetMarkerColour;
	NMS::Colour TargetMarkerHighlightColour;
	NMS::Colour TouchButtonChargeIndicatorColour;
	NMS::Colour TransferSendPopupColour;
	NMS::Colour TravelLineColour;
	NMS::Colour TravelLineInvalidColour;
	NMS::Colour TravelLineNotAllowedColour;
	NMS::Colour TravelLineTooFarColour;
	NMS::Colour TravelLineTooSteepColour;
	NMS::Colour TravelTargetColour;
	NMS::Colour UnseenItemColour;
	NMS::Colour WantedColour;
	NMS::Colour WristMenuDefaultBorderColour;
	NMS::Colour WristMenuRepositionableBorderColour;
	NMS_GameComponents::GcWonderCategoryConfig WonderCreatureCategoryConfig[15];
	NMS_GameComponents::GcWonderCategoryConfig WonderTreasureCategoryConfig[13];
	NMS_GameComponents::GcWonderCategoryConfig WonderCustomCategoryConfig[12];
	NMS_GameComponents::GcWonderCategoryConfig WonderPlanetCategoryConfig[11];
	NMS_GameComponents::GcWonderCategoryConfig WonderWeirdBasePartCategoryConfig[11];
	NMS::NMSString0x20A BuildMenuOnActionDisabledLocIDs[16];
	NMS::NMSString0x20A BuildMenuOnActionErrorLocIDs[16];
	NMS::NMSString0x20A BuildMenuOnActionLocIDs[16];
	NMS_GameComponents::GcWonderCategoryConfig WonderFloraCategoryConfig[8];
	NMS_GameComponents::GcWonderCategoryConfig WonderMineralCategoryConfig[8];
	NMS_GameComponents::GcHUDStartupTable IntroTiming;
	NMS_GameComponents::GcHUDStartupTable IntroTimingFreighter;
	NMS_GameComponents::GcHUDStartupTable IntroTimingFreighterRepaired;
	NMS::NMSString0x20A SettlementStatFormatLoc[8];
	NMS::NMSString0x20A SettlementStatLoc[8];
	NMS_Toolkit::TkTextureResource SettlementStatBasicImages[8];
	NMS_Toolkit::TkTextureResource SettlementStatNegativeImages[8];
	NMS_Toolkit::TkTextureResource SettlementStatPositiveImages[8];
	NMS_Toolkit::TkTextureResource WonderTypeIcons[7];
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridExpandableIcon;
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridExpandedIcon;
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridRetractableIcon;
	NMS_Toolkit::TkTextureResource RefinerPopupEmptyOutputIcon;
	NMS::VariableSizeString CamoNormalTexture;
	NMS::VariableSizeString CamoTexture;
	NMS::NMSString0x10 DebugInventoryHint;
	NMS::NMSString0x10 ExplorationLogMissionID;
	std::vector<NMS::Vector4f> HazardDistortionParams;
	std::vector<NMS::VariableSizeString> HazardHeightmaps;
	std::vector<NMS::VariableSizeString> HazardHeightmapsVR;
	std::vector<NMS::VariableSizeString> HazardNormalMaps;
	std::vector<NMS::VariableSizeString> HazardNormalMapsVR;
	std::vector<NMS::VariableSizeString> HazardTextures;
	std::vector<NMS::VariableSizeString> HazardTexturesVR;
	std::vector<NMS::Vector2f> InventoryIconPositions;
	NMS::NMSString0x10 MultiplayerMissionInteractEndTrigger;
	NMS::NMSString0x10 MultiplayerMissionInteractStartTrigger;
	std::vector<NMS_GameComponents::GcSeasonalRingArray> SeasonalRingTable;
	std::vector<NMS::Colour> ShipHUDTargetArrowsColour;
	NMS::NMSString0x10 ShowStatWithDeathQuote;
	std::vector<NMS::VariableSizeString> StatIcons;
	std::vector<NMS_Toolkit::TkModelRendererData> VehicleTypeRepairCamera;
	float CrosshairTargetLockSizeSpecific[20];
	NMS_GameComponents::GcWorldUISettings WorldUISettings;
	float WonderValueModifiersCreature[15];
	float WonderValueModifiersPlanet[11];
	float WonderValueModifiersFlora[8];
	float WonderValueModifiersMineral[8];
	NMS_GameComponents::GcInventorySlotActionData BuildProductSlotAction;
	NMS_GameComponents::GcInventorySlotActionData ChargeSlotAction;
	NMS_GameComponents::GcInventorySlotActionData InstallTechSlotAction;
	NMS_GameComponents::GcInventorySlotActionData InventoryHintAction;
	NMS_GameComponents::GcInventorySlotActionData InventoryHintActionNoGlow;
	NMS_GameComponents::GcInventorySlotActionData NewSlotPulseAction;
	NMS_GameComponents::GcInventorySlotActionData NewSlotRevealAction;
	NMS_GameComponents::GcInventorySlotActionData RepairSlotAction;
	NMS_GameComponents::GcInteractionDof InteractionDOFDisabled;
	NMS_Toolkit::TkNGuiRectanglePulseEffect PulseBarData;
	NMS_Toolkit::TkNGuiRectanglePulseEffect PulseIconData;
	NMS_Toolkit::TkHitCurveData CrosshairLeadHitCurve;
	NMS_GameComponents::GcDiscoveryHelperTimings DiscoveryHelperTimings;
	NMS_Toolkit::TkHitCurveData ShootableHitCurve;
	NMS::Vector2f BinocularEdgeFade;
	NMS::Vector2f BinocularsDiscoveryPos;
	NMS::Vector2f CompassCentre;
	NMS::Vector2f CursorlessDialogPageCursorOffset;
	NMS::Vector2f DamageNumberSideSpeed;
	NMS::Vector2f DialogPageCursorOffset;
	NMS::Vector2f HUDMarkerCompassPrimaryIndicatorOffset;
	NMS::Vector2f HUDMarkerPrimaryIndicatorOffset;
	NMS::Vector2f HUDPlayerSentinelPulseFreq;
	NMS::Vector2f HUDPlayerSentinelPulseSize;
	NMS::Vector2f HUDPlayerTrackArrowDamageGlowSize;
	NMS::Vector2f HUDPlayerTrackArrowEnergyShieldGlowSize;
	NMS::Vector2f HUDPlayerTrackArrowEnergyShieldSize;
	NMS::Vector2f HUDPlayerTrackArrowHealthSize;
	NMS::Vector2f HUDPlayerTrackArrowIconPulseSize;
	NMS::Vector2f HUDPlayerTrackIconOffset;
	NMS::Vector2f HUDTargetHealthIconOffset;
	NMS::Vector2f HUDTargetHealthOffset;
	NMS::Vector2f HUDTargetHealthSize;
	NMS::Vector2f InteractionLabelOffset;
	NMS::Vector2f InteractionLabelOffset_1;
	NMS::Vector2f InteractionLabelScreenMax;
	NMS::Vector2f InteractionLabelScreenMin;
	NMS::Vector2f InteractionLabelSize;
	NMS::Vector2f InteractionLabelTouchAreaMax;
	NMS::Vector2f InteractionLabelTouchAreaMin;
	NMS::Vector2f InteractionWorldParallax;
	NMS::Vector2f IntermediateInteractionPageCursorOffset;
	NMS::Vector2f InWorldGameGuiAlignment;
	NMS::Vector2f InWorldInteractLabelAlignment;
	NMS::Vector2f InWorldNGuiParallax;
	NMS::Vector2f MainMenuSaveIconPosition;
	NMS::Vector2f MarkerDistanceVRAlignment;
	NMS::Vector2f ModelViewWorldParallax;
	NMS::Vector2f NGuiMax2DParallax;
	NMS::Vector2f NGuiMin2DParallax;
	NMS::Vector2f NGuiModelParallax;
	NMS::Vector2f NGuiShipInteractParallax;
	NMS::Vector2f NGuiTouchPadSensitivity;
	NMS::Vector2f NotificationMissionHintPauseTime;
	NMS::Vector2f NotificationMissionHintPauseTimeCritical;
	NMS::Vector2f NotificationMissionHintPauseTimeSecondary;
	NMS::Vector2f PersonalRefinerInputPos;
	NMS::Vector2f PersonalRefinerOutputPos;
	NMS::Vector2f PickingCursorOffset;
	NMS::Vector2f PlanetLabelOffset;
	NMS::Vector2f PlanetLineOffset;
	NMS::Vector2f PlanetMeasureOffset;
	NMS::Vector2f RefinerParallax;
	NMS::Vector2f SaveIconPosition;
	NMS::Vector2f ScanLabelOffset;
	NMS::Vector2f TargetScreenCamOffset;
	NMS::Vector2f TrackCriticalHitOffset;
	NMS::Vector2f TrackTypeIconOffset;
	int32_t AbandonedFreighterAirlockRoomNumber;
	float AccessibleUIHUDPopupScale;
	float AccessibleUIPopupScale;
	float AlignmentRequiredToDisableFrostedGlass;
	float AltimeterLineSpacing;
	float AltimeterMax;
	float AltimeterMin;
	float AltimeterMinValue;
	float AltimeterResolution;
	float AltimeterTextSize;
	float AltimeterWidth;
	float AlwaysOnHazardMultiplierCold;
	float AlwaysOnHazardMultiplierHeat;
	float AlwaysOnHazardMultiplierRad;
	float AlwaysOnHazardMultiplierSpook;
	float AlwaysOnHazardMultiplierTox;
	float AlwaysOnHazardStrengthCold;
	float AlwaysOnHazardStrengthHeat;
	float AlwaysOnHazardStrengthRad;
	float AlwaysOnHazardStrengthSpook;
	float AlwaysOnHazardStrengthTox;
	float AlwaysOnHazardThreshold;
	float AlwaysShowIconFadeDistance;
	float AlwaysShowIconFadeRange;
	float AmbientModeFadeTime;
	float ArrowBounceLeftRate1;
	float ArrowBounceLeftRate2;
	float ArrowBounceLeftRate3;
	float ArrowBounceLength;
	float ArrowBounceRate;
	float ArrowBounceRightRate1;
	float ArrowBounceRightRate2;
	float AsteroidMarkerMinDisplayAngleDegrees;
	float AsteroidMarkerMinDisplayDistance;
	float BaseBuildingFreeRotateDelayBeforeAudioStops;
	float BaseBuildingFreeRotateDelayBeforeReset;
	float BaseBuildingFreeRotateSpeedPadMultiplier;
	float BaseBuildingInputHighlightAlpha;
	float BaseBuildingInputHighlightDuration;
	float BaseBuildingMaxFreeRotateSpeed;
	float BaseBuildingMinFreeRotateSpeed;
	float BaseBuildingPartsGridBreadcrumbFlashDuration;
	float BaseBuildingPartsGridMaxCursorRestorationTime;
	float BaseBuildingPartsGridMinVisibilityForActive;
	float BaseBuildingPartsGridPopupDelay;
	float BaseBuildingPartsGridScrollSpeed;
	float BaseBuildingPinHighlightDuration;
	float BaseBuildingRotationResetRate;
	float BaseBuildingScaleSpeed;
	float BaseBuildingTimeToMaxRotationSpeed;
	float BaseBuildingUIAdjustTime;
	float BaseBuildingUIErrorFadeTime;
	float BaseBuildingUIHorizontalSafeArea;
	float BaseBuildingUIVerticalOffset;
	float BaseBuildingUIVerticalOffsetEdit;
	float BaseBuildingUIVerticalOffsetFromBB;
	float BaseBuildingUIVerticalPosWiring;
	float BaseBuildingUIVerticalSafeArea;
	float BaseComplexityDangerFactor;
	float BaseComplexityWarningFactor;
	float BattleHUDBarInterpTime;
	float BeaconHUDMarkerOffset;
	float BinocularMarkerSideAngle;
	float BinocularMarkerUpAngle;
	float BinocularsAltUIRescaleFactor;
	float BinocularScreenOffset;
	float BinocularScreenScale;
	float BinocularsFarIconDist;
	float BinocularsFarIconFadeDist;
	float BinocularsFarIconOpacity;
	float BinocularsMidIconOpacity;
	float BinocularsNearIconDist;
	float BinocularsNearIconFadeDist;
	float BinocularsNearIconOpacity;
	float BountyMarkerOffset;
	int32_t BuildingShopMaxItems;
	float BuildMenuActionMessageDuration;
	float BuildMenuItemNavAnimTime;
	float BuildMenuItemNextNavAnimTime;
	float BuildMenuItemNextNavAnimWait;
	float ByteBeatArpLineWidth;
	float ByteBeatArpPad;
	float ByteBeatArpRadius;
	float ByteBeatIconLineWidth;
	float ByteBeatIconPad;
	float ByteBeatPartSequencerPad;
	float ByteBeatRhythmBeatPad;
	float ByteBeatRhythmSequencerActiveSaturation;
	float ByteBeatRhythmSequencerInactiveSaturation;
	float ByteBeatSequencerActiveSaturation;
	float ByteBeatSequencerCornerRadius;
	float ByteBeatSequencerHighlightLineWidth;
	float ByteBeatSequencerInactiveSaturation;
	float ByteBeatSequencerLineWidth;
	float ByteBeatSequencerPad;
	float ByteBeatSequencerUnpoweredTintStrength;
	float ByteBeatSliderCornerRadius;
	float ByteBeatSliderLineWidth;
	float ByteBeatSliderPad;
	float ByteBeatSwitchPanelAlpha;
	float ByteBeatSwitchPanelSplit;
	float ByteBeatTreeLineWidth;
	float ByteBeatVisLineWidth;
	float ClosestDoorMarkerBuffer;
	float CockpitGlassDefrostTime;
	float CockpitGlassFrostTime;
	float CommunicatorMessageTime;
	float CompassAngleClamp;
	float CompassAngleClampSpace;
	float CompassAngleFade;
	float CompassDistanceMarkerMinScale;
	float CompassDistanceMaxAngle;
	float CompassDistanceScale;
	float CompassDistanceScaleMin;
	float CompassDistanceScaleRange;
	float CompassDistanceShipMinScale;
	float CompassDistanceSpaceScaleMin;
	float CompassDistanceSpaceScaleRange;
	float CompassDistanceYOffset;
	float CompassHeight;
	float CompassIconOffsetVR;
	float CompassLineContractionEndAngle;
	float CompassLineContractionStartAngle;
	float CompassLineContractionTargetAngle;
	float CompassLineNotchAngleRange;
	float CompassLineNotchLength;
	float CompassLineNotchThickness;
	int32_t CompassLineNumNotches;
	float CompassLineOffset;
	float CompassLineThickness;
	int32_t CompassScreenHeight;
	int32_t CompassScreenWidth;
	float CompassWidth;
	float ConsoleTextSpeed;
	float ConsoleTextTimeMax;
	float ConsoleTextTimeMin;
	float ControlScrollDistance;
	int32_t ControlScrollSteps;
	float CreatureDistanceAlpha;
	float CreatureDistanceDisplayAngle;
	float CreatureDistanceFadeTime;
	float CreatureDistanceOffsetY;
	float CreatureDistanceShadowOffset;
	float CreatureDistanceSize;
	float CreatureIconMergeAngle;
	float CreatureIconOffset;
	float CreatureIconOffsetPhysics;
	float CreatureInteractLabelOffsetY;
	float CreatureReticuleScale;
	float CreatureRoutineMarkerTime;
	int32_t CreatureRoutineRegionsPerFrame;
	float CriticalMessageTime;
	float CrosshairAimOffTime;
	float CrosshairAimTime;
	float CrosshairInnerMinFade;
	float CrosshairInnerMinFadeRange;
	float CrosshairInterceptAlpha;
	float CrosshairInterceptBaseSize;
	float CrosshairInterceptCentreBaseSize;
	float CrosshairInterceptLockRange;
	float CrosshairInterceptSize;
	float CrosshairInterceptSpringTime;
	float CrosshairLeadCornerOffset;
	float CrosshairLeadFadeRange;
	float CrosshairLeadFadeSize;
	float CrosshairLeadInDelay;
	float CrosshairLeadInTime;
	float CrosshairLeadPulseSize;
	float CrosshairLeadScaleIn;
	float CrosshairLeadSpring;
	float CrosshairLeadSpringOff;
	float CrosshairLeadTopLock;
	float CrosshairLeadTopOffset;
	float CrosshairOffsetHmd;
	float CrosshairOffsetHmdUp;
	float CrosshairScaleHmd;
	int32_t CrosshairScreenHeight;
	int32_t CrosshairScreenWidth;
	float CrosshairSpringAimTime;
	float CrosshairSpringTime;
	float CrosshairTargetLockSize;
	float CursorHoverSlowFactor;
	float CursorHoverSlowFactorMin;
	float CursorHoverSlowFixedValue;
	float DamageDirectionIndicatorOnScreenRadiusMultiplier;
	float DamageImpactMergeTime;
	float DamageImpactMinDistance;
	float DamageImpactTimeBetweenNumbers;
	float DamageNumberBlackAlpha;
	float DamageNumberFadeIn;
	float DamageNumberFadeOut;
	float DamageNumberLaserMaxDamage;
	float DamageNumberLaserMinDamage;
	float DamageNumberOffsetX;
	float DamageNumberOffsetY;
	float DamageNumberOutline;
	float DamageNumberOutline2;
	float DamageNumberSize;
	float DamageNumberSizeCritMultiplier;
	float DamageNumberSizeInShip;
	float DamageNumberSizeLaserMultiplier;
	float DamageNumberTime;
	float DamageNumberUpOffset;
	float DamagePerSecondSampleTime;
	float DamageScannableHighlightTime;
	float DamageTrackArrowTime;
	float DeathMessageSwitchTime;
	float DeathMessageTotalTime;
	int32_t DebugMedalRank;
	float DeepSeaHazardMultiplierCold;
	float DeepSeaHazardMultiplierHeat;
	float DeepSeaHazardMultiplierRad;
	float DeepSeaHazardMultiplierTox;
	float DelayBeforeHidingHangarAfterGalaxyMap;
	float DelayBeforeShowingHangarIntoGalaxyMap;
	float DescriptionTextDelay;
	float DescriptionTextSpeed;
	float DescriptionTextSpeedProgressive;
	float DescriptionTextTimeMax;
	float DescriptionTextTimeMin;
	float DetailMessageDismissTime;
	float DroneIndicatorCentreRadiusMax;
	float DroneIndicatorCentreRadiusMin;
	float DroneIndicatorFadeRange;
	float DroneIndicatorRadius;
	float EggModifiyAnimLoopTime;
	float EggModifiyAnimMaxSize;
	float EndOfSeasonAlertDelay;
	float ExocraftHUDMarkerHideDistance;
	float ExocraftHUDMarkerOffset;
	float ExpeditionStageChangeTime;
	float EyeTrackingCursorBlendRate;
	float EyeTrackingCursorBlendRateGameModeSelect;
	float EyeTrackingPopupLookAwayTime;
	float EyeTrackingStickyHoverTime;
	float EyeTrackingTimeBeforePopupsActivate;
	float FeedFrigateAnimAlphaChange;
	int32_t FeedFrigateAnimNumPeriods;
	float FeedFrigateAnimPeriod;
	float FeedFrigateAnimScaleChange;
	int32_t ForceOpenHazardProtInventoryThreshold;
	float FreighterCommanderMarkerMinDistance;
	float FreighterEntranceOffset;
	float FreighterHighlightRange;
	float FreighterLeaderIconDistance;
	float FreighterMegaWarpTransitionTime;
	float FreighterSummonDelay;
	float FreighterSummonGridSize;
	float FreighterSummonLookTime;
	float FreighterSummonOffset;
	float FreighterSummonOffsetPulse;
	float FreighterSummonPitch;
	float FreighterSummonPlanetOffset;
	float FreighterSummonPulseFadeAmount;
	float FreighterSummonPulseRate;
	float FreighterSummonTurn;
	float FreighterSummonTurnAngleIncrement;
	int32_t FreighterSummonTurnNumTries;
	float FreighterSurfaceMinAngle;
	float FrigateDamageIconVisibilityDistance;
	float FrigateIconOffset;
	float FrigatePurchaseNotificationResetDistanceMultiplier;
	float FrontendActivateSplit;
	float FrontendActivateTime;
	float FrontendBGAlpha;
	float FrontendBootBarTime;
	float FrontendBootTime;
	float FrontendConfirmTime;
	float FrontendConfirmTimeFast;
	float FrontendConfirmTimeMouseMultiplier;
	float FrontendConfirmTimeSlow;
	float FrontendCursorOffset;
	float FrontendCursorSize;
	float FrontendCursorWidth;
	float FrontendDeactivateSplit;
	float FrontendDeactivateTime;
	float FrontendDoFBlurMultiplier;
	float FrontendDoFFarPlaneFadeMax;
	float FrontendDoFFarPlaneFadeMin;
	float FrontendDoFFarPlaneMax;
	float FrontendDoFFarPlaneMin;
	float FrontendDoFNearPlaneMax;
	float FrontendDoFNearPlaneMin;
	float FrontendOffsetVR;
	float FrontendShineSpeed;
	float FrontendStatCircleWidth;
	float FrontendStatCircleWidthExtra;
	float FrontendTitleFontSpacing;
	float FrontendToolbarTextHeight;
	float FrontendToolbarTextHeightSelected;
	float FrontendTouchConfirmTimeFastMultiplier;
	float FrontendWaitFadeProgressiveDialogOut;
	float FrontendWaitFadeTextFrameOut;
	float FrontendWaitFadeTextOut;
	float FrontendWaitInitial;
	float FrontendWaitInitialTerminal;
	float FrontendWaitResponse;
	float FrontendWaitResponseOffset;
	float GalaxyMapRadialBorder;
	float GalaxyMapRadialTargetDist;
	float GalmapDiscoveryOffsetVR;
	float GameModeSelectColourFadeTime;
	float GridDecayRateSwitchValue;
	float GridFlickerAmp;
	float GridFlickerBaseAlpha;
	float GridFlickerFreq;
	float HandButtonClickTime;
	float HandButtonCursorScale;
	float HandButtonDotRadius;
	float HandButtonFrontendCursorScale;
	float HandButtonNearDistance;
	float HandButtonPostClickTime;
	float HandButtonPulseRadius;
	float HandButtonPulseThickness;
	float HandButtonPushDistance;
	float HandButtonRadius;
	float HandButtonRadiusClick;
	float HandButtonRadiusTouch;
	float HandButtonRadiusTouchNear;
	float HandButtonRadiusTouchNearActive;
	float HandButtonReleaseThreshold;
	float HandButtonReleaseThresholdInit;
	float HandButtonThickness;
	float HandButtonTouchReturnTime;
	float HandControlButtonSize;
	float HandControlMenuAngle;
	float HandControlMenuCursorScale;
	float HandControlMenuDepth;
	float HandControlMenuMoveActionDistance;
	float HandControlMenuMoveDistance;
	float HandControlMenuMoveDistanceScroll;
	float HandControlMenuMoveDistanceVertical;
	float HandControlMenuSelectRadius;
	float HandControlMenuSelectRadius1;
	float HandControlMenuSelectRadius2;
	float HandControlMenuSurfaceOffset;
	float HandControlPointActiveMargin;
	float HandControlPointMargin;
	float HandControlTopMenuSelectRadius;
	float HandheldZoomFactor;
	float HandScreenGraphicsHeight;
	float HandScreenGraphicsWidth;
	int32_t HandScreenHeight;
	float HandScreenNearActivateDistance;
	int32_t HandScreenWeaponHeight;
	int32_t HandScreenWeaponWidth;
	int32_t HandScreenWidth;
	float HatchAlphaBase;
	float HatchAlphaCursor;
	float HatchAlphaMain;
	int32_t HatchCount;
	float HatchCursorRadius;
	float HatchPulsePauseTime;
	float HatchPulseSpeed;
	float HatchPulseWidth;
	float HazardArrowsLevel2Threshold;
	float HazardArrowsLevel3Threshold;
	float HazardBarPulseTime;
	float HazardPainPulseStrength;
	float HazardPulseRate;
	float HazardScreenEffectPulseRate;
	float HazardScreenEffectPulseTime;
	float HazardScreenEffectStrength;
	float HazardWarningPulseStrength;
	float HazardWarningPulseTime;
	float HitMarkerPulseSize;
	float HitMarkerPulseSizeStatic;
	float HitMarkerPulseTime;
	float HmdFramerateScreenPitch;
	float HoldTimerResetTime;
	float HoverOffscreenBorder;
	float HoverOffscreenBorderXVR;
	float HoverOffscreenBorderYAltUI;
	float HoverPopAnimDuration;
	float HoverPopScaleModification;
	float HUDDisplayTime;
	float HUDDroneCombatPulse;
	float HUDDroneHealingPulse;
	float HUDDroneSummoningPulse;
	float HUDElementsOffsetHMDBottom;
	float HUDElementsOffsetHMDSide;
	float HUDElementsOffsetHMDTop;
	float HUDElementsOffsetX_0;
	float HUDElementsOffsetX_1;
	float HUDElementsOffsetX_2;
	float HUDElementsOffsetX_3;
	float HUDElementsOffsetX_4;
	float HUDElementsOffsetX_5;
	float HUDElementsOffsetY_0;
	float HUDElementsOffsetY_1;
	float HUDElementsOffsetY_2;
	float HUDElementsOffsetY_3;
	float HUDElementsOffsetY_4;
	float HUDElementsOffsetY_5;
	float HUDMarkerActiveTime;
	float HUDMarkerAlpha;
	float HUDMarkerAnimLoopTime;
	float HUDMarkerAnimOffset;
	float HUDMarkerAnimScale;
	float HUDMarkerAnimSpeed;
	float HUDMarkerDistanceOrTimeDistance;
	float HUDMarkerFarDistance;
	float HUDMarkerFarFadeRange;
	float HUDMarkerHorizonBlendRange;
	float HUDMarkerHoverAngleTestGround;
	float HUDMarkerHoverAngleTestGroundHmd;
	float HUDMarkerHoverAngleTestShip;
	float HUDMarkerHoverShowLargeAngleTest;
	float HUDMarkerIconHoverMinScale;
	float HUDMarkerLabelArriveDistance;
	float HUDMarkerLabelBaseWidth;
	float HUDMarkerLabelDisplayDistance;
	float HUDMarkerLabelWidthMultiplier;
	float HUDMarkerModelFadeMinHeight;
	float HUDMarkerModelFadeRange;
	float HUDMarkerNearFadeDistance;
	float HUDMarkerNearFadeRange;
	float HUDMarkerNonActiveMissionAlpha;
	float HUDMarkerObjectMinScreenDistance;
	float HUDMarkerOffset;
	float HUDMarkerPrimaryIndicatorSize;
	float HUDMarkerScalerMin;
	float HUDMarkerScalerRange;
	float HUDMarkerScalerSizeMax;
	float HUDMarkerScalerSizeMin;
	float HUDMarkerShipOffsetMaxDist;
	float HUDMarkerShipOffsetMinDist;
	float HUDMarkerShowActualIconDistance;
	float HUDMarkerShowActualSpaceIconDistance;
	float HUDMarkerWideHoverAngleTest;
	float HUDMarkerWideHoverAngleTestHmd;
	float HUDNetworkMarkerHoverAngleTestGround;
	float HUDNetworkMarkerHoverAngleVRMul;
	float HUDNetworkMarkerHoverShowLargeAngleTest;
	float HUDPetCentreScreenAngle;
	float HUDPetMarkerAngleTest;
	float HUDPetMarkerAngleVRMul;
	float HUDPlayerPhonePulseScanFreq;
	float HUDPlayerSentinelPulseScanFreq;
	float HUDPlayerSentinelPulseWidth;
	float HUDPlayerSentinelRangeFactor;
	float HUDPlayerTrackArrowArrowSize;
	float HUDPlayerTrackArrowDamageGlowHullHitCriticalOpacityScale;
	float HUDPlayerTrackArrowDamageGlowHullHitOpacityScale;
	float HUDPlayerTrackArrowDamageGlowOffset;
	float HUDPlayerTrackArrowDamageGlowShieldHitCriticalOpacityScale;
	float HUDPlayerTrackArrowDamageGlowShieldHitOpacityScale;
	float HUDPlayerTrackArrowDotSize;
	float HUDPlayerTrackArrowEnergyShieldDepletedGlowOpacityScale;
	float HUDPlayerTrackArrowEnergyShieldDepletedTime;
	float HUDPlayerTrackArrowEnergyShieldGlowOffset;
	float HUDPlayerTrackArrowEnergyShieldLowThreshold;
	float HUDPlayerTrackArrowEnergyShieldOffset;
	float HUDPlayerTrackArrowEnergyShieldStartChargeGlowOpacityScale;
	float HUDPlayerTrackArrowEnergyShieldStartChargeTime;
	float HUDPlayerTrackArrowFadeRange;
	float HUDPlayerTrackArrowGlowBaseOpacity;
	float HUDPlayerTrackArrowHealthOffset;
	float HUDPlayerTrackArrowIconBorderReducerShip;
	float HUDPlayerTrackArrowIconFadeDist;
	float HUDPlayerTrackArrowIconFadeDistDrone;
	float HUDPlayerTrackArrowIconFadeDistShip;
	float HUDPlayerTrackArrowIconFadeRange;
	float HUDPlayerTrackArrowIconFadeRangeShip;
	float HUDPlayerTrackArrowIconFadeTime;
	float HUDPlayerTrackArrowIconPulse2Alpha;
	float HUDPlayerTrackArrowIconPulseTime;
	float HUDPlayerTrackArrowIconPulseWidth1;
	float HUDPlayerTrackArrowIconPulseWidth2;
	float HUDPlayerTrackArrowIconShowTime;
	float HUDPlayerTrackArrowIconSize;
	float HUDPlayerTrackArrowMinFadeDist;
	float HUDPlayerTrackArrowOffset;
	float HUDPlayerTrackArrowPulseOffset;
	float HUDPlayerTrackArrowPulseRate;
	float HUDPlayerTrackArrowScreenBorder;
	float HUDPlayerTrackArrowShipLabelOffset;
	float HUDPlayerTrackArrowSize;
	float HUDPlayerTrackArrowSizeMax;
	float HUDPlayerTrackArrowSizeMin;
	float HUDPlayerTrackArrowSmallIconSize;
	float HUDPlayerTrackArrowTargetDist;
	float HUDPlayerTrackArrowTargetDistShip;
	float HUDPlayerTrackArrowTextExtraHeight;
	float HUDPlayerTrackArrowTextExtraOffsetX;
	float HUDPlayerTrackArrowTextExtraOffsetY;
	float HUDPlayerTrackArrowTextHeight;
	float HUDPlayerTrackArrowTextOffset;
	float HUDPlayerTrackDangerPulse;
	float HUDPlayerTrackNoSightPulse;
	float HUDPlayerTrackTimerEnd;
	float HUDPlayerTrackTimerPulseRate;
	float HUDPlayerTrackTimerStart;
	float HUDPlayerTrackTimerStartFade;
	float HUDTargetHealthDangerTime;
	float HUDTargetHealthIconSize;
	float HUDTargetIconOffset;
	float HUDTargetIconSize;
	float HUDTargetMarkerOffset;
	float HUDTargetMarkerSize;
	float IconBackgroundAlpha;
	float IconGlowStrengthActive;
	float IconGlowStrengthError;
	float IconGlowStrengthHighlight;
	float IconGlowStrengthNeutral;
	float IconPulseRate;
	float InfoPortalGuideCycleTime;
	float InfoPortalMilestonesCycleTime;
	float InteractionIconInnerRadius;
	float InteractionIconOuterRadius;
	float InteractionInWorldMinScreenDistance;
	float InteractionInWorldMinScreenDistanceV2;
	float InteractionInWorldPitchDistance;
	float InteractionInWorldSeatedNPCHeightAdjust;
	float InteractionInWorldSeatedNPCHeightAdjustV2;
	float InteractionLabelHeight;
	float InteractionLabelHorizontalLineLength;
	float InteractionLabelLineAlpha;
	float InteractionLabelPixelHeightMax;
	float InteractionLabelPixelHeightMin;
	float InteractionLabelRadiusScaler;
	float InteractionLabelSpeedClose;
	float InteractionLabelSpeedOpen;
	float InteractionScanDisplayTime;
	float InteractionScanMinTime;
	float InteractionScanScanTime;
	float InteractionScanSlapOverallTime;
	float InteractionScanSlapScale;
	float InteractionScanSlapTime;
	float InventoryFullMessageRepeatTime;
	float InventoryIconTime;
	float InvSlotGradientFactor;
	float InvSlotGradientFactorMin;
	float InvSlotGradientTime;
	float InWorldInteractionScreenScale;
	float InWorldInteractLabelFarDistance;
	float InWorldInteractLabelFarRange;
	int32_t InWorldInteractLabelHeight;
	float InWorldInteractLabelMinHeadOffset;
	float InWorldInteractLabelNearDistance;
	float InWorldInteractLabelNearRange;
	float InWorldInteractLabelScale;
	float InWorldInteractLabelScaleV2;
	int32_t InWorldInteractLabelWidth;
	float InWorldNGuiScreenScale;
	float InWorldNPCInteractionScreenScale;
	float InWorldScreenForwardOffset;
	float InWorldScreenMinScreenDistance;
	float InWorldScreenScaleDistance;
	float InWorldUIInteractionDistanceWithEyeTrackingEnabled;
	float ItemReceivedMessageTimeToAdd;
	float ItemSlotColourTechChargeRate;
	float KeepHazardBarActiveTime;
	float KeepSecondHazardBarActiveTime;
	float LandNotifyHeightThreshold;
	float LandNotifySpeedThreshold;
	float LandNotifyTimeThreshold;
	float LargeSpaceIconSize;
	float LoadFadeInDefaultTime;
	float LoadingScreenTime;
	float LoadingScreenTravelSpeed;
	float LoadingTravelDistance;
	float LockOnMarkerSize;
	float LockOnMarkerSizeLock;
	float LowerHelmetScreenPitch;
	float LowerHelmetScreenScale;
	float LowHealthShieldFactor;
	float LowHealthShieldMin;
	float MaintenanceIconFadeStart;
	float MaintenanceIconFadeTime;
	float ManualNotificationPauseTime;
	float ManualScrollChangePerInputMax;
	float ManualScrollChangePerInputMin;
	float MarkerComponentOffset;
	float MarkerHorizonApproachAngle;
	float MarkerHorizonMinOffset;
	float MarkerHorizonOffPlanetLightBeamAngle;
	float MarkerHorizonOffsetAngle;
	float MarkerHorizonShipApproachOffset;
	float MarkerOffsetTypeAngle;
	float MarkerOffsetTypeAngleAsteroid;
	float MarkerOffsetTypeAngleBattle;
	float MarkerOffsetTypeAngleBounty;
	float MarkerOffsetTypeAnglePlayerShip;
	float MarkerRingInnerRadius;
	float MarkerRingOuterRadius;
	float MarkerTagAppearDelay;
	int32_t MaxDialogCharSizeIdeographic;
	int32_t MaxDialogCharSizeRoman;
	int32_t MaxNumMessageBeaconIcons;
	float MaxProjectorDistanceFromDefault;
	float MaxProjectorGrabDistance;
	int32_t MaxSubstanceMaxAmountForAmountFraction;
	float MessageNotificationTime;
	float MessageTimeQuick;
	float MilestoneStingDisplayTime;
	float MinimumHoldFill;
	float MinSeasonPlayTimeInDays;
	float MissileCentreOffset;
	float MissileIconAttackPulseAmount;
	float MissileIconAttackPulseTime;
	float MissionCompassIconScaler;
	float MissionDetailsPageBaseHeight;
	int32_t MissionLoopCount;
	int32_t MissionLoopCountPirate;
	float MissionMarkerSize;
	float MissionObjectiveBaseHeight;
	float MissionObjectiveDoneHeight;
	float MissionObjectiveScrollingExtra;
	int32_t MissionSeedOffset;
	int32_t MissionSpecificMissionPercent;
	float MissionStartEndOSDTime;
	float MissionStartEndOSDTimeProcedural;
	float MissionStartEndTime;
	float ModularCustomisationApplyTime;
	float MouseRotateCameraSensitivity;
	float MultiplayerTeleportEffectAppearTime;
	float MultiplayerTeleportEffectDisappearTime;
	float NGuiActiveAreaOffsetTime;
	float NGuiAltPlacementDistanceScrollSpeed;
	float NGuiCursorOffsetMultiplier;
	float NGuiHmdOffset;
	float NGuiModelRotationDegreesX;
	float NGuiModelRotationDegreesY;
	float NGuiModelRotationDegreesZ;
	float NGuiModelViewCdSmoothTime;
	float NGuiModelViewDistanceDiscoveryPage;
	float NGuiModelViewDistanceGlobal;
	float NGuiModelViewDistanceShipPage;
	float NGuiModelViewDistanceSuitPage;
	float NGuiModelViewDistanceWeaponPage;
	float NGuiModelViewFadeInAfterRenderTime;
	float NGuiModelViewFov;
	float NGuiModelViewFractionOfBBHeightAboveReflectivePlane;
	float NGuiMouseSensitivity;
	float NGuiPadSensitivity;
	float NGuiPlacementAngleScrollSpeed;
	float NGuiThumbnailModelRotationDegreesY;
	float NGuiThumbnailModelViewDistance;
	float NotificationBackgroundGradientAlphaInShip;
	float NotificationBackgroundGradientEndOffsetPercentInShip;
	float NotificationBridgeReachDistance;
	float NotificationBuildHintStartTime;
	float NotificationCantFireTime;
	float NotificationDangerTime;
	float NotificationDeviceIdleTime;
	float NotificationDiscoveryIdleTime;
	float NotificationFinalMissionWait;
	float NotificationGoToSpaceStationWait;
	float NotificationHazardMinTimeAfterRecharge;
	float NotificationHazardSafeThreshold;
	float NotificationHazardTimer;
	float NotificationInfoIdleTime;
	float NotificationInteractHintStartTime;
	float NotificationJetpackTime;
	float NotificationMaxPageHintTime;
	float NotificationMessageCycleTime;
	float NotificationMinVisibleTime;
	float NotificationMissionHintTime;
	float NotificationMissionHintTimeCritical;
	float NotificationMissionHintTimeSecondary;
	float NotificationMonolithMissionWait;
	float NotificationNewTechIdleTime;
	float NotificationScanEventMissionIdleTime;
	float NotificationScanTime;
	float NotificationScanTimeCutoff;
	float NotificationShieldTime;
	float NotificationShipBoostMinTime;
	float NotificationShipBoostReminderTime;
	float NotificationShipBoostReminderTimeTutorial;
	float NotificationShipBoostTime;
	float NotificationShipBoostTimeVR;
	float NotificationShipJumpMinTime;
	float NotificationShipJumpReminderTime;
	float NotificationShipJumpReminderTutorial;
	int32_t NotificationsResourceExtractHintCount;
	float NotificationStaminaHintDistanceWalked;
	float NotificationTimeBeforeHeridiumMarker;
	float NotificationUrgentMessageTime;
	float NotificationWaypointReachDistance;
	int32_t NumDeathQuotes;
	float OnFootDamageDirectionIndicatorFadeRange;
	float OnFootDamageDirectionIndicatorRadius;
	float OSDMessagePauseOffscreenAngle;
	int32_t OSDMessageQueueMax;
	int32_t OSDMessageQueueMin;
	float OSDMessageQueueSpeedMultiplier;
	float PadCursorAcceleration;
	float PadCursorMaxSpeedModifier;
	float PadCursorUICurveStrength;
	float PadRotateCameraSensitivity;
	float PageTurnTime;
	float ParagraphAutoScrollSpeed;
	float PauseMenuHoldTime;
	float PetHoverIconSize;
	float PetHUDMarkerExtraFollowInfoDistance;
	float PetHUDMarkerHideDistance;
	float PetHUDMarkerHideDistanceShort;
	float PetHUDMarkerOffset;
	float PetIconSize;
	float PetMoodMarkerOffset;
	float PetSlotUnlockBounceTime;
	float PhotoModeTimeofDayChange;
	float PhotoModeValueAlpha;
	float PirateAttackIndicatorRadius;
	float PirateAttackIndicatorWidth;
	float PirateAttackProbeDisplayFinishFactor;
	float PirateCountdownTime;
	float PirateFreighterSummonAtOffset;
	float PirateFreighterSummonOffset;
	float PirateFreighterSummonOffsetPulse;
	float PlacedMarkerFadeTime;
	float PlanetDataExtraRadius;
	float PlanetLabelAngle;
	float PlanetLabelTime;
	float PlanetPoleEastWestDistanceFromPlayer;
	float PlanetPoleMaxDotProduct;
	float PlanetRaidMarkerOffset;
	float PlanetScanDelayTime;
	float PopupActivateTime;
	float PopupDeactivateTime;
	float PopupDebounceTime;
	float PopupSlotWidthOffset;
	float PopupTitleGradientFactor;
	float PopupValueSectionBaseHeight;
	float PopupValueSectionHeight;
	float PopupXClampOffset;
	float PopupXClampOffsetRightAligned;
	float ProjectorGrabBorderPercent;
	float ProjectorGrabDistanceBias;
	float ProjectorGrabResetTime;
	float ProjectorScale;
	float QuickMenuAlpha;
	float QuickMenuCentrePos;
	float QuickMenuCentreSideOffset;
	float QuickMenuCloseTime;
	float QuickMenuCursorScale;
	float QuickMenuErrorTime;
	float QuickMenuHighlightRate;
	float QuickMenuHoldNavTime;
	float QuickMenuInteractAdjustX;
	float QuickMenuInteractAdjustY;
	int32_t QuickMenuScreenHeight;
	int32_t QuickMenuScreenWidth;
	float QuickMenuSideOffset;
	float QuickMenuSwipeHeightMax;
	float QuickMenuSwipeHeightMin;
	float RadialMenuInnerRadius;
	float RadialMenuInnerRadiusCursor;
	float RadialMenuWedgeOffset;
	float RefinerAutoCloseTime;
	float RefinerBeginDialInnerRadius;
	float RefinerPadStartDecayTime;
	float RefinerPadStartTime;
	float RefinerProgressDialInnerRadius;
	float RepairTechLabelOffset;
	float RepairTechRepairedMessageTime;
	float RepairTechRepairedWaitTime1;
	float RepairTechRepairedWaitTime2;
	float ReportBaseFlashDelay;
	float ReportBaseFlashIntensity;
	float ReportBaseFlashTime;
	float ReportCameraSpeed;
	float ScanEventArrowOffsetMultiplier;
	float ScanEventArrowOffsetMultiplierFresh;
	float ScanEventArrowOffsetMultiplierLerpTime;
	float ScanEventArrowOffsetMultiplierOneEvent;
	float ScanEventArrowPlayerFadeDistance;
	float ScanEventArrowPlayerFadeRange;
	float ScanEventArrowSecondaryAlpha;
	float ScanEventArrowShipFadeDistance;
	float ScanEventArrowShipFadeRange;
	NMS_GameComponents::GcAudioWwiseEvents ScanEventIconAudio;
	float ScannableIconMergeAngle;
	float ScanTime;
	float SeasonalRingChangeTime;
	float SeasonalRingMultiplier;
	float SeasonalRingPulseTime;
	float SeasonEndAutoHighlightDuration;
	float SeasonEndAutoHighlightDurationMilestone;
	NMS_GameComponents::GcAudioWwiseEvents SeasonEndAutoHighlightSFX;
	float SeasonEndRewardsMaxScrollRate;
	float SeasonEndRewardsPageOpenDelayTime;
	int32_t SeasonFinalStageIndex;
	float SeasonMessageDelayTime;
	float SentinelsDisabledHUDMessageTime;
	float SettlementStatFlashSpeed;
	float SettlementStatInnerRadius;
	float SettlementStatOuterRadius;
	float ShieldHazardPulseRate;
	float ShieldHazardPulseThreshold;
	float ShieldPulseTime;
	float ShieldSpringTime;
	float ShipBuilderBarTime;
	float ShipBuilderEndCircleRadius;
	float ShipBuilderLineLengthFadeMax;
	float ShipBuilderLineLengthFadeMin;
	float ShipBuilderLineMinFade;
	float ShipBuilderLineWidth;
	float ShipBuilderSlotDropLength;
	float ShipBuilderSlotLineDefaultWidthFactor;
	float ShipBuilderSlotLineMaxFactor;
	float ShipBuilderSlotLineMinFactor;
	float ShipBuilderSlotStartOffset;
	float ShipBuilderStartCircleRadius;
	float ShipDamageDirectionIndicatorFadeRange;
	float ShipDamageDirectionIndicatorRadius;
	float ShipDesatDamper;
	float ShipFullscreenDamper;
	float ShipFullscreenDamperMin;
	float ShipHeadsUpDisplayDistance;
	float ShipHeadsUpLineFadeTime;
	float ShipHologramInWorldUIHeightAdjust;
	float ShipHologramInWorldUIHeightAdjustV2;
	float ShipHUDHitPointSize;
	float ShipHUDHitPointTime;
	float ShipHUDMarkerHideDistance;
	float ShipHUDMarkerOffset;
	float ShipHUDMaxOffscreenTargetDist;
	float ShipHUDMissileLockSizeMax;
	float ShipHUDMissileLockSizeMin;
	float ShipHUDMissileLockSpringFast;
	float ShipHUDMissileLockSpringSlow;
	float ShipHUDTargetAlpha;
	float ShipHUDTargetArrowLength;
	float ShipHUDTargetArrowsRotationRate;
	float ShipHUDTargetMinDist;
	float ShipHUDTargetRadius;
	float ShipHUDTargetRange;
	float ShipHUDTargetScale;
	float ShipHUDTargetTriangleRadius;
	float ShipOverheatSwitchMessageTime;
	float ShipOverheatSwitchMessageWait;
	float ShipScreenTexScale;
	float ShipSideScreenHeight;
	float ShopInteractionInWorldForcedOffset;
	float ShopInteractionInWorldForcedOffsetV2;
	int32_t ShowDaysIfLessThan;
	int32_t ShowHoursIfLessThan;
	int32_t ShowWeeksIfLessThan;
	float SmallSpaceIconSize;
	float SolidPointerLengthScale;
	float SolidPointerMaxLength;
	float SolidPointerScale;
	float SpaceMapActionScale;
	float SpaceMapAnomalyScale;
	float SpaceMapAspectRatio;
	float SpaceMapCamAngle;
	float SpaceMapCamDistance;
	float SpaceMapCamHeight;
	float SpaceMapCockpitAngle;
	float SpaceMapCockpitScale;
	float SpaceMapCockpitScaleAdjustAlien;
	float SpaceMapCockpitScaleAdjustDropShip;
	float SpaceMapCockpitScaleAdjustFighter;
	float SpaceMapCockpitScaleAdjustRobot;
	float SpaceMapCockpitScaleAdjustRoyal;
	float SpaceMapCockpitScaleAdjustSail;
	float SpaceMapCockpitScaleAdjustScientific;
	float SpaceMapCockpitScaleAdjustShuttle;
	float SpaceMapDistance;
	float SpaceMapDistanceLogScaler;
	float SpaceMapDistanceMultiplier;
	float SpaceMapDistanceScale;
	float SpaceMapFadeAngleMax;
	float SpaceMapFadeAngleMin;
	float SpaceMapFoV;
	float SpaceMapFreighterScale;
	float SpaceMapHorizonThickness;
	float SpaceMapLightPitch;
	float SpaceMapLightYaw;
	float SpaceMapLineBaseFade;
	float SpaceMapLineBaseScale;
	float SpaceMapLineWidth;
	float SpaceMapMarkerScale;
	float SpaceMapMaxTraderDistance;
	float SpaceMapMoonScale;
	float SpaceMapObjectScale;
	float SpaceMapPirateFreighterScale;
	float SpaceMapPirateFrigateScale;
	float SpaceMapPlanetLineOffset;
	float SpaceMapPlanetScale;
	float SpaceMapScaleMin;
	float SpaceMapScaleRangeMax;
	float SpaceMapScaleRangeMin;
	float SpaceMapShipCombineDistance;
	float SpaceMapShipScale;
	float SpaceMapShipScaleMin;
	float SpaceMapStationScale;
	float SpaceMarkersBattleOffset;
	float SpaceMarkersOffset;
	float StackSizeChangeMaxRate;
	float StackSizeChangeMinRate;
	float StackSizeRateChangeRate;
	float StageStingDisplayTime;
	float StandingRewardOSDTime;
	float StatsMessageDelayTime;
	float StoreDialDecayTime;
	float StoreDialHoldTime;
	float StoreDialInnerRadius;
	float StoreDialOuterRadius;
	float SuperchargeGradientFactor;
	float SuperchargeGradientFactorMin;
	float SuperchargeGradientTime;
	float SurveyObjectArrowOffsetMultiplier;
	float TakeoffFuelMessageTime;
	float TalkBoxAlienTextSpeed;
	float TalkBoxAlienTextTimeMax;
	float TalkBoxAlienTextTimeMin;
	float TargetDisplayDamageFlashTime;
	float TargetDisplayScale;
	float TargetDisplayShipScale;
	float TargetDisplayTorpedoScale;
	float TargetMarkerFadeAngleMin;
	float TargetMarkerFadeAngleRange;
	float TargetMarkerScaleEnd;
	float TargetMarkerScaleStart;
	float TargetParallaxMaintenancePageMultiplier;
	float TargetParallaxMouseMultiplier;
	float TargetScreenDistance;
	float TargetScreenFoV;
	float TechDisplayDelayTime;
	float TechPopupBuildLayerHeight;
	float TechPopupInstallLayerHeight;
	float TechPopupRepairLayerHeight;
	float TechPopupRequirementHeight;
	float TextChatMaxDisplayTime;
	float TextChatStayBigAfterTextInput;
	float TextPrintoutMultiplier;
	float TextPrintoutMultiplierAlien;
	float TextTouchScrollCap;
	float ThirdPersonCrosshairCircle1Distance;
	float ThirdPersonCrosshairCircle2Distance;
	float ThirdPersonCrosshairDistance;
	float TimedEventLookTime;
	float TooltipTime;
	float TouchScrollChangePageThreshold;
	float TouchScrollMaxDelta;
	float TouchScrollSpeedMul;
	float TrackCriticalHitSize;
	float TrackCriticalPulseTime;
	float TrackLeadTargetInScale;
	float TrackMissileTargetPulseRate;
	float TrackPoliceFreighterCentreOffset;
	float TrackPrimaryCentreOffset;
	float TrackReticuleAngle;
	float TrackReticuleInactiveTime;
	float TrackReticuleInTime;
	float TrackReticuleRandomDelay;
	float TrackReticuleRandomTime;
	float TrackReticuleScale;
	float TrackScaleCritical;
	float TrackScaleHit;
	float TrackTimerAlpha;
	float TrackTimerIconExclaimRadius;
	float TrackTimerIconInnerRadius;
	float TrackTimerIconOuterRadius;
	float TrackTimerRadarPulseSize;
	float TrackTypeIconSize;
	float TradePageNotifyOffset;
	float TransferPopupCursorOffsetFactor;
	float TransferSendOffscreenBorder;
	float TransitionOffset;
	float TravelLineThickness;
	float TravelTargetRadius;
	float TrialUpsellDeclineDecayTimeQuick;
	float TrialUpsellDeclineDecayTimeSlow;
	float TrialUpsellDeclineDialInnerRadius;
	float TrialUpsellDeclineDialOuterRadius;
	float TrialUpsellDeclineHoldTimeQuick;
	float TrialUpsellDeclineHoldTimeSlow;
	int32_t UnknownWordsToShowInCatalogue;
	float UseZoomedOutBuildCamRadius;
	int32_t VRFaceLockedScreenHeight;
	int32_t VRFaceLockedScreenWidth;
	float WantedDetectMessageTime;
	float WantedDetectMinTimeout;
	float WantedLevelScanAlpha;
	float WantedLevelScannedRate;
	float WantedLevelTimeoutPulseRate;
	float WantedLevelWitnessAlpha;
	float WantedLevelWitnessOffset;
	float WantedLevelWitnessPulseRate;
	float ZoomFactorOverride;
	float ZoomHUDElementsOffsetX;
	float ZoomHUDElementsOffsetY;
	float ZoomHUDElementTime;
	NMS::NMSString0x100 HUDCircleAnimIcon;
	NMS::NMSString0x100 HUDDeathPointIcon;
	NMS::NMSString0x100 HUDHexAnimIcon;
	NMS::NMSString0x100 HUDMarkerColourIcon;
	NMS::NMSString0x100 HUDMarkerIcon;
	NMS::NMSString0x100 HUDMarkerPrimaryIndicatorIcon;
	NMS::NMSString0x100 HUDPointIcon;
	NMS::NMSString0x100 HUDSaveIcon;
	NMS::NMSString0x100 HUDSpaceshipIcon;
	NMS::NMSString0x20 DistanceUnitKM;
	NMS::NMSString0x20 DistanceUnitM;
	NMS::NMSString0x20 DistanceUnitMpS;
	NMS::NMSString0x20 MaxDialogCharSizeIdeographicString;
	NMS::NMSString0x20 MaxDialogCharSizeRomanString;
	NMS::NMSString0x20 VRDistanceWarningUIFile;
	bool BuildMenuUseSmallIconOnPad[16];
	bool AllowInventorySorting;
	bool AllowInWorldDebugBorders;
	bool AllowProjectorRepositioning;
	bool AlwaysCloseQuickMenu;
	NMS_Toolkit::TkCurveType ArrowBounceLeftCurve;
	NMS_Toolkit::TkCurveType ArrowBounceRightCurve;
	bool AutoScrollParagraphs;
	bool BaseBuildingSmoothMenuWhileSnapped;
	bool BigPicking;
	bool BigPickingUsesNumbers;
	bool BinocularScanScreen;
	NMS_Toolkit::TkCurveType CompassCurve;
	bool CreatureInteractLabelUseBB;
	NMS_Toolkit::TkCurveType CreatureReticuleAlphaCurve;
	NMS_Toolkit::TkCurveType CreatureReticuleScaleCurve;
	NMS_Toolkit::TkCurveType CrosshairLeadScaleCurve;
	NMS_Toolkit::TkCurveType CrosshairTargetLockAlphaCurve;
	NMS_Toolkit::TkCurveType CrosshairTargetLockCurve;
	NMS_Toolkit::TkCurveType DamageNumberUpCurve;
	bool DebugInventoryIndices;
	bool DebugMarkerLabels;
	bool DebugMissionLogText;
	bool DebugPopupSizes;
	bool DebugShowMaintenanceScreenCentre;
	bool EnableAccessibleUIOnSwitch;
	bool EnableBlackouts;
	bool EnableBuilderRobotGreekConversion;
	bool EnableCraftingTree;
	bool EnableHandMenuButtons;
	bool EnableHandMenuDebug;
	bool EnableKanaConversion;
	bool EnablePopupUses;
	bool FixedInventoryIconPositions;
	NMS_Toolkit::TkCurveType FrontendBootBarCurve;
	NMS_Toolkit::TkCurveType FrontendConfirmCurve;
	NMS_Toolkit::TkCurveType FrontendDoFCurve;
	bool FrontendDoFEnableBokeh;
	bool HideExtremePlanetNotifications;
	bool HideQuickMenuControls;
	NMS_Toolkit::TkCurveType HUDMarkerActiveCurve;
	NMS_Toolkit::TkCurveType HUDMarkerAnimAlphaCurve;
	NMS_Toolkit::TkCurveType HUDMarkerAnimCurve;
	NMS_Toolkit::TkCurveType HUDPlayerTrackArrowEnergyShieldDepletedCurve;
	NMS_Toolkit::TkCurveType HUDPlayerTrackArrowEnergyShieldStartChargeCurve;
	bool InteractionInWorldPlayerCamAlways;
	NMS_Toolkit::TkCurveType InteractionScanSlapCurve;
	bool LeadTargetEnabled;
	bool ModelRendererBGPass;
	bool ModelRendererPass1;
	bool ModelRendererPass2;
	NMS_Toolkit::TkCurveType NGuiModelViewFadeInAfterRenderCurve;
	bool NGuiUseSeparateLayersForModelAndReflection;
	bool OnlyShowEjectHandlesInVR;
	NMS_Toolkit::TkCurveType PadCursorUICurve;
	NMS_Toolkit::TkCurveType PageTurnCurve;
	NMS_Toolkit::TkCurveType PageTurnFadeCurve;
	NMS_Toolkit::TkCurveType PopupActivateCurve1;
	NMS_Toolkit::TkCurveType PopupActivateCurve2;
	bool ProgressiveDialogStyle;
	bool QuickMenuAllowCycle;
	bool QuickMenuEnableSwipe;
	bool RepairTechUseTechIcon;
	bool ReplaceItemBarWithNumbers;
	bool ShieldHUDAlwaysOn;
	bool ShowDamageNumbers;
	bool ShowDifficultyForBases;
	bool ShowJetpackNotificationForNonTerrain;
	bool ShowOnscreenPredatorMarkers;
	bool ShowPadlockForLockedSettings;
	bool ShowVRDistanceWarning;
	bool SkipShopIntro;
	NMS_Toolkit::TkCurveType SpaceMapDistanceCurve;
	bool SpaceMapShowAnomaly;
	bool SpaceMapShowAnomalyLines;
	bool SpaceMapShowFrieghterLines;
	bool SpaceMapShowFrieghters;
	bool SpaceMapShowNexus;
	bool SpaceMapShowNexusLines;
	bool SpaceMapShowPlanetLines;
	bool SpaceMapShowPlanets;
	bool SpaceMapShowPulseEncounterLines;
	bool SpaceMapShowPulseEncounters;
	bool SpaceMapShowShipLines;
	bool SpaceMapShowShips;
	bool SpaceMapShowStation;
	bool SpaceMapShowStationLines;
	bool SpaceOnlyLeadTargetEnabled;
	bool TechBoxesCanStack;
	NMS_Toolkit::TkCurveType TrackCritCurve;
	NMS_Toolkit::TkCurveType TrackReticuleInAngleCurve;
	NMS_Toolkit::TkCurveType TrackReticuleInCurve;
	bool UseCursorHoverSlowFixedValue;
	bool UseIntermediateMissionGiverOptions;
	bool UseNamesOnShipHUD;
	bool UseSquareSlots;
	bool UseWorldNodesForRepair;

	friend bool operator==(const GcUIGlobals& lhs, const GcUIGlobals& rhs) 
	{
		return lhs.ModelViews == rhs.ModelViews &&
		std::equal(std::begin(lhs.ShipThumbnailRenderSettings), std::end(lhs.ShipThumbnailRenderSettings), std::begin(rhs.ShipThumbnailRenderSettings)) &&
		lhs.HoverShipThumbnailModelView == rhs.HoverShipThumbnailModelView &&
		lhs.LargeMultitoolThumbnailModelView == rhs.LargeMultitoolThumbnailModelView &&
		lhs.MultitoolThumbnailModelView == rhs.MultitoolThumbnailModelView &&
		lhs.PetThumbnailModelView == rhs.PetThumbnailModelView &&
		lhs.RepairBackpackCamera == rhs.RepairBackpackCamera &&
		lhs.RepairCamera == rhs.RepairCamera &&
		lhs.RepairShipCameraInWorld == rhs.RepairShipCameraInWorld &&
		lhs.RepairShipCameraModelView == rhs.RepairShipCameraModelView &&
		lhs.RepairShipCameraVR == rhs.RepairShipCameraVR &&
		lhs.RepairWeaponCamera == rhs.RepairWeaponCamera &&
		lhs.SpookShipThumbnailModelView == rhs.SpookShipThumbnailModelView &&
		lhs.FileBrowserTreeViewTemplate == rhs.FileBrowserTreeViewTemplate &&
		lhs.SceneInfoTreeViewTemplate == rhs.SceneInfoTreeViewTemplate &&
		lhs.SkeletonToolsTreeViewTemplate == rhs.SkeletonToolsTreeViewTemplate &&
		lhs.DebugEditorPreviewEffect == rhs.DebugEditorPreviewEffect &&
		lhs.FreighterSummonScanEffect == rhs.FreighterSummonScanEffect &&
		lhs.OSDEpicItemRewardEffect == rhs.OSDEpicItemRewardEffect &&
		lhs.OSDRareItemRewardEffect == rhs.OSDRareItemRewardEffect &&
		std::equal(std::begin(lhs.SystemHooverLEDColours), std::end(lhs.SystemHooverLEDColours), std::begin(rhs.SystemHooverLEDColours)) &&
		std::equal(std::begin(lhs.SystemHooverStatusBarColours), std::end(lhs.SystemHooverStatusBarColours), std::begin(rhs.SystemHooverStatusBarColours)) &&
		lhs.TargetDisplayScanEffect == rhs.TargetDisplayScanEffect &&
		lhs.SpaceMapAtlasData == rhs.SpaceMapAtlasData &&
		lhs.SpaceMapBlackHoleData == rhs.SpaceMapBlackHoleData &&
		lhs.SpaceMapFreighterData == rhs.SpaceMapFreighterData &&
		lhs.SpaceMapMarkerData == rhs.SpaceMapMarkerData &&
		lhs.SpaceMapNexusData == rhs.SpaceMapNexusData &&
		lhs.SpaceMapPlanetData == rhs.SpaceMapPlanetData &&
		lhs.SpaceMapPulseEncounterData == rhs.SpaceMapPulseEncounterData &&
		lhs.SpaceMapShipData == rhs.SpaceMapShipData &&
		lhs.SpaceMapStationData == rhs.SpaceMapStationData &&
		lhs.AltimeterBandColour1 == rhs.AltimeterBandColour1 &&
		lhs.AltimeterBandColour2 == rhs.AltimeterBandColour2 &&
		lhs.AltimeterColour1 == rhs.AltimeterColour1 &&
		lhs.AltimeterColour2 == rhs.AltimeterColour2 &&
		lhs.BaseComplexityDangerColour == rhs.BaseComplexityDangerColour &&
		lhs.BaseComplexityDefaultColour == rhs.BaseComplexityDefaultColour &&
		lhs.BaseComplexityWarningColour == rhs.BaseComplexityWarningColour &&
		lhs.BinocularPanelLinePointOffset == rhs.BinocularPanelLinePointOffset &&
		lhs.BuildMenuErrorTextColour == rhs.BuildMenuErrorTextColour &&
		lhs.BuildMenuErrorTextFlashColour == rhs.BuildMenuErrorTextFlashColour &&
		lhs.BuildMenuErrorTextOutlineColour == rhs.BuildMenuErrorTextOutlineColour &&
		lhs.BuildMenuErrorTextOutlineFlashColour == rhs.BuildMenuErrorTextOutlineFlashColour &&
		lhs.BuildMenuInfoTextColour == rhs.BuildMenuInfoTextColour &&
		lhs.BuildMenuInfoTextOutlineColour == rhs.BuildMenuInfoTextOutlineColour &&
		lhs.BuildMenuPassiveErrorTextColour == rhs.BuildMenuPassiveErrorTextColour &&
		lhs.BuildMenuPassiveErrorTextOutlineColour == rhs.BuildMenuPassiveErrorTextOutlineColour &&
		lhs.ByteBeatArpGridActiveColour == rhs.ByteBeatArpGridActiveColour &&
		lhs.ByteBeatArpGridInactiveColour == rhs.ByteBeatArpGridInactiveColour &&
		lhs.ByteBeatArpPipActiveColour == rhs.ByteBeatArpPipActiveColour &&
		lhs.ByteBeatArpPipInactiveColour == rhs.ByteBeatArpPipInactiveColour &&
		lhs.ByteBeatRhythmColour0Active == rhs.ByteBeatRhythmColour0Active &&
		lhs.ByteBeatRhythmColour0Inactive == rhs.ByteBeatRhythmColour0Inactive &&
		lhs.ByteBeatRhythmColour1Active == rhs.ByteBeatRhythmColour1Active &&
		lhs.ByteBeatRhythmColour1Inactive == rhs.ByteBeatRhythmColour1Inactive &&
		lhs.ByteBeatRhythmColour2Active == rhs.ByteBeatRhythmColour2Active &&
		lhs.ByteBeatRhythmColour2Inactive == rhs.ByteBeatRhythmColour2Inactive &&
		lhs.ByteBeatSequencerBGColourActive == rhs.ByteBeatSequencerBGColourActive &&
		lhs.ByteBeatSequencerBGColourInactive == rhs.ByteBeatSequencerBGColourInactive &&
		lhs.ByteBeatSequencerHighlightColour == rhs.ByteBeatSequencerHighlightColour &&
		lhs.ByteBeatSequencerRimColourActive == rhs.ByteBeatSequencerRimColourActive &&
		lhs.ByteBeatSequencerRimColourInactive == rhs.ByteBeatSequencerRimColourInactive &&
		lhs.ByteBeatSequencerUnpoweredTint == rhs.ByteBeatSequencerUnpoweredTint &&
		lhs.ByteBeatSliderFGColour == rhs.ByteBeatSliderFGColour &&
		lhs.ByteBeatSliderTextActiveColour == rhs.ByteBeatSliderTextActiveColour &&
		lhs.ByteBeatSliderTextInactiveColour == rhs.ByteBeatSliderTextInactiveColour &&
		lhs.ByteBeatTreeLineColour == rhs.ByteBeatTreeLineColour &&
		lhs.ByteBeatVisGridColour == rhs.ByteBeatVisGridColour &&
		lhs.ByteBeatVisLineColour == rhs.ByteBeatVisLineColour &&
		lhs.CommunicatorMessageColour == rhs.CommunicatorMessageColour &&
		lhs.CrosshairColour == rhs.CrosshairColour &&
		lhs.CrosshairLeadPassiveColour == rhs.CrosshairLeadPassiveColour &&
		lhs.CrosshairLeadThreatColour == rhs.CrosshairLeadThreatColour &&
		lhs.CursorColour == rhs.CursorColour &&
		lhs.CursorConfirmColour == rhs.CursorConfirmColour &&
		lhs.CursorDeleteColour == rhs.CursorDeleteColour &&
		lhs.CursorTransferUploadColour == rhs.CursorTransferUploadColour &&
		lhs.DamageNumberCriticalColour == rhs.DamageNumberCriticalColour &&
		lhs.DamageNumberIneffectiveColour == rhs.DamageNumberIneffectiveColour &&
		lhs.DamageNumberIneffectiveWarningColour == rhs.DamageNumberIneffectiveWarningColour &&
		lhs.DeathMessageColour == rhs.DeathMessageColour &&
		lhs.DebugEditorAxisColourAtActive == rhs.DebugEditorAxisColourAtActive &&
		lhs.DebugEditorAxisColourAtInactive == rhs.DebugEditorAxisColourAtInactive &&
		lhs.DebugEditorAxisColourRightActive == rhs.DebugEditorAxisColourRightActive &&
		lhs.DebugEditorAxisColourRightInactive == rhs.DebugEditorAxisColourRightInactive &&
		lhs.DebugEditorAxisColourUpActive == rhs.DebugEditorAxisColourUpActive &&
		lhs.DebugEditorAxisColourUpInactive == rhs.DebugEditorAxisColourUpInactive &&
		lhs.DefaultRefinerOffsetIn == rhs.DefaultRefinerOffsetIn &&
		lhs.DefaultRefinerOffsetOut == rhs.DefaultRefinerOffsetOut &&
		lhs.EnergyBgColour == rhs.EnergyBgColour &&
		lhs.EnergyBgPulseColour == rhs.EnergyBgPulseColour &&
		lhs.FaceLockedScreenOffset == rhs.FaceLockedScreenOffset &&
		lhs.FreighterSummonScanEffectColourBlocked == rhs.FreighterSummonScanEffectColourBlocked &&
		lhs.FreighterSummonScanEffectColourHighlight == rhs.FreighterSummonScanEffectColourHighlight &&
		lhs.FrontendCursorBackgroundColour == rhs.FrontendCursorBackgroundColour &&
		lhs.FuelBgColour == rhs.FuelBgColour &&
		lhs.GridBackgroundNegativeColour == rhs.GridBackgroundNegativeColour &&
		lhs.GridBackgroundNeutralColour == rhs.GridBackgroundNeutralColour &&
		lhs.GridBackgroundPositiveColour == rhs.GridBackgroundPositiveColour &&
		lhs.GridDisconnectedColour == rhs.GridDisconnectedColour &&
		lhs.GridOfflineColour == rhs.GridOfflineColour &&
		lhs.GridOnlineColour == rhs.GridOnlineColour &&
		lhs.HazardBgPulseColour == rhs.HazardBgPulseColour &&
		lhs.HazardDamagePulseColour == rhs.HazardDamagePulseColour &&
		lhs.HmdFramerateScreenOffset == rhs.HmdFramerateScreenOffset &&
		lhs.HUDMarkerColour == rhs.HUDMarkerColour &&
		lhs.HUDNotifyColour == rhs.HUDNotifyColour &&
		lhs.HUDOutpostColour == rhs.HUDOutpostColour &&
		lhs.HUDPlayerTrackArrowDamageGlowHullHitMaxColour == rhs.HUDPlayerTrackArrowDamageGlowHullHitMaxColour &&
		lhs.HUDPlayerTrackArrowDamageGlowHullHitMinColour == rhs.HUDPlayerTrackArrowDamageGlowHullHitMinColour &&
		lhs.HUDPlayerTrackArrowDamageGlowShieldHitMaxColour == rhs.HUDPlayerTrackArrowDamageGlowShieldHitMaxColour &&
		lhs.HUDPlayerTrackArrowDamageGlowShieldHitMinColour == rhs.HUDPlayerTrackArrowDamageGlowShieldHitMinColour &&
		lhs.HUDPlayerTrackArrowDotColour == rhs.HUDPlayerTrackArrowDotColour &&
		lhs.HUDPlayerTrackArrowDotColourPirate == rhs.HUDPlayerTrackArrowDotColourPirate &&
		lhs.HUDPlayerTrackArrowDotColourPolice == rhs.HUDPlayerTrackArrowDotColourPolice &&
		lhs.HUDPlayerTrackArrowDotColourTrader == rhs.HUDPlayerTrackArrowDotColourTrader &&
		lhs.HUDPlayerTrackArrowEnergyShieldColour == rhs.HUDPlayerTrackArrowEnergyShieldColour &&
		lhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowMaxColour == rhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowMaxColour &&
		lhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowMinColour == rhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowMinColour &&
		lhs.HUDPlayerTrackArrowEnergyShieldLowColour == rhs.HUDPlayerTrackArrowEnergyShieldLowColour &&
		lhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowMaxColour == rhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowMaxColour &&
		lhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowMinColour == rhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowMinColour &&
		lhs.HUDPlayerTrackArrowTextColour == rhs.HUDPlayerTrackArrowTextColour &&
		lhs.HUDRelicMarkerColourDiscovered == rhs.HUDRelicMarkerColourDiscovered &&
		lhs.HUDRelicMarkerColourUnknown == rhs.HUDRelicMarkerColourUnknown &&
		lhs.HUDSpaceshipColour == rhs.HUDSpaceshipColour &&
		lhs.HUDWarningColour == rhs.HUDWarningColour &&
		lhs.IconGlowColourActive == rhs.IconGlowColourActive &&
		lhs.IconGlowColourError == rhs.IconGlowColourError &&
		lhs.IconGlowColourHighlight == rhs.IconGlowColourHighlight &&
		lhs.IconGlowColourNeutral == rhs.IconGlowColourNeutral &&
		lhs.InteractionLabelCostColour == rhs.InteractionLabelCostColour &&
		lhs.InteractionLabelPickupColour == rhs.InteractionLabelPickupColour &&
		lhs.InteractionLabelPickupFillColour == rhs.InteractionLabelPickupFillColour &&
		lhs.InvSlotGradientBaseColour == rhs.InvSlotGradientBaseColour &&
		lhs.InWorldInteractLabelCentreOffset == rhs.InWorldInteractLabelCentreOffset &&
		lhs.InWorldInteractLabelLineOffset == rhs.InWorldInteractLabelLineOffset &&
		lhs.InWorldInteractLabelTopOffset == rhs.InWorldInteractLabelTopOffset &&
		lhs.InWorldNGuiScreenRotation == rhs.InWorldNGuiScreenRotation &&
		lhs.InWorldStaffBinocsScreenOffset == rhs.InWorldStaffBinocsScreenOffset &&
		lhs.ItemSlotColourPartiallyInstalled == rhs.ItemSlotColourPartiallyInstalled &&
		lhs.ItemSlotColourProduct == rhs.ItemSlotColourProduct &&
		lhs.ItemSlotColourSubstance == rhs.ItemSlotColourSubstance &&
		lhs.ItemSlotColourTech == rhs.ItemSlotColourTech &&
		lhs.ItemSlotColourTechCharge == rhs.ItemSlotColourTechCharge &&
		lhs.ItemSlotColourTechDamage == rhs.ItemSlotColourTechDamage &&
		lhs.ItemSlotTextColourProduct == rhs.ItemSlotTextColourProduct &&
		lhs.ItemSlotTextColourSubstance == rhs.ItemSlotTextColourSubstance &&
		lhs.ItemSlotTextColourTech == rhs.ItemSlotTextColourTech &&
		lhs.JoaoBoxCompletedObjectiveColour == rhs.JoaoBoxCompletedObjectiveColour &&
		lhs.LockOnMarkerActiveColour == rhs.LockOnMarkerActiveColour &&
		lhs.LowerHelmetScreenOffset == rhs.LowerHelmetScreenOffset &&
		lhs.MarkerRingBGColour == rhs.MarkerRingBGColour &&
		lhs.MissionOSDMessageBarColour == rhs.MissionOSDMessageBarColour &&
		lhs.MultiplayerMissionParticipantsColour == rhs.MultiplayerMissionParticipantsColour &&
		lhs.NetworkPopupTextDisabledColour == rhs.NetworkPopupTextDisabledColour &&
		lhs.NetworkPopupTextEnabledColour == rhs.NetworkPopupTextEnabledColour &&
		lhs.NGuiModelTranslationFactors == rhs.NGuiModelTranslationFactors &&
		lhs.NGuiModelTranslationFactorsInteraction == rhs.NGuiModelTranslationFactorsInteraction &&
		lhs.NGuiThumbnailModelTranslationFactors == rhs.NGuiThumbnailModelTranslationFactors &&
		lhs.NotificationDangerColour == rhs.NotificationDangerColour &&
		lhs.NotificationDefaultColour == rhs.NotificationDefaultColour &&
		lhs.NotificationInfoColour == rhs.NotificationInfoColour &&
		lhs.NotificationUrgentColour == rhs.NotificationUrgentColour &&
		lhs.PhotoModeSelectedColour == rhs.PhotoModeSelectedColour &&
		lhs.PhotoModeUnselectedColour == rhs.PhotoModeUnselectedColour &&
		lhs.PickedItemBorderColour == rhs.PickedItemBorderColour &&
		lhs.PinnedRecipeBorder == rhs.PinnedRecipeBorder &&
		lhs.ProcProductColourCommon == rhs.ProcProductColourCommon &&
		lhs.ProcProductColourRare == rhs.ProcProductColourRare &&
		lhs.ProcProductColourUncommon == rhs.ProcProductColourUncommon &&
		lhs.PulseAlertColour == rhs.PulseAlertColour &&
		lhs.PulseDamageColour == rhs.PulseDamageColour &&
		lhs.QuickMenuSelectedItemColour1 == rhs.QuickMenuSelectedItemColour1 &&
		lhs.QuickMenuSelectedItemColour2 == rhs.QuickMenuSelectedItemColour2 &&
		lhs.RadialMenuInnerColourDisabled == rhs.RadialMenuInnerColourDisabled &&
		lhs.RadialMenuInnerColourSelected == rhs.RadialMenuInnerColourSelected &&
		lhs.RadialMenuInnerColourUnselected == rhs.RadialMenuInnerColourUnselected &&
		lhs.RadialMenuOuterColourDisabled == rhs.RadialMenuOuterColourDisabled &&
		lhs.RadialMenuOuterColourSelected == rhs.RadialMenuOuterColourSelected &&
		lhs.RadialMenuOuterColourUnselected == rhs.RadialMenuOuterColourUnselected &&
		lhs.RefinerBackgroundColour == rhs.RefinerBackgroundColour &&
		lhs.RefinerErrorBackgroundColour == rhs.RefinerErrorBackgroundColour &&
		lhs.RemappedControlColour == rhs.RemappedControlColour &&
		lhs.SelectedControlColour == rhs.SelectedControlColour &&
		lhs.SettlementStatBackgroundColour == rhs.SettlementStatBackgroundColour &&
		lhs.SettlementStatColour == rhs.SettlementStatColour &&
		lhs.ShieldBgColour == rhs.ShieldBgColour &&
		lhs.ShieldColour == rhs.ShieldColour &&
		lhs.ShieldDamageBgColour == rhs.ShieldDamageBgColour &&
		lhs.ShieldDamageColour == rhs.ShieldDamageColour &&
		lhs.ShipBuilderLineColour == rhs.ShipBuilderLineColour &&
		lhs.ShipBuilderLineColourHologram == rhs.ShipBuilderLineColourHologram &&
		lhs.ShipHUDAimTargetColour == rhs.ShipHUDAimTargetColour &&
		lhs.ShipHUDAimTargetCritColour == rhs.ShipHUDAimTargetCritColour &&
		lhs.ShipHUDTargetArrowsColourLocal == rhs.ShipHUDTargetArrowsColourLocal &&
		lhs.ShipHUDTargetArrowsColourOutOfRange == rhs.ShipHUDTargetArrowsColourOutOfRange &&
		lhs.ShipHUDTargetArrowsColourThreat == rhs.ShipHUDTargetArrowsColourThreat &&
		lhs.SpaceEnemyShipLineColour == rhs.SpaceEnemyShipLineColour &&
		lhs.SpaceFriendlyShipLineColour == rhs.SpaceFriendlyShipLineColour &&
		lhs.SpaceMapAttackColour == rhs.SpaceMapAttackColour &&
		lhs.SpaceMapCockpitOffset == rhs.SpaceMapCockpitOffset &&
		lhs.SpaceMapDeathPointColour == rhs.SpaceMapDeathPointColour &&
		lhs.SpaceMapNeutralColour == rhs.SpaceMapNeutralColour &&
		lhs.SpaceMapOtherPlayerColour == rhs.SpaceMapOtherPlayerColour &&
		lhs.SpaceMapPosScaler == rhs.SpaceMapPosScaler &&
		lhs.SpaceMapSquadronColour == rhs.SpaceMapSquadronColour &&
		lhs.SpaceMapThreatColour == rhs.SpaceMapThreatColour &&
		lhs.SpookMeterColour == rhs.SpookMeterColour &&
		lhs.StoreDialFillColour == rhs.StoreDialFillColour &&
		lhs.SuperchargeGradientBaseColour == rhs.SuperchargeGradientBaseColour &&
		lhs.SuperchargeGradientBlendColour == rhs.SuperchargeGradientBlendColour &&
		lhs.SuperchargeGradientTechColour == rhs.SuperchargeGradientTechColour &&
		lhs.SuperchargePopupColour == rhs.SuperchargePopupColour &&
		lhs.TargetDisplayShipOffset == rhs.TargetDisplayShipOffset &&
		lhs.TargetDisplayTorpedoOffset == rhs.TargetDisplayTorpedoOffset &&
		lhs.TargetMarkerColour == rhs.TargetMarkerColour &&
		lhs.TargetMarkerHighlightColour == rhs.TargetMarkerHighlightColour &&
		lhs.TouchButtonChargeIndicatorColour == rhs.TouchButtonChargeIndicatorColour &&
		lhs.TransferSendPopupColour == rhs.TransferSendPopupColour &&
		lhs.TravelLineColour == rhs.TravelLineColour &&
		lhs.TravelLineInvalidColour == rhs.TravelLineInvalidColour &&
		lhs.TravelLineNotAllowedColour == rhs.TravelLineNotAllowedColour &&
		lhs.TravelLineTooFarColour == rhs.TravelLineTooFarColour &&
		lhs.TravelLineTooSteepColour == rhs.TravelLineTooSteepColour &&
		lhs.TravelTargetColour == rhs.TravelTargetColour &&
		lhs.UnseenItemColour == rhs.UnseenItemColour &&
		lhs.WantedColour == rhs.WantedColour &&
		lhs.WristMenuDefaultBorderColour == rhs.WristMenuDefaultBorderColour &&
		lhs.WristMenuRepositionableBorderColour == rhs.WristMenuRepositionableBorderColour &&
		std::equal(std::begin(lhs.WonderCreatureCategoryConfig), std::end(lhs.WonderCreatureCategoryConfig), std::begin(rhs.WonderCreatureCategoryConfig)) &&
		std::equal(std::begin(lhs.WonderTreasureCategoryConfig), std::end(lhs.WonderTreasureCategoryConfig), std::begin(rhs.WonderTreasureCategoryConfig)) &&
		std::equal(std::begin(lhs.WonderCustomCategoryConfig), std::end(lhs.WonderCustomCategoryConfig), std::begin(rhs.WonderCustomCategoryConfig)) &&
		std::equal(std::begin(lhs.WonderPlanetCategoryConfig), std::end(lhs.WonderPlanetCategoryConfig), std::begin(rhs.WonderPlanetCategoryConfig)) &&
		std::equal(std::begin(lhs.WonderWeirdBasePartCategoryConfig), std::end(lhs.WonderWeirdBasePartCategoryConfig), std::begin(rhs.WonderWeirdBasePartCategoryConfig)) &&
		std::equal(std::begin(lhs.BuildMenuOnActionDisabledLocIDs), std::end(lhs.BuildMenuOnActionDisabledLocIDs), std::begin(rhs.BuildMenuOnActionDisabledLocIDs)) &&
		std::equal(std::begin(lhs.BuildMenuOnActionErrorLocIDs), std::end(lhs.BuildMenuOnActionErrorLocIDs), std::begin(rhs.BuildMenuOnActionErrorLocIDs)) &&
		std::equal(std::begin(lhs.BuildMenuOnActionLocIDs), std::end(lhs.BuildMenuOnActionLocIDs), std::begin(rhs.BuildMenuOnActionLocIDs)) &&
		std::equal(std::begin(lhs.WonderFloraCategoryConfig), std::end(lhs.WonderFloraCategoryConfig), std::begin(rhs.WonderFloraCategoryConfig)) &&
		std::equal(std::begin(lhs.WonderMineralCategoryConfig), std::end(lhs.WonderMineralCategoryConfig), std::begin(rhs.WonderMineralCategoryConfig)) &&
		lhs.IntroTiming == rhs.IntroTiming &&
		lhs.IntroTimingFreighter == rhs.IntroTimingFreighter &&
		lhs.IntroTimingFreighterRepaired == rhs.IntroTimingFreighterRepaired &&
		std::equal(std::begin(lhs.SettlementStatFormatLoc), std::end(lhs.SettlementStatFormatLoc), std::begin(rhs.SettlementStatFormatLoc)) &&
		std::equal(std::begin(lhs.SettlementStatLoc), std::end(lhs.SettlementStatLoc), std::begin(rhs.SettlementStatLoc)) &&
		std::equal(std::begin(lhs.SettlementStatBasicImages), std::end(lhs.SettlementStatBasicImages), std::begin(rhs.SettlementStatBasicImages)) &&
		std::equal(std::begin(lhs.SettlementStatNegativeImages), std::end(lhs.SettlementStatNegativeImages), std::begin(rhs.SettlementStatNegativeImages)) &&
		std::equal(std::begin(lhs.SettlementStatPositiveImages), std::end(lhs.SettlementStatPositiveImages), std::begin(rhs.SettlementStatPositiveImages)) &&
		std::equal(std::begin(lhs.WonderTypeIcons), std::end(lhs.WonderTypeIcons), std::begin(rhs.WonderTypeIcons)) &&
		lhs.BaseBuildingPartsGridExpandableIcon == rhs.BaseBuildingPartsGridExpandableIcon &&
		lhs.BaseBuildingPartsGridExpandedIcon == rhs.BaseBuildingPartsGridExpandedIcon &&
		lhs.BaseBuildingPartsGridRetractableIcon == rhs.BaseBuildingPartsGridRetractableIcon &&
		lhs.RefinerPopupEmptyOutputIcon == rhs.RefinerPopupEmptyOutputIcon &&
		lhs.CamoNormalTexture == rhs.CamoNormalTexture &&
		lhs.CamoTexture == rhs.CamoTexture &&
		lhs.DebugInventoryHint == rhs.DebugInventoryHint &&
		lhs.ExplorationLogMissionID == rhs.ExplorationLogMissionID &&
		lhs.HazardDistortionParams == rhs.HazardDistortionParams &&
		lhs.HazardHeightmaps == rhs.HazardHeightmaps &&
		lhs.HazardHeightmapsVR == rhs.HazardHeightmapsVR &&
		lhs.HazardNormalMaps == rhs.HazardNormalMaps &&
		lhs.HazardNormalMapsVR == rhs.HazardNormalMapsVR &&
		lhs.HazardTextures == rhs.HazardTextures &&
		lhs.HazardTexturesVR == rhs.HazardTexturesVR &&
		lhs.InventoryIconPositions == rhs.InventoryIconPositions &&
		lhs.MultiplayerMissionInteractEndTrigger == rhs.MultiplayerMissionInteractEndTrigger &&
		lhs.MultiplayerMissionInteractStartTrigger == rhs.MultiplayerMissionInteractStartTrigger &&
		lhs.SeasonalRingTable == rhs.SeasonalRingTable &&
		lhs.ShipHUDTargetArrowsColour == rhs.ShipHUDTargetArrowsColour &&
		lhs.ShowStatWithDeathQuote == rhs.ShowStatWithDeathQuote &&
		lhs.StatIcons == rhs.StatIcons &&
		lhs.VehicleTypeRepairCamera == rhs.VehicleTypeRepairCamera &&
		std::equal(std::begin(lhs.CrosshairTargetLockSizeSpecific), std::end(lhs.CrosshairTargetLockSizeSpecific), std::begin(rhs.CrosshairTargetLockSizeSpecific)) &&
		lhs.WorldUISettings == rhs.WorldUISettings &&
		std::equal(std::begin(lhs.WonderValueModifiersCreature), std::end(lhs.WonderValueModifiersCreature), std::begin(rhs.WonderValueModifiersCreature)) &&
		std::equal(std::begin(lhs.WonderValueModifiersPlanet), std::end(lhs.WonderValueModifiersPlanet), std::begin(rhs.WonderValueModifiersPlanet)) &&
		std::equal(std::begin(lhs.WonderValueModifiersFlora), std::end(lhs.WonderValueModifiersFlora), std::begin(rhs.WonderValueModifiersFlora)) &&
		std::equal(std::begin(lhs.WonderValueModifiersMineral), std::end(lhs.WonderValueModifiersMineral), std::begin(rhs.WonderValueModifiersMineral)) &&
		lhs.BuildProductSlotAction == rhs.BuildProductSlotAction &&
		lhs.ChargeSlotAction == rhs.ChargeSlotAction &&
		lhs.InstallTechSlotAction == rhs.InstallTechSlotAction &&
		lhs.InventoryHintAction == rhs.InventoryHintAction &&
		lhs.InventoryHintActionNoGlow == rhs.InventoryHintActionNoGlow &&
		lhs.NewSlotPulseAction == rhs.NewSlotPulseAction &&
		lhs.NewSlotRevealAction == rhs.NewSlotRevealAction &&
		lhs.RepairSlotAction == rhs.RepairSlotAction &&
		lhs.InteractionDOFDisabled == rhs.InteractionDOFDisabled &&
		lhs.PulseBarData == rhs.PulseBarData &&
		lhs.PulseIconData == rhs.PulseIconData &&
		lhs.CrosshairLeadHitCurve == rhs.CrosshairLeadHitCurve &&
		lhs.DiscoveryHelperTimings == rhs.DiscoveryHelperTimings &&
		lhs.ShootableHitCurve == rhs.ShootableHitCurve &&
		lhs.BinocularEdgeFade == rhs.BinocularEdgeFade &&
		lhs.BinocularsDiscoveryPos == rhs.BinocularsDiscoveryPos &&
		lhs.CompassCentre == rhs.CompassCentre &&
		lhs.CursorlessDialogPageCursorOffset == rhs.CursorlessDialogPageCursorOffset &&
		lhs.DamageNumberSideSpeed == rhs.DamageNumberSideSpeed &&
		lhs.DialogPageCursorOffset == rhs.DialogPageCursorOffset &&
		lhs.HUDMarkerCompassPrimaryIndicatorOffset == rhs.HUDMarkerCompassPrimaryIndicatorOffset &&
		lhs.HUDMarkerPrimaryIndicatorOffset == rhs.HUDMarkerPrimaryIndicatorOffset &&
		lhs.HUDPlayerSentinelPulseFreq == rhs.HUDPlayerSentinelPulseFreq &&
		lhs.HUDPlayerSentinelPulseSize == rhs.HUDPlayerSentinelPulseSize &&
		lhs.HUDPlayerTrackArrowDamageGlowSize == rhs.HUDPlayerTrackArrowDamageGlowSize &&
		lhs.HUDPlayerTrackArrowEnergyShieldGlowSize == rhs.HUDPlayerTrackArrowEnergyShieldGlowSize &&
		lhs.HUDPlayerTrackArrowEnergyShieldSize == rhs.HUDPlayerTrackArrowEnergyShieldSize &&
		lhs.HUDPlayerTrackArrowHealthSize == rhs.HUDPlayerTrackArrowHealthSize &&
		lhs.HUDPlayerTrackArrowIconPulseSize == rhs.HUDPlayerTrackArrowIconPulseSize &&
		lhs.HUDPlayerTrackIconOffset == rhs.HUDPlayerTrackIconOffset &&
		lhs.HUDTargetHealthIconOffset == rhs.HUDTargetHealthIconOffset &&
		lhs.HUDTargetHealthOffset == rhs.HUDTargetHealthOffset &&
		lhs.HUDTargetHealthSize == rhs.HUDTargetHealthSize &&
		lhs.InteractionLabelOffset == rhs.InteractionLabelOffset &&
		lhs.InteractionLabelOffset_1 == rhs.InteractionLabelOffset_1 &&
		lhs.InteractionLabelScreenMax == rhs.InteractionLabelScreenMax &&
		lhs.InteractionLabelScreenMin == rhs.InteractionLabelScreenMin &&
		lhs.InteractionLabelSize == rhs.InteractionLabelSize &&
		lhs.InteractionLabelTouchAreaMax == rhs.InteractionLabelTouchAreaMax &&
		lhs.InteractionLabelTouchAreaMin == rhs.InteractionLabelTouchAreaMin &&
		lhs.InteractionWorldParallax == rhs.InteractionWorldParallax &&
		lhs.IntermediateInteractionPageCursorOffset == rhs.IntermediateInteractionPageCursorOffset &&
		lhs.InWorldGameGuiAlignment == rhs.InWorldGameGuiAlignment &&
		lhs.InWorldInteractLabelAlignment == rhs.InWorldInteractLabelAlignment &&
		lhs.InWorldNGuiParallax == rhs.InWorldNGuiParallax &&
		lhs.MainMenuSaveIconPosition == rhs.MainMenuSaveIconPosition &&
		lhs.MarkerDistanceVRAlignment == rhs.MarkerDistanceVRAlignment &&
		lhs.ModelViewWorldParallax == rhs.ModelViewWorldParallax &&
		lhs.NGuiMax2DParallax == rhs.NGuiMax2DParallax &&
		lhs.NGuiMin2DParallax == rhs.NGuiMin2DParallax &&
		lhs.NGuiModelParallax == rhs.NGuiModelParallax &&
		lhs.NGuiShipInteractParallax == rhs.NGuiShipInteractParallax &&
		lhs.NGuiTouchPadSensitivity == rhs.NGuiTouchPadSensitivity &&
		lhs.NotificationMissionHintPauseTime == rhs.NotificationMissionHintPauseTime &&
		lhs.NotificationMissionHintPauseTimeCritical == rhs.NotificationMissionHintPauseTimeCritical &&
		lhs.NotificationMissionHintPauseTimeSecondary == rhs.NotificationMissionHintPauseTimeSecondary &&
		lhs.PersonalRefinerInputPos == rhs.PersonalRefinerInputPos &&
		lhs.PersonalRefinerOutputPos == rhs.PersonalRefinerOutputPos &&
		lhs.PickingCursorOffset == rhs.PickingCursorOffset &&
		lhs.PlanetLabelOffset == rhs.PlanetLabelOffset &&
		lhs.PlanetLineOffset == rhs.PlanetLineOffset &&
		lhs.PlanetMeasureOffset == rhs.PlanetMeasureOffset &&
		lhs.RefinerParallax == rhs.RefinerParallax &&
		lhs.SaveIconPosition == rhs.SaveIconPosition &&
		lhs.ScanLabelOffset == rhs.ScanLabelOffset &&
		lhs.TargetScreenCamOffset == rhs.TargetScreenCamOffset &&
		lhs.TrackCriticalHitOffset == rhs.TrackCriticalHitOffset &&
		lhs.TrackTypeIconOffset == rhs.TrackTypeIconOffset &&
		lhs.AbandonedFreighterAirlockRoomNumber == rhs.AbandonedFreighterAirlockRoomNumber &&
		lhs.AccessibleUIHUDPopupScale == rhs.AccessibleUIHUDPopupScale &&
		lhs.AccessibleUIPopupScale == rhs.AccessibleUIPopupScale &&
		lhs.AlignmentRequiredToDisableFrostedGlass == rhs.AlignmentRequiredToDisableFrostedGlass &&
		lhs.AltimeterLineSpacing == rhs.AltimeterLineSpacing &&
		lhs.AltimeterMax == rhs.AltimeterMax &&
		lhs.AltimeterMin == rhs.AltimeterMin &&
		lhs.AltimeterMinValue == rhs.AltimeterMinValue &&
		lhs.AltimeterResolution == rhs.AltimeterResolution &&
		lhs.AltimeterTextSize == rhs.AltimeterTextSize &&
		lhs.AltimeterWidth == rhs.AltimeterWidth &&
		lhs.AlwaysOnHazardMultiplierCold == rhs.AlwaysOnHazardMultiplierCold &&
		lhs.AlwaysOnHazardMultiplierHeat == rhs.AlwaysOnHazardMultiplierHeat &&
		lhs.AlwaysOnHazardMultiplierRad == rhs.AlwaysOnHazardMultiplierRad &&
		lhs.AlwaysOnHazardMultiplierSpook == rhs.AlwaysOnHazardMultiplierSpook &&
		lhs.AlwaysOnHazardMultiplierTox == rhs.AlwaysOnHazardMultiplierTox &&
		lhs.AlwaysOnHazardStrengthCold == rhs.AlwaysOnHazardStrengthCold &&
		lhs.AlwaysOnHazardStrengthHeat == rhs.AlwaysOnHazardStrengthHeat &&
		lhs.AlwaysOnHazardStrengthRad == rhs.AlwaysOnHazardStrengthRad &&
		lhs.AlwaysOnHazardStrengthSpook == rhs.AlwaysOnHazardStrengthSpook &&
		lhs.AlwaysOnHazardStrengthTox == rhs.AlwaysOnHazardStrengthTox &&
		lhs.AlwaysOnHazardThreshold == rhs.AlwaysOnHazardThreshold &&
		lhs.AlwaysShowIconFadeDistance == rhs.AlwaysShowIconFadeDistance &&
		lhs.AlwaysShowIconFadeRange == rhs.AlwaysShowIconFadeRange &&
		lhs.AmbientModeFadeTime == rhs.AmbientModeFadeTime &&
		lhs.ArrowBounceLeftRate1 == rhs.ArrowBounceLeftRate1 &&
		lhs.ArrowBounceLeftRate2 == rhs.ArrowBounceLeftRate2 &&
		lhs.ArrowBounceLeftRate3 == rhs.ArrowBounceLeftRate3 &&
		lhs.ArrowBounceLength == rhs.ArrowBounceLength &&
		lhs.ArrowBounceRate == rhs.ArrowBounceRate &&
		lhs.ArrowBounceRightRate1 == rhs.ArrowBounceRightRate1 &&
		lhs.ArrowBounceRightRate2 == rhs.ArrowBounceRightRate2 &&
		lhs.AsteroidMarkerMinDisplayAngleDegrees == rhs.AsteroidMarkerMinDisplayAngleDegrees &&
		lhs.AsteroidMarkerMinDisplayDistance == rhs.AsteroidMarkerMinDisplayDistance &&
		lhs.BaseBuildingFreeRotateDelayBeforeAudioStops == rhs.BaseBuildingFreeRotateDelayBeforeAudioStops &&
		lhs.BaseBuildingFreeRotateDelayBeforeReset == rhs.BaseBuildingFreeRotateDelayBeforeReset &&
		lhs.BaseBuildingFreeRotateSpeedPadMultiplier == rhs.BaseBuildingFreeRotateSpeedPadMultiplier &&
		lhs.BaseBuildingInputHighlightAlpha == rhs.BaseBuildingInputHighlightAlpha &&
		lhs.BaseBuildingInputHighlightDuration == rhs.BaseBuildingInputHighlightDuration &&
		lhs.BaseBuildingMaxFreeRotateSpeed == rhs.BaseBuildingMaxFreeRotateSpeed &&
		lhs.BaseBuildingMinFreeRotateSpeed == rhs.BaseBuildingMinFreeRotateSpeed &&
		lhs.BaseBuildingPartsGridBreadcrumbFlashDuration == rhs.BaseBuildingPartsGridBreadcrumbFlashDuration &&
		lhs.BaseBuildingPartsGridMaxCursorRestorationTime == rhs.BaseBuildingPartsGridMaxCursorRestorationTime &&
		lhs.BaseBuildingPartsGridMinVisibilityForActive == rhs.BaseBuildingPartsGridMinVisibilityForActive &&
		lhs.BaseBuildingPartsGridPopupDelay == rhs.BaseBuildingPartsGridPopupDelay &&
		lhs.BaseBuildingPartsGridScrollSpeed == rhs.BaseBuildingPartsGridScrollSpeed &&
		lhs.BaseBuildingPinHighlightDuration == rhs.BaseBuildingPinHighlightDuration &&
		lhs.BaseBuildingRotationResetRate == rhs.BaseBuildingRotationResetRate &&
		lhs.BaseBuildingScaleSpeed == rhs.BaseBuildingScaleSpeed &&
		lhs.BaseBuildingTimeToMaxRotationSpeed == rhs.BaseBuildingTimeToMaxRotationSpeed &&
		lhs.BaseBuildingUIAdjustTime == rhs.BaseBuildingUIAdjustTime &&
		lhs.BaseBuildingUIErrorFadeTime == rhs.BaseBuildingUIErrorFadeTime &&
		lhs.BaseBuildingUIHorizontalSafeArea == rhs.BaseBuildingUIHorizontalSafeArea &&
		lhs.BaseBuildingUIVerticalOffset == rhs.BaseBuildingUIVerticalOffset &&
		lhs.BaseBuildingUIVerticalOffsetEdit == rhs.BaseBuildingUIVerticalOffsetEdit &&
		lhs.BaseBuildingUIVerticalOffsetFromBB == rhs.BaseBuildingUIVerticalOffsetFromBB &&
		lhs.BaseBuildingUIVerticalPosWiring == rhs.BaseBuildingUIVerticalPosWiring &&
		lhs.BaseBuildingUIVerticalSafeArea == rhs.BaseBuildingUIVerticalSafeArea &&
		lhs.BaseComplexityDangerFactor == rhs.BaseComplexityDangerFactor &&
		lhs.BaseComplexityWarningFactor == rhs.BaseComplexityWarningFactor &&
		lhs.BattleHUDBarInterpTime == rhs.BattleHUDBarInterpTime &&
		lhs.BeaconHUDMarkerOffset == rhs.BeaconHUDMarkerOffset &&
		lhs.BinocularMarkerSideAngle == rhs.BinocularMarkerSideAngle &&
		lhs.BinocularMarkerUpAngle == rhs.BinocularMarkerUpAngle &&
		lhs.BinocularsAltUIRescaleFactor == rhs.BinocularsAltUIRescaleFactor &&
		lhs.BinocularScreenOffset == rhs.BinocularScreenOffset &&
		lhs.BinocularScreenScale == rhs.BinocularScreenScale &&
		lhs.BinocularsFarIconDist == rhs.BinocularsFarIconDist &&
		lhs.BinocularsFarIconFadeDist == rhs.BinocularsFarIconFadeDist &&
		lhs.BinocularsFarIconOpacity == rhs.BinocularsFarIconOpacity &&
		lhs.BinocularsMidIconOpacity == rhs.BinocularsMidIconOpacity &&
		lhs.BinocularsNearIconDist == rhs.BinocularsNearIconDist &&
		lhs.BinocularsNearIconFadeDist == rhs.BinocularsNearIconFadeDist &&
		lhs.BinocularsNearIconOpacity == rhs.BinocularsNearIconOpacity &&
		lhs.BountyMarkerOffset == rhs.BountyMarkerOffset &&
		lhs.BuildingShopMaxItems == rhs.BuildingShopMaxItems &&
		lhs.BuildMenuActionMessageDuration == rhs.BuildMenuActionMessageDuration &&
		lhs.BuildMenuItemNavAnimTime == rhs.BuildMenuItemNavAnimTime &&
		lhs.BuildMenuItemNextNavAnimTime == rhs.BuildMenuItemNextNavAnimTime &&
		lhs.BuildMenuItemNextNavAnimWait == rhs.BuildMenuItemNextNavAnimWait &&
		lhs.ByteBeatArpLineWidth == rhs.ByteBeatArpLineWidth &&
		lhs.ByteBeatArpPad == rhs.ByteBeatArpPad &&
		lhs.ByteBeatArpRadius == rhs.ByteBeatArpRadius &&
		lhs.ByteBeatIconLineWidth == rhs.ByteBeatIconLineWidth &&
		lhs.ByteBeatIconPad == rhs.ByteBeatIconPad &&
		lhs.ByteBeatPartSequencerPad == rhs.ByteBeatPartSequencerPad &&
		lhs.ByteBeatRhythmBeatPad == rhs.ByteBeatRhythmBeatPad &&
		lhs.ByteBeatRhythmSequencerActiveSaturation == rhs.ByteBeatRhythmSequencerActiveSaturation &&
		lhs.ByteBeatRhythmSequencerInactiveSaturation == rhs.ByteBeatRhythmSequencerInactiveSaturation &&
		lhs.ByteBeatSequencerActiveSaturation == rhs.ByteBeatSequencerActiveSaturation &&
		lhs.ByteBeatSequencerCornerRadius == rhs.ByteBeatSequencerCornerRadius &&
		lhs.ByteBeatSequencerHighlightLineWidth == rhs.ByteBeatSequencerHighlightLineWidth &&
		lhs.ByteBeatSequencerInactiveSaturation == rhs.ByteBeatSequencerInactiveSaturation &&
		lhs.ByteBeatSequencerLineWidth == rhs.ByteBeatSequencerLineWidth &&
		lhs.ByteBeatSequencerPad == rhs.ByteBeatSequencerPad &&
		lhs.ByteBeatSequencerUnpoweredTintStrength == rhs.ByteBeatSequencerUnpoweredTintStrength &&
		lhs.ByteBeatSliderCornerRadius == rhs.ByteBeatSliderCornerRadius &&
		lhs.ByteBeatSliderLineWidth == rhs.ByteBeatSliderLineWidth &&
		lhs.ByteBeatSliderPad == rhs.ByteBeatSliderPad &&
		lhs.ByteBeatSwitchPanelAlpha == rhs.ByteBeatSwitchPanelAlpha &&
		lhs.ByteBeatSwitchPanelSplit == rhs.ByteBeatSwitchPanelSplit &&
		lhs.ByteBeatTreeLineWidth == rhs.ByteBeatTreeLineWidth &&
		lhs.ByteBeatVisLineWidth == rhs.ByteBeatVisLineWidth &&
		lhs.ClosestDoorMarkerBuffer == rhs.ClosestDoorMarkerBuffer &&
		lhs.CockpitGlassDefrostTime == rhs.CockpitGlassDefrostTime &&
		lhs.CockpitGlassFrostTime == rhs.CockpitGlassFrostTime &&
		lhs.CommunicatorMessageTime == rhs.CommunicatorMessageTime &&
		lhs.CompassAngleClamp == rhs.CompassAngleClamp &&
		lhs.CompassAngleClampSpace == rhs.CompassAngleClampSpace &&
		lhs.CompassAngleFade == rhs.CompassAngleFade &&
		lhs.CompassDistanceMarkerMinScale == rhs.CompassDistanceMarkerMinScale &&
		lhs.CompassDistanceMaxAngle == rhs.CompassDistanceMaxAngle &&
		lhs.CompassDistanceScale == rhs.CompassDistanceScale &&
		lhs.CompassDistanceScaleMin == rhs.CompassDistanceScaleMin &&
		lhs.CompassDistanceScaleRange == rhs.CompassDistanceScaleRange &&
		lhs.CompassDistanceShipMinScale == rhs.CompassDistanceShipMinScale &&
		lhs.CompassDistanceSpaceScaleMin == rhs.CompassDistanceSpaceScaleMin &&
		lhs.CompassDistanceSpaceScaleRange == rhs.CompassDistanceSpaceScaleRange &&
		lhs.CompassDistanceYOffset == rhs.CompassDistanceYOffset &&
		lhs.CompassHeight == rhs.CompassHeight &&
		lhs.CompassIconOffsetVR == rhs.CompassIconOffsetVR &&
		lhs.CompassLineContractionEndAngle == rhs.CompassLineContractionEndAngle &&
		lhs.CompassLineContractionStartAngle == rhs.CompassLineContractionStartAngle &&
		lhs.CompassLineContractionTargetAngle == rhs.CompassLineContractionTargetAngle &&
		lhs.CompassLineNotchAngleRange == rhs.CompassLineNotchAngleRange &&
		lhs.CompassLineNotchLength == rhs.CompassLineNotchLength &&
		lhs.CompassLineNotchThickness == rhs.CompassLineNotchThickness &&
		lhs.CompassLineNumNotches == rhs.CompassLineNumNotches &&
		lhs.CompassLineOffset == rhs.CompassLineOffset &&
		lhs.CompassLineThickness == rhs.CompassLineThickness &&
		lhs.CompassScreenHeight == rhs.CompassScreenHeight &&
		lhs.CompassScreenWidth == rhs.CompassScreenWidth &&
		lhs.CompassWidth == rhs.CompassWidth &&
		lhs.ConsoleTextSpeed == rhs.ConsoleTextSpeed &&
		lhs.ConsoleTextTimeMax == rhs.ConsoleTextTimeMax &&
		lhs.ConsoleTextTimeMin == rhs.ConsoleTextTimeMin &&
		lhs.ControlScrollDistance == rhs.ControlScrollDistance &&
		lhs.ControlScrollSteps == rhs.ControlScrollSteps &&
		lhs.CreatureDistanceAlpha == rhs.CreatureDistanceAlpha &&
		lhs.CreatureDistanceDisplayAngle == rhs.CreatureDistanceDisplayAngle &&
		lhs.CreatureDistanceFadeTime == rhs.CreatureDistanceFadeTime &&
		lhs.CreatureDistanceOffsetY == rhs.CreatureDistanceOffsetY &&
		lhs.CreatureDistanceShadowOffset == rhs.CreatureDistanceShadowOffset &&
		lhs.CreatureDistanceSize == rhs.CreatureDistanceSize &&
		lhs.CreatureIconMergeAngle == rhs.CreatureIconMergeAngle &&
		lhs.CreatureIconOffset == rhs.CreatureIconOffset &&
		lhs.CreatureIconOffsetPhysics == rhs.CreatureIconOffsetPhysics &&
		lhs.CreatureInteractLabelOffsetY == rhs.CreatureInteractLabelOffsetY &&
		lhs.CreatureReticuleScale == rhs.CreatureReticuleScale &&
		lhs.CreatureRoutineMarkerTime == rhs.CreatureRoutineMarkerTime &&
		lhs.CreatureRoutineRegionsPerFrame == rhs.CreatureRoutineRegionsPerFrame &&
		lhs.CriticalMessageTime == rhs.CriticalMessageTime &&
		lhs.CrosshairAimOffTime == rhs.CrosshairAimOffTime &&
		lhs.CrosshairAimTime == rhs.CrosshairAimTime &&
		lhs.CrosshairInnerMinFade == rhs.CrosshairInnerMinFade &&
		lhs.CrosshairInnerMinFadeRange == rhs.CrosshairInnerMinFadeRange &&
		lhs.CrosshairInterceptAlpha == rhs.CrosshairInterceptAlpha &&
		lhs.CrosshairInterceptBaseSize == rhs.CrosshairInterceptBaseSize &&
		lhs.CrosshairInterceptCentreBaseSize == rhs.CrosshairInterceptCentreBaseSize &&
		lhs.CrosshairInterceptLockRange == rhs.CrosshairInterceptLockRange &&
		lhs.CrosshairInterceptSize == rhs.CrosshairInterceptSize &&
		lhs.CrosshairInterceptSpringTime == rhs.CrosshairInterceptSpringTime &&
		lhs.CrosshairLeadCornerOffset == rhs.CrosshairLeadCornerOffset &&
		lhs.CrosshairLeadFadeRange == rhs.CrosshairLeadFadeRange &&
		lhs.CrosshairLeadFadeSize == rhs.CrosshairLeadFadeSize &&
		lhs.CrosshairLeadInDelay == rhs.CrosshairLeadInDelay &&
		lhs.CrosshairLeadInTime == rhs.CrosshairLeadInTime &&
		lhs.CrosshairLeadPulseSize == rhs.CrosshairLeadPulseSize &&
		lhs.CrosshairLeadScaleIn == rhs.CrosshairLeadScaleIn &&
		lhs.CrosshairLeadSpring == rhs.CrosshairLeadSpring &&
		lhs.CrosshairLeadSpringOff == rhs.CrosshairLeadSpringOff &&
		lhs.CrosshairLeadTopLock == rhs.CrosshairLeadTopLock &&
		lhs.CrosshairLeadTopOffset == rhs.CrosshairLeadTopOffset &&
		lhs.CrosshairOffsetHmd == rhs.CrosshairOffsetHmd &&
		lhs.CrosshairOffsetHmdUp == rhs.CrosshairOffsetHmdUp &&
		lhs.CrosshairScaleHmd == rhs.CrosshairScaleHmd &&
		lhs.CrosshairScreenHeight == rhs.CrosshairScreenHeight &&
		lhs.CrosshairScreenWidth == rhs.CrosshairScreenWidth &&
		lhs.CrosshairSpringAimTime == rhs.CrosshairSpringAimTime &&
		lhs.CrosshairSpringTime == rhs.CrosshairSpringTime &&
		lhs.CrosshairTargetLockSize == rhs.CrosshairTargetLockSize &&
		lhs.CursorHoverSlowFactor == rhs.CursorHoverSlowFactor &&
		lhs.CursorHoverSlowFactorMin == rhs.CursorHoverSlowFactorMin &&
		lhs.CursorHoverSlowFixedValue == rhs.CursorHoverSlowFixedValue &&
		lhs.DamageDirectionIndicatorOnScreenRadiusMultiplier == rhs.DamageDirectionIndicatorOnScreenRadiusMultiplier &&
		lhs.DamageImpactMergeTime == rhs.DamageImpactMergeTime &&
		lhs.DamageImpactMinDistance == rhs.DamageImpactMinDistance &&
		lhs.DamageImpactTimeBetweenNumbers == rhs.DamageImpactTimeBetweenNumbers &&
		lhs.DamageNumberBlackAlpha == rhs.DamageNumberBlackAlpha &&
		lhs.DamageNumberFadeIn == rhs.DamageNumberFadeIn &&
		lhs.DamageNumberFadeOut == rhs.DamageNumberFadeOut &&
		lhs.DamageNumberLaserMaxDamage == rhs.DamageNumberLaserMaxDamage &&
		lhs.DamageNumberLaserMinDamage == rhs.DamageNumberLaserMinDamage &&
		lhs.DamageNumberOffsetX == rhs.DamageNumberOffsetX &&
		lhs.DamageNumberOffsetY == rhs.DamageNumberOffsetY &&
		lhs.DamageNumberOutline == rhs.DamageNumberOutline &&
		lhs.DamageNumberOutline2 == rhs.DamageNumberOutline2 &&
		lhs.DamageNumberSize == rhs.DamageNumberSize &&
		lhs.DamageNumberSizeCritMultiplier == rhs.DamageNumberSizeCritMultiplier &&
		lhs.DamageNumberSizeInShip == rhs.DamageNumberSizeInShip &&
		lhs.DamageNumberSizeLaserMultiplier == rhs.DamageNumberSizeLaserMultiplier &&
		lhs.DamageNumberTime == rhs.DamageNumberTime &&
		lhs.DamageNumberUpOffset == rhs.DamageNumberUpOffset &&
		lhs.DamagePerSecondSampleTime == rhs.DamagePerSecondSampleTime &&
		lhs.DamageScannableHighlightTime == rhs.DamageScannableHighlightTime &&
		lhs.DamageTrackArrowTime == rhs.DamageTrackArrowTime &&
		lhs.DeathMessageSwitchTime == rhs.DeathMessageSwitchTime &&
		lhs.DeathMessageTotalTime == rhs.DeathMessageTotalTime &&
		lhs.DebugMedalRank == rhs.DebugMedalRank &&
		lhs.DeepSeaHazardMultiplierCold == rhs.DeepSeaHazardMultiplierCold &&
		lhs.DeepSeaHazardMultiplierHeat == rhs.DeepSeaHazardMultiplierHeat &&
		lhs.DeepSeaHazardMultiplierRad == rhs.DeepSeaHazardMultiplierRad &&
		lhs.DeepSeaHazardMultiplierTox == rhs.DeepSeaHazardMultiplierTox &&
		lhs.DelayBeforeHidingHangarAfterGalaxyMap == rhs.DelayBeforeHidingHangarAfterGalaxyMap &&
		lhs.DelayBeforeShowingHangarIntoGalaxyMap == rhs.DelayBeforeShowingHangarIntoGalaxyMap &&
		lhs.DescriptionTextDelay == rhs.DescriptionTextDelay &&
		lhs.DescriptionTextSpeed == rhs.DescriptionTextSpeed &&
		lhs.DescriptionTextSpeedProgressive == rhs.DescriptionTextSpeedProgressive &&
		lhs.DescriptionTextTimeMax == rhs.DescriptionTextTimeMax &&
		lhs.DescriptionTextTimeMin == rhs.DescriptionTextTimeMin &&
		lhs.DetailMessageDismissTime == rhs.DetailMessageDismissTime &&
		lhs.DroneIndicatorCentreRadiusMax == rhs.DroneIndicatorCentreRadiusMax &&
		lhs.DroneIndicatorCentreRadiusMin == rhs.DroneIndicatorCentreRadiusMin &&
		lhs.DroneIndicatorFadeRange == rhs.DroneIndicatorFadeRange &&
		lhs.DroneIndicatorRadius == rhs.DroneIndicatorRadius &&
		lhs.EggModifiyAnimLoopTime == rhs.EggModifiyAnimLoopTime &&
		lhs.EggModifiyAnimMaxSize == rhs.EggModifiyAnimMaxSize &&
		lhs.EndOfSeasonAlertDelay == rhs.EndOfSeasonAlertDelay &&
		lhs.ExocraftHUDMarkerHideDistance == rhs.ExocraftHUDMarkerHideDistance &&
		lhs.ExocraftHUDMarkerOffset == rhs.ExocraftHUDMarkerOffset &&
		lhs.ExpeditionStageChangeTime == rhs.ExpeditionStageChangeTime &&
		lhs.EyeTrackingCursorBlendRate == rhs.EyeTrackingCursorBlendRate &&
		lhs.EyeTrackingCursorBlendRateGameModeSelect == rhs.EyeTrackingCursorBlendRateGameModeSelect &&
		lhs.EyeTrackingPopupLookAwayTime == rhs.EyeTrackingPopupLookAwayTime &&
		lhs.EyeTrackingStickyHoverTime == rhs.EyeTrackingStickyHoverTime &&
		lhs.EyeTrackingTimeBeforePopupsActivate == rhs.EyeTrackingTimeBeforePopupsActivate &&
		lhs.FeedFrigateAnimAlphaChange == rhs.FeedFrigateAnimAlphaChange &&
		lhs.FeedFrigateAnimNumPeriods == rhs.FeedFrigateAnimNumPeriods &&
		lhs.FeedFrigateAnimPeriod == rhs.FeedFrigateAnimPeriod &&
		lhs.FeedFrigateAnimScaleChange == rhs.FeedFrigateAnimScaleChange &&
		lhs.ForceOpenHazardProtInventoryThreshold == rhs.ForceOpenHazardProtInventoryThreshold &&
		lhs.FreighterCommanderMarkerMinDistance == rhs.FreighterCommanderMarkerMinDistance &&
		lhs.FreighterEntranceOffset == rhs.FreighterEntranceOffset &&
		lhs.FreighterHighlightRange == rhs.FreighterHighlightRange &&
		lhs.FreighterLeaderIconDistance == rhs.FreighterLeaderIconDistance &&
		lhs.FreighterMegaWarpTransitionTime == rhs.FreighterMegaWarpTransitionTime &&
		lhs.FreighterSummonDelay == rhs.FreighterSummonDelay &&
		lhs.FreighterSummonGridSize == rhs.FreighterSummonGridSize &&
		lhs.FreighterSummonLookTime == rhs.FreighterSummonLookTime &&
		lhs.FreighterSummonOffset == rhs.FreighterSummonOffset &&
		lhs.FreighterSummonOffsetPulse == rhs.FreighterSummonOffsetPulse &&
		lhs.FreighterSummonPitch == rhs.FreighterSummonPitch &&
		lhs.FreighterSummonPlanetOffset == rhs.FreighterSummonPlanetOffset &&
		lhs.FreighterSummonPulseFadeAmount == rhs.FreighterSummonPulseFadeAmount &&
		lhs.FreighterSummonPulseRate == rhs.FreighterSummonPulseRate &&
		lhs.FreighterSummonTurn == rhs.FreighterSummonTurn &&
		lhs.FreighterSummonTurnAngleIncrement == rhs.FreighterSummonTurnAngleIncrement &&
		lhs.FreighterSummonTurnNumTries == rhs.FreighterSummonTurnNumTries &&
		lhs.FreighterSurfaceMinAngle == rhs.FreighterSurfaceMinAngle &&
		lhs.FrigateDamageIconVisibilityDistance == rhs.FrigateDamageIconVisibilityDistance &&
		lhs.FrigateIconOffset == rhs.FrigateIconOffset &&
		lhs.FrigatePurchaseNotificationResetDistanceMultiplier == rhs.FrigatePurchaseNotificationResetDistanceMultiplier &&
		lhs.FrontendActivateSplit == rhs.FrontendActivateSplit &&
		lhs.FrontendActivateTime == rhs.FrontendActivateTime &&
		lhs.FrontendBGAlpha == rhs.FrontendBGAlpha &&
		lhs.FrontendBootBarTime == rhs.FrontendBootBarTime &&
		lhs.FrontendBootTime == rhs.FrontendBootTime &&
		lhs.FrontendConfirmTime == rhs.FrontendConfirmTime &&
		lhs.FrontendConfirmTimeFast == rhs.FrontendConfirmTimeFast &&
		lhs.FrontendConfirmTimeMouseMultiplier == rhs.FrontendConfirmTimeMouseMultiplier &&
		lhs.FrontendConfirmTimeSlow == rhs.FrontendConfirmTimeSlow &&
		lhs.FrontendCursorOffset == rhs.FrontendCursorOffset &&
		lhs.FrontendCursorSize == rhs.FrontendCursorSize &&
		lhs.FrontendCursorWidth == rhs.FrontendCursorWidth &&
		lhs.FrontendDeactivateSplit == rhs.FrontendDeactivateSplit &&
		lhs.FrontendDeactivateTime == rhs.FrontendDeactivateTime &&
		lhs.FrontendDoFBlurMultiplier == rhs.FrontendDoFBlurMultiplier &&
		lhs.FrontendDoFFarPlaneFadeMax == rhs.FrontendDoFFarPlaneFadeMax &&
		lhs.FrontendDoFFarPlaneFadeMin == rhs.FrontendDoFFarPlaneFadeMin &&
		lhs.FrontendDoFFarPlaneMax == rhs.FrontendDoFFarPlaneMax &&
		lhs.FrontendDoFFarPlaneMin == rhs.FrontendDoFFarPlaneMin &&
		lhs.FrontendDoFNearPlaneMax == rhs.FrontendDoFNearPlaneMax &&
		lhs.FrontendDoFNearPlaneMin == rhs.FrontendDoFNearPlaneMin &&
		lhs.FrontendOffsetVR == rhs.FrontendOffsetVR &&
		lhs.FrontendShineSpeed == rhs.FrontendShineSpeed &&
		lhs.FrontendStatCircleWidth == rhs.FrontendStatCircleWidth &&
		lhs.FrontendStatCircleWidthExtra == rhs.FrontendStatCircleWidthExtra &&
		lhs.FrontendTitleFontSpacing == rhs.FrontendTitleFontSpacing &&
		lhs.FrontendToolbarTextHeight == rhs.FrontendToolbarTextHeight &&
		lhs.FrontendToolbarTextHeightSelected == rhs.FrontendToolbarTextHeightSelected &&
		lhs.FrontendTouchConfirmTimeFastMultiplier == rhs.FrontendTouchConfirmTimeFastMultiplier &&
		lhs.FrontendWaitFadeProgressiveDialogOut == rhs.FrontendWaitFadeProgressiveDialogOut &&
		lhs.FrontendWaitFadeTextFrameOut == rhs.FrontendWaitFadeTextFrameOut &&
		lhs.FrontendWaitFadeTextOut == rhs.FrontendWaitFadeTextOut &&
		lhs.FrontendWaitInitial == rhs.FrontendWaitInitial &&
		lhs.FrontendWaitInitialTerminal == rhs.FrontendWaitInitialTerminal &&
		lhs.FrontendWaitResponse == rhs.FrontendWaitResponse &&
		lhs.FrontendWaitResponseOffset == rhs.FrontendWaitResponseOffset &&
		lhs.GalaxyMapRadialBorder == rhs.GalaxyMapRadialBorder &&
		lhs.GalaxyMapRadialTargetDist == rhs.GalaxyMapRadialTargetDist &&
		lhs.GalmapDiscoveryOffsetVR == rhs.GalmapDiscoveryOffsetVR &&
		lhs.GameModeSelectColourFadeTime == rhs.GameModeSelectColourFadeTime &&
		lhs.GridDecayRateSwitchValue == rhs.GridDecayRateSwitchValue &&
		lhs.GridFlickerAmp == rhs.GridFlickerAmp &&
		lhs.GridFlickerBaseAlpha == rhs.GridFlickerBaseAlpha &&
		lhs.GridFlickerFreq == rhs.GridFlickerFreq &&
		lhs.HandButtonClickTime == rhs.HandButtonClickTime &&
		lhs.HandButtonCursorScale == rhs.HandButtonCursorScale &&
		lhs.HandButtonDotRadius == rhs.HandButtonDotRadius &&
		lhs.HandButtonFrontendCursorScale == rhs.HandButtonFrontendCursorScale &&
		lhs.HandButtonNearDistance == rhs.HandButtonNearDistance &&
		lhs.HandButtonPostClickTime == rhs.HandButtonPostClickTime &&
		lhs.HandButtonPulseRadius == rhs.HandButtonPulseRadius &&
		lhs.HandButtonPulseThickness == rhs.HandButtonPulseThickness &&
		lhs.HandButtonPushDistance == rhs.HandButtonPushDistance &&
		lhs.HandButtonRadius == rhs.HandButtonRadius &&
		lhs.HandButtonRadiusClick == rhs.HandButtonRadiusClick &&
		lhs.HandButtonRadiusTouch == rhs.HandButtonRadiusTouch &&
		lhs.HandButtonRadiusTouchNear == rhs.HandButtonRadiusTouchNear &&
		lhs.HandButtonRadiusTouchNearActive == rhs.HandButtonRadiusTouchNearActive &&
		lhs.HandButtonReleaseThreshold == rhs.HandButtonReleaseThreshold &&
		lhs.HandButtonReleaseThresholdInit == rhs.HandButtonReleaseThresholdInit &&
		lhs.HandButtonThickness == rhs.HandButtonThickness &&
		lhs.HandButtonTouchReturnTime == rhs.HandButtonTouchReturnTime &&
		lhs.HandControlButtonSize == rhs.HandControlButtonSize &&
		lhs.HandControlMenuAngle == rhs.HandControlMenuAngle &&
		lhs.HandControlMenuCursorScale == rhs.HandControlMenuCursorScale &&
		lhs.HandControlMenuDepth == rhs.HandControlMenuDepth &&
		lhs.HandControlMenuMoveActionDistance == rhs.HandControlMenuMoveActionDistance &&
		lhs.HandControlMenuMoveDistance == rhs.HandControlMenuMoveDistance &&
		lhs.HandControlMenuMoveDistanceScroll == rhs.HandControlMenuMoveDistanceScroll &&
		lhs.HandControlMenuMoveDistanceVertical == rhs.HandControlMenuMoveDistanceVertical &&
		lhs.HandControlMenuSelectRadius == rhs.HandControlMenuSelectRadius &&
		lhs.HandControlMenuSelectRadius1 == rhs.HandControlMenuSelectRadius1 &&
		lhs.HandControlMenuSelectRadius2 == rhs.HandControlMenuSelectRadius2 &&
		lhs.HandControlMenuSurfaceOffset == rhs.HandControlMenuSurfaceOffset &&
		lhs.HandControlPointActiveMargin == rhs.HandControlPointActiveMargin &&
		lhs.HandControlPointMargin == rhs.HandControlPointMargin &&
		lhs.HandControlTopMenuSelectRadius == rhs.HandControlTopMenuSelectRadius &&
		lhs.HandheldZoomFactor == rhs.HandheldZoomFactor &&
		lhs.HandScreenGraphicsHeight == rhs.HandScreenGraphicsHeight &&
		lhs.HandScreenGraphicsWidth == rhs.HandScreenGraphicsWidth &&
		lhs.HandScreenHeight == rhs.HandScreenHeight &&
		lhs.HandScreenNearActivateDistance == rhs.HandScreenNearActivateDistance &&
		lhs.HandScreenWeaponHeight == rhs.HandScreenWeaponHeight &&
		lhs.HandScreenWeaponWidth == rhs.HandScreenWeaponWidth &&
		lhs.HandScreenWidth == rhs.HandScreenWidth &&
		lhs.HatchAlphaBase == rhs.HatchAlphaBase &&
		lhs.HatchAlphaCursor == rhs.HatchAlphaCursor &&
		lhs.HatchAlphaMain == rhs.HatchAlphaMain &&
		lhs.HatchCount == rhs.HatchCount &&
		lhs.HatchCursorRadius == rhs.HatchCursorRadius &&
		lhs.HatchPulsePauseTime == rhs.HatchPulsePauseTime &&
		lhs.HatchPulseSpeed == rhs.HatchPulseSpeed &&
		lhs.HatchPulseWidth == rhs.HatchPulseWidth &&
		lhs.HazardArrowsLevel2Threshold == rhs.HazardArrowsLevel2Threshold &&
		lhs.HazardArrowsLevel3Threshold == rhs.HazardArrowsLevel3Threshold &&
		lhs.HazardBarPulseTime == rhs.HazardBarPulseTime &&
		lhs.HazardPainPulseStrength == rhs.HazardPainPulseStrength &&
		lhs.HazardPulseRate == rhs.HazardPulseRate &&
		lhs.HazardScreenEffectPulseRate == rhs.HazardScreenEffectPulseRate &&
		lhs.HazardScreenEffectPulseTime == rhs.HazardScreenEffectPulseTime &&
		lhs.HazardScreenEffectStrength == rhs.HazardScreenEffectStrength &&
		lhs.HazardWarningPulseStrength == rhs.HazardWarningPulseStrength &&
		lhs.HazardWarningPulseTime == rhs.HazardWarningPulseTime &&
		lhs.HitMarkerPulseSize == rhs.HitMarkerPulseSize &&
		lhs.HitMarkerPulseSizeStatic == rhs.HitMarkerPulseSizeStatic &&
		lhs.HitMarkerPulseTime == rhs.HitMarkerPulseTime &&
		lhs.HmdFramerateScreenPitch == rhs.HmdFramerateScreenPitch &&
		lhs.HoldTimerResetTime == rhs.HoldTimerResetTime &&
		lhs.HoverOffscreenBorder == rhs.HoverOffscreenBorder &&
		lhs.HoverOffscreenBorderXVR == rhs.HoverOffscreenBorderXVR &&
		lhs.HoverOffscreenBorderYAltUI == rhs.HoverOffscreenBorderYAltUI &&
		lhs.HoverPopAnimDuration == rhs.HoverPopAnimDuration &&
		lhs.HoverPopScaleModification == rhs.HoverPopScaleModification &&
		lhs.HUDDisplayTime == rhs.HUDDisplayTime &&
		lhs.HUDDroneCombatPulse == rhs.HUDDroneCombatPulse &&
		lhs.HUDDroneHealingPulse == rhs.HUDDroneHealingPulse &&
		lhs.HUDDroneSummoningPulse == rhs.HUDDroneSummoningPulse &&
		lhs.HUDElementsOffsetHMDBottom == rhs.HUDElementsOffsetHMDBottom &&
		lhs.HUDElementsOffsetHMDSide == rhs.HUDElementsOffsetHMDSide &&
		lhs.HUDElementsOffsetHMDTop == rhs.HUDElementsOffsetHMDTop &&
		lhs.HUDElementsOffsetX_0 == rhs.HUDElementsOffsetX_0 &&
		lhs.HUDElementsOffsetX_1 == rhs.HUDElementsOffsetX_1 &&
		lhs.HUDElementsOffsetX_2 == rhs.HUDElementsOffsetX_2 &&
		lhs.HUDElementsOffsetX_3 == rhs.HUDElementsOffsetX_3 &&
		lhs.HUDElementsOffsetX_4 == rhs.HUDElementsOffsetX_4 &&
		lhs.HUDElementsOffsetX_5 == rhs.HUDElementsOffsetX_5 &&
		lhs.HUDElementsOffsetY_0 == rhs.HUDElementsOffsetY_0 &&
		lhs.HUDElementsOffsetY_1 == rhs.HUDElementsOffsetY_1 &&
		lhs.HUDElementsOffsetY_2 == rhs.HUDElementsOffsetY_2 &&
		lhs.HUDElementsOffsetY_3 == rhs.HUDElementsOffsetY_3 &&
		lhs.HUDElementsOffsetY_4 == rhs.HUDElementsOffsetY_4 &&
		lhs.HUDElementsOffsetY_5 == rhs.HUDElementsOffsetY_5 &&
		lhs.HUDMarkerActiveTime == rhs.HUDMarkerActiveTime &&
		lhs.HUDMarkerAlpha == rhs.HUDMarkerAlpha &&
		lhs.HUDMarkerAnimLoopTime == rhs.HUDMarkerAnimLoopTime &&
		lhs.HUDMarkerAnimOffset == rhs.HUDMarkerAnimOffset &&
		lhs.HUDMarkerAnimScale == rhs.HUDMarkerAnimScale &&
		lhs.HUDMarkerAnimSpeed == rhs.HUDMarkerAnimSpeed &&
		lhs.HUDMarkerDistanceOrTimeDistance == rhs.HUDMarkerDistanceOrTimeDistance &&
		lhs.HUDMarkerFarDistance == rhs.HUDMarkerFarDistance &&
		lhs.HUDMarkerFarFadeRange == rhs.HUDMarkerFarFadeRange &&
		lhs.HUDMarkerHorizonBlendRange == rhs.HUDMarkerHorizonBlendRange &&
		lhs.HUDMarkerHoverAngleTestGround == rhs.HUDMarkerHoverAngleTestGround &&
		lhs.HUDMarkerHoverAngleTestGroundHmd == rhs.HUDMarkerHoverAngleTestGroundHmd &&
		lhs.HUDMarkerHoverAngleTestShip == rhs.HUDMarkerHoverAngleTestShip &&
		lhs.HUDMarkerHoverShowLargeAngleTest == rhs.HUDMarkerHoverShowLargeAngleTest &&
		lhs.HUDMarkerIconHoverMinScale == rhs.HUDMarkerIconHoverMinScale &&
		lhs.HUDMarkerLabelArriveDistance == rhs.HUDMarkerLabelArriveDistance &&
		lhs.HUDMarkerLabelBaseWidth == rhs.HUDMarkerLabelBaseWidth &&
		lhs.HUDMarkerLabelDisplayDistance == rhs.HUDMarkerLabelDisplayDistance &&
		lhs.HUDMarkerLabelWidthMultiplier == rhs.HUDMarkerLabelWidthMultiplier &&
		lhs.HUDMarkerModelFadeMinHeight == rhs.HUDMarkerModelFadeMinHeight &&
		lhs.HUDMarkerModelFadeRange == rhs.HUDMarkerModelFadeRange &&
		lhs.HUDMarkerNearFadeDistance == rhs.HUDMarkerNearFadeDistance &&
		lhs.HUDMarkerNearFadeRange == rhs.HUDMarkerNearFadeRange &&
		lhs.HUDMarkerNonActiveMissionAlpha == rhs.HUDMarkerNonActiveMissionAlpha &&
		lhs.HUDMarkerObjectMinScreenDistance == rhs.HUDMarkerObjectMinScreenDistance &&
		lhs.HUDMarkerOffset == rhs.HUDMarkerOffset &&
		lhs.HUDMarkerPrimaryIndicatorSize == rhs.HUDMarkerPrimaryIndicatorSize &&
		lhs.HUDMarkerScalerMin == rhs.HUDMarkerScalerMin &&
		lhs.HUDMarkerScalerRange == rhs.HUDMarkerScalerRange &&
		lhs.HUDMarkerScalerSizeMax == rhs.HUDMarkerScalerSizeMax &&
		lhs.HUDMarkerScalerSizeMin == rhs.HUDMarkerScalerSizeMin &&
		lhs.HUDMarkerShipOffsetMaxDist == rhs.HUDMarkerShipOffsetMaxDist &&
		lhs.HUDMarkerShipOffsetMinDist == rhs.HUDMarkerShipOffsetMinDist &&
		lhs.HUDMarkerShowActualIconDistance == rhs.HUDMarkerShowActualIconDistance &&
		lhs.HUDMarkerShowActualSpaceIconDistance == rhs.HUDMarkerShowActualSpaceIconDistance &&
		lhs.HUDMarkerWideHoverAngleTest == rhs.HUDMarkerWideHoverAngleTest &&
		lhs.HUDMarkerWideHoverAngleTestHmd == rhs.HUDMarkerWideHoverAngleTestHmd &&
		lhs.HUDNetworkMarkerHoverAngleTestGround == rhs.HUDNetworkMarkerHoverAngleTestGround &&
		lhs.HUDNetworkMarkerHoverAngleVRMul == rhs.HUDNetworkMarkerHoverAngleVRMul &&
		lhs.HUDNetworkMarkerHoverShowLargeAngleTest == rhs.HUDNetworkMarkerHoverShowLargeAngleTest &&
		lhs.HUDPetCentreScreenAngle == rhs.HUDPetCentreScreenAngle &&
		lhs.HUDPetMarkerAngleTest == rhs.HUDPetMarkerAngleTest &&
		lhs.HUDPetMarkerAngleVRMul == rhs.HUDPetMarkerAngleVRMul &&
		lhs.HUDPlayerPhonePulseScanFreq == rhs.HUDPlayerPhonePulseScanFreq &&
		lhs.HUDPlayerSentinelPulseScanFreq == rhs.HUDPlayerSentinelPulseScanFreq &&
		lhs.HUDPlayerSentinelPulseWidth == rhs.HUDPlayerSentinelPulseWidth &&
		lhs.HUDPlayerSentinelRangeFactor == rhs.HUDPlayerSentinelRangeFactor &&
		lhs.HUDPlayerTrackArrowArrowSize == rhs.HUDPlayerTrackArrowArrowSize &&
		lhs.HUDPlayerTrackArrowDamageGlowHullHitCriticalOpacityScale == rhs.HUDPlayerTrackArrowDamageGlowHullHitCriticalOpacityScale &&
		lhs.HUDPlayerTrackArrowDamageGlowHullHitOpacityScale == rhs.HUDPlayerTrackArrowDamageGlowHullHitOpacityScale &&
		lhs.HUDPlayerTrackArrowDamageGlowOffset == rhs.HUDPlayerTrackArrowDamageGlowOffset &&
		lhs.HUDPlayerTrackArrowDamageGlowShieldHitCriticalOpacityScale == rhs.HUDPlayerTrackArrowDamageGlowShieldHitCriticalOpacityScale &&
		lhs.HUDPlayerTrackArrowDamageGlowShieldHitOpacityScale == rhs.HUDPlayerTrackArrowDamageGlowShieldHitOpacityScale &&
		lhs.HUDPlayerTrackArrowDotSize == rhs.HUDPlayerTrackArrowDotSize &&
		lhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowOpacityScale == rhs.HUDPlayerTrackArrowEnergyShieldDepletedGlowOpacityScale &&
		lhs.HUDPlayerTrackArrowEnergyShieldDepletedTime == rhs.HUDPlayerTrackArrowEnergyShieldDepletedTime &&
		lhs.HUDPlayerTrackArrowEnergyShieldGlowOffset == rhs.HUDPlayerTrackArrowEnergyShieldGlowOffset &&
		lhs.HUDPlayerTrackArrowEnergyShieldLowThreshold == rhs.HUDPlayerTrackArrowEnergyShieldLowThreshold &&
		lhs.HUDPlayerTrackArrowEnergyShieldOffset == rhs.HUDPlayerTrackArrowEnergyShieldOffset &&
		lhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowOpacityScale == rhs.HUDPlayerTrackArrowEnergyShieldStartChargeGlowOpacityScale &&
		lhs.HUDPlayerTrackArrowEnergyShieldStartChargeTime == rhs.HUDPlayerTrackArrowEnergyShieldStartChargeTime &&
		lhs.HUDPlayerTrackArrowFadeRange == rhs.HUDPlayerTrackArrowFadeRange &&
		lhs.HUDPlayerTrackArrowGlowBaseOpacity == rhs.HUDPlayerTrackArrowGlowBaseOpacity &&
		lhs.HUDPlayerTrackArrowHealthOffset == rhs.HUDPlayerTrackArrowHealthOffset &&
		lhs.HUDPlayerTrackArrowIconBorderReducerShip == rhs.HUDPlayerTrackArrowIconBorderReducerShip &&
		lhs.HUDPlayerTrackArrowIconFadeDist == rhs.HUDPlayerTrackArrowIconFadeDist &&
		lhs.HUDPlayerTrackArrowIconFadeDistDrone == rhs.HUDPlayerTrackArrowIconFadeDistDrone &&
		lhs.HUDPlayerTrackArrowIconFadeDistShip == rhs.HUDPlayerTrackArrowIconFadeDistShip &&
		lhs.HUDPlayerTrackArrowIconFadeRange == rhs.HUDPlayerTrackArrowIconFadeRange &&
		lhs.HUDPlayerTrackArrowIconFadeRangeShip == rhs.HUDPlayerTrackArrowIconFadeRangeShip &&
		lhs.HUDPlayerTrackArrowIconFadeTime == rhs.HUDPlayerTrackArrowIconFadeTime &&
		lhs.HUDPlayerTrackArrowIconPulse2Alpha == rhs.HUDPlayerTrackArrowIconPulse2Alpha &&
		lhs.HUDPlayerTrackArrowIconPulseTime == rhs.HUDPlayerTrackArrowIconPulseTime &&
		lhs.HUDPlayerTrackArrowIconPulseWidth1 == rhs.HUDPlayerTrackArrowIconPulseWidth1 &&
		lhs.HUDPlayerTrackArrowIconPulseWidth2 == rhs.HUDPlayerTrackArrowIconPulseWidth2 &&
		lhs.HUDPlayerTrackArrowIconShowTime == rhs.HUDPlayerTrackArrowIconShowTime &&
		lhs.HUDPlayerTrackArrowIconSize == rhs.HUDPlayerTrackArrowIconSize &&
		lhs.HUDPlayerTrackArrowMinFadeDist == rhs.HUDPlayerTrackArrowMinFadeDist &&
		lhs.HUDPlayerTrackArrowOffset == rhs.HUDPlayerTrackArrowOffset &&
		lhs.HUDPlayerTrackArrowPulseOffset == rhs.HUDPlayerTrackArrowPulseOffset &&
		lhs.HUDPlayerTrackArrowPulseRate == rhs.HUDPlayerTrackArrowPulseRate &&
		lhs.HUDPlayerTrackArrowScreenBorder == rhs.HUDPlayerTrackArrowScreenBorder &&
		lhs.HUDPlayerTrackArrowShipLabelOffset == rhs.HUDPlayerTrackArrowShipLabelOffset &&
		lhs.HUDPlayerTrackArrowSize == rhs.HUDPlayerTrackArrowSize &&
		lhs.HUDPlayerTrackArrowSizeMax == rhs.HUDPlayerTrackArrowSizeMax &&
		lhs.HUDPlayerTrackArrowSizeMin == rhs.HUDPlayerTrackArrowSizeMin &&
		lhs.HUDPlayerTrackArrowSmallIconSize == rhs.HUDPlayerTrackArrowSmallIconSize &&
		lhs.HUDPlayerTrackArrowTargetDist == rhs.HUDPlayerTrackArrowTargetDist &&
		lhs.HUDPlayerTrackArrowTargetDistShip == rhs.HUDPlayerTrackArrowTargetDistShip &&
		lhs.HUDPlayerTrackArrowTextExtraHeight == rhs.HUDPlayerTrackArrowTextExtraHeight &&
		lhs.HUDPlayerTrackArrowTextExtraOffsetX == rhs.HUDPlayerTrackArrowTextExtraOffsetX &&
		lhs.HUDPlayerTrackArrowTextExtraOffsetY == rhs.HUDPlayerTrackArrowTextExtraOffsetY &&
		lhs.HUDPlayerTrackArrowTextHeight == rhs.HUDPlayerTrackArrowTextHeight &&
		lhs.HUDPlayerTrackArrowTextOffset == rhs.HUDPlayerTrackArrowTextOffset &&
		lhs.HUDPlayerTrackDangerPulse == rhs.HUDPlayerTrackDangerPulse &&
		lhs.HUDPlayerTrackNoSightPulse == rhs.HUDPlayerTrackNoSightPulse &&
		lhs.HUDPlayerTrackTimerEnd == rhs.HUDPlayerTrackTimerEnd &&
		lhs.HUDPlayerTrackTimerPulseRate == rhs.HUDPlayerTrackTimerPulseRate &&
		lhs.HUDPlayerTrackTimerStart == rhs.HUDPlayerTrackTimerStart &&
		lhs.HUDPlayerTrackTimerStartFade == rhs.HUDPlayerTrackTimerStartFade &&
		lhs.HUDTargetHealthDangerTime == rhs.HUDTargetHealthDangerTime &&
		lhs.HUDTargetHealthIconSize == rhs.HUDTargetHealthIconSize &&
		lhs.HUDTargetIconOffset == rhs.HUDTargetIconOffset &&
		lhs.HUDTargetIconSize == rhs.HUDTargetIconSize &&
		lhs.HUDTargetMarkerOffset == rhs.HUDTargetMarkerOffset &&
		lhs.HUDTargetMarkerSize == rhs.HUDTargetMarkerSize &&
		lhs.IconBackgroundAlpha == rhs.IconBackgroundAlpha &&
		lhs.IconGlowStrengthActive == rhs.IconGlowStrengthActive &&
		lhs.IconGlowStrengthError == rhs.IconGlowStrengthError &&
		lhs.IconGlowStrengthHighlight == rhs.IconGlowStrengthHighlight &&
		lhs.IconGlowStrengthNeutral == rhs.IconGlowStrengthNeutral &&
		lhs.IconPulseRate == rhs.IconPulseRate &&
		lhs.InfoPortalGuideCycleTime == rhs.InfoPortalGuideCycleTime &&
		lhs.InfoPortalMilestonesCycleTime == rhs.InfoPortalMilestonesCycleTime &&
		lhs.InteractionIconInnerRadius == rhs.InteractionIconInnerRadius &&
		lhs.InteractionIconOuterRadius == rhs.InteractionIconOuterRadius &&
		lhs.InteractionInWorldMinScreenDistance == rhs.InteractionInWorldMinScreenDistance &&
		lhs.InteractionInWorldMinScreenDistanceV2 == rhs.InteractionInWorldMinScreenDistanceV2 &&
		lhs.InteractionInWorldPitchDistance == rhs.InteractionInWorldPitchDistance &&
		lhs.InteractionInWorldSeatedNPCHeightAdjust == rhs.InteractionInWorldSeatedNPCHeightAdjust &&
		lhs.InteractionInWorldSeatedNPCHeightAdjustV2 == rhs.InteractionInWorldSeatedNPCHeightAdjustV2 &&
		lhs.InteractionLabelHeight == rhs.InteractionLabelHeight &&
		lhs.InteractionLabelHorizontalLineLength == rhs.InteractionLabelHorizontalLineLength &&
		lhs.InteractionLabelLineAlpha == rhs.InteractionLabelLineAlpha &&
		lhs.InteractionLabelPixelHeightMax == rhs.InteractionLabelPixelHeightMax &&
		lhs.InteractionLabelPixelHeightMin == rhs.InteractionLabelPixelHeightMin &&
		lhs.InteractionLabelRadiusScaler == rhs.InteractionLabelRadiusScaler &&
		lhs.InteractionLabelSpeedClose == rhs.InteractionLabelSpeedClose &&
		lhs.InteractionLabelSpeedOpen == rhs.InteractionLabelSpeedOpen &&
		lhs.InteractionScanDisplayTime == rhs.InteractionScanDisplayTime &&
		lhs.InteractionScanMinTime == rhs.InteractionScanMinTime &&
		lhs.InteractionScanScanTime == rhs.InteractionScanScanTime &&
		lhs.InteractionScanSlapOverallTime == rhs.InteractionScanSlapOverallTime &&
		lhs.InteractionScanSlapScale == rhs.InteractionScanSlapScale &&
		lhs.InteractionScanSlapTime == rhs.InteractionScanSlapTime &&
		lhs.InventoryFullMessageRepeatTime == rhs.InventoryFullMessageRepeatTime &&
		lhs.InventoryIconTime == rhs.InventoryIconTime &&
		lhs.InvSlotGradientFactor == rhs.InvSlotGradientFactor &&
		lhs.InvSlotGradientFactorMin == rhs.InvSlotGradientFactorMin &&
		lhs.InvSlotGradientTime == rhs.InvSlotGradientTime &&
		lhs.InWorldInteractionScreenScale == rhs.InWorldInteractionScreenScale &&
		lhs.InWorldInteractLabelFarDistance == rhs.InWorldInteractLabelFarDistance &&
		lhs.InWorldInteractLabelFarRange == rhs.InWorldInteractLabelFarRange &&
		lhs.InWorldInteractLabelHeight == rhs.InWorldInteractLabelHeight &&
		lhs.InWorldInteractLabelMinHeadOffset == rhs.InWorldInteractLabelMinHeadOffset &&
		lhs.InWorldInteractLabelNearDistance == rhs.InWorldInteractLabelNearDistance &&
		lhs.InWorldInteractLabelNearRange == rhs.InWorldInteractLabelNearRange &&
		lhs.InWorldInteractLabelScale == rhs.InWorldInteractLabelScale &&
		lhs.InWorldInteractLabelScaleV2 == rhs.InWorldInteractLabelScaleV2 &&
		lhs.InWorldInteractLabelWidth == rhs.InWorldInteractLabelWidth &&
		lhs.InWorldNGuiScreenScale == rhs.InWorldNGuiScreenScale &&
		lhs.InWorldNPCInteractionScreenScale == rhs.InWorldNPCInteractionScreenScale &&
		lhs.InWorldScreenForwardOffset == rhs.InWorldScreenForwardOffset &&
		lhs.InWorldScreenMinScreenDistance == rhs.InWorldScreenMinScreenDistance &&
		lhs.InWorldScreenScaleDistance == rhs.InWorldScreenScaleDistance &&
		lhs.InWorldUIInteractionDistanceWithEyeTrackingEnabled == rhs.InWorldUIInteractionDistanceWithEyeTrackingEnabled &&
		lhs.ItemReceivedMessageTimeToAdd == rhs.ItemReceivedMessageTimeToAdd &&
		lhs.ItemSlotColourTechChargeRate == rhs.ItemSlotColourTechChargeRate &&
		lhs.KeepHazardBarActiveTime == rhs.KeepHazardBarActiveTime &&
		lhs.KeepSecondHazardBarActiveTime == rhs.KeepSecondHazardBarActiveTime &&
		lhs.LandNotifyHeightThreshold == rhs.LandNotifyHeightThreshold &&
		lhs.LandNotifySpeedThreshold == rhs.LandNotifySpeedThreshold &&
		lhs.LandNotifyTimeThreshold == rhs.LandNotifyTimeThreshold &&
		lhs.LargeSpaceIconSize == rhs.LargeSpaceIconSize &&
		lhs.LoadFadeInDefaultTime == rhs.LoadFadeInDefaultTime &&
		lhs.LoadingScreenTime == rhs.LoadingScreenTime &&
		lhs.LoadingScreenTravelSpeed == rhs.LoadingScreenTravelSpeed &&
		lhs.LoadingTravelDistance == rhs.LoadingTravelDistance &&
		lhs.LockOnMarkerSize == rhs.LockOnMarkerSize &&
		lhs.LockOnMarkerSizeLock == rhs.LockOnMarkerSizeLock &&
		lhs.LowerHelmetScreenPitch == rhs.LowerHelmetScreenPitch &&
		lhs.LowerHelmetScreenScale == rhs.LowerHelmetScreenScale &&
		lhs.LowHealthShieldFactor == rhs.LowHealthShieldFactor &&
		lhs.LowHealthShieldMin == rhs.LowHealthShieldMin &&
		lhs.MaintenanceIconFadeStart == rhs.MaintenanceIconFadeStart &&
		lhs.MaintenanceIconFadeTime == rhs.MaintenanceIconFadeTime &&
		lhs.ManualNotificationPauseTime == rhs.ManualNotificationPauseTime &&
		lhs.ManualScrollChangePerInputMax == rhs.ManualScrollChangePerInputMax &&
		lhs.ManualScrollChangePerInputMin == rhs.ManualScrollChangePerInputMin &&
		lhs.MarkerComponentOffset == rhs.MarkerComponentOffset &&
		lhs.MarkerHorizonApproachAngle == rhs.MarkerHorizonApproachAngle &&
		lhs.MarkerHorizonMinOffset == rhs.MarkerHorizonMinOffset &&
		lhs.MarkerHorizonOffPlanetLightBeamAngle == rhs.MarkerHorizonOffPlanetLightBeamAngle &&
		lhs.MarkerHorizonOffsetAngle == rhs.MarkerHorizonOffsetAngle &&
		lhs.MarkerHorizonShipApproachOffset == rhs.MarkerHorizonShipApproachOffset &&
		lhs.MarkerOffsetTypeAngle == rhs.MarkerOffsetTypeAngle &&
		lhs.MarkerOffsetTypeAngleAsteroid == rhs.MarkerOffsetTypeAngleAsteroid &&
		lhs.MarkerOffsetTypeAngleBattle == rhs.MarkerOffsetTypeAngleBattle &&
		lhs.MarkerOffsetTypeAngleBounty == rhs.MarkerOffsetTypeAngleBounty &&
		lhs.MarkerOffsetTypeAnglePlayerShip == rhs.MarkerOffsetTypeAnglePlayerShip &&
		lhs.MarkerRingInnerRadius == rhs.MarkerRingInnerRadius &&
		lhs.MarkerRingOuterRadius == rhs.MarkerRingOuterRadius &&
		lhs.MarkerTagAppearDelay == rhs.MarkerTagAppearDelay &&
		lhs.MaxDialogCharSizeIdeographic == rhs.MaxDialogCharSizeIdeographic &&
		lhs.MaxDialogCharSizeRoman == rhs.MaxDialogCharSizeRoman &&
		lhs.MaxNumMessageBeaconIcons == rhs.MaxNumMessageBeaconIcons &&
		lhs.MaxProjectorDistanceFromDefault == rhs.MaxProjectorDistanceFromDefault &&
		lhs.MaxProjectorGrabDistance == rhs.MaxProjectorGrabDistance &&
		lhs.MaxSubstanceMaxAmountForAmountFraction == rhs.MaxSubstanceMaxAmountForAmountFraction &&
		lhs.MessageNotificationTime == rhs.MessageNotificationTime &&
		lhs.MessageTimeQuick == rhs.MessageTimeQuick &&
		lhs.MilestoneStingDisplayTime == rhs.MilestoneStingDisplayTime &&
		lhs.MinimumHoldFill == rhs.MinimumHoldFill &&
		lhs.MinSeasonPlayTimeInDays == rhs.MinSeasonPlayTimeInDays &&
		lhs.MissileCentreOffset == rhs.MissileCentreOffset &&
		lhs.MissileIconAttackPulseAmount == rhs.MissileIconAttackPulseAmount &&
		lhs.MissileIconAttackPulseTime == rhs.MissileIconAttackPulseTime &&
		lhs.MissionCompassIconScaler == rhs.MissionCompassIconScaler &&
		lhs.MissionDetailsPageBaseHeight == rhs.MissionDetailsPageBaseHeight &&
		lhs.MissionLoopCount == rhs.MissionLoopCount &&
		lhs.MissionLoopCountPirate == rhs.MissionLoopCountPirate &&
		lhs.MissionMarkerSize == rhs.MissionMarkerSize &&
		lhs.MissionObjectiveBaseHeight == rhs.MissionObjectiveBaseHeight &&
		lhs.MissionObjectiveDoneHeight == rhs.MissionObjectiveDoneHeight &&
		lhs.MissionObjectiveScrollingExtra == rhs.MissionObjectiveScrollingExtra &&
		lhs.MissionSeedOffset == rhs.MissionSeedOffset &&
		lhs.MissionSpecificMissionPercent == rhs.MissionSpecificMissionPercent &&
		lhs.MissionStartEndOSDTime == rhs.MissionStartEndOSDTime &&
		lhs.MissionStartEndOSDTimeProcedural == rhs.MissionStartEndOSDTimeProcedural &&
		lhs.MissionStartEndTime == rhs.MissionStartEndTime &&
		lhs.ModularCustomisationApplyTime == rhs.ModularCustomisationApplyTime &&
		lhs.MouseRotateCameraSensitivity == rhs.MouseRotateCameraSensitivity &&
		lhs.MultiplayerTeleportEffectAppearTime == rhs.MultiplayerTeleportEffectAppearTime &&
		lhs.MultiplayerTeleportEffectDisappearTime == rhs.MultiplayerTeleportEffectDisappearTime &&
		lhs.NGuiActiveAreaOffsetTime == rhs.NGuiActiveAreaOffsetTime &&
		lhs.NGuiAltPlacementDistanceScrollSpeed == rhs.NGuiAltPlacementDistanceScrollSpeed &&
		lhs.NGuiCursorOffsetMultiplier == rhs.NGuiCursorOffsetMultiplier &&
		lhs.NGuiHmdOffset == rhs.NGuiHmdOffset &&
		lhs.NGuiModelRotationDegreesX == rhs.NGuiModelRotationDegreesX &&
		lhs.NGuiModelRotationDegreesY == rhs.NGuiModelRotationDegreesY &&
		lhs.NGuiModelRotationDegreesZ == rhs.NGuiModelRotationDegreesZ &&
		lhs.NGuiModelViewCdSmoothTime == rhs.NGuiModelViewCdSmoothTime &&
		lhs.NGuiModelViewDistanceDiscoveryPage == rhs.NGuiModelViewDistanceDiscoveryPage &&
		lhs.NGuiModelViewDistanceGlobal == rhs.NGuiModelViewDistanceGlobal &&
		lhs.NGuiModelViewDistanceShipPage == rhs.NGuiModelViewDistanceShipPage &&
		lhs.NGuiModelViewDistanceSuitPage == rhs.NGuiModelViewDistanceSuitPage &&
		lhs.NGuiModelViewDistanceWeaponPage == rhs.NGuiModelViewDistanceWeaponPage &&
		lhs.NGuiModelViewFadeInAfterRenderTime == rhs.NGuiModelViewFadeInAfterRenderTime &&
		lhs.NGuiModelViewFov == rhs.NGuiModelViewFov &&
		lhs.NGuiModelViewFractionOfBBHeightAboveReflectivePlane == rhs.NGuiModelViewFractionOfBBHeightAboveReflectivePlane &&
		lhs.NGuiMouseSensitivity == rhs.NGuiMouseSensitivity &&
		lhs.NGuiPadSensitivity == rhs.NGuiPadSensitivity &&
		lhs.NGuiPlacementAngleScrollSpeed == rhs.NGuiPlacementAngleScrollSpeed &&
		lhs.NGuiThumbnailModelRotationDegreesY == rhs.NGuiThumbnailModelRotationDegreesY &&
		lhs.NGuiThumbnailModelViewDistance == rhs.NGuiThumbnailModelViewDistance &&
		lhs.NotificationBackgroundGradientAlphaInShip == rhs.NotificationBackgroundGradientAlphaInShip &&
		lhs.NotificationBackgroundGradientEndOffsetPercentInShip == rhs.NotificationBackgroundGradientEndOffsetPercentInShip &&
		lhs.NotificationBridgeReachDistance == rhs.NotificationBridgeReachDistance &&
		lhs.NotificationBuildHintStartTime == rhs.NotificationBuildHintStartTime &&
		lhs.NotificationCantFireTime == rhs.NotificationCantFireTime &&
		lhs.NotificationDangerTime == rhs.NotificationDangerTime &&
		lhs.NotificationDeviceIdleTime == rhs.NotificationDeviceIdleTime &&
		lhs.NotificationDiscoveryIdleTime == rhs.NotificationDiscoveryIdleTime &&
		lhs.NotificationFinalMissionWait == rhs.NotificationFinalMissionWait &&
		lhs.NotificationGoToSpaceStationWait == rhs.NotificationGoToSpaceStationWait &&
		lhs.NotificationHazardMinTimeAfterRecharge == rhs.NotificationHazardMinTimeAfterRecharge &&
		lhs.NotificationHazardSafeThreshold == rhs.NotificationHazardSafeThreshold &&
		lhs.NotificationHazardTimer == rhs.NotificationHazardTimer &&
		lhs.NotificationInfoIdleTime == rhs.NotificationInfoIdleTime &&
		lhs.NotificationInteractHintStartTime == rhs.NotificationInteractHintStartTime &&
		lhs.NotificationJetpackTime == rhs.NotificationJetpackTime &&
		lhs.NotificationMaxPageHintTime == rhs.NotificationMaxPageHintTime &&
		lhs.NotificationMessageCycleTime == rhs.NotificationMessageCycleTime &&
		lhs.NotificationMinVisibleTime == rhs.NotificationMinVisibleTime &&
		lhs.NotificationMissionHintTime == rhs.NotificationMissionHintTime &&
		lhs.NotificationMissionHintTimeCritical == rhs.NotificationMissionHintTimeCritical &&
		lhs.NotificationMissionHintTimeSecondary == rhs.NotificationMissionHintTimeSecondary &&
		lhs.NotificationMonolithMissionWait == rhs.NotificationMonolithMissionWait &&
		lhs.NotificationNewTechIdleTime == rhs.NotificationNewTechIdleTime &&
		lhs.NotificationScanEventMissionIdleTime == rhs.NotificationScanEventMissionIdleTime &&
		lhs.NotificationScanTime == rhs.NotificationScanTime &&
		lhs.NotificationScanTimeCutoff == rhs.NotificationScanTimeCutoff &&
		lhs.NotificationShieldTime == rhs.NotificationShieldTime &&
		lhs.NotificationShipBoostMinTime == rhs.NotificationShipBoostMinTime &&
		lhs.NotificationShipBoostReminderTime == rhs.NotificationShipBoostReminderTime &&
		lhs.NotificationShipBoostReminderTimeTutorial == rhs.NotificationShipBoostReminderTimeTutorial &&
		lhs.NotificationShipBoostTime == rhs.NotificationShipBoostTime &&
		lhs.NotificationShipBoostTimeVR == rhs.NotificationShipBoostTimeVR &&
		lhs.NotificationShipJumpMinTime == rhs.NotificationShipJumpMinTime &&
		lhs.NotificationShipJumpReminderTime == rhs.NotificationShipJumpReminderTime &&
		lhs.NotificationShipJumpReminderTutorial == rhs.NotificationShipJumpReminderTutorial &&
		lhs.NotificationsResourceExtractHintCount == rhs.NotificationsResourceExtractHintCount &&
		lhs.NotificationStaminaHintDistanceWalked == rhs.NotificationStaminaHintDistanceWalked &&
		lhs.NotificationTimeBeforeHeridiumMarker == rhs.NotificationTimeBeforeHeridiumMarker &&
		lhs.NotificationUrgentMessageTime == rhs.NotificationUrgentMessageTime &&
		lhs.NotificationWaypointReachDistance == rhs.NotificationWaypointReachDistance &&
		lhs.NumDeathQuotes == rhs.NumDeathQuotes &&
		lhs.OnFootDamageDirectionIndicatorFadeRange == rhs.OnFootDamageDirectionIndicatorFadeRange &&
		lhs.OnFootDamageDirectionIndicatorRadius == rhs.OnFootDamageDirectionIndicatorRadius &&
		lhs.OSDMessagePauseOffscreenAngle == rhs.OSDMessagePauseOffscreenAngle &&
		lhs.OSDMessageQueueMax == rhs.OSDMessageQueueMax &&
		lhs.OSDMessageQueueMin == rhs.OSDMessageQueueMin &&
		lhs.OSDMessageQueueSpeedMultiplier == rhs.OSDMessageQueueSpeedMultiplier &&
		lhs.PadCursorAcceleration == rhs.PadCursorAcceleration &&
		lhs.PadCursorMaxSpeedModifier == rhs.PadCursorMaxSpeedModifier &&
		lhs.PadCursorUICurveStrength == rhs.PadCursorUICurveStrength &&
		lhs.PadRotateCameraSensitivity == rhs.PadRotateCameraSensitivity &&
		lhs.PageTurnTime == rhs.PageTurnTime &&
		lhs.ParagraphAutoScrollSpeed == rhs.ParagraphAutoScrollSpeed &&
		lhs.PauseMenuHoldTime == rhs.PauseMenuHoldTime &&
		lhs.PetHoverIconSize == rhs.PetHoverIconSize &&
		lhs.PetHUDMarkerExtraFollowInfoDistance == rhs.PetHUDMarkerExtraFollowInfoDistance &&
		lhs.PetHUDMarkerHideDistance == rhs.PetHUDMarkerHideDistance &&
		lhs.PetHUDMarkerHideDistanceShort == rhs.PetHUDMarkerHideDistanceShort &&
		lhs.PetHUDMarkerOffset == rhs.PetHUDMarkerOffset &&
		lhs.PetIconSize == rhs.PetIconSize &&
		lhs.PetMoodMarkerOffset == rhs.PetMoodMarkerOffset &&
		lhs.PetSlotUnlockBounceTime == rhs.PetSlotUnlockBounceTime &&
		lhs.PhotoModeTimeofDayChange == rhs.PhotoModeTimeofDayChange &&
		lhs.PhotoModeValueAlpha == rhs.PhotoModeValueAlpha &&
		lhs.PirateAttackIndicatorRadius == rhs.PirateAttackIndicatorRadius &&
		lhs.PirateAttackIndicatorWidth == rhs.PirateAttackIndicatorWidth &&
		lhs.PirateAttackProbeDisplayFinishFactor == rhs.PirateAttackProbeDisplayFinishFactor &&
		lhs.PirateCountdownTime == rhs.PirateCountdownTime &&
		lhs.PirateFreighterSummonAtOffset == rhs.PirateFreighterSummonAtOffset &&
		lhs.PirateFreighterSummonOffset == rhs.PirateFreighterSummonOffset &&
		lhs.PirateFreighterSummonOffsetPulse == rhs.PirateFreighterSummonOffsetPulse &&
		lhs.PlacedMarkerFadeTime == rhs.PlacedMarkerFadeTime &&
		lhs.PlanetDataExtraRadius == rhs.PlanetDataExtraRadius &&
		lhs.PlanetLabelAngle == rhs.PlanetLabelAngle &&
		lhs.PlanetLabelTime == rhs.PlanetLabelTime &&
		lhs.PlanetPoleEastWestDistanceFromPlayer == rhs.PlanetPoleEastWestDistanceFromPlayer &&
		lhs.PlanetPoleMaxDotProduct == rhs.PlanetPoleMaxDotProduct &&
		lhs.PlanetRaidMarkerOffset == rhs.PlanetRaidMarkerOffset &&
		lhs.PlanetScanDelayTime == rhs.PlanetScanDelayTime &&
		lhs.PopupActivateTime == rhs.PopupActivateTime &&
		lhs.PopupDeactivateTime == rhs.PopupDeactivateTime &&
		lhs.PopupDebounceTime == rhs.PopupDebounceTime &&
		lhs.PopupSlotWidthOffset == rhs.PopupSlotWidthOffset &&
		lhs.PopupTitleGradientFactor == rhs.PopupTitleGradientFactor &&
		lhs.PopupValueSectionBaseHeight == rhs.PopupValueSectionBaseHeight &&
		lhs.PopupValueSectionHeight == rhs.PopupValueSectionHeight &&
		lhs.PopupXClampOffset == rhs.PopupXClampOffset &&
		lhs.PopupXClampOffsetRightAligned == rhs.PopupXClampOffsetRightAligned &&
		lhs.ProjectorGrabBorderPercent == rhs.ProjectorGrabBorderPercent &&
		lhs.ProjectorGrabDistanceBias == rhs.ProjectorGrabDistanceBias &&
		lhs.ProjectorGrabResetTime == rhs.ProjectorGrabResetTime &&
		lhs.ProjectorScale == rhs.ProjectorScale &&
		lhs.QuickMenuAlpha == rhs.QuickMenuAlpha &&
		lhs.QuickMenuCentrePos == rhs.QuickMenuCentrePos &&
		lhs.QuickMenuCentreSideOffset == rhs.QuickMenuCentreSideOffset &&
		lhs.QuickMenuCloseTime == rhs.QuickMenuCloseTime &&
		lhs.QuickMenuCursorScale == rhs.QuickMenuCursorScale &&
		lhs.QuickMenuErrorTime == rhs.QuickMenuErrorTime &&
		lhs.QuickMenuHighlightRate == rhs.QuickMenuHighlightRate &&
		lhs.QuickMenuHoldNavTime == rhs.QuickMenuHoldNavTime &&
		lhs.QuickMenuInteractAdjustX == rhs.QuickMenuInteractAdjustX &&
		lhs.QuickMenuInteractAdjustY == rhs.QuickMenuInteractAdjustY &&
		lhs.QuickMenuScreenHeight == rhs.QuickMenuScreenHeight &&
		lhs.QuickMenuScreenWidth == rhs.QuickMenuScreenWidth &&
		lhs.QuickMenuSideOffset == rhs.QuickMenuSideOffset &&
		lhs.QuickMenuSwipeHeightMax == rhs.QuickMenuSwipeHeightMax &&
		lhs.QuickMenuSwipeHeightMin == rhs.QuickMenuSwipeHeightMin &&
		lhs.RadialMenuInnerRadius == rhs.RadialMenuInnerRadius &&
		lhs.RadialMenuInnerRadiusCursor == rhs.RadialMenuInnerRadiusCursor &&
		lhs.RadialMenuWedgeOffset == rhs.RadialMenuWedgeOffset &&
		lhs.RefinerAutoCloseTime == rhs.RefinerAutoCloseTime &&
		lhs.RefinerBeginDialInnerRadius == rhs.RefinerBeginDialInnerRadius &&
		lhs.RefinerPadStartDecayTime == rhs.RefinerPadStartDecayTime &&
		lhs.RefinerPadStartTime == rhs.RefinerPadStartTime &&
		lhs.RefinerProgressDialInnerRadius == rhs.RefinerProgressDialInnerRadius &&
		lhs.RepairTechLabelOffset == rhs.RepairTechLabelOffset &&
		lhs.RepairTechRepairedMessageTime == rhs.RepairTechRepairedMessageTime &&
		lhs.RepairTechRepairedWaitTime1 == rhs.RepairTechRepairedWaitTime1 &&
		lhs.RepairTechRepairedWaitTime2 == rhs.RepairTechRepairedWaitTime2 &&
		lhs.ReportBaseFlashDelay == rhs.ReportBaseFlashDelay &&
		lhs.ReportBaseFlashIntensity == rhs.ReportBaseFlashIntensity &&
		lhs.ReportBaseFlashTime == rhs.ReportBaseFlashTime &&
		lhs.ReportCameraSpeed == rhs.ReportCameraSpeed &&
		lhs.ScanEventArrowOffsetMultiplier == rhs.ScanEventArrowOffsetMultiplier &&
		lhs.ScanEventArrowOffsetMultiplierFresh == rhs.ScanEventArrowOffsetMultiplierFresh &&
		lhs.ScanEventArrowOffsetMultiplierLerpTime == rhs.ScanEventArrowOffsetMultiplierLerpTime &&
		lhs.ScanEventArrowOffsetMultiplierOneEvent == rhs.ScanEventArrowOffsetMultiplierOneEvent &&
		lhs.ScanEventArrowPlayerFadeDistance == rhs.ScanEventArrowPlayerFadeDistance &&
		lhs.ScanEventArrowPlayerFadeRange == rhs.ScanEventArrowPlayerFadeRange &&
		lhs.ScanEventArrowSecondaryAlpha == rhs.ScanEventArrowSecondaryAlpha &&
		lhs.ScanEventArrowShipFadeDistance == rhs.ScanEventArrowShipFadeDistance &&
		lhs.ScanEventArrowShipFadeRange == rhs.ScanEventArrowShipFadeRange &&
		lhs.ScanEventIconAudio == rhs.ScanEventIconAudio &&
		lhs.ScannableIconMergeAngle == rhs.ScannableIconMergeAngle &&
		lhs.ScanTime == rhs.ScanTime &&
		lhs.SeasonalRingChangeTime == rhs.SeasonalRingChangeTime &&
		lhs.SeasonalRingMultiplier == rhs.SeasonalRingMultiplier &&
		lhs.SeasonalRingPulseTime == rhs.SeasonalRingPulseTime &&
		lhs.SeasonEndAutoHighlightDuration == rhs.SeasonEndAutoHighlightDuration &&
		lhs.SeasonEndAutoHighlightDurationMilestone == rhs.SeasonEndAutoHighlightDurationMilestone &&
		lhs.SeasonEndAutoHighlightSFX == rhs.SeasonEndAutoHighlightSFX &&
		lhs.SeasonEndRewardsMaxScrollRate == rhs.SeasonEndRewardsMaxScrollRate &&
		lhs.SeasonEndRewardsPageOpenDelayTime == rhs.SeasonEndRewardsPageOpenDelayTime &&
		lhs.SeasonFinalStageIndex == rhs.SeasonFinalStageIndex &&
		lhs.SeasonMessageDelayTime == rhs.SeasonMessageDelayTime &&
		lhs.SentinelsDisabledHUDMessageTime == rhs.SentinelsDisabledHUDMessageTime &&
		lhs.SettlementStatFlashSpeed == rhs.SettlementStatFlashSpeed &&
		lhs.SettlementStatInnerRadius == rhs.SettlementStatInnerRadius &&
		lhs.SettlementStatOuterRadius == rhs.SettlementStatOuterRadius &&
		lhs.ShieldHazardPulseRate == rhs.ShieldHazardPulseRate &&
		lhs.ShieldHazardPulseThreshold == rhs.ShieldHazardPulseThreshold &&
		lhs.ShieldPulseTime == rhs.ShieldPulseTime &&
		lhs.ShieldSpringTime == rhs.ShieldSpringTime &&
		lhs.ShipBuilderBarTime == rhs.ShipBuilderBarTime &&
		lhs.ShipBuilderEndCircleRadius == rhs.ShipBuilderEndCircleRadius &&
		lhs.ShipBuilderLineLengthFadeMax == rhs.ShipBuilderLineLengthFadeMax &&
		lhs.ShipBuilderLineLengthFadeMin == rhs.ShipBuilderLineLengthFadeMin &&
		lhs.ShipBuilderLineMinFade == rhs.ShipBuilderLineMinFade &&
		lhs.ShipBuilderLineWidth == rhs.ShipBuilderLineWidth &&
		lhs.ShipBuilderSlotDropLength == rhs.ShipBuilderSlotDropLength &&
		lhs.ShipBuilderSlotLineDefaultWidthFactor == rhs.ShipBuilderSlotLineDefaultWidthFactor &&
		lhs.ShipBuilderSlotLineMaxFactor == rhs.ShipBuilderSlotLineMaxFactor &&
		lhs.ShipBuilderSlotLineMinFactor == rhs.ShipBuilderSlotLineMinFactor &&
		lhs.ShipBuilderSlotStartOffset == rhs.ShipBuilderSlotStartOffset &&
		lhs.ShipBuilderStartCircleRadius == rhs.ShipBuilderStartCircleRadius &&
		lhs.ShipDamageDirectionIndicatorFadeRange == rhs.ShipDamageDirectionIndicatorFadeRange &&
		lhs.ShipDamageDirectionIndicatorRadius == rhs.ShipDamageDirectionIndicatorRadius &&
		lhs.ShipDesatDamper == rhs.ShipDesatDamper &&
		lhs.ShipFullscreenDamper == rhs.ShipFullscreenDamper &&
		lhs.ShipFullscreenDamperMin == rhs.ShipFullscreenDamperMin &&
		lhs.ShipHeadsUpDisplayDistance == rhs.ShipHeadsUpDisplayDistance &&
		lhs.ShipHeadsUpLineFadeTime == rhs.ShipHeadsUpLineFadeTime &&
		lhs.ShipHologramInWorldUIHeightAdjust == rhs.ShipHologramInWorldUIHeightAdjust &&
		lhs.ShipHologramInWorldUIHeightAdjustV2 == rhs.ShipHologramInWorldUIHeightAdjustV2 &&
		lhs.ShipHUDHitPointSize == rhs.ShipHUDHitPointSize &&
		lhs.ShipHUDHitPointTime == rhs.ShipHUDHitPointTime &&
		lhs.ShipHUDMarkerHideDistance == rhs.ShipHUDMarkerHideDistance &&
		lhs.ShipHUDMarkerOffset == rhs.ShipHUDMarkerOffset &&
		lhs.ShipHUDMaxOffscreenTargetDist == rhs.ShipHUDMaxOffscreenTargetDist &&
		lhs.ShipHUDMissileLockSizeMax == rhs.ShipHUDMissileLockSizeMax &&
		lhs.ShipHUDMissileLockSizeMin == rhs.ShipHUDMissileLockSizeMin &&
		lhs.ShipHUDMissileLockSpringFast == rhs.ShipHUDMissileLockSpringFast &&
		lhs.ShipHUDMissileLockSpringSlow == rhs.ShipHUDMissileLockSpringSlow &&
		lhs.ShipHUDTargetAlpha == rhs.ShipHUDTargetAlpha &&
		lhs.ShipHUDTargetArrowLength == rhs.ShipHUDTargetArrowLength &&
		lhs.ShipHUDTargetArrowsRotationRate == rhs.ShipHUDTargetArrowsRotationRate &&
		lhs.ShipHUDTargetMinDist == rhs.ShipHUDTargetMinDist &&
		lhs.ShipHUDTargetRadius == rhs.ShipHUDTargetRadius &&
		lhs.ShipHUDTargetRange == rhs.ShipHUDTargetRange &&
		lhs.ShipHUDTargetScale == rhs.ShipHUDTargetScale &&
		lhs.ShipHUDTargetTriangleRadius == rhs.ShipHUDTargetTriangleRadius &&
		lhs.ShipOverheatSwitchMessageTime == rhs.ShipOverheatSwitchMessageTime &&
		lhs.ShipOverheatSwitchMessageWait == rhs.ShipOverheatSwitchMessageWait &&
		lhs.ShipScreenTexScale == rhs.ShipScreenTexScale &&
		lhs.ShipSideScreenHeight == rhs.ShipSideScreenHeight &&
		lhs.ShopInteractionInWorldForcedOffset == rhs.ShopInteractionInWorldForcedOffset &&
		lhs.ShopInteractionInWorldForcedOffsetV2 == rhs.ShopInteractionInWorldForcedOffsetV2 &&
		lhs.ShowDaysIfLessThan == rhs.ShowDaysIfLessThan &&
		lhs.ShowHoursIfLessThan == rhs.ShowHoursIfLessThan &&
		lhs.ShowWeeksIfLessThan == rhs.ShowWeeksIfLessThan &&
		lhs.SmallSpaceIconSize == rhs.SmallSpaceIconSize &&
		lhs.SolidPointerLengthScale == rhs.SolidPointerLengthScale &&
		lhs.SolidPointerMaxLength == rhs.SolidPointerMaxLength &&
		lhs.SolidPointerScale == rhs.SolidPointerScale &&
		lhs.SpaceMapActionScale == rhs.SpaceMapActionScale &&
		lhs.SpaceMapAnomalyScale == rhs.SpaceMapAnomalyScale &&
		lhs.SpaceMapAspectRatio == rhs.SpaceMapAspectRatio &&
		lhs.SpaceMapCamAngle == rhs.SpaceMapCamAngle &&
		lhs.SpaceMapCamDistance == rhs.SpaceMapCamDistance &&
		lhs.SpaceMapCamHeight == rhs.SpaceMapCamHeight &&
		lhs.SpaceMapCockpitAngle == rhs.SpaceMapCockpitAngle &&
		lhs.SpaceMapCockpitScale == rhs.SpaceMapCockpitScale &&
		lhs.SpaceMapCockpitScaleAdjustAlien == rhs.SpaceMapCockpitScaleAdjustAlien &&
		lhs.SpaceMapCockpitScaleAdjustDropShip == rhs.SpaceMapCockpitScaleAdjustDropShip &&
		lhs.SpaceMapCockpitScaleAdjustFighter == rhs.SpaceMapCockpitScaleAdjustFighter &&
		lhs.SpaceMapCockpitScaleAdjustRobot == rhs.SpaceMapCockpitScaleAdjustRobot &&
		lhs.SpaceMapCockpitScaleAdjustRoyal == rhs.SpaceMapCockpitScaleAdjustRoyal &&
		lhs.SpaceMapCockpitScaleAdjustSail == rhs.SpaceMapCockpitScaleAdjustSail &&
		lhs.SpaceMapCockpitScaleAdjustScientific == rhs.SpaceMapCockpitScaleAdjustScientific &&
		lhs.SpaceMapCockpitScaleAdjustShuttle == rhs.SpaceMapCockpitScaleAdjustShuttle &&
		lhs.SpaceMapDistance == rhs.SpaceMapDistance &&
		lhs.SpaceMapDistanceLogScaler == rhs.SpaceMapDistanceLogScaler &&
		lhs.SpaceMapDistanceMultiplier == rhs.SpaceMapDistanceMultiplier &&
		lhs.SpaceMapDistanceScale == rhs.SpaceMapDistanceScale &&
		lhs.SpaceMapFadeAngleMax == rhs.SpaceMapFadeAngleMax &&
		lhs.SpaceMapFadeAngleMin == rhs.SpaceMapFadeAngleMin &&
		lhs.SpaceMapFoV == rhs.SpaceMapFoV &&
		lhs.SpaceMapFreighterScale == rhs.SpaceMapFreighterScale &&
		lhs.SpaceMapHorizonThickness == rhs.SpaceMapHorizonThickness &&
		lhs.SpaceMapLightPitch == rhs.SpaceMapLightPitch &&
		lhs.SpaceMapLightYaw == rhs.SpaceMapLightYaw &&
		lhs.SpaceMapLineBaseFade == rhs.SpaceMapLineBaseFade &&
		lhs.SpaceMapLineBaseScale == rhs.SpaceMapLineBaseScale &&
		lhs.SpaceMapLineWidth == rhs.SpaceMapLineWidth &&
		lhs.SpaceMapMarkerScale == rhs.SpaceMapMarkerScale &&
		lhs.SpaceMapMaxTraderDistance == rhs.SpaceMapMaxTraderDistance &&
		lhs.SpaceMapMoonScale == rhs.SpaceMapMoonScale &&
		lhs.SpaceMapObjectScale == rhs.SpaceMapObjectScale &&
		lhs.SpaceMapPirateFreighterScale == rhs.SpaceMapPirateFreighterScale &&
		lhs.SpaceMapPirateFrigateScale == rhs.SpaceMapPirateFrigateScale &&
		lhs.SpaceMapPlanetLineOffset == rhs.SpaceMapPlanetLineOffset &&
		lhs.SpaceMapPlanetScale == rhs.SpaceMapPlanetScale &&
		lhs.SpaceMapScaleMin == rhs.SpaceMapScaleMin &&
		lhs.SpaceMapScaleRangeMax == rhs.SpaceMapScaleRangeMax &&
		lhs.SpaceMapScaleRangeMin == rhs.SpaceMapScaleRangeMin &&
		lhs.SpaceMapShipCombineDistance == rhs.SpaceMapShipCombineDistance &&
		lhs.SpaceMapShipScale == rhs.SpaceMapShipScale &&
		lhs.SpaceMapShipScaleMin == rhs.SpaceMapShipScaleMin &&
		lhs.SpaceMapStationScale == rhs.SpaceMapStationScale &&
		lhs.SpaceMarkersBattleOffset == rhs.SpaceMarkersBattleOffset &&
		lhs.SpaceMarkersOffset == rhs.SpaceMarkersOffset &&
		lhs.StackSizeChangeMaxRate == rhs.StackSizeChangeMaxRate &&
		lhs.StackSizeChangeMinRate == rhs.StackSizeChangeMinRate &&
		lhs.StackSizeRateChangeRate == rhs.StackSizeRateChangeRate &&
		lhs.StageStingDisplayTime == rhs.StageStingDisplayTime &&
		lhs.StandingRewardOSDTime == rhs.StandingRewardOSDTime &&
		lhs.StatsMessageDelayTime == rhs.StatsMessageDelayTime &&
		lhs.StoreDialDecayTime == rhs.StoreDialDecayTime &&
		lhs.StoreDialHoldTime == rhs.StoreDialHoldTime &&
		lhs.StoreDialInnerRadius == rhs.StoreDialInnerRadius &&
		lhs.StoreDialOuterRadius == rhs.StoreDialOuterRadius &&
		lhs.SuperchargeGradientFactor == rhs.SuperchargeGradientFactor &&
		lhs.SuperchargeGradientFactorMin == rhs.SuperchargeGradientFactorMin &&
		lhs.SuperchargeGradientTime == rhs.SuperchargeGradientTime &&
		lhs.SurveyObjectArrowOffsetMultiplier == rhs.SurveyObjectArrowOffsetMultiplier &&
		lhs.TakeoffFuelMessageTime == rhs.TakeoffFuelMessageTime &&
		lhs.TalkBoxAlienTextSpeed == rhs.TalkBoxAlienTextSpeed &&
		lhs.TalkBoxAlienTextTimeMax == rhs.TalkBoxAlienTextTimeMax &&
		lhs.TalkBoxAlienTextTimeMin == rhs.TalkBoxAlienTextTimeMin &&
		lhs.TargetDisplayDamageFlashTime == rhs.TargetDisplayDamageFlashTime &&
		lhs.TargetDisplayScale == rhs.TargetDisplayScale &&
		lhs.TargetDisplayShipScale == rhs.TargetDisplayShipScale &&
		lhs.TargetDisplayTorpedoScale == rhs.TargetDisplayTorpedoScale &&
		lhs.TargetMarkerFadeAngleMin == rhs.TargetMarkerFadeAngleMin &&
		lhs.TargetMarkerFadeAngleRange == rhs.TargetMarkerFadeAngleRange &&
		lhs.TargetMarkerScaleEnd == rhs.TargetMarkerScaleEnd &&
		lhs.TargetMarkerScaleStart == rhs.TargetMarkerScaleStart &&
		lhs.TargetParallaxMaintenancePageMultiplier == rhs.TargetParallaxMaintenancePageMultiplier &&
		lhs.TargetParallaxMouseMultiplier == rhs.TargetParallaxMouseMultiplier &&
		lhs.TargetScreenDistance == rhs.TargetScreenDistance &&
		lhs.TargetScreenFoV == rhs.TargetScreenFoV &&
		lhs.TechDisplayDelayTime == rhs.TechDisplayDelayTime &&
		lhs.TechPopupBuildLayerHeight == rhs.TechPopupBuildLayerHeight &&
		lhs.TechPopupInstallLayerHeight == rhs.TechPopupInstallLayerHeight &&
		lhs.TechPopupRepairLayerHeight == rhs.TechPopupRepairLayerHeight &&
		lhs.TechPopupRequirementHeight == rhs.TechPopupRequirementHeight &&
		lhs.TextChatMaxDisplayTime == rhs.TextChatMaxDisplayTime &&
		lhs.TextChatStayBigAfterTextInput == rhs.TextChatStayBigAfterTextInput &&
		lhs.TextPrintoutMultiplier == rhs.TextPrintoutMultiplier &&
		lhs.TextPrintoutMultiplierAlien == rhs.TextPrintoutMultiplierAlien &&
		lhs.TextTouchScrollCap == rhs.TextTouchScrollCap &&
		lhs.ThirdPersonCrosshairCircle1Distance == rhs.ThirdPersonCrosshairCircle1Distance &&
		lhs.ThirdPersonCrosshairCircle2Distance == rhs.ThirdPersonCrosshairCircle2Distance &&
		lhs.ThirdPersonCrosshairDistance == rhs.ThirdPersonCrosshairDistance &&
		lhs.TimedEventLookTime == rhs.TimedEventLookTime &&
		lhs.TooltipTime == rhs.TooltipTime &&
		lhs.TouchScrollChangePageThreshold == rhs.TouchScrollChangePageThreshold &&
		lhs.TouchScrollMaxDelta == rhs.TouchScrollMaxDelta &&
		lhs.TouchScrollSpeedMul == rhs.TouchScrollSpeedMul &&
		lhs.TrackCriticalHitSize == rhs.TrackCriticalHitSize &&
		lhs.TrackCriticalPulseTime == rhs.TrackCriticalPulseTime &&
		lhs.TrackLeadTargetInScale == rhs.TrackLeadTargetInScale &&
		lhs.TrackMissileTargetPulseRate == rhs.TrackMissileTargetPulseRate &&
		lhs.TrackPoliceFreighterCentreOffset == rhs.TrackPoliceFreighterCentreOffset &&
		lhs.TrackPrimaryCentreOffset == rhs.TrackPrimaryCentreOffset &&
		lhs.TrackReticuleAngle == rhs.TrackReticuleAngle &&
		lhs.TrackReticuleInactiveTime == rhs.TrackReticuleInactiveTime &&
		lhs.TrackReticuleInTime == rhs.TrackReticuleInTime &&
		lhs.TrackReticuleRandomDelay == rhs.TrackReticuleRandomDelay &&
		lhs.TrackReticuleRandomTime == rhs.TrackReticuleRandomTime &&
		lhs.TrackReticuleScale == rhs.TrackReticuleScale &&
		lhs.TrackScaleCritical == rhs.TrackScaleCritical &&
		lhs.TrackScaleHit == rhs.TrackScaleHit &&
		lhs.TrackTimerAlpha == rhs.TrackTimerAlpha &&
		lhs.TrackTimerIconExclaimRadius == rhs.TrackTimerIconExclaimRadius &&
		lhs.TrackTimerIconInnerRadius == rhs.TrackTimerIconInnerRadius &&
		lhs.TrackTimerIconOuterRadius == rhs.TrackTimerIconOuterRadius &&
		lhs.TrackTimerRadarPulseSize == rhs.TrackTimerRadarPulseSize &&
		lhs.TrackTypeIconSize == rhs.TrackTypeIconSize &&
		lhs.TradePageNotifyOffset == rhs.TradePageNotifyOffset &&
		lhs.TransferPopupCursorOffsetFactor == rhs.TransferPopupCursorOffsetFactor &&
		lhs.TransferSendOffscreenBorder == rhs.TransferSendOffscreenBorder &&
		lhs.TransitionOffset == rhs.TransitionOffset &&
		lhs.TravelLineThickness == rhs.TravelLineThickness &&
		lhs.TravelTargetRadius == rhs.TravelTargetRadius &&
		lhs.TrialUpsellDeclineDecayTimeQuick == rhs.TrialUpsellDeclineDecayTimeQuick &&
		lhs.TrialUpsellDeclineDecayTimeSlow == rhs.TrialUpsellDeclineDecayTimeSlow &&
		lhs.TrialUpsellDeclineDialInnerRadius == rhs.TrialUpsellDeclineDialInnerRadius &&
		lhs.TrialUpsellDeclineDialOuterRadius == rhs.TrialUpsellDeclineDialOuterRadius &&
		lhs.TrialUpsellDeclineHoldTimeQuick == rhs.TrialUpsellDeclineHoldTimeQuick &&
		lhs.TrialUpsellDeclineHoldTimeSlow == rhs.TrialUpsellDeclineHoldTimeSlow &&
		lhs.UnknownWordsToShowInCatalogue == rhs.UnknownWordsToShowInCatalogue &&
		lhs.UseZoomedOutBuildCamRadius == rhs.UseZoomedOutBuildCamRadius &&
		lhs.VRFaceLockedScreenHeight == rhs.VRFaceLockedScreenHeight &&
		lhs.VRFaceLockedScreenWidth == rhs.VRFaceLockedScreenWidth &&
		lhs.WantedDetectMessageTime == rhs.WantedDetectMessageTime &&
		lhs.WantedDetectMinTimeout == rhs.WantedDetectMinTimeout &&
		lhs.WantedLevelScanAlpha == rhs.WantedLevelScanAlpha &&
		lhs.WantedLevelScannedRate == rhs.WantedLevelScannedRate &&
		lhs.WantedLevelTimeoutPulseRate == rhs.WantedLevelTimeoutPulseRate &&
		lhs.WantedLevelWitnessAlpha == rhs.WantedLevelWitnessAlpha &&
		lhs.WantedLevelWitnessOffset == rhs.WantedLevelWitnessOffset &&
		lhs.WantedLevelWitnessPulseRate == rhs.WantedLevelWitnessPulseRate &&
		lhs.ZoomFactorOverride == rhs.ZoomFactorOverride &&
		lhs.ZoomHUDElementsOffsetX == rhs.ZoomHUDElementsOffsetX &&
		lhs.ZoomHUDElementsOffsetY == rhs.ZoomHUDElementsOffsetY &&
		lhs.ZoomHUDElementTime == rhs.ZoomHUDElementTime &&
		lhs.HUDCircleAnimIcon == rhs.HUDCircleAnimIcon &&
		lhs.HUDDeathPointIcon == rhs.HUDDeathPointIcon &&
		lhs.HUDHexAnimIcon == rhs.HUDHexAnimIcon &&
		lhs.HUDMarkerColourIcon == rhs.HUDMarkerColourIcon &&
		lhs.HUDMarkerIcon == rhs.HUDMarkerIcon &&
		lhs.HUDMarkerPrimaryIndicatorIcon == rhs.HUDMarkerPrimaryIndicatorIcon &&
		lhs.HUDPointIcon == rhs.HUDPointIcon &&
		lhs.HUDSaveIcon == rhs.HUDSaveIcon &&
		lhs.HUDSpaceshipIcon == rhs.HUDSpaceshipIcon &&
		lhs.DistanceUnitKM == rhs.DistanceUnitKM &&
		lhs.DistanceUnitM == rhs.DistanceUnitM &&
		lhs.DistanceUnitMpS == rhs.DistanceUnitMpS &&
		lhs.MaxDialogCharSizeIdeographicString == rhs.MaxDialogCharSizeIdeographicString &&
		lhs.MaxDialogCharSizeRomanString == rhs.MaxDialogCharSizeRomanString &&
		lhs.VRDistanceWarningUIFile == rhs.VRDistanceWarningUIFile &&
		std::equal(std::begin(lhs.BuildMenuUseSmallIconOnPad), std::end(lhs.BuildMenuUseSmallIconOnPad), std::begin(rhs.BuildMenuUseSmallIconOnPad)) &&
		lhs.AllowInventorySorting == rhs.AllowInventorySorting &&
		lhs.AllowInWorldDebugBorders == rhs.AllowInWorldDebugBorders &&
		lhs.AllowProjectorRepositioning == rhs.AllowProjectorRepositioning &&
		lhs.AlwaysCloseQuickMenu == rhs.AlwaysCloseQuickMenu &&
		lhs.ArrowBounceLeftCurve == rhs.ArrowBounceLeftCurve &&
		lhs.ArrowBounceRightCurve == rhs.ArrowBounceRightCurve &&
		lhs.AutoScrollParagraphs == rhs.AutoScrollParagraphs &&
		lhs.BaseBuildingSmoothMenuWhileSnapped == rhs.BaseBuildingSmoothMenuWhileSnapped &&
		lhs.BigPicking == rhs.BigPicking &&
		lhs.BigPickingUsesNumbers == rhs.BigPickingUsesNumbers &&
		lhs.BinocularScanScreen == rhs.BinocularScanScreen &&
		lhs.CompassCurve == rhs.CompassCurve &&
		lhs.CreatureInteractLabelUseBB == rhs.CreatureInteractLabelUseBB &&
		lhs.CreatureReticuleAlphaCurve == rhs.CreatureReticuleAlphaCurve &&
		lhs.CreatureReticuleScaleCurve == rhs.CreatureReticuleScaleCurve &&
		lhs.CrosshairLeadScaleCurve == rhs.CrosshairLeadScaleCurve &&
		lhs.CrosshairTargetLockAlphaCurve == rhs.CrosshairTargetLockAlphaCurve &&
		lhs.CrosshairTargetLockCurve == rhs.CrosshairTargetLockCurve &&
		lhs.DamageNumberUpCurve == rhs.DamageNumberUpCurve &&
		lhs.DebugInventoryIndices == rhs.DebugInventoryIndices &&
		lhs.DebugMarkerLabels == rhs.DebugMarkerLabels &&
		lhs.DebugMissionLogText == rhs.DebugMissionLogText &&
		lhs.DebugPopupSizes == rhs.DebugPopupSizes &&
		lhs.DebugShowMaintenanceScreenCentre == rhs.DebugShowMaintenanceScreenCentre &&
		lhs.EnableAccessibleUIOnSwitch == rhs.EnableAccessibleUIOnSwitch &&
		lhs.EnableBlackouts == rhs.EnableBlackouts &&
		lhs.EnableBuilderRobotGreekConversion == rhs.EnableBuilderRobotGreekConversion &&
		lhs.EnableCraftingTree == rhs.EnableCraftingTree &&
		lhs.EnableHandMenuButtons == rhs.EnableHandMenuButtons &&
		lhs.EnableHandMenuDebug == rhs.EnableHandMenuDebug &&
		lhs.EnableKanaConversion == rhs.EnableKanaConversion &&
		lhs.EnablePopupUses == rhs.EnablePopupUses &&
		lhs.FixedInventoryIconPositions == rhs.FixedInventoryIconPositions &&
		lhs.FrontendBootBarCurve == rhs.FrontendBootBarCurve &&
		lhs.FrontendConfirmCurve == rhs.FrontendConfirmCurve &&
		lhs.FrontendDoFCurve == rhs.FrontendDoFCurve &&
		lhs.FrontendDoFEnableBokeh == rhs.FrontendDoFEnableBokeh &&
		lhs.HideExtremePlanetNotifications == rhs.HideExtremePlanetNotifications &&
		lhs.HideQuickMenuControls == rhs.HideQuickMenuControls &&
		lhs.HUDMarkerActiveCurve == rhs.HUDMarkerActiveCurve &&
		lhs.HUDMarkerAnimAlphaCurve == rhs.HUDMarkerAnimAlphaCurve &&
		lhs.HUDMarkerAnimCurve == rhs.HUDMarkerAnimCurve &&
		lhs.HUDPlayerTrackArrowEnergyShieldDepletedCurve == rhs.HUDPlayerTrackArrowEnergyShieldDepletedCurve &&
		lhs.HUDPlayerTrackArrowEnergyShieldStartChargeCurve == rhs.HUDPlayerTrackArrowEnergyShieldStartChargeCurve &&
		lhs.InteractionInWorldPlayerCamAlways == rhs.InteractionInWorldPlayerCamAlways &&
		lhs.InteractionScanSlapCurve == rhs.InteractionScanSlapCurve &&
		lhs.LeadTargetEnabled == rhs.LeadTargetEnabled &&
		lhs.ModelRendererBGPass == rhs.ModelRendererBGPass &&
		lhs.ModelRendererPass1 == rhs.ModelRendererPass1 &&
		lhs.ModelRendererPass2 == rhs.ModelRendererPass2 &&
		lhs.NGuiModelViewFadeInAfterRenderCurve == rhs.NGuiModelViewFadeInAfterRenderCurve &&
		lhs.NGuiUseSeparateLayersForModelAndReflection == rhs.NGuiUseSeparateLayersForModelAndReflection &&
		lhs.OnlyShowEjectHandlesInVR == rhs.OnlyShowEjectHandlesInVR &&
		lhs.PadCursorUICurve == rhs.PadCursorUICurve &&
		lhs.PageTurnCurve == rhs.PageTurnCurve &&
		lhs.PageTurnFadeCurve == rhs.PageTurnFadeCurve &&
		lhs.PopupActivateCurve1 == rhs.PopupActivateCurve1 &&
		lhs.PopupActivateCurve2 == rhs.PopupActivateCurve2 &&
		lhs.ProgressiveDialogStyle == rhs.ProgressiveDialogStyle &&
		lhs.QuickMenuAllowCycle == rhs.QuickMenuAllowCycle &&
		lhs.QuickMenuEnableSwipe == rhs.QuickMenuEnableSwipe &&
		lhs.RepairTechUseTechIcon == rhs.RepairTechUseTechIcon &&
		lhs.ReplaceItemBarWithNumbers == rhs.ReplaceItemBarWithNumbers &&
		lhs.ShieldHUDAlwaysOn == rhs.ShieldHUDAlwaysOn &&
		lhs.ShowDamageNumbers == rhs.ShowDamageNumbers &&
		lhs.ShowDifficultyForBases == rhs.ShowDifficultyForBases &&
		lhs.ShowJetpackNotificationForNonTerrain == rhs.ShowJetpackNotificationForNonTerrain &&
		lhs.ShowOnscreenPredatorMarkers == rhs.ShowOnscreenPredatorMarkers &&
		lhs.ShowPadlockForLockedSettings == rhs.ShowPadlockForLockedSettings &&
		lhs.ShowVRDistanceWarning == rhs.ShowVRDistanceWarning &&
		lhs.SkipShopIntro == rhs.SkipShopIntro &&
		lhs.SpaceMapDistanceCurve == rhs.SpaceMapDistanceCurve &&
		lhs.SpaceMapShowAnomaly == rhs.SpaceMapShowAnomaly &&
		lhs.SpaceMapShowAnomalyLines == rhs.SpaceMapShowAnomalyLines &&
		lhs.SpaceMapShowFrieghterLines == rhs.SpaceMapShowFrieghterLines &&
		lhs.SpaceMapShowFrieghters == rhs.SpaceMapShowFrieghters &&
		lhs.SpaceMapShowNexus == rhs.SpaceMapShowNexus &&
		lhs.SpaceMapShowNexusLines == rhs.SpaceMapShowNexusLines &&
		lhs.SpaceMapShowPlanetLines == rhs.SpaceMapShowPlanetLines &&
		lhs.SpaceMapShowPlanets == rhs.SpaceMapShowPlanets &&
		lhs.SpaceMapShowPulseEncounterLines == rhs.SpaceMapShowPulseEncounterLines &&
		lhs.SpaceMapShowPulseEncounters == rhs.SpaceMapShowPulseEncounters &&
		lhs.SpaceMapShowShipLines == rhs.SpaceMapShowShipLines &&
		lhs.SpaceMapShowShips == rhs.SpaceMapShowShips &&
		lhs.SpaceMapShowStation == rhs.SpaceMapShowStation &&
		lhs.SpaceMapShowStationLines == rhs.SpaceMapShowStationLines &&
		lhs.SpaceOnlyLeadTargetEnabled == rhs.SpaceOnlyLeadTargetEnabled &&
		lhs.TechBoxesCanStack == rhs.TechBoxesCanStack &&
		lhs.TrackCritCurve == rhs.TrackCritCurve &&
		lhs.TrackReticuleInAngleCurve == rhs.TrackReticuleInAngleCurve &&
		lhs.TrackReticuleInCurve == rhs.TrackReticuleInCurve &&
		lhs.UseCursorHoverSlowFixedValue == rhs.UseCursorHoverSlowFixedValue &&
		lhs.UseIntermediateMissionGiverOptions == rhs.UseIntermediateMissionGiverOptions &&
		lhs.UseNamesOnShipHUD == rhs.UseNamesOnShipHUD &&
		lhs.UseSquareSlots == rhs.UseSquareSlots &&
		lhs.UseWorldNodesForRepair == rhs.UseWorldNodesForRepair;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcDamageType
{
	enum class DamageTypeEnum : uint32_t
	{
		Gun = 0,
		Laser = 1,
		Shotgun = 2,
		Burst = 3,
		Rail = 4,
		Cannon = 5,
		Explosion = 6,
		Melee = 7,
		ShipGun = 8,
		ShipLaser = 9,
		ShipShotgun = 10,
		ShipMinigun = 11,
		ShipRockets = 12,
		ShipPlasma = 13,
		VehicleGun = 14,
		VehicleLaser = 15,
		SentinelLaser = 16,
		PlayerDamage = 17,
		PlayerWeapons = 18,
		ShipWeapons = 19,
		VehicleWeapons = 20,
		CombatEffects = 21,
		Fiend = 22,
		FreighterLaser = 23,
		FreighterTorpedo = 24,
	};

	NMS_GameComponents::GcDamageType::DamageTypeEnum DamageType;

	friend bool operator==(const GcDamageType& lhs, const GcDamageType& rhs) 
	{
		return lhs.DamageType == rhs.DamageType;
	}
};

//Dependency: GcDamageType
struct GcDamageMultiplier
{
	float Multiplier;
	NMS_GameComponents::GcDamageType Type;

	friend bool operator==(const GcDamageMultiplier& lhs, const GcDamageMultiplier& rhs) 
	{
		return lhs.Multiplier == rhs.Multiplier &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcDamageMultiplier
//Dependency: NMSString0x10
struct GcDamageMultiplierLookup
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcDamageMultiplier> Multipliers;
	float Default;

	friend bool operator==(const GcDamageMultiplierLookup& lhs, const GcDamageMultiplierLookup& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Multipliers == rhs.Multipliers &&
		lhs.Default == rhs.Default;
	}
};

//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcCustomisationHeadToRace
{
	NMS::NMSString0x20A HeadDescriptor;
	NMS_GameComponents::GcAlienRace HeadAnimationRace;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcCustomisationHeadToRace& lhs, const GcCustomisationHeadToRace& rhs) 
	{
		return lhs.HeadDescriptor == rhs.HeadDescriptor &&
		lhs.HeadAnimationRace == rhs.HeadAnimationRace &&
		lhs.Race == rhs.Race;
	}
};

struct GcCreaturePetRewardActions
{
	enum class PetActionEnum : uint32_t
	{
		Tickle = 0,
		Treat = 1,
		Ride = 2,
		Customise = 3,
		Abandon = 4,
		LayEgg = 5,
		Adopt = 6,
		Milk = 7,
		HarvestSpecial = 8,
	};

	NMS_GameComponents::GcCreaturePetRewardActions::PetActionEnum PetAction;

	friend bool operator==(const GcCreaturePetRewardActions& lhs, const GcCreaturePetRewardActions& rhs) 
	{
		return lhs.PetAction == rhs.PetAction;
	}
};

//Dependency: GcCreaturePetTraitRange
struct GcCreaturePetTraitRanges
{
	NMS_GameComponents::GcCreaturePetTraitRange TraitRanges[3];

	friend bool operator==(const GcCreaturePetTraitRanges& lhs, const GcCreaturePetTraitRanges& rhs) 
	{
		return std::equal(std::begin(lhs.TraitRanges), std::end(lhs.TraitRanges), std::begin(rhs.TraitRanges));
	}
};

struct GcMissionConditionIsPlayerWeak
{
	enum class ProgressTypeEnum : uint32_t
	{
		ShipOrWeapon = 0,
		Ship = 1,
		Weapon = 2,
	};

	NMS_GameComponents::GcMissionConditionIsPlayerWeak::ProgressTypeEnum ProgressType;

	friend bool operator==(const GcMissionConditionIsPlayerWeak& lhs, const GcMissionConditionIsPlayerWeak& rhs) 
	{
		return lhs.ProgressType == rhs.ProgressType;
	}
};

//Dependency: NMSString0x10
struct GcCreatureRidingAnimation
{
	NMS::NMSString0x10 MovementAnim;
	NMS::NMSString0x10 RidingAnim;

	friend bool operator==(const GcCreatureRidingAnimation& lhs, const GcCreatureRidingAnimation& rhs) 
	{
		return lhs.MovementAnim == rhs.MovementAnim &&
		lhs.RidingAnim == rhs.RidingAnim;
	}
};

//Dependency: GcCreatureRidingAnimation
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureRidingPartModifier
{
	NMS::Vector3f Offset;
	NMS::Vector3f RotationOffset;
	NMS::Vector3f VROffset;
	NMS::NMSString0x20A PartName;
	NMS::NMSString0x10 DefaultRidingAnim;
	NMS::NMSString0x10 IdleRidingAnim;
	std::vector<NMS_GameComponents::GcCreatureRidingAnimation> RidingAnims;
	float HeadCounterRotation;
	float LegSpreadOffset;
	float MaxScale;
	float MinScale;
	NMS::NMSString0x100 AdditionalScaleJoint;
	NMS::NMSString0x100 JointName;
	bool BreakIfNotSelected;
	bool OverrideAnims;
	bool RelativeOffset;

	friend bool operator==(const GcCreatureRidingPartModifier& lhs, const GcCreatureRidingPartModifier& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.RotationOffset == rhs.RotationOffset &&
		lhs.VROffset == rhs.VROffset &&
		lhs.PartName == rhs.PartName &&
		lhs.DefaultRidingAnim == rhs.DefaultRidingAnim &&
		lhs.IdleRidingAnim == rhs.IdleRidingAnim &&
		lhs.RidingAnims == rhs.RidingAnims &&
		lhs.HeadCounterRotation == rhs.HeadCounterRotation &&
		lhs.LegSpreadOffset == rhs.LegSpreadOffset &&
		lhs.MaxScale == rhs.MaxScale &&
		lhs.MinScale == rhs.MinScale &&
		lhs.AdditionalScaleJoint == rhs.AdditionalScaleJoint &&
		lhs.JointName == rhs.JointName &&
		lhs.BreakIfNotSelected == rhs.BreakIfNotSelected &&
		lhs.OverrideAnims == rhs.OverrideAnims &&
		lhs.RelativeOffset == rhs.RelativeOffset;
	}
};

//Dependency: GcCreatureRidingPartModifier
//Dependency: GcCreatureRidingAnimation
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureRidingData
{
	NMS::Vector3f Offset;
	NMS::Vector3f RotationOffset;
	NMS::Vector3f VROffset;
	NMS::NMSString0x10 DefaultRidingAnim;
	NMS::NMSString0x10 IdleRidingAnim;
	std::vector<NMS_GameComponents::GcCreatureRidingPartModifier> PartModifiers;
	std::vector<NMS_GameComponents::GcCreatureRidingAnimation> RidingAnims;
	float HeadCounterRotation;
	float ScaleForMaxLegSpread;
	float ScaleForMinLegSpread;
	float ScaleForNeutralLegSpread;
	float UprightStrength;
	NMS::NMSString0x100 AdditionalScaleJoint;
	NMS::NMSString0x100 JointName;
	bool LegSpread;
	bool RequiresMatchingPartModifier;

	friend bool operator==(const GcCreatureRidingData& lhs, const GcCreatureRidingData& rhs) 
	{
		return lhs.Offset == rhs.Offset &&
		lhs.RotationOffset == rhs.RotationOffset &&
		lhs.VROffset == rhs.VROffset &&
		lhs.DefaultRidingAnim == rhs.DefaultRidingAnim &&
		lhs.IdleRidingAnim == rhs.IdleRidingAnim &&
		lhs.PartModifiers == rhs.PartModifiers &&
		lhs.RidingAnims == rhs.RidingAnims &&
		lhs.HeadCounterRotation == rhs.HeadCounterRotation &&
		lhs.ScaleForMaxLegSpread == rhs.ScaleForMaxLegSpread &&
		lhs.ScaleForMinLegSpread == rhs.ScaleForMinLegSpread &&
		lhs.ScaleForNeutralLegSpread == rhs.ScaleForNeutralLegSpread &&
		lhs.UprightStrength == rhs.UprightStrength &&
		lhs.AdditionalScaleJoint == rhs.AdditionalScaleJoint &&
		lhs.JointName == rhs.JointName &&
		lhs.LegSpread == rhs.LegSpread &&
		lhs.RequiresMatchingPartModifier == rhs.RequiresMatchingPartModifier;
	}
};

struct GcMissionGalacticPoint
{
	enum class GalacticPointEnum : uint32_t
	{
		Atlas = 0,
		BlackHole = 1,
	};

	NMS_GameComponents::GcMissionGalacticPoint::GalacticPointEnum GalacticPoint;

	friend bool operator==(const GcMissionGalacticPoint& lhs, const GcMissionGalacticPoint& rhs) 
	{
		return lhs.GalacticPoint == rhs.GalacticPoint;
	}
};

//Dependency: GcCreatureRoleDescription
//Dependency: GcPlanetLife
//Dependency: GcTerrainTileType
struct GcCreatureRoleDescriptionTable
{
	std::vector<NMS_GameComponents::GcCreatureRoleDescription> RoleDescription;
	NMS_GameComponents::GcPlanetLife LifeLevel;
	float MaxScaleVariance;
	float MinScaleVariance;
	NMS_GameComponents::GcTerrainTileType TileType;

	friend bool operator==(const GcCreatureRoleDescriptionTable& lhs, const GcCreatureRoleDescriptionTable& rhs) 
	{
		return lhs.RoleDescription == rhs.RoleDescription &&
		lhs.LifeLevel == rhs.LifeLevel &&
		lhs.MaxScaleVariance == rhs.MaxScaleVariance &&
		lhs.MinScaleVariance == rhs.MinScaleVariance &&
		lhs.TileType == rhs.TileType;
	}
};

//Dependency: GcInteractionData
struct GcInteractionBuffer
{
	std::vector<NMS_GameComponents::GcInteractionData> Interactions;
	int32_t CurrentPos;

	friend bool operator==(const GcInteractionBuffer& lhs, const GcInteractionBuffer& rhs) 
	{
		return lhs.Interactions == rhs.Interactions &&
		lhs.CurrentPos == rhs.CurrentPos;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionFrigateCount
{
	int32_t FrigateCount;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionFrigateCount& lhs, const GcMissionConditionFrigateCount& rhs) 
	{
		return lhs.FrigateCount == rhs.FrigateCount &&
		lhs.Test == rhs.Test;
	}
};

struct GcMissionConditionNearRobotSite
{
	float Distance;
	bool RequireNPCs;
	bool RequireRevealTech;

	friend bool operator==(const GcMissionConditionNearRobotSite& lhs, const GcMissionConditionNearRobotSite& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.RequireNPCs == rhs.RequireNPCs &&
		lhs.RequireRevealTech == rhs.RequireRevealTech;
	}
};

//Dependency: GcResourceElement
//Dependency: GcCreatureRoles
//Dependency: GcCreatureTypes
//Dependency: GcCreatureHemiSphere
//Dependency: GcRarity
//Dependency: GcTerrainTileType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCreatureSpawnData
{
	NMS_GameComponents::GcResourceElement ExtraResource;
	NMS_GameComponents::GcResourceElement FemaleResource;
	NMS_GameComponents::GcResourceElement Resource;
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 CreatureID;
	float CreatureActiveInDayChance;
	float CreatureActiveInNightChance;
	float CreatureDespawnDistance;
	float CreatureGroupsPerSquareKm;
	int32_t CreatureMaxGroupSize;
	int32_t CreatureMinGroupSize;
	NMS_GameComponents::GcCreatureRoles CreatureRole;
	float CreatureSpawnDistance;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	NMS_GameComponents::GcCreatureHemiSphere HemiSphere;
	float MaxScale;
	float MinScale;
	NMS_GameComponents::GcRarity Rarity;
	int32_t RoleDataIndex;
	NMS_GameComponents::GcTerrainTileType TileType;
	bool AllowFur;
	bool Herd;
	bool SwapPrimaryForRandomColour;
	bool SwapPrimaryForSecondaryColour;

	friend bool operator==(const GcCreatureSpawnData& lhs, const GcCreatureSpawnData& rhs) 
	{
		return lhs.ExtraResource == rhs.ExtraResource &&
		lhs.FemaleResource == rhs.FemaleResource &&
		lhs.Resource == rhs.Resource &&
		lhs.Filter == rhs.Filter &&
		lhs.CreatureID == rhs.CreatureID &&
		lhs.CreatureActiveInDayChance == rhs.CreatureActiveInDayChance &&
		lhs.CreatureActiveInNightChance == rhs.CreatureActiveInNightChance &&
		lhs.CreatureDespawnDistance == rhs.CreatureDespawnDistance &&
		lhs.CreatureGroupsPerSquareKm == rhs.CreatureGroupsPerSquareKm &&
		lhs.CreatureMaxGroupSize == rhs.CreatureMaxGroupSize &&
		lhs.CreatureMinGroupSize == rhs.CreatureMinGroupSize &&
		lhs.CreatureRole == rhs.CreatureRole &&
		lhs.CreatureSpawnDistance == rhs.CreatureSpawnDistance &&
		lhs.CreatureType == rhs.CreatureType &&
		lhs.HemiSphere == rhs.HemiSphere &&
		lhs.MaxScale == rhs.MaxScale &&
		lhs.MinScale == rhs.MinScale &&
		lhs.Rarity == rhs.Rarity &&
		lhs.RoleDataIndex == rhs.RoleDataIndex &&
		lhs.TileType == rhs.TileType &&
		lhs.AllowFur == rhs.AllowFur &&
		lhs.Herd == rhs.Herd &&
		lhs.SwapPrimaryForRandomColour == rhs.SwapPrimaryForRandomColour &&
		lhs.SwapPrimaryForSecondaryColour == rhs.SwapPrimaryForSecondaryColour;
	}
};

//Dependency: GcBuildingClassification
struct GcNPCSettlementBehaviourBuildingClassCapacityEntry
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	int32_t Capacity;

	friend bool operator==(const GcNPCSettlementBehaviourBuildingClassCapacityEntry& lhs, const GcNPCSettlementBehaviourBuildingClassCapacityEntry& rhs) 
	{
		return lhs.BuildingClass == rhs.BuildingClass &&
		lhs.Capacity == rhs.Capacity;
	}
};

struct GcCreatureSpawnEnum
{
	enum class IncrementorEnum : uint32_t
	{
		None = 0,
		Resource = 1,
		ResourceAway = 2,
		HeavyAir = 3,
		Drone = 4,
		Deer = 5,
		DeerScan = 6,
		DeerWords = 7,
		DeerWordsAway = 8,
		Diplo = 9,
		DiploScan = 10,
		DiploWords = 11,
		DiploWordsAway = 12,
		Flyby = 13,
		Beast = 14,
		Wingmen = 15,
		Scouts = 16,
		Fleet = 17,
		Attackers = 18,
		AttackersFromBehind = 19,
		Flee = 20,
		RemoveFleet = 21,
		Fighters = 22,
		PostFighters = 23,
		Escape = 24,
		Warp = 25,
	};

	NMS_GameComponents::GcCreatureSpawnEnum::IncrementorEnum Incrementor;

	friend bool operator==(const GcCreatureSpawnEnum& lhs, const GcCreatureSpawnEnum& rhs) 
	{
		return lhs.Incrementor == rhs.Incrementor;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcCreatureSpookFiendAttackData
{
	NMS::NMSString0x10 SpitAttackAnim;
	NMS::Vector2f FollowDistanceOscillationRange;
	NMS::Vector2f FollowHeightOscillationRange;
	NMS::Vector2f FollowSpeedOscillationRange;
	NMS::Vector2f HideDuration;
	NMS::Vector2f KamikazeCooldown;
	NMS::Vector2f KamikazePickWeightRange;
	NMS::Vector2f KamikazeThreatLevelRange;
	NMS::Vector2f NullAttackCooldown;
	NMS::Vector2f PostAttackMinVisibleDuration;
	NMS::Vector2f RevealDuration;
	NMS::Vector2f SpitAttackCooldown;
	NMS::Vector2f SpitPickWeightRange;
	NMS::Vector2f SpitThreatLevelRange;
	NMS::Vector2f ThreatLevelHealthScale;
	NMS::Vector2f ThreatLevelTimeAliveScale;
	float ApproachDistance;
	float FadeTime;
	float FollowDistanceOscillationPeriod;
	float FollowHeightOscillationPeriod;
	float FollowSpeedOscillationPeriod;
	NMS_GameComponents::GcAudioWwiseEvents KamikazeAudioEventBegin;
	NMS_GameComponents::GcAudioWwiseEvents KamikazeAudioEventEnd;
	int32_t MaxSimultaneousKamikaze;
	float NullAttackWeight;
	float ReapproachDistance;
	int32_t SpitAttackAnimFrame;
	float SpitAttackPauseTime;
	float ThreatLevelHealthWeight;
	float ThreatLevelSpookWeight;
	float ThreatLevelTimeAliveWeight;

	friend bool operator==(const GcCreatureSpookFiendAttackData& lhs, const GcCreatureSpookFiendAttackData& rhs) 
	{
		return lhs.SpitAttackAnim == rhs.SpitAttackAnim &&
		lhs.FollowDistanceOscillationRange == rhs.FollowDistanceOscillationRange &&
		lhs.FollowHeightOscillationRange == rhs.FollowHeightOscillationRange &&
		lhs.FollowSpeedOscillationRange == rhs.FollowSpeedOscillationRange &&
		lhs.HideDuration == rhs.HideDuration &&
		lhs.KamikazeCooldown == rhs.KamikazeCooldown &&
		lhs.KamikazePickWeightRange == rhs.KamikazePickWeightRange &&
		lhs.KamikazeThreatLevelRange == rhs.KamikazeThreatLevelRange &&
		lhs.NullAttackCooldown == rhs.NullAttackCooldown &&
		lhs.PostAttackMinVisibleDuration == rhs.PostAttackMinVisibleDuration &&
		lhs.RevealDuration == rhs.RevealDuration &&
		lhs.SpitAttackCooldown == rhs.SpitAttackCooldown &&
		lhs.SpitPickWeightRange == rhs.SpitPickWeightRange &&
		lhs.SpitThreatLevelRange == rhs.SpitThreatLevelRange &&
		lhs.ThreatLevelHealthScale == rhs.ThreatLevelHealthScale &&
		lhs.ThreatLevelTimeAliveScale == rhs.ThreatLevelTimeAliveScale &&
		lhs.ApproachDistance == rhs.ApproachDistance &&
		lhs.FadeTime == rhs.FadeTime &&
		lhs.FollowDistanceOscillationPeriod == rhs.FollowDistanceOscillationPeriod &&
		lhs.FollowHeightOscillationPeriod == rhs.FollowHeightOscillationPeriod &&
		lhs.FollowSpeedOscillationPeriod == rhs.FollowSpeedOscillationPeriod &&
		lhs.KamikazeAudioEventBegin == rhs.KamikazeAudioEventBegin &&
		lhs.KamikazeAudioEventEnd == rhs.KamikazeAudioEventEnd &&
		lhs.MaxSimultaneousKamikaze == rhs.MaxSimultaneousKamikaze &&
		lhs.NullAttackWeight == rhs.NullAttackWeight &&
		lhs.ReapproachDistance == rhs.ReapproachDistance &&
		lhs.SpitAttackAnimFrame == rhs.SpitAttackAnimFrame &&
		lhs.SpitAttackPauseTime == rhs.SpitAttackPauseTime &&
		lhs.ThreatLevelHealthWeight == rhs.ThreatLevelHealthWeight &&
		lhs.ThreatLevelSpookWeight == rhs.ThreatLevelSpookWeight &&
		lhs.ThreatLevelTimeAliveWeight == rhs.ThreatLevelTimeAliveWeight;
	}
};

//Dependency: NMSString0x20A
struct GcSavedInteractionDialogData
{
	NMS::NMSString0x20A Dialog;
	uint64_t Hash;

	friend bool operator==(const GcSavedInteractionDialogData& lhs, const GcSavedInteractionDialogData& rhs) 
	{
		return lhs.Dialog == rhs.Dialog &&
		lhs.Hash == rhs.Hash;
	}
};

//Dependency: GcCreatureStupidName
//Dependency: NMSString0x80
struct GcCreatureStupidNameTable
{
	std::vector<NMS_GameComponents::GcCreatureStupidName> Table;
	NMS::NMSString0x80 StupidUserName;

	friend bool operator==(const GcCreatureStupidNameTable& lhs, const GcCreatureStupidNameTable& rhs) 
	{
		return lhs.Table == rhs.Table &&
		lhs.StupidUserName == rhs.StupidUserName;
	}
};

//Dependency: GcDebrisData
//Dependency: GcAudioWwiseEvents
//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x10
struct GcExplosionData
{
	NMS::Colour AddedLightColour;
	NMS_Toolkit::TkModelResource Model;
	std::vector<NMS_GameComponents::GcDebrisData> Debris;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ShakeId;
	float AddedLightIntensity;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float CamShakeCustomMaxDistance;
	float DistanceScale;
	float DistanceScaleMax;
	float Life;
	float LightFadeInTime;
	float LightFadeOutTime;
	float MaxSpawnDistance;
	float Scale;
	float ShakeStrengthModifier;
	bool AddLight;
	bool AllowDestructableDebris;
	bool AllowShootableDebris;
	bool AllowTriggerActionOnDebris;
	bool CamShake;
	bool CamShakeSpaceScale;

	friend bool operator==(const GcExplosionData& lhs, const GcExplosionData& rhs) 
	{
		return lhs.AddedLightColour == rhs.AddedLightColour &&
		lhs.Model == rhs.Model &&
		lhs.Debris == rhs.Debris &&
		lhs.Id == rhs.Id &&
		lhs.ShakeId == rhs.ShakeId &&
		lhs.AddedLightIntensity == rhs.AddedLightIntensity &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.CamShakeCustomMaxDistance == rhs.CamShakeCustomMaxDistance &&
		lhs.DistanceScale == rhs.DistanceScale &&
		lhs.DistanceScaleMax == rhs.DistanceScaleMax &&
		lhs.Life == rhs.Life &&
		lhs.LightFadeInTime == rhs.LightFadeInTime &&
		lhs.LightFadeOutTime == rhs.LightFadeOutTime &&
		lhs.MaxSpawnDistance == rhs.MaxSpawnDistance &&
		lhs.Scale == rhs.Scale &&
		lhs.ShakeStrengthModifier == rhs.ShakeStrengthModifier &&
		lhs.AddLight == rhs.AddLight &&
		lhs.AllowDestructableDebris == rhs.AllowDestructableDebris &&
		lhs.AllowShootableDebris == rhs.AllowShootableDebris &&
		lhs.AllowTriggerActionOnDebris == rhs.AllowTriggerActionOnDebris &&
		lhs.CamShake == rhs.CamShake &&
		lhs.CamShakeSpaceScale == rhs.CamShakeSpaceScale;
	}
};

//Dependency: GcExplosionData
//Dependency: NMSString0x80
struct GcExplosionDataTable
{
	std::vector<NMS_GameComponents::GcExplosionData> Table;
	NMS::NMSString0x80 Name;

	friend bool operator==(const GcExplosionDataTable& lhs, const GcExplosionDataTable& rhs) 
	{
		return lhs.Table == rhs.Table &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCreatureSwarmDataParams
{
	NMS::NMSString0x10 AnimThrustCycleAnim;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float Alignment;
	float AlignTime;
	float AnimThrustCycleEnd;
	float AnimThrustCycleMax;
	float AnimThrustCycleMin;
	float AnimThrustCyclePeak;
	float AnimThrustCycleStart;
	float BankingTime;
	float Coherence;
	float FaceMoveDirStrength;
	float FlyTimeMax;
	float FlyTimeMin;
	float Follow;
	float LandAdjustDist;
	float LandClampBegin;
	float LandIdleTimeMax;
	float LandIdleTimeMin;
	float LandSlowDown;
	float LandTimeMax;
	float LandTimeMin;
	float LandWalkTimeMax;
	float LandWalkTimeMin;
	float MaxBankingAmount;
	float MaxPitchAmount;
	float MaxSpeed;
	float MinPitchAmount;
	float SeparateStrength;
	float Spacing;
	float SpeedForMaxPitch;
	float SpeedForMinPitch;
	float SteeringSpringSmoothTime;
	float SwimAnimSpeedMax;
	float SwimAnimSpeedMin;
	float SwimFastSpeedMul;
	float SwimMaxAcceleration;
	float SwimTurn;
	float TakeOffStartSpeed;
	float TakeOffTime;
	float TakeOffUpwardBoost;
	float TurnRequiredForMaxBanking;
	float UpwardMovementForMaxPitch;
	float WalkSpeed;
	float WalkTurnTime;
	bool ApplyScaleToSpeed;
	bool ApplyScaleToSteeringSmoothTime;
	bool CanLand;
	bool CanWalk;
	bool FaceMoveDirYawOnly;
	bool UseAnimThrustCycle;

	friend bool operator==(const GcCreatureSwarmDataParams& lhs, const GcCreatureSwarmDataParams& rhs) 
	{
		return lhs.AnimThrustCycleAnim == rhs.AnimThrustCycleAnim &&
		lhs.ValidDescriptors == rhs.ValidDescriptors &&
		lhs.Alignment == rhs.Alignment &&
		lhs.AlignTime == rhs.AlignTime &&
		lhs.AnimThrustCycleEnd == rhs.AnimThrustCycleEnd &&
		lhs.AnimThrustCycleMax == rhs.AnimThrustCycleMax &&
		lhs.AnimThrustCycleMin == rhs.AnimThrustCycleMin &&
		lhs.AnimThrustCyclePeak == rhs.AnimThrustCyclePeak &&
		lhs.AnimThrustCycleStart == rhs.AnimThrustCycleStart &&
		lhs.BankingTime == rhs.BankingTime &&
		lhs.Coherence == rhs.Coherence &&
		lhs.FaceMoveDirStrength == rhs.FaceMoveDirStrength &&
		lhs.FlyTimeMax == rhs.FlyTimeMax &&
		lhs.FlyTimeMin == rhs.FlyTimeMin &&
		lhs.Follow == rhs.Follow &&
		lhs.LandAdjustDist == rhs.LandAdjustDist &&
		lhs.LandClampBegin == rhs.LandClampBegin &&
		lhs.LandIdleTimeMax == rhs.LandIdleTimeMax &&
		lhs.LandIdleTimeMin == rhs.LandIdleTimeMin &&
		lhs.LandSlowDown == rhs.LandSlowDown &&
		lhs.LandTimeMax == rhs.LandTimeMax &&
		lhs.LandTimeMin == rhs.LandTimeMin &&
		lhs.LandWalkTimeMax == rhs.LandWalkTimeMax &&
		lhs.LandWalkTimeMin == rhs.LandWalkTimeMin &&
		lhs.MaxBankingAmount == rhs.MaxBankingAmount &&
		lhs.MaxPitchAmount == rhs.MaxPitchAmount &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MinPitchAmount == rhs.MinPitchAmount &&
		lhs.SeparateStrength == rhs.SeparateStrength &&
		lhs.Spacing == rhs.Spacing &&
		lhs.SpeedForMaxPitch == rhs.SpeedForMaxPitch &&
		lhs.SpeedForMinPitch == rhs.SpeedForMinPitch &&
		lhs.SteeringSpringSmoothTime == rhs.SteeringSpringSmoothTime &&
		lhs.SwimAnimSpeedMax == rhs.SwimAnimSpeedMax &&
		lhs.SwimAnimSpeedMin == rhs.SwimAnimSpeedMin &&
		lhs.SwimFastSpeedMul == rhs.SwimFastSpeedMul &&
		lhs.SwimMaxAcceleration == rhs.SwimMaxAcceleration &&
		lhs.SwimTurn == rhs.SwimTurn &&
		lhs.TakeOffStartSpeed == rhs.TakeOffStartSpeed &&
		lhs.TakeOffTime == rhs.TakeOffTime &&
		lhs.TakeOffUpwardBoost == rhs.TakeOffUpwardBoost &&
		lhs.TurnRequiredForMaxBanking == rhs.TurnRequiredForMaxBanking &&
		lhs.UpwardMovementForMaxPitch == rhs.UpwardMovementForMaxPitch &&
		lhs.WalkSpeed == rhs.WalkSpeed &&
		lhs.WalkTurnTime == rhs.WalkTurnTime &&
		lhs.ApplyScaleToSpeed == rhs.ApplyScaleToSpeed &&
		lhs.ApplyScaleToSteeringSmoothTime == rhs.ApplyScaleToSteeringSmoothTime &&
		lhs.CanLand == rhs.CanLand &&
		lhs.CanWalk == rhs.CanWalk &&
		lhs.FaceMoveDirYawOnly == rhs.FaceMoveDirYawOnly &&
		lhs.UseAnimThrustCycle == rhs.UseAnimThrustCycle;
	}
};

//Dependency: GcCreatureSwarmDataParams
struct GcCreatureSwarmData
{
	enum class SwarmMovementTypeEnum : uint32_t
	{
		None = 0,
		Circle = 1,
		Random = 2,
		Search = 3,
		FollowPlayer = 4,
		FollowPlayerLimited = 5,
	};

	std::vector<NMS_GameComponents::GcCreatureSwarmDataParams> Params;
	int32_t MaxCount;
	int32_t MinCount;
	float SwarmMovementRadius;
	float SwarmMovementSpeed;
	NMS_GameComponents::GcCreatureSwarmData::SwarmMovementTypeEnum SwarmMovementType;

	friend bool operator==(const GcCreatureSwarmData& lhs, const GcCreatureSwarmData& rhs) 
	{
		return lhs.Params == rhs.Params &&
		lhs.MaxCount == rhs.MaxCount &&
		lhs.MinCount == rhs.MinCount &&
		lhs.SwarmMovementRadius == rhs.SwarmMovementRadius &&
		lhs.SwarmMovementSpeed == rhs.SwarmMovementSpeed &&
		lhs.SwarmMovementType == rhs.SwarmMovementType;
	}
};

struct GcMissionConditionIsSurveying
{
	enum class ForHotspotTypeEnum : uint32_t
	{
		Any = 0,
		Power = 1,
		Gas = 2,
		Minerals = 3,
	};

	NMS_GameComponents::GcMissionConditionIsSurveying::ForHotspotTypeEnum ForHotspotType;
	bool RequireAlreadyAnalysed;

	friend bool operator==(const GcMissionConditionIsSurveying& lhs, const GcMissionConditionIsSurveying& rhs) 
	{
		return lhs.ForHotspotType == rhs.ForHotspotType &&
		lhs.RequireAlreadyAnalysed == rhs.RequireAlreadyAnalysed;
	}
};

//Dependency: GcNPCTriggerTypes
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcNodeID
struct GcMessageNPCBehaviourEvent
{
	NMS::Vector3f Position;
	NMS::NMSString0x10 BehaviourEvent;
	NMS::NMSString0x10 UserData;
	int32_t InteractionSubType;
	NMS_GameComponents::GcNPCTriggerTypes InteractionTrigger;
	NMS::GcNodeID SourceNode;

	friend bool operator==(const GcMessageNPCBehaviourEvent& lhs, const GcMessageNPCBehaviourEvent& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.BehaviourEvent == rhs.BehaviourEvent &&
		lhs.UserData == rhs.UserData &&
		lhs.InteractionSubType == rhs.InteractionSubType &&
		lhs.InteractionTrigger == rhs.InteractionTrigger &&
		lhs.SourceNode == rhs.SourceNode;
	}
};

//Dependency: GcSolarSystemSkyColourData
struct GcSpaceSkyColourSettingList
{
	std::vector<NMS_GameComponents::GcSolarSystemSkyColourData> Settings;

	friend bool operator==(const GcSpaceSkyColourSettingList& lhs, const GcSpaceSkyColourSettingList& rhs) 
	{
		return lhs.Settings == rhs.Settings;
	}
};

//Dependency: Vector3f
struct GcExpeditionHologramComponentData
{
	NMS::Vector3f SpawnOffset;
	float CaptainScale;
	float FrigateScale;
	float HologramRotationSpeedDegPerSec;

	friend bool operator==(const GcExpeditionHologramComponentData& lhs, const GcExpeditionHologramComponentData& rhs) 
	{
		return lhs.SpawnOffset == rhs.SpawnOffset &&
		lhs.CaptainScale == rhs.CaptainScale &&
		lhs.FrigateScale == rhs.FrigateScale &&
		lhs.HologramRotationSpeedDegPerSec == rhs.HologramRotationSpeedDegPerSec;
	}
};

struct GcMechWeaponLocation
{
	enum class MechWeaponLocationEnum : uint32_t
	{
		TurretExocraft = 0,
		TurretSentinel = 1,
		ArmLeft = 2,
		ArmRight = 3,
		FlameThrower = 4,
	};

	NMS_GameComponents::GcMechWeaponLocation::MechWeaponLocationEnum MechWeaponLocation;

	friend bool operator==(const GcMechWeaponLocation& lhs, const GcMechWeaponLocation& rhs) 
	{
		return lhs.MechWeaponLocation == rhs.MechWeaponLocation;
	}
};

//Dependency: GcVehicleWeaponMuzzleData
//Dependency: GcMechWeaponLocation
//Dependency: NMSString0x10
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: Vector3f
struct GcSentinelMechWeaponData
{
	enum class SentinelMechWeaponTypeEnum : uint32_t
	{
		Projectile = 0,
		Laser = 1,
	};

	NMS::Colour LaserLightColour;
	NMS::Vector3f LaserLightOffset;
	NMS_GameComponents::GcVehicleWeaponMuzzleData MuzzleData;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LaserID;
	NMS::NMSString0x10 Projectile;
	float AttackAngle;
	float ChargeTime;
	float CooldownTimeMax;
	float CooldownTimeMin;
	float IdealRange;
	float LaserFireTimeMax;
	float LaserFireTimeMin;
	float LaserLightAttackIntensity;
	float LaserLightChargeIntensity;
	float LaserSpringTimeMax;
	float LaserSpringTimeMin;
	float MaxRange;
	float MinRange;
	float ProjectileExplosionRadius;
	float ProjectileFireInterval;
	float ProjectileInheritInitialVelocity;
	int32_t ProjectileNumShotsMax;
	int32_t ProjectileNumShotsMin;
	int32_t ProjectilesPerShot;
	float ProjectileSpread;
	NMS_GameComponents::GcSentinelMechWeaponData::SentinelMechWeaponTypeEnum SentinelMechWeaponType;
	NMS_GameComponents::GcMechWeaponLocation ShootLocation;
	NMS_GameComponents::GcAudioWwiseEvents StartFireAudioEvent;
	NMS_GameComponents::GcAudioWwiseEvents StopFireAudioEvent;

	friend bool operator==(const GcSentinelMechWeaponData& lhs, const GcSentinelMechWeaponData& rhs) 
	{
		return lhs.LaserLightColour == rhs.LaserLightColour &&
		lhs.LaserLightOffset == rhs.LaserLightOffset &&
		lhs.MuzzleData == rhs.MuzzleData &&
		lhs.Id == rhs.Id &&
		lhs.LaserID == rhs.LaserID &&
		lhs.Projectile == rhs.Projectile &&
		lhs.AttackAngle == rhs.AttackAngle &&
		lhs.ChargeTime == rhs.ChargeTime &&
		lhs.CooldownTimeMax == rhs.CooldownTimeMax &&
		lhs.CooldownTimeMin == rhs.CooldownTimeMin &&
		lhs.IdealRange == rhs.IdealRange &&
		lhs.LaserFireTimeMax == rhs.LaserFireTimeMax &&
		lhs.LaserFireTimeMin == rhs.LaserFireTimeMin &&
		lhs.LaserLightAttackIntensity == rhs.LaserLightAttackIntensity &&
		lhs.LaserLightChargeIntensity == rhs.LaserLightChargeIntensity &&
		lhs.LaserSpringTimeMax == rhs.LaserSpringTimeMax &&
		lhs.LaserSpringTimeMin == rhs.LaserSpringTimeMin &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.MinRange == rhs.MinRange &&
		lhs.ProjectileExplosionRadius == rhs.ProjectileExplosionRadius &&
		lhs.ProjectileFireInterval == rhs.ProjectileFireInterval &&
		lhs.ProjectileInheritInitialVelocity == rhs.ProjectileInheritInitialVelocity &&
		lhs.ProjectileNumShotsMax == rhs.ProjectileNumShotsMax &&
		lhs.ProjectileNumShotsMin == rhs.ProjectileNumShotsMin &&
		lhs.ProjectilesPerShot == rhs.ProjectilesPerShot &&
		lhs.ProjectileSpread == rhs.ProjectileSpread &&
		lhs.SentinelMechWeaponType == rhs.SentinelMechWeaponType &&
		lhs.ShootLocation == rhs.ShootLocation &&
		lhs.StartFireAudioEvent == rhs.StartFireAudioEvent &&
		lhs.StopFireAudioEvent == rhs.StopFireAudioEvent;
	}
};

struct GcTerrainEditing
{
	float EditSizes[8];
	float SubtractSizes[3];
	float BaseEditSizes[2];
	float UndoEditSizes[2];
	float DensityBlendDistanceMultiplier;
	float EditEffectScale;
	float EditPlaneMaxAdditiveOffsetFactor;
	float EditPlaneMaxSubtractiveOffsetFactor;
	float EditPlaneMinAdditiveOffsetFactor;
	float EditPlaneMinSubtractiveOffsetFactor;
	float FlatteningSizes[1];
	float MinimumSubstancePresence;
	float RegionEditAreaMultiplier;
	float RegionMapSearchRadiusMultiplier;
	float TerrainBlocksSearchRadiusMultiplier;
	float TerrainEditBaseDistanceTolerance;
	float TerrainEditBeamAddInterpolationStepFactor;
	float TerrainEditBeamMaxRange;
	float TerrainEditBeamSpherecastRadius;
	float TerrainEditBeamSubtractInterpolationStepFactor;
	float TerrainEditsNormalCostFactor;
	float TerrainEditsSurvivalCostFactor;
	float TerrainUndoBaseDistanceTolerance;
	float UndoBaseEditEffectiveScale;
	float UndoEditToleranceFactor;
	float VoxelsDeletedAffectCostFactor;
	bool EditGunBeamEnabled;
	bool EditGunParticlesEnabled;
	bool SubtractGunBeamEnabled;
	bool SubtractGunParticlesEnabled;

	friend bool operator==(const GcTerrainEditing& lhs, const GcTerrainEditing& rhs) 
	{
		return std::equal(std::begin(lhs.EditSizes), std::end(lhs.EditSizes), std::begin(rhs.EditSizes)) &&
		std::equal(std::begin(lhs.SubtractSizes), std::end(lhs.SubtractSizes), std::begin(rhs.SubtractSizes)) &&
		std::equal(std::begin(lhs.BaseEditSizes), std::end(lhs.BaseEditSizes), std::begin(rhs.BaseEditSizes)) &&
		std::equal(std::begin(lhs.UndoEditSizes), std::end(lhs.UndoEditSizes), std::begin(rhs.UndoEditSizes)) &&
		lhs.DensityBlendDistanceMultiplier == rhs.DensityBlendDistanceMultiplier &&
		lhs.EditEffectScale == rhs.EditEffectScale &&
		lhs.EditPlaneMaxAdditiveOffsetFactor == rhs.EditPlaneMaxAdditiveOffsetFactor &&
		lhs.EditPlaneMaxSubtractiveOffsetFactor == rhs.EditPlaneMaxSubtractiveOffsetFactor &&
		lhs.EditPlaneMinAdditiveOffsetFactor == rhs.EditPlaneMinAdditiveOffsetFactor &&
		lhs.EditPlaneMinSubtractiveOffsetFactor == rhs.EditPlaneMinSubtractiveOffsetFactor &&
		std::equal(std::begin(lhs.FlatteningSizes), std::end(lhs.FlatteningSizes), std::begin(rhs.FlatteningSizes)) &&
		lhs.MinimumSubstancePresence == rhs.MinimumSubstancePresence &&
		lhs.RegionEditAreaMultiplier == rhs.RegionEditAreaMultiplier &&
		lhs.RegionMapSearchRadiusMultiplier == rhs.RegionMapSearchRadiusMultiplier &&
		lhs.TerrainBlocksSearchRadiusMultiplier == rhs.TerrainBlocksSearchRadiusMultiplier &&
		lhs.TerrainEditBaseDistanceTolerance == rhs.TerrainEditBaseDistanceTolerance &&
		lhs.TerrainEditBeamAddInterpolationStepFactor == rhs.TerrainEditBeamAddInterpolationStepFactor &&
		lhs.TerrainEditBeamMaxRange == rhs.TerrainEditBeamMaxRange &&
		lhs.TerrainEditBeamSpherecastRadius == rhs.TerrainEditBeamSpherecastRadius &&
		lhs.TerrainEditBeamSubtractInterpolationStepFactor == rhs.TerrainEditBeamSubtractInterpolationStepFactor &&
		lhs.TerrainEditsNormalCostFactor == rhs.TerrainEditsNormalCostFactor &&
		lhs.TerrainEditsSurvivalCostFactor == rhs.TerrainEditsSurvivalCostFactor &&
		lhs.TerrainUndoBaseDistanceTolerance == rhs.TerrainUndoBaseDistanceTolerance &&
		lhs.UndoBaseEditEffectiveScale == rhs.UndoBaseEditEffectiveScale &&
		lhs.UndoEditToleranceFactor == rhs.UndoEditToleranceFactor &&
		lhs.VoxelsDeletedAffectCostFactor == rhs.VoxelsDeletedAffectCostFactor &&
		lhs.EditGunBeamEnabled == rhs.EditGunBeamEnabled &&
		lhs.EditGunParticlesEnabled == rhs.EditGunParticlesEnabled &&
		lhs.SubtractGunBeamEnabled == rhs.SubtractGunBeamEnabled &&
		lhs.SubtractGunParticlesEnabled == rhs.SubtractGunParticlesEnabled;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcTerrainEditing
//Dependency: GcTerrainOverlayColours
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcTerrainGlobals
{
	NMS::Colour TerrainBeamLightColour;
	NMS::NMSString0x10 MiningSubstanceBiome[17];
	std::vector<NMS::NMSString0x10> MiningSubstanceRare;
	std::vector<NMS::NMSString0x10> MiningSubstanceStar;
	std::vector<NMS::NMSString0x10> MiningSubstanceStarExtreme;
	NMS::VariableSizeString RegionHotspotsTable;
	NMS_GameComponents::GcTerrainEditing TerrainEditing;
	NMS_GameComponents::GcTerrainOverlayColours HueOverlay;
	NMS_GameComponents::GcTerrainOverlayColours SaturationOverlay;
	NMS_GameComponents::GcTerrainOverlayColours ValueOverlay;
	float HeightBlend;
	float MaxHighWaterLevel;
	float MaxHighWaterRatio;
	float MaxWaterRatio;
	float MinHighWaterLevel;
	float MinHighWaterRatio;
	float MinHighWaterRegionRatio;
	float MinWaterRatio;
	float MouseWheelRotatePlaneSensitivity;
	int32_t NumGeneratorCalls;
	int32_t NumPolygoniseCalls;
	int32_t NumPostPolygoniseCalls;
	float PurpleSystemMaxHighWaterChance;
	float RegisterTerrainMinDistance;
	float SeaLevelGasGiant;
	float SeaLevelHigh;
	float SeaLevelMoon;
	float SeaLevelStandard;
	float SeaLevelWaterWorld;
	float SmoothStepAbove;
	float SmoothStepBelow;
	float SmoothStepStrength;
	float SubtractEditFrequency;
	float SubtractEditLength;
	float SubtractEditOffset;
	float TerrainBeamDefaultRadius;
	float TerrainBeamHologramTimeout;
	float TerrainBeamLightIntensity;
	float TerrainBeamUndoRangeFromLastAdd;
	int32_t TerrainPrimeIndexStart;
	int32_t TerrainPurpleSystemIndexStart;
	float TerrainUndoCubesAlpha;
	float TerrainUndoCubesNoiseFactor;
	float TerrainUndoCubesNoiseThreshold;
	float TerrainUndoCubesRange;
	float TerrainUndoFadeDepthConstant;
	float TerrainUndoFadeDepthScalar;
	float TextureBlendOffset;
	float TextureBlendScale0;
	float TextureBlendScale1;
	float TextureBlendScale2;
	float TextureFadeDistance;
	float TextureFadePower;
	float TextureScaleMultiplier;
	float TextureScalePower;
	float TileBlendMultiplier;
	float UseMax;
	bool DebugFlattenAllTerrain;
	bool DebugLockTerrainSettingsIndex;
	bool DebugNoFlattenForBuildings;
	bool DebugRegionHotspots;
	bool ForcePurpleSystemHighWater;

	friend bool operator==(const GcTerrainGlobals& lhs, const GcTerrainGlobals& rhs) 
	{
		return lhs.TerrainBeamLightColour == rhs.TerrainBeamLightColour &&
		std::equal(std::begin(lhs.MiningSubstanceBiome), std::end(lhs.MiningSubstanceBiome), std::begin(rhs.MiningSubstanceBiome)) &&
		lhs.MiningSubstanceRare == rhs.MiningSubstanceRare &&
		lhs.MiningSubstanceStar == rhs.MiningSubstanceStar &&
		lhs.MiningSubstanceStarExtreme == rhs.MiningSubstanceStarExtreme &&
		lhs.RegionHotspotsTable == rhs.RegionHotspotsTable &&
		lhs.TerrainEditing == rhs.TerrainEditing &&
		lhs.HueOverlay == rhs.HueOverlay &&
		lhs.SaturationOverlay == rhs.SaturationOverlay &&
		lhs.ValueOverlay == rhs.ValueOverlay &&
		lhs.HeightBlend == rhs.HeightBlend &&
		lhs.MaxHighWaterLevel == rhs.MaxHighWaterLevel &&
		lhs.MaxHighWaterRatio == rhs.MaxHighWaterRatio &&
		lhs.MaxWaterRatio == rhs.MaxWaterRatio &&
		lhs.MinHighWaterLevel == rhs.MinHighWaterLevel &&
		lhs.MinHighWaterRatio == rhs.MinHighWaterRatio &&
		lhs.MinHighWaterRegionRatio == rhs.MinHighWaterRegionRatio &&
		lhs.MinWaterRatio == rhs.MinWaterRatio &&
		lhs.MouseWheelRotatePlaneSensitivity == rhs.MouseWheelRotatePlaneSensitivity &&
		lhs.NumGeneratorCalls == rhs.NumGeneratorCalls &&
		lhs.NumPolygoniseCalls == rhs.NumPolygoniseCalls &&
		lhs.NumPostPolygoniseCalls == rhs.NumPostPolygoniseCalls &&
		lhs.PurpleSystemMaxHighWaterChance == rhs.PurpleSystemMaxHighWaterChance &&
		lhs.RegisterTerrainMinDistance == rhs.RegisterTerrainMinDistance &&
		lhs.SeaLevelGasGiant == rhs.SeaLevelGasGiant &&
		lhs.SeaLevelHigh == rhs.SeaLevelHigh &&
		lhs.SeaLevelMoon == rhs.SeaLevelMoon &&
		lhs.SeaLevelStandard == rhs.SeaLevelStandard &&
		lhs.SeaLevelWaterWorld == rhs.SeaLevelWaterWorld &&
		lhs.SmoothStepAbove == rhs.SmoothStepAbove &&
		lhs.SmoothStepBelow == rhs.SmoothStepBelow &&
		lhs.SmoothStepStrength == rhs.SmoothStepStrength &&
		lhs.SubtractEditFrequency == rhs.SubtractEditFrequency &&
		lhs.SubtractEditLength == rhs.SubtractEditLength &&
		lhs.SubtractEditOffset == rhs.SubtractEditOffset &&
		lhs.TerrainBeamDefaultRadius == rhs.TerrainBeamDefaultRadius &&
		lhs.TerrainBeamHologramTimeout == rhs.TerrainBeamHologramTimeout &&
		lhs.TerrainBeamLightIntensity == rhs.TerrainBeamLightIntensity &&
		lhs.TerrainBeamUndoRangeFromLastAdd == rhs.TerrainBeamUndoRangeFromLastAdd &&
		lhs.TerrainPrimeIndexStart == rhs.TerrainPrimeIndexStart &&
		lhs.TerrainPurpleSystemIndexStart == rhs.TerrainPurpleSystemIndexStart &&
		lhs.TerrainUndoCubesAlpha == rhs.TerrainUndoCubesAlpha &&
		lhs.TerrainUndoCubesNoiseFactor == rhs.TerrainUndoCubesNoiseFactor &&
		lhs.TerrainUndoCubesNoiseThreshold == rhs.TerrainUndoCubesNoiseThreshold &&
		lhs.TerrainUndoCubesRange == rhs.TerrainUndoCubesRange &&
		lhs.TerrainUndoFadeDepthConstant == rhs.TerrainUndoFadeDepthConstant &&
		lhs.TerrainUndoFadeDepthScalar == rhs.TerrainUndoFadeDepthScalar &&
		lhs.TextureBlendOffset == rhs.TextureBlendOffset &&
		lhs.TextureBlendScale0 == rhs.TextureBlendScale0 &&
		lhs.TextureBlendScale1 == rhs.TextureBlendScale1 &&
		lhs.TextureBlendScale2 == rhs.TextureBlendScale2 &&
		lhs.TextureFadeDistance == rhs.TextureFadeDistance &&
		lhs.TextureFadePower == rhs.TextureFadePower &&
		lhs.TextureScaleMultiplier == rhs.TextureScaleMultiplier &&
		lhs.TextureScalePower == rhs.TextureScalePower &&
		lhs.TileBlendMultiplier == rhs.TileBlendMultiplier &&
		lhs.UseMax == rhs.UseMax &&
		lhs.DebugFlattenAllTerrain == rhs.DebugFlattenAllTerrain &&
		lhs.DebugLockTerrainSettingsIndex == rhs.DebugLockTerrainSettingsIndex &&
		lhs.DebugNoFlattenForBuildings == rhs.DebugNoFlattenForBuildings &&
		lhs.DebugRegionHotspots == rhs.DebugRegionHotspots &&
		lhs.ForcePurpleSystemHighWater == rhs.ForcePurpleSystemHighWater;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcRewardStartSettlementExpedition
{

	friend bool operator==(const GcRewardStartSettlementExpedition& lhs, const GcRewardStartSettlementExpedition& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNGuiEditorIcons
//Dependency: NMSString0x20
struct TkNGuiLayoutShortcut
{
	NMS_Toolkit::TkNGuiEditorIcons EditorIcon;
	NMS::NMSString0x20 Name;
	bool Available;

	friend bool operator==(const TkNGuiLayoutShortcut& lhs, const TkNGuiLayoutShortcut& rhs) 
	{
		return lhs.EditorIcon == rhs.EditorIcon &&
		lhs.Name == rhs.Name &&
		lhs.Available == rhs.Available;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkEqualityEnum
struct GcMissionConditionCreatureTrust
{
	NMS_Toolkit::TkEqualityEnum Test;
	float Trust;

	friend bool operator==(const GcMissionConditionCreatureTrust& lhs, const GcMissionConditionCreatureTrust& rhs) 
	{
		return lhs.Test == rhs.Test &&
		lhs.Trust == rhs.Trust;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventActive
{
	NMS::NMSString0x20A Event;
	bool MustMatchThisMissionIDSeed;

	friend bool operator==(const GcMissionConditionIsScanEventActive& lhs, const GcMissionConditionIsScanEventActive& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.MustMatchThisMissionIDSeed == rhs.MustMatchThisMissionIDSeed;
	}
};

struct GcHazardModifiers
{
	enum class HazardModifierEnum : uint32_t
	{
		Temperature = 0,
		Toxicity = 1,
		Radiation = 2,
		LifeSupportDrain = 3,
		Gravity = 4,
		SpookLevel = 5,
	};

	NMS_GameComponents::GcHazardModifiers::HazardModifierEnum HazardModifier;

	friend bool operator==(const GcHazardModifiers& lhs, const GcHazardModifiers& rhs) 
	{
		return lhs.HazardModifier == rhs.HazardModifier;
	}
};

//Dependency: NMSString0x10
struct GcInventoryTechProbability
{
	enum class DesiredTechProbabilityEnum : uint32_t
	{
		Never = 0,
		Rare = 1,
		Common = 2,
		Always = 3,
	};

	NMS::NMSString0x10 Tech;
	NMS_GameComponents::GcInventoryTechProbability::DesiredTechProbabilityEnum DesiredTechProbability;

	friend bool operator==(const GcInventoryTechProbability& lhs, const GcInventoryTechProbability& rhs) 
	{
		return lhs.Tech == rhs.Tech &&
		lhs.DesiredTechProbability == rhs.DesiredTechProbability;
	}
};

//Dependency: GcInventoryTechProbability
//Dependency: NMSString0x10
struct GcCustomInventoryComponentData
{
	std::vector<NMS_GameComponents::GcInventoryTechProbability> DesiredTechs;
	NMS::NMSString0x10 Size;
	bool Cool;

	friend bool operator==(const GcCustomInventoryComponentData& lhs, const GcCustomInventoryComponentData& rhs) 
	{
		return lhs.DesiredTechs == rhs.DesiredTechs &&
		lhs.Size == rhs.Size &&
		lhs.Cool == rhs.Cool;
	}
};

struct GcCustomNotifyTimerOptions
{
	float NotifyDisplayTime;
	float NotifyPauseTime;
	bool HasCustomNotifyTimer;

	friend bool operator==(const GcCustomNotifyTimerOptions& lhs, const GcCustomNotifyTimerOptions& rhs) 
	{
		return lhs.NotifyDisplayTime == rhs.NotifyDisplayTime &&
		lhs.NotifyPauseTime == rhs.NotifyPauseTime &&
		lhs.HasCustomNotifyTimer == rhs.HasCustomNotifyTimer;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcProductDescriptionOverride
{
	NMS::NMSString0x20A NewDescription;
	NMS::NMSString0x10 MissionID;
	NMS::NMSString0x10 ProductID;

	friend bool operator==(const GcProductDescriptionOverride& lhs, const GcProductDescriptionOverride& rhs) 
	{
		return lhs.NewDescription == rhs.NewDescription &&
		lhs.MissionID == rhs.MissionID &&
		lhs.ProductID == rhs.ProductID;
	}
};

struct GcRewardUploadBase
{

	friend bool operator==(const GcRewardUploadBase& lhs, const GcRewardUploadBase& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcSpookFiendSpawnData
{
	NMS::NMSString0x10 SpawnID;
	int32_t MaxNumSpawns;
	float SpawnChance;
	float ThresholdSpookLevel;
	float TimerAccelerator;

	friend bool operator==(const GcSpookFiendSpawnData& lhs, const GcSpookFiendSpawnData& rhs) 
	{
		return lhs.SpawnID == rhs.SpawnID &&
		lhs.MaxNumSpawns == rhs.MaxNumSpawns &&
		lhs.SpawnChance == rhs.SpawnChance &&
		lhs.ThresholdSpookLevel == rhs.ThresholdSpookLevel &&
		lhs.TimerAccelerator == rhs.TimerAccelerator;
	}
};

struct GcMarkerType
{
	enum class MarkerTypeEnum : uint32_t
	{
		Default = 0,
		PlanetPoleNorth = 1,
		PlanetPoleSouth = 2,
		PlanetPoleEast = 3,
		PlanetPoleWest = 4,
		BaseBuildingMarkerBeacon = 5,
		TerrainResource = 6,
		Object = 7,
		Tagged = 8,
		TaggedPlanet = 9,
		Unknown = 10,
		Ship = 11,
		Freighter = 12,
		NetworkPlayerFireTeamFreighter = 13,
		FreighterBase = 14,
		PlayerFreighter = 15,
		PlayerSettlement = 16,
		DamagedFrigate = 17,
		Bounty = 18,
		PlanetRaid = 19,
		Battle = 20,
		SpaceSignal = 21,
		BlackHole = 22,
		SpaceAnomalySignal = 23,
		SpaceAtlasSignal = 24,
		GenericIcon = 25,
		NetworkPlayerFireTeam = 26,
		NetworkPlayerFireTeamShip = 27,
		NetworkPlayer = 28,
		NetworkPlayerShip = 29,
		NetworkPlayerVehicle = 30,
		Monument = 31,
		PlayerBase = 32,
		EditingBase = 33,
		MessageBeacon = 34,
		ExternalBase = 35,
		PlanetBaseTerminal = 36,
		Vehicle = 37,
		VehicleCheckpoint = 38,
		VehicleGarage = 39,
		Pet = 40,
		DeathPoint = 41,
		Signal = 42,
		Portal = 43,
		PurchasableFrigate = 44,
		Expedition = 45,
		Building = 46,
		ActiveNetworkMarker = 47,
		CustomMarker = 48,
		PlacedMarker = 49,
		Nexus = 50,
		PowerHotspot = 51,
		MineralHotspot = 52,
		GasHotspot = 53,
		NPC = 54,
		SettlementNPC = 55,
		FishPot = 56,
		CreatureCurious = 57,
		CreatureAction = 58,
		CreatureTame = 59,
		CreatureDanger = 60,
		CreatureFiend = 61,
		CreatureMilk = 62,
		FuelAsteroid = 63,
		PulseEncounter = 64,
		FrigateFlyby = 65,
		ShipExperienceSpawn = 66,
		FriendlyDrone = 67,
		ImportantNPC = 68,
	};

	NMS_GameComponents::GcMarkerType::MarkerTypeEnum MarkerType;

	friend bool operator==(const GcMarkerType& lhs, const GcMarkerType& rhs) 
	{
		return lhs.MarkerType == rhs.MarkerType;
	}
};

//Dependency: GcCustomisationDescriptorGroup
//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupSet
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroup> DescriptorGroups;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 RequiresGroup;
	bool GroupsAreMutuallyExclusive;

	friend bool operator==(const GcCustomisationDescriptorGroupSet& lhs, const GcCustomisationDescriptorGroupSet& rhs) 
	{
		return lhs.DescriptorGroups == rhs.DescriptorGroups &&
		lhs.Id == rhs.Id &&
		lhs.RequiresGroup == rhs.RequiresGroup &&
		lhs.GroupsAreMutuallyExclusive == rhs.GroupsAreMutuallyExclusive;
	}
};

//Dependency: GcCustomisationDescriptorVisualEffects
//Dependency: GcCustomisationDescriptorGroupSet
//Dependency: GcCustomisationHeadToRace
struct GcCustomisationDescriptorGroups
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorVisualEffects> DescriptorVisualEffects;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupSet> DescriptorGroupSets;
	std::vector<NMS_GameComponents::GcCustomisationHeadToRace> HeadRaces;

	friend bool operator==(const GcCustomisationDescriptorGroups& lhs, const GcCustomisationDescriptorGroups& rhs) 
	{
		return lhs.DescriptorVisualEffects == rhs.DescriptorVisualEffects &&
		lhs.DescriptorGroupSets == rhs.DescriptorGroupSets &&
		lhs.HeadRaces == rhs.HeadRaces;
	}
};

//Dependency: GcRewardTableItemList
struct GcRewardTableCategory
{
	NMS_GameComponents::GcRewardTableItemList Sizes[3];

	friend bool operator==(const GcRewardTableCategory& lhs, const GcRewardTableCategory& rhs) 
	{
		return std::equal(std::begin(lhs.Sizes), std::end(lhs.Sizes), std::begin(rhs.Sizes));
	}
};

struct GcMissionConditionCreatureReadyToHatch
{

	friend bool operator==(const GcMissionConditionCreatureReadyToHatch& lhs, const GcMissionConditionCreatureReadyToHatch& rhs) 
	{
		return true;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGatherForBuild
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 GatherResource;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 TargetTech;

	friend bool operator==(const GcMissionSequenceGatherForBuild& lhs, const GcMissionSequenceGatherForBuild& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.GatherResource == rhs.GatherResource &&
		lhs.Message == rhs.Message &&
		lhs.TargetTech == rhs.TargetTech;
	}
};

//Dependency: GcCustomisationDescriptorGroupFallbackData
//Dependency: GcCustomisationPreset
struct GcCustomisationPresets
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupFallbackData> DescriptorGroupFallbackMap;
	std::vector<NMS_GameComponents::GcCustomisationPreset> Presets;

	friend bool operator==(const GcCustomisationPresets& lhs, const GcCustomisationPresets& rhs) 
	{
		return lhs.DescriptorGroupFallbackMap == rhs.DescriptorGroupFallbackMap &&
		lhs.Presets == rhs.Presets;
	}
};

//Dependency: GcCustomisationBobbleHead
struct GcCustomisationShipBobbleHeads
{
	std::vector<NMS_GameComponents::GcCustomisationBobbleHead> BobbleHeads;

	friend bool operator==(const GcCustomisationShipBobbleHeads& lhs, const GcCustomisationShipBobbleHeads& rhs) 
	{
		return lhs.BobbleHeads == rhs.BobbleHeads;
	}
};

struct GcPhotoBuilding
{
	enum class PhotoBuildingTypeEnum : uint32_t
	{
		Shelter = 0,
		Abandoned = 1,
		Shop = 2,
		Outpost = 3,
		RadioTower = 4,
		Observatory = 5,
		Depot = 6,
		Monolith = 7,
		Factory = 8,
		Portal = 9,
		Ruin = 10,
		MissionTower = 11,
		LargeBuilding = 12,
	};

	NMS_GameComponents::GcPhotoBuilding::PhotoBuildingTypeEnum PhotoBuildingType;

	friend bool operator==(const GcPhotoBuilding& lhs, const GcPhotoBuilding& rhs) 
	{
		return lhs.PhotoBuildingType == rhs.PhotoBuildingType;
	}
};

//Dependency: GcPhotoBuilding
struct GcPhotoBuildings
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoBuilding BuildingType;

	friend bool operator==(const GcPhotoBuildings& lhs, const GcPhotoBuildings& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.BuildingType == rhs.BuildingType;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationShipTrails
{
	NMS_Toolkit::TkModelResource Trails;
	NMS::NMSString0x10 LinkedTechID;

	friend bool operator==(const GcCustomisationShipTrails& lhs, const GcCustomisationShipTrails& rhs) 
	{
		return lhs.Trails == rhs.Trails &&
		lhs.LinkedTechID == rhs.LinkedTechID;
	}
};

struct GcSizeIndicator
{
	enum class SizeIndicatorEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
	};

	NMS_GameComponents::GcSizeIndicator::SizeIndicatorEnum SizeIndicator;

	friend bool operator==(const GcSizeIndicator& lhs, const GcSizeIndicator& rhs) 
	{
		return lhs.SizeIndicator == rhs.SizeIndicator;
	}
};

//Dependency: GcCustomisationThrusterJet
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationThrusterEffect
{
	NMS::Colour LightColour;
	NMS::NMSString0x20A Tip;
	std::vector<NMS_GameComponents::GcCustomisationThrusterJet> Jets;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 Name;
	bool AllowedInSeasonalDefaults;
	bool HiddenInCustomiser;

	friend bool operator==(const GcCustomisationThrusterEffect& lhs, const GcCustomisationThrusterEffect& rhs) 
	{
		return lhs.LightColour == rhs.LightColour &&
		lhs.Tip == rhs.Tip &&
		lhs.Jets == rhs.Jets &&
		lhs.LinkedSpecialID == rhs.LinkedSpecialID &&
		lhs.Name == rhs.Name &&
		lhs.AllowedInSeasonalDefaults == rhs.AllowedInSeasonalDefaults &&
		lhs.HiddenInCustomiser == rhs.HiddenInCustomiser;
	}
};

//Dependency: GcCustomisationBackpackData
//Dependency: GcCustomisationFreighterEngineEffect
//Dependency: GcCustomisationThrusterEffect
//Dependency: GcCustomisationShipTrails
struct GcCustomisationThrusterEffects
{
	std::vector<NMS_GameComponents::GcCustomisationBackpackData> BackpackData;
	std::vector<NMS_GameComponents::GcCustomisationFreighterEngineEffect> FreighterEngineEffects;
	std::vector<NMS_GameComponents::GcCustomisationThrusterEffect> JetpackEffects;
	std::vector<NMS_GameComponents::GcCustomisationShipTrails> ShipEffects;

	friend bool operator==(const GcCustomisationThrusterEffects& lhs, const GcCustomisationThrusterEffects& rhs) 
	{
		return lhs.BackpackData == rhs.BackpackData &&
		lhs.FreighterEngineEffects == rhs.FreighterEngineEffects &&
		lhs.JetpackEffects == rhs.JetpackEffects &&
		lhs.ShipEffects == rhs.ShipEffects;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcWeatherHazardLightningData
{
	NMS_Toolkit::TkModelResource IndicatorDecal;
	NMS_Toolkit::TkModelResource StaticDecal;
	NMS::NMSString0x10 DamageID;
	NMS::NMSString0x10 ImpactParticle;
	NMS::NMSString0x10 ShakeID;
	float DamageRadius;
	float DecalFullGrowthProgress;
	float EarliestImpact;
	float EarliestImpactFirstInstance;
	float FlashStartProgress;
	float FullDamageRadius;
	float MaxRadius;
	int32_t MaxStrikes;
	float MinRadius;
	int32_t MinStrikes;
	float NumFlashes;
	float StormDuration;

	friend bool operator==(const GcWeatherHazardLightningData& lhs, const GcWeatherHazardLightningData& rhs) 
	{
		return lhs.IndicatorDecal == rhs.IndicatorDecal &&
		lhs.StaticDecal == rhs.StaticDecal &&
		lhs.DamageID == rhs.DamageID &&
		lhs.ImpactParticle == rhs.ImpactParticle &&
		lhs.ShakeID == rhs.ShakeID &&
		lhs.DamageRadius == rhs.DamageRadius &&
		lhs.DecalFullGrowthProgress == rhs.DecalFullGrowthProgress &&
		lhs.EarliestImpact == rhs.EarliestImpact &&
		lhs.EarliestImpactFirstInstance == rhs.EarliestImpactFirstInstance &&
		lhs.FlashStartProgress == rhs.FlashStartProgress &&
		lhs.FullDamageRadius == rhs.FullDamageRadius &&
		lhs.MaxRadius == rhs.MaxRadius &&
		lhs.MaxStrikes == rhs.MaxStrikes &&
		lhs.MinRadius == rhs.MinRadius &&
		lhs.MinStrikes == rhs.MinStrikes &&
		lhs.NumFlashes == rhs.NumFlashes &&
		lhs.StormDuration == rhs.StormDuration;
	}
};

struct GcRewardPirateProbeSignal
{
	bool Attack;

	friend bool operator==(const GcRewardPirateProbeSignal& lhs, const GcRewardPirateProbeSignal& rhs) 
	{
		return lhs.Attack == rhs.Attack;
	}
};

struct GcPlanetHazardData
{
	float LifeSupportDrain[6];
	float Radiation[6];
	float SpookLevel[6];
	float Temperature[6];
	float Toxicity[6];

	friend bool operator==(const GcPlanetHazardData& lhs, const GcPlanetHazardData& rhs) 
	{
		return std::equal(std::begin(lhs.LifeSupportDrain), std::end(lhs.LifeSupportDrain), std::begin(rhs.LifeSupportDrain)) &&
		std::equal(std::begin(lhs.Radiation), std::end(lhs.Radiation), std::begin(rhs.Radiation)) &&
		std::equal(std::begin(lhs.SpookLevel), std::end(lhs.SpookLevel), std::begin(rhs.SpookLevel)) &&
		std::equal(std::begin(lhs.Temperature), std::end(lhs.Temperature), std::begin(rhs.Temperature)) &&
		std::equal(std::begin(lhs.Toxicity), std::end(lhs.Toxicity), std::begin(rhs.Toxicity));
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcSentinelCoverComponentData
{
	NMS::NMSString0x10 CoverStateAnims[4];
	NMS::NMSString0x10 DestroyEffectId;
	NMS::NMSString0x10 SpawnEffectId;
	float HealthPercLostPerSecMax;
	float HealthPercLostPerSecMin;
	NMS::NMSString0x20 EffectLocator;

	friend bool operator==(const GcSentinelCoverComponentData& lhs, const GcSentinelCoverComponentData& rhs) 
	{
		return std::equal(std::begin(lhs.CoverStateAnims), std::end(lhs.CoverStateAnims), std::begin(rhs.CoverStateAnims)) &&
		lhs.DestroyEffectId == rhs.DestroyEffectId &&
		lhs.SpawnEffectId == rhs.SpawnEffectId &&
		lhs.HealthPercLostPerSecMax == rhs.HealthPercLostPerSecMax &&
		lhs.HealthPercLostPerSecMin == rhs.HealthPercLostPerSecMin &&
		lhs.EffectLocator == rhs.EffectLocator;
	}
};

//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct GcDeathQuote
{
	NMS::NMSString0x80 QuoteLine1;
	NMS::NMSString0x80 QuoteLine2;
	NMS::NMSString0x20 Author;

	friend bool operator==(const GcDeathQuote& lhs, const GcDeathQuote& rhs) 
	{
		return lhs.QuoteLine1 == rhs.QuoteLine1 &&
		lhs.QuoteLine2 == rhs.QuoteLine2 &&
		lhs.Author == rhs.Author;
	}
};

//Dependency: GcBaseSnapState
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcOutSnapSocketCondition
{
	NMS::NMSString0x10 ObjectId;
	int32_t OutSocketIndex;
	int32_t SnapPointIndex;
	NMS_GameComponents::GcBaseSnapState SnapState;
	NMS::NMSString0x80 OutSocket;
	NMS::NMSString0x80 SnapPoint;

	friend bool operator==(const GcOutSnapSocketCondition& lhs, const GcOutSnapSocketCondition& rhs) 
	{
		return lhs.ObjectId == rhs.ObjectId &&
		lhs.OutSocketIndex == rhs.OutSocketIndex &&
		lhs.SnapPointIndex == rhs.SnapPointIndex &&
		lhs.SnapState == rhs.SnapState &&
		lhs.OutSocket == rhs.OutSocket &&
		lhs.SnapPoint == rhs.SnapPoint;
	}
};

struct GcMessageUpdateFrigateSpeed
{
	float StartSpeed;
	float TargetSpeed;

	friend bool operator==(const GcMessageUpdateFrigateSpeed& lhs, const GcMessageUpdateFrigateSpeed& rhs) 
	{
		return lhs.StartSpeed == rhs.StartSpeed &&
		lhs.TargetSpeed == rhs.TargetSpeed;
	}
};

//Dependency: GcFontTypesEnum
//Dependency: Colour
struct GcTextPreset
{
	NMS::Colour Colour;
	NMSTemplate Style;
	NMS_GameComponents::GcFontTypesEnum Font;
	float Height;

	friend bool operator==(const GcTextPreset& lhs, const GcTextPreset& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Style == rhs.Style &&
		lhs.Font == rhs.Font &&
		lhs.Height == rhs.Height;
	}
};

//Dependency: GcTextPreset
//Dependency: GcDeathQuote
struct GcDeathStateData
{
	NMS_GameComponents::GcTextPreset AuthorFont;
	NMS_GameComponents::GcTextPreset QuoteFont;
	NMS_GameComponents::GcTextPreset ReasonFont;
	std::vector<NMS_GameComponents::GcDeathQuote> Quotes;

	friend bool operator==(const GcDeathStateData& lhs, const GcDeathStateData& rhs) 
	{
		return lhs.AuthorFont == rhs.AuthorFont &&
		lhs.QuoteFont == rhs.QuoteFont &&
		lhs.ReasonFont == rhs.ReasonFont &&
		lhs.Quotes == rhs.Quotes;
	}
};

//Dependency: NMSString0x10
struct GcHUDComponent
{
	enum class AlignEnum : uint32_t
	{
		Center = 0,
		TopLeft = 1,
		TopRight = 2,
		BottomLeft = 3,
		BottomRight = 4,
	};

	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcHUDComponent::AlignEnum Align;
	int32_t Height;
	int32_t PosX;
	int32_t PosY;
	int32_t Width;

	friend bool operator==(const GcHUDComponent& lhs, const GcHUDComponent& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Align == rhs.Align &&
		lhs.Height == rhs.Height &&
		lhs.PosX == rhs.PosX &&
		lhs.PosY == rhs.PosY &&
		lhs.Width == rhs.Width;
	}
};

struct GcSettlementStatStrength
{
	enum class SettlementStatStrengthEnum : uint32_t
	{
		PositiveWide = 0,
		PositiveLarge = 1,
		PositiveMedium = 2,
		PositiveSmall = 3,
		NegativeSmall = 4,
		NegativeMedium = 5,
		NegativeLarge = 6,
	};

	NMS_GameComponents::GcSettlementStatStrength::SettlementStatStrengthEnum SettlementStatStrength;

	friend bool operator==(const GcSettlementStatStrength& lhs, const GcSettlementStatStrength& rhs) 
	{
		return lhs.SettlementStatStrength == rhs.SettlementStatStrength;
	}
};

//Dependency: GcSettlementStatType
//Dependency: GcSettlementStatStrength
struct GcSettlementStatChange
{
	NMS_GameComponents::GcSettlementStatType Stat;
	NMS_GameComponents::GcSettlementStatStrength Strength;
	bool DirectlyChangePopulation;

	friend bool operator==(const GcSettlementStatChange& lhs, const GcSettlementStatChange& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.Strength == rhs.Strength &&
		lhs.DirectlyChangePopulation == rhs.DirectlyChangePopulation;
	}
};

//Dependency: GcSettlementStatChange
struct GcSettlementStatChangeArray
{
	std::vector<NMS_GameComponents::GcSettlementStatChange> Stats;

	friend bool operator==(const GcSettlementStatChangeArray& lhs, const GcSettlementStatChangeArray& rhs) 
	{
		return lhs.Stats == rhs.Stats;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
struct GcMissionConditionDefaultItem
{
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcDefaultMissionProductEnum ProductType;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum SubstanceType;

	friend bool operator==(const GcMissionConditionDefaultItem& lhs, const GcMissionConditionDefaultItem& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.ProductType == rhs.ProductType &&
		lhs.SubstanceType == rhs.SubstanceType;
	}
};

//Dependency: GcScanEventData
struct GcScanEventTable
{
	std::vector<NMS_GameComponents::GcScanEventData> Events;

	friend bool operator==(const GcScanEventTable& lhs, const GcScanEventTable& rhs) 
	{
		return lhs.Events == rhs.Events;
	}
};

struct GcDecorationComponentData
{
	float MaxTestRange;
	float StartOffset;

	friend bool operator==(const GcDecorationComponentData& lhs, const GcDecorationComponentData& rhs) 
	{
		return lhs.MaxTestRange == rhs.MaxTestRange &&
		lhs.StartOffset == rhs.StartOffset;
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcMissionConditionProductKnown
{
	NMS::NMSString0x10 Product;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool DependentOnSeasonMilestone;
	bool TakeProductFromSeasonData;

	friend bool operator==(const GcMissionConditionProductKnown& lhs, const GcMissionConditionProductKnown& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.Default == rhs.Default &&
		lhs.DependentOnSeasonMilestone == rhs.DependentOnSeasonMilestone &&
		lhs.TakeProductFromSeasonData == rhs.TakeProductFromSeasonData;
	}
};

//Dependency: Colour
struct GcNPCColourGroup
{
	NMS::Colour Primary;
	std::vector<NMS::Colour> Secondary;
	float Rarity;

	friend bool operator==(const GcNPCColourGroup& lhs, const GcNPCColourGroup& rhs) 
	{
		return lhs.Primary == rhs.Primary &&
		lhs.Secondary == rhs.Secondary &&
		lhs.Rarity == rhs.Rarity;
	}
};

//Dependency: GcNPCColourGroup
struct GcNPCColourTable
{
	std::vector<NMS_GameComponents::GcNPCColourGroup> Groups;

	friend bool operator==(const GcNPCColourTable& lhs, const GcNPCColourTable& rhs) 
	{
		return lhs.Groups == rhs.Groups;
	}
};

struct GcPlanetSentinelLevel
{
	enum class SentinelLevelEnum : uint32_t
	{
		Low = 0,
		Default = 1,
		Aggressive = 2,
		Corrupt = 3,
	};

	NMS_GameComponents::GcPlanetSentinelLevel::SentinelLevelEnum SentinelLevel;

	friend bool operator==(const GcPlanetSentinelLevel& lhs, const GcPlanetSentinelLevel& rhs) 
	{
		return lhs.SentinelLevel == rhs.SentinelLevel;
	}
};

//Dependency: GcPlanetSentinelLevel
//Dependency: Vector2f
struct GcPlanetGroundCombatData
{
	NMS::Vector2f FlybyTimer;
	NMS::Vector2f SentinelTimer;
	int32_t MaxActiveDrones;
	NMS_GameComponents::GcPlanetSentinelLevel SentinelLevel;

	friend bool operator==(const GcPlanetGroundCombatData& lhs, const GcPlanetGroundCombatData& rhs) 
	{
		return lhs.FlybyTimer == rhs.FlybyTimer &&
		lhs.SentinelTimer == rhs.SentinelTimer &&
		lhs.MaxActiveDrones == rhs.MaxActiveDrones &&
		lhs.SentinelLevel == rhs.SentinelLevel;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: NMSString0x20A
struct GcRewardCommunicatorMessage
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::NMSString0x20A FailureMessageBusy;
	NMS::NMSString0x20A FailureMessageNotInShip;

	friend bool operator==(const GcRewardCommunicatorMessage& lhs, const GcRewardCommunicatorMessage& rhs) 
	{
		return lhs.Comms == rhs.Comms &&
		lhs.FailureMessageBusy == rhs.FailureMessageBusy &&
		lhs.FailureMessageNotInShip == rhs.FailureMessageNotInShip;
	}
};

//Dependency: GcFrigateClass
struct GcFrigateFlybyOption
{
	NMS_GameComponents::GcFrigateClass FrigateClass;
	int32_t MaxCount;
	int32_t MinCount;
	float Weight;

	friend bool operator==(const GcFrigateFlybyOption& lhs, const GcFrigateFlybyOption& rhs) 
	{
		return lhs.FrigateClass == rhs.FrigateClass &&
		lhs.MaxCount == rhs.MaxCount &&
		lhs.MinCount == rhs.MinCount &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: GcFrigateFlybyOption
//Dependency: GcFrigateFlybyType
struct GcFrigateFlybyLayout
{
	std::vector<NMS_GameComponents::GcFrigateFlybyOption> Frigates;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	float InitialSpeed;
	float InterestDistance;
	float InterestTime;
	float TargetSpeed;

	friend bool operator==(const GcFrigateFlybyLayout& lhs, const GcFrigateFlybyLayout& rhs) 
	{
		return lhs.Frigates == rhs.Frigates &&
		lhs.FlybyType == rhs.FlybyType &&
		lhs.InitialSpeed == rhs.InitialSpeed &&
		lhs.InterestDistance == rhs.InterestDistance &&
		lhs.InterestTime == rhs.InterestTime &&
		lhs.TargetSpeed == rhs.TargetSpeed;
	}
};

//Dependency: GcFrigateFlybyLayout
struct GcFrigateFlybyTable
{
	std::vector<NMS_GameComponents::GcFrigateFlybyLayout> Entries;

	friend bool operator==(const GcFrigateFlybyTable& lhs, const GcFrigateFlybyTable& rhs) 
	{
		return lhs.Entries == rhs.Entries;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLSystemRestrictionData
{
	enum class RestrictionEnum : uint32_t
	{
		NoMoreThan = 0,
		AtLeast = 1,
		AtLeastIfICan = 2,
	};

	int32_t Amount;
	NMS_Toolkit::TkLSystemRestrictionData::RestrictionEnum Restriction;

	friend bool operator==(const TkLSystemRestrictionData& lhs, const TkLSystemRestrictionData& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.Restriction == rhs.Restriction;
	}
};

//Dependency: TkLSystemRestrictionData
//Dependency: VariableSizeString
struct TkLSystemLocatorEntry
{
	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemRestrictionData> Restrictions;
	float Probability;

	friend bool operator==(const TkLSystemLocatorEntry& lhs, const TkLSystemLocatorEntry& rhs) 
	{
		return lhs.Model == rhs.Model &&
		lhs.Restrictions == rhs.Restrictions &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: TkLSystemLocatorEntry
//Dependency: NMSString0x20
struct TkLSystemInnerRule
{
	enum class MergeProbabilityOptionsEnum : uint32_t
	{
		Balance = 0,
		Prioritize = 1,
		Replace = 2,
	};

	std::vector<NMS_Toolkit::TkLSystemLocatorEntry> Entries;
	NMS_Toolkit::TkLSystemInnerRule::MergeProbabilityOptionsEnum MergeProbabilityOptions;
	NMS::NMSString0x20 LocatorType;

	friend bool operator==(const TkLSystemInnerRule& lhs, const TkLSystemInnerRule& rhs) 
	{
		return lhs.Entries == rhs.Entries &&
		lhs.MergeProbabilityOptions == rhs.MergeProbabilityOptions &&
		lhs.LocatorType == rhs.LocatorType;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardRequirementsForRecipe
{
	NMS::NMSString0x10 RecipeID;
	bool RewardInCreative;

	friend bool operator==(const GcRewardRequirementsForRecipe& lhs, const GcRewardRequirementsForRecipe& rhs) 
	{
		return lhs.RecipeID == rhs.RecipeID &&
		lhs.RewardInCreative == rhs.RewardInCreative;
	}
};

//Dependency: NMSString0x10
struct GcMissionIDEpochPair
{
	NMS::NMSString0x10 MissionID;
	uint64_t RecurrenceDeadline;

	friend bool operator==(const GcMissionIDEpochPair& lhs, const GcMissionIDEpochPair& rhs) 
	{
		return lhs.MissionID == rhs.MissionID &&
		lhs.RecurrenceDeadline == rhs.RecurrenceDeadline;
	}
};

//Dependency: GcBuildingClassification
//Dependency: NMSString0x10
struct GcSettlementProductionSlotData
{
	NMS::NMSString0x10 ElementId;
	uint64_t LastChangeTimestamp;
	int32_t Amount;
	int32_t ProductionAccumulationCap;
	float ProductionAmountMultiplier;
	float ProductionTimeMultiplier;
	int32_t RequiredSettlementBuildingLevel;
	NMS_GameComponents::GcBuildingClassification RequiredSettlementBuildingType;

	friend bool operator==(const GcSettlementProductionSlotData& lhs, const GcSettlementProductionSlotData& rhs) 
	{
		return lhs.ElementId == rhs.ElementId &&
		lhs.LastChangeTimestamp == rhs.LastChangeTimestamp &&
		lhs.Amount == rhs.Amount &&
		lhs.ProductionAccumulationCap == rhs.ProductionAccumulationCap &&
		lhs.ProductionAmountMultiplier == rhs.ProductionAmountMultiplier &&
		lhs.ProductionTimeMultiplier == rhs.ProductionTimeMultiplier &&
		lhs.RequiredSettlementBuildingLevel == rhs.RequiredSettlementBuildingLevel &&
		lhs.RequiredSettlementBuildingType == rhs.RequiredSettlementBuildingType;
	}
};

//Dependency: GcAlienRace
//Dependency: GcBuildingClassification
//Dependency: GcSettlementProductionSlotData
//Dependency: GcSettlementWeaponRespawnData
//Dependency: GcDiscoveryOwner
//Dependency: Vector3f
//Dependency: GcSettlementJudgementType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcSettlementState
{
	NMS::Vector3f Position;
	uint64_t LastBuildingUpgradesTimestamps[48];
	NMS_GameComponents::GcSettlementProductionSlotData ProductionState[2];
	NMS::NMSString0x10 LastJudgementPerkID;
	std::vector<NMS_GameComponents::GcSettlementWeaponRespawnData> LastWeaponRefreshTime;
	NMS::NMSString0x10 PendingCustomJudgementID;
	std::vector<NMS::NMSString0x10> Perks;
	uint64_t DbTimestamp;
	uint64_t LastAlertChangeTime;
	uint64_t LastBugAttackChangeTime;
	uint64_t LastDebtChangeTime;
	uint64_t LastJudgementTime;
	uint64_t LastPopulationChangeTime;
	uint64_t LastUpkeepDebtCheckTime;
	uint64_t MiniMissionSeed;
	uint64_t MiniMissionStartTime;
	uint64_t NextBuildingUpgradeSeedValue;
	uint64_t SeedValue;
	uint64_t UniverseAddress;
	NMS_GameComponents::GcDiscoveryOwner Owner;
	int32_t BuildingStates[48];
	int32_t Stats[8];
	int32_t DbVersion;
	NMS_GameComponents::GcBuildingClassification NextBuildingUpgradeClass;
	int32_t NextBuildingUpgradeIndex;
	NMS_GameComponents::GcSettlementJudgementType PendingJudgementType;
	NMS_GameComponents::GcAlienRace Race;
	uint16_t Population;
	NMS::NMSString0x40 DbResourceId;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 UniqueId;
	bool IsReported;

	friend bool operator==(const GcSettlementState& lhs, const GcSettlementState& rhs) 
	{
		return lhs.Position == rhs.Position &&
		std::equal(std::begin(lhs.LastBuildingUpgradesTimestamps), std::end(lhs.LastBuildingUpgradesTimestamps), std::begin(rhs.LastBuildingUpgradesTimestamps)) &&
		std::equal(std::begin(lhs.ProductionState), std::end(lhs.ProductionState), std::begin(rhs.ProductionState)) &&
		lhs.LastJudgementPerkID == rhs.LastJudgementPerkID &&
		lhs.LastWeaponRefreshTime == rhs.LastWeaponRefreshTime &&
		lhs.PendingCustomJudgementID == rhs.PendingCustomJudgementID &&
		lhs.Perks == rhs.Perks &&
		lhs.DbTimestamp == rhs.DbTimestamp &&
		lhs.LastAlertChangeTime == rhs.LastAlertChangeTime &&
		lhs.LastBugAttackChangeTime == rhs.LastBugAttackChangeTime &&
		lhs.LastDebtChangeTime == rhs.LastDebtChangeTime &&
		lhs.LastJudgementTime == rhs.LastJudgementTime &&
		lhs.LastPopulationChangeTime == rhs.LastPopulationChangeTime &&
		lhs.LastUpkeepDebtCheckTime == rhs.LastUpkeepDebtCheckTime &&
		lhs.MiniMissionSeed == rhs.MiniMissionSeed &&
		lhs.MiniMissionStartTime == rhs.MiniMissionStartTime &&
		lhs.NextBuildingUpgradeSeedValue == rhs.NextBuildingUpgradeSeedValue &&
		lhs.SeedValue == rhs.SeedValue &&
		lhs.UniverseAddress == rhs.UniverseAddress &&
		lhs.Owner == rhs.Owner &&
		std::equal(std::begin(lhs.BuildingStates), std::end(lhs.BuildingStates), std::begin(rhs.BuildingStates)) &&
		std::equal(std::begin(lhs.Stats), std::end(lhs.Stats), std::begin(rhs.Stats)) &&
		lhs.DbVersion == rhs.DbVersion &&
		lhs.NextBuildingUpgradeClass == rhs.NextBuildingUpgradeClass &&
		lhs.NextBuildingUpgradeIndex == rhs.NextBuildingUpgradeIndex &&
		lhs.PendingJudgementType == rhs.PendingJudgementType &&
		lhs.Race == rhs.Race &&
		lhs.Population == rhs.Population &&
		lhs.DbResourceId == rhs.DbResourceId &&
		lhs.Name == rhs.Name &&
		lhs.UniqueId == rhs.UniqueId &&
		lhs.IsReported == rhs.IsReported;
	}
};

struct GcWonderRecord
{
	uint64_t GenerationID[2];
	float WonderStatValue;
	bool SeenInFrontend;

	friend bool operator==(const GcWonderRecord& lhs, const GcWonderRecord& rhs) 
	{
		return std::equal(std::begin(lhs.GenerationID), std::end(lhs.GenerationID), std::begin(rhs.GenerationID)) &&
		lhs.WonderStatValue == rhs.WonderStatValue &&
		lhs.SeenInFrontend == rhs.SeenInFrontend;
	}
};

//Dependency: GcResourceElement
//Dependency: Vector4f
//Dependency: GcSeed
struct GcNPCWorkerData
{
	NMS::Vector4f BaseOffset;
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::GcSeed InteractionSeed;
	uint64_t BaseUA;
	bool FreighterBase;
	bool HiredWorker;

	friend bool operator==(const GcNPCWorkerData& lhs, const GcNPCWorkerData& rhs) 
	{
		return lhs.BaseOffset == rhs.BaseOffset &&
		lhs.ResourceElement == rhs.ResourceElement &&
		lhs.InteractionSeed == rhs.InteractionSeed &&
		lhs.BaseUA == rhs.BaseUA &&
		lhs.FreighterBase == rhs.FreighterBase &&
		lhs.HiredWorker == rhs.HiredWorker;
	}
};

//Dependency: NMSString0x10
struct GcTelemetryStat
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Type;
	int32_t Value;

	friend bool operator==(const GcTelemetryStat& lhs, const GcTelemetryStat& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Type == rhs.Type &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: Vector4f
struct GcPlayerSpawnStateData
{
	enum class LastKnownPlayerStateEnum : uint32_t
	{
		OnFoot = 0,
		InShip = 1,
		InStation = 2,
		AboardFleet = 3,
		InNexus = 4,
		AbandonedFreighter = 5,
		InShipLanded = 6,
		InVehicle = 7,
	};

	NMS::Vector4f AbandonedFreighterPositionInSystem;
	NMS::Vector4f AbandonedFreighterTransformAt;
	NMS::Vector4f AbandonedFreighterTransformUp;
	NMS::Vector4f FreighterPositionInSystem;
	NMS::Vector4f FreighterTransformAt;
	NMS::Vector4f FreighterTransformUp;
	NMS::Vector4f PlayerDeathRespawnPositionInSystem;
	NMS::Vector4f PlayerDeathRespawnTransformAt;
	NMS::Vector4f PlayerPositionInSystem;
	NMS::Vector4f PlayerTransformAt;
	NMS::Vector4f ShipPositionInSystem;
	NMS::Vector4f ShipTransformAt;
	NMS_GameComponents::GcPlayerSpawnStateData::LastKnownPlayerStateEnum LastKnownPlayerState;

	friend bool operator==(const GcPlayerSpawnStateData& lhs, const GcPlayerSpawnStateData& rhs) 
	{
		return lhs.AbandonedFreighterPositionInSystem == rhs.AbandonedFreighterPositionInSystem &&
		lhs.AbandonedFreighterTransformAt == rhs.AbandonedFreighterTransformAt &&
		lhs.AbandonedFreighterTransformUp == rhs.AbandonedFreighterTransformUp &&
		lhs.FreighterPositionInSystem == rhs.FreighterPositionInSystem &&
		lhs.FreighterTransformAt == rhs.FreighterTransformAt &&
		lhs.FreighterTransformUp == rhs.FreighterTransformUp &&
		lhs.PlayerDeathRespawnPositionInSystem == rhs.PlayerDeathRespawnPositionInSystem &&
		lhs.PlayerDeathRespawnTransformAt == rhs.PlayerDeathRespawnTransformAt &&
		lhs.PlayerPositionInSystem == rhs.PlayerPositionInSystem &&
		lhs.PlayerTransformAt == rhs.PlayerTransformAt &&
		lhs.ShipPositionInSystem == rhs.ShipPositionInSystem &&
		lhs.ShipTransformAt == rhs.ShipTransformAt &&
		lhs.LastKnownPlayerState == rhs.LastKnownPlayerState;
	}
};

//Dependency: Vector4f
struct GcSkiffSaveData
{
	NMS::Vector4f Direction;
	NMS::Vector4f Position;
	uint64_t Location;

	friend bool operator==(const GcSkiffSaveData& lhs, const GcSkiffSaveData& rhs) 
	{
		return lhs.Direction == rhs.Direction &&
		lhs.Position == rhs.Position &&
		lhs.Location == rhs.Location;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcPersistentBBObjectData
{
	NMS::Vector3f At;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::NMSString0x10 ObjectID;
	uint64_t GalacticAddress;
	uint64_t RegionSeed;
	uint64_t Timestamp;
	uint64_t UserData;

	friend bool operator==(const GcPersistentBBObjectData& lhs, const GcPersistentBBObjectData& rhs) 
	{
		return lhs.At == rhs.At &&
		lhs.Position == rhs.Position &&
		lhs.Up == rhs.Up &&
		lhs.ObjectID == rhs.ObjectID &&
		lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.RegionSeed == rhs.RegionSeed &&
		lhs.Timestamp == rhs.Timestamp &&
		lhs.UserData == rhs.UserData;
	}
};

//Dependency: GcSeed
struct GcPortalSaveData
{
	NMS::GcSeed PortalSeed;
	uint64_t LastPortalUA;
	bool IsStoryPortal;

	friend bool operator==(const GcPortalSaveData& lhs, const GcPortalSaveData& rhs) 
	{
		return lhs.PortalSeed == rhs.PortalSeed &&
		lhs.LastPortalUA == rhs.LastPortalUA &&
		lhs.IsStoryPortal == rhs.IsStoryPortal;
	}
};

//Dependency: GcDifficultySettingsData
//Dependency: GcDifficultyPresetType
struct GcDifficultyStateData
{
	NMS_GameComponents::GcDifficultySettingsData Settings;
	NMS_GameComponents::GcDifficultyPresetType EasiestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType HardestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType Preset;

	friend bool operator==(const GcDifficultyStateData& lhs, const GcDifficultyStateData& rhs) 
	{
		return lhs.Settings == rhs.Settings &&
		lhs.EasiestUsedPreset == rhs.EasiestUsedPreset &&
		lhs.HardestUsedPreset == rhs.HardestUsedPreset &&
		lhs.Preset == rhs.Preset;
	}
};

//Dependency: GcQuickMenuActionSaveData
struct GcHotActionsSaveData
{
	NMS_GameComponents::GcQuickMenuActionSaveData KeyActions[10];

	friend bool operator==(const GcHotActionsSaveData& lhs, const GcHotActionsSaveData& rhs) 
	{
		return std::equal(std::begin(lhs.KeyActions), std::end(lhs.KeyActions), std::begin(rhs.KeyActions));
	}
};

//Dependency: GcResourceElement
struct GcSquadronPilotData
{
	NMS_GameComponents::GcResourceElement NPCResource;
	NMS_GameComponents::GcResourceElement ShipResource;
	uint64_t TraitsSeed;
	uint16_t PilotRank;

	friend bool operator==(const GcSquadronPilotData& lhs, const GcSquadronPilotData& rhs) 
	{
		return lhs.NPCResource == rhs.NPCResource &&
		lhs.ShipResource == rhs.ShipResource &&
		lhs.TraitsSeed == rhs.TraitsSeed &&
		lhs.PilotRank == rhs.PilotRank;
	}
};

struct GcSettlementHistory
{
	uint64_t SeedValue;
	int32_t BugAttackCount;
	int32_t GiftsRecieved;
	int32_t InitialBuildingCount;
	int32_t InitialHappiness;
	int32_t InitialPopulation;
	int32_t InitialProductivity;
	int32_t InitialUpkeepCost;
	int32_t JudgementsSettled;
	float LastWentIntoDebtTime;
	float LastWentIntoProfitTime;
	float LongestDebtStretch;
	float LongestProfitStretch;
	float PlayerClaimedTime;
	int32_t PlayerKillCount;
	int32_t SentinelAttackCount;
	int32_t SettlerDeathCount;

	friend bool operator==(const GcSettlementHistory& lhs, const GcSettlementHistory& rhs) 
	{
		return lhs.SeedValue == rhs.SeedValue &&
		lhs.BugAttackCount == rhs.BugAttackCount &&
		lhs.GiftsRecieved == rhs.GiftsRecieved &&
		lhs.InitialBuildingCount == rhs.InitialBuildingCount &&
		lhs.InitialHappiness == rhs.InitialHappiness &&
		lhs.InitialPopulation == rhs.InitialPopulation &&
		lhs.InitialProductivity == rhs.InitialProductivity &&
		lhs.InitialUpkeepCost == rhs.InitialUpkeepCost &&
		lhs.JudgementsSettled == rhs.JudgementsSettled &&
		lhs.LastWentIntoDebtTime == rhs.LastWentIntoDebtTime &&
		lhs.LastWentIntoProfitTime == rhs.LastWentIntoProfitTime &&
		lhs.LongestDebtStretch == rhs.LongestDebtStretch &&
		lhs.LongestProfitStretch == rhs.LongestProfitStretch &&
		lhs.PlayerClaimedTime == rhs.PlayerClaimedTime &&
		lhs.PlayerKillCount == rhs.PlayerKillCount &&
		lhs.SentinelAttackCount == rhs.SentinelAttackCount &&
		lhs.SettlerDeathCount == rhs.SettlerDeathCount;
	}
};

//Dependency: GcStatValueData
//Dependency: NMSString0x10
struct GcPlayerStat
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcStatValueData Value;

	friend bool operator==(const GcPlayerStat& lhs, const GcPlayerStat& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: GcPlayerStat
//Dependency: NMSString0x10
struct GcPlayerStatsGroup
{
	NMS::NMSString0x10 GroupId;
	std::vector<NMS_GameComponents::GcPlayerStat> Stats;
	uint64_t Address;

	friend bool operator==(const GcPlayerStatsGroup& lhs, const GcPlayerStatsGroup& rhs) 
	{
		return lhs.GroupId == rhs.GroupId &&
		lhs.Stats == rhs.Stats &&
		lhs.Address == rhs.Address;
	}
};

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcSyncBufferSaveData
{
	uint64_t SpaceAddress;
	uint32_t BufferVersion;
	uint32_t ItemsCount;
	NMS::NMSString0x40 OwnerOnlineId;
	NMS::NMSString0x20 OwnerPlatformId;

	friend bool operator==(const GcSyncBufferSaveData& lhs, const GcSyncBufferSaveData& rhs) 
	{
		return lhs.SpaceAddress == rhs.SpaceAddress &&
		lhs.BufferVersion == rhs.BufferVersion &&
		lhs.ItemsCount == rhs.ItemsCount &&
		lhs.OwnerOnlineId == rhs.OwnerOnlineId &&
		lhs.OwnerPlatformId == rhs.OwnerPlatformId;
	}
};

//Dependency: GcSyncBufferSaveData
struct GcSyncBufferSaveDataArray
{
	std::vector<NMS_GameComponents::GcSyncBufferSaveData> Data;

	friend bool operator==(const GcSyncBufferSaveDataArray& lhs, const GcSyncBufferSaveDataArray& rhs) 
	{
		return lhs.Data == rhs.Data;
	}
};

//Dependency: GcPlayerMissionParticipant
//Dependency: NMSString0x10
struct GcPlayerMissionProgress
{
	NMS_GameComponents::GcPlayerMissionParticipant Participants[13];
	NMS::NMSString0x10 Mission;
	uint64_t Data;
	uint64_t Seed;
	uint64_t Stat;
	int32_t Progress;

	friend bool operator==(const GcPlayerMissionProgress& lhs, const GcPlayerMissionProgress& rhs) 
	{
		return std::equal(std::begin(lhs.Participants), std::end(lhs.Participants), std::begin(rhs.Participants)) &&
		lhs.Mission == rhs.Mission &&
		lhs.Data == rhs.Data &&
		lhs.Seed == rhs.Seed &&
		lhs.Stat == rhs.Stat &&
		lhs.Progress == rhs.Progress;
	}
};

struct GcStoryPageSeenData
{
	int32_t LastSeenEntryIdx;
	int32_t PageIdx;

	friend bool operator==(const GcStoryPageSeenData& lhs, const GcStoryPageSeenData& rhs) 
	{
		return lhs.LastSeenEntryIdx == rhs.LastSeenEntryIdx &&
		lhs.PageIdx == rhs.PageIdx;
	}
};

//Dependency: GcStoryPageSeenData
struct GcStoryPageSeenDataArray
{
	std::vector<NMS_GameComponents::GcStoryPageSeenData> PagesData;

	friend bool operator==(const GcStoryPageSeenDataArray& lhs, const GcStoryPageSeenDataArray& rhs) 
	{
		return lhs.PagesData == rhs.PagesData;
	}
};

//Dependency: GcExpeditionEventSaveData
//Dependency: NMSString0x10
//Dependency: GcExpeditionCategory
//Dependency: GcExpeditionDuration
//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: NMSString0x100
struct GcFleetExpeditionSaveData
{
	NMS::Vector3f SpawnPosition;
	NMS::Vector3f TerminalPosition;
	std::vector<int32_t> ActiveFrigateIndices;
	std::vector<int32_t> AllFrigateIndices;
	std::vector<int32_t> DamagedFrigateIndices;
	std::vector<int32_t> DestroyedFrigateIndices;
	std::vector<NMS_GameComponents::GcExpeditionEventSaveData> Events;
	NMS::NMSString0x10 InterventionEventMissionID;
	std::vector<NMS::NMSString0x10> Powerups;
	NMS::GcSeed Seed;
	uint64_t PauseTime;
	uint64_t StartTime;
	uint64_t TimeOfLastUAChange;
	uint64_t UA;
	NMS_GameComponents::GcExpeditionCategory ExpeditionCategory;
	NMS_GameComponents::GcExpeditionDuration ExpeditionDuration;
	int32_t NextEventToTrigger;
	int32_t NumberOfFailedEventsThisExpedition;
	int32_t NumberOfSuccessfulEventsThisExpedition;
	float SpeedMultiplier;
	NMS::NMSString0x100 CustomName;
	bool InterventionPhoneCallActivated;

	friend bool operator==(const GcFleetExpeditionSaveData& lhs, const GcFleetExpeditionSaveData& rhs) 
	{
		return lhs.SpawnPosition == rhs.SpawnPosition &&
		lhs.TerminalPosition == rhs.TerminalPosition &&
		lhs.ActiveFrigateIndices == rhs.ActiveFrigateIndices &&
		lhs.AllFrigateIndices == rhs.AllFrigateIndices &&
		lhs.DamagedFrigateIndices == rhs.DamagedFrigateIndices &&
		lhs.DestroyedFrigateIndices == rhs.DestroyedFrigateIndices &&
		lhs.Events == rhs.Events &&
		lhs.InterventionEventMissionID == rhs.InterventionEventMissionID &&
		lhs.Powerups == rhs.Powerups &&
		lhs.Seed == rhs.Seed &&
		lhs.PauseTime == rhs.PauseTime &&
		lhs.StartTime == rhs.StartTime &&
		lhs.TimeOfLastUAChange == rhs.TimeOfLastUAChange &&
		lhs.UA == rhs.UA &&
		lhs.ExpeditionCategory == rhs.ExpeditionCategory &&
		lhs.ExpeditionDuration == rhs.ExpeditionDuration &&
		lhs.NextEventToTrigger == rhs.NextEventToTrigger &&
		lhs.NumberOfFailedEventsThisExpedition == rhs.NumberOfFailedEventsThisExpedition &&
		lhs.NumberOfSuccessfulEventsThisExpedition == rhs.NumberOfSuccessfulEventsThisExpedition &&
		lhs.SpeedMultiplier == rhs.SpeedMultiplier &&
		lhs.CustomName == rhs.CustomName &&
		lhs.InterventionPhoneCallActivated == rhs.InterventionPhoneCallActivated;
	}
};

//Dependency: GcGalacticAddressData
//Dependency: GcGalaxyWaypointTypes
//Dependency: NMSString0x20A
struct GcGalaxyWaypoint
{
	NMS::NMSString0x20A EventId;
	NMS_GameComponents::GcGalacticAddressData Address;
	int32_t RealityIndex;
	NMS_GameComponents::GcGalaxyWaypointTypes Type;

	friend bool operator==(const GcGalaxyWaypoint& lhs, const GcGalaxyWaypoint& rhs) 
	{
		return lhs.EventId == rhs.EventId &&
		lhs.Address == rhs.Address &&
		lhs.RealityIndex == rhs.RealityIndex &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcInventoryContainer
struct GcMaintenanceContainer
{
	NMS_GameComponents::GcInventoryContainer InventoryContainer;
	std::vector<float> AmountAccumulators;
	std::vector<float> DamageTimers;
	uint64_t LastBrokenTimestamp;
	uint64_t LastCompletedTimestamp;
	uint64_t LastUpdateTimestamp;
	uint16_t Flags;

	friend bool operator==(const GcMaintenanceContainer& lhs, const GcMaintenanceContainer& rhs) 
	{
		return lhs.InventoryContainer == rhs.InventoryContainer &&
		lhs.AmountAccumulators == rhs.AmountAccumulators &&
		lhs.DamageTimers == rhs.DamageTimers &&
		lhs.LastBrokenTimestamp == rhs.LastBrokenTimestamp &&
		lhs.LastCompletedTimestamp == rhs.LastCompletedTimestamp &&
		lhs.LastUpdateTimestamp == rhs.LastUpdateTimestamp &&
		lhs.Flags == rhs.Flags;
	}
};

//Dependency: GcBuildingClassification
//Dependency: GcPlayerMissionParticipantType
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcScanEventSave
{
	NMS::Vector3f BuildingLocation;
	NMS::NMSString0x20A Event;
	NMS::GcSeed BuildingSeed;
	NMS::NMSString0x10 MissionID;
	uint64_t GalacticAddress;
	uint64_t MissionSeed;
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	NMS_GameComponents::GcPlayerMissionParticipantType ParticipantType;
	int32_t Table;
	float Time;

	friend bool operator==(const GcScanEventSave& lhs, const GcScanEventSave& rhs) 
	{
		return lhs.BuildingLocation == rhs.BuildingLocation &&
		lhs.Event == rhs.Event &&
		lhs.BuildingSeed == rhs.BuildingSeed &&
		lhs.MissionID == rhs.MissionID &&
		lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.MissionSeed == rhs.MissionSeed &&
		lhs.BuildingClass == rhs.BuildingClass &&
		lhs.ParticipantType == rhs.ParticipantType &&
		lhs.Table == rhs.Table &&
		lhs.Time == rhs.Time;
	}
};

//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcTradingSupplyData
{
	NMS::NMSString0x10 Product;
	uint64_t GalacticAddress;
	uint64_t Timestamp;
	float Demand;
	NMS_GameComponents::GcInteractionType InteractionType;
	float Supply;

	friend bool operator==(const GcTradingSupplyData& lhs, const GcTradingSupplyData& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.Timestamp == rhs.Timestamp &&
		lhs.Demand == rhs.Demand &&
		lhs.InteractionType == rhs.InteractionType &&
		lhs.Supply == rhs.Supply;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcPersistentBaseEntry
{
	NMS::Vector3f At;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::NMSString0x10 ObjectID;
	uint64_t Timestamp;
	uint64_t UserData;
	NMS::NMSString0x40 Message;

	friend bool operator==(const GcPersistentBaseEntry& lhs, const GcPersistentBaseEntry& rhs) 
	{
		return lhs.At == rhs.At &&
		lhs.Position == rhs.Position &&
		lhs.Up == rhs.Up &&
		lhs.ObjectID == rhs.ObjectID &&
		lhs.Timestamp == rhs.Timestamp &&
		lhs.UserData == rhs.UserData &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: GcPersistentBaseEntry
//Dependency: GcGameMode
//Dependency: GcBaseAutoPowerSetting
//Dependency: GcDiscoveryOwner
//Dependency: GcPersistentBaseDifficultyData
//Dependency: NMSString0x40
//Dependency: GcPersistentBaseTypes
//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcPersistentBase
{
	NMS::Vector3f Forward;
	NMS::Vector3f Position;
	NMS::Vector3f ScreenshotAt;
	NMS::Vector3f ScreenshotPos;
	std::vector<NMS_GameComponents::GcPersistentBaseEntry> Objects;
	uint64_t GalacticAddress;
	uint64_t LastUpdateTimestamp;
	uint64_t UserData;
	NMS_GameComponents::GcDiscoveryOwner Owner;
	NMS_GameComponents::GcPersistentBaseDifficultyData Difficulty;
	NMS_GameComponents::GcBaseAutoPowerSetting AutoPowerSetting;
	NMS_GameComponents::GcPersistentBaseTypes BaseType;
	int32_t BaseVersion;
	NMS_GameComponents::GcGameMode GameMode;
	int32_t OriginalBaseVersion;
	NMS::NMSString0x40 LastEditedById;
	NMS::NMSString0x40 LastEditedByUsername;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 RID;
	NMS::NMSString0x20 PlatformToken;
	bool IsFeatured;
	bool IsReported;

	friend bool operator==(const GcPersistentBase& lhs, const GcPersistentBase& rhs) 
	{
		return lhs.Forward == rhs.Forward &&
		lhs.Position == rhs.Position &&
		lhs.ScreenshotAt == rhs.ScreenshotAt &&
		lhs.ScreenshotPos == rhs.ScreenshotPos &&
		lhs.Objects == rhs.Objects &&
		lhs.GalacticAddress == rhs.GalacticAddress &&
		lhs.LastUpdateTimestamp == rhs.LastUpdateTimestamp &&
		lhs.UserData == rhs.UserData &&
		lhs.Owner == rhs.Owner &&
		lhs.Difficulty == rhs.Difficulty &&
		lhs.AutoPowerSetting == rhs.AutoPowerSetting &&
		lhs.BaseType == rhs.BaseType &&
		lhs.BaseVersion == rhs.BaseVersion &&
		lhs.GameMode == rhs.GameMode &&
		lhs.OriginalBaseVersion == rhs.OriginalBaseVersion &&
		lhs.LastEditedById == rhs.LastEditedById &&
		lhs.LastEditedByUsername == rhs.LastEditedByUsername &&
		lhs.Name == rhs.Name &&
		lhs.RID == rhs.RID &&
		lhs.PlatformToken == rhs.PlatformToken &&
		lhs.IsFeatured == rhs.IsFeatured &&
		lhs.IsReported == rhs.IsReported;
	}
};

//Dependency: Vector3f
struct GcMaintenanceSaveKey
{
	NMS::Vector3f Position;
	int32_t Location;

	friend bool operator==(const GcMaintenanceSaveKey& lhs, const GcMaintenanceSaveKey& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.Location == rhs.Location;
	}
};

//Dependency: GcMaintenanceContainer
//Dependency: GcInventoryIndex
struct GcRepairTechData
{
	NMS_GameComponents::GcMaintenanceContainer MaintenanceContainer;
	NMS_GameComponents::GcInventoryIndex InventoryIndex;
	int32_t InventorySubIndex;
	int32_t InventoryType;

	friend bool operator==(const GcRepairTechData& lhs, const GcRepairTechData& rhs) 
	{
		return lhs.MaintenanceContainer == rhs.MaintenanceContainer &&
		lhs.InventoryIndex == rhs.InventoryIndex &&
		lhs.InventorySubIndex == rhs.InventorySubIndex &&
		lhs.InventoryType == rhs.InventoryType;
	}
};

struct GcSettlementTowerPowerTimestamps
{
	uint64_t TimeStamps[4];
	int8_t ClusterIndex;

	friend bool operator==(const GcSettlementTowerPowerTimestamps& lhs, const GcSettlementTowerPowerTimestamps& rhs) 
	{
		return std::equal(std::begin(lhs.TimeStamps), std::end(lhs.TimeStamps), std::begin(rhs.TimeStamps)) &&
		lhs.ClusterIndex == rhs.ClusterIndex;
	}
};

//Dependency: GcByteBeatJukeboxData
//Dependency: GcSettlementTowerPowerTimestamps
struct GcSettlementLocalSaveData
{
	uint64_t BuildingSeeds[48];
	NMS_GameComponents::GcByteBeatJukeboxData ByteBeatJukebox;
	NMS_GameComponents::GcSettlementTowerPowerTimestamps TowerPowerTimeStamps[3];
	uint64_t Seed;
	int32_t Buildings[48];
	bool HasScannedToReveal;
	bool RequiresStatConversion;

	friend bool operator==(const GcSettlementLocalSaveData& lhs, const GcSettlementLocalSaveData& rhs) 
	{
		return std::equal(std::begin(lhs.BuildingSeeds), std::end(lhs.BuildingSeeds), std::begin(rhs.BuildingSeeds)) &&
		lhs.ByteBeatJukebox == rhs.ByteBeatJukebox &&
		std::equal(std::begin(lhs.TowerPowerTimeStamps), std::end(lhs.TowerPowerTimeStamps), std::begin(rhs.TowerPowerTimeStamps)) &&
		lhs.Seed == rhs.Seed &&
		std::equal(std::begin(lhs.Buildings), std::end(lhs.Buildings), std::begin(rhs.Buildings)) &&
		lhs.HasScannedToReveal == rhs.HasScannedToReveal &&
		lhs.RequiresStatConversion == rhs.RequiresStatConversion;
	}
};

//Dependency: NMSString0x100
struct GcSavedEntitlement
{
	NMS::NMSString0x100 EntitlementId;

	friend bool operator==(const GcSavedEntitlement& lhs, const GcSavedEntitlement& rhs) 
	{
		return lhs.EntitlementId == rhs.EntitlementId;
	}
};

struct GcSavedInteractionRaceData
{
	int32_t SavedRaceIndicies[9];
	bool HasLoopedIndicies[9];

	friend bool operator==(const GcSavedInteractionRaceData& lhs, const GcSavedInteractionRaceData& rhs) 
	{
		return std::equal(std::begin(lhs.SavedRaceIndicies), std::end(lhs.SavedRaceIndicies), std::begin(rhs.SavedRaceIndicies)) &&
		std::equal(std::begin(lhs.HasLoopedIndicies), std::end(lhs.HasLoopedIndicies), std::begin(rhs.HasLoopedIndicies));
	}
};

struct GcWonderType
{
	enum class WonderTypeEnum : uint32_t
	{
		Treasure = 0,
		WeirdBasePart = 1,
		Planet = 2,
		Creature = 3,
		Flora = 4,
		Mineral = 5,
		Custom = 6,
	};

	NMS_GameComponents::GcWonderType::WonderTypeEnum WonderType;

	friend bool operator==(const GcWonderType& lhs, const GcWonderType& rhs) 
	{
		return lhs.WonderType == rhs.WonderType;
	}
};

//Dependency: GcWonderType
//Dependency: NMSString0x40
struct GcWonderRecordCustomData
{
	NMS_GameComponents::GcWonderType ActualType;
	NMS::NMSString0x40 CustomName;

	friend bool operator==(const GcWonderRecordCustomData& lhs, const GcWonderRecordCustomData& rhs) 
	{
		return lhs.ActualType == rhs.ActualType &&
		lhs.CustomName == rhs.CustomName;
	}
};

//Dependency: GcPlayerOwnershipData
//Dependency: GcTerrainEditsBuffer
//Dependency: GcArchivedShipData
//Dependency: GcMissionIDEpochPair
//Dependency: GcSettlementState
//Dependency: GcWonderRecord
//Dependency: GcNPCWorkerData
//Dependency: NMSString0x80
//Dependency: GcArchivedMultitoolData
//Dependency: GcTelemetryStat
//Dependency: GcMultitoolData
//Dependency: GcSeed
//Dependency: GcPlayerSpawnStateData
//Dependency: GcTeleportEndpoint
//Dependency: GcSkiffSaveData
//Dependency: GcPersistentBBObjectData
//Dependency: GcInteractionData
//Dependency: GcPetData
//Dependency: GcFishingRecord
//Dependency: GcSavedInteractionDialogData
//Dependency: GcPetCustomisationData
//Dependency: GcPortalSaveData
//Dependency: GcCharacterCustomisationSaveData
//Dependency: GcDifficultyStateData
//Dependency: GcHotActionsSaveData
//Dependency: GcSquadronPilotData
//Dependency: GcSettlementHistory
//Dependency: GcPlayerStatsGroup
//Dependency: GcInventoryContainer
//Dependency: GcSyncBufferSaveDataArray
//Dependency: GcCharacterCustomisationData
//Dependency: GcInteractionBuffer
//Dependency: GcPlayerMissionProgress
//Dependency: GcStoryPageSeenDataArray
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcResourceElement
//Dependency: GcExactResource
//Dependency: GcInventoryLayout
//Dependency: GcFleetExpeditionSaveData
//Dependency: GcFleetFrigateSaveData
//Dependency: GcGalaxyWaypoint
//Dependency: GcWordGroupKnowledge
//Dependency: GcInWorldUIScreenData
//Dependency: GcWordKnowledge
//Dependency: GcMaintenanceContainer
//Dependency: GcScanEventSave
//Dependency: GcTradingSupplyData
//Dependency: GcPersistentBase
//Dependency: GcMaintenanceSaveKey
//Dependency: GcRepairTechData
//Dependency: GcSettlementLocalSaveData
//Dependency: GcSavedEntitlement
//Dependency: GcUniverseAddressData
//Dependency: GcSavedInteractionRaceData
//Dependency: GcWonderRecordCustomData
//Dependency: GcPlayerWeapons
//Dependency: Vector3f
//Dependency: Vector4f
//Dependency: NMSString0x20
struct GcPlayerStateData
{
	NMS_GameComponents::GcTerrainEditsBuffer TerrainEditData;
	NMS_GameComponents::GcSettlementState SettlementStatesV2[100];
	NMS_GameComponents::GcArchivedShipData ArchivedShipOwnership[18];
	NMS_GameComponents::GcPlayerOwnershipData ShipOwnership[12];
	NMS_GameComponents::GcArchivedMultitoolData ArchivedMultitools[18];
	NMS_GameComponents::GcPlayerOwnershipData VehicleOwnership[7];
	NMS_GameComponents::GcMultitoolData Multitools[6];
	NMS_GameComponents::GcNPCWorkerData NPCWorkers[5];
	NMS::Vector3f PlanetPositions[16];
	NMS_GameComponents::GcPlayerSpawnStateData MultiplayerSpawn;
	NMS_GameComponents::GcTeleportEndpoint OtherSideOfPortalReturnBase;
	NMS_GameComponents::GcSkiffSaveData SkiffData;
	NMS_GameComponents::GcInteractionData HoloExplorerInteraction;
	NMS_GameComponents::GcInteractionData HoloNooneInteraction;
	NMS_GameComponents::GcInteractionData HoloScepticInteraction;
	NMS::Vector4f AnomalyPositionOverride;
	NMS::Vector4f FirstShipPosition;
	NMS::Vector4f FirstSpawnPosition;
	NMS::Vector3f FreighterMatrixAt;
	NMS::Vector3f FreighterMatrixPos;
	NMS::Vector3f FreighterMatrixUp;
	NMS::Vector4f GraveMatrixLookAt;
	NMS::Vector4f GraveMatrixUp;
	NMS::Vector4f GravePosition;
	NMS::Vector3f NexusMatrixAt;
	NMS::Vector3f NexusMatrixPos;
	NMS::Vector3f NexusMatrixUp;
	NMS::Vector4f PortalMarkerPosition_Local;
	NMS::Vector4f PortalMarkerPosition_Offset;
	NMS::Vector4f StartGameShipPosition;
	NMS_GameComponents::GcPetData Eggs[18];
	NMS_GameComponents::GcPetData Pets[18];
	NMS_GameComponents::GcFishingRecord FishingRecord;
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation[18];
	NMS_GameComponents::GcCharacterCustomisationSaveData CharacterCustomisationData[26];
	NMS_GameComponents::GcHotActionsSaveData HotActions[3];
	NMS_GameComponents::GcSquadronPilotData SquadronPilots[4];
	NMS_GameComponents::GcWonderRecord WonderCreatureRecords[15];
	NMS_GameComponents::GcInventoryContainer Chest10Inventory;
	NMS_GameComponents::GcInventoryContainer Chest1Inventory;
	NMS_GameComponents::GcInventoryContainer Chest2Inventory;
	NMS_GameComponents::GcInventoryContainer Chest3Inventory;
	NMS_GameComponents::GcInventoryContainer Chest4Inventory;
	NMS_GameComponents::GcInventoryContainer Chest5Inventory;
	NMS_GameComponents::GcInventoryContainer Chest6Inventory;
	NMS_GameComponents::GcInventoryContainer Chest7Inventory;
	NMS_GameComponents::GcInventoryContainer Chest8Inventory;
	NMS_GameComponents::GcInventoryContainer Chest9Inventory;
	NMS_GameComponents::GcInventoryContainer ChestMagic2Inventory;
	NMS_GameComponents::GcInventoryContainer ChestMagicInventory;
	NMS_GameComponents::GcInventoryContainer CookingIngredientsInventory;
	NMS_GameComponents::GcInventoryContainer FishBaitBoxInventory;
	NMS_GameComponents::GcInventoryContainer FishPlatformInventory;
	NMS_GameComponents::GcInventoryContainer FoodUnitInventory;
	NMS_GameComponents::GcInventoryContainer FreighterInventory;
	NMS_GameComponents::GcInventoryContainer FreighterInventory_Cargo;
	NMS_GameComponents::GcInventoryContainer FreighterInventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer GraveInventory;
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer RocketLockerInventory;
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS_GameComponents::GcWonderRecord WonderTreasureRecords[13];
	NMS_GameComponents::GcSettlementHistory SettlementHistory[4];
	NMS_GameComponents::GcWonderRecord WonderCustomRecords[12];
	NMS_GameComponents::GcCharacterCustomisationData Outfits[3];
	NMS_GameComponents::GcInteractionBuffer StoredInteractions[11];
	NMS_GameComponents::GcWonderRecord WonderPlanetRecords[11];
	NMS_GameComponents::GcWonderRecord WonderWeirdBasePartRecords[11];
	NMS::GcSeed PlanetSeeds[16];
	NMS_GameComponents::GcWonderRecord WonderFloraRecords[8];
	NMS_GameComponents::GcWonderRecord WonderMineralRecords[8];
	NMS_GameComponents::GcStoryPageSeenDataArray SeenStories[9];
	NMS_GameComponents::GcResourceElement CurrentFreighter;
	NMS_GameComponents::GcResourceElement CurrentFreighterNPC;
	NMS_GameComponents::GcResourceElement CurrentShip;
	NMS_GameComponents::GcSyncBufferSaveDataArray SyncBuffersData[4];
	NMS_GameComponents::GcExactResource CurrentWeapon;
	NMS_GameComponents::GcPortalSaveData VisitedPortal;
	NMS_GameComponents::GcInventoryLayout Chest10Layout;
	NMS_GameComponents::GcInventoryLayout Chest1Layout;
	NMS_GameComponents::GcInventoryLayout Chest2Layout;
	NMS_GameComponents::GcInventoryLayout Chest3Layout;
	NMS_GameComponents::GcInventoryLayout Chest4Layout;
	NMS_GameComponents::GcInventoryLayout Chest5Layout;
	NMS_GameComponents::GcInventoryLayout Chest6Layout;
	NMS_GameComponents::GcInventoryLayout Chest7Layout;
	NMS_GameComponents::GcInventoryLayout Chest8Layout;
	NMS_GameComponents::GcInventoryLayout Chest9Layout;
	NMS_GameComponents::GcInventoryLayout ChestMagic2Layout;
	NMS_GameComponents::GcInventoryLayout ChestMagicLayout;
	NMS_GameComponents::GcInventoryLayout CookingIngredientsLayout;
	NMS_GameComponents::GcInventoryLayout FishBaitBoxLayout;
	NMS_GameComponents::GcInventoryLayout FishPlatformLayout;
	NMS_GameComponents::GcInventoryLayout FoodUnitLayout;
	NMS_GameComponents::GcInventoryLayout FreighterCargoLayout;
	NMS_GameComponents::GcInventoryLayout FreighterLayout;
	NMS_GameComponents::GcInventoryLayout RocketLockerLayout;
	NMS_GameComponents::GcInventoryLayout ShipLayout;
	NMS_GameComponents::GcInventoryLayout WeaponLayout;
	NMS::NMSString0x10 BannerTitleId;
	std::vector<NMS_GameComponents::GcPersistentBBObjectData> BaseBuildingObjects;
	NMS::GcSeed CurrentFreighterHomeSystemSeed;
	NMS::NMSString0x10 CurrentMissionID;
	std::vector<uint64_t> ExpeditionSeedsSelectedToday;
	std::vector<NMS_GameComponents::GcFleetExpeditionSaveData> FleetExpeditions;
	std::vector<NMS_GameComponents::GcFleetFrigateSaveData> FleetFrigates;
	NMS::GcSeed FleetSeed;
	NMS::NMSString0x10 FoodUnitItem;
	NMS::NMSString0x10 FreighterEngineEffect;
	std::vector<NMS_GameComponents::GcGalaxyWaypoint> GalaxyWaypoints;
	std::vector<NMS::NMSString0x20A> InteractionProgressTable;
	NMS::NMSString0x10 JetpackEffect;
	std::vector<NMS::NMSString0x10> KnownProducts;
	std::vector<NMS::NMSString0x20A> KnownRefinerRecipes;
	std::vector<NMS::NMSString0x10> KnownSpecials;
	std::vector<NMS::NMSString0x10> KnownTech;
	std::vector<NMS_GameComponents::GcWordGroupKnowledge> KnownWordGroups;
	std::vector<NMS_GameComponents::GcWordKnowledge> KnownWords;
	std::vector<NMS_GameComponents::GcPortalSaveData> LastPortal;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> MaintenanceInteractions;
	std::vector<NMS_GameComponents::GcScanEventSave> MarkerStack;
	std::vector<NMS_GameComponents::GcPlayerMissionProgress> MissionProgress;
	std::vector<NMS_GameComponents::GcMissionIDEpochPair> MissionRecurrences;
	std::vector<NMS_GameComponents::GcScanEventSave> NewMPMarkerStack;
	std::vector<NMS_GameComponents::GcPersistentBase> PersistentPlayerBases;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> PersonalMaintenanceInteractions;
	NMS::NMSString0x10 PreviousMissionID;
	std::vector<NMS::NMSString0x10> RedeemedPlatformRewards;
	std::vector<NMS::NMSString0x10> RedeemedSeasonRewards;
	std::vector<NMS::NMSString0x10> RedeemedTwitchRewards;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> RefinerBufferData;
	std::vector<NMS_GameComponents::GcMaintenanceSaveKey> RefinerBufferKeys;
	std::vector<NMS_GameComponents::GcRepairTechData> RepairTechBuffer;
	std::vector<NMS_GameComponents::GcSavedInteractionDialogData> SavedInteractionDialogTable;
	std::vector<NMS::NMSString0x10> SeenBaseBuildingObjects;
	std::vector<NMS_GameComponents::GcSettlementLocalSaveData> SettlementLocalSaveData;
	std::vector<NMS_GameComponents::GcPlayerStatsGroup> Stats;
	std::vector<NMS::Vector3f> SurveyedEventPositions;
	std::vector<NMS_GameComponents::GcTelemetryStat> TelemetryStats;
	std::vector<NMS_GameComponents::GcTeleportEndpoint> TeleportEndpoints;
	std::vector<NMS_GameComponents::GcTradingSupplyData> TradingSupplyData;
	std::vector<NMS_GameComponents::GcSavedEntitlement> UsedEntitlements;
	std::vector<NMS_GameComponents::GcUniverseAddressData> VisitedAtlasStationsData;
	std::vector<uint64_t> VisitedSystems;
	std::vector<NMS_GameComponents::GcInWorldUIScreenData> WristScreenData;
	uint64_t ActiveSpaceBattleUA;
	uint64_t CurrentMissionSeed;
	uint64_t FirstPurpleSystemUA;
	uint64_t FreighterLastSpawnTime;
	uint64_t HazardTimeAlive;
	uint64_t LastCheckedForStatResetsTime;
	uint64_t LastKnownDay;
	uint64_t LastUABeforePortalWarp;
	uint64_t MiniStationUA;
	uint64_t MultiplayerLobbyID;
	uint64_t MultiplayerPrivileges;
	uint64_t PreviousMissionSeed;
	uint64_t StoryPortalSeed;
	uint64_t SunTimer;
	uint64_t TaggedPlanetUA;
	uint64_t TimeAlive;
	uint64_t TimeLastMiniStation;
	uint64_t TimeLastSpaceBattle;
	uint64_t TimeStamp;
	NMS_GameComponents::GcSavedInteractionRaceData SavedInteractionIndicies[149];
	NMS_GameComponents::GcWonderRecordCustomData WonderCustomRecordsExtraData[12];
	NMS_GameComponents::GcUniverseAddressData CompletedAtlasAddresses[11];
	NMS_GameComponents::GcUniverseAddressData NewAtlasStationAdressData[11];
	NMS_GameComponents::GcUniverseAddressData AtlasStationAdressData[10];
	NMS_GameComponents::GcDifficultyStateData DifficultyState;
	float Hazard[7];
	NMS_GameComponents::GcUniverseAddressData FreighterUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData GameStartAddress1;
	NMS_GameComponents::GcUniverseAddressData GameStartAddress2;
	NMS_GameComponents::GcUniverseAddressData GraveUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData MultiplayerUA;
	NMS_GameComponents::GcUniverseAddressData NexusUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData PreviousUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData UniverseAddress;
	int32_t ActiveMultioolIndex;
	int32_t ActiveSpaceBattleLevel;
	int32_t BannerBackgroundColour;
	int32_t BannerIcon;
	int32_t BannerMainColour;
	int32_t BoltAmmo;
	int32_t Energy;
	float FoodUnitAccumulator;
	int32_t Health;
	int32_t HomeRealityIteration;
	int32_t KnownPortalRunes;
	int32_t LaserAmmo;
	int32_t MissionVersion;
	int32_t Nanites;
	int32_t NextSurveyedEventPositionIndex;
	int32_t PostMissionIndex;
	int32_t PrimaryPlanet;
	int32_t PrimaryShip;
	int32_t PrimaryVehicle;
	int32_t ProcTechIndex;
	int32_t ProgressionLevel;
	int32_t PulseAmmo;
	int32_t ScatterAmmo;
	int32_t SettlementStateRingBufferIndexV2;
	int32_t Shield;
	int32_t ShipHealth;
	int32_t ShipShield;
	int32_t Specials;
	NMS_GameComponents::GcPlayerWeapons StartingPrimaryWeapon;
	int32_t StartingSeasonNumber;
	NMS_GameComponents::GcPlayerWeapons StartingSecondaryWeapon;
	int32_t TelemetryUploadVersion;
	int32_t TradingSupplyDataIndex;
	int32_t Units;
	float VRCameraOffset;
	int32_t WarpsLastMiniStation;
	int32_t WarpsLastSpaceBattle;
	uint16_t ShopNumber;
	uint16_t ShopTier;
	NMS::NMSString0x80 SaveSummary;
	NMS::NMSString0x20 PlayerFreighterName;
	bool UnlockedPetSlots[18];
	bool GalacticMapRequests[16];
	bool ShipUsesLegacyColours[12];
	bool SquadronUnlockedPilotSlots[4];
	bool BuildersKnown;
	bool FirstAtlasStationDiscovered;
	bool FreighterDismissed;
	bool HasAccessToNexus;
	bool HasDiscoveredPurpleSystems;
	bool HasGalacticMapRequestAllPurples;
	bool HasGalacticMapRequestFirstPurple;
	bool IsNew;
	bool MultiShipEnabled;
	bool NextLoadSpawnsWithFreshStart;
	bool OnOtherSideOfPortal;
	bool RestartAllInactiveSeasonalMissions;
	bool RevealBlackHoles;
	bool ShipNeedsTerrainPositioning;
	bool SpaceGrave;
	bool SpawnGrave;
	bool UseSmallerBlackholeJumps;
	bool VehicleAIControlEnabled;

	friend bool operator==(const GcPlayerStateData& lhs, const GcPlayerStateData& rhs) 
	{
		return lhs.TerrainEditData == rhs.TerrainEditData &&
		std::equal(std::begin(lhs.SettlementStatesV2), std::end(lhs.SettlementStatesV2), std::begin(rhs.SettlementStatesV2)) &&
		std::equal(std::begin(lhs.ArchivedShipOwnership), std::end(lhs.ArchivedShipOwnership), std::begin(rhs.ArchivedShipOwnership)) &&
		std::equal(std::begin(lhs.ShipOwnership), std::end(lhs.ShipOwnership), std::begin(rhs.ShipOwnership)) &&
		std::equal(std::begin(lhs.ArchivedMultitools), std::end(lhs.ArchivedMultitools), std::begin(rhs.ArchivedMultitools)) &&
		std::equal(std::begin(lhs.VehicleOwnership), std::end(lhs.VehicleOwnership), std::begin(rhs.VehicleOwnership)) &&
		std::equal(std::begin(lhs.Multitools), std::end(lhs.Multitools), std::begin(rhs.Multitools)) &&
		std::equal(std::begin(lhs.NPCWorkers), std::end(lhs.NPCWorkers), std::begin(rhs.NPCWorkers)) &&
		std::equal(std::begin(lhs.PlanetPositions), std::end(lhs.PlanetPositions), std::begin(rhs.PlanetPositions)) &&
		lhs.MultiplayerSpawn == rhs.MultiplayerSpawn &&
		lhs.OtherSideOfPortalReturnBase == rhs.OtherSideOfPortalReturnBase &&
		lhs.SkiffData == rhs.SkiffData &&
		lhs.HoloExplorerInteraction == rhs.HoloExplorerInteraction &&
		lhs.HoloNooneInteraction == rhs.HoloNooneInteraction &&
		lhs.HoloScepticInteraction == rhs.HoloScepticInteraction &&
		lhs.AnomalyPositionOverride == rhs.AnomalyPositionOverride &&
		lhs.FirstShipPosition == rhs.FirstShipPosition &&
		lhs.FirstSpawnPosition == rhs.FirstSpawnPosition &&
		lhs.FreighterMatrixAt == rhs.FreighterMatrixAt &&
		lhs.FreighterMatrixPos == rhs.FreighterMatrixPos &&
		lhs.FreighterMatrixUp == rhs.FreighterMatrixUp &&
		lhs.GraveMatrixLookAt == rhs.GraveMatrixLookAt &&
		lhs.GraveMatrixUp == rhs.GraveMatrixUp &&
		lhs.GravePosition == rhs.GravePosition &&
		lhs.NexusMatrixAt == rhs.NexusMatrixAt &&
		lhs.NexusMatrixPos == rhs.NexusMatrixPos &&
		lhs.NexusMatrixUp == rhs.NexusMatrixUp &&
		lhs.PortalMarkerPosition_Local == rhs.PortalMarkerPosition_Local &&
		lhs.PortalMarkerPosition_Offset == rhs.PortalMarkerPosition_Offset &&
		lhs.StartGameShipPosition == rhs.StartGameShipPosition &&
		std::equal(std::begin(lhs.Eggs), std::end(lhs.Eggs), std::begin(rhs.Eggs)) &&
		std::equal(std::begin(lhs.Pets), std::end(lhs.Pets), std::begin(rhs.Pets)) &&
		lhs.FishingRecord == rhs.FishingRecord &&
		std::equal(std::begin(lhs.PetAccessoryCustomisation), std::end(lhs.PetAccessoryCustomisation), std::begin(rhs.PetAccessoryCustomisation)) &&
		std::equal(std::begin(lhs.CharacterCustomisationData), std::end(lhs.CharacterCustomisationData), std::begin(rhs.CharacterCustomisationData)) &&
		std::equal(std::begin(lhs.HotActions), std::end(lhs.HotActions), std::begin(rhs.HotActions)) &&
		std::equal(std::begin(lhs.SquadronPilots), std::end(lhs.SquadronPilots), std::begin(rhs.SquadronPilots)) &&
		std::equal(std::begin(lhs.WonderCreatureRecords), std::end(lhs.WonderCreatureRecords), std::begin(rhs.WonderCreatureRecords)) &&
		lhs.Chest10Inventory == rhs.Chest10Inventory &&
		lhs.Chest1Inventory == rhs.Chest1Inventory &&
		lhs.Chest2Inventory == rhs.Chest2Inventory &&
		lhs.Chest3Inventory == rhs.Chest3Inventory &&
		lhs.Chest4Inventory == rhs.Chest4Inventory &&
		lhs.Chest5Inventory == rhs.Chest5Inventory &&
		lhs.Chest6Inventory == rhs.Chest6Inventory &&
		lhs.Chest7Inventory == rhs.Chest7Inventory &&
		lhs.Chest8Inventory == rhs.Chest8Inventory &&
		lhs.Chest9Inventory == rhs.Chest9Inventory &&
		lhs.ChestMagic2Inventory == rhs.ChestMagic2Inventory &&
		lhs.ChestMagicInventory == rhs.ChestMagicInventory &&
		lhs.CookingIngredientsInventory == rhs.CookingIngredientsInventory &&
		lhs.FishBaitBoxInventory == rhs.FishBaitBoxInventory &&
		lhs.FishPlatformInventory == rhs.FishPlatformInventory &&
		lhs.FoodUnitInventory == rhs.FoodUnitInventory &&
		lhs.FreighterInventory == rhs.FreighterInventory &&
		lhs.FreighterInventory_Cargo == rhs.FreighterInventory_Cargo &&
		lhs.FreighterInventory_TechOnly == rhs.FreighterInventory_TechOnly &&
		lhs.GraveInventory == rhs.GraveInventory &&
		lhs.Inventory == rhs.Inventory &&
		lhs.Inventory_Cargo == rhs.Inventory_Cargo &&
		lhs.Inventory_TechOnly == rhs.Inventory_TechOnly &&
		lhs.RocketLockerInventory == rhs.RocketLockerInventory &&
		lhs.ShipInventory == rhs.ShipInventory &&
		lhs.WeaponInventory == rhs.WeaponInventory &&
		std::equal(std::begin(lhs.WonderTreasureRecords), std::end(lhs.WonderTreasureRecords), std::begin(rhs.WonderTreasureRecords)) &&
		std::equal(std::begin(lhs.SettlementHistory), std::end(lhs.SettlementHistory), std::begin(rhs.SettlementHistory)) &&
		std::equal(std::begin(lhs.WonderCustomRecords), std::end(lhs.WonderCustomRecords), std::begin(rhs.WonderCustomRecords)) &&
		std::equal(std::begin(lhs.Outfits), std::end(lhs.Outfits), std::begin(rhs.Outfits)) &&
		std::equal(std::begin(lhs.StoredInteractions), std::end(lhs.StoredInteractions), std::begin(rhs.StoredInteractions)) &&
		std::equal(std::begin(lhs.WonderPlanetRecords), std::end(lhs.WonderPlanetRecords), std::begin(rhs.WonderPlanetRecords)) &&
		std::equal(std::begin(lhs.WonderWeirdBasePartRecords), std::end(lhs.WonderWeirdBasePartRecords), std::begin(rhs.WonderWeirdBasePartRecords)) &&
		std::equal(std::begin(lhs.PlanetSeeds), std::end(lhs.PlanetSeeds), std::begin(rhs.PlanetSeeds)) &&
		std::equal(std::begin(lhs.WonderFloraRecords), std::end(lhs.WonderFloraRecords), std::begin(rhs.WonderFloraRecords)) &&
		std::equal(std::begin(lhs.WonderMineralRecords), std::end(lhs.WonderMineralRecords), std::begin(rhs.WonderMineralRecords)) &&
		std::equal(std::begin(lhs.SeenStories), std::end(lhs.SeenStories), std::begin(rhs.SeenStories)) &&
		lhs.CurrentFreighter == rhs.CurrentFreighter &&
		lhs.CurrentFreighterNPC == rhs.CurrentFreighterNPC &&
		lhs.CurrentShip == rhs.CurrentShip &&
		std::equal(std::begin(lhs.SyncBuffersData), std::end(lhs.SyncBuffersData), std::begin(rhs.SyncBuffersData)) &&
		lhs.CurrentWeapon == rhs.CurrentWeapon &&
		lhs.VisitedPortal == rhs.VisitedPortal &&
		lhs.Chest10Layout == rhs.Chest10Layout &&
		lhs.Chest1Layout == rhs.Chest1Layout &&
		lhs.Chest2Layout == rhs.Chest2Layout &&
		lhs.Chest3Layout == rhs.Chest3Layout &&
		lhs.Chest4Layout == rhs.Chest4Layout &&
		lhs.Chest5Layout == rhs.Chest5Layout &&
		lhs.Chest6Layout == rhs.Chest6Layout &&
		lhs.Chest7Layout == rhs.Chest7Layout &&
		lhs.Chest8Layout == rhs.Chest8Layout &&
		lhs.Chest9Layout == rhs.Chest9Layout &&
		lhs.ChestMagic2Layout == rhs.ChestMagic2Layout &&
		lhs.ChestMagicLayout == rhs.ChestMagicLayout &&
		lhs.CookingIngredientsLayout == rhs.CookingIngredientsLayout &&
		lhs.FishBaitBoxLayout == rhs.FishBaitBoxLayout &&
		lhs.FishPlatformLayout == rhs.FishPlatformLayout &&
		lhs.FoodUnitLayout == rhs.FoodUnitLayout &&
		lhs.FreighterCargoLayout == rhs.FreighterCargoLayout &&
		lhs.FreighterLayout == rhs.FreighterLayout &&
		lhs.RocketLockerLayout == rhs.RocketLockerLayout &&
		lhs.ShipLayout == rhs.ShipLayout &&
		lhs.WeaponLayout == rhs.WeaponLayout &&
		lhs.BannerTitleId == rhs.BannerTitleId &&
		lhs.BaseBuildingObjects == rhs.BaseBuildingObjects &&
		lhs.CurrentFreighterHomeSystemSeed == rhs.CurrentFreighterHomeSystemSeed &&
		lhs.CurrentMissionID == rhs.CurrentMissionID &&
		lhs.ExpeditionSeedsSelectedToday == rhs.ExpeditionSeedsSelectedToday &&
		lhs.FleetExpeditions == rhs.FleetExpeditions &&
		lhs.FleetFrigates == rhs.FleetFrigates &&
		lhs.FleetSeed == rhs.FleetSeed &&
		lhs.FoodUnitItem == rhs.FoodUnitItem &&
		lhs.FreighterEngineEffect == rhs.FreighterEngineEffect &&
		lhs.GalaxyWaypoints == rhs.GalaxyWaypoints &&
		lhs.InteractionProgressTable == rhs.InteractionProgressTable &&
		lhs.JetpackEffect == rhs.JetpackEffect &&
		lhs.KnownProducts == rhs.KnownProducts &&
		lhs.KnownRefinerRecipes == rhs.KnownRefinerRecipes &&
		lhs.KnownSpecials == rhs.KnownSpecials &&
		lhs.KnownTech == rhs.KnownTech &&
		lhs.KnownWordGroups == rhs.KnownWordGroups &&
		lhs.KnownWords == rhs.KnownWords &&
		lhs.LastPortal == rhs.LastPortal &&
		lhs.MaintenanceInteractions == rhs.MaintenanceInteractions &&
		lhs.MarkerStack == rhs.MarkerStack &&
		lhs.MissionProgress == rhs.MissionProgress &&
		lhs.MissionRecurrences == rhs.MissionRecurrences &&
		lhs.NewMPMarkerStack == rhs.NewMPMarkerStack &&
		lhs.PersistentPlayerBases == rhs.PersistentPlayerBases &&
		lhs.PersonalMaintenanceInteractions == rhs.PersonalMaintenanceInteractions &&
		lhs.PreviousMissionID == rhs.PreviousMissionID &&
		lhs.RedeemedPlatformRewards == rhs.RedeemedPlatformRewards &&
		lhs.RedeemedSeasonRewards == rhs.RedeemedSeasonRewards &&
		lhs.RedeemedTwitchRewards == rhs.RedeemedTwitchRewards &&
		lhs.RefinerBufferData == rhs.RefinerBufferData &&
		lhs.RefinerBufferKeys == rhs.RefinerBufferKeys &&
		lhs.RepairTechBuffer == rhs.RepairTechBuffer &&
		lhs.SavedInteractionDialogTable == rhs.SavedInteractionDialogTable &&
		lhs.SeenBaseBuildingObjects == rhs.SeenBaseBuildingObjects &&
		lhs.SettlementLocalSaveData == rhs.SettlementLocalSaveData &&
		lhs.Stats == rhs.Stats &&
		lhs.SurveyedEventPositions == rhs.SurveyedEventPositions &&
		lhs.TelemetryStats == rhs.TelemetryStats &&
		lhs.TeleportEndpoints == rhs.TeleportEndpoints &&
		lhs.TradingSupplyData == rhs.TradingSupplyData &&
		lhs.UsedEntitlements == rhs.UsedEntitlements &&
		lhs.VisitedAtlasStationsData == rhs.VisitedAtlasStationsData &&
		lhs.VisitedSystems == rhs.VisitedSystems &&
		lhs.WristScreenData == rhs.WristScreenData &&
		lhs.ActiveSpaceBattleUA == rhs.ActiveSpaceBattleUA &&
		lhs.CurrentMissionSeed == rhs.CurrentMissionSeed &&
		lhs.FirstPurpleSystemUA == rhs.FirstPurpleSystemUA &&
		lhs.FreighterLastSpawnTime == rhs.FreighterLastSpawnTime &&
		lhs.HazardTimeAlive == rhs.HazardTimeAlive &&
		lhs.LastCheckedForStatResetsTime == rhs.LastCheckedForStatResetsTime &&
		lhs.LastKnownDay == rhs.LastKnownDay &&
		lhs.LastUABeforePortalWarp == rhs.LastUABeforePortalWarp &&
		lhs.MiniStationUA == rhs.MiniStationUA &&
		lhs.MultiplayerLobbyID == rhs.MultiplayerLobbyID &&
		lhs.MultiplayerPrivileges == rhs.MultiplayerPrivileges &&
		lhs.PreviousMissionSeed == rhs.PreviousMissionSeed &&
		lhs.StoryPortalSeed == rhs.StoryPortalSeed &&
		lhs.SunTimer == rhs.SunTimer &&
		lhs.TaggedPlanetUA == rhs.TaggedPlanetUA &&
		lhs.TimeAlive == rhs.TimeAlive &&
		lhs.TimeLastMiniStation == rhs.TimeLastMiniStation &&
		lhs.TimeLastSpaceBattle == rhs.TimeLastSpaceBattle &&
		lhs.TimeStamp == rhs.TimeStamp &&
		std::equal(std::begin(lhs.SavedInteractionIndicies), std::end(lhs.SavedInteractionIndicies), std::begin(rhs.SavedInteractionIndicies)) &&
		std::equal(std::begin(lhs.WonderCustomRecordsExtraData), std::end(lhs.WonderCustomRecordsExtraData), std::begin(rhs.WonderCustomRecordsExtraData)) &&
		std::equal(std::begin(lhs.CompletedAtlasAddresses), std::end(lhs.CompletedAtlasAddresses), std::begin(rhs.CompletedAtlasAddresses)) &&
		std::equal(std::begin(lhs.NewAtlasStationAdressData), std::end(lhs.NewAtlasStationAdressData), std::begin(rhs.NewAtlasStationAdressData)) &&
		std::equal(std::begin(lhs.AtlasStationAdressData), std::end(lhs.AtlasStationAdressData), std::begin(rhs.AtlasStationAdressData)) &&
		lhs.DifficultyState == rhs.DifficultyState &&
		std::equal(std::begin(lhs.Hazard), std::end(lhs.Hazard), std::begin(rhs.Hazard)) &&
		lhs.FreighterUniverseAddress == rhs.FreighterUniverseAddress &&
		lhs.GameStartAddress1 == rhs.GameStartAddress1 &&
		lhs.GameStartAddress2 == rhs.GameStartAddress2 &&
		lhs.GraveUniverseAddress == rhs.GraveUniverseAddress &&
		lhs.MultiplayerUA == rhs.MultiplayerUA &&
		lhs.NexusUniverseAddress == rhs.NexusUniverseAddress &&
		lhs.PreviousUniverseAddress == rhs.PreviousUniverseAddress &&
		lhs.UniverseAddress == rhs.UniverseAddress &&
		lhs.ActiveMultioolIndex == rhs.ActiveMultioolIndex &&
		lhs.ActiveSpaceBattleLevel == rhs.ActiveSpaceBattleLevel &&
		lhs.BannerBackgroundColour == rhs.BannerBackgroundColour &&
		lhs.BannerIcon == rhs.BannerIcon &&
		lhs.BannerMainColour == rhs.BannerMainColour &&
		lhs.BoltAmmo == rhs.BoltAmmo &&
		lhs.Energy == rhs.Energy &&
		lhs.FoodUnitAccumulator == rhs.FoodUnitAccumulator &&
		lhs.Health == rhs.Health &&
		lhs.HomeRealityIteration == rhs.HomeRealityIteration &&
		lhs.KnownPortalRunes == rhs.KnownPortalRunes &&
		lhs.LaserAmmo == rhs.LaserAmmo &&
		lhs.MissionVersion == rhs.MissionVersion &&
		lhs.Nanites == rhs.Nanites &&
		lhs.NextSurveyedEventPositionIndex == rhs.NextSurveyedEventPositionIndex &&
		lhs.PostMissionIndex == rhs.PostMissionIndex &&
		lhs.PrimaryPlanet == rhs.PrimaryPlanet &&
		lhs.PrimaryShip == rhs.PrimaryShip &&
		lhs.PrimaryVehicle == rhs.PrimaryVehicle &&
		lhs.ProcTechIndex == rhs.ProcTechIndex &&
		lhs.ProgressionLevel == rhs.ProgressionLevel &&
		lhs.PulseAmmo == rhs.PulseAmmo &&
		lhs.ScatterAmmo == rhs.ScatterAmmo &&
		lhs.SettlementStateRingBufferIndexV2 == rhs.SettlementStateRingBufferIndexV2 &&
		lhs.Shield == rhs.Shield &&
		lhs.ShipHealth == rhs.ShipHealth &&
		lhs.ShipShield == rhs.ShipShield &&
		lhs.Specials == rhs.Specials &&
		lhs.StartingPrimaryWeapon == rhs.StartingPrimaryWeapon &&
		lhs.StartingSeasonNumber == rhs.StartingSeasonNumber &&
		lhs.StartingSecondaryWeapon == rhs.StartingSecondaryWeapon &&
		lhs.TelemetryUploadVersion == rhs.TelemetryUploadVersion &&
		lhs.TradingSupplyDataIndex == rhs.TradingSupplyDataIndex &&
		lhs.Units == rhs.Units &&
		lhs.VRCameraOffset == rhs.VRCameraOffset &&
		lhs.WarpsLastMiniStation == rhs.WarpsLastMiniStation &&
		lhs.WarpsLastSpaceBattle == rhs.WarpsLastSpaceBattle &&
		lhs.ShopNumber == rhs.ShopNumber &&
		lhs.ShopTier == rhs.ShopTier &&
		lhs.SaveSummary == rhs.SaveSummary &&
		lhs.PlayerFreighterName == rhs.PlayerFreighterName &&
		std::equal(std::begin(lhs.UnlockedPetSlots), std::end(lhs.UnlockedPetSlots), std::begin(rhs.UnlockedPetSlots)) &&
		std::equal(std::begin(lhs.GalacticMapRequests), std::end(lhs.GalacticMapRequests), std::begin(rhs.GalacticMapRequests)) &&
		std::equal(std::begin(lhs.ShipUsesLegacyColours), std::end(lhs.ShipUsesLegacyColours), std::begin(rhs.ShipUsesLegacyColours)) &&
		std::equal(std::begin(lhs.SquadronUnlockedPilotSlots), std::end(lhs.SquadronUnlockedPilotSlots), std::begin(rhs.SquadronUnlockedPilotSlots)) &&
		lhs.BuildersKnown == rhs.BuildersKnown &&
		lhs.FirstAtlasStationDiscovered == rhs.FirstAtlasStationDiscovered &&
		lhs.FreighterDismissed == rhs.FreighterDismissed &&
		lhs.HasAccessToNexus == rhs.HasAccessToNexus &&
		lhs.HasDiscoveredPurpleSystems == rhs.HasDiscoveredPurpleSystems &&
		lhs.HasGalacticMapRequestAllPurples == rhs.HasGalacticMapRequestAllPurples &&
		lhs.HasGalacticMapRequestFirstPurple == rhs.HasGalacticMapRequestFirstPurple &&
		lhs.IsNew == rhs.IsNew &&
		lhs.MultiShipEnabled == rhs.MultiShipEnabled &&
		lhs.NextLoadSpawnsWithFreshStart == rhs.NextLoadSpawnsWithFreshStart &&
		lhs.OnOtherSideOfPortal == rhs.OnOtherSideOfPortal &&
		lhs.RestartAllInactiveSeasonalMissions == rhs.RestartAllInactiveSeasonalMissions &&
		lhs.RevealBlackHoles == rhs.RevealBlackHoles &&
		lhs.ShipNeedsTerrainPositioning == rhs.ShipNeedsTerrainPositioning &&
		lhs.SpaceGrave == rhs.SpaceGrave &&
		lhs.SpawnGrave == rhs.SpawnGrave &&
		lhs.UseSmallerBlackholeJumps == rhs.UseSmallerBlackholeJumps &&
		lhs.VehicleAIControlEnabled == rhs.VehicleAIControlEnabled;
	}
};

//Dependency: GcPlayerStateData
//Dependency: GcPlayerSpawnStateData
struct GcDefaultSaveData
{
	NMS_GameComponents::GcPlayerStateData State;
	NMS_GameComponents::GcPlayerSpawnStateData Spawn;

	friend bool operator==(const GcDefaultSaveData& lhs, const GcDefaultSaveData& rhs) 
	{
		return lhs.State == rhs.State &&
		lhs.Spawn == rhs.Spawn;
	}
};

//Dependency: NMSString0x80
struct GcDeprecatedAssetsTable
{
	std::vector<NMS::NMSString0x80> Table;

	friend bool operator==(const GcDeprecatedAssetsTable& lhs, const GcDeprecatedAssetsTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcRealitySubstanceCategory
//Dependency: NMSString0x10
//Dependency: GcRarity
struct GcSubstanceAmount
{
	NMS::NMSString0x10 Specific;
	NMS::NMSString0x10 SpecificSecondary;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	NMS_GameComponents::GcRarity Rarity;

	friend bool operator==(const GcSubstanceAmount& lhs, const GcSubstanceAmount& rhs) 
	{
		return lhs.Specific == rhs.Specific &&
		lhs.SpecificSecondary == rhs.SpecificSecondary &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Category == rhs.Category &&
		lhs.Rarity == rhs.Rarity;
	}
};

struct GcStatsEnum
{
	enum class StatEnumEnum : uint32_t
	{
		None = 0,
		DEPOTS_BROKEN = 1,
		FPODS_BROKEN = 2,
		PLANTS_PLANTED = 3,
		SALVAGE_LOOTED = 4,
		TREASURE_FOUND = 5,
		QUADS_KILLED = 6,
		WALKERS_KILLED = 7,
		FLORA_KILLED = 8,
		PLANTS_GATHERED = 9,
		BONES_FOUND = 10,
		C_SENT_KILLS = 11,
		STORM_CRYSTALS = 12,
		BURIED_PROPS = 13,
		MINIWORM_KILL = 14,
		POOP_COLLECTED = 15,
		GRAVBALLS = 16,
		EGG_PODS = 17,
		CORRUPT_PILLAR = 18,
		DRONE_SHARDS = 19,
		MECHS_KILLED = 20,
		SPIDERS_KILLED = 21,
		SM_SPIDER_KILLS = 22,
		SEAGLASS = 23,
		RUINS_LOOTED = 24,
		STONE_KILLS = 25,
	};

	NMS_GameComponents::GcStatsEnum::StatEnumEnum StatEnum;

	friend bool operator==(const GcStatsEnum& lhs, const GcStatsEnum& rhs) 
	{
		return lhs.StatEnum == rhs.StatEnum;
	}
};

//Dependency: TkModelResource
struct GcLootProbability
{
	NMS_Toolkit::TkModelResource LootModel;
	float Probability;

	friend bool operator==(const GcLootProbability& lhs, const GcLootProbability& rhs) 
	{
		return lhs.LootModel == rhs.LootModel &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: GcSubstanceAmount
//Dependency: GcStatsEnum
//Dependency: GcLootProbability
//Dependency: GcRewardMissionOverride
//Dependency: GcFiendCrime
//Dependency: TkModelResource
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcDestructableComponentData
{
	NMS::NMSString0x10 RarityLocators[3];
	NMS_Toolkit::TkModelResource DestroyedModel;
	NMS::NMSString0x20A OverrideRewardLoc;
	NMS::NMSString0x10 AreaDamage;
	NMS::NMSString0x10 DestroyedModelSpawnNode;
	NMS::NMSString0x10 DestroyEffect;
	NMS::NMSString0x10 DestroyEffectPoint;
	NMS::NMSString0x10 Explosion;
	NMS::NMSString0x10 GivesReward;
	std::vector<NMS_GameComponents::GcSubstanceAmount> GivesSubstances;
	std::vector<NMS_GameComponents::GcLootProbability> LootItems;
	NMS::NMSString0x10 LootReward;
	NMS::NMSString0x10 PirateSystemAltReward;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 UnderwaterExplosion;
	NMS::NMSString0x10 VehicleDestroyEffect;
	int32_t StandingChangeOnDeath[10];
	float DestroyEffectTime;
	float DestroyForce;
	float DestroyForceRadius;
	float ExplosionScale;
	int32_t IncreaseCorruptSentinelWanted;
	NMS_GameComponents::GcFiendCrime IncreaseFiendCrime;
	float IncreaseFiendWantedChance;
	int32_t IncreaseWanted;
	int32_t LootRewardAmountMax;
	int32_t LootRewardAmountMin;
	int32_t OverrideChipAmount;
	float ShowInteractRange;
	NMS_GameComponents::GcStatsEnum StatToTrack;
	float UnderwaterExplosionScale;
	bool ActivateLocatorsFromRarity;
	bool BlockDestructionIfRewardFails;
	bool CanDestroyFromStoredInteraction;
	bool DamagesParentWhenDestroyed;
	bool DestroyedModelCollidesWithEverything;
	bool DestroyedModelUsesScale;
	bool DestroyEffectMatrices;
	bool DestroyEffectOnSurface;
	bool ExplosionScaleToBounds;
	bool GrenadeSingleHit;
	bool HideInteractWhenAllArmourDestroyed;
	bool HideInteractWhenShielded;
	bool HideModel;
	bool HideReward;
	bool IncreaseFiendWanted;
	bool NoConsequencesDuringPirateBattle;
	bool NotifyEncounter;
	bool OnlyExplodeSelf;
	bool RemoveModel;
	bool RewardIfDestroyedByOther;
	bool ShowInteract;
	bool UseSystemColorsForTexture;

	friend bool operator==(const GcDestructableComponentData& lhs, const GcDestructableComponentData& rhs) 
	{
		return std::equal(std::begin(lhs.RarityLocators), std::end(lhs.RarityLocators), std::begin(rhs.RarityLocators)) &&
		lhs.DestroyedModel == rhs.DestroyedModel &&
		lhs.OverrideRewardLoc == rhs.OverrideRewardLoc &&
		lhs.AreaDamage == rhs.AreaDamage &&
		lhs.DestroyedModelSpawnNode == rhs.DestroyedModelSpawnNode &&
		lhs.DestroyEffect == rhs.DestroyEffect &&
		lhs.DestroyEffectPoint == rhs.DestroyEffectPoint &&
		lhs.Explosion == rhs.Explosion &&
		lhs.GivesReward == rhs.GivesReward &&
		lhs.GivesSubstances == rhs.GivesSubstances &&
		lhs.LootItems == rhs.LootItems &&
		lhs.LootReward == rhs.LootReward &&
		lhs.PirateSystemAltReward == rhs.PirateSystemAltReward &&
		lhs.RewardOverrideTable == rhs.RewardOverrideTable &&
		lhs.TriggerAction == rhs.TriggerAction &&
		lhs.UnderwaterExplosion == rhs.UnderwaterExplosion &&
		lhs.VehicleDestroyEffect == rhs.VehicleDestroyEffect &&
		std::equal(std::begin(lhs.StandingChangeOnDeath), std::end(lhs.StandingChangeOnDeath), std::begin(rhs.StandingChangeOnDeath)) &&
		lhs.DestroyEffectTime == rhs.DestroyEffectTime &&
		lhs.DestroyForce == rhs.DestroyForce &&
		lhs.DestroyForceRadius == rhs.DestroyForceRadius &&
		lhs.ExplosionScale == rhs.ExplosionScale &&
		lhs.IncreaseCorruptSentinelWanted == rhs.IncreaseCorruptSentinelWanted &&
		lhs.IncreaseFiendCrime == rhs.IncreaseFiendCrime &&
		lhs.IncreaseFiendWantedChance == rhs.IncreaseFiendWantedChance &&
		lhs.IncreaseWanted == rhs.IncreaseWanted &&
		lhs.LootRewardAmountMax == rhs.LootRewardAmountMax &&
		lhs.LootRewardAmountMin == rhs.LootRewardAmountMin &&
		lhs.OverrideChipAmount == rhs.OverrideChipAmount &&
		lhs.ShowInteractRange == rhs.ShowInteractRange &&
		lhs.StatToTrack == rhs.StatToTrack &&
		lhs.UnderwaterExplosionScale == rhs.UnderwaterExplosionScale &&
		lhs.ActivateLocatorsFromRarity == rhs.ActivateLocatorsFromRarity &&
		lhs.BlockDestructionIfRewardFails == rhs.BlockDestructionIfRewardFails &&
		lhs.CanDestroyFromStoredInteraction == rhs.CanDestroyFromStoredInteraction &&
		lhs.DamagesParentWhenDestroyed == rhs.DamagesParentWhenDestroyed &&
		lhs.DestroyedModelCollidesWithEverything == rhs.DestroyedModelCollidesWithEverything &&
		lhs.DestroyedModelUsesScale == rhs.DestroyedModelUsesScale &&
		lhs.DestroyEffectMatrices == rhs.DestroyEffectMatrices &&
		lhs.DestroyEffectOnSurface == rhs.DestroyEffectOnSurface &&
		lhs.ExplosionScaleToBounds == rhs.ExplosionScaleToBounds &&
		lhs.GrenadeSingleHit == rhs.GrenadeSingleHit &&
		lhs.HideInteractWhenAllArmourDestroyed == rhs.HideInteractWhenAllArmourDestroyed &&
		lhs.HideInteractWhenShielded == rhs.HideInteractWhenShielded &&
		lhs.HideModel == rhs.HideModel &&
		lhs.HideReward == rhs.HideReward &&
		lhs.IncreaseFiendWanted == rhs.IncreaseFiendWanted &&
		lhs.NoConsequencesDuringPirateBattle == rhs.NoConsequencesDuringPirateBattle &&
		lhs.NotifyEncounter == rhs.NotifyEncounter &&
		lhs.OnlyExplodeSelf == rhs.OnlyExplodeSelf &&
		lhs.RemoveModel == rhs.RemoveModel &&
		lhs.RewardIfDestroyedByOther == rhs.RewardIfDestroyedByOther &&
		lhs.ShowInteract == rhs.ShowInteract &&
		lhs.UseSystemColorsForTexture == rhs.UseSystemColorsForTexture;
	}
};

struct GcScannerBuildingIconTypes
{
	enum class ScanBuildingIconTypeEnum : uint32_t
	{
		None = 0,
		Generic = 1,
		Shelter = 2,
		Relic = 3,
		Factory = 4,
		Unknown = 5,
		Distress = 6,
		Beacon = 7,
		Waypoint = 8,
		SpaceStation = 9,
		TechResource = 10,
		FuelResource = 11,
		MineralResource = 12,
		SpaceAnomaly = 13,
		SpaceAtlas = 14,
		ExternalBase = 15,
		PlanetBaseTerminal = 16,
		Nexus = 17,
		AbandonedFreighter = 18,
		Telescope = 19,
		Outpost = 20,
		UpgradePod = 21,
		Cog = 22,
		Ruins = 23,
		Portal = 24,
		Library = 25,
		Abandoned = 26,
		SmallBuilding = 27,
		StoryGlitch = 28,
		GraveInCave = 29,
		HoloHub = 30,
		Settlement = 31,
		DroneHive = 32,
		SentinelDistress = 33,
		AbandonedRobotCamp = 34,
	};

	NMS_GameComponents::GcScannerBuildingIconTypes::ScanBuildingIconTypeEnum ScanBuildingIconType;

	friend bool operator==(const GcScannerBuildingIconTypes& lhs, const GcScannerBuildingIconTypes& rhs) 
	{
		return lhs.ScanBuildingIconType == rhs.ScanBuildingIconType;
	}
};

//Dependency: GcDifficultySettingEditability
//Dependency: GcDifficultySettingType
//Dependency: NMSString0x20A
struct GcDifficultySettingCommonData
{
	NMS::NMSString0x20A DescriptionLocID;
	NMS::NMSString0x20A TitleLocID;
	NMS::NMSString0x20A ToggleDisabledLocID;
	NMS::NMSString0x20A ToggleEnabledLocID;
	NMS_GameComponents::GcDifficultySettingEditability EditabilityInOptionsMenu;
	NMS_GameComponents::GcDifficultySettingType SettingType;
	bool IsAscendingDifficulty;

	friend bool operator==(const GcDifficultySettingCommonData& lhs, const GcDifficultySettingCommonData& rhs) 
	{
		return lhs.DescriptionLocID == rhs.DescriptionLocID &&
		lhs.TitleLocID == rhs.TitleLocID &&
		lhs.ToggleDisabledLocID == rhs.ToggleDisabledLocID &&
		lhs.ToggleEnabledLocID == rhs.ToggleEnabledLocID &&
		lhs.EditabilityInOptionsMenu == rhs.EditabilityInOptionsMenu &&
		lhs.SettingType == rhs.SettingType &&
		lhs.IsAscendingDifficulty == rhs.IsAscendingDifficulty;
	}
};

//Dependency: GcDifficultyFuelUseTechOverride
struct GcDifficultyFuelUseOptionData
{
	std::vector<NMS_GameComponents::GcDifficultyFuelUseTechOverride> TechOverrides;
	float Multiplier;

	friend bool operator==(const GcDifficultyFuelUseOptionData& lhs, const GcDifficultyFuelUseOptionData& rhs) 
	{
		return lhs.TechOverrides == rhs.TechOverrides &&
		lhs.Multiplier == rhs.Multiplier;
	}
};

//Dependency: GcDifficultySettingsData
//Dependency: GcItemShopAvailabilityDifficultyOptionData
//Dependency: GcDifficultySettingCommonData
//Dependency: GcDifficultyStartWithAllItemsKnownOptionData
//Dependency: GcDifficultyFuelUseOptionData
//Dependency: GcDifficultyOptionUIGroup
//Dependency: GcDifficultyInventoryStackSizeOptionData
//Dependency: GcDifficultyCurrencyCostOptionData
//Dependency: NMSString0x20A
struct GcDifficultyConfig
{
	NMS_GameComponents::GcDifficultySettingCommonData CommonSettingsData[30];
	NMS_GameComponents::GcDifficultyStartWithAllItemsKnownOptionData StartWithAllItemsKnownDisabledData;
	NMS_GameComponents::GcDifficultyStartWithAllItemsKnownOptionData StartWithAllItemsKnownEnabledData;
	NMS::NMSString0x20A PresetOptionLocIds[7];
	NMS_GameComponents::GcDifficultyOptionUIGroup UILayout[4];
	NMS::NMSString0x20A ActiveSurvivalBarsOptionLocIds[4];
	NMS::NMSString0x20A ChargingRequirementsOptionLocIds[4];
	NMS::NMSString0x20A CurrencyCostOptionLocIds[4];
	NMS::NMSString0x20A DamageReceivedOptionLocIds[4];
	NMS::NMSString0x20A DeathConsequencesOptionLocIds[4];
	NMS::NMSString0x20A FishingOptionLocIds[4];
	NMS::NMSString0x20A FuelUseOptionLocIds[4];
	NMS::NMSString0x20A GroundCombatOptionLocIds[4];
	NMS::NMSString0x20A LaunchFuelCostOptionLocIds[4];
	NMS::NMSString0x20A ReputationGainOptionLocIds[4];
	NMS::NMSString0x20A ScannerRechargeOptionLocIds[4];
	NMS::NMSString0x20A SpaceCombatOptionLocIds[4];
	NMS::NMSString0x20A BreakTechOnDamageOptionLocIds[3];
	NMS::NMSString0x20A CreatureHostilityOptionLocIds[3];
	NMS::NMSString0x20A DamageGivenOptionLocIds[3];
	NMS::NMSString0x20A EnergyDrainOptionLocIds[3];
	NMS_GameComponents::GcDifficultyFuelUseOptionData FuelUseOptionData[4];
	NMS::NMSString0x20A HazardDrainOptionLocIds[3];
	NMS::NMSString0x20A InventoryStackLimitsOptionLocIds[3];
	NMS::NMSString0x20A ItemShopAvailabilityOptionLocIds[3];
	NMS::NMSString0x20A SprintingOptionLocIds[3];
	NMS::NMSString0x20A SubstanceCollectionOptionLocIds[3];
	NMS::NMSString0x20A NPCPopulationOptionLocIds[2];
	NMS_GameComponents::GcItemShopAvailabilityDifficultyOptionData ItemShopAvailabilityOptionData[3];
	NMS::NMSString0x20A PresetLocId;
	NMS_GameComponents::GcDifficultySettingsData Presets[7];
	NMS_GameComponents::GcDifficultyInventoryStackSizeOptionData InventoryStackLimitsOptionData[3];
	NMS_GameComponents::GcDifficultyCurrencyCostOptionData CurrencyCostOptionData[4];
	NMS_GameComponents::GcDifficultySettingsData PermadeathMinSettings;
	float ChargingRequirementsMultipliers[4];
	int32_t DamageReceivedAIMechTechDamageHits[4];
	float DamageReceivedMultipliers[4];
	float FishingCatchWindowMultipliers[4];
	float GroundCombatMultipliers[4];
	float LaunchFuelCostMultipliers[4];
	float ReputationGainMultipliers[4];
	float ScannerRechargeMultipliers[4];
	float SentinelTimeOutMultipliers[4];
	float ShipSummoningFuelCostMultipliers[4];
	float SpaceCombatDifficultyMultipliers[4];
	float SpaceCombatMultipliers[4];
	float BreakTechOnDamageMultipliers[3];
	float DamageGivenMultipliers[3];
	float EnergyDrainMultipliers[3];
	float HazardDrainMultipliers[3];
	float SprintingCostMultipliers[3];
	int32_t SubstanceCollectionLaserAmount[3];
	float SubstanceCollectionMultipliers[3];
	int32_t AllSlotsUnlockedStartingShipSlots;
	int32_t AllSlotsUnlockedStartingShipTechSlots;
	int32_t AllSlotsUnlockedStartingSuitSlots;
	int32_t AllSlotsUnlockedStartingSuitTechSlots;
	int32_t AllSlotsUnlockedStartingWeaponSlots;

	friend bool operator==(const GcDifficultyConfig& lhs, const GcDifficultyConfig& rhs) 
	{
		return std::equal(std::begin(lhs.CommonSettingsData), std::end(lhs.CommonSettingsData), std::begin(rhs.CommonSettingsData)) &&
		lhs.StartWithAllItemsKnownDisabledData == rhs.StartWithAllItemsKnownDisabledData &&
		lhs.StartWithAllItemsKnownEnabledData == rhs.StartWithAllItemsKnownEnabledData &&
		std::equal(std::begin(lhs.PresetOptionLocIds), std::end(lhs.PresetOptionLocIds), std::begin(rhs.PresetOptionLocIds)) &&
		std::equal(std::begin(lhs.UILayout), std::end(lhs.UILayout), std::begin(rhs.UILayout)) &&
		std::equal(std::begin(lhs.ActiveSurvivalBarsOptionLocIds), std::end(lhs.ActiveSurvivalBarsOptionLocIds), std::begin(rhs.ActiveSurvivalBarsOptionLocIds)) &&
		std::equal(std::begin(lhs.ChargingRequirementsOptionLocIds), std::end(lhs.ChargingRequirementsOptionLocIds), std::begin(rhs.ChargingRequirementsOptionLocIds)) &&
		std::equal(std::begin(lhs.CurrencyCostOptionLocIds), std::end(lhs.CurrencyCostOptionLocIds), std::begin(rhs.CurrencyCostOptionLocIds)) &&
		std::equal(std::begin(lhs.DamageReceivedOptionLocIds), std::end(lhs.DamageReceivedOptionLocIds), std::begin(rhs.DamageReceivedOptionLocIds)) &&
		std::equal(std::begin(lhs.DeathConsequencesOptionLocIds), std::end(lhs.DeathConsequencesOptionLocIds), std::begin(rhs.DeathConsequencesOptionLocIds)) &&
		std::equal(std::begin(lhs.FishingOptionLocIds), std::end(lhs.FishingOptionLocIds), std::begin(rhs.FishingOptionLocIds)) &&
		std::equal(std::begin(lhs.FuelUseOptionLocIds), std::end(lhs.FuelUseOptionLocIds), std::begin(rhs.FuelUseOptionLocIds)) &&
		std::equal(std::begin(lhs.GroundCombatOptionLocIds), std::end(lhs.GroundCombatOptionLocIds), std::begin(rhs.GroundCombatOptionLocIds)) &&
		std::equal(std::begin(lhs.LaunchFuelCostOptionLocIds), std::end(lhs.LaunchFuelCostOptionLocIds), std::begin(rhs.LaunchFuelCostOptionLocIds)) &&
		std::equal(std::begin(lhs.ReputationGainOptionLocIds), std::end(lhs.ReputationGainOptionLocIds), std::begin(rhs.ReputationGainOptionLocIds)) &&
		std::equal(std::begin(lhs.ScannerRechargeOptionLocIds), std::end(lhs.ScannerRechargeOptionLocIds), std::begin(rhs.ScannerRechargeOptionLocIds)) &&
		std::equal(std::begin(lhs.SpaceCombatOptionLocIds), std::end(lhs.SpaceCombatOptionLocIds), std::begin(rhs.SpaceCombatOptionLocIds)) &&
		std::equal(std::begin(lhs.BreakTechOnDamageOptionLocIds), std::end(lhs.BreakTechOnDamageOptionLocIds), std::begin(rhs.BreakTechOnDamageOptionLocIds)) &&
		std::equal(std::begin(lhs.CreatureHostilityOptionLocIds), std::end(lhs.CreatureHostilityOptionLocIds), std::begin(rhs.CreatureHostilityOptionLocIds)) &&
		std::equal(std::begin(lhs.DamageGivenOptionLocIds), std::end(lhs.DamageGivenOptionLocIds), std::begin(rhs.DamageGivenOptionLocIds)) &&
		std::equal(std::begin(lhs.EnergyDrainOptionLocIds), std::end(lhs.EnergyDrainOptionLocIds), std::begin(rhs.EnergyDrainOptionLocIds)) &&
		std::equal(std::begin(lhs.FuelUseOptionData), std::end(lhs.FuelUseOptionData), std::begin(rhs.FuelUseOptionData)) &&
		std::equal(std::begin(lhs.HazardDrainOptionLocIds), std::end(lhs.HazardDrainOptionLocIds), std::begin(rhs.HazardDrainOptionLocIds)) &&
		std::equal(std::begin(lhs.InventoryStackLimitsOptionLocIds), std::end(lhs.InventoryStackLimitsOptionLocIds), std::begin(rhs.InventoryStackLimitsOptionLocIds)) &&
		std::equal(std::begin(lhs.ItemShopAvailabilityOptionLocIds), std::end(lhs.ItemShopAvailabilityOptionLocIds), std::begin(rhs.ItemShopAvailabilityOptionLocIds)) &&
		std::equal(std::begin(lhs.SprintingOptionLocIds), std::end(lhs.SprintingOptionLocIds), std::begin(rhs.SprintingOptionLocIds)) &&
		std::equal(std::begin(lhs.SubstanceCollectionOptionLocIds), std::end(lhs.SubstanceCollectionOptionLocIds), std::begin(rhs.SubstanceCollectionOptionLocIds)) &&
		std::equal(std::begin(lhs.NPCPopulationOptionLocIds), std::end(lhs.NPCPopulationOptionLocIds), std::begin(rhs.NPCPopulationOptionLocIds)) &&
		std::equal(std::begin(lhs.ItemShopAvailabilityOptionData), std::end(lhs.ItemShopAvailabilityOptionData), std::begin(rhs.ItemShopAvailabilityOptionData)) &&
		lhs.PresetLocId == rhs.PresetLocId &&
		std::equal(std::begin(lhs.Presets), std::end(lhs.Presets), std::begin(rhs.Presets)) &&
		std::equal(std::begin(lhs.InventoryStackLimitsOptionData), std::end(lhs.InventoryStackLimitsOptionData), std::begin(rhs.InventoryStackLimitsOptionData)) &&
		std::equal(std::begin(lhs.CurrencyCostOptionData), std::end(lhs.CurrencyCostOptionData), std::begin(rhs.CurrencyCostOptionData)) &&
		lhs.PermadeathMinSettings == rhs.PermadeathMinSettings &&
		std::equal(std::begin(lhs.ChargingRequirementsMultipliers), std::end(lhs.ChargingRequirementsMultipliers), std::begin(rhs.ChargingRequirementsMultipliers)) &&
		std::equal(std::begin(lhs.DamageReceivedAIMechTechDamageHits), std::end(lhs.DamageReceivedAIMechTechDamageHits), std::begin(rhs.DamageReceivedAIMechTechDamageHits)) &&
		std::equal(std::begin(lhs.DamageReceivedMultipliers), std::end(lhs.DamageReceivedMultipliers), std::begin(rhs.DamageReceivedMultipliers)) &&
		std::equal(std::begin(lhs.FishingCatchWindowMultipliers), std::end(lhs.FishingCatchWindowMultipliers), std::begin(rhs.FishingCatchWindowMultipliers)) &&
		std::equal(std::begin(lhs.GroundCombatMultipliers), std::end(lhs.GroundCombatMultipliers), std::begin(rhs.GroundCombatMultipliers)) &&
		std::equal(std::begin(lhs.LaunchFuelCostMultipliers), std::end(lhs.LaunchFuelCostMultipliers), std::begin(rhs.LaunchFuelCostMultipliers)) &&
		std::equal(std::begin(lhs.ReputationGainMultipliers), std::end(lhs.ReputationGainMultipliers), std::begin(rhs.ReputationGainMultipliers)) &&
		std::equal(std::begin(lhs.ScannerRechargeMultipliers), std::end(lhs.ScannerRechargeMultipliers), std::begin(rhs.ScannerRechargeMultipliers)) &&
		std::equal(std::begin(lhs.SentinelTimeOutMultipliers), std::end(lhs.SentinelTimeOutMultipliers), std::begin(rhs.SentinelTimeOutMultipliers)) &&
		std::equal(std::begin(lhs.ShipSummoningFuelCostMultipliers), std::end(lhs.ShipSummoningFuelCostMultipliers), std::begin(rhs.ShipSummoningFuelCostMultipliers)) &&
		std::equal(std::begin(lhs.SpaceCombatDifficultyMultipliers), std::end(lhs.SpaceCombatDifficultyMultipliers), std::begin(rhs.SpaceCombatDifficultyMultipliers)) &&
		std::equal(std::begin(lhs.SpaceCombatMultipliers), std::end(lhs.SpaceCombatMultipliers), std::begin(rhs.SpaceCombatMultipliers)) &&
		std::equal(std::begin(lhs.BreakTechOnDamageMultipliers), std::end(lhs.BreakTechOnDamageMultipliers), std::begin(rhs.BreakTechOnDamageMultipliers)) &&
		std::equal(std::begin(lhs.DamageGivenMultipliers), std::end(lhs.DamageGivenMultipliers), std::begin(rhs.DamageGivenMultipliers)) &&
		std::equal(std::begin(lhs.EnergyDrainMultipliers), std::end(lhs.EnergyDrainMultipliers), std::begin(rhs.EnergyDrainMultipliers)) &&
		std::equal(std::begin(lhs.HazardDrainMultipliers), std::end(lhs.HazardDrainMultipliers), std::begin(rhs.HazardDrainMultipliers)) &&
		std::equal(std::begin(lhs.SprintingCostMultipliers), std::end(lhs.SprintingCostMultipliers), std::begin(rhs.SprintingCostMultipliers)) &&
		std::equal(std::begin(lhs.SubstanceCollectionLaserAmount), std::end(lhs.SubstanceCollectionLaserAmount), std::begin(rhs.SubstanceCollectionLaserAmount)) &&
		std::equal(std::begin(lhs.SubstanceCollectionMultipliers), std::end(lhs.SubstanceCollectionMultipliers), std::begin(rhs.SubstanceCollectionMultipliers)) &&
		lhs.AllSlotsUnlockedStartingShipSlots == rhs.AllSlotsUnlockedStartingShipSlots &&
		lhs.AllSlotsUnlockedStartingShipTechSlots == rhs.AllSlotsUnlockedStartingShipTechSlots &&
		lhs.AllSlotsUnlockedStartingSuitSlots == rhs.AllSlotsUnlockedStartingSuitSlots &&
		lhs.AllSlotsUnlockedStartingSuitTechSlots == rhs.AllSlotsUnlockedStartingSuitTechSlots &&
		lhs.AllSlotsUnlockedStartingWeaponSlots == rhs.AllSlotsUnlockedStartingWeaponSlots;
	}
};

//Dependency: NMSString0x20
struct GcInputActionMapping2
{
	NMS::NMSString0x20 Action;
	NMS::NMSString0x20 ActionSet;
	NMS::NMSString0x20 Axis;
	NMS::NMSString0x20 Button;

	friend bool operator==(const GcInputActionMapping2& lhs, const GcInputActionMapping2& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.ActionSet == rhs.ActionSet &&
		lhs.Axis == rhs.Axis &&
		lhs.Button == rhs.Button;
	}
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
struct GcMissionConditionHasLocalSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocation;
	int32_t Amount;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;

	friend bool operator==(const GcMissionConditionHasLocalSubstance& lhs, const GcMissionConditionHasLocalSubstance& rhs) 
	{
		return lhs.UseScanEventToDetermineLocation == rhs.UseScanEventToDetermineLocation &&
		lhs.Amount == rhs.Amount &&
		lhs.DefaultValueMultiplier == rhs.DefaultValueMultiplier &&
		lhs.LocalSubstanceType == rhs.LocalSubstanceType &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.UseDefaultValue == rhs.UseDefaultValue;
	}
};

struct GcDifficultyOptionGroups
{
	enum class DifficultyOptionGroupEnum : uint32_t
	{
		Survival = 0,
		Crafting = 1,
		Combat = 2,
		Ease = 3,
	};

	NMS_GameComponents::GcDifficultyOptionGroups::DifficultyOptionGroupEnum DifficultyOptionGroup;

	friend bool operator==(const GcDifficultyOptionGroups& lhs, const GcDifficultyOptionGroups& rhs) 
	{
		return lhs.DifficultyOptionGroup == rhs.DifficultyOptionGroup;
	}
};

//Dependency: GcBaseSearchFilter
struct GcMissionConditionBaseQuery
{
	NMS_GameComponents::GcBaseSearchFilter BaseSearchFilter;
	int32_t MaxBasesFound;
	int32_t MinBasesFound;
	float SearchDistanceLimit;
	bool TakeSpecificPartIdFromSeasonData;

	friend bool operator==(const GcMissionConditionBaseQuery& lhs, const GcMissionConditionBaseQuery& rhs) 
	{
		return lhs.BaseSearchFilter == rhs.BaseSearchFilter &&
		lhs.MaxBasesFound == rhs.MaxBasesFound &&
		lhs.MinBasesFound == rhs.MinBasesFound &&
		lhs.SearchDistanceLimit == rhs.SearchDistanceLimit &&
		lhs.TakeSpecificPartIdFromSeasonData == rhs.TakeSpecificPartIdFromSeasonData;
	}
};

struct GcFishableAreaComponentData
{
	float Radius;
	bool SourceFishBasedOnSettlementBuildingLevel;

	friend bool operator==(const GcFishableAreaComponentData& lhs, const GcFishableAreaComponentData& rhs) 
	{
		return lhs.Radius == rhs.Radius &&
		lhs.SourceFishBasedOnSettlementBuildingLevel == rhs.SourceFishBasedOnSettlementBuildingLevel;
	}
};

//Dependency: GcNGuiLayoutData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiPresetGraphic
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::VariableSizeString Image;
	NMS::NMSString0x10 PresetID;
	NMS_Toolkit::TkNGuiGraphicStyle Style;

	friend bool operator==(const GcNGuiPresetGraphic& lhs, const GcNGuiPresetGraphic& rhs) 
	{
		return lhs.Layout == rhs.Layout &&
		lhs.Image == rhs.Image &&
		lhs.PresetID == rhs.PresetID &&
		lhs.Style == rhs.Style;
	}
};

//Dependency: NMSString0x20A
struct GcDifficultySettingLocData
{
	NMS::NMSString0x20A DescriptionLocID;
	NMS::NMSString0x20A TitleLocID;

	friend bool operator==(const GcDifficultySettingLocData& lhs, const GcDifficultySettingLocData& rhs) 
	{
		return lhs.DescriptionLocID == rhs.DescriptionLocID &&
		lhs.TitleLocID == rhs.TitleLocID;
	}
};

struct GcPetActionMoodModifier
{
	float MoodModifiers[2];

	friend bool operator==(const GcPetActionMoodModifier& lhs, const GcPetActionMoodModifier& rhs) 
	{
		return std::equal(std::begin(lhs.MoodModifiers), std::end(lhs.MoodModifiers), std::begin(rhs.MoodModifiers));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: NMSString0x80
struct TkNGuiEditorStyleColour
{
	NMS::Colour Colour;
	NMS::NMSString0x80 Name;

	friend bool operator==(const TkNGuiEditorStyleColour& lhs, const TkNGuiEditorStyleColour& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcProductToCollect
//Dependency: VariableSizeString
struct GcMissionSequenceCollectMultiProducts
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	std::vector<NMS_GameComponents::GcProductToCollect> Products;
	bool SearchCookingIngredients;
	bool WaitForSelected;

	friend bool operator==(const GcMissionSequenceCollectMultiProducts& lhs, const GcMissionSequenceCollectMultiProducts& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Products == rhs.Products &&
		lhs.SearchCookingIngredients == rhs.SearchCookingIngredients &&
		lhs.WaitForSelected == rhs.WaitForSelected;
	}
};

struct GcVROverride_Text
{
	enum class VROverride_TextEnum : uint32_t
	{
		FontHeight = 0,
		FontIndex = 1,
	};

	float FloatValue;
	int32_t IntValue;
	NMS_GameComponents::GcVROverride_Text::VROverride_TextEnum VROverride_Text;

	friend bool operator==(const GcVROverride_Text& lhs, const GcVROverride_Text& rhs) 
	{
		return lhs.FloatValue == rhs.FloatValue &&
		lhs.IntValue == rhs.IntValue &&
		lhs.VROverride_Text == rhs.VROverride_Text;
	}
};

//Dependency: GcNGuiElementData
//Dependency: GcAccessibleOverride_Text
//Dependency: VariableSizeString
//Dependency: GcVROverride_Text
//Dependency: TkNGuiTextStyle
//Dependency: TkNGuiGraphicStyle
struct GcNGuiTextData
{
	NMS_GameComponents::GcNGuiElementData ElementData;
	std::vector<NMS_GameComponents::GcAccessibleOverride_Text> AccessibleOverrides;
	NMS::VariableSizeString Image;
	NMS::VariableSizeString Text;
	std::vector<NMS_GameComponents::GcVROverride_Text> VROverrides;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyle;
	NMS_Toolkit::TkNGuiTextStyle Style;
	float ForcedOffset;
	bool BlockSpecialStyles;
	bool ForcedAllowScroll;
	bool Special;

	friend bool operator==(const GcNGuiTextData& lhs, const GcNGuiTextData& rhs) 
	{
		return lhs.ElementData == rhs.ElementData &&
		lhs.AccessibleOverrides == rhs.AccessibleOverrides &&
		lhs.Image == rhs.Image &&
		lhs.Text == rhs.Text &&
		lhs.VROverrides == rhs.VROverrides &&
		lhs.GraphicStyle == rhs.GraphicStyle &&
		lhs.Style == rhs.Style &&
		lhs.ForcedOffset == rhs.ForcedOffset &&
		lhs.BlockSpecialStyles == rhs.BlockSpecialStyles &&
		lhs.ForcedAllowScroll == rhs.ForcedAllowScroll &&
		lhs.Special == rhs.Special;
	}
};

//Dependency: GcDifficultyPresetType
struct GcDifficultySettingsReplicatedState
{
	NMS_GameComponents::GcDifficultyPresetType EasiestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType HardestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType Preset;
	NMS_GameComponents::GcDifficultyPresetType RoundedDownPreset;
	bool IsLocked;
	bool IsPermadeath;

	friend bool operator==(const GcDifficultySettingsReplicatedState& lhs, const GcDifficultySettingsReplicatedState& rhs) 
	{
		return lhs.EasiestUsedPreset == rhs.EasiestUsedPreset &&
		lhs.HardestUsedPreset == rhs.HardestUsedPreset &&
		lhs.Preset == rhs.Preset &&
		lhs.RoundedDownPreset == rhs.RoundedDownPreset &&
		lhs.IsLocked == rhs.IsLocked &&
		lhs.IsPermadeath == rhs.IsPermadeath;
	}
};

struct GcMissionConditionPlanetAttackPiratesActive
{

	friend bool operator==(const GcMissionConditionPlanetAttackPiratesActive& lhs, const GcMissionConditionPlanetAttackPiratesActive& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcSentinelSpawnSequenceGroupList
{
	std::vector<NMS::NMSString0x10> CorruptSequences;
	std::vector<NMS::NMSString0x10> ExtremeSequences;
	std::vector<NMS::NMSString0x10> Sequences;

	friend bool operator==(const GcSentinelSpawnSequenceGroupList& lhs, const GcSentinelSpawnSequenceGroupList& rhs) 
	{
		return lhs.CorruptSequences == rhs.CorruptSequences &&
		lhs.ExtremeSequences == rhs.ExtremeSequences &&
		lhs.Sequences == rhs.Sequences;
	}
};

//Dependency: GcCreatureHealthData
//Dependency: GcDroneGun
//Dependency: GcPrimaryAxis
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcDroneComponentData
{
	NMS_GameComponents::GcCreatureHealthData Health;
	std::vector<NMS_GameComponents::GcDroneGun> Guns;
	NMS::NMSString0x10 Id;
	std::vector<NMS::NMSString0x10> ProjectileChoices;
	NMS_GameComponents::GcPrimaryAxis Axis;
	float HeadLookIdleTime;
	float HeadLookTime;
	float MaxHeadPitch;
	float MaxHeadRoll;
	float MaxHeadYaw;
	float Scaler;
	NMS::NMSString0x100 HeadJointName;

	friend bool operator==(const GcDroneComponentData& lhs, const GcDroneComponentData& rhs) 
	{
		return lhs.Health == rhs.Health &&
		lhs.Guns == rhs.Guns &&
		lhs.Id == rhs.Id &&
		lhs.ProjectileChoices == rhs.ProjectileChoices &&
		lhs.Axis == rhs.Axis &&
		lhs.HeadLookIdleTime == rhs.HeadLookIdleTime &&
		lhs.HeadLookTime == rhs.HeadLookTime &&
		lhs.MaxHeadPitch == rhs.MaxHeadPitch &&
		lhs.MaxHeadRoll == rhs.MaxHeadRoll &&
		lhs.MaxHeadYaw == rhs.MaxHeadYaw &&
		lhs.Scaler == rhs.Scaler &&
		lhs.HeadJointName == rhs.HeadJointName;
	}
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
//Dependency: GcItemNeedPurpose
struct GcMissionConditionHasSubstance
{
	NMS::NMSString0x10 Substance;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool MustBeImmediatelyAccessible;
	bool TakeAmountFromSeasonData;
	bool UseDefaultAmount;

	friend bool operator==(const GcMissionConditionHasSubstance& lhs, const GcMissionConditionHasSubstance& rhs) 
	{
		return lhs.Substance == rhs.Substance &&
		lhs.Amount == rhs.Amount &&
		lhs.Default == rhs.Default &&
		lhs.DefaultValueMultiplier == rhs.DefaultValueMultiplier &&
		lhs.Purpose == rhs.Purpose &&
		lhs.MustBeImmediatelyAccessible == rhs.MustBeImmediatelyAccessible &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};

//Dependency: NMSString0x10
struct GcRewardMissionSeeded
{
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 MissionNoGroundCombat;
	NMS::NMSString0x10 MissionNoSpaceCombat;
	bool ForceUseConversationSeed;
	bool InheritActiveMultiplayerMissionSeed;
	bool SelectMissionAsLocalMissionBoard;

	friend bool operator==(const GcRewardMissionSeeded& lhs, const GcRewardMissionSeeded& rhs) 
	{
		return lhs.Mission == rhs.Mission &&
		lhs.MissionNoGroundCombat == rhs.MissionNoGroundCombat &&
		lhs.MissionNoSpaceCombat == rhs.MissionNoSpaceCombat &&
		lhs.ForceUseConversationSeed == rhs.ForceUseConversationSeed &&
		lhs.InheritActiveMultiplayerMissionSeed == rhs.InheritActiveMultiplayerMissionSeed &&
		lhs.SelectMissionAsLocalMissionBoard == rhs.SelectMissionAsLocalMissionBoard;
	}
};

struct GcMissionConditionFeedingCreatures
{
	int32_t MinCreatures;
	bool TakeNumFromSeasonData;

	friend bool operator==(const GcMissionConditionFeedingCreatures& lhs, const GcMissionConditionFeedingCreatures& rhs) 
	{
		return lhs.MinCreatures == rhs.MinCreatures &&
		lhs.TakeNumFromSeasonData == rhs.TakeNumFromSeasonData;
	}
};

struct GcNameGeneratorTypes
{
	enum class MarkovSelectorEnum : uint32_t
	{
		Generic = 0,
		Mineral = 1,
		Region_NO = 2,
		Region_RU = 3,
		Region_CH = 4,
		Region_JP = 5,
		Region_LT = 6,
		Region_FL = 7,
	};

	NMS_GameComponents::GcNameGeneratorTypes::MarkovSelectorEnum MarkovSelector;

	friend bool operator==(const GcNameGeneratorTypes& lhs, const GcNameGeneratorTypes& rhs) 
	{
		return lhs.MarkovSelector == rhs.MarkovSelector;
	}
};

struct GcDiscoveryTrimGroup
{
	enum class DiscoveryTrimGroupEnum : uint32_t
	{
		System = 0,
		Planet = 1,
		Interesting = 2,
		Boring = 3,
	};

	NMS_GameComponents::GcDiscoveryTrimGroup::DiscoveryTrimGroupEnum DiscoveryTrimGroup;

	friend bool operator==(const GcDiscoveryTrimGroup& lhs, const GcDiscoveryTrimGroup& rhs) 
	{
		return lhs.DiscoveryTrimGroup == rhs.DiscoveryTrimGroup;
	}
};

struct GcSynchronisedBufferType
{
	enum class SyncBufferTypeEnum : uint32_t
	{
		Refiner = 0,
		Example1 = 1,
		Example2 = 2,
		Example3 = 3,
	};

	NMS_GameComponents::GcSynchronisedBufferType::SyncBufferTypeEnum SyncBufferType;

	friend bool operator==(const GcSynchronisedBufferType& lhs, const GcSynchronisedBufferType& rhs) 
	{
		return lhs.SyncBufferType == rhs.SyncBufferType;
	}
};

struct GcDiscoveryTrimScoringCategory
{
	enum class DiscoveryTrimScoringCategoryEnum : uint32_t
	{
		IsNamedSystem = 0,
		RecentlyVisitedSystem = 1,
		RecentDiscoveryInSystem = 2,
		NumDiscoveredPlanetsInSystem = 3,
		IsNamedPlanet = 4,
		NumBasesOnPlanet = 5,
		NumWondersOnPlanet = 6,
		NumNamedDiscoveries = 7,
	};

	NMS_GameComponents::GcDiscoveryTrimScoringCategory::DiscoveryTrimScoringCategoryEnum DiscoveryTrimScoringCategory;

	friend bool operator==(const GcDiscoveryTrimScoringCategory& lhs, const GcDiscoveryTrimScoringCategory& rhs) 
	{
		return lhs.DiscoveryTrimScoringCategory == rhs.DiscoveryTrimScoringCategory;
	}
};

//Dependency: GcBaseSearchFilter
//Dependency: GcDiscoveryTrimScoringRules
struct GcDiscoveryTrimSettings
{
	NMS_GameComponents::GcBaseSearchFilter BaseSearchFilter;
	NMS_GameComponents::GcDiscoveryTrimScoringRules DiscoveryTrimScoringRules[8];
	float DiscoveryTrimScoringWeights[8];
	int32_t DiscoveryTrimGroupMaxCounts[4];

	friend bool operator==(const GcDiscoveryTrimSettings& lhs, const GcDiscoveryTrimSettings& rhs) 
	{
		return lhs.BaseSearchFilter == rhs.BaseSearchFilter &&
		std::equal(std::begin(lhs.DiscoveryTrimScoringRules), std::end(lhs.DiscoveryTrimScoringRules), std::begin(rhs.DiscoveryTrimScoringRules)) &&
		std::equal(std::begin(lhs.DiscoveryTrimScoringWeights), std::end(lhs.DiscoveryTrimScoringWeights), std::begin(rhs.DiscoveryTrimScoringWeights)) &&
		std::equal(std::begin(lhs.DiscoveryTrimGroupMaxCounts), std::end(lhs.DiscoveryTrimGroupMaxCounts), std::begin(rhs.DiscoveryTrimGroupMaxCounts));
	}
};

//Dependency: NMSString0x10
struct GcModularCustomisationDescriptorGroupData
{
	NMS::NMSString0x10 ActivatedDescriptorGroupID;

	friend bool operator==(const GcModularCustomisationDescriptorGroupData& lhs, const GcModularCustomisationDescriptorGroupData& rhs) 
	{
		return lhs.ActivatedDescriptorGroupID == rhs.ActivatedDescriptorGroupID;
	}
};

//Dependency: GcModularCustomisationDescriptorGroupData
//Dependency: GcCreatureDiet
//Dependency: GcInventoryClass
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcModularCustomisationSlotItemData
{
	enum class DescriptorGroupSalvageRuleEnum : uint32_t
	{
		All = 0,
		Any = 1,
	};

	std::vector<NMS_GameComponents::GcModularCustomisationDescriptorGroupData> DescriptorGroupData;
	NMS::NMSString0x10 ItemID;
	NMS::VariableSizeString SpecificLocID;
	NMS_GameComponents::GcCreatureDiet CreatureDiet;
	NMS_GameComponents::GcModularCustomisationSlotItemData::DescriptorGroupSalvageRuleEnum DescriptorGroupSalvageRule;
	NMS_GameComponents::GcInventoryClass InventoryClass;
	bool SetInventoryClass;
	bool UseAltCamera;

	friend bool operator==(const GcModularCustomisationSlotItemData& lhs, const GcModularCustomisationSlotItemData& rhs) 
	{
		return lhs.DescriptorGroupData == rhs.DescriptorGroupData &&
		lhs.ItemID == rhs.ItemID &&
		lhs.SpecificLocID == rhs.SpecificLocID &&
		lhs.CreatureDiet == rhs.CreatureDiet &&
		lhs.DescriptorGroupSalvageRule == rhs.DescriptorGroupSalvageRule &&
		lhs.InventoryClass == rhs.InventoryClass &&
		lhs.SetInventoryClass == rhs.SetInventoryClass &&
		lhs.UseAltCamera == rhs.UseAltCamera;
	}
};

//Dependency: GcModularCustomisationSlotItemData
struct GcModularCustomisationSlotItemDataTable
{
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> Table;

	friend bool operator==(const GcModularCustomisationSlotItemDataTable& lhs, const GcModularCustomisationSlotItemDataTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcDissolveEffectComponentData
{
	float DissolveBeginHeight;
	float DissolveEndHeight;

	friend bool operator==(const GcDissolveEffectComponentData& lhs, const GcDissolveEffectComponentData& rhs) 
	{
		return lhs.DissolveBeginHeight == rhs.DissolveBeginHeight &&
		lhs.DissolveEndHeight == rhs.DissolveEndHeight;
	}
};

//Dependency: GcItemFilterMatchIDType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcItemFilterStageDataMatchID
{
	NMS::NMSString0x20A DisabledMessage;
	std::vector<NMS::NMSString0x10> ValidIds;
	NMS_GameComponents::GcItemFilterMatchIDType MatchType;

	friend bool operator==(const GcItemFilterStageDataMatchID& lhs, const GcItemFilterStageDataMatchID& rhs) 
	{
		return lhs.DisabledMessage == rhs.DisabledMessage &&
		lhs.ValidIds == rhs.ValidIds &&
		lhs.MatchType == rhs.MatchType;
	}
};

//Dependency: GcImpactCombatEffectData
//Dependency: GcPlayerHazardType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcHazardZoneComponentData
{
	NMS::NMSString0x20A OSDOnEntry;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnEntry;
	NMS::NMSString0x10 DamageOnEntry;
	float HazardStrength;
	NMS_GameComponents::GcPlayerHazardType HazardType;
	float Radius;

	friend bool operator==(const GcHazardZoneComponentData& lhs, const GcHazardZoneComponentData& rhs) 
	{
		return lhs.OSDOnEntry == rhs.OSDOnEntry &&
		lhs.CombatEffectsOnEntry == rhs.CombatEffectsOnEntry &&
		lhs.DamageOnEntry == rhs.DamageOnEntry &&
		lhs.HazardStrength == rhs.HazardStrength &&
		lhs.HazardType == rhs.HazardType &&
		lhs.Radius == rhs.Radius;
	}
};

struct GcMissionConditionNexusNearby
{
	float Distance;

	friend bool operator==(const GcMissionConditionNexusNearby& lhs, const GcMissionConditionNexusNearby& rhs) 
	{
		return lhs.Distance == rhs.Distance;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkVirtualBindingAltLayer
{
	NMS::NMSString0x10 HudLayerID;
	NMS::NMSString0x10 ID;

	friend bool operator==(const TkVirtualBindingAltLayer& lhs, const TkVirtualBindingAltLayer& rhs) 
	{
		return lhs.HudLayerID == rhs.HudLayerID &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: GcInputActions
//Dependency: TkVirtualBindingAltLayer
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkVirtualBinding
{
	NMS::NMSString0x20A CustomLocID;
	std::vector<NMS_Toolkit::TkVirtualBindingAltLayer> AltHudLayerIDs;
	NMS::NMSString0x10 HudLayerID;
	std::vector<NMS_GameComponents::GcInputActions> TogglableActions;
	NMS_GameComponents::GcInputActions BottomAction;
	NMS_GameComponents::GcInputActions LeftAction;
	NMS_GameComponents::GcInputActions RightAction;
	NMS_GameComponents::GcInputActions TopAction;
	bool Active;
	bool DefaultActive;
	bool DirectionalActions;
	bool SupportsJoystick;

	friend bool operator==(const TkVirtualBinding& lhs, const TkVirtualBinding& rhs) 
	{
		return lhs.CustomLocID == rhs.CustomLocID &&
		lhs.AltHudLayerIDs == rhs.AltHudLayerIDs &&
		lhs.HudLayerID == rhs.HudLayerID &&
		lhs.TogglableActions == rhs.TogglableActions &&
		lhs.BottomAction == rhs.BottomAction &&
		lhs.LeftAction == rhs.LeftAction &&
		lhs.RightAction == rhs.RightAction &&
		lhs.TopAction == rhs.TopAction &&
		lhs.Active == rhs.Active &&
		lhs.DefaultActive == rhs.DefaultActive &&
		lhs.DirectionalActions == rhs.DirectionalActions &&
		lhs.SupportsJoystick == rhs.SupportsJoystick;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcInputActions
//Dependency: TkVirtualBinding
//Dependency: TkInputAxisEnum
//Dependency: TkInputEnum
struct GcInputBinding
{
	NMS_Toolkit::TkVirtualBinding VirtualBinding;
	NMS_GameComponents::GcInputActions Action;
	NMS_Toolkit::TkInputAxisEnum Axis;
	NMS_Toolkit::TkInputEnum Button;

	friend bool operator==(const GcInputBinding& lhs, const GcInputBinding& rhs) 
	{
		return lhs.VirtualBinding == rhs.VirtualBinding &&
		lhs.Action == rhs.Action &&
		lhs.Axis == rhs.Axis &&
		lhs.Button == rhs.Button;
	}
};

//Dependency: GcInputBinding
//Dependency: GcActionSetType
struct GcInputBindingSet
{
	std::vector<NMS_GameComponents::GcInputBinding> InputBindings;
	NMS_GameComponents::GcActionSetType Type;

	friend bool operator==(const GcInputBindingSet& lhs, const GcInputBindingSet& rhs) 
	{
		return lhs.InputBindings == rhs.InputBindings &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcInputBindingSet
struct GcInputBindings
{
	std::vector<NMS_GameComponents::GcInputBindingSet> InputBindingSets;

	friend bool operator==(const GcInputBindings& lhs, const GcInputBindings& rhs) 
	{
		return lhs.InputBindingSets == rhs.InputBindingSets;
	}
};

struct GcDoShipClearCommunication
{

	friend bool operator==(const GcDoShipClearCommunication& lhs, const GcDoShipClearCommunication& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionCanMakeFossil
{
	float NearbyDisplayDistance;
	bool ConsiderItemsInNearbyDisplays;

	friend bool operator==(const GcMissionConditionCanMakeFossil& lhs, const GcMissionConditionCanMakeFossil& rhs) 
	{
		return lhs.NearbyDisplayDistance == rhs.NearbyDisplayDistance &&
		lhs.ConsiderItemsInNearbyDisplays == rhs.ConsiderItemsInNearbyDisplays;
	}
};

//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
//Dependency: GcAISpaceshipTypes
struct GcDoShipEscort
{
	NMS_GameComponents::GcRealityCommonFactions EscortTargetShipFaction;
	NMS_GameComponents::GcAISpaceshipRoles EscortTargetShipRole;
	NMS_GameComponents::GcAISpaceshipTypes EscortTargetShipType;
	float MaxSearchDistance;
	bool MatchFaction;
	bool MatchRole;
	bool MatchType;

	friend bool operator==(const GcDoShipEscort& lhs, const GcDoShipEscort& rhs) 
	{
		return lhs.EscortTargetShipFaction == rhs.EscortTargetShipFaction &&
		lhs.EscortTargetShipRole == rhs.EscortTargetShipRole &&
		lhs.EscortTargetShipType == rhs.EscortTargetShipType &&
		lhs.MaxSearchDistance == rhs.MaxSearchDistance &&
		lhs.MatchFaction == rhs.MatchFaction &&
		lhs.MatchRole == rhs.MatchRole &&
		lhs.MatchType == rhs.MatchType;
	}
};

//Dependency: GcPlayerSpawnStateData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcSceneSettings
{
	NMS_GameComponents::GcPlayerSpawnStateData PlayerState;
	NMS::VariableSizeString PlanetFiles[5];
	std::vector<NMSTemplate> Events;
	NMS::VariableSizeString NextSettingFile;
	std::vector<NMS::VariableSizeString> PlanetSceneFiles;
	std::vector<NMSTemplate> PostWarpEvents;
	NMS::VariableSizeString SceneFile;
	std::vector<NMS::VariableSizeString> ShipPreloadFiles;
	NMS::VariableSizeString SolarSystemFile;
	NMS::NMSString0x10 SpawnerOptionId;
	bool SpawnInsideShip;
	bool SpawnShip;

	friend bool operator==(const GcSceneSettings& lhs, const GcSceneSettings& rhs) 
	{
		return lhs.PlayerState == rhs.PlayerState &&
		std::equal(std::begin(lhs.PlanetFiles), std::end(lhs.PlanetFiles), std::begin(rhs.PlanetFiles)) &&
		lhs.Events == rhs.Events &&
		lhs.NextSettingFile == rhs.NextSettingFile &&
		lhs.PlanetSceneFiles == rhs.PlanetSceneFiles &&
		lhs.PostWarpEvents == rhs.PostWarpEvents &&
		lhs.SceneFile == rhs.SceneFile &&
		lhs.ShipPreloadFiles == rhs.ShipPreloadFiles &&
		lhs.SolarSystemFile == rhs.SolarSystemFile &&
		lhs.SpawnerOptionId == rhs.SpawnerOptionId &&
		lhs.SpawnInsideShip == rhs.SpawnInsideShip &&
		lhs.SpawnShip == rhs.SpawnShip;
	}
};

struct GcDoShipFlybyClose
{
	float LockOffset;
	float LockSpread;
	float LockTime;
	bool HailingBehaviour;
	bool StayCloseAtLowSpeed;

	friend bool operator==(const GcDoShipFlybyClose& lhs, const GcDoShipFlybyClose& rhs) 
	{
		return lhs.LockOffset == rhs.LockOffset &&
		lhs.LockSpread == rhs.LockSpread &&
		lhs.LockTime == rhs.LockTime &&
		lhs.HailingBehaviour == rhs.HailingBehaviour &&
		lhs.StayCloseAtLowSpeed == rhs.StayCloseAtLowSpeed;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkPhysRelVectorData
{
	NMS::Vector3f Local;
	NMS::Vector3f Offset;

	friend bool operator==(const TkPhysRelVectorData& lhs, const TkPhysRelVectorData& rhs) 
	{
		return lhs.Local == rhs.Local &&
		lhs.Offset == rhs.Offset;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcCameraFocusBuildingControlSettings
//Dependency: GcCameraFollowSettings
//Dependency: TkModelRendererData
//Dependency: GcCameraShakeData
//Dependency: GcCameraAnimationData
//Dependency: GcCameraAerialViewDataTableEntry
//Dependency: GcCameraWarpSettings
//Dependency: TkModelResource
//Dependency: TkPhysRelVectorData
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcCameraGlobals
{
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseBack;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseDefault;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseFront;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseLeft;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseRight;
	NMS_Toolkit::TkModelRendererData CameraNPCShipInteraction;
	NMS_Toolkit::TkModelRendererData CameraNPCShopInteraction;
	NMS_Toolkit::TkModelRendererData FreighterCustomisationStandardCamera;
	NMS_Toolkit::TkModelRendererData FreighterCustomisationStandardCameraAlt;
	NMS::Vector3f FirstPersonCamOffset[9];
	NMS::Vector3f BuildingModeInitialOffset;
	NMS::Vector3f FirstPersonInShipCamOffset;
	NMS::Vector3f InteractionHailingFocusOffset;
	NMS::Vector3f InteractionOffset;
	NMS::Vector3f InteractionOffsetCronus;
	NMS::Vector3f InteractionOffsetDefault;
	NMS::Vector3f InteractionOffsetExtraVR;
	NMS::Vector3f InteractionOffsetExtraVRSeated;
	NMS::Vector3f InteractionOffsetGek;
	NMS::Vector3f InteractionOffsetRecruitment;
	NMS::Vector3f InteractionOffsetSpiderman;
	NMS::Vector3f InteractionShipFocusOffset;
	NMS::Colour MiniportalFlashColour;
	NMS::Vector3f ModelViewOffset;
	NMS::Vector3f OffsetCamOffset;
	NMS::Vector3f OffsetCamRotation;
	NMS::Vector3f OffsetForFleetInteraction;
	NMS::Vector3f OffsetForFrigateInteraction;
	NMS::Vector3f PhotoModeShipOffset;
	NMS::Vector3f PhotoModeVRFPOffset;
	NMS::Vector3f ShopInteractionOffsetExtraVR;
	NMS::Vector3f ShopInteractionOffsetExtraVRSeated;
	NMS::Colour VehicleExitFlashColour;
	NMS_GameComponents::GcCameraFollowSettings AlienShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BikeFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BuggyFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingIndoorsCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingOutdoorsCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingUnderwaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAbandCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAbandCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAirborneCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAirborneCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterFallingCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterFishingCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterGrabbedCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterIndoorCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterMeleeBoostCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterMiningCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterNexusCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamHuge;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamLarge;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamMedium;
	NMS_GameComponents::GcCameraFollowSettings CharacterRocketBootsCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRocketBootsChargeCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRunCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSitCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSpaceCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSteepSlopeCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSurfaceWaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnarmedCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUndergroundCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterJetpackAscentCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterJetpackCam;
	NMS_GameComponents::GcCameraFollowSettings DropshipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings HovercraftFollowCam;
	NMS_GameComponents::GcCameraFollowSettings MechCombatCam;
	NMS_GameComponents::GcCameraFollowSettings MechFirstPersonCam;
	NMS_GameComponents::GcCameraFollowSettings MechFollowCam;
	NMS_GameComponents::GcCameraFollowSettings MechJetpackCam;
	NMS_GameComponents::GcCameraFollowSettings RobotShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings RoyalShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SailShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings ScienceShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings ShuttleFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SpaceshipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SubmarineFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SubmarineFollowCamSurface;
	NMS_GameComponents::GcCameraFollowSettings TruckFollowCam;
	NMS_GameComponents::GcCameraFollowSettings VehicleCam;
	NMS_GameComponents::GcCameraFollowSettings VehicleCamHmd;
	NMS_GameComponents::GcCameraFollowSettings WheeledBikeFollowCam;
	NMS_GameComponents::GcCameraAnimationData AmbientCameraAnimations;
	NMS_Toolkit::TkModelResource AmbientDroneAnimations;
	std::vector<NMS_GameComponents::GcCameraAerialViewDataTableEntry> AerialViewDataTable;
	NMS::VariableSizeString CameraAmbientAnimationsData;
	std::vector<NMS_GameComponents::GcCameraFollowSettings> Cameras;
	std::vector<NMS_GameComponents::GcCameraShakeData> CameraShakeTable;
	std::vector<NMS::Vector3f> SavedCameraFacing;
	std::vector<NMS_Toolkit::TkPhysRelVectorData> SavedCameraPositions;
	NMS_GameComponents::GcCameraWarpSettings FreighterWarpSettings;
	NMS_GameComponents::GcCameraWarpSettings PirateFreighterWarpSettings;
	NMS_GameComponents::GcCameraWarpSettings WarpSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeDistanceControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModePitchControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModePlanarControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeVerticalControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeYawControlSettings;
	NMS::Vector2f ModelViewFocusOffset;
	NMS::Vector2f PitchForFrigateInteraction;
	NMS::Vector2f RotationForFrigateInteraction;
	float AerialViewBackTime;
	float AerialViewBlendTime;
	float AerialViewDownDistance;
	float AerialViewPause;
	float AerialViewStartTime;
	float BinocularFlashStrength;
	float BinocularFlashTime;
	float BobAmount;
	float BobAmountAbandFreighter;
	float BobFactor;
	float BobFactorAbandFreighter;
	float BobFocus;
	float BobFwdAmount;
	float BobRollAmount;
	float BobRollFactor;
	float BobRollOffset;
	float BuildingModeMaxDistance;
	float CameraAmbientAutoSwitchMaxTime;
	float CameraAmbientAutoSwitchMinTime;
	float CamSeed1;
	float CamSeed2;
	float CamWander1Amplitude;
	float CamWander1Phase;
	float CamWander2Amplitude;
	float CamWander2Phase;
	float CharCamAutoDirStartTime;
	float CharCamDeflectSpeed;
	float CharCamFocusHeight;
	float CharCamHeight;
	float CharCamLookOffset;
	float CharCamLookOffsetFactor;
	float CharCamMaxDistance;
	float CharCamMinDistance;
	float CharCamMinSpeed;
	float CharCamOffsetTime;
	float CharCamRightStickX;
	float CharCamRightStickY;
	float CloseFactorSpring;
	float CreatureInteractionCamSpring;
	float CreatureInteractionDistMulMax;
	float CreatureInteractionDistMulMin;
	float CreatureInteractionDownhillPitchTransfer;
	float CreatureInteractionFoVMax;
	float CreatureInteractionFoVMin;
	float CreatureInteractionFoVSplitSize;
	float CreatureInteractionHeadHeightSpring;
	float CreatureInteractionMaxDownhillPitchAroundPlayer;
	float CreatureInteractionMaxUphillPitchAroundPlayer;
	float CreatureInteractionMinDist;
	float CreatureInteractionPitchMax;
	float CreatureInteractionPitchMin;
	float CreatureInteractionPitchSplit;
	float CreatureInteractionPushCameraDownAmount;
	float CreatureInteractionPushCameraDownForCreatureBiggerThan;
	float CreatureInteractionUphillPitchTransfer;
	float CreatureInteractionYawMax;
	float CreatureInteractionYawMin;
	float CreatureSizeMax;
	float CreatureSizeMin;
	float DebugAICamAt;
	float DebugAICamUp;
	float DebugCameraFastFactor;
	float DebugCameraHeightForAccelerateBegin;
	float DebugCameraHeightForAccelerateEnd;
	float DebugCameraMaxSpeed;
	float DebugCameraSlowFactor;
	float DebugCameraSpaceFastFactor;
	float DebugCameraSpeedAtPlanetThreshold;
	float DebugMoveCamHeight;
	float DebugMoveCamSpeed;
	float DebugPlanetJumpFarHeight;
	float DebugPlanetJumpNearHeight;
	float DebugSpaceStationTeleportOffset;
	float DistanceForFleetInteraction;
	float DistanceForFrigateInteraction;
	float DistanceForFrigatePurchaseInteraction;
	float FirstPersonCamHeight;
	float FirstPersonFoV;
	float FirstPersonSlerpAway;
	float FirstPersonSlerpTowards;
	float FirstPersonZoom1FoV;
	float FirstPersonZoom2FoV;
	float FleetUIOrbitRate;
	float FleetUIVerticalMotionAmplitude;
	float FleetUIVerticalMotionDuration;
	float FlybyInVehicleDamper;
	float FlybyMinRange;
	float FlybyMinRelativeSpeed;
	float FlybyRange;
	float FlybyRelativeSpeedRange;
	float FocusBuildingModeMaxFOV;
	float FocusBuildingModeMinFOV;
	float FocusBuildingModeStartDistance;
	float FoVAdjust;
	float FoVSpring;
	float FoVSpringSights;
	float FoVSpringSightsPassive;
	float FrigateCaptainLateralShiftAmount;
	float FrontendModelCameraSpringTime;
	float HmdEyeExtraTurnAngle;
	float HmdEyeExtraTurnHeadAngleRange;
	float HmdEyeExtraTurnMinHeadAngle;
	float HmdEyeLookAngle;
	float IndoorCamShakeDamper;
	float InteractionHeadHeightCronus;
	float InteractionHeadHeightDefault;
	float InteractionHeadHeightGek;
	float InteractionHeadHeightSpiderman;
	float InteractionHeadHeightVykeen;
	float InteractionHeadPosHeightAdjust;
	float InteractionHeadPosHeightAdjustCronus;
	float InteractionHeadPosHeightAdjustSpiderman;
	float InteractionHeadPosHeightAdjustVykeen;
	float InteractionModeBlendTime;
	float InteractionModeFocusCamBlend;
	float InteractionModeFoV;
	float InteractionPitchAdjustDeadZone;
	float InteractionPitchAdjustStrength;
	float InteractionPitchAdjustTime;
	float LocalMissionBoardLateralShiftAmount;
	float MaxCreatureRidingYaw;
	float MaxFirstPersonCameraPitch;
	float MechCameraArmShootOffsetY;
	float MechCameraCombatFakeSpeed;
	float MechCameraExtraYPostLandingBlendTime;
	float MechCameraNoExtraYTimeAfterLand;
	float MechCamSpringStrengthMax;
	float MechCamSpringStrengthMin;
	float MeleeBoostedFoV;
	float MeleeFoV;
	float MinFirstPersonCameraPitch;
	float MinInteractFocusAngle;
	float MiniportalFlashStrength;
	float MiniportalFlashTime;
	float ModelViewDefaultPitch;
	float ModelViewDefaultYaw;
	float ModelViewDistSpeed;
	float ModelViewFlashTime;
	float ModelViewInterpTime;
	float ModelViewMaxDist;
	float ModelViewMinDist;
	float ModelViewMouseMoveSpeed;
	float ModelViewMouseRotateSnapStrength;
	float ModelViewMouseRotateSpeed;
	float ModelViewRotateSpeed;
	float MouseSensitivity;
	float NoControlCamShakeDamper;
	float NPCTradeLateralShiftAmount;
	float NPCTradeLateralShiftTime;
	float ObjectFocusTime;
	float OffsetCamFOV;
	float OffsetCombatCameraHorizontalAngle;
	float PainShakeTime;
	float PhotoModeCollisionRadius;
	float PhotoModeFlashDuration;
	float PhotoModeFlashIntensity;
	float PhotoModeMaxDistance;
	float PhotoModeMaxDistanceClampBuffer;
	float PhotoModeMaxDistanceClampForce;
	float PhotoModeMaxDistanceSpace;
	float PhotoModeMoveSpeed;
	float PhotoModeRollSpeed;
	float PhotoModeTurnSpeed;
	float PhotoModeVelocitySmoothTime;
	float PilotDetailsLateralShiftAmount;
	float RecruitmentLateralShiftAmount;
	float RevealedNPCHeadOffset;
	float RunningFoVAdjust;
	float ScanCameraLookAtTime;
	float SClassLandingShakeMultiplier;
	float ScreenshotBackDistance;
	float ScreenshotBendDownAmount;
	float ScreenshotHorizonFaceFactor;
	float ScreenshotHorizonHeight;
	float ScreenshotInTime;
	float ScreenshotOutTime;
	float ScreenshotRightDistance;
	float ShipBuilderFoV;
	float ShipCamAimFOV;
	float ShipCamLookInterp;
	float ShipCamMinReturnTime;
	float ShipCamMotionInterp;
	float ShipCamMotionMaxLagPitchAngle;
	float ShipCamMotionMaxLagTurnAngle;
	float ShipCamMotionPitch;
	float ShipCamMotionPitchMod;
	float ShipCamMotionTurn;
	float ShipCamPitch;
	float ShipCamPitchMod;
	float ShipCamReturnTime;
	float ShipCamRollAmountMax;
	float ShipCamRollAmountMin;
	float ShipCamRollSpeedScaler;
	float ShipCamSpringStrengthMax;
	float ShipCamSpringStrengthMin;
	float ShipCamTurn;
	float ShipFirstPersonBlendOffset;
	float ShipFirstPersonBlendTime;
	float ShipFoVBoost;
	float ShipFoVMax;
	float ShipFoVMax3rdPerson;
	float ShipFoVMin;
	float ShipFoVMin2;
	float ShipFoVMin3rdPerson;
	float ShipFoVMiniJump;
	float ShipFoVSpring;
	float ShipMiniJumpFoVSpring;
	float ShipShakeDamper;
	float ShipThirdPersonBlendOffset;
	float ShipThirdPersonBlendOutOffset;
	float ShipThirdPersonBlendOutTime;
	float ShipThirdPersonBlendTime;
	float ShipThirdPersonBlendWithOffsetTime;
	float ShipThirdPersonEnterBlendOffset;
	float ShipThirdPersonEnterBlendTime;
	float ShipWarpFoV;
	float SpecialVehicleMouseRecentreTime;
	float SpecialVehicleMouseRecentreWeaponTime;
	float ThirdPersonAfterIntroCamBlendTime;
	float ThirdPersonBlendInTime;
	float ThirdPersonBlendOutTime;
	float ThirdPersonCameraChangeBlendTime;
	float ThirdPersonCameraChangeMinimumBlend;
	float ThirdPersonCloseDistance;
	float ThirdPersonCloseDistanceX;
	float ThirdPersonClosePitch;
	float ThirdPersonCollisionPushOffsetReducerStart;
	float ThirdPersonCombatFoV;
	float ThirdPersonDownhillAdjustMaxAngle;
	float ThirdPersonDownhillAdjustMaxAnglePrime;
	float ThirdPersonDownhillAdjustMinAngle;
	float ThirdPersonDownhillAdjustMinAnglePrime;
	float ThirdPersonDownhillAdjustSpringTimeMax;
	float ThirdPersonDownhillAdjustSpringTimeMin;
	float ThirdPersonFoV;
	float ThirdPersonOffsetSpringTime;
	float ThirdPersonRotationBackAdjustAngleMax;
	float ThirdPersonRotationBackAdjustAngleMin;
	float ThirdPersonSkipIntroCamBlendTime;
	float ThirdPersonUphillAdjustCrossSlopeMaxAngle;
	float ThirdPersonUphillAdjustCrossSlopeMinAngle;
	float ThirdPersonUphillAdjustMaxAngle;
	float ThirdPersonUphillAdjustMaxAnglePrime;
	float ThirdPersonUphillAdjustMinAngle;
	float ThirdPersonUphillAdjustMinAnglePrime;
	float ThirdPersonUphillAdjustSpringTimeMax;
	float ThirdPersonUphillAdjustSpringTimeMin;
	float TogglePerspectiveBlendTime;
	float UnderwaterCameraExtraVertOffset;
	float VehicleExitFlashStrength;
	float VehicleExitFlashTime;
	float VehicleFirstPersonFoV;
	float VehicleFirstToThirdExitOffsetY;
	float VehicleFirstToThirdExitOffsetZ;
	float VehicleThirdPersonShootOffsetBlendOutTime;
	float VehicleThirdPersonShootOffsetReturnTime;
	float VRShakeMultiplier;
	NMS_Toolkit::TkCurveType AerialViewCurve;
	bool CreatureInteractionInterpolateDuringHold;
	bool DebugAICam;
	bool DebugMoveCam;
	bool FollowDrawCamProbes;
	bool LockFollowSpring;
	bool MaxBob;
	bool OffsetCombatCameraHorizontal;
	bool PauseThirdPersonCamInPause;

	friend bool operator==(const GcCameraGlobals& lhs, const GcCameraGlobals& rhs) 
	{
		return lhs.CameraCreatureCustomiseBack == rhs.CameraCreatureCustomiseBack &&
		lhs.CameraCreatureCustomiseDefault == rhs.CameraCreatureCustomiseDefault &&
		lhs.CameraCreatureCustomiseFront == rhs.CameraCreatureCustomiseFront &&
		lhs.CameraCreatureCustomiseLeft == rhs.CameraCreatureCustomiseLeft &&
		lhs.CameraCreatureCustomiseRight == rhs.CameraCreatureCustomiseRight &&
		lhs.CameraNPCShipInteraction == rhs.CameraNPCShipInteraction &&
		lhs.CameraNPCShopInteraction == rhs.CameraNPCShopInteraction &&
		lhs.FreighterCustomisationStandardCamera == rhs.FreighterCustomisationStandardCamera &&
		lhs.FreighterCustomisationStandardCameraAlt == rhs.FreighterCustomisationStandardCameraAlt &&
		std::equal(std::begin(lhs.FirstPersonCamOffset), std::end(lhs.FirstPersonCamOffset), std::begin(rhs.FirstPersonCamOffset)) &&
		lhs.BuildingModeInitialOffset == rhs.BuildingModeInitialOffset &&
		lhs.FirstPersonInShipCamOffset == rhs.FirstPersonInShipCamOffset &&
		lhs.InteractionHailingFocusOffset == rhs.InteractionHailingFocusOffset &&
		lhs.InteractionOffset == rhs.InteractionOffset &&
		lhs.InteractionOffsetCronus == rhs.InteractionOffsetCronus &&
		lhs.InteractionOffsetDefault == rhs.InteractionOffsetDefault &&
		lhs.InteractionOffsetExtraVR == rhs.InteractionOffsetExtraVR &&
		lhs.InteractionOffsetExtraVRSeated == rhs.InteractionOffsetExtraVRSeated &&
		lhs.InteractionOffsetGek == rhs.InteractionOffsetGek &&
		lhs.InteractionOffsetRecruitment == rhs.InteractionOffsetRecruitment &&
		lhs.InteractionOffsetSpiderman == rhs.InteractionOffsetSpiderman &&
		lhs.InteractionShipFocusOffset == rhs.InteractionShipFocusOffset &&
		lhs.MiniportalFlashColour == rhs.MiniportalFlashColour &&
		lhs.ModelViewOffset == rhs.ModelViewOffset &&
		lhs.OffsetCamOffset == rhs.OffsetCamOffset &&
		lhs.OffsetCamRotation == rhs.OffsetCamRotation &&
		lhs.OffsetForFleetInteraction == rhs.OffsetForFleetInteraction &&
		lhs.OffsetForFrigateInteraction == rhs.OffsetForFrigateInteraction &&
		lhs.PhotoModeShipOffset == rhs.PhotoModeShipOffset &&
		lhs.PhotoModeVRFPOffset == rhs.PhotoModeVRFPOffset &&
		lhs.ShopInteractionOffsetExtraVR == rhs.ShopInteractionOffsetExtraVR &&
		lhs.ShopInteractionOffsetExtraVRSeated == rhs.ShopInteractionOffsetExtraVRSeated &&
		lhs.VehicleExitFlashColour == rhs.VehicleExitFlashColour &&
		lhs.AlienShipFollowCam == rhs.AlienShipFollowCam &&
		lhs.BikeFollowCam == rhs.BikeFollowCam &&
		lhs.BuggyFollowCam == rhs.BuggyFollowCam &&
		lhs.BuildingIndoorsCam == rhs.BuildingIndoorsCam &&
		lhs.BuildingOutdoorsCam == rhs.BuildingOutdoorsCam &&
		lhs.BuildingUnderwaterCam == rhs.BuildingUnderwaterCam &&
		lhs.CharacterAbandCam == rhs.CharacterAbandCam &&
		lhs.CharacterAbandCombatCam == rhs.CharacterAbandCombatCam &&
		lhs.CharacterAirborneCam == rhs.CharacterAirborneCam &&
		lhs.CharacterAirborneCombatCam == rhs.CharacterAirborneCombatCam &&
		lhs.CharacterCombatCam == rhs.CharacterCombatCam &&
		lhs.CharacterFallingCam == rhs.CharacterFallingCam &&
		lhs.CharacterFishingCam == rhs.CharacterFishingCam &&
		lhs.CharacterGrabbedCam == rhs.CharacterGrabbedCam &&
		lhs.CharacterIndoorCam == rhs.CharacterIndoorCam &&
		lhs.CharacterMeleeBoostCam == rhs.CharacterMeleeBoostCam &&
		lhs.CharacterMiningCam == rhs.CharacterMiningCam &&
		lhs.CharacterNexusCam == rhs.CharacterNexusCam &&
		lhs.CharacterRideCam == rhs.CharacterRideCam &&
		lhs.CharacterRideCamHuge == rhs.CharacterRideCamHuge &&
		lhs.CharacterRideCamLarge == rhs.CharacterRideCamLarge &&
		lhs.CharacterRideCamMedium == rhs.CharacterRideCamMedium &&
		lhs.CharacterRocketBootsCam == rhs.CharacterRocketBootsCam &&
		lhs.CharacterRocketBootsChargeCam == rhs.CharacterRocketBootsChargeCam &&
		lhs.CharacterRunCam == rhs.CharacterRunCam &&
		lhs.CharacterSitCam == rhs.CharacterSitCam &&
		lhs.CharacterSpaceCam == rhs.CharacterSpaceCam &&
		lhs.CharacterSteepSlopeCam == rhs.CharacterSteepSlopeCam &&
		lhs.CharacterSurfaceWaterCam == rhs.CharacterSurfaceWaterCam &&
		lhs.CharacterUnarmedCam == rhs.CharacterUnarmedCam &&
		lhs.CharacterUndergroundCam == rhs.CharacterUndergroundCam &&
		lhs.CharacterUnderwaterCam == rhs.CharacterUnderwaterCam &&
		lhs.CharacterUnderwaterCombatCam == rhs.CharacterUnderwaterCombatCam &&
		lhs.CharacterUnderwaterJetpackAscentCam == rhs.CharacterUnderwaterJetpackAscentCam &&
		lhs.CharacterUnderwaterJetpackCam == rhs.CharacterUnderwaterJetpackCam &&
		lhs.DropshipFollowCam == rhs.DropshipFollowCam &&
		lhs.HovercraftFollowCam == rhs.HovercraftFollowCam &&
		lhs.MechCombatCam == rhs.MechCombatCam &&
		lhs.MechFirstPersonCam == rhs.MechFirstPersonCam &&
		lhs.MechFollowCam == rhs.MechFollowCam &&
		lhs.MechJetpackCam == rhs.MechJetpackCam &&
		lhs.RobotShipFollowCam == rhs.RobotShipFollowCam &&
		lhs.RoyalShipFollowCam == rhs.RoyalShipFollowCam &&
		lhs.SailShipFollowCam == rhs.SailShipFollowCam &&
		lhs.ScienceShipFollowCam == rhs.ScienceShipFollowCam &&
		lhs.ShuttleFollowCam == rhs.ShuttleFollowCam &&
		lhs.SpaceshipFollowCam == rhs.SpaceshipFollowCam &&
		lhs.SubmarineFollowCam == rhs.SubmarineFollowCam &&
		lhs.SubmarineFollowCamSurface == rhs.SubmarineFollowCamSurface &&
		lhs.TruckFollowCam == rhs.TruckFollowCam &&
		lhs.VehicleCam == rhs.VehicleCam &&
		lhs.VehicleCamHmd == rhs.VehicleCamHmd &&
		lhs.WheeledBikeFollowCam == rhs.WheeledBikeFollowCam &&
		lhs.AmbientCameraAnimations == rhs.AmbientCameraAnimations &&
		lhs.AmbientDroneAnimations == rhs.AmbientDroneAnimations &&
		lhs.AerialViewDataTable == rhs.AerialViewDataTable &&
		lhs.CameraAmbientAnimationsData == rhs.CameraAmbientAnimationsData &&
		lhs.Cameras == rhs.Cameras &&
		lhs.CameraShakeTable == rhs.CameraShakeTable &&
		lhs.SavedCameraFacing == rhs.SavedCameraFacing &&
		lhs.SavedCameraPositions == rhs.SavedCameraPositions &&
		lhs.FreighterWarpSettings == rhs.FreighterWarpSettings &&
		lhs.PirateFreighterWarpSettings == rhs.PirateFreighterWarpSettings &&
		lhs.WarpSettings == rhs.WarpSettings &&
		lhs.FocusBuildingModeDistanceControlSettings == rhs.FocusBuildingModeDistanceControlSettings &&
		lhs.FocusBuildingModePitchControlSettings == rhs.FocusBuildingModePitchControlSettings &&
		lhs.FocusBuildingModePlanarControlSettings == rhs.FocusBuildingModePlanarControlSettings &&
		lhs.FocusBuildingModeVerticalControlSettings == rhs.FocusBuildingModeVerticalControlSettings &&
		lhs.FocusBuildingModeYawControlSettings == rhs.FocusBuildingModeYawControlSettings &&
		lhs.ModelViewFocusOffset == rhs.ModelViewFocusOffset &&
		lhs.PitchForFrigateInteraction == rhs.PitchForFrigateInteraction &&
		lhs.RotationForFrigateInteraction == rhs.RotationForFrigateInteraction &&
		lhs.AerialViewBackTime == rhs.AerialViewBackTime &&
		lhs.AerialViewBlendTime == rhs.AerialViewBlendTime &&
		lhs.AerialViewDownDistance == rhs.AerialViewDownDistance &&
		lhs.AerialViewPause == rhs.AerialViewPause &&
		lhs.AerialViewStartTime == rhs.AerialViewStartTime &&
		lhs.BinocularFlashStrength == rhs.BinocularFlashStrength &&
		lhs.BinocularFlashTime == rhs.BinocularFlashTime &&
		lhs.BobAmount == rhs.BobAmount &&
		lhs.BobAmountAbandFreighter == rhs.BobAmountAbandFreighter &&
		lhs.BobFactor == rhs.BobFactor &&
		lhs.BobFactorAbandFreighter == rhs.BobFactorAbandFreighter &&
		lhs.BobFocus == rhs.BobFocus &&
		lhs.BobFwdAmount == rhs.BobFwdAmount &&
		lhs.BobRollAmount == rhs.BobRollAmount &&
		lhs.BobRollFactor == rhs.BobRollFactor &&
		lhs.BobRollOffset == rhs.BobRollOffset &&
		lhs.BuildingModeMaxDistance == rhs.BuildingModeMaxDistance &&
		lhs.CameraAmbientAutoSwitchMaxTime == rhs.CameraAmbientAutoSwitchMaxTime &&
		lhs.CameraAmbientAutoSwitchMinTime == rhs.CameraAmbientAutoSwitchMinTime &&
		lhs.CamSeed1 == rhs.CamSeed1 &&
		lhs.CamSeed2 == rhs.CamSeed2 &&
		lhs.CamWander1Amplitude == rhs.CamWander1Amplitude &&
		lhs.CamWander1Phase == rhs.CamWander1Phase &&
		lhs.CamWander2Amplitude == rhs.CamWander2Amplitude &&
		lhs.CamWander2Phase == rhs.CamWander2Phase &&
		lhs.CharCamAutoDirStartTime == rhs.CharCamAutoDirStartTime &&
		lhs.CharCamDeflectSpeed == rhs.CharCamDeflectSpeed &&
		lhs.CharCamFocusHeight == rhs.CharCamFocusHeight &&
		lhs.CharCamHeight == rhs.CharCamHeight &&
		lhs.CharCamLookOffset == rhs.CharCamLookOffset &&
		lhs.CharCamLookOffsetFactor == rhs.CharCamLookOffsetFactor &&
		lhs.CharCamMaxDistance == rhs.CharCamMaxDistance &&
		lhs.CharCamMinDistance == rhs.CharCamMinDistance &&
		lhs.CharCamMinSpeed == rhs.CharCamMinSpeed &&
		lhs.CharCamOffsetTime == rhs.CharCamOffsetTime &&
		lhs.CharCamRightStickX == rhs.CharCamRightStickX &&
		lhs.CharCamRightStickY == rhs.CharCamRightStickY &&
		lhs.CloseFactorSpring == rhs.CloseFactorSpring &&
		lhs.CreatureInteractionCamSpring == rhs.CreatureInteractionCamSpring &&
		lhs.CreatureInteractionDistMulMax == rhs.CreatureInteractionDistMulMax &&
		lhs.CreatureInteractionDistMulMin == rhs.CreatureInteractionDistMulMin &&
		lhs.CreatureInteractionDownhillPitchTransfer == rhs.CreatureInteractionDownhillPitchTransfer &&
		lhs.CreatureInteractionFoVMax == rhs.CreatureInteractionFoVMax &&
		lhs.CreatureInteractionFoVMin == rhs.CreatureInteractionFoVMin &&
		lhs.CreatureInteractionFoVSplitSize == rhs.CreatureInteractionFoVSplitSize &&
		lhs.CreatureInteractionHeadHeightSpring == rhs.CreatureInteractionHeadHeightSpring &&
		lhs.CreatureInteractionMaxDownhillPitchAroundPlayer == rhs.CreatureInteractionMaxDownhillPitchAroundPlayer &&
		lhs.CreatureInteractionMaxUphillPitchAroundPlayer == rhs.CreatureInteractionMaxUphillPitchAroundPlayer &&
		lhs.CreatureInteractionMinDist == rhs.CreatureInteractionMinDist &&
		lhs.CreatureInteractionPitchMax == rhs.CreatureInteractionPitchMax &&
		lhs.CreatureInteractionPitchMin == rhs.CreatureInteractionPitchMin &&
		lhs.CreatureInteractionPitchSplit == rhs.CreatureInteractionPitchSplit &&
		lhs.CreatureInteractionPushCameraDownAmount == rhs.CreatureInteractionPushCameraDownAmount &&
		lhs.CreatureInteractionPushCameraDownForCreatureBiggerThan == rhs.CreatureInteractionPushCameraDownForCreatureBiggerThan &&
		lhs.CreatureInteractionUphillPitchTransfer == rhs.CreatureInteractionUphillPitchTransfer &&
		lhs.CreatureInteractionYawMax == rhs.CreatureInteractionYawMax &&
		lhs.CreatureInteractionYawMin == rhs.CreatureInteractionYawMin &&
		lhs.CreatureSizeMax == rhs.CreatureSizeMax &&
		lhs.CreatureSizeMin == rhs.CreatureSizeMin &&
		lhs.DebugAICamAt == rhs.DebugAICamAt &&
		lhs.DebugAICamUp == rhs.DebugAICamUp &&
		lhs.DebugCameraFastFactor == rhs.DebugCameraFastFactor &&
		lhs.DebugCameraHeightForAccelerateBegin == rhs.DebugCameraHeightForAccelerateBegin &&
		lhs.DebugCameraHeightForAccelerateEnd == rhs.DebugCameraHeightForAccelerateEnd &&
		lhs.DebugCameraMaxSpeed == rhs.DebugCameraMaxSpeed &&
		lhs.DebugCameraSlowFactor == rhs.DebugCameraSlowFactor &&
		lhs.DebugCameraSpaceFastFactor == rhs.DebugCameraSpaceFastFactor &&
		lhs.DebugCameraSpeedAtPlanetThreshold == rhs.DebugCameraSpeedAtPlanetThreshold &&
		lhs.DebugMoveCamHeight == rhs.DebugMoveCamHeight &&
		lhs.DebugMoveCamSpeed == rhs.DebugMoveCamSpeed &&
		lhs.DebugPlanetJumpFarHeight == rhs.DebugPlanetJumpFarHeight &&
		lhs.DebugPlanetJumpNearHeight == rhs.DebugPlanetJumpNearHeight &&
		lhs.DebugSpaceStationTeleportOffset == rhs.DebugSpaceStationTeleportOffset &&
		lhs.DistanceForFleetInteraction == rhs.DistanceForFleetInteraction &&
		lhs.DistanceForFrigateInteraction == rhs.DistanceForFrigateInteraction &&
		lhs.DistanceForFrigatePurchaseInteraction == rhs.DistanceForFrigatePurchaseInteraction &&
		lhs.FirstPersonCamHeight == rhs.FirstPersonCamHeight &&
		lhs.FirstPersonFoV == rhs.FirstPersonFoV &&
		lhs.FirstPersonSlerpAway == rhs.FirstPersonSlerpAway &&
		lhs.FirstPersonSlerpTowards == rhs.FirstPersonSlerpTowards &&
		lhs.FirstPersonZoom1FoV == rhs.FirstPersonZoom1FoV &&
		lhs.FirstPersonZoom2FoV == rhs.FirstPersonZoom2FoV &&
		lhs.FleetUIOrbitRate == rhs.FleetUIOrbitRate &&
		lhs.FleetUIVerticalMotionAmplitude == rhs.FleetUIVerticalMotionAmplitude &&
		lhs.FleetUIVerticalMotionDuration == rhs.FleetUIVerticalMotionDuration &&
		lhs.FlybyInVehicleDamper == rhs.FlybyInVehicleDamper &&
		lhs.FlybyMinRange == rhs.FlybyMinRange &&
		lhs.FlybyMinRelativeSpeed == rhs.FlybyMinRelativeSpeed &&
		lhs.FlybyRange == rhs.FlybyRange &&
		lhs.FlybyRelativeSpeedRange == rhs.FlybyRelativeSpeedRange &&
		lhs.FocusBuildingModeMaxFOV == rhs.FocusBuildingModeMaxFOV &&
		lhs.FocusBuildingModeMinFOV == rhs.FocusBuildingModeMinFOV &&
		lhs.FocusBuildingModeStartDistance == rhs.FocusBuildingModeStartDistance &&
		lhs.FoVAdjust == rhs.FoVAdjust &&
		lhs.FoVSpring == rhs.FoVSpring &&
		lhs.FoVSpringSights == rhs.FoVSpringSights &&
		lhs.FoVSpringSightsPassive == rhs.FoVSpringSightsPassive &&
		lhs.FrigateCaptainLateralShiftAmount == rhs.FrigateCaptainLateralShiftAmount &&
		lhs.FrontendModelCameraSpringTime == rhs.FrontendModelCameraSpringTime &&
		lhs.HmdEyeExtraTurnAngle == rhs.HmdEyeExtraTurnAngle &&
		lhs.HmdEyeExtraTurnHeadAngleRange == rhs.HmdEyeExtraTurnHeadAngleRange &&
		lhs.HmdEyeExtraTurnMinHeadAngle == rhs.HmdEyeExtraTurnMinHeadAngle &&
		lhs.HmdEyeLookAngle == rhs.HmdEyeLookAngle &&
		lhs.IndoorCamShakeDamper == rhs.IndoorCamShakeDamper &&
		lhs.InteractionHeadHeightCronus == rhs.InteractionHeadHeightCronus &&
		lhs.InteractionHeadHeightDefault == rhs.InteractionHeadHeightDefault &&
		lhs.InteractionHeadHeightGek == rhs.InteractionHeadHeightGek &&
		lhs.InteractionHeadHeightSpiderman == rhs.InteractionHeadHeightSpiderman &&
		lhs.InteractionHeadHeightVykeen == rhs.InteractionHeadHeightVykeen &&
		lhs.InteractionHeadPosHeightAdjust == rhs.InteractionHeadPosHeightAdjust &&
		lhs.InteractionHeadPosHeightAdjustCronus == rhs.InteractionHeadPosHeightAdjustCronus &&
		lhs.InteractionHeadPosHeightAdjustSpiderman == rhs.InteractionHeadPosHeightAdjustSpiderman &&
		lhs.InteractionHeadPosHeightAdjustVykeen == rhs.InteractionHeadPosHeightAdjustVykeen &&
		lhs.InteractionModeBlendTime == rhs.InteractionModeBlendTime &&
		lhs.InteractionModeFocusCamBlend == rhs.InteractionModeFocusCamBlend &&
		lhs.InteractionModeFoV == rhs.InteractionModeFoV &&
		lhs.InteractionPitchAdjustDeadZone == rhs.InteractionPitchAdjustDeadZone &&
		lhs.InteractionPitchAdjustStrength == rhs.InteractionPitchAdjustStrength &&
		lhs.InteractionPitchAdjustTime == rhs.InteractionPitchAdjustTime &&
		lhs.LocalMissionBoardLateralShiftAmount == rhs.LocalMissionBoardLateralShiftAmount &&
		lhs.MaxCreatureRidingYaw == rhs.MaxCreatureRidingYaw &&
		lhs.MaxFirstPersonCameraPitch == rhs.MaxFirstPersonCameraPitch &&
		lhs.MechCameraArmShootOffsetY == rhs.MechCameraArmShootOffsetY &&
		lhs.MechCameraCombatFakeSpeed == rhs.MechCameraCombatFakeSpeed &&
		lhs.MechCameraExtraYPostLandingBlendTime == rhs.MechCameraExtraYPostLandingBlendTime &&
		lhs.MechCameraNoExtraYTimeAfterLand == rhs.MechCameraNoExtraYTimeAfterLand &&
		lhs.MechCamSpringStrengthMax == rhs.MechCamSpringStrengthMax &&
		lhs.MechCamSpringStrengthMin == rhs.MechCamSpringStrengthMin &&
		lhs.MeleeBoostedFoV == rhs.MeleeBoostedFoV &&
		lhs.MeleeFoV == rhs.MeleeFoV &&
		lhs.MinFirstPersonCameraPitch == rhs.MinFirstPersonCameraPitch &&
		lhs.MinInteractFocusAngle == rhs.MinInteractFocusAngle &&
		lhs.MiniportalFlashStrength == rhs.MiniportalFlashStrength &&
		lhs.MiniportalFlashTime == rhs.MiniportalFlashTime &&
		lhs.ModelViewDefaultPitch == rhs.ModelViewDefaultPitch &&
		lhs.ModelViewDefaultYaw == rhs.ModelViewDefaultYaw &&
		lhs.ModelViewDistSpeed == rhs.ModelViewDistSpeed &&
		lhs.ModelViewFlashTime == rhs.ModelViewFlashTime &&
		lhs.ModelViewInterpTime == rhs.ModelViewInterpTime &&
		lhs.ModelViewMaxDist == rhs.ModelViewMaxDist &&
		lhs.ModelViewMinDist == rhs.ModelViewMinDist &&
		lhs.ModelViewMouseMoveSpeed == rhs.ModelViewMouseMoveSpeed &&
		lhs.ModelViewMouseRotateSnapStrength == rhs.ModelViewMouseRotateSnapStrength &&
		lhs.ModelViewMouseRotateSpeed == rhs.ModelViewMouseRotateSpeed &&
		lhs.ModelViewRotateSpeed == rhs.ModelViewRotateSpeed &&
		lhs.MouseSensitivity == rhs.MouseSensitivity &&
		lhs.NoControlCamShakeDamper == rhs.NoControlCamShakeDamper &&
		lhs.NPCTradeLateralShiftAmount == rhs.NPCTradeLateralShiftAmount &&
		lhs.NPCTradeLateralShiftTime == rhs.NPCTradeLateralShiftTime &&
		lhs.ObjectFocusTime == rhs.ObjectFocusTime &&
		lhs.OffsetCamFOV == rhs.OffsetCamFOV &&
		lhs.OffsetCombatCameraHorizontalAngle == rhs.OffsetCombatCameraHorizontalAngle &&
		lhs.PainShakeTime == rhs.PainShakeTime &&
		lhs.PhotoModeCollisionRadius == rhs.PhotoModeCollisionRadius &&
		lhs.PhotoModeFlashDuration == rhs.PhotoModeFlashDuration &&
		lhs.PhotoModeFlashIntensity == rhs.PhotoModeFlashIntensity &&
		lhs.PhotoModeMaxDistance == rhs.PhotoModeMaxDistance &&
		lhs.PhotoModeMaxDistanceClampBuffer == rhs.PhotoModeMaxDistanceClampBuffer &&
		lhs.PhotoModeMaxDistanceClampForce == rhs.PhotoModeMaxDistanceClampForce &&
		lhs.PhotoModeMaxDistanceSpace == rhs.PhotoModeMaxDistanceSpace &&
		lhs.PhotoModeMoveSpeed == rhs.PhotoModeMoveSpeed &&
		lhs.PhotoModeRollSpeed == rhs.PhotoModeRollSpeed &&
		lhs.PhotoModeTurnSpeed == rhs.PhotoModeTurnSpeed &&
		lhs.PhotoModeVelocitySmoothTime == rhs.PhotoModeVelocitySmoothTime &&
		lhs.PilotDetailsLateralShiftAmount == rhs.PilotDetailsLateralShiftAmount &&
		lhs.RecruitmentLateralShiftAmount == rhs.RecruitmentLateralShiftAmount &&
		lhs.RevealedNPCHeadOffset == rhs.RevealedNPCHeadOffset &&
		lhs.RunningFoVAdjust == rhs.RunningFoVAdjust &&
		lhs.ScanCameraLookAtTime == rhs.ScanCameraLookAtTime &&
		lhs.SClassLandingShakeMultiplier == rhs.SClassLandingShakeMultiplier &&
		lhs.ScreenshotBackDistance == rhs.ScreenshotBackDistance &&
		lhs.ScreenshotBendDownAmount == rhs.ScreenshotBendDownAmount &&
		lhs.ScreenshotHorizonFaceFactor == rhs.ScreenshotHorizonFaceFactor &&
		lhs.ScreenshotHorizonHeight == rhs.ScreenshotHorizonHeight &&
		lhs.ScreenshotInTime == rhs.ScreenshotInTime &&
		lhs.ScreenshotOutTime == rhs.ScreenshotOutTime &&
		lhs.ScreenshotRightDistance == rhs.ScreenshotRightDistance &&
		lhs.ShipBuilderFoV == rhs.ShipBuilderFoV &&
		lhs.ShipCamAimFOV == rhs.ShipCamAimFOV &&
		lhs.ShipCamLookInterp == rhs.ShipCamLookInterp &&
		lhs.ShipCamMinReturnTime == rhs.ShipCamMinReturnTime &&
		lhs.ShipCamMotionInterp == rhs.ShipCamMotionInterp &&
		lhs.ShipCamMotionMaxLagPitchAngle == rhs.ShipCamMotionMaxLagPitchAngle &&
		lhs.ShipCamMotionMaxLagTurnAngle == rhs.ShipCamMotionMaxLagTurnAngle &&
		lhs.ShipCamMotionPitch == rhs.ShipCamMotionPitch &&
		lhs.ShipCamMotionPitchMod == rhs.ShipCamMotionPitchMod &&
		lhs.ShipCamMotionTurn == rhs.ShipCamMotionTurn &&
		lhs.ShipCamPitch == rhs.ShipCamPitch &&
		lhs.ShipCamPitchMod == rhs.ShipCamPitchMod &&
		lhs.ShipCamReturnTime == rhs.ShipCamReturnTime &&
		lhs.ShipCamRollAmountMax == rhs.ShipCamRollAmountMax &&
		lhs.ShipCamRollAmountMin == rhs.ShipCamRollAmountMin &&
		lhs.ShipCamRollSpeedScaler == rhs.ShipCamRollSpeedScaler &&
		lhs.ShipCamSpringStrengthMax == rhs.ShipCamSpringStrengthMax &&
		lhs.ShipCamSpringStrengthMin == rhs.ShipCamSpringStrengthMin &&
		lhs.ShipCamTurn == rhs.ShipCamTurn &&
		lhs.ShipFirstPersonBlendOffset == rhs.ShipFirstPersonBlendOffset &&
		lhs.ShipFirstPersonBlendTime == rhs.ShipFirstPersonBlendTime &&
		lhs.ShipFoVBoost == rhs.ShipFoVBoost &&
		lhs.ShipFoVMax == rhs.ShipFoVMax &&
		lhs.ShipFoVMax3rdPerson == rhs.ShipFoVMax3rdPerson &&
		lhs.ShipFoVMin == rhs.ShipFoVMin &&
		lhs.ShipFoVMin2 == rhs.ShipFoVMin2 &&
		lhs.ShipFoVMin3rdPerson == rhs.ShipFoVMin3rdPerson &&
		lhs.ShipFoVMiniJump == rhs.ShipFoVMiniJump &&
		lhs.ShipFoVSpring == rhs.ShipFoVSpring &&
		lhs.ShipMiniJumpFoVSpring == rhs.ShipMiniJumpFoVSpring &&
		lhs.ShipShakeDamper == rhs.ShipShakeDamper &&
		lhs.ShipThirdPersonBlendOffset == rhs.ShipThirdPersonBlendOffset &&
		lhs.ShipThirdPersonBlendOutOffset == rhs.ShipThirdPersonBlendOutOffset &&
		lhs.ShipThirdPersonBlendOutTime == rhs.ShipThirdPersonBlendOutTime &&
		lhs.ShipThirdPersonBlendTime == rhs.ShipThirdPersonBlendTime &&
		lhs.ShipThirdPersonBlendWithOffsetTime == rhs.ShipThirdPersonBlendWithOffsetTime &&
		lhs.ShipThirdPersonEnterBlendOffset == rhs.ShipThirdPersonEnterBlendOffset &&
		lhs.ShipThirdPersonEnterBlendTime == rhs.ShipThirdPersonEnterBlendTime &&
		lhs.ShipWarpFoV == rhs.ShipWarpFoV &&
		lhs.SpecialVehicleMouseRecentreTime == rhs.SpecialVehicleMouseRecentreTime &&
		lhs.SpecialVehicleMouseRecentreWeaponTime == rhs.SpecialVehicleMouseRecentreWeaponTime &&
		lhs.ThirdPersonAfterIntroCamBlendTime == rhs.ThirdPersonAfterIntroCamBlendTime &&
		lhs.ThirdPersonBlendInTime == rhs.ThirdPersonBlendInTime &&
		lhs.ThirdPersonBlendOutTime == rhs.ThirdPersonBlendOutTime &&
		lhs.ThirdPersonCameraChangeBlendTime == rhs.ThirdPersonCameraChangeBlendTime &&
		lhs.ThirdPersonCameraChangeMinimumBlend == rhs.ThirdPersonCameraChangeMinimumBlend &&
		lhs.ThirdPersonCloseDistance == rhs.ThirdPersonCloseDistance &&
		lhs.ThirdPersonCloseDistanceX == rhs.ThirdPersonCloseDistanceX &&
		lhs.ThirdPersonClosePitch == rhs.ThirdPersonClosePitch &&
		lhs.ThirdPersonCollisionPushOffsetReducerStart == rhs.ThirdPersonCollisionPushOffsetReducerStart &&
		lhs.ThirdPersonCombatFoV == rhs.ThirdPersonCombatFoV &&
		lhs.ThirdPersonDownhillAdjustMaxAngle == rhs.ThirdPersonDownhillAdjustMaxAngle &&
		lhs.ThirdPersonDownhillAdjustMaxAnglePrime == rhs.ThirdPersonDownhillAdjustMaxAnglePrime &&
		lhs.ThirdPersonDownhillAdjustMinAngle == rhs.ThirdPersonDownhillAdjustMinAngle &&
		lhs.ThirdPersonDownhillAdjustMinAnglePrime == rhs.ThirdPersonDownhillAdjustMinAnglePrime &&
		lhs.ThirdPersonDownhillAdjustSpringTimeMax == rhs.ThirdPersonDownhillAdjustSpringTimeMax &&
		lhs.ThirdPersonDownhillAdjustSpringTimeMin == rhs.ThirdPersonDownhillAdjustSpringTimeMin &&
		lhs.ThirdPersonFoV == rhs.ThirdPersonFoV &&
		lhs.ThirdPersonOffsetSpringTime == rhs.ThirdPersonOffsetSpringTime &&
		lhs.ThirdPersonRotationBackAdjustAngleMax == rhs.ThirdPersonRotationBackAdjustAngleMax &&
		lhs.ThirdPersonRotationBackAdjustAngleMin == rhs.ThirdPersonRotationBackAdjustAngleMin &&
		lhs.ThirdPersonSkipIntroCamBlendTime == rhs.ThirdPersonSkipIntroCamBlendTime &&
		lhs.ThirdPersonUphillAdjustCrossSlopeMaxAngle == rhs.ThirdPersonUphillAdjustCrossSlopeMaxAngle &&
		lhs.ThirdPersonUphillAdjustCrossSlopeMinAngle == rhs.ThirdPersonUphillAdjustCrossSlopeMinAngle &&
		lhs.ThirdPersonUphillAdjustMaxAngle == rhs.ThirdPersonUphillAdjustMaxAngle &&
		lhs.ThirdPersonUphillAdjustMaxAnglePrime == rhs.ThirdPersonUphillAdjustMaxAnglePrime &&
		lhs.ThirdPersonUphillAdjustMinAngle == rhs.ThirdPersonUphillAdjustMinAngle &&
		lhs.ThirdPersonUphillAdjustMinAnglePrime == rhs.ThirdPersonUphillAdjustMinAnglePrime &&
		lhs.ThirdPersonUphillAdjustSpringTimeMax == rhs.ThirdPersonUphillAdjustSpringTimeMax &&
		lhs.ThirdPersonUphillAdjustSpringTimeMin == rhs.ThirdPersonUphillAdjustSpringTimeMin &&
		lhs.TogglePerspectiveBlendTime == rhs.TogglePerspectiveBlendTime &&
		lhs.UnderwaterCameraExtraVertOffset == rhs.UnderwaterCameraExtraVertOffset &&
		lhs.VehicleExitFlashStrength == rhs.VehicleExitFlashStrength &&
		lhs.VehicleExitFlashTime == rhs.VehicleExitFlashTime &&
		lhs.VehicleFirstPersonFoV == rhs.VehicleFirstPersonFoV &&
		lhs.VehicleFirstToThirdExitOffsetY == rhs.VehicleFirstToThirdExitOffsetY &&
		lhs.VehicleFirstToThirdExitOffsetZ == rhs.VehicleFirstToThirdExitOffsetZ &&
		lhs.VehicleThirdPersonShootOffsetBlendOutTime == rhs.VehicleThirdPersonShootOffsetBlendOutTime &&
		lhs.VehicleThirdPersonShootOffsetReturnTime == rhs.VehicleThirdPersonShootOffsetReturnTime &&
		lhs.VRShakeMultiplier == rhs.VRShakeMultiplier &&
		lhs.AerialViewCurve == rhs.AerialViewCurve &&
		lhs.CreatureInteractionInterpolateDuringHold == rhs.CreatureInteractionInterpolateDuringHold &&
		lhs.DebugAICam == rhs.DebugAICam &&
		lhs.DebugMoveCam == rhs.DebugMoveCam &&
		lhs.FollowDrawCamProbes == rhs.FollowDrawCamProbes &&
		lhs.LockFollowSpring == rhs.LockFollowSpring &&
		lhs.MaxBob == rhs.MaxBob &&
		lhs.OffsetCombatCameraHorizontal == rhs.OffsetCombatCameraHorizontal &&
		lhs.PauseThirdPersonCamInPause == rhs.PauseThirdPersonCamInPause;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcUnlockableItemTreeGroups
{
	enum class UnlockableItemTreeEnum : uint32_t
	{
		Test = 0,
		BasicBaseParts = 1,
		BasicTechParts = 2,
		BaseParts = 3,
		SpecialBaseParts = 4,
		SuitTech = 5,
		ShipTech = 6,
		WeapTech = 7,
		ExocraftTech = 8,
		CraftProducts = 9,
		FreighterTech = 10,
		S9BaseParts = 11,
		S9ExoTech = 12,
		S9ShipTech = 13,
	};

	NMS_GameComponents::GcUnlockableItemTreeGroups::UnlockableItemTreeEnum UnlockableItemTree;

	friend bool operator==(const GcUnlockableItemTreeGroups& lhs, const GcUnlockableItemTreeGroups& rhs) 
	{
		return lhs.UnlockableItemTree == rhs.UnlockableItemTree;
	}
};

//Dependency: GcUnlockableItemTreeGroups
struct GcRewardOpenUnlockTree
{
	int32_t PageIndexOverride;
	NMS_GameComponents::GcUnlockableItemTreeGroups TreeToOpen;

	friend bool operator==(const GcRewardOpenUnlockTree& lhs, const GcRewardOpenUnlockTree& rhs) 
	{
		return lhs.PageIndexOverride == rhs.PageIndexOverride &&
		lhs.TreeToOpen == rhs.TreeToOpen;
	}
};

struct GcDoShipFlybyMineAsteroids
{
	float Time;

	friend bool operator==(const GcDoShipFlybyMineAsteroids& lhs, const GcDoShipFlybyMineAsteroids& rhs) 
	{
		return lhs.Time == rhs.Time;
	}
};

struct GcNetworkPlayerMarkerComponentData
{

	friend bool operator==(const GcNetworkPlayerMarkerComponentData& lhs, const GcNetworkPlayerMarkerComponentData& rhs) 
	{
		return true;
	}
};

struct GcDoShipFlybyOverhead
{
	float Length;
	float Offset;

	friend bool operator==(const GcDoShipFlybyOverhead& lhs, const GcDoShipFlybyOverhead& rhs) 
	{
		return lhs.Length == rhs.Length &&
		lhs.Offset == rhs.Offset;
	}
};

struct GcDoShipLandNextToPlayer
{
	float Length;
	float Offset;

	friend bool operator==(const GcDoShipLandNextToPlayer& lhs, const GcDoShipLandNextToPlayer& rhs) 
	{
		return lhs.Length == rhs.Length &&
		lhs.Offset == rhs.Offset;
	}
};

struct GcDoShipReceiveHail
{

	friend bool operator==(const GcDoShipReceiveHail& lhs, const GcDoShipReceiveHail& rhs) 
	{
		return true;
	}
};

struct GcShipMessage
{
	enum class MessageTypeEnum : uint32_t
	{
		Leave = 0,
		Fight = 1,
	};

	NMS_GameComponents::GcShipMessage::MessageTypeEnum MessageType;

	friend bool operator==(const GcShipMessage& lhs, const GcShipMessage& rhs) 
	{
		return lhs.MessageType == rhs.MessageType;
	}
};

//Dependency: GcShipMessage
struct GcDoShipReceiveMessage
{
	NMS_GameComponents::GcShipMessage ShipMessage;

	friend bool operator==(const GcDoShipReceiveMessage& lhs, const GcDoShipReceiveMessage& rhs) 
	{
		return lhs.ShipMessage == rhs.ShipMessage;
	}
};

//Dependency: VariableSizeString
struct GcSentinelResource
{
	NMS::VariableSizeString Resource;
	int32_t BaseHealth;
	int32_t HealthIncreasePerLevel;
	float RepairThreshold;
	float RepairTime;
	float Scale;

	friend bool operator==(const GcSentinelResource& lhs, const GcSentinelResource& rhs) 
	{
		return lhs.Resource == rhs.Resource &&
		lhs.BaseHealth == rhs.BaseHealth &&
		lhs.HealthIncreasePerLevel == rhs.HealthIncreasePerLevel &&
		lhs.RepairThreshold == rhs.RepairThreshold &&
		lhs.RepairTime == rhs.RepairTime &&
		lhs.Scale == rhs.Scale;
	}
};

//Dependency: GcSentinelResource
//Dependency: GcDroneControlData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: NMSString0x10
struct GcDroneData
{
	NMS::Colour EyeColourAlert;
	NMS::Colour EyeColourPatrol;
	NMS::Colour EyeColourSearch;
	NMS_GameComponents::GcSentinelResource CoverResource;
	NMS::NMSString0x10 DamageEffect;
	NMS::NMSString0x10 MeleeAttackDamageType;
	NMS::NMSString0x10 SpinAttackDamageType;
	NMS_GameComponents::GcDroneControlData Attack;
	NMS_GameComponents::GcDroneControlData Friendly;
	NMS_GameComponents::GcDroneControlData FriendlyFast;
	NMS_GameComponents::GcDroneControlData MeleeAttack;
	NMS_GameComponents::GcDroneControlData Patrol;
	NMS_GameComponents::GcDroneControlData Repair;
	NMS_GameComponents::GcDroneControlData Scan;
	NMS_GameComponents::GcDroneControlData Search;
	NMS_GameComponents::GcDroneControlData Stun;
	NMS_GameComponents::GcDroneControlData Summon;
	NMS_GameComponents::GcDroneControlData ToCover;
	float AttackActivateTime;
	float AttackAlertFailTime;
	float AttackAngle;
	float AttackBobAmount;
	float AttackBobRotation;
	float AttackMaxDistanceFromAlert;
	float AttackMinSpeed;
	float AttackMoveAngle;
	float AttackMoveLookDistanceMin;
	float AttackMoveLookDistanceRange;
	float AttackMoveMinChoiceTime;
	float BaseAnimationSpeed;
	float CollisionAvoidOffset;
	float CoverPlacementActivateTime;
	float CoverPlacementActivateTimeMaxRandomExtra;
	float CoverPlacementCooldownTime;
	int32_t CoverPlacementMaxActiveCover;
	float CoverPlacementMaxDistanceFromSelf;
	float CoverPlacementMinDistanceFromSelf;
	float CoverPlacementMinDistanceFromTarget;
	float CoverPlacementUpOffset;
	float DamageEffectHealthPercentThreshold;
	float DroneAlertTime;
	float DronePatrolDistanceMax;
	float DronePatrolDistanceMin;
	int32_t DronePatrolHonkProbability;
	float DronePatrolHonkRadius;
	float DronePatrolHonkTime;
	float DronePatrolInspectDistanceMax;
	float DronePatrolInspectDistanceMin;
	float DronePatrolInspectRadius;
	float DronePatrolInspectSwitchTime;
	float DronePatrolInspectTargetTime;
	float DronePatrolRepelDistance;
	float DronePatrolRepelStrength;
	float DronePatrolTargetDistance;
	float DroneScanPlayerTime;
	float DroneSearchCriminalScanRadius;
	float DroneSearchCriminalScanRadiusInShip;
	float DroneSearchCriminalScanRadiusWanted;
	float DroneSearchPauseTime;
	float DroneSearchRadius;
	float DroneSearchTime;
	float EngineDirAngleMax;
	float EngineDirSpeedMin;
	float EyeAngleMax;
	float EyeFocusTime;
	int32_t EyeNumRandomsMax;
	int32_t EyeNumRandomsMin;
	float EyeOffset;
	float EyeTimeMax;
	float EyeTimeMin;
	float HideBehindCoverHealthPercentThreshold;
	float HideBehindCoverSearchRadius;
	float LeanAmount;
	float LeanSpeedMin;
	float LeanSpeedRange;
	float MeleeAttackDamageRadius;
	float MeleeAttackHomingStrength;
	float MeleeAttackMaxTime;
	float MeleeAttackWindUpTime;
	float SpinAttackCooldown;
	float SpinAttackDamageRadius;
	float SpinAttackDuration;
	float SpinAttackHomingStrength;
	float SpinAttackRange;
	float SpinAttackRevolutions;
	bool EnableCoverPlacement;
	NMS_Toolkit::TkCurveType SpinAttackRevolutionCurve;

	friend bool operator==(const GcDroneData& lhs, const GcDroneData& rhs) 
	{
		return lhs.EyeColourAlert == rhs.EyeColourAlert &&
		lhs.EyeColourPatrol == rhs.EyeColourPatrol &&
		lhs.EyeColourSearch == rhs.EyeColourSearch &&
		lhs.CoverResource == rhs.CoverResource &&
		lhs.DamageEffect == rhs.DamageEffect &&
		lhs.MeleeAttackDamageType == rhs.MeleeAttackDamageType &&
		lhs.SpinAttackDamageType == rhs.SpinAttackDamageType &&
		lhs.Attack == rhs.Attack &&
		lhs.Friendly == rhs.Friendly &&
		lhs.FriendlyFast == rhs.FriendlyFast &&
		lhs.MeleeAttack == rhs.MeleeAttack &&
		lhs.Patrol == rhs.Patrol &&
		lhs.Repair == rhs.Repair &&
		lhs.Scan == rhs.Scan &&
		lhs.Search == rhs.Search &&
		lhs.Stun == rhs.Stun &&
		lhs.Summon == rhs.Summon &&
		lhs.ToCover == rhs.ToCover &&
		lhs.AttackActivateTime == rhs.AttackActivateTime &&
		lhs.AttackAlertFailTime == rhs.AttackAlertFailTime &&
		lhs.AttackAngle == rhs.AttackAngle &&
		lhs.AttackBobAmount == rhs.AttackBobAmount &&
		lhs.AttackBobRotation == rhs.AttackBobRotation &&
		lhs.AttackMaxDistanceFromAlert == rhs.AttackMaxDistanceFromAlert &&
		lhs.AttackMinSpeed == rhs.AttackMinSpeed &&
		lhs.AttackMoveAngle == rhs.AttackMoveAngle &&
		lhs.AttackMoveLookDistanceMin == rhs.AttackMoveLookDistanceMin &&
		lhs.AttackMoveLookDistanceRange == rhs.AttackMoveLookDistanceRange &&
		lhs.AttackMoveMinChoiceTime == rhs.AttackMoveMinChoiceTime &&
		lhs.BaseAnimationSpeed == rhs.BaseAnimationSpeed &&
		lhs.CollisionAvoidOffset == rhs.CollisionAvoidOffset &&
		lhs.CoverPlacementActivateTime == rhs.CoverPlacementActivateTime &&
		lhs.CoverPlacementActivateTimeMaxRandomExtra == rhs.CoverPlacementActivateTimeMaxRandomExtra &&
		lhs.CoverPlacementCooldownTime == rhs.CoverPlacementCooldownTime &&
		lhs.CoverPlacementMaxActiveCover == rhs.CoverPlacementMaxActiveCover &&
		lhs.CoverPlacementMaxDistanceFromSelf == rhs.CoverPlacementMaxDistanceFromSelf &&
		lhs.CoverPlacementMinDistanceFromSelf == rhs.CoverPlacementMinDistanceFromSelf &&
		lhs.CoverPlacementMinDistanceFromTarget == rhs.CoverPlacementMinDistanceFromTarget &&
		lhs.CoverPlacementUpOffset == rhs.CoverPlacementUpOffset &&
		lhs.DamageEffectHealthPercentThreshold == rhs.DamageEffectHealthPercentThreshold &&
		lhs.DroneAlertTime == rhs.DroneAlertTime &&
		lhs.DronePatrolDistanceMax == rhs.DronePatrolDistanceMax &&
		lhs.DronePatrolDistanceMin == rhs.DronePatrolDistanceMin &&
		lhs.DronePatrolHonkProbability == rhs.DronePatrolHonkProbability &&
		lhs.DronePatrolHonkRadius == rhs.DronePatrolHonkRadius &&
		lhs.DronePatrolHonkTime == rhs.DronePatrolHonkTime &&
		lhs.DronePatrolInspectDistanceMax == rhs.DronePatrolInspectDistanceMax &&
		lhs.DronePatrolInspectDistanceMin == rhs.DronePatrolInspectDistanceMin &&
		lhs.DronePatrolInspectRadius == rhs.DronePatrolInspectRadius &&
		lhs.DronePatrolInspectSwitchTime == rhs.DronePatrolInspectSwitchTime &&
		lhs.DronePatrolInspectTargetTime == rhs.DronePatrolInspectTargetTime &&
		lhs.DronePatrolRepelDistance == rhs.DronePatrolRepelDistance &&
		lhs.DronePatrolRepelStrength == rhs.DronePatrolRepelStrength &&
		lhs.DronePatrolTargetDistance == rhs.DronePatrolTargetDistance &&
		lhs.DroneScanPlayerTime == rhs.DroneScanPlayerTime &&
		lhs.DroneSearchCriminalScanRadius == rhs.DroneSearchCriminalScanRadius &&
		lhs.DroneSearchCriminalScanRadiusInShip == rhs.DroneSearchCriminalScanRadiusInShip &&
		lhs.DroneSearchCriminalScanRadiusWanted == rhs.DroneSearchCriminalScanRadiusWanted &&
		lhs.DroneSearchPauseTime == rhs.DroneSearchPauseTime &&
		lhs.DroneSearchRadius == rhs.DroneSearchRadius &&
		lhs.DroneSearchTime == rhs.DroneSearchTime &&
		lhs.EngineDirAngleMax == rhs.EngineDirAngleMax &&
		lhs.EngineDirSpeedMin == rhs.EngineDirSpeedMin &&
		lhs.EyeAngleMax == rhs.EyeAngleMax &&
		lhs.EyeFocusTime == rhs.EyeFocusTime &&
		lhs.EyeNumRandomsMax == rhs.EyeNumRandomsMax &&
		lhs.EyeNumRandomsMin == rhs.EyeNumRandomsMin &&
		lhs.EyeOffset == rhs.EyeOffset &&
		lhs.EyeTimeMax == rhs.EyeTimeMax &&
		lhs.EyeTimeMin == rhs.EyeTimeMin &&
		lhs.HideBehindCoverHealthPercentThreshold == rhs.HideBehindCoverHealthPercentThreshold &&
		lhs.HideBehindCoverSearchRadius == rhs.HideBehindCoverSearchRadius &&
		lhs.LeanAmount == rhs.LeanAmount &&
		lhs.LeanSpeedMin == rhs.LeanSpeedMin &&
		lhs.LeanSpeedRange == rhs.LeanSpeedRange &&
		lhs.MeleeAttackDamageRadius == rhs.MeleeAttackDamageRadius &&
		lhs.MeleeAttackHomingStrength == rhs.MeleeAttackHomingStrength &&
		lhs.MeleeAttackMaxTime == rhs.MeleeAttackMaxTime &&
		lhs.MeleeAttackWindUpTime == rhs.MeleeAttackWindUpTime &&
		lhs.SpinAttackCooldown == rhs.SpinAttackCooldown &&
		lhs.SpinAttackDamageRadius == rhs.SpinAttackDamageRadius &&
		lhs.SpinAttackDuration == rhs.SpinAttackDuration &&
		lhs.SpinAttackHomingStrength == rhs.SpinAttackHomingStrength &&
		lhs.SpinAttackRange == rhs.SpinAttackRange &&
		lhs.SpinAttackRevolutions == rhs.SpinAttackRevolutions &&
		lhs.EnableCoverPlacement == rhs.EnableCoverPlacement &&
		lhs.SpinAttackRevolutionCurve == rhs.SpinAttackRevolutionCurve;
	}
};

//Dependency: GcDroneData
//Dependency: NMSString0x10
struct GcDroneDataWithId
{
	NMS_GameComponents::GcDroneData Data;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcDroneDataWithId& lhs, const GcDroneDataWithId& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.Id == rhs.Id;
	}
};

struct GcMissionConditionBasePowerGenerated
{
	int32_t Amount;
	bool MustBeSpare;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionConditionBasePowerGenerated& lhs, const GcMissionConditionBasePowerGenerated& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.MustBeSpare == rhs.MustBeSpare &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

//Dependency: VariableSizeString
struct GcDroneResource
{
	NMS::VariableSizeString Resource;

	friend bool operator==(const GcDroneResource& lhs, const GcDroneResource& rhs) 
	{
		return lhs.Resource == rhs.Resource;
	}
};

//Dependency: NMSString0x10
struct GcUnlockablePlatformReward
{
	NMS::NMSString0x10 ProductId;
	NMS::NMSString0x10 RewardId;

	friend bool operator==(const GcUnlockablePlatformReward& lhs, const GcUnlockablePlatformReward& rhs) 
	{
		return lhs.ProductId == rhs.ProductId &&
		lhs.RewardId == rhs.RewardId;
	}
};

//Dependency: GcUnlockablePlatformReward
struct GcUnlockablePlatformRewards
{
	std::vector<NMS_GameComponents::GcUnlockablePlatformReward> Table;

	friend bool operator==(const GcUnlockablePlatformRewards& lhs, const GcUnlockablePlatformRewards& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcDroneTypes
{
	enum class DroneTypeEnum : uint32_t
	{
		Patrol = 0,
		Combat = 1,
		Corrupted = 2,
	};

	NMS_GameComponents::GcDroneTypes::DroneTypeEnum DroneType;

	friend bool operator==(const GcDroneTypes& lhs, const GcDroneTypes& rhs) 
	{
		return lhs.DroneType == rhs.DroneType;
	}
};

//Dependency: Vector4f
struct GcPhotoModeSettings
{
	enum class DepthOfFieldSettingEnum : uint32_t
	{
		Off = 0,
		Mid = 1,
		On = 2,
		Macro = 3,
	};

	NMS::Vector4f SunDir;
	float Bloom;
	float CloudAmount;
	float DepthOfFieldDistance;
	float DepthOfFieldDistanceSpace;
	float DepthOfFieldPhysAperture;
	float DepthOfFieldPhysConvergence;
	NMS_GameComponents::GcPhotoModeSettings::DepthOfFieldSettingEnum DepthOfFieldSetting;
	int32_t Filter;
	float Fog;
	float FoV;
	float HalfFocalPlaneDepth;
	float HalfFocalPlaneDepthSpace;
	float Vignette;

	friend bool operator==(const GcPhotoModeSettings& lhs, const GcPhotoModeSettings& rhs) 
	{
		return lhs.SunDir == rhs.SunDir &&
		lhs.Bloom == rhs.Bloom &&
		lhs.CloudAmount == rhs.CloudAmount &&
		lhs.DepthOfFieldDistance == rhs.DepthOfFieldDistance &&
		lhs.DepthOfFieldDistanceSpace == rhs.DepthOfFieldDistanceSpace &&
		lhs.DepthOfFieldPhysAperture == rhs.DepthOfFieldPhysAperture &&
		lhs.DepthOfFieldPhysConvergence == rhs.DepthOfFieldPhysConvergence &&
		lhs.DepthOfFieldSetting == rhs.DepthOfFieldSetting &&
		lhs.Filter == rhs.Filter &&
		lhs.Fog == rhs.Fog &&
		lhs.FoV == rhs.FoV &&
		lhs.HalfFocalPlaneDepth == rhs.HalfFocalPlaneDepth &&
		lhs.HalfFocalPlaneDepthSpace == rhs.HalfFocalPlaneDepthSpace &&
		lhs.Vignette == rhs.Vignette;
	}
};

//Dependency: GcMissionSequenceDetailMessagePoint
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceDetailMessage
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Image;
	NMS::NMSString0x20A Title;
	NMS::VariableSizeString DebugText;
	std::vector<NMS_GameComponents::GcMissionSequenceDetailMessagePoint> Points;
	NMS::NMSString0x10 TakeImageFromItemIcon;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool TakeDataFromSeason;

	friend bool operator==(const GcMissionSequenceDetailMessage& lhs, const GcMissionSequenceDetailMessage& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.Image == rhs.Image &&
		lhs.Title == rhs.Title &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Points == rhs.Points &&
		lhs.TakeImageFromItemIcon == rhs.TakeImageFromItemIcon &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.TakeDataFromSeason == rhs.TakeDataFromSeason;
	}
};

//Dependency: GcInventoryLayout
//Dependency: NMSString0x10
struct GcSeasonTransferInventoryConfig
{
	NMS_GameComponents::GcInventoryLayout Layout;
	std::vector<NMS::NMSString0x10> SlotItemFilterIDs;
	int32_t Width;

	friend bool operator==(const GcSeasonTransferInventoryConfig& lhs, const GcSeasonTransferInventoryConfig& rhs) 
	{
		return lhs.Layout == rhs.Layout &&
		lhs.SlotItemFilterIDs == rhs.SlotItemFilterIDs &&
		lhs.Width == rhs.Width;
	}
};

//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcSeasonPetConstraints
{
	NMS::NMSString0x10 CreatureId;
	uint64_t TimeSinceBirth;
	uint64_t TimeSinceLastEgg;
	NMS_GameComponents::GcBiomeType Biome;
	float MaxRelativeScale;
	float MinRelativeScale;
	float StartingTrust;
	bool SpecificBiome;

	friend bool operator==(const GcSeasonPetConstraints& lhs, const GcSeasonPetConstraints& rhs) 
	{
		return lhs.CreatureId == rhs.CreatureId &&
		lhs.TimeSinceBirth == rhs.TimeSinceBirth &&
		lhs.TimeSinceLastEgg == rhs.TimeSinceLastEgg &&
		lhs.Biome == rhs.Biome &&
		lhs.MaxRelativeScale == rhs.MaxRelativeScale &&
		lhs.MinRelativeScale == rhs.MinRelativeScale &&
		lhs.StartingTrust == rhs.StartingTrust &&
		lhs.SpecificBiome == rhs.SpecificBiome;
	}
};

struct GcSandwormTimerAndFrequencyOverride
{
	uint64_t PackedUA;
	float SpawnChance;
	float Timer;

	friend bool operator==(const GcSandwormTimerAndFrequencyOverride& lhs, const GcSandwormTimerAndFrequencyOverride& rhs) 
	{
		return lhs.PackedUA == rhs.PackedUA &&
		lhs.SpawnChance == rhs.SpawnChance &&
		lhs.Timer == rhs.Timer;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSeasonalMilestoneEncryption
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Subtitle;
	NMS::NMSString0x20A TitleUpper;
	NMS_Toolkit::TkTextureResource HoverPopupIcon;
	NMS_Toolkit::TkTextureResource Patch;
	NMS::NMSString0x10 DecryptMissionId;
	int32_t DecryptMissionSeed;
	bool IsEncrypted;

	friend bool operator==(const GcSeasonalMilestoneEncryption& lhs, const GcSeasonalMilestoneEncryption& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.Subtitle == rhs.Subtitle &&
		lhs.TitleUpper == rhs.TitleUpper &&
		lhs.HoverPopupIcon == rhs.HoverPopupIcon &&
		lhs.Patch == rhs.Patch &&
		lhs.DecryptMissionId == rhs.DecryptMissionId &&
		lhs.DecryptMissionSeed == rhs.DecryptMissionSeed &&
		lhs.IsEncrypted == rhs.IsEncrypted;
	}
};

//Dependency: GcSeasonalMilestoneEncryption
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x200
struct GcSeasonalMilestone
{
	NMS_GameComponents::GcSeasonalMilestoneEncryption Encryption;
	NMS::NMSString0x20A CantRewardMessage;
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A DescriptionDone;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A TitleUpper;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource IconGrey;
	NMS_Toolkit::TkTextureResource MissionIcon;
	NMS_Toolkit::TkTextureResource MissionIconNotSelected;
	NMS_Toolkit::TkTextureResource MissionIconSelected;
	NMS::NMSString0x10 IdToUseInMissionData;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 RewardSwitchAlt;
	float Amount;
	int32_t BlockRendezvousMilestoneSeed;
	int32_t MilestoneIndex;
	int32_t RendezvousIndex;
	int32_t StageIndex;
	NMS::NMSString0x200 CantClaimRewardDescription;
	NMS::NMSString0x200 RewardDescription;
	bool DontAttemptFallbackTextSubs;
	bool GreyIfCantStart;
	bool IsOptional;
	bool IsRendezvous;
	bool IsStageControl;

	friend bool operator==(const GcSeasonalMilestone& lhs, const GcSeasonalMilestone& rhs) 
	{
		return lhs.Encryption == rhs.Encryption &&
		lhs.CantRewardMessage == rhs.CantRewardMessage &&
		lhs.Description == rhs.Description &&
		lhs.DescriptionDone == rhs.DescriptionDone &&
		lhs.Title == rhs.Title &&
		lhs.TitleUpper == rhs.TitleUpper &&
		lhs.Icon == rhs.Icon &&
		lhs.IconGrey == rhs.IconGrey &&
		lhs.MissionIcon == rhs.MissionIcon &&
		lhs.MissionIconNotSelected == rhs.MissionIconNotSelected &&
		lhs.MissionIconSelected == rhs.MissionIconSelected &&
		lhs.IdToUseInMissionData == rhs.IdToUseInMissionData &&
		lhs.Mission == rhs.Mission &&
		lhs.Reward == rhs.Reward &&
		lhs.RewardSwitchAlt == rhs.RewardSwitchAlt &&
		lhs.Amount == rhs.Amount &&
		lhs.BlockRendezvousMilestoneSeed == rhs.BlockRendezvousMilestoneSeed &&
		lhs.MilestoneIndex == rhs.MilestoneIndex &&
		lhs.RendezvousIndex == rhs.RendezvousIndex &&
		lhs.StageIndex == rhs.StageIndex &&
		lhs.CantClaimRewardDescription == rhs.CantClaimRewardDescription &&
		lhs.RewardDescription == rhs.RewardDescription &&
		lhs.DontAttemptFallbackTextSubs == rhs.DontAttemptFallbackTextSubs &&
		lhs.GreyIfCantStart == rhs.GreyIfCantStart &&
		lhs.IsOptional == rhs.IsOptional &&
		lhs.IsRendezvous == rhs.IsRendezvous &&
		lhs.IsStageControl == rhs.IsStageControl;
	}
};

//Dependency: GcSeasonalMilestone
//Dependency: NMSString0x20A
struct GcSeasonalStage
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcSeasonalMilestone> Milestones;

	friend bool operator==(const GcSeasonalStage& lhs, const GcSeasonalStage& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.Title == rhs.Title &&
		lhs.Milestones == rhs.Milestones;
	}
};

//Dependency: NMSString0x10
struct GcPersistedStatData
{
	NMS::NMSString0x10 GroupId;
	NMS::NMSString0x10 StatId;

	friend bool operator==(const GcPersistedStatData& lhs, const GcPersistedStatData& rhs) 
	{
		return lhs.GroupId == rhs.GroupId &&
		lhs.StatId == rhs.StatId;
	}
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcLegality
//Dependency: TkTextureResource
//Dependency: GcTradeCategory
//Dependency: GcScannerIconTypes
//Dependency: GcRarity
//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcRealitySubstanceData
{
	NMS::Colour Colour;
	NMS::Colour WorldColour;
	NMS_Toolkit::TkModelResource DebrisFile;
	NMS::NMSString0x20A PinObjective;
	NMS::NMSString0x20A PinObjectiveMessage;
	NMS::NMSString0x20A PinObjectiveTip;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 ID;
	NMS::VariableSizeString Subtitle;
	NMS::NMSString0x10 WikiMissionID;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	int32_t BaseValue;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	int32_t ChargeValue;
	float EconomyInfluenceMultiplier;
	NMS_GameComponents::GcLegality Legality;
	float NormalisedValueOffWorld;
	float NormalisedValueOnWorld;
	NMS_GameComponents::GcScannerIconTypes PinObjectiveScannableType;
	NMS_GameComponents::GcRarity Rarity;
	int32_t StackMultiplier;
	NMS_GameComponents::GcTradeCategory TradeCategory;
	NMS::NMSString0x20 Name;
	NMS::NMSString0x20 NameLower;
	NMS::NMSString0x20 Symbol;
	bool CookingIngredient;
	bool EasyToRefine;
	bool EggModifierIngredient;
	bool GoodForSelling;
	bool OnlyFoundInPurpleSytems;
	bool WikiEnabled;

	friend bool operator==(const GcRealitySubstanceData& lhs, const GcRealitySubstanceData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.WorldColour == rhs.WorldColour &&
		lhs.DebrisFile == rhs.DebrisFile &&
		lhs.PinObjective == rhs.PinObjective &&
		lhs.PinObjectiveMessage == rhs.PinObjectiveMessage &&
		lhs.PinObjectiveTip == rhs.PinObjectiveTip &&
		lhs.Icon == rhs.Icon &&
		lhs.Description == rhs.Description &&
		lhs.ID == rhs.ID &&
		lhs.Subtitle == rhs.Subtitle &&
		lhs.WikiMissionID == rhs.WikiMissionID &&
		lhs.Cost == rhs.Cost &&
		lhs.BaseValue == rhs.BaseValue &&
		lhs.Category == rhs.Category &&
		lhs.ChargeValue == rhs.ChargeValue &&
		lhs.EconomyInfluenceMultiplier == rhs.EconomyInfluenceMultiplier &&
		lhs.Legality == rhs.Legality &&
		lhs.NormalisedValueOffWorld == rhs.NormalisedValueOffWorld &&
		lhs.NormalisedValueOnWorld == rhs.NormalisedValueOnWorld &&
		lhs.PinObjectiveScannableType == rhs.PinObjectiveScannableType &&
		lhs.Rarity == rhs.Rarity &&
		lhs.StackMultiplier == rhs.StackMultiplier &&
		lhs.TradeCategory == rhs.TradeCategory &&
		lhs.Name == rhs.Name &&
		lhs.NameLower == rhs.NameLower &&
		lhs.Symbol == rhs.Symbol &&
		lhs.CookingIngredient == rhs.CookingIngredient &&
		lhs.EasyToRefine == rhs.EasyToRefine &&
		lhs.EggModifierIngredient == rhs.EggModifierIngredient &&
		lhs.GoodForSelling == rhs.GoodForSelling &&
		lhs.OnlyFoundInPurpleSytems == rhs.OnlyFoundInPurpleSytems &&
		lhs.WikiEnabled == rhs.WikiEnabled;
	}
};

struct GcTechnologyRarity
{
	enum class TechnologyRarityEnum : uint32_t
	{
		Normal = 0,
		VeryCommon = 1,
		Common = 2,
		Rare = 3,
		VeryRare = 4,
		Impossible = 5,
		Always = 6,
	};

	NMS_GameComponents::GcTechnologyRarity::TechnologyRarityEnum TechnologyRarity;

	friend bool operator==(const GcTechnologyRarity& lhs, const GcTechnologyRarity& rhs) 
	{
		return lhs.TechnologyRarity == rhs.TechnologyRarity;
	}
};

//Dependency: GcTechnologyRequirement
//Dependency: GcStatsBonus
//Dependency: GcRealitySubstanceCategory
//Dependency: GcTechnologyCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcAlienRace
//Dependency: GcStatsTypes
//Dependency: GcTechnologyRarity
//Dependency: TkTextureResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcTechnology
{
	NMS::Colour Colour;
	NMS::Colour LinkColour;
	NMS::Colour UpgradeColour;
	NMS::NMSString0x20A FocusLocator;
	NMS::NMSString0x20A Group;
	NMS::NMSString0x20A HintEnd;
	NMS::NMSString0x20A HintStart;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 AmmoId;
	std::vector<NMS::NMSString0x10> ChargeBy;
	NMS::VariableSizeString DamagedDescription;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 ParentTechId;
	NMS::NMSString0x10 RequiredTech;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> Requirements;
	NMS::NMSString0x10 RewardGroup;
	std::vector<NMS_GameComponents::GcStatsBonus> StatBonuses;
	NMS::VariableSizeString Subtitle;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	NMS_GameComponents::GcStatsTypes BaseStat;
	int32_t BaseValue;
	NMS_GameComponents::GcTechnologyCategory Category;
	int32_t ChargeAmount;
	float ChargeMultiplier;
	NMS_GameComponents::GcRealitySubstanceCategory ChargeType;
	NMS_GameComponents::GcAlienRace DispensingRace;
	int32_t FragmentCost;
	int32_t Level;
	NMS_GameComponents::GcTechnologyRarity Rarity;
	int32_t RequiredLevel;
	int32_t RequiredRank;
	NMS_GameComponents::GcTechnologyRarity TechShopRarity;
	float Value;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	bool BrokenSlotTech;
	bool BuildFullyCharged;
	bool Chargeable;
	bool Core;
	bool ExclusivePrimaryStat;
	bool IsTemplate;
	bool NeverPinnable;
	bool PrimaryItem;
	bool Procedural;
	bool RepairTech;
	bool Teach;
	bool Upgrade;
	bool UsesAmmo;
	bool WikiEnabled;

	friend bool operator==(const GcTechnology& lhs, const GcTechnology& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.LinkColour == rhs.LinkColour &&
		lhs.UpgradeColour == rhs.UpgradeColour &&
		lhs.FocusLocator == rhs.FocusLocator &&
		lhs.Group == rhs.Group &&
		lhs.HintEnd == rhs.HintEnd &&
		lhs.HintStart == rhs.HintStart &&
		lhs.Icon == rhs.Icon &&
		lhs.AmmoId == rhs.AmmoId &&
		lhs.ChargeBy == rhs.ChargeBy &&
		lhs.DamagedDescription == rhs.DamagedDescription &&
		lhs.Description == rhs.Description &&
		lhs.ID == rhs.ID &&
		lhs.ParentTechId == rhs.ParentTechId &&
		lhs.RequiredTech == rhs.RequiredTech &&
		lhs.Requirements == rhs.Requirements &&
		lhs.RewardGroup == rhs.RewardGroup &&
		lhs.StatBonuses == rhs.StatBonuses &&
		lhs.Subtitle == rhs.Subtitle &&
		lhs.Cost == rhs.Cost &&
		lhs.BaseStat == rhs.BaseStat &&
		lhs.BaseValue == rhs.BaseValue &&
		lhs.Category == rhs.Category &&
		lhs.ChargeAmount == rhs.ChargeAmount &&
		lhs.ChargeMultiplier == rhs.ChargeMultiplier &&
		lhs.ChargeType == rhs.ChargeType &&
		lhs.DispensingRace == rhs.DispensingRace &&
		lhs.FragmentCost == rhs.FragmentCost &&
		lhs.Level == rhs.Level &&
		lhs.Rarity == rhs.Rarity &&
		lhs.RequiredLevel == rhs.RequiredLevel &&
		lhs.RequiredRank == rhs.RequiredRank &&
		lhs.TechShopRarity == rhs.TechShopRarity &&
		lhs.Value == rhs.Value &&
		lhs.Name == rhs.Name &&
		lhs.NameLower == rhs.NameLower &&
		lhs.BrokenSlotTech == rhs.BrokenSlotTech &&
		lhs.BuildFullyCharged == rhs.BuildFullyCharged &&
		lhs.Chargeable == rhs.Chargeable &&
		lhs.Core == rhs.Core &&
		lhs.ExclusivePrimaryStat == rhs.ExclusivePrimaryStat &&
		lhs.IsTemplate == rhs.IsTemplate &&
		lhs.NeverPinnable == rhs.NeverPinnable &&
		lhs.PrimaryItem == rhs.PrimaryItem &&
		lhs.Procedural == rhs.Procedural &&
		lhs.RepairTech == rhs.RepairTech &&
		lhs.Teach == rhs.Teach &&
		lhs.Upgrade == rhs.Upgrade &&
		lhs.UsesAmmo == rhs.UsesAmmo &&
		lhs.WikiEnabled == rhs.WikiEnabled;
	}
};

//Dependency: GcInventoryContainer
//Dependency: GcPetData
//Dependency: GcInventoryLayout
//Dependency: GcTradeData
//Dependency: GcSpaceshipClasses
//Dependency: GcProductData
//Dependency: GcMissionSequenceDetailMessage
//Dependency: GcScanEventTable
//Dependency: NMSString0x200
//Dependency: GcSeasonTransferInventoryConfig
//Dependency: GcSeasonPetConstraints
//Dependency: GcSandwormTimerAndFrequencyOverride
//Dependency: GcSeasonalStage
//Dependency: GcDifficultySettingsData
//Dependency: GcPersistedStatData
//Dependency: GcRealitySubstanceData
//Dependency: GcTechnology
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcBuildingClassification
//Dependency: GcDifficultyPresetType
//Dependency: GcAlienRace
//Dependency: GcGameMode
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: NMSString0x20
struct GcSeasonalGameModeData
{
	NMS_GameComponents::GcPetData SpecificPets[18];
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS_GameComponents::GcTradeData SeasonalUAStationTradeData;
	NMS_GameComponents::GcMissionSequenceDetailMessage InitialJoaoBox;
	NMS_GameComponents::GcMissionSequenceDetailMessage InitialJoaoBoxNoMainSave;
	NMS_GameComponents::GcSeasonTransferInventoryConfig SeasonTransferInventoryConfig;
	NMS::NMSString0x20A CommunityProgressTitle;
	NMS::NMSString0x20A CommunityTierCompleteLabel;
	NMS::NMSString0x20A CommunityTierLabel;
	NMS::NMSString0x20A CommunityTierProgressLabel;
	NMS::NMSString0x20A FinalCantRewardMessage;
	NMS::NMSString0x20A FinalStageTitle;
	NMS::NMSString0x20A MainMissionMessage;
	NMS::NMSString0x20A MainMissionTitle;
	NMS::NMSString0x20A MilestoneWithStageLocId;
	NMS::NMSString0x20A SeasonName;
	NMS::NMSString0x20A SeasonNameUpper;
	NMS_Toolkit::TkTextureResource MainIcon;
	NMS_GameComponents::GcInventoryLayout ShipInventoryLayout;
	NMS_GameComponents::GcInventoryLayout ShipTechInventoryLayout;
	NMS_GameComponents::GcInventoryLayout WeaponInventoryLayout;
	std::vector<NMS::NMSString0x10> AdditionalTradeProducts;
	NMS::NMSString0x10 CreateContextSaveDataMask;
	NMS::NMSString0x10 FinalReward;
	NMS::NMSString0x10 FinalRewardSwitchAlt;
	std::vector<NMS::NMSString0x10> ForgottenProducts;
	NMS::VariableSizeString FreighterBaseOverrideFilename;
	NMS::NMSString0x10 IntroSequencePOI;
	std::vector<NMS::NMSString0x10> NeverLearnableTech;
	std::vector<NMS::NMSString0x10> NeverTradeProducts;
	NMS::VariableSizeString OverrideMTFilename;
	std::vector<NMS_GameComponents::GcProductData> ProductTable;
	std::vector<NMS_GameComponents::GcSeasonPetConstraints> RandomPetConstraints;
	std::vector<NMS_GameComponents::GcSandwormTimerAndFrequencyOverride> SandwormOverrides;
	NMS_GameComponents::GcScanEventTable ScanEventTable;
	NMS::GcSeed ShipSeed;
	std::vector<NMS_GameComponents::GcSeasonalStage> Stages;
	NMS::NMSString0x10 StartPlanetRareSubstanceOverride;
	std::vector<NMS_GameComponents::GcPersistedStatData> StatsToPersistOnReset;
	std::vector<NMS_GameComponents::GcRealitySubstanceData> SubstanceTable;
	NMS::NMSString0x10 SwitchContextSaveDataMask;
	std::vector<NMS_GameComponents::GcTechnology> TechnologyTable;
	std::vector<NMS_GameComponents::GcBuildingClassification> ValidSpawnBuildings;
	NMS::GcSeed WeaponSeed;
	uint64_t EndTimeUTC;
	uint64_t Hash;
	uint64_t StartTimeUTC;
	uint64_t UAOverrideValue;
	NMS_GameComponents::GcDifficultySettingsData DifficultyMinimums;
	float AbandonedFreighterHazardProtectionMul;
	float BuildingRadiusShipOffsetMultiplier;
	NMS_GameComponents::GcDifficultyPresetType DifficultySettingPreset;
	int32_t DisplayNumber;
	float DistanceFromShipAtStartOfGame;
	float EnergyDrainMultiplier;
	float FarmPlantsTimerMul;
	int32_t FreighterBattleEarlyWarpsOverride;
	NMS_GameComponents::GcAlienRace FreighterRace;
	NMS_GameComponents::GcGameMode GameMode;
	float HazardProtectionDrainMultiplier;
	int32_t QuestSubstanceReducer;
	int32_t RemixNumber;
	float SandwormGlobalOverrideSpawnChance;
	float SandwormGlobalOverrideTimer;
	int32_t SeasonId;
	int32_t SeasonNumber;
	NMS_GameComponents::GcAudioWwiseEvents SeasonStartMusicOverride;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	int32_t StartingPetSlots;
	int32_t StartingSuitCargoSlots;
	int32_t StartingSuitSlots;
	int32_t StartingSuitTechSlots;
	int32_t TechCostMultiplier;
	NMS::NMSString0x200 FinalRewardDescription;
	NMS::NMSString0x20 Description;
	NMS::NMSString0x20 SeasonalUAOverride;
	NMS::NMSString0x20 Subtitle;
	NMS::NMSString0x20 Summary;
	NMS::NMSString0x20 Title;
	bool AllowMissionDetailMessages;
	bool AlwaysStormy;
	bool AlwaysUseSeasonalStationTradeData;
	bool BlockAggressiveSentinelsInStartSystem;
	bool BlockExtremeWeatherInStartSystem;
	bool BlockFirstSpaceMusic;
	bool BlockStormsAtStart;
	bool CarnageMode;
	bool CompatibleWithState;
	bool DefaultToPvPOff;
	bool DoCommunityMissionTextSubstitutions;
	bool ForceAllSystemsAbandoned;
	bool ForceDeepSpaceAmbientFrigatesOnInfested;
	bool ForceStartSystemAbandoned;
	bool ForceStartSystemTernary;
	bool HasBeenConverted;
	bool IncreaseXClassTechOddsWithCommTier;
	bool MustCraftInBases;
	bool PlayStartMusicInIntro;
	bool PurpleSystemsUnlocked;
	bool ResetSaveOnDeath;
	bool SandwormGlobalOverride;
	bool ShipIsAtDifferentBuildingToPlayer;
	bool ShipStartsDamaged;
	bool StartAboardFreighter;
	bool StartNextToShip;
	bool StartWithFreighter;
	bool TrashInventoryOnGalaxyTravel;
	bool UseDefaultAppearance;
	bool UseRandomPet;
	bool UseSeasonalUAStationTradeData;
	bool UseSpookHazardOnly;
	bool UseStartPlanetObjectListOverrides;

	friend bool operator==(const GcSeasonalGameModeData& lhs, const GcSeasonalGameModeData& rhs) 
	{
		return std::equal(std::begin(lhs.SpecificPets), std::end(lhs.SpecificPets), std::begin(rhs.SpecificPets)) &&
		lhs.Inventory == rhs.Inventory &&
		lhs.Inventory_Cargo == rhs.Inventory_Cargo &&
		lhs.Inventory_TechOnly == rhs.Inventory_TechOnly &&
		lhs.ShipInventory == rhs.ShipInventory &&
		lhs.WeaponInventory == rhs.WeaponInventory &&
		lhs.SeasonalUAStationTradeData == rhs.SeasonalUAStationTradeData &&
		lhs.InitialJoaoBox == rhs.InitialJoaoBox &&
		lhs.InitialJoaoBoxNoMainSave == rhs.InitialJoaoBoxNoMainSave &&
		lhs.SeasonTransferInventoryConfig == rhs.SeasonTransferInventoryConfig &&
		lhs.CommunityProgressTitle == rhs.CommunityProgressTitle &&
		lhs.CommunityTierCompleteLabel == rhs.CommunityTierCompleteLabel &&
		lhs.CommunityTierLabel == rhs.CommunityTierLabel &&
		lhs.CommunityTierProgressLabel == rhs.CommunityTierProgressLabel &&
		lhs.FinalCantRewardMessage == rhs.FinalCantRewardMessage &&
		lhs.FinalStageTitle == rhs.FinalStageTitle &&
		lhs.MainMissionMessage == rhs.MainMissionMessage &&
		lhs.MainMissionTitle == rhs.MainMissionTitle &&
		lhs.MilestoneWithStageLocId == rhs.MilestoneWithStageLocId &&
		lhs.SeasonName == rhs.SeasonName &&
		lhs.SeasonNameUpper == rhs.SeasonNameUpper &&
		lhs.MainIcon == rhs.MainIcon &&
		lhs.ShipInventoryLayout == rhs.ShipInventoryLayout &&
		lhs.ShipTechInventoryLayout == rhs.ShipTechInventoryLayout &&
		lhs.WeaponInventoryLayout == rhs.WeaponInventoryLayout &&
		lhs.AdditionalTradeProducts == rhs.AdditionalTradeProducts &&
		lhs.CreateContextSaveDataMask == rhs.CreateContextSaveDataMask &&
		lhs.FinalReward == rhs.FinalReward &&
		lhs.FinalRewardSwitchAlt == rhs.FinalRewardSwitchAlt &&
		lhs.ForgottenProducts == rhs.ForgottenProducts &&
		lhs.FreighterBaseOverrideFilename == rhs.FreighterBaseOverrideFilename &&
		lhs.IntroSequencePOI == rhs.IntroSequencePOI &&
		lhs.NeverLearnableTech == rhs.NeverLearnableTech &&
		lhs.NeverTradeProducts == rhs.NeverTradeProducts &&
		lhs.OverrideMTFilename == rhs.OverrideMTFilename &&
		lhs.ProductTable == rhs.ProductTable &&
		lhs.RandomPetConstraints == rhs.RandomPetConstraints &&
		lhs.SandwormOverrides == rhs.SandwormOverrides &&
		lhs.ScanEventTable == rhs.ScanEventTable &&
		lhs.ShipSeed == rhs.ShipSeed &&
		lhs.Stages == rhs.Stages &&
		lhs.StartPlanetRareSubstanceOverride == rhs.StartPlanetRareSubstanceOverride &&
		lhs.StatsToPersistOnReset == rhs.StatsToPersistOnReset &&
		lhs.SubstanceTable == rhs.SubstanceTable &&
		lhs.SwitchContextSaveDataMask == rhs.SwitchContextSaveDataMask &&
		lhs.TechnologyTable == rhs.TechnologyTable &&
		lhs.ValidSpawnBuildings == rhs.ValidSpawnBuildings &&
		lhs.WeaponSeed == rhs.WeaponSeed &&
		lhs.EndTimeUTC == rhs.EndTimeUTC &&
		lhs.Hash == rhs.Hash &&
		lhs.StartTimeUTC == rhs.StartTimeUTC &&
		lhs.UAOverrideValue == rhs.UAOverrideValue &&
		lhs.DifficultyMinimums == rhs.DifficultyMinimums &&
		lhs.AbandonedFreighterHazardProtectionMul == rhs.AbandonedFreighterHazardProtectionMul &&
		lhs.BuildingRadiusShipOffsetMultiplier == rhs.BuildingRadiusShipOffsetMultiplier &&
		lhs.DifficultySettingPreset == rhs.DifficultySettingPreset &&
		lhs.DisplayNumber == rhs.DisplayNumber &&
		lhs.DistanceFromShipAtStartOfGame == rhs.DistanceFromShipAtStartOfGame &&
		lhs.EnergyDrainMultiplier == rhs.EnergyDrainMultiplier &&
		lhs.FarmPlantsTimerMul == rhs.FarmPlantsTimerMul &&
		lhs.FreighterBattleEarlyWarpsOverride == rhs.FreighterBattleEarlyWarpsOverride &&
		lhs.FreighterRace == rhs.FreighterRace &&
		lhs.GameMode == rhs.GameMode &&
		lhs.HazardProtectionDrainMultiplier == rhs.HazardProtectionDrainMultiplier &&
		lhs.QuestSubstanceReducer == rhs.QuestSubstanceReducer &&
		lhs.RemixNumber == rhs.RemixNumber &&
		lhs.SandwormGlobalOverrideSpawnChance == rhs.SandwormGlobalOverrideSpawnChance &&
		lhs.SandwormGlobalOverrideTimer == rhs.SandwormGlobalOverrideTimer &&
		lhs.SeasonId == rhs.SeasonId &&
		lhs.SeasonNumber == rhs.SeasonNumber &&
		lhs.SeasonStartMusicOverride == rhs.SeasonStartMusicOverride &&
		lhs.ShipType == rhs.ShipType &&
		lhs.StartingPetSlots == rhs.StartingPetSlots &&
		lhs.StartingSuitCargoSlots == rhs.StartingSuitCargoSlots &&
		lhs.StartingSuitSlots == rhs.StartingSuitSlots &&
		lhs.StartingSuitTechSlots == rhs.StartingSuitTechSlots &&
		lhs.TechCostMultiplier == rhs.TechCostMultiplier &&
		lhs.FinalRewardDescription == rhs.FinalRewardDescription &&
		lhs.Description == rhs.Description &&
		lhs.SeasonalUAOverride == rhs.SeasonalUAOverride &&
		lhs.Subtitle == rhs.Subtitle &&
		lhs.Summary == rhs.Summary &&
		lhs.Title == rhs.Title &&
		lhs.AllowMissionDetailMessages == rhs.AllowMissionDetailMessages &&
		lhs.AlwaysStormy == rhs.AlwaysStormy &&
		lhs.AlwaysUseSeasonalStationTradeData == rhs.AlwaysUseSeasonalStationTradeData &&
		lhs.BlockAggressiveSentinelsInStartSystem == rhs.BlockAggressiveSentinelsInStartSystem &&
		lhs.BlockExtremeWeatherInStartSystem == rhs.BlockExtremeWeatherInStartSystem &&
		lhs.BlockFirstSpaceMusic == rhs.BlockFirstSpaceMusic &&
		lhs.BlockStormsAtStart == rhs.BlockStormsAtStart &&
		lhs.CarnageMode == rhs.CarnageMode &&
		lhs.CompatibleWithState == rhs.CompatibleWithState &&
		lhs.DefaultToPvPOff == rhs.DefaultToPvPOff &&
		lhs.DoCommunityMissionTextSubstitutions == rhs.DoCommunityMissionTextSubstitutions &&
		lhs.ForceAllSystemsAbandoned == rhs.ForceAllSystemsAbandoned &&
		lhs.ForceDeepSpaceAmbientFrigatesOnInfested == rhs.ForceDeepSpaceAmbientFrigatesOnInfested &&
		lhs.ForceStartSystemAbandoned == rhs.ForceStartSystemAbandoned &&
		lhs.ForceStartSystemTernary == rhs.ForceStartSystemTernary &&
		lhs.HasBeenConverted == rhs.HasBeenConverted &&
		lhs.IncreaseXClassTechOddsWithCommTier == rhs.IncreaseXClassTechOddsWithCommTier &&
		lhs.MustCraftInBases == rhs.MustCraftInBases &&
		lhs.PlayStartMusicInIntro == rhs.PlayStartMusicInIntro &&
		lhs.PurpleSystemsUnlocked == rhs.PurpleSystemsUnlocked &&
		lhs.ResetSaveOnDeath == rhs.ResetSaveOnDeath &&
		lhs.SandwormGlobalOverride == rhs.SandwormGlobalOverride &&
		lhs.ShipIsAtDifferentBuildingToPlayer == rhs.ShipIsAtDifferentBuildingToPlayer &&
		lhs.ShipStartsDamaged == rhs.ShipStartsDamaged &&
		lhs.StartAboardFreighter == rhs.StartAboardFreighter &&
		lhs.StartNextToShip == rhs.StartNextToShip &&
		lhs.StartWithFreighter == rhs.StartWithFreighter &&
		lhs.TrashInventoryOnGalaxyTravel == rhs.TrashInventoryOnGalaxyTravel &&
		lhs.UseDefaultAppearance == rhs.UseDefaultAppearance &&
		lhs.UseRandomPet == rhs.UseRandomPet &&
		lhs.UseSeasonalUAStationTradeData == rhs.UseSeasonalUAStationTradeData &&
		lhs.UseSpookHazardOnly == rhs.UseSpookHazardOnly &&
		lhs.UseStartPlanetObjectListOverrides == rhs.UseStartPlanetObjectListOverrides;
	}
};

//Dependency: GcProtectedLocation
struct GcUAProtectedLocations
{
	std::vector<NMS_GameComponents::GcProtectedLocation> ProtectedLocations;
	uint64_t UA;

	friend bool operator==(const GcUAProtectedLocations& lhs, const GcUAProtectedLocations& rhs) 
	{
		return lhs.ProtectedLocations == rhs.ProtectedLocations &&
		lhs.UA == rhs.UA;
	}
};

struct GcSeasonEndRewardsRedemptionState
{
	enum class SeasonEndRewardsRedemptionStateEnum : uint32_t
	{
		None = 0,
		Available = 1,
		PendingRedemption = 2,
		Redeemed = 3,
	};

	NMS_GameComponents::GcSeasonEndRewardsRedemptionState::SeasonEndRewardsRedemptionStateEnum SeasonEndRewardsRedemptionState;

	friend bool operator==(const GcSeasonEndRewardsRedemptionState& lhs, const GcSeasonEndRewardsRedemptionState& rhs) 
	{
		return lhs.SeasonEndRewardsRedemptionState == rhs.SeasonEndRewardsRedemptionState;
	}
};

struct GcSeasonSaveStateOnDeath
{
	enum class SeasonSaveStateOnDeathEnum : uint32_t
	{
		Standard = 0,
		ResetAndQuit = 1,
		ResetPosSaveAndQuit = 2,
		SaveAndQuit = 3,
	};

	NMS_GameComponents::GcSeasonSaveStateOnDeath::SeasonSaveStateOnDeathEnum SeasonSaveStateOnDeath;

	friend bool operator==(const GcSeasonSaveStateOnDeath& lhs, const GcSeasonSaveStateOnDeath& rhs) 
	{
		return lhs.SeasonSaveStateOnDeath == rhs.SeasonSaveStateOnDeath;
	}
};

//Dependency: GcInventoryContainer
//Dependency: GcUAProtectedLocations
//Dependency: GcPlayerMissionParticipant
//Dependency: GcSeasonEndRewardsRedemptionState
//Dependency: GcSeasonSaveStateOnDeath
struct GcSeasonStateData
{
	NMS_GameComponents::GcInventoryContainer SeasonTransferInventory;
	std::vector<float> MilestoneValues;
	std::vector<NMS_GameComponents::GcUAProtectedLocations> ProtectedEvents;
	std::vector<NMS_GameComponents::GcPlayerMissionParticipant> RendezvousParticipants;
	std::vector<uint64_t> RendezvousUAs;
	std::vector<int16_t> RewardCollected;
	NMS_GameComponents::GcSeasonEndRewardsRedemptionState EndRewardsRedemptionState;
	int32_t PinnedMilestone;
	int32_t PinnedStage;
	NMS_GameComponents::GcSeasonSaveStateOnDeath StateOnDeath;
	bool HasCollectedFinalReward;

	friend bool operator==(const GcSeasonStateData& lhs, const GcSeasonStateData& rhs) 
	{
		return lhs.SeasonTransferInventory == rhs.SeasonTransferInventory &&
		lhs.MilestoneValues == rhs.MilestoneValues &&
		lhs.ProtectedEvents == rhs.ProtectedEvents &&
		lhs.RendezvousParticipants == rhs.RendezvousParticipants &&
		lhs.RendezvousUAs == rhs.RendezvousUAs &&
		lhs.RewardCollected == rhs.RewardCollected &&
		lhs.EndRewardsRedemptionState == rhs.EndRewardsRedemptionState &&
		lhs.PinnedMilestone == rhs.PinnedMilestone &&
		lhs.PinnedStage == rhs.PinnedStage &&
		lhs.StateOnDeath == rhs.StateOnDeath &&
		lhs.HasCollectedFinalReward == rhs.HasCollectedFinalReward;
	}
};

//Dependency: GcSeasonTransferInventoryData
//Dependency: GcPhotoModeSettings
//Dependency: NMSString0x20
//Dependency: GcDiscoveryOwner
//Dependency: GcSeasonalGameModeData
//Dependency: GcByteBeatLibraryData
//Dependency: GcSeasonStateData
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcPlayerCommonStateData
{
	NMS_GameComponents::GcPhotoModeSettings PhotoModeSettings;
	NMS_GameComponents::GcSeasonalGameModeData SeasonData;
	NMS_GameComponents::GcByteBeatLibraryData ByteBeatLibrary;
	NMS_GameComponents::GcSeasonStateData SeasonState;
	NMS_GameComponents::GcSeasonTransferInventoryData SeasonTransferInventoryData;
	std::vector<NMS::NMSString0x10> EarnedSeasonSpecialRewards;
	std::vector<NMS_GameComponents::GcDiscoveryOwner> UsedDiscoveryOwnersV2;
	std::vector<NMS::NMSString0x20> UsedPlatforms;
	uint64_t SaveUniversalId;
	uint64_t TotalPlayTime;
	NMS::NMSString0x80 SaveName;
	bool UsesThirdPersonCharacterCam;
	bool UsesThirdPersonShipCam;
	bool UsesThirdPersonVehicleCam;

	friend bool operator==(const GcPlayerCommonStateData& lhs, const GcPlayerCommonStateData& rhs) 
	{
		return lhs.PhotoModeSettings == rhs.PhotoModeSettings &&
		lhs.SeasonData == rhs.SeasonData &&
		lhs.ByteBeatLibrary == rhs.ByteBeatLibrary &&
		lhs.SeasonState == rhs.SeasonState &&
		lhs.SeasonTransferInventoryData == rhs.SeasonTransferInventoryData &&
		lhs.EarnedSeasonSpecialRewards == rhs.EarnedSeasonSpecialRewards &&
		lhs.UsedDiscoveryOwnersV2 == rhs.UsedDiscoveryOwnersV2 &&
		lhs.UsedPlatforms == rhs.UsedPlatforms &&
		lhs.SaveUniversalId == rhs.SaveUniversalId &&
		lhs.TotalPlayTime == rhs.TotalPlayTime &&
		lhs.SaveName == rhs.SaveName &&
		lhs.UsesThirdPersonCharacterCam == rhs.UsesThirdPersonCharacterCam &&
		lhs.UsesThirdPersonShipCam == rhs.UsesThirdPersonShipCam &&
		lhs.UsesThirdPersonVehicleCam == rhs.UsesThirdPersonVehicleCam;
	}
};

//Dependency: NMSString0x20A
struct GcRewardWantedLevel
{
	NMS::NMSString0x20A Message;
	int32_t Level;

	friend bool operator==(const GcRewardWantedLevel& lhs, const GcRewardWantedLevel& rhs) 
	{
		return lhs.Message == rhs.Message &&
		lhs.Level == rhs.Level;
	}
};

struct GcRewardSetAtlasMissionActive
{

	friend bool operator==(const GcRewardSetAtlasMissionActive& lhs, const GcRewardSetAtlasMissionActive& rhs) 
	{
		return true;
	}
};

//Dependency: GcEcosystemCreatureData
struct GcEcosystemSpawnData
{
	std::vector<NMS_GameComponents::GcEcosystemCreatureData> Creatures;
	float CreatureMaxNoise;
	float CreatureMinNoise;

	friend bool operator==(const GcEcosystemSpawnData& lhs, const GcEcosystemSpawnData& rhs) 
	{
		return lhs.Creatures == rhs.Creatures &&
		lhs.CreatureMaxNoise == rhs.CreatureMaxNoise &&
		lhs.CreatureMinNoise == rhs.CreatureMinNoise;
	}
};

struct GcEncounterStateComponentData
{

	friend bool operator==(const GcEncounterStateComponentData& lhs, const GcEncounterStateComponentData& rhs) 
	{
		return true;
	}
};

//Dependency: GcInventoryType
//Dependency: NMSString0x20A
struct GcItemFilterStageDataIsType
{
	NMS::NMSString0x20A DisabledMessage;
	NMS_GameComponents::GcInventoryType Type;

	friend bool operator==(const GcItemFilterStageDataIsType& lhs, const GcItemFilterStageDataIsType& rhs) 
	{
		return lhs.DisabledMessage == rhs.DisabledMessage &&
		lhs.Type == rhs.Type;
	}
};

struct GcMissionConditionSettlementBuildingsAllStarted
{

	friend bool operator==(const GcMissionConditionSettlementBuildingsAllStarted& lhs, const GcMissionConditionSettlementBuildingsAllStarted& rhs) 
	{
		return true;
	}
};

//Dependency: VariableSizeString
struct GcFontData
{
	NMS::VariableSizeString File;
	int32_t MinCharWidth;

	friend bool operator==(const GcFontData& lhs, const GcFontData& rhs) 
	{
		return lhs.File == rhs.File &&
		lhs.MinCharWidth == rhs.MinCharWidth;
	}
};

//Dependency: GcDiscoveryType
struct GcEncyclopediaComponentData
{
	NMS_GameComponents::GcDiscoveryType Type;

	friend bool operator==(const GcEncyclopediaComponentData& lhs, const GcEncyclopediaComponentData& rhs) 
	{
		return lhs.Type == rhs.Type;
	}
};

struct GcEngineComponentData
{
	int32_t Type;

	friend bool operator==(const GcEngineComponentData& lhs, const GcEngineComponentData& rhs) 
	{
		return lhs.Type == rhs.Type;
	}
};

//Dependency: GcCreatureSpawnData
//Dependency: GcObjectSpawnData
//Dependency: GcSelectableObjectSpawnList
struct GcEnvironmentSpawnData
{
	std::vector<NMS_GameComponents::GcCreatureSpawnData> Creatures;
	std::vector<NMS_GameComponents::GcObjectSpawnData> DetailObjects;
	std::vector<NMS_GameComponents::GcObjectSpawnData> DistantObjects;
	std::vector<NMS_GameComponents::GcObjectSpawnData> Landmarks;
	std::vector<NMS_GameComponents::GcObjectSpawnData> Objects;
	std::vector<NMS_GameComponents::GcSelectableObjectSpawnList> SelectableObjects;

	friend bool operator==(const GcEnvironmentSpawnData& lhs, const GcEnvironmentSpawnData& rhs) 
	{
		return lhs.Creatures == rhs.Creatures &&
		lhs.DetailObjects == rhs.DetailObjects &&
		lhs.DistantObjects == rhs.DistantObjects &&
		lhs.Landmarks == rhs.Landmarks &&
		lhs.Objects == rhs.Objects &&
		lhs.SelectableObjects == rhs.SelectableObjects;
	}
};

struct GcPlayerSpaceshipEngineData
{
	float BalanceTimeMax;
	float BalanceTimeMin;
	float BoostFalloff;
	float BoostingTurnDamp;
	float BoostMaxSpeed;
	float BoostThrustForce;
	float DirectionBrake;
	float DirectionBrakeMin;
	float Falloff;
	float FollowDerivativeGain;
	float FollowDerivativeLimit;
	float FollowIntegralDecay;
	float FollowIntegralGain;
	float FollowIntegralLimit;
	float FollowProportionalGain;
	float FollowProportionalLimit;
	float LowSpeedTurnDamper;
	float MaxSpeed;
	float MinSpeed;
	float MinSpeedForce;
	float OverspeedBrake;
	float ReverseBrake;
	float RollAmount;
	float RollAutoTime;
	float RollForce;
	float ThrustForce;
	float TurnBrakeMax;
	float TurnBrakeMin;
	float TurnStrength;

	friend bool operator==(const GcPlayerSpaceshipEngineData& lhs, const GcPlayerSpaceshipEngineData& rhs) 
	{
		return lhs.BalanceTimeMax == rhs.BalanceTimeMax &&
		lhs.BalanceTimeMin == rhs.BalanceTimeMin &&
		lhs.BoostFalloff == rhs.BoostFalloff &&
		lhs.BoostingTurnDamp == rhs.BoostingTurnDamp &&
		lhs.BoostMaxSpeed == rhs.BoostMaxSpeed &&
		lhs.BoostThrustForce == rhs.BoostThrustForce &&
		lhs.DirectionBrake == rhs.DirectionBrake &&
		lhs.DirectionBrakeMin == rhs.DirectionBrakeMin &&
		lhs.Falloff == rhs.Falloff &&
		lhs.FollowDerivativeGain == rhs.FollowDerivativeGain &&
		lhs.FollowDerivativeLimit == rhs.FollowDerivativeLimit &&
		lhs.FollowIntegralDecay == rhs.FollowIntegralDecay &&
		lhs.FollowIntegralGain == rhs.FollowIntegralGain &&
		lhs.FollowIntegralLimit == rhs.FollowIntegralLimit &&
		lhs.FollowProportionalGain == rhs.FollowProportionalGain &&
		lhs.FollowProportionalLimit == rhs.FollowProportionalLimit &&
		lhs.LowSpeedTurnDamper == rhs.LowSpeedTurnDamper &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MinSpeed == rhs.MinSpeed &&
		lhs.MinSpeedForce == rhs.MinSpeedForce &&
		lhs.OverspeedBrake == rhs.OverspeedBrake &&
		lhs.ReverseBrake == rhs.ReverseBrake &&
		lhs.RollAmount == rhs.RollAmount &&
		lhs.RollAutoTime == rhs.RollAutoTime &&
		lhs.RollForce == rhs.RollForce &&
		lhs.ThrustForce == rhs.ThrustForce &&
		lhs.TurnBrakeMax == rhs.TurnBrakeMax &&
		lhs.TurnBrakeMin == rhs.TurnBrakeMin &&
		lhs.TurnStrength == rhs.TurnStrength;
	}
};

//Dependency: GcPlayerSpaceshipEngineData
//Dependency: TkCurveType
struct GcPlayerSpaceshipControlData
{
	NMS_GameComponents::GcPlayerSpaceshipEngineData AtmosCombatEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData CombatEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData PlanetEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData SpaceEngine;
	float AngularFactor;
	float ExitAngleMax;
	float ExitAngleMin;
	float ExitHeightFactorMax;
	float ExitHeightFactorMin;
	float ExitHeightFactorPlungeMax;
	float ExitHeightFactorPlungeMin;
	float ExitLeaveAngle;
	float MaxTorque;
	float ShipMinHeightForce;
	float ShipPlanetBrakeAlignMaxTime;
	float ShipPlanetBrakeAlignMinTime;
	float ShipPlanetBrakeForce;
	float ShipPlanetBrakeMaxHeight;
	float ShipPlanetBrakeMaxSpeed;
	float ShipPlanetBrakeMinHeight;
	float ShipPlanetBrakeMinSpeed;
	NMS_Toolkit::TkCurveType ExitCurve;
	NMS_Toolkit::TkCurveType ExitDownCurve;

	friend bool operator==(const GcPlayerSpaceshipControlData& lhs, const GcPlayerSpaceshipControlData& rhs) 
	{
		return lhs.AtmosCombatEngine == rhs.AtmosCombatEngine &&
		lhs.CombatEngine == rhs.CombatEngine &&
		lhs.PlanetEngine == rhs.PlanetEngine &&
		lhs.SpaceEngine == rhs.SpaceEngine &&
		lhs.AngularFactor == rhs.AngularFactor &&
		lhs.ExitAngleMax == rhs.ExitAngleMax &&
		lhs.ExitAngleMin == rhs.ExitAngleMin &&
		lhs.ExitHeightFactorMax == rhs.ExitHeightFactorMax &&
		lhs.ExitHeightFactorMin == rhs.ExitHeightFactorMin &&
		lhs.ExitHeightFactorPlungeMax == rhs.ExitHeightFactorPlungeMax &&
		lhs.ExitHeightFactorPlungeMin == rhs.ExitHeightFactorPlungeMin &&
		lhs.ExitLeaveAngle == rhs.ExitLeaveAngle &&
		lhs.MaxTorque == rhs.MaxTorque &&
		lhs.ShipMinHeightForce == rhs.ShipMinHeightForce &&
		lhs.ShipPlanetBrakeAlignMaxTime == rhs.ShipPlanetBrakeAlignMaxTime &&
		lhs.ShipPlanetBrakeAlignMinTime == rhs.ShipPlanetBrakeAlignMinTime &&
		lhs.ShipPlanetBrakeForce == rhs.ShipPlanetBrakeForce &&
		lhs.ShipPlanetBrakeMaxHeight == rhs.ShipPlanetBrakeMaxHeight &&
		lhs.ShipPlanetBrakeMaxSpeed == rhs.ShipPlanetBrakeMaxSpeed &&
		lhs.ShipPlanetBrakeMinHeight == rhs.ShipPlanetBrakeMinHeight &&
		lhs.ShipPlanetBrakeMinSpeed == rhs.ShipPlanetBrakeMinSpeed &&
		lhs.ExitCurve == rhs.ExitCurve &&
		lhs.ExitDownCurve == rhs.ExitDownCurve;
	}
};

//Dependency: GcMechWeaponLocation
//Dependency: NMSString0x10
struct GcExoMechWeaponData
{
	NMS::NMSString0x10 MuzzleFlashDataID[5];
	std::vector<NMS_GameComponents::GcMechWeaponLocation> LocationPriority;
	float AngleToleranceForArmAiming;
	float AttackAngle;
	float CooldownTimeMax;
	float CooldownTimeMin;
	float MaintainFireLocationMinTime;
	float MaxRange;
	float MinRange;
	float SelectionWeight;

	friend bool operator==(const GcExoMechWeaponData& lhs, const GcExoMechWeaponData& rhs) 
	{
		return std::equal(std::begin(lhs.MuzzleFlashDataID), std::end(lhs.MuzzleFlashDataID), std::begin(rhs.MuzzleFlashDataID)) &&
		lhs.LocationPriority == rhs.LocationPriority &&
		lhs.AngleToleranceForArmAiming == rhs.AngleToleranceForArmAiming &&
		lhs.AttackAngle == rhs.AttackAngle &&
		lhs.CooldownTimeMax == rhs.CooldownTimeMax &&
		lhs.CooldownTimeMin == rhs.CooldownTimeMin &&
		lhs.MaintainFireLocationMinTime == rhs.MaintainFireLocationMinTime &&
		lhs.MaxRange == rhs.MaxRange &&
		lhs.MinRange == rhs.MinRange &&
		lhs.SelectionWeight == rhs.SelectionWeight;
	}
};

struct GcRewardTriggerSettlementJudgement
{

	friend bool operator==(const GcRewardTriggerSettlementJudgement& lhs, const GcRewardTriggerSettlementJudgement& rhs) 
	{
		return true;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcFrigateFlybyType
//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnFrigateFlyby
{
	NMS_GameComponents::GcPlayerCommunicatorMessage CommunicatorMessage;
	NMS::NMSString0x20A CommunicatorOSDLocId;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	float RangeOverride;

	friend bool operator==(const GcPulseEncounterSpawnFrigateFlyby& lhs, const GcPulseEncounterSpawnFrigateFlyby& rhs) 
	{
		return lhs.CommunicatorMessage == rhs.CommunicatorMessage &&
		lhs.CommunicatorOSDLocId == rhs.CommunicatorOSDLocId &&
		lhs.FlybyType == rhs.FlybyType &&
		lhs.RangeOverride == rhs.RangeOverride;
	}
};

struct GcPlanetSectionData
{
	uint64_t DiscovererUID;
	uint8_t DiscovererPlatform[2];
	bool DiscoveredState;

	friend bool operator==(const GcPlanetSectionData& lhs, const GcPlanetSectionData& rhs) 
	{
		return lhs.DiscovererUID == rhs.DiscovererUID &&
		std::equal(std::begin(lhs.DiscovererPlatform), std::end(lhs.DiscovererPlatform), std::begin(rhs.DiscovererPlatform)) &&
		lhs.DiscoveredState == rhs.DiscoveredState;
	}
};

//Dependency: GcPlanetSectionData
struct GcPlanetaryMappingData
{
	std::vector<NMS_GameComponents::GcPlanetSectionData> SectionsData;
	uint64_t UA;

	friend bool operator==(const GcPlanetaryMappingData& lhs, const GcPlanetaryMappingData& rhs) 
	{
		return lhs.SectionsData == rhs.SectionsData &&
		lhs.UA == rhs.UA;
	}
};

struct GcMissionConditionDiscoveryPendingUpload
{

	friend bool operator==(const GcMissionConditionDiscoveryPendingUpload& lhs, const GcMissionConditionDiscoveryPendingUpload& rhs) 
	{
		return true;
	}
};

//Dependency: GcNumberedTextList
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcExpeditionEventData
{
	NMS::NMSString0x20A ID;
	NMS_GameComponents::GcNumberedTextList DamageDescriptionList;
	NMS_GameComponents::GcNumberedTextList FailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericFailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericFailureWhaleDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericSuccessDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryDamageDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryFailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList SuccessDescriptionList;
	NMS_GameComponents::GcNumberedTextList SuccessWhaleDescriptionList;
	NMS::NMSString0x10 EasySuccessReward;
	NMS::NMSString0x10 FailureReward;
	NMS::NMSString0x10 SuccessReward;
	NMS::NMSString0x10 WhaleReward;
	float StatContribution[5];
	int32_t AdditionalShipDifficultyIncrease;
	int32_t DifficultyModifier;
	int32_t DifficultyVarianceModifier;

	friend bool operator==(const GcExpeditionEventData& lhs, const GcExpeditionEventData& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.DamageDescriptionList == rhs.DamageDescriptionList &&
		lhs.FailureDescriptionList == rhs.FailureDescriptionList &&
		lhs.GenericFailureDescriptionList == rhs.GenericFailureDescriptionList &&
		lhs.GenericFailureWhaleDescriptionList == rhs.GenericFailureWhaleDescriptionList &&
		lhs.GenericSuccessDescriptionList == rhs.GenericSuccessDescriptionList &&
		lhs.SecondaryDamageDescriptionList == rhs.SecondaryDamageDescriptionList &&
		lhs.SecondaryDescriptionList == rhs.SecondaryDescriptionList &&
		lhs.SecondaryFailureDescriptionList == rhs.SecondaryFailureDescriptionList &&
		lhs.SuccessDescriptionList == rhs.SuccessDescriptionList &&
		lhs.SuccessWhaleDescriptionList == rhs.SuccessWhaleDescriptionList &&
		lhs.EasySuccessReward == rhs.EasySuccessReward &&
		lhs.FailureReward == rhs.FailureReward &&
		lhs.SuccessReward == rhs.SuccessReward &&
		lhs.WhaleReward == rhs.WhaleReward &&
		std::equal(std::begin(lhs.StatContribution), std::end(lhs.StatContribution), std::begin(rhs.StatContribution)) &&
		lhs.AdditionalShipDifficultyIncrease == rhs.AdditionalShipDifficultyIncrease &&
		lhs.DifficultyModifier == rhs.DifficultyModifier &&
		lhs.DifficultyVarianceModifier == rhs.DifficultyVarianceModifier;
	}
};

//Dependency: GcExpeditionEventData
//Dependency: GcExpeditionInterventionEventData
struct GcExpeditionEventTable
{
	std::vector<NMS_GameComponents::GcExpeditionEventData> Events;
	std::vector<NMS_GameComponents::GcExpeditionInterventionEventData> InterventionEvents;

	friend bool operator==(const GcExpeditionEventTable& lhs, const GcExpeditionEventTable& rhs) 
	{
		return lhs.Events == rhs.Events &&
		lhs.InterventionEvents == rhs.InterventionEvents;
	}
};

//Dependency: NMSString0x10
struct GcMissionConsequenceBroadcastMessage
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastToActiveMultiplayerMission;
	bool CanSendToInactive;
	bool Multiplayer;
	bool Seeded;
	bool SendToAllMatchingSeeds;

	friend bool operator==(const GcMissionConsequenceBroadcastMessage& lhs, const GcMissionConsequenceBroadcastMessage& rhs) 
	{
		return lhs.MessageID == rhs.MessageID &&
		lhs.BroadcastToActiveMultiplayerMission == rhs.BroadcastToActiveMultiplayerMission &&
		lhs.CanSendToInactive == rhs.CanSendToInactive &&
		lhs.Multiplayer == rhs.Multiplayer &&
		lhs.Seeded == rhs.Seeded &&
		lhs.SendToAllMatchingSeeds == rhs.SendToAllMatchingSeeds;
	}
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcPlayerExperienceAsteroidCreatureSpawnData
{
	NMS::NMSString0x10 ID;
	NMS::Vector2f LargeMinMax;
	NMS::Vector2f MediumMinMax;
	NMS::Vector2f SmallMinMax;
	float Weight;

	friend bool operator==(const GcPlayerExperienceAsteroidCreatureSpawnData& lhs, const GcPlayerExperienceAsteroidCreatureSpawnData& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.LargeMinMax == rhs.LargeMinMax &&
		lhs.MediumMinMax == rhs.MediumMinMax &&
		lhs.SmallMinMax == rhs.SmallMinMax &&
		lhs.Weight == rhs.Weight;
	}
};

//Dependency: GcPlayerExperienceAsteroidCreatureSpawnData
struct GcPlayerExperienceAsteroidCreatureSpawnTable
{
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> LargeAsteroidSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> MediumAsteroidSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> SmallAsteroidSpawns;
	float LargeAsteroidSpawnPercent;
	float MediumAsteroidSpawnPercent;
	float SmallAsteroidSpawnPercent;

	friend bool operator==(const GcPlayerExperienceAsteroidCreatureSpawnTable& lhs, const GcPlayerExperienceAsteroidCreatureSpawnTable& rhs) 
	{
		return lhs.LargeAsteroidSpawns == rhs.LargeAsteroidSpawns &&
		lhs.MediumAsteroidSpawns == rhs.MediumAsteroidSpawns &&
		lhs.SmallAsteroidSpawns == rhs.SmallAsteroidSpawns &&
		lhs.LargeAsteroidSpawnPercent == rhs.LargeAsteroidSpawnPercent &&
		lhs.MediumAsteroidSpawnPercent == rhs.MediumAsteroidSpawnPercent &&
		lhs.SmallAsteroidSpawnPercent == rhs.SmallAsteroidSpawnPercent;
	}
};

//Dependency: NMSString0x10
struct GcSentinelWaveGroup
{
	std::vector<NMS::NMSString0x10> ExtremeWaves;
	std::vector<NMS::NMSString0x10> Waves;

	friend bool operator==(const GcSentinelWaveGroup& lhs, const GcSentinelWaveGroup& rhs) 
	{
		return lhs.ExtremeWaves == rhs.ExtremeWaves &&
		lhs.Waves == rhs.Waves;
	}
};

struct GcRealityGameIcons
{
	enum class GameIconsEnum : uint32_t
	{
		Stamina = 0,
		NoStamina = 1,
		EnergyCharge = 2,
		Scanner = 3,
		NoScanner = 4,
		Grave = 5,
		Resources = 6,
		Inventory = 7,
		InventoryFull = 8,
		RareItems = 9,
		Pirates = 10,
		PirateScan = 11,
		Drone = 12,
		Quad = 13,
		Mech = 14,
		Walker = 15,
		Spider = 16,
		DroneOff = 17,
		Police = 18,
		PoliceFreighter = 19,
		AtlasStation = 20,
		BlackHole = 21,
		SaveGame = 22,
		SaveInventory = 23,
		Jetpack = 24,
		JetpackEmpty = 25,
		VehicleBoost = 26,
		VehicleBoostRecharge = 27,
		Fuel = 28,
		FuelEmpty = 29,
		GekStanding = 30,
		VykeenStanding = 31,
		KorvaxStanding = 32,
		GekDiamondStanding = 33,
		VykeenDiamondStanding = 34,
		KorvaxDiamondStanding = 35,
		TradeGuildStanding = 36,
		WarGuildStanding = 37,
		ExplorationGuildStanding = 38,
		TradeGuildDiamondStanding = 39,
		WarGuildDiamondStanding = 40,
		ExplorationGuildDiamondStanding = 41,
		GMPathToCentre = 42,
		GMAtlas = 43,
		GMBlackHole = 44,
		GMUserWaypoint = 45,
		GMUserMission = 46,
		GMSeasonal = 47,
		TransferPersonal = 48,
		TransferPersonalCargo = 49,
		TransferShip = 50,
		TransferBike = 51,
		TransferBuggy = 52,
		TransferTruck = 53,
		TransferWheeledBike = 54,
		TransferHovercraft = 55,
		TransferSubmarine = 56,
		TransferMech = 57,
		TransferFreighter = 58,
		TransferBase = 59,
		TransferCooker = 60,
		TransferSkiff = 61,
		HazardIndicatorHot = 62,
		HazardIndicatorCold = 63,
		HazardIndicatorRadiation = 64,
		HazardIndicatorToxic = 65,
		TerrainAdd = 66,
		TerrainRemove = 67,
		TerrainFlatten = 68,
		TerrainUndo = 69,
		SpacePhone = 70,
		GarageMarkerBuggy = 71,
		GarageMarkerBike = 72,
		GarageMarkerTruck = 73,
		GarageMarkerWheeledBike = 74,
		GarageMarkerHovercraft = 75,
		CorruptedDrone = 76,
		AncientGuardian = 77,
		HandHold = 78,
		ShipThumbnailBG = 79,
		CClass = 80,
		BClass = 81,
		AClass = 82,
		SClass = 83,
		NoSaveWarning = 84,
		ExploreMissionPlanetIcon = 85,
		ExploreMissionSystemIcon = 86,
		PetThumbnailBG = 87,
		SettlementOSD = 88,
		SettlementUpgradeOSD = 89,
		Stealth = 90,
		StealthEmpty = 91,
		DefenceForce = 92,
		SummonSquadron = 93,
		CookShop = 94,
		HazardIndicatorSpook = 95,
		BioShip = 96,
		CargoShip = 97,
		ExoticShip = 98,
		FighterShip = 99,
		ScienceShip = 100,
		SentinelShip = 101,
		ShuttleShip = 102,
		SailShip = 103,
		PistolWeapon = 104,
		RifleWeapon = 105,
		PristineWeapon = 106,
		AlienWeapon = 107,
		RoyalWeapon = 108,
		RobotWeapon = 109,
		AtlasWeapon = 110,
		StaffWeapon = 111,
	};

	NMS_GameComponents::GcRealityGameIcons::GameIconsEnum GameIcons;

	friend bool operator==(const GcRealityGameIcons& lhs, const GcRealityGameIcons& rhs) 
	{
		return lhs.GameIcons == rhs.GameIcons;
	}
};

//Dependency: GcRealityGameIcons
//Dependency: GcEncounterType
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSentinelEncounterOverride
{
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A OSDOnDefeat;
	NMS::NMSString0x20A OSDOnWaveStart;
	NMS::NMSString0x10 ExtremeSpawnID;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 SpawnID;
	NMS::NMSString0x10 StatusMessage;
	NMS_GameComponents::GcRealityGameIcons CustomOSDIcon;
	NMS_GameComponents::GcEncounterType EncounterTypeOverride;
	NMS_GameComponents::GcAudioWwiseEvents OSDOnWaveStartAudio;
	float SummonRadius;
	bool EncounterBlocksWantedSpawns;
	bool EncounterClearsWantedOnDefeat;
	bool IgnoreBuildingCrimesOnDefeat;
	bool SpawnsAreAggressive;
	bool UseCustomOSDIcon;
	bool UseEncounterTypeOverride;

	friend bool operator==(const GcSentinelEncounterOverride& lhs, const GcSentinelEncounterOverride& rhs) 
	{
		return lhs.OSDMessage == rhs.OSDMessage &&
		lhs.OSDOnDefeat == rhs.OSDOnDefeat &&
		lhs.OSDOnWaveStart == rhs.OSDOnWaveStart &&
		lhs.ExtremeSpawnID == rhs.ExtremeSpawnID &&
		lhs.Id == rhs.Id &&
		lhs.SpawnID == rhs.SpawnID &&
		lhs.StatusMessage == rhs.StatusMessage &&
		lhs.CustomOSDIcon == rhs.CustomOSDIcon &&
		lhs.EncounterTypeOverride == rhs.EncounterTypeOverride &&
		lhs.OSDOnWaveStartAudio == rhs.OSDOnWaveStartAudio &&
		lhs.SummonRadius == rhs.SummonRadius &&
		lhs.EncounterBlocksWantedSpawns == rhs.EncounterBlocksWantedSpawns &&
		lhs.EncounterClearsWantedOnDefeat == rhs.EncounterClearsWantedOnDefeat &&
		lhs.IgnoreBuildingCrimesOnDefeat == rhs.IgnoreBuildingCrimesOnDefeat &&
		lhs.SpawnsAreAggressive == rhs.SpawnsAreAggressive &&
		lhs.UseCustomOSDIcon == rhs.UseCustomOSDIcon &&
		lhs.UseEncounterTypeOverride == rhs.UseEncounterTypeOverride;
	}
};

//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnArchetypeData
{
	NMS::NMSString0x10 AppearAnim;
	std::vector<NMSTemplate> BehaviourOverrides;
	NMS::NMSString0x10 BehaviourTreeOverride;
	std::vector<NMSTemplate> BlackboardValues;
	NMS::NMSString0x10 DamageOverride;
	NMS::NMSString0x10 DamageReceivedMultiplier;
	NMS::NMSString0x10 GenerateResource;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 KillingBlowMessageIDOverride;
	NMS::NMSString0x10 KillStatIDOverride;
	float DespawnDistOverride;
	int32_t HealthOverride;
	float Scale;
	float ScaleVariation;
	float SpawnDistOverride;
	float SpeedMultiplier;
	NMS_GameComponents::GcCreatureTypes Type;
	bool AllowSpawnInAir;

	friend bool operator==(const GcPlayerExperienceSpawnArchetypeData& lhs, const GcPlayerExperienceSpawnArchetypeData& rhs) 
	{
		return lhs.AppearAnim == rhs.AppearAnim &&
		lhs.BehaviourOverrides == rhs.BehaviourOverrides &&
		lhs.BehaviourTreeOverride == rhs.BehaviourTreeOverride &&
		lhs.BlackboardValues == rhs.BlackboardValues &&
		lhs.DamageOverride == rhs.DamageOverride &&
		lhs.DamageReceivedMultiplier == rhs.DamageReceivedMultiplier &&
		lhs.GenerateResource == rhs.GenerateResource &&
		lhs.Id == rhs.Id &&
		lhs.KillingBlowMessageIDOverride == rhs.KillingBlowMessageIDOverride &&
		lhs.KillStatIDOverride == rhs.KillStatIDOverride &&
		lhs.DespawnDistOverride == rhs.DespawnDistOverride &&
		lhs.HealthOverride == rhs.HealthOverride &&
		lhs.Scale == rhs.Scale &&
		lhs.ScaleVariation == rhs.ScaleVariation &&
		lhs.SpawnDistOverride == rhs.SpawnDistOverride &&
		lhs.SpeedMultiplier == rhs.SpeedMultiplier &&
		lhs.Type == rhs.Type &&
		lhs.AllowSpawnInAir == rhs.AllowSpawnInAir;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnData
{
	enum class FaceDirEnum : uint32_t
	{
		Random = 0,
		TowardsPlayer = 1,
		SpawnerAt = 2,
		InFrontOfPlayer = 3,
	};

	NMS::NMSString0x20A SpawnLocatorScanEvent;
	NMS::NMSString0x10 AppearAnim;
	NMS::NMSString0x10 Archetype;
	NMS::NMSString0x10 SpawnLocator;
	int32_t MaxNum[4];
	int32_t MinNum[4];
	float ActiveTime;
	NMS_GameComponents::GcPlayerExperienceSpawnData::FaceDirEnum FaceDir;
	float MaxDist;
	float MinDist;
	float PlayerFacingOffsetMax;

	friend bool operator==(const GcPlayerExperienceSpawnData& lhs, const GcPlayerExperienceSpawnData& rhs) 
	{
		return lhs.SpawnLocatorScanEvent == rhs.SpawnLocatorScanEvent &&
		lhs.AppearAnim == rhs.AppearAnim &&
		lhs.Archetype == rhs.Archetype &&
		lhs.SpawnLocator == rhs.SpawnLocator &&
		std::equal(std::begin(lhs.MaxNum), std::end(lhs.MaxNum), std::begin(rhs.MaxNum)) &&
		std::equal(std::begin(lhs.MinNum), std::end(lhs.MinNum), std::begin(rhs.MinNum)) &&
		lhs.ActiveTime == rhs.ActiveTime &&
		lhs.FaceDir == rhs.FaceDir &&
		lhs.MaxDist == rhs.MaxDist &&
		lhs.MinDist == rhs.MinDist &&
		lhs.PlayerFacingOffsetMax == rhs.PlayerFacingOffsetMax;
	}
};

//Dependency: GcPlayerExperienceSpawnData
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnTable
{
	enum class ExperienceSpawnTypeEnum : uint32_t
	{
		Freighter = 0,
		Mission = 1,
	};

	NMS::NMSString0x10 Event;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnData> Spawns;
	NMS_GameComponents::GcPlayerExperienceSpawnTable::ExperienceSpawnTypeEnum ExperienceSpawnType;
	float InitialDelay;
	float PerSpawnDelay;
	float ResponseRate;
	bool Destroy;

	friend bool operator==(const GcPlayerExperienceSpawnTable& lhs, const GcPlayerExperienceSpawnTable& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.Spawns == rhs.Spawns &&
		lhs.ExperienceSpawnType == rhs.ExperienceSpawnType &&
		lhs.InitialDelay == rhs.InitialDelay &&
		lhs.PerSpawnDelay == rhs.PerSpawnDelay &&
		lhs.ResponseRate == rhs.ResponseRate &&
		lhs.Destroy == rhs.Destroy;
	}
};

//Dependency: GcAIShipSpawnData
struct GcPoliceSpawnWaveData
{
	NMS_GameComponents::GcAIShipSpawnData ShipData;
	int32_t MaxCountsForFireteamSize[4];

	friend bool operator==(const GcPoliceSpawnWaveData& lhs, const GcPoliceSpawnWaveData& rhs) 
	{
		return lhs.ShipData == rhs.ShipData &&
		std::equal(std::begin(lhs.MaxCountsForFireteamSize), std::end(lhs.MaxCountsForFireteamSize), std::begin(rhs.MaxCountsForFireteamSize));
	}
};

//Dependency: NMSString0x10
struct GcPulseEncounterSpawnConditions
{
	NMS::NMSString0x10 RequiresMissionActive;
	NMS::NMSString0x10 RequiresMissionComplete;
	NMS::NMSString0x10 RequiresMissionNotActive;
	NMS::NMSString0x10 RequiresMissionNotComplete;
	NMS::NMSString0x10 RequiresProduct;
	bool AllowedBeyondPortals;
	bool AllowedDuringTutorial;
	bool AllowedInCreative;
	bool AllowedInEmptySystem;
	bool AllowedWhileOnMPMission;
	bool MissionEncounter;
	bool RequiresAlienShip;
	bool RequiresNearbyCorruptWorld;
	bool StandardEncounter;

	friend bool operator==(const GcPulseEncounterSpawnConditions& lhs, const GcPulseEncounterSpawnConditions& rhs) 
	{
		return lhs.RequiresMissionActive == rhs.RequiresMissionActive &&
		lhs.RequiresMissionComplete == rhs.RequiresMissionComplete &&
		lhs.RequiresMissionNotActive == rhs.RequiresMissionNotActive &&
		lhs.RequiresMissionNotComplete == rhs.RequiresMissionNotComplete &&
		lhs.RequiresProduct == rhs.RequiresProduct &&
		lhs.AllowedBeyondPortals == rhs.AllowedBeyondPortals &&
		lhs.AllowedDuringTutorial == rhs.AllowedDuringTutorial &&
		lhs.AllowedInCreative == rhs.AllowedInCreative &&
		lhs.AllowedInEmptySystem == rhs.AllowedInEmptySystem &&
		lhs.AllowedWhileOnMPMission == rhs.AllowedWhileOnMPMission &&
		lhs.MissionEncounter == rhs.MissionEncounter &&
		lhs.RequiresAlienShip == rhs.RequiresAlienShip &&
		lhs.RequiresNearbyCorruptWorld == rhs.RequiresNearbyCorruptWorld &&
		lhs.StandardEncounter == rhs.StandardEncounter;
	}
};

//Dependency: GcPulseEncounterSpawnConditions
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPulseEncounterInfo
{
	NMS::Colour CustomNotifyColour;
	NMS_GameComponents::GcPulseEncounterSpawnConditions SpawnConditions;
	NMS::NMSString0x20A ChatMessageName;
	NMS::NMSString0x20A CustomNotify;
	NMS::NMSString0x20A CustomNotifyOSD;
	NMS::NMSString0x20A CustomNotifyTitle;
	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMSTemplate Encounter;
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float SpawnChance;
	float SpawnDistance;
	bool HasColourOverride;
	bool Silent;
	bool UseMarkerIconInOSD;

	friend bool operator==(const GcPulseEncounterInfo& lhs, const GcPulseEncounterInfo& rhs) 
	{
		return lhs.CustomNotifyColour == rhs.CustomNotifyColour &&
		lhs.SpawnConditions == rhs.SpawnConditions &&
		lhs.ChatMessageName == rhs.ChatMessageName &&
		lhs.CustomNotify == rhs.CustomNotify &&
		lhs.CustomNotifyOSD == rhs.CustomNotifyOSD &&
		lhs.CustomNotifyTitle == rhs.CustomNotifyTitle &&
		lhs.MarkerLabel == rhs.MarkerLabel &&
		lhs.MarkerIcon == rhs.MarkerIcon &&
		lhs.Encounter == rhs.Encounter &&
		lhs.Id == rhs.Id &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.SpawnChance == rhs.SpawnChance &&
		lhs.SpawnDistance == rhs.SpawnDistance &&
		lhs.HasColourOverride == rhs.HasColourOverride &&
		lhs.Silent == rhs.Silent &&
		lhs.UseMarkerIconInOSD == rhs.UseMarkerIconInOSD;
	}
};

//Dependency: GcSentinelSpawnData
//Dependency: NMSString0x10
struct GcSentinelSpawnWave
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcSentinelSpawnData> Spawns;
	int32_t ReinforceAt;

	friend bool operator==(const GcSentinelSpawnWave& lhs, const GcSentinelSpawnWave& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Spawns == rhs.Spawns &&
		lhs.ReinforceAt == rhs.ReinforceAt;
	}
};

//Dependency: GcAIShipSpawnData
//Dependency: GcSentinelSpawnSequenceGroupList
//Dependency: GcPlayerExperienceAsteroidCreatureSpawnTable
//Dependency: GcSentinelWaveGroup
//Dependency: GcSentinelEncounterOverride
//Dependency: GcBackgroundSpaceEncounterInfo
//Dependency: GcPlayerExperienceSpawnArchetypeData
//Dependency: GcPlayerExperienceSpawnTable
//Dependency: GcBountySpawnInfo
//Dependency: GcPoliceSpawnWaveData
//Dependency: GcPulseEncounterInfo
//Dependency: GcSentinelSpawnNamedSequence
//Dependency: GcSentinelSpawnWave
struct GcExperienceSpawnTable
{
	NMS_GameComponents::GcAIShipSpawnData BattleReinforcingPirateFrigateSpawn;
	NMS_GameComponents::GcSentinelSpawnSequenceGroupList EncounterSpawns[9];
	NMS_GameComponents::GcSentinelSpawnSequenceGroupList WantedLevelSpawns[6];
	NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnTable AsteroidCreatureSpawns;
	NMS_GameComponents::GcSentinelWaveGroup SummonerSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> AbandonedFreighterSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> AmbientSpawns;
	std::vector<NMS_GameComponents::GcBackgroundSpaceEncounterInfo> BackgroundSpaceEncounters;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleInitialPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleInitialStandardSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattlePirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleRecurringPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleSecondaryPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnArchetypeData> CreatureSpawnArchetypes;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnTable> CreatureSpawnTable;
	std::vector<NMS_GameComponents::GcSentinelEncounterOverride> EncounterOverrides;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> FlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> FrigateFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> MiningFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> OutpostSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PirateBattleSpawns;
	std::vector<NMS_GameComponents::GcBountySpawnInfo> PirateBountySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PlanetaryPirateFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PlanetaryPirateRaidSpawns;
	std::vector<NMS_GameComponents::GcPoliceSpawnWaveData> PoliceSpawns;
	std::vector<NMS_GameComponents::GcPulseEncounterInfo> PulseEncounters;
	std::vector<NMS_GameComponents::GcSentinelSpawnNamedSequence> SentinelSequences;
	std::vector<NMS_GameComponents::GcSentinelSpawnWave> SentinelSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> SpaceFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> TraderSpawns;

	friend bool operator==(const GcExperienceSpawnTable& lhs, const GcExperienceSpawnTable& rhs) 
	{
		return lhs.BattleReinforcingPirateFrigateSpawn == rhs.BattleReinforcingPirateFrigateSpawn &&
		std::equal(std::begin(lhs.EncounterSpawns), std::end(lhs.EncounterSpawns), std::begin(rhs.EncounterSpawns)) &&
		std::equal(std::begin(lhs.WantedLevelSpawns), std::end(lhs.WantedLevelSpawns), std::begin(rhs.WantedLevelSpawns)) &&
		lhs.AsteroidCreatureSpawns == rhs.AsteroidCreatureSpawns &&
		lhs.SummonerSpawns == rhs.SummonerSpawns &&
		lhs.AbandonedFreighterSpawns == rhs.AbandonedFreighterSpawns &&
		lhs.AmbientSpawns == rhs.AmbientSpawns &&
		lhs.BackgroundSpaceEncounters == rhs.BackgroundSpaceEncounters &&
		lhs.BattleInitialPirateSpawns == rhs.BattleInitialPirateSpawns &&
		lhs.BattleInitialStandardSpawns == rhs.BattleInitialStandardSpawns &&
		lhs.BattlePirateSpawns == rhs.BattlePirateSpawns &&
		lhs.BattleRecurringPirateSpawns == rhs.BattleRecurringPirateSpawns &&
		lhs.BattleSecondaryPirateSpawns == rhs.BattleSecondaryPirateSpawns &&
		lhs.BattleSpawns == rhs.BattleSpawns &&
		lhs.CreatureSpawnArchetypes == rhs.CreatureSpawnArchetypes &&
		lhs.CreatureSpawnTable == rhs.CreatureSpawnTable &&
		lhs.EncounterOverrides == rhs.EncounterOverrides &&
		lhs.FlybySpawns == rhs.FlybySpawns &&
		lhs.FrigateFlybySpawns == rhs.FrigateFlybySpawns &&
		lhs.MiningFlybySpawns == rhs.MiningFlybySpawns &&
		lhs.OutpostSpawns == rhs.OutpostSpawns &&
		lhs.PirateBattleSpawns == rhs.PirateBattleSpawns &&
		lhs.PirateBountySpawns == rhs.PirateBountySpawns &&
		lhs.PirateSpawns == rhs.PirateSpawns &&
		lhs.PlanetaryPirateFlybySpawns == rhs.PlanetaryPirateFlybySpawns &&
		lhs.PlanetaryPirateRaidSpawns == rhs.PlanetaryPirateRaidSpawns &&
		lhs.PoliceSpawns == rhs.PoliceSpawns &&
		lhs.PulseEncounters == rhs.PulseEncounters &&
		lhs.SentinelSequences == rhs.SentinelSequences &&
		lhs.SentinelSpawns == rhs.SentinelSpawns &&
		lhs.SpaceFlybySpawns == rhs.SpaceFlybySpawns &&
		lhs.TraderSpawns == rhs.TraderSpawns;
	}
};

struct GcShipDialogueTreeEnum
{
	enum class DialogueTreeEnum : uint32_t
	{
		Bribe = 0,
		Beg = 1,
		Ambush = 2,
		Trade = 3,
		Help = 4,
		Goods = 5,
		Hostile = 6,
	};

	NMS_GameComponents::GcShipDialogueTreeEnum::DialogueTreeEnum DialogueTree;

	friend bool operator==(const GcShipDialogueTreeEnum& lhs, const GcShipDialogueTreeEnum& rhs) 
	{
		return lhs.DialogueTree == rhs.DialogueTree;
	}
};

//Dependency: Vector2f
struct GcExperienceTimers
{
	NMS::Vector2f High;
	NMS::Vector2f Low;
	NMS::Vector2f Normal;
	int32_t HighChance;
	int32_t LowChance;

	friend bool operator==(const GcExperienceTimers& lhs, const GcExperienceTimers& rhs) 
	{
		return lhs.High == rhs.High &&
		lhs.Low == rhs.Low &&
		lhs.Normal == rhs.Normal &&
		lhs.HighChance == rhs.HighChance &&
		lhs.LowChance == rhs.LowChance;
	}
};

struct GcMissionConditionSettlementMatchesSeed
{

	friend bool operator==(const GcMissionConditionSettlementMatchesSeed& lhs, const GcMissionConditionSettlementMatchesSeed& rhs) 
	{
		return true;
	}
};

//Dependency: GcJourneyCategory
struct GcJourney
{
	std::vector<NMS_GameComponents::GcJourneyCategory> Categories;

	friend bool operator==(const GcJourney& lhs, const GcJourney& rhs) 
	{
		return lhs.Categories == rhs.Categories;
	}
};

//Dependency: GcEnvironmentSpawnData
struct GcExternalObjectList
{
	NMS_GameComponents::GcEnvironmentSpawnData Objects;

	friend bool operator==(const GcExternalObjectList& lhs, const GcExternalObjectList& rhs) 
	{
		return lhs.Objects == rhs.Objects;
	}
};

//Dependency: GcFossilCategory
struct GcMissionConditionHasFossilComponent
{
	NMS_GameComponents::GcFossilCategory SpecificCategory;

	friend bool operator==(const GcMissionConditionHasFossilComponent& lhs, const GcMissionConditionHasFossilComponent& rhs) 
	{
		return lhs.SpecificCategory == rhs.SpecificCategory;
	}
};

//Dependency: GcCreatureTypes
struct GcFiendCrimeSpawnData
{
	int32_t MaxNum[4];
	int32_t MinNum[4];
	float MaxDist;
	float MinDist;
	NMS_GameComponents::GcCreatureTypes Type;

	friend bool operator==(const GcFiendCrimeSpawnData& lhs, const GcFiendCrimeSpawnData& rhs) 
	{
		return std::equal(std::begin(lhs.MaxNum), std::end(lhs.MaxNum), std::begin(rhs.MaxNum)) &&
		std::equal(std::begin(lhs.MinNum), std::end(lhs.MinNum), std::begin(rhs.MinNum)) &&
		lhs.MaxDist == rhs.MaxDist &&
		lhs.MinDist == rhs.MinDist &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcInventoryClass
//Dependency: GcSpaceshipClasses
struct GcMissionConditionHasShip
{
	NMS_GameComponents::GcInventoryClass ShipInventoryClass;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	bool BetterClassMatches;
	bool CheckAllShips;
	bool DontCheckType;
	bool TakeValueFromSeasonData;

	friend bool operator==(const GcMissionConditionHasShip& lhs, const GcMissionConditionHasShip& rhs) 
	{
		return lhs.ShipInventoryClass == rhs.ShipInventoryClass &&
		lhs.ShipType == rhs.ShipType &&
		lhs.BetterClassMatches == rhs.BetterClassMatches &&
		lhs.CheckAllShips == rhs.CheckAllShips &&
		lhs.DontCheckType == rhs.DontCheckType &&
		lhs.TakeValueFromSeasonData == rhs.TakeValueFromSeasonData;
	}
};

//Dependency: NMSString0x10
struct GcPlayerCharacterStateData
{
	NMS::NMSString0x10 AimTree1HPitch;
	NMS::NMSString0x10 AimTree1HYaw;
	NMS::NMSString0x10 AimTree2HPitch;
	NMS::NMSString0x10 AimTree2HYaw;
	NMS::NMSString0x10 AimTreeFishingPitch;
	NMS::NMSString0x10 AimTreeFishingYaw;
	NMS::NMSString0x10 AimTreeStaffPitch;
	NMS::NMSString0x10 AimTreeStaffYaw;
	NMS::NMSString0x10 HitReact0H;
	NMS::NMSString0x10 HitReact1H;
	NMS::NMSString0x10 HitReact2H;
	NMS::NMSString0x10 HitReactStaff;
	NMS::NMSString0x10 Locomotion0H;
	NMS::NMSString0x10 Locomotion1H;
	NMS::NMSString0x10 Locomotion2H;
	NMS::NMSString0x10 LocomotionStaff;
	bool KeepHeadForward;

	friend bool operator==(const GcPlayerCharacterStateData& lhs, const GcPlayerCharacterStateData& rhs) 
	{
		return lhs.AimTree1HPitch == rhs.AimTree1HPitch &&
		lhs.AimTree1HYaw == rhs.AimTree1HYaw &&
		lhs.AimTree2HPitch == rhs.AimTree2HPitch &&
		lhs.AimTree2HYaw == rhs.AimTree2HYaw &&
		lhs.AimTreeFishingPitch == rhs.AimTreeFishingPitch &&
		lhs.AimTreeFishingYaw == rhs.AimTreeFishingYaw &&
		lhs.AimTreeStaffPitch == rhs.AimTreeStaffPitch &&
		lhs.AimTreeStaffYaw == rhs.AimTreeStaffYaw &&
		lhs.HitReact0H == rhs.HitReact0H &&
		lhs.HitReact1H == rhs.HitReact1H &&
		lhs.HitReact2H == rhs.HitReact2H &&
		lhs.HitReactStaff == rhs.HitReactStaff &&
		lhs.Locomotion0H == rhs.Locomotion0H &&
		lhs.Locomotion1H == rhs.Locomotion1H &&
		lhs.Locomotion2H == rhs.Locomotion2H &&
		lhs.LocomotionStaff == rhs.LocomotionStaff &&
		lhs.KeepHeadForward == rhs.KeepHeadForward;
	}
};

//Dependency: GcFiendCrimeSpawnData
//Dependency: GcFiendCrime
struct GcFiendCrimeSpawnTable
{
	std::vector<NMS_GameComponents::GcFiendCrimeSpawnData> Spawns;
	NMS_GameComponents::GcFiendCrime Crime;
	float ResponseRate;

	friend bool operator==(const GcFiendCrimeSpawnTable& lhs, const GcFiendCrimeSpawnTable& rhs) 
	{
		return lhs.Spawns == rhs.Spawns &&
		lhs.Crime == rhs.Crime &&
		lhs.ResponseRate == rhs.ResponseRate;
	}
};

//Dependency: GcPlayerCharacterStateData
struct GcPlayerCharacterStateTable
{
	NMS_GameComponents::GcPlayerCharacterStateData CharacterStates[19];

	friend bool operator==(const GcPlayerCharacterStateTable& lhs, const GcPlayerCharacterStateTable& rhs) 
	{
		return std::equal(std::begin(lhs.CharacterStates), std::end(lhs.CharacterStates), std::begin(rhs.CharacterStates));
	}
};

struct GcFishSizeProbability
{
	int32_t BaseWeight;
	int32_t DepthModifier;
	int32_t DepthRangeMax;
	int32_t DepthRangeMin;

	friend bool operator==(const GcFishSizeProbability& lhs, const GcFishSizeProbability& rhs) 
	{
		return lhs.BaseWeight == rhs.BaseWeight &&
		lhs.DepthModifier == rhs.DepthModifier &&
		lhs.DepthRangeMax == rhs.DepthRangeMax &&
		lhs.DepthRangeMin == rhs.DepthRangeMin;
	}
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceCollectLocalSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocation;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool FromNow;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;
	bool WaitForSelected;

	friend bool operator==(const GcMissionSequenceCollectLocalSubstance& lhs, const GcMissionSequenceCollectLocalSubstance& rhs) 
	{
		return lhs.UseScanEventToDetermineLocation == rhs.UseScanEventToDetermineLocation &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount &&
		lhs.DefaultValueMultiplier == rhs.DefaultValueMultiplier &&
		lhs.LocalSubstanceType == rhs.LocalSubstanceType &&
		lhs.CanFormatObjectives == rhs.CanFormatObjectives &&
		lhs.CanSetIcon == rhs.CanSetIcon &&
		lhs.FromNow == rhs.FromNow &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.UseDefaultValue == rhs.UseDefaultValue &&
		lhs.WaitForSelected == rhs.WaitForSelected;
	}
};

//Dependency: GcMechWeaponLocation
struct GcMechWeaponLocationPriority
{
	std::vector<NMS_GameComponents::GcMechWeaponLocation> MechWeaponLocationPriority;

	friend bool operator==(const GcMechWeaponLocationPriority& lhs, const GcMechWeaponLocationPriority& rhs) 
	{
		return lhs.MechWeaponLocationPriority == rhs.MechWeaponLocationPriority;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: LinkableNMSTemplate
struct TkAttachmentData
{
	std::vector<NMSTemplate> AdditionalData;
	std::vector<NMS::LinkableNMSTemplate> Components;
	float LodDistances[5];

	friend bool operator==(const TkAttachmentData& lhs, const TkAttachmentData& rhs) 
	{
		return lhs.AdditionalData == rhs.AdditionalData &&
		lhs.Components == rhs.Components &&
		std::equal(std::begin(lhs.LodDistances), std::end(lhs.LodDistances), std::begin(rhs.LodDistances));
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcFishSizeProbability
//Dependency: GcBiomeType
struct GcFishSizeProbabilityBiomeOverride
{
	NMS_GameComponents::GcFishSizeProbability SizeWeights[4];
	NMS_GameComponents::GcBiomeType Biome;

	friend bool operator==(const GcFishSizeProbabilityBiomeOverride& lhs, const GcFishSizeProbabilityBiomeOverride& rhs) 
	{
		return std::equal(std::begin(lhs.SizeWeights), std::end(lhs.SizeWeights), std::begin(rhs.SizeWeights)) &&
		lhs.Biome == rhs.Biome;
	}
};

struct GcMissionConsequenceResetPulseEncounterOverride
{

	friend bool operator==(const GcMissionConsequenceResetPulseEncounterOverride& lhs, const GcMissionConsequenceResetPulseEncounterOverride& rhs) 
	{
		return true;
	}
};

//Dependency: GcProceduralTechnologyCategory
struct GcRewardProceduralTechnology
{
	NMS_GameComponents::GcProceduralTechnologyCategory Type;

	friend bool operator==(const GcRewardProceduralTechnology& lhs, const GcRewardProceduralTechnology& rhs) 
	{
		return lhs.Type == rhs.Type;
	}
};

//Dependency: GcFishData
struct GcFishTable
{
	std::vector<NMS_GameComponents::GcFishData> Fish;

	friend bool operator==(const GcFishTable& lhs, const GcFishTable& rhs) 
	{
		return lhs.Fish == rhs.Fish;
	}
};

struct GcMissionConditionHasSeasonalReward
{

	friend bool operator==(const GcMissionConditionHasSeasonalReward& lhs, const GcMissionConditionHasSeasonalReward& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
struct GcRewardProcTechProduct
{
	NMS::NMSString0x20A Group;
	int32_t WeightedChanceEpic;
	int32_t WeightedChanceLegendary;
	int32_t WeightedChanceNormal;
	int32_t WeightedChanceRare;
	bool AllowAnyGroup;
	bool ForceQualityRelevant;
	bool ForceRelevant;

	friend bool operator==(const GcRewardProcTechProduct& lhs, const GcRewardProcTechProduct& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.WeightedChanceEpic == rhs.WeightedChanceEpic &&
		lhs.WeightedChanceLegendary == rhs.WeightedChanceLegendary &&
		lhs.WeightedChanceNormal == rhs.WeightedChanceNormal &&
		lhs.WeightedChanceRare == rhs.WeightedChanceRare &&
		lhs.AllowAnyGroup == rhs.AllowAnyGroup &&
		lhs.ForceQualityRelevant == rhs.ForceQualityRelevant &&
		lhs.ForceRelevant == rhs.ForceRelevant;
	}
};

//Dependency: GcHistoricalSeasonData
struct GcHistoricalSeasonDataTable
{
	std::vector<NMS_GameComponents::GcHistoricalSeasonData> Table;

	friend bool operator==(const GcHistoricalSeasonDataTable& lhs, const GcHistoricalSeasonDataTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcProductData
struct GcProductTable
{
	std::vector<NMS_GameComponents::GcProductData> Table;

	friend bool operator==(const GcProductTable& lhs, const GcProductTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcAudioWwiseRTPCs
struct GcGalaxyAudioSetupData
{
	NMS_GameComponents::GcAudioWwiseEvents EventAddWaypoint;
	NMS_GameComponents::GcAudioWwiseEvents EventMapEnter;
	NMS_GameComponents::GcAudioWwiseEvents EventMapExit;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodeChange;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodeChangeFailed;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodePathMove;
	NMS_GameComponents::GcAudioWwiseEvents EventPlanetRumble;
	NMS_GameComponents::GcAudioWwiseEvents EventRemoveWaypoint;
	NMS_GameComponents::GcAudioWwiseEvents EventRouteLines;
	NMS_GameComponents::GcAudioWwiseEvents EventSystemDeselect;
	NMS_GameComponents::GcAudioWwiseEvents EventSystemSelect;
	NMS_GameComponents::GcAudioWwiseEvents EventTextAppear;
	NMS_GameComponents::GcAudioWwiseEvents EventWaypointError;
	NMS_GameComponents::GcAudioWwiseEvents EventWaypointLoop;
	NMS_GameComponents::GcAudioWwiseRTPCs RTPCStarWhoosh;
	float WhooshClip;
	float WhooshMultiplier;

	friend bool operator==(const GcGalaxyAudioSetupData& lhs, const GcGalaxyAudioSetupData& rhs) 
	{
		return lhs.EventAddWaypoint == rhs.EventAddWaypoint &&
		lhs.EventMapEnter == rhs.EventMapEnter &&
		lhs.EventMapExit == rhs.EventMapExit &&
		lhs.EventNavmodeChange == rhs.EventNavmodeChange &&
		lhs.EventNavmodeChangeFailed == rhs.EventNavmodeChangeFailed &&
		lhs.EventNavmodePathMove == rhs.EventNavmodePathMove &&
		lhs.EventPlanetRumble == rhs.EventPlanetRumble &&
		lhs.EventRemoveWaypoint == rhs.EventRemoveWaypoint &&
		lhs.EventRouteLines == rhs.EventRouteLines &&
		lhs.EventSystemDeselect == rhs.EventSystemDeselect &&
		lhs.EventSystemSelect == rhs.EventSystemSelect &&
		lhs.EventTextAppear == rhs.EventTextAppear &&
		lhs.EventWaypointError == rhs.EventWaypointError &&
		lhs.EventWaypointLoop == rhs.EventWaypointLoop &&
		lhs.RTPCStarWhoosh == rhs.RTPCStarWhoosh &&
		lhs.WhooshClip == rhs.WhooshClip &&
		lhs.WhooshMultiplier == rhs.WhooshMultiplier;
	}
};

struct GcFlyingSnakeData
{
	float AirThickness;
	float AltitudeSinAmp;
	float AltitudeSinPeriod;
	float ApproachBaitSpeed;
	float AscendDescendSpeed;
	float BarrelRollCount;
	float BarrelRollSpawnDelay;
	float BarrelRollSpeed;
	float CircleSpeed;
	float DefaultCircleDistance;
	float RiseDelay;
	float RiseHeight;
	float RiseTime;
	float TailStiffness;
	float TwistLimit;
	float WindForce;

	friend bool operator==(const GcFlyingSnakeData& lhs, const GcFlyingSnakeData& rhs) 
	{
		return lhs.AirThickness == rhs.AirThickness &&
		lhs.AltitudeSinAmp == rhs.AltitudeSinAmp &&
		lhs.AltitudeSinPeriod == rhs.AltitudeSinPeriod &&
		lhs.ApproachBaitSpeed == rhs.ApproachBaitSpeed &&
		lhs.AscendDescendSpeed == rhs.AscendDescendSpeed &&
		lhs.BarrelRollCount == rhs.BarrelRollCount &&
		lhs.BarrelRollSpawnDelay == rhs.BarrelRollSpawnDelay &&
		lhs.BarrelRollSpeed == rhs.BarrelRollSpeed &&
		lhs.CircleSpeed == rhs.CircleSpeed &&
		lhs.DefaultCircleDistance == rhs.DefaultCircleDistance &&
		lhs.RiseDelay == rhs.RiseDelay &&
		lhs.RiseHeight == rhs.RiseHeight &&
		lhs.RiseTime == rhs.RiseTime &&
		lhs.TailStiffness == rhs.TailStiffness &&
		lhs.TwistLimit == rhs.TwistLimit &&
		lhs.WindForce == rhs.WindForce;
	}
};

//Dependency: GcBiomeType
struct GcMissionConditionRequestedPhoto
{
	NMS_GameComponents::GcBiomeType Biome;

	friend bool operator==(const GcMissionConditionRequestedPhoto& lhs, const GcMissionConditionRequestedPhoto& rhs) 
	{
		return lhs.Biome == rhs.Biome;
	}
};

struct GcFoliageComponentData
{
	float Radius;

	friend bool operator==(const GcFoliageComponentData& lhs, const GcFoliageComponentData& rhs) 
	{
		return lhs.Radius == rhs.Radius;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationNotify
{
	NMSTemplate Data;
	float EndFrame;
	float StartFrame;
	int32_t Track;

	friend bool operator==(const TkAnimationNotify& lhs, const TkAnimationNotify& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.EndFrame == rhs.EndFrame &&
		lhs.StartFrame == rhs.StartFrame &&
		lhs.Track == rhs.Track;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlayerMissionProgressMapEntry
struct GcPlayerMissionProgressMapTable
{
	std::vector<NMS_GameComponents::GcPlayerMissionProgressMapEntry> MissionProgressTable;

	friend bool operator==(const GcPlayerMissionProgressMapTable& lhs, const GcPlayerMissionProgressMapTable& rhs) 
	{
		return lhs.MissionProgressTable == rhs.MissionProgressTable;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcFreighterBaseRoom
{
	NMS::NMSString0x20A Palette;
	NMS::NMSString0x10 Name;

	friend bool operator==(const GcFreighterBaseRoom& lhs, const GcFreighterBaseRoom& rhs) 
	{
		return lhs.Palette == rhs.Palette &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector2f
struct TkAnim2dBlendNodeData
{
	NMS::Vector2f Position;
	NMSTemplate BlendChild;

	friend bool operator==(const TkAnim2dBlendNodeData& lhs, const TkAnim2dBlendNodeData& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.BlendChild == rhs.BlendChild;
	}
};

//Dependency: TkCurveType
//Dependency: TkAnim2dBlendNodeData
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnim2dBlendNode
{
	enum class BlendOpEnum : uint32_t
	{
		Blend = 0,
		Add = 1,
	};

	enum class CoordinatesEnum : uint32_t
	{
		Polar = 0,
		Cartesian = 1,
	};

	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 PositionIn;
	float PositionRangeBegin;
	float PositionRangeEnd;
	float PositionSpringTime;
	NMS_Toolkit::TkCurveType PositionCurve;
	bool SelectBlend;
	float SelectBlendSpring;
	bool PolarInputInterpolation;
	float PolarInputLimitCentre;
	float PolarInputLimitExtent;
	NMS_Toolkit::TkAnim2dBlendNode::CoordinatesEnum Coordinates;
	NMS_Toolkit::TkAnim2dBlendNode::BlendOpEnum BlendOp;
	std::vector<NMS_Toolkit::TkAnim2dBlendNodeData> BlendChildren;

	friend bool operator==(const TkAnim2dBlendNode& lhs, const TkAnim2dBlendNode& rhs) 
	{
		return lhs.NodeId == rhs.NodeId &&
		lhs.PositionIn == rhs.PositionIn &&
		lhs.PositionRangeBegin == rhs.PositionRangeBegin &&
		lhs.PositionRangeEnd == rhs.PositionRangeEnd &&
		lhs.PositionSpringTime == rhs.PositionSpringTime &&
		lhs.PositionCurve == rhs.PositionCurve &&
		lhs.SelectBlend == rhs.SelectBlend &&
		lhs.SelectBlendSpring == rhs.SelectBlendSpring &&
		lhs.PolarInputInterpolation == rhs.PolarInputInterpolation &&
		lhs.PolarInputLimitCentre == rhs.PolarInputLimitCentre &&
		lhs.PolarInputLimitExtent == rhs.PolarInputLimitExtent &&
		lhs.Coordinates == rhs.Coordinates &&
		lhs.BlendOp == rhs.BlendOp &&
		lhs.BlendChildren == rhs.BlendChildren;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcFreighterCargoOption
{
	NMS::NMSString0x10 ID;
	int32_t MaxAmount;
	int32_t MinAmount;
	int32_t PercentChance;

	friend bool operator==(const GcFreighterCargoOption& lhs, const GcFreighterCargoOption& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.MaxAmount == rhs.MaxAmount &&
		lhs.MinAmount == rhs.MinAmount &&
		lhs.PercentChance == rhs.PercentChance;
	}
};

//Dependency: GcProceduralTechnologyData
struct GcProceduralTechnologyTable
{
	std::vector<NMS_GameComponents::GcProceduralTechnologyData> Table;

	friend bool operator==(const GcProceduralTechnologyTable& lhs, const GcProceduralTechnologyTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcRewardInterventionResponse
{
	enum class ResponseTypeEnum : uint32_t
	{
		DontIntervene = 0,
		InterveneWithMission = 1,
		MissionSuccess = 2,
		MissionFailure = 3,
		MissionAvoid = 4,
		MissionChance = 5,
	};

	NMS::NMSString0x10 InterveneWithMissionID;
	int32_t BasePercentOfMissionChanceSuccess;
	NMS_GameComponents::GcRewardInterventionResponse::ResponseTypeEnum ResponseType;

	friend bool operator==(const GcRewardInterventionResponse& lhs, const GcRewardInterventionResponse& rhs) 
	{
		return lhs.InterveneWithMissionID == rhs.InterveneWithMissionID &&
		lhs.BasePercentOfMissionChanceSuccess == rhs.BasePercentOfMissionChanceSuccess &&
		lhs.ResponseType == rhs.ResponseType;
	}
};

//Dependency: GcFreighterDungeonParams
struct GcFreighterDungeonsTable
{
	std::vector<NMS_GameComponents::GcFreighterDungeonParams> Dungeons;

	friend bool operator==(const GcFreighterDungeonsTable& lhs, const GcFreighterDungeonsTable& rhs) 
	{
		return lhs.Dungeons == rhs.Dungeons;
	}
};

struct GcFreighterNPCSpawnPriority
{
	std::vector<float> PriorityScale;

	friend bool operator==(const GcFreighterNPCSpawnPriority& lhs, const GcFreighterNPCSpawnPriority& rhs) 
	{
		return lhs.PriorityScale == rhs.PriorityScale;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkWeightedAnim
{
	NMS::NMSString0x10 Anim;
	float Weight;

	friend bool operator==(const TkWeightedAnim& lhs, const TkWeightedAnim& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Weight == rhs.Weight;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcFreighterNPCType
{
	enum class FreighterNPCTypeEnum : uint32_t
	{
		SquadronPilot = 0,
		FrigateCaptain = 1,
		WorkerBio = 2,
		WorkerTech = 3,
		WorkerIndustry = 4,
	};

	NMS_GameComponents::GcFreighterNPCType::FreighterNPCTypeEnum FreighterNPCType;

	friend bool operator==(const GcFreighterNPCType& lhs, const GcFreighterNPCType& rhs) 
	{
		return lhs.FreighterNPCType == rhs.FreighterNPCType;
	}
};

//Dependency: NMSString0x10
struct GcFreighterRoomNPCSpawnCapacityEntry
{
	NMS::NMSString0x10 RoomID;
	float SpawnCapacity;

	friend bool operator==(const GcFreighterRoomNPCSpawnCapacityEntry& lhs, const GcFreighterRoomNPCSpawnCapacityEntry& rhs) 
	{
		return lhs.RoomID == rhs.RoomID &&
		lhs.SpawnCapacity == rhs.SpawnCapacity;
	}
};

//Dependency: GcFreighterRoomNPCSpawnCapacityEntry
struct GcFreighterRoomNPCSpawnCapacities
{
	std::vector<NMS_GameComponents::GcFreighterRoomNPCSpawnCapacityEntry> RoomSpawnCapacities;

	friend bool operator==(const GcFreighterRoomNPCSpawnCapacities& lhs, const GcFreighterRoomNPCSpawnCapacities& rhs) 
	{
		return lhs.RoomSpawnCapacities == rhs.RoomSpawnCapacities;
	}
};

struct GcSynchronisedBufferData
{
	std::vector<uint64_t> Data;

	friend bool operator==(const GcSynchronisedBufferData& lhs, const GcSynchronisedBufferData& rhs) 
	{
		return lhs.Data == rhs.Data;
	}
};

struct GcMissionConditionSettlementsHaveEverBeenDisabled
{

	friend bool operator==(const GcMissionConditionSettlementsHaveEverBeenDisabled& lhs, const GcMissionConditionSettlementsHaveEverBeenDisabled& rhs) 
	{
		return true;
	}
};

//Dependency: VariableSizeString
struct GcOverlayTexture
{
	NMS::VariableSizeString OverlayDiffuse;
	NMS::VariableSizeString OverlayMasks;
	NMS::VariableSizeString OverlayNormal;
	int32_t OverlayMaskIdx;

	friend bool operator==(const GcOverlayTexture& lhs, const GcOverlayTexture& rhs) 
	{
		return lhs.OverlayDiffuse == rhs.OverlayDiffuse &&
		lhs.OverlayMasks == rhs.OverlayMasks &&
		lhs.OverlayNormal == rhs.OverlayNormal &&
		lhs.OverlayMaskIdx == rhs.OverlayMaskIdx;
	}
};

struct GcFreighterSyncComponentData
{
	bool Dummy;

	friend bool operator==(const GcFreighterSyncComponentData& lhs, const GcFreighterSyncComponentData& rhs) 
	{
		return lhs.Dummy == rhs.Dummy;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcScreenFilterData
{
	NMS::NMSString0x20A LocText;
	NMS::VariableSizeString Filename;
	float FadeDistance;
	float HdrAreaAdjust;
	bool SelectableInPhotoMode;

	friend bool operator==(const GcScreenFilterData& lhs, const GcScreenFilterData& rhs) 
	{
		return lhs.LocText == rhs.LocText &&
		lhs.Filename == rhs.Filename &&
		lhs.FadeDistance == rhs.FadeDistance &&
		lhs.HdrAreaAdjust == rhs.HdrAreaAdjust &&
		lhs.SelectableInPhotoMode == rhs.SelectableInPhotoMode;
	}
};

struct GcFriendlyDroneChatType
{
	enum class FriendlyDroneChatTypeEnum : uint32_t
	{
		Summoned = 0,
		Unsummoned = 1,
		BecomeWanted = 2,
		LoseWanted = 3,
		Idle = 4,
	};

	NMS_GameComponents::GcFriendlyDroneChatType::FriendlyDroneChatTypeEnum FriendlyDroneChatType;

	friend bool operator==(const GcFriendlyDroneChatType& lhs, const GcFriendlyDroneChatType& rhs) 
	{
		return lhs.FriendlyDroneChatType == rhs.FriendlyDroneChatType;
	}
};

//Dependency: NMSString0x20A
struct GcItemFilterStageDataTechPack
{
	NMS::NMSString0x20A DisabledMessage;

	friend bool operator==(const GcItemFilterStageDataTechPack& lhs, const GcItemFilterStageDataTechPack& rhs) 
	{
		return lhs.DisabledMessage == rhs.DisabledMessage;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceLeaveNexusMP
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageNoWarp;
	uint64_t Timeout;

	friend bool operator==(const GcMissionSequenceLeaveNexusMP& lhs, const GcMissionSequenceLeaveNexusMP& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageNoWarp == rhs.MessageNoWarp &&
		lhs.Timeout == rhs.Timeout;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMissionSequenceWaitForPortalWarp
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString SpecificOverrideUA;
	NMS::NMSString0x20 CommunityOverrideUA;
	bool PartOfAtlasStory;
	bool WarpToRendezvousForThisStage;
	bool WarpToSpace;

	friend bool operator==(const GcMissionSequenceWaitForPortalWarp& lhs, const GcMissionSequenceWaitForPortalWarp& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.SpecificOverrideUA == rhs.SpecificOverrideUA &&
		lhs.CommunityOverrideUA == rhs.CommunityOverrideUA &&
		lhs.PartOfAtlasStory == rhs.PartOfAtlasStory &&
		lhs.WarpToRendezvousForThisStage == rhs.WarpToRendezvousForThisStage &&
		lhs.WarpToSpace == rhs.WarpToSpace;
	}
};

struct GcRewardStationTeleportEndpoint
{

	friend bool operator==(const GcRewardStationTeleportEndpoint& lhs, const GcRewardStationTeleportEndpoint& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimJointLODData
{
	std::vector<NMS::NMSString0x40> JointNames;
	int32_t LOD;

	friend bool operator==(const TkAnimJointLODData& lhs, const TkAnimJointLODData& rhs) 
	{
		return lhs.JointNames == rhs.JointNames &&
		lhs.LOD == rhs.LOD;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcShipFlareComponentData
{
	enum class FlareTypeEnum : uint32_t
	{
		Default = 0,
	};

	NMS_GameComponents::GcShipFlareComponentData::FlareTypeEnum FlareType;

	friend bool operator==(const GcShipFlareComponentData& lhs, const GcShipFlareComponentData& rhs) 
	{
		return lhs.FlareType == rhs.FlareType;
	}
};

struct GcGroupCondition
{
	std::vector<NMSTemplate> Conditions;
	bool ORConditions;

	friend bool operator==(const GcGroupCondition& lhs, const GcGroupCondition& rhs) 
	{
		return lhs.Conditions == rhs.Conditions &&
		lhs.ORConditions == rhs.ORConditions;
	}
};

struct GcRewardTimeWarp
{

	friend bool operator==(const GcRewardTimeWarp& lhs, const GcRewardTimeWarp& rhs) 
	{
		return true;
	}
};

struct GcMultitoolPoolType
{
	enum class MultiToolPoolTypeEnum : uint32_t
	{
		Standard = 0,
		Exotic = 1,
		Sentinel = 2,
		Atlas = 3,
		SettlementRotational = 4,
	};

	NMS_GameComponents::GcMultitoolPoolType::MultiToolPoolTypeEnum MultiToolPoolType;

	friend bool operator==(const GcMultitoolPoolType& lhs, const GcMultitoolPoolType& rhs) 
	{
		return lhs.MultiToolPoolType == rhs.MultiToolPoolType;
	}
};

//Dependency: GcMultitoolPoolType
//Dependency: VariableSizeString
struct GcMultitoolPoolData
{
	NMS::VariableSizeString File;
	int32_t MaxDraw;
	int32_t MinDraw;
	float PoolProbability;
	NMS_GameComponents::GcMultitoolPoolType PoolType;

	friend bool operator==(const GcMultitoolPoolData& lhs, const GcMultitoolPoolData& rhs) 
	{
		return lhs.File == rhs.File &&
		lhs.MaxDraw == rhs.MaxDraw &&
		lhs.MinDraw == rhs.MinDraw &&
		lhs.PoolProbability == rhs.PoolProbability &&
		lhs.PoolType == rhs.PoolType;
	}
};

//Dependency: NMSString0x10
struct GcRewardSpecificTechFromList
{
	enum class TechListRewardOrderEnum : uint32_t
	{
		OneRandom = 0,
		InOrder = 1,
		TryAllRandom = 2,
	};

	std::vector<NMS::NMSString0x10> TechList;
	NMS_GameComponents::GcRewardSpecificTechFromList::TechListRewardOrderEnum TechListRewardOrder;
	bool FailIfAllKnown;

	friend bool operator==(const GcRewardSpecificTechFromList& lhs, const GcRewardSpecificTechFromList& rhs) 
	{
		return lhs.TechList == rhs.TechList &&
		lhs.TechListRewardOrder == rhs.TechListRewardOrder &&
		lhs.FailIfAllKnown == rhs.FailIfAllKnown;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkInputHandEnum
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkButtonPathMapping
{
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS_Toolkit::TkInputHandEnum Hand;
	NMS_Toolkit::TkInputEnum Id;
	NMS::NMSString0x20 OpenVROriginNames;

	friend bool operator==(const TkButtonPathMapping& lhs, const TkButtonPathMapping& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.OverlayIcon == rhs.OverlayIcon &&
		lhs.SolidIcon == rhs.SolidIcon &&
		lhs.SpecialIcon == rhs.SpecialIcon &&
		lhs.Hand == rhs.Hand &&
		lhs.Id == rhs.Id &&
		lhs.OpenVROriginNames == rhs.OpenVROriginNames;
	}
};

//Dependency: TkButtonPathMapping
struct TkButtonImageLookup
{
	std::vector<NMS_Toolkit::TkButtonPathMapping> Lookup;

	friend bool operator==(const TkButtonImageLookup& lhs, const TkButtonImageLookup& rhs) 
	{
		return lhs.Lookup == rhs.Lookup;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionSystemHasCorruptedPlanet
{
	bool AllowNexus;

	friend bool operator==(const GcMissionConditionSystemHasCorruptedPlanet& lhs, const GcMissionConditionSystemHasCorruptedPlanet& rhs) 
	{
		return lhs.AllowNexus == rhs.AllowNexus;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkJointExtentData
{
	float JointExtentCenter[3];
	float JointExtentMax[3];
	float JointExtentMin[3];
	float JointExtentStdDev[3];

	friend bool operator==(const TkJointExtentData& lhs, const TkJointExtentData& rhs) 
	{
		return std::equal(std::begin(lhs.JointExtentCenter), std::end(lhs.JointExtentCenter), std::begin(rhs.JointExtentCenter)) &&
		std::equal(std::begin(lhs.JointExtentMax), std::end(lhs.JointExtentMax), std::begin(rhs.JointExtentMax)) &&
		std::equal(std::begin(lhs.JointExtentMin), std::end(lhs.JointExtentMin), std::begin(rhs.JointExtentMin)) &&
		std::equal(std::begin(lhs.JointExtentStdDev), std::end(lhs.JointExtentStdDev), std::begin(rhs.JointExtentStdDev));
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceFreighterEngage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageEngage;
	NMS::VariableSizeString MessageGetToSpace;
	NMS::NMSString0x10 TimeoutMessage;
	NMS::VariableSizeString TimeoutOSDMessage;
	float EngageDistance;
	float EngageTime;
	float TimeAfterWarp;

	friend bool operator==(const GcMissionSequenceFreighterEngage& lhs, const GcMissionSequenceFreighterEngage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.MessageEngage == rhs.MessageEngage &&
		lhs.MessageGetToSpace == rhs.MessageGetToSpace &&
		lhs.TimeoutMessage == rhs.TimeoutMessage &&
		lhs.TimeoutOSDMessage == rhs.TimeoutOSDMessage &&
		lhs.EngageDistance == rhs.EngageDistance &&
		lhs.EngageTime == rhs.EngageTime &&
		lhs.TimeAfterWarp == rhs.TimeAfterWarp;
	}
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector3f
//Dependency: Vector2f
struct GcGalaxyGenerationSetupData
{
	NMS::Colour InnerSectorColours[10];
	NMS::Vector4f InnerFieldScales;
	NMS::Vector3f SpiralPull;
	NMS::Vector2f StarSize[5];
	NMS::Vector2f BaseSize;
	NMS::Vector2f ConnectionAttractorMax;
	NMS::Vector2f ConnectionAttractorMin;
	NMS::Vector2f ConnectionDistortion;
	NMS::Vector2f SpiralFlex;
	NMS::Vector2f SpiralInclusion;
	NMS::Vector2f SpiralSizeScale;
	NMS::Vector2f StarHighlightAlpha;
	NMS::Vector2f StarHighlightSize;
	float BaseGenerationThreshold;
	float BaseTurbulenceGain;
	float BaseTurbulenceLac;
	float BaseTurbulenceScale;
	float ColourBaseBlendOnSize;
	float ConnectionDistanceLimit;
	float ConnectionDistortionTMult;
	float FieldGenerationThreshold;
	float FieldAlphaBase;
	float FieldAlphaField1Inf;
	float FieldAlphaField2SqInf;
	float RareSunChance;
	float SizeField4Inf;
	float SizeNoisePower;
	float SizeNoiseScale;
	float SpiralFormChance;
	float SpiralTwistMult;
	float StarGenerationThreshold;
	float StarHighlightChance;

	friend bool operator==(const GcGalaxyGenerationSetupData& lhs, const GcGalaxyGenerationSetupData& rhs) 
	{
		return std::equal(std::begin(lhs.InnerSectorColours), std::end(lhs.InnerSectorColours), std::begin(rhs.InnerSectorColours)) &&
		lhs.InnerFieldScales == rhs.InnerFieldScales &&
		lhs.SpiralPull == rhs.SpiralPull &&
		std::equal(std::begin(lhs.StarSize), std::end(lhs.StarSize), std::begin(rhs.StarSize)) &&
		lhs.BaseSize == rhs.BaseSize &&
		lhs.ConnectionAttractorMax == rhs.ConnectionAttractorMax &&
		lhs.ConnectionAttractorMin == rhs.ConnectionAttractorMin &&
		lhs.ConnectionDistortion == rhs.ConnectionDistortion &&
		lhs.SpiralFlex == rhs.SpiralFlex &&
		lhs.SpiralInclusion == rhs.SpiralInclusion &&
		lhs.SpiralSizeScale == rhs.SpiralSizeScale &&
		lhs.StarHighlightAlpha == rhs.StarHighlightAlpha &&
		lhs.StarHighlightSize == rhs.StarHighlightSize &&
		lhs.BaseGenerationThreshold == rhs.BaseGenerationThreshold &&
		lhs.BaseTurbulenceGain == rhs.BaseTurbulenceGain &&
		lhs.BaseTurbulenceLac == rhs.BaseTurbulenceLac &&
		lhs.BaseTurbulenceScale == rhs.BaseTurbulenceScale &&
		lhs.ColourBaseBlendOnSize == rhs.ColourBaseBlendOnSize &&
		lhs.ConnectionDistanceLimit == rhs.ConnectionDistanceLimit &&
		lhs.ConnectionDistortionTMult == rhs.ConnectionDistortionTMult &&
		lhs.FieldGenerationThreshold == rhs.FieldGenerationThreshold &&
		lhs.FieldAlphaBase == rhs.FieldAlphaBase &&
		lhs.FieldAlphaField1Inf == rhs.FieldAlphaField1Inf &&
		lhs.FieldAlphaField2SqInf == rhs.FieldAlphaField2SqInf &&
		lhs.RareSunChance == rhs.RareSunChance &&
		lhs.SizeField4Inf == rhs.SizeField4Inf &&
		lhs.SizeNoisePower == rhs.SizeNoisePower &&
		lhs.SizeNoiseScale == rhs.SizeNoiseScale &&
		lhs.SpiralFormChance == rhs.SpiralFormChance &&
		lhs.SpiralTwistMult == rhs.SpiralTwistMult &&
		lhs.StarGenerationThreshold == rhs.StarGenerationThreshold &&
		lhs.StarHighlightChance == rhs.StarHighlightChance;
	}
};

//Dependency: TkTextureResource
struct GcGalaxyInfoIcons
{
	NMS_Toolkit::TkTextureResource RaceIcons[9];
	NMS_Toolkit::TkTextureResource EconomyIcons[7];
	NMS_Toolkit::TkTextureResource ConflictIcons[4];
	NMS_Toolkit::TkTextureResource WealthIcons[4];
	NMS_Toolkit::TkTextureResource ConflictTechNotInstalledIcon;
	NMS_Toolkit::TkTextureResource EconomyTechNotInstalledIcon;
	NMS_Toolkit::TkTextureResource WarpErrorIcon;
	NMS_Toolkit::TkTextureResource WarpIcon;
	NMS_Toolkit::TkTextureResource WarpTechNotInstalledIcon;

	friend bool operator==(const GcGalaxyInfoIcons& lhs, const GcGalaxyInfoIcons& rhs) 
	{
		return std::equal(std::begin(lhs.RaceIcons), std::end(lhs.RaceIcons), std::begin(rhs.RaceIcons)) &&
		std::equal(std::begin(lhs.EconomyIcons), std::end(lhs.EconomyIcons), std::begin(rhs.EconomyIcons)) &&
		std::equal(std::begin(lhs.ConflictIcons), std::end(lhs.ConflictIcons), std::begin(rhs.ConflictIcons)) &&
		std::equal(std::begin(lhs.WealthIcons), std::end(lhs.WealthIcons), std::begin(rhs.WealthIcons)) &&
		lhs.ConflictTechNotInstalledIcon == rhs.ConflictTechNotInstalledIcon &&
		lhs.EconomyTechNotInstalledIcon == rhs.EconomyTechNotInstalledIcon &&
		lhs.WarpErrorIcon == rhs.WarpErrorIcon &&
		lhs.WarpIcon == rhs.WarpIcon &&
		lhs.WarpTechNotInstalledIcon == rhs.WarpTechNotInstalledIcon;
	}
};

struct GcLadderComponentData
{

	friend bool operator==(const GcLadderComponentData& lhs, const GcLadderComponentData& rhs) 
	{
		return true;
	}
};

struct GcGalaxyMarkerTypes
{
	enum class GalaxyMarkerTypeEnum : uint32_t
	{
		StartingLocation = 0,
		Home = 1,
		Waypoint = 2,
		Contact = 3,
		Blackhole = 4,
		AtlasStation = 5,
		Selection = 6,
		PlanetBase = 7,
		Visited = 8,
		ScanEvent = 9,
		Expedition = 10,
		NetworkPlayer = 11,
		Freighter = 12,
		PathIcon = 13,
		SeasonParty = 14,
		Settlement = 15,
	};

	NMS_GameComponents::GcGalaxyMarkerTypes::GalaxyMarkerTypeEnum GalaxyMarkerType;

	friend bool operator==(const GcGalaxyMarkerTypes& lhs, const GcGalaxyMarkerTypes& rhs) 
	{
		return lhs.GalaxyMarkerType == rhs.GalaxyMarkerType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshBuildParams
{
	float AgentHeight;
	float AgentMaxSlopeDegrees;
	float AgentMaxStepHeight;
	float AgentRadius;
	float ContourMaxError;
	float ContourMaxLength;
	float DetailMeshMaxError;
	float DetailMeshSampleDistance;
	int32_t RegionMinCellCount;
	bool BuildAsync;
	bool BuildDetailMesh;
	bool BuildPolyBVH;
	bool ErodeWalkableAreas;
	bool FilterLedgeSpans;
	bool FilterLowHangingObstacles;
	bool FilterWalkableLowHeightSpans;
	bool KeepIntermediateRecastData;
	bool MedianFilterWalkableAreas;

	friend bool operator==(const TkNavMeshBuildParams& lhs, const TkNavMeshBuildParams& rhs) 
	{
		return lhs.AgentHeight == rhs.AgentHeight &&
		lhs.AgentMaxSlopeDegrees == rhs.AgentMaxSlopeDegrees &&
		lhs.AgentMaxStepHeight == rhs.AgentMaxStepHeight &&
		lhs.AgentRadius == rhs.AgentRadius &&
		lhs.ContourMaxError == rhs.ContourMaxError &&
		lhs.ContourMaxLength == rhs.ContourMaxLength &&
		lhs.DetailMeshMaxError == rhs.DetailMeshMaxError &&
		lhs.DetailMeshSampleDistance == rhs.DetailMeshSampleDistance &&
		lhs.RegionMinCellCount == rhs.RegionMinCellCount &&
		lhs.BuildAsync == rhs.BuildAsync &&
		lhs.BuildDetailMesh == rhs.BuildDetailMesh &&
		lhs.BuildPolyBVH == rhs.BuildPolyBVH &&
		lhs.ErodeWalkableAreas == rhs.ErodeWalkableAreas &&
		lhs.FilterLedgeSpans == rhs.FilterLedgeSpans &&
		lhs.FilterLowHangingObstacles == rhs.FilterLowHangingObstacles &&
		lhs.FilterWalkableLowHeightSpans == rhs.FilterWalkableLowHeightSpans &&
		lhs.KeepIntermediateRecastData == rhs.KeepIntermediateRecastData &&
		lhs.MedianFilterWalkableAreas == rhs.MedianFilterWalkableAreas;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkNavMeshBuildParams
struct GcPlanetaryNavMeshBuildParams
{
	NMS_Toolkit::TkNavMeshBuildParams BaseParams;
	int32_t CellsPerVoxelHeight;
	int32_t CellsPerVoxelWidth;

	friend bool operator==(const GcPlanetaryNavMeshBuildParams& lhs, const GcPlanetaryNavMeshBuildParams& rhs) 
	{
		return lhs.BaseParams == rhs.BaseParams &&
		lhs.CellsPerVoxelHeight == rhs.CellsPerVoxelHeight &&
		lhs.CellsPerVoxelWidth == rhs.CellsPerVoxelWidth;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNavMeshBuildParams
//Dependency: Vector3f
struct TkVolumeNavMeshBuildParams
{
	NMS::Vector3f BoundsMax;
	NMS::Vector3f BoundsMin;
	NMS_Toolkit::TkNavMeshBuildParams BaseParams;
	float CellsPerUnitHeight;
	float CellsPerUnitWidth;
	int32_t NumBorderCells;
	float TileSize;

	friend bool operator==(const TkVolumeNavMeshBuildParams& lhs, const TkVolumeNavMeshBuildParams& rhs) 
	{
		return lhs.BoundsMax == rhs.BoundsMax &&
		lhs.BoundsMin == rhs.BoundsMin &&
		lhs.BaseParams == rhs.BaseParams &&
		lhs.CellsPerUnitHeight == rhs.CellsPerUnitHeight &&
		lhs.CellsPerUnitWidth == rhs.CellsPerUnitWidth &&
		lhs.NumBorderCells == rhs.NumBorderCells &&
		lhs.TileSize == rhs.TileSize;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcPlanetaryNavMeshBuildParams
//Dependency: TkVolumeNavMeshBuildParams
struct GcNavigationGlobals
{
	NMS_Toolkit::TkVolumeNavMeshBuildParams FreighterBaseNavMeshBuildParams;
	NMS_Toolkit::TkVolumeNavMeshBuildParams NexusNavMeshBuildParams;
	NMS_Toolkit::TkVolumeNavMeshBuildParams SpaceStationNavMeshBuildParams;
	NMS_GameComponents::GcPlanetaryNavMeshBuildParams PlanetaryNavMeshBuildParams;
	int32_t MaxAsyncTileBuildsInFlight;
	int32_t PlanetaryNavMeshLod;

	friend bool operator==(const GcNavigationGlobals& lhs, const GcNavigationGlobals& rhs) 
	{
		return lhs.FreighterBaseNavMeshBuildParams == rhs.FreighterBaseNavMeshBuildParams &&
		lhs.NexusNavMeshBuildParams == rhs.NexusNavMeshBuildParams &&
		lhs.SpaceStationNavMeshBuildParams == rhs.SpaceStationNavMeshBuildParams &&
		lhs.PlanetaryNavMeshBuildParams == rhs.PlanetaryNavMeshBuildParams &&
		lhs.MaxAsyncTileBuildsInFlight == rhs.MaxAsyncTileBuildsInFlight &&
		lhs.PlanetaryNavMeshLod == rhs.PlanetaryNavMeshLod;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcMissionConditionHasIncompleteOptionalMilestones
{
	int32_t ForStageIndex;

	friend bool operator==(const GcMissionConditionHasIncompleteOptionalMilestones& lhs, const GcMissionConditionHasIncompleteOptionalMilestones& rhs) 
	{
		return lhs.ForStageIndex == rhs.ForStageIndex;
	}
};

//Dependency: Colour
struct GcGalaxyRenderAnostreakData
{
	NMS::Colour InnerColour;
	NMS::Colour OuterColour;
	float Contrast;
	float HorizontalScale;
	float VerticalCompression;

	friend bool operator==(const GcGalaxyRenderAnostreakData& lhs, const GcGalaxyRenderAnostreakData& rhs) 
	{
		return lhs.InnerColour == rhs.InnerColour &&
		lhs.OuterColour == rhs.OuterColour &&
		lhs.Contrast == rhs.Contrast &&
		lhs.HorizontalScale == rhs.HorizontalScale &&
		lhs.VerticalCompression == rhs.VerticalCompression;
	}
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector2f
struct GcGalaxyRenderSetupData
{
	NMS::Colour MapLargeAreaPrimaryDefaultColours[10];
	NMS::Colour MapLargeAreaPrimaryHighContrastColours[10];
	NMS::Colour MapLargeAreaSecondaryDefaultColours[10];
	NMS::Colour MapLargeAreaSecondaryHighContrastColours[10];
	NMS::Vector4f CompositionControlB_S_C_G;
	NMS::Colour LensFlareColour;
	NMS::Vector4f LensFlareSpread;
	NMS::Colour SunCoreColour;
	NMS::Vector2f LensFlareExpandTowards;
	NMS::Vector2f NebulaeTraceStepRange;
	float BGCellHorizonInfluence;
	float BGCellMoveScale;
	float BGCellTraceScale;
	float BGColourCellBlend;
	float BGColourPow;
	float BGColourStage1;
	float BGColourStage2;
	float BGColourStage3;
	float BGColourStage4;
	float CompositionSaturationIncreaseError;
	float CompositionSaturationIncreaseFilter;
	float CompositionSaturationIncreaseSelected;
	float LensFlareBase;
	float NebulaeAlphaPow;
	float NebulaeTraceDensity;
	float NebulaeTraceDensityCutoff;
	float NebulaeTraceScale;
	float NebulaeTraceValueMult;
	float StarFieldBlendAmount;
	float SunCoreBGContrib;
	float SunCoreFGContrib;
	float SunCoreLarger;
	float SunCoreSmaller;
	float VignetteBase;
	float VignetteSize;
	float VignetteSizeIncreaseError;
	float VignetteSizeIncreaseFilter;
	float VignetteSizeIncreaseSelected;

	friend bool operator==(const GcGalaxyRenderSetupData& lhs, const GcGalaxyRenderSetupData& rhs) 
	{
		return std::equal(std::begin(lhs.MapLargeAreaPrimaryDefaultColours), std::end(lhs.MapLargeAreaPrimaryDefaultColours), std::begin(rhs.MapLargeAreaPrimaryDefaultColours)) &&
		std::equal(std::begin(lhs.MapLargeAreaPrimaryHighContrastColours), std::end(lhs.MapLargeAreaPrimaryHighContrastColours), std::begin(rhs.MapLargeAreaPrimaryHighContrastColours)) &&
		std::equal(std::begin(lhs.MapLargeAreaSecondaryDefaultColours), std::end(lhs.MapLargeAreaSecondaryDefaultColours), std::begin(rhs.MapLargeAreaSecondaryDefaultColours)) &&
		std::equal(std::begin(lhs.MapLargeAreaSecondaryHighContrastColours), std::end(lhs.MapLargeAreaSecondaryHighContrastColours), std::begin(rhs.MapLargeAreaSecondaryHighContrastColours)) &&
		lhs.CompositionControlB_S_C_G == rhs.CompositionControlB_S_C_G &&
		lhs.LensFlareColour == rhs.LensFlareColour &&
		lhs.LensFlareSpread == rhs.LensFlareSpread &&
		lhs.SunCoreColour == rhs.SunCoreColour &&
		lhs.LensFlareExpandTowards == rhs.LensFlareExpandTowards &&
		lhs.NebulaeTraceStepRange == rhs.NebulaeTraceStepRange &&
		lhs.BGCellHorizonInfluence == rhs.BGCellHorizonInfluence &&
		lhs.BGCellMoveScale == rhs.BGCellMoveScale &&
		lhs.BGCellTraceScale == rhs.BGCellTraceScale &&
		lhs.BGColourCellBlend == rhs.BGColourCellBlend &&
		lhs.BGColourPow == rhs.BGColourPow &&
		lhs.BGColourStage1 == rhs.BGColourStage1 &&
		lhs.BGColourStage2 == rhs.BGColourStage2 &&
		lhs.BGColourStage3 == rhs.BGColourStage3 &&
		lhs.BGColourStage4 == rhs.BGColourStage4 &&
		lhs.CompositionSaturationIncreaseError == rhs.CompositionSaturationIncreaseError &&
		lhs.CompositionSaturationIncreaseFilter == rhs.CompositionSaturationIncreaseFilter &&
		lhs.CompositionSaturationIncreaseSelected == rhs.CompositionSaturationIncreaseSelected &&
		lhs.LensFlareBase == rhs.LensFlareBase &&
		lhs.NebulaeAlphaPow == rhs.NebulaeAlphaPow &&
		lhs.NebulaeTraceDensity == rhs.NebulaeTraceDensity &&
		lhs.NebulaeTraceDensityCutoff == rhs.NebulaeTraceDensityCutoff &&
		lhs.NebulaeTraceScale == rhs.NebulaeTraceScale &&
		lhs.NebulaeTraceValueMult == rhs.NebulaeTraceValueMult &&
		lhs.StarFieldBlendAmount == rhs.StarFieldBlendAmount &&
		lhs.SunCoreBGContrib == rhs.SunCoreBGContrib &&
		lhs.SunCoreFGContrib == rhs.SunCoreFGContrib &&
		lhs.SunCoreLarger == rhs.SunCoreLarger &&
		lhs.SunCoreSmaller == rhs.SunCoreSmaller &&
		lhs.VignetteBase == rhs.VignetteBase &&
		lhs.VignetteSize == rhs.VignetteSize &&
		lhs.VignetteSizeIncreaseError == rhs.VignetteSizeIncreaseError &&
		lhs.VignetteSizeIncreaseFilter == rhs.VignetteSizeIncreaseFilter &&
		lhs.VignetteSizeIncreaseSelected == rhs.VignetteSizeIncreaseSelected;
	}
};

struct GcMissionConditionTotalWarpsNumber
{
	int32_t WarpsNumber;

	friend bool operator==(const GcMissionConditionTotalWarpsNumber& lhs, const GcMissionConditionTotalWarpsNumber& rhs) 
	{
		return lhs.WarpsNumber == rhs.WarpsNumber;
	}
};

//Dependency: GcGalaxySolarSystemOrbitParams
struct GcGalaxySolarSystemParams
{
	NMS_GameComponents::GcGalaxySolarSystemOrbitParams MoonParameters;
	NMS_GameComponents::GcGalaxySolarSystemOrbitParams PlanetParameters;
	float PlanetRadii[5];
	float DefaultDistance;
	float NonVisitedPlanetAlpha;
	float SystemTilt;
	float VisitedPlanetAlpha;

	friend bool operator==(const GcGalaxySolarSystemParams& lhs, const GcGalaxySolarSystemParams& rhs) 
	{
		return lhs.MoonParameters == rhs.MoonParameters &&
		lhs.PlanetParameters == rhs.PlanetParameters &&
		std::equal(std::begin(lhs.PlanetRadii), std::end(lhs.PlanetRadii), std::begin(rhs.PlanetRadii)) &&
		lhs.DefaultDistance == rhs.DefaultDistance &&
		lhs.NonVisitedPlanetAlpha == rhs.NonVisitedPlanetAlpha &&
		lhs.SystemTilt == rhs.SystemTilt &&
		lhs.VisitedPlanetAlpha == rhs.VisitedPlanetAlpha;
	}
};

//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcPlanetWeatherColourData
{
	NMS::Colour CloudColour1;
	NMS::Colour CloudColour2;
	NMS::Colour FogColour;
	NMS::Colour HeightFogColour;
	NMS::Colour HorizonColour;
	NMS::Colour LightColour;
	NMS::Colour LightColourUnderground;
	NMS::Colour SkyColour;
	NMS::Vector3f SkyGradientSpeed;
	NMS::Colour SkySolarColour;
	NMS::Colour SkyUpperColour;
	NMS::Colour SunColour;
	NMS::NMSString0x10 GasGiantAtmosphereID;
	float CirrusCloudDensity;
	float SelectionWeighting;

	friend bool operator==(const GcPlanetWeatherColourData& lhs, const GcPlanetWeatherColourData& rhs) 
	{
		return lhs.CloudColour1 == rhs.CloudColour1 &&
		lhs.CloudColour2 == rhs.CloudColour2 &&
		lhs.FogColour == rhs.FogColour &&
		lhs.HeightFogColour == rhs.HeightFogColour &&
		lhs.HorizonColour == rhs.HorizonColour &&
		lhs.LightColour == rhs.LightColour &&
		lhs.LightColourUnderground == rhs.LightColourUnderground &&
		lhs.SkyColour == rhs.SkyColour &&
		lhs.SkyGradientSpeed == rhs.SkyGradientSpeed &&
		lhs.SkySolarColour == rhs.SkySolarColour &&
		lhs.SkyUpperColour == rhs.SkyUpperColour &&
		lhs.SunColour == rhs.SunColour &&
		lhs.GasGiantAtmosphereID == rhs.GasGiantAtmosphereID &&
		lhs.CirrusCloudDensity == rhs.CirrusCloudDensity &&
		lhs.SelectionWeighting == rhs.SelectionWeighting;
	}
};

//Dependency: GcPlanetSize
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlanetTradingData
//Dependency: GcGalaxyStarAnomaly
//Dependency: GcPlayerConflictData
//Dependency: GcAlienRace
//Dependency: GcSeed
struct GcGalaxyStarAttributesData
{
	NMS::GcSeed PlanetSeeds[16];
	int32_t PlanetParentIndices[16];
	NMS_GameComponents::GcPlanetSize PlanetSizes[16];
	NMS_GameComponents::GcPlanetTradingData TradingData;
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;
	NMS_GameComponents::GcPlayerConflictData ConflictData;
	int32_t NumberOfPlanets;
	int32_t NumberOfPrimePlanets;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcGalaxyStarTypes Type;
	bool AbandonedSystem;
	bool IsGasGiantSystem;
	bool IsGiantSystem;
	bool IsPirateSystem;
	bool IsSystemSafe;

	friend bool operator==(const GcGalaxyStarAttributesData& lhs, const GcGalaxyStarAttributesData& rhs) 
	{
		return std::equal(std::begin(lhs.PlanetSeeds), std::end(lhs.PlanetSeeds), std::begin(rhs.PlanetSeeds)) &&
		std::equal(std::begin(lhs.PlanetParentIndices), std::end(lhs.PlanetParentIndices), std::begin(rhs.PlanetParentIndices)) &&
		std::equal(std::begin(lhs.PlanetSizes), std::end(lhs.PlanetSizes), std::begin(rhs.PlanetSizes)) &&
		lhs.TradingData == rhs.TradingData &&
		lhs.Anomaly == rhs.Anomaly &&
		lhs.ConflictData == rhs.ConflictData &&
		lhs.NumberOfPlanets == rhs.NumberOfPlanets &&
		lhs.NumberOfPrimePlanets == rhs.NumberOfPrimePlanets &&
		lhs.Race == rhs.Race &&
		lhs.Type == rhs.Type &&
		lhs.AbandonedSystem == rhs.AbandonedSystem &&
		lhs.IsGasGiantSystem == rhs.IsGasGiantSystem &&
		lhs.IsGiantSystem == rhs.IsGiantSystem &&
		lhs.IsPirateSystem == rhs.IsPirateSystem &&
		lhs.IsSystemSafe == rhs.IsSystemSafe;
	}
};

//Dependency: GcVehicleType
struct GcMissionConditionPrimaryExocraft
{
	NMS_GameComponents::GcVehicleType ExocraftType;
	bool MustBeSummonedNearby;

	friend bool operator==(const GcMissionConditionPrimaryExocraft& lhs, const GcMissionConditionPrimaryExocraft& rhs) 
	{
		return lhs.ExocraftType == rhs.ExocraftType &&
		lhs.MustBeSummonedNearby == rhs.MustBeSummonedNearby;
	}
};

//Dependency: Vector2f
struct GcGalaxyVoxelAttributesData
{
	int32_t AtlasStationIndices[12];
	int32_t BlackholeIndices[12];
	NMS::Vector2f TransitPopulationDistanceRange;
	int32_t AtlasStationCount;
	int32_t BlackholeCount;
	int32_t GuideStarMinimumCount;
	int32_t GuideStarRenegadeCount;
	int32_t PurpleSystemsCount;
	int32_t PurpleSystemsStart;
	float RegionColourValue;
	float TransitPopulationPerpDistance;
	float UnitDistanceFromGoalEdge;
	bool InsideGoalGap;

	friend bool operator==(const GcGalaxyVoxelAttributesData& lhs, const GcGalaxyVoxelAttributesData& rhs) 
	{
		return std::equal(std::begin(lhs.AtlasStationIndices), std::end(lhs.AtlasStationIndices), std::begin(rhs.AtlasStationIndices)) &&
		std::equal(std::begin(lhs.BlackholeIndices), std::end(lhs.BlackholeIndices), std::begin(rhs.BlackholeIndices)) &&
		lhs.TransitPopulationDistanceRange == rhs.TransitPopulationDistanceRange &&
		lhs.AtlasStationCount == rhs.AtlasStationCount &&
		lhs.BlackholeCount == rhs.BlackholeCount &&
		lhs.GuideStarMinimumCount == rhs.GuideStarMinimumCount &&
		lhs.GuideStarRenegadeCount == rhs.GuideStarRenegadeCount &&
		lhs.PurpleSystemsCount == rhs.PurpleSystemsCount &&
		lhs.PurpleSystemsStart == rhs.PurpleSystemsStart &&
		lhs.RegionColourValue == rhs.RegionColourValue &&
		lhs.TransitPopulationPerpDistance == rhs.TransitPopulationPerpDistance &&
		lhs.UnitDistanceFromGoalEdge == rhs.UnitDistanceFromGoalEdge &&
		lhs.InsideGoalGap == rhs.InsideGoalGap;
	}
};

struct GcMissionConditionNearPole
{
	enum class PoleConditionEnum : uint32_t
	{
		North = 0,
		South = 1,
	};

	float Distance;
	NMS_GameComponents::GcMissionConditionNearPole::PoleConditionEnum PoleCondition;

	friend bool operator==(const GcMissionConditionNearPole& lhs, const GcMissionConditionNearPole& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.PoleCondition == rhs.PoleCondition;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkSaveID
{
	uint64_t Value;

	friend bool operator==(const TkSaveID& lhs, const TkSaveID& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};

//Dependency: TkSaveID
struct TkUniqueID
{
	uint64_t Address;
	uint64_t Index;
	NMS_Toolkit::TkSaveID OwnerID;

	friend bool operator==(const TkUniqueID& lhs, const TkUniqueID& rhs) 
	{
		return lhs.Address == rhs.Address &&
		lhs.Index == rhs.Index &&
		lhs.OwnerID == rhs.OwnerID;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardUnlockTitle
{
	NMS::NMSString0x10 TitleID;
	bool NoMusic;
	bool ShowEvenIfAlreadyUnlocked;

	friend bool operator==(const GcRewardUnlockTitle& lhs, const GcRewardUnlockTitle& rhs) 
	{
		return lhs.TitleID == rhs.TitleID &&
		lhs.NoMusic == rhs.NoMusic &&
		lhs.ShowEvenIfAlreadyUnlocked == rhs.ShowEvenIfAlreadyUnlocked;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGetUnitsToBuyItem
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Item;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceGetUnitsToBuyItem& lhs, const GcMissionSequenceGetUnitsToBuyItem& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Item == rhs.Item &&
		lhs.Message == rhs.Message;
	}
};

struct GcGaussianCurveData
{
	float Mean;
	float StdDev;

	friend bool operator==(const GcGaussianCurveData& lhs, const GcGaussianCurveData& rhs) 
	{
		return lhs.Mean == rhs.Mean &&
		lhs.StdDev == rhs.StdDev;
	}
};

//Dependency: NMSString0x10
struct GcSpaceshipShieldComponentData
{
	NMS::NMSString0x10 ShieldID;
	bool IgnoreHitsWhenPlayerAimingElsewhere;
	bool RotateOnHit;

	friend bool operator==(const GcSpaceshipShieldComponentData& lhs, const GcSpaceshipShieldComponentData& rhs) 
	{
		return lhs.ShieldID == rhs.ShieldID &&
		lhs.IgnoreHitsWhenPlayerAimingElsewhere == rhs.IgnoreHitsWhenPlayerAimingElsewhere &&
		lhs.RotateOnHit == rhs.RotateOnHit;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcGeneratedBaseDecorationTemplate
{
	enum class DecorationLayerEnum : uint32_t
	{
		Stairs = 0,
		Corridor = 1,
		Room = 2,
		Door = 3,
		Decoration1 = 4,
		Decoration2 = 5,
		Decoration3 = 6,
		DecorationCorridor = 7,
	};

	NMS_Toolkit::TkModelResource TemplateScene;
	NMS::NMSString0x10 Id;
	std::vector<int32_t> InvalidRoomIndexes;
	NMS_GameComponents::GcGeneratedBaseDecorationTemplate::DecorationLayerEnum DecorationLayer;
	int32_t MaxPerRoom;
	float Probability;

	friend bool operator==(const GcGeneratedBaseDecorationTemplate& lhs, const GcGeneratedBaseDecorationTemplate& rhs) 
	{
		return lhs.TemplateScene == rhs.TemplateScene &&
		lhs.Id == rhs.Id &&
		lhs.InvalidRoomIndexes == rhs.InvalidRoomIndexes &&
		lhs.DecorationLayer == rhs.DecorationLayer &&
		lhs.MaxPerRoom == rhs.MaxPerRoom &&
		lhs.Probability == rhs.Probability;
	}
};

//Dependency: NMSString0x10
struct GcGeneratedBaseLockDoorPair
{
	NMS::NMSString0x10 Door;
	NMS::NMSString0x10 Lock;

	friend bool operator==(const GcGeneratedBaseLockDoorPair& lhs, const GcGeneratedBaseLockDoorPair& rhs) 
	{
		return lhs.Door == rhs.Door &&
		lhs.Lock == rhs.Lock;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct TkTrophyEntry
{
	NMS::NMSString0x10 TrophyId;
	int32_t Ps4Id;
	NMS::NMSString0x40 PCId;
	NMS::NMSString0x20 XboxOneId;

	friend bool operator==(const TkTrophyEntry& lhs, const TkTrophyEntry& rhs) 
	{
		return lhs.TrophyId == rhs.TrophyId &&
		lhs.Ps4Id == rhs.Ps4Id &&
		lhs.PCId == rhs.PCId &&
		lhs.XboxOneId == rhs.XboxOneId;
	}
};

//Dependency: TkTrophyEntry
struct TkTrophyData
{
	std::vector<NMS_Toolkit::TkTrophyEntry> Trophies;

	friend bool operator==(const TkTrophyData& lhs, const TkTrophyData& rhs) 
	{
		return lhs.Trophies == rhs.Trophies;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcGeneratedBasePruningRule
{
	NMS::NMSString0x10 NodeName;
	std::vector<NMS::NMSString0x10> RoomFilters;
	NMS::NMSString0x10 RuleId;
	int32_t MaxPerDungeon;
	int32_t MaxPerRoom;

	friend bool operator==(const GcGeneratedBasePruningRule& lhs, const GcGeneratedBasePruningRule& rhs) 
	{
		return lhs.NodeName == rhs.NodeName &&
		lhs.RoomFilters == rhs.RoomFilters &&
		lhs.RuleId == rhs.RuleId &&
		lhs.MaxPerDungeon == rhs.MaxPerDungeon &&
		lhs.MaxPerRoom == rhs.MaxPerRoom;
	}
};

//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcGeneratedBaseRoomTemplate
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
	NMS::NMSString0x20A LocId;
	std::vector<NMS::NMSString0x10> DecorationThemes;
	NMS::NMSString0x10 Name;
	int32_t MaxPathLength;
	int32_t MinContiguousDepth;
	int32_t MinContiguousHeight;
	int32_t MinContiguousWidth;
	int32_t MinPathLength;
	float ShrinkFactor;

	friend bool operator==(const GcGeneratedBaseRoomTemplate& lhs, const GcGeneratedBaseRoomTemplate& rhs) 
	{
		return lhs.PrimaryColour == rhs.PrimaryColour &&
		lhs.QuaternaryColour == rhs.QuaternaryColour &&
		lhs.SecondaryColour == rhs.SecondaryColour &&
		lhs.TernaryColour == rhs.TernaryColour &&
		lhs.LocId == rhs.LocId &&
		lhs.DecorationThemes == rhs.DecorationThemes &&
		lhs.Name == rhs.Name &&
		lhs.MaxPathLength == rhs.MaxPathLength &&
		lhs.MinContiguousDepth == rhs.MinContiguousDepth &&
		lhs.MinContiguousHeight == rhs.MinContiguousHeight &&
		lhs.MinContiguousWidth == rhs.MinContiguousWidth &&
		lhs.MinPathLength == rhs.MinPathLength &&
		lhs.ShrinkFactor == rhs.ShrinkFactor;
	}
};

struct GcJourneyMedalType
{
	enum class MedalTypeEnum : uint32_t
	{
		Standings = 0,
		Missions = 1,
		Words = 2,
		Systems = 3,
		Sentinels = 4,
		Pirates = 5,
		Plants = 6,
		Units = 7,
		RaceCreatures = 8,
		DistanceWarped = 9,
	};

	NMS_GameComponents::GcJourneyMedalType::MedalTypeEnum MedalType;

	friend bool operator==(const GcJourneyMedalType& lhs, const GcJourneyMedalType& rhs) 
	{
		return lhs.MedalType == rhs.MedalType;
	}
};

//Dependency: NMSString0x10
struct GcGeneratedBaseThemeTemplate
{
	std::vector<NMS::NMSString0x10> DecorationTemplates;
	NMS::NMSString0x10 Name;

	friend bool operator==(const GcGeneratedBaseThemeTemplate& lhs, const GcGeneratedBaseThemeTemplate& rhs) 
	{
		return lhs.DecorationTemplates == rhs.DecorationTemplates &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: GcGeneratedBaseDecorationTemplate
//Dependency: GcGeneratedBasePruningRule
//Dependency: GcGeneratedBaseRoomTemplate
//Dependency: GcGeneratedBaseThemeTemplate
struct GcGeneratedBaseTemplatesTable
{
	std::vector<NMS_GameComponents::GcGeneratedBaseDecorationTemplate> DecorationTemplates;
	std::vector<NMS_GameComponents::GcGeneratedBasePruningRule> PruningRules;
	std::vector<NMS_GameComponents::GcGeneratedBaseRoomTemplate> RoomTemplates;
	std::vector<NMS_GameComponents::GcGeneratedBaseThemeTemplate> ThemeTemplates;

	friend bool operator==(const GcGeneratedBaseTemplatesTable& lhs, const GcGeneratedBaseTemplatesTable& rhs) 
	{
		return lhs.DecorationTemplates == rhs.DecorationTemplates &&
		lhs.PruningRules == rhs.PruningRules &&
		lhs.RoomTemplates == rhs.RoomTemplates &&
		lhs.ThemeTemplates == rhs.ThemeTemplates;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveCommunicatorTakeOffMessage
{
	NMS::NMSString0x20A Comms;

	friend bool operator==(const GcMissionConsequenceRemoveCommunicatorTakeOffMessage& lhs, const GcMissionConsequenceRemoveCommunicatorTakeOffMessage& rhs) 
	{
		return lhs.Comms == rhs.Comms;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceStartMission
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 MissionID;
	bool Forced;
	bool MakeCurrent;
	bool Restart;

	friend bool operator==(const GcMissionSequenceStartMission& lhs, const GcMissionSequenceStartMission& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MissionID == rhs.MissionID &&
		lhs.Forced == rhs.Forced &&
		lhs.MakeCurrent == rhs.MakeCurrent &&
		lhs.Restart == rhs.Restart;
	}
};

struct GcHeightAdjustComponentData
{
	float HeightOffset;

	friend bool operator==(const GcHeightAdjustComponentData& lhs, const GcHeightAdjustComponentData& rhs) 
	{
		return lhs.HeightOffset == rhs.HeightOffset;
	}
};

struct GcGeneratedShipCounts
{
	int32_t Counts[7];

	friend bool operator==(const GcGeneratedShipCounts& lhs, const GcGeneratedShipCounts& rhs) 
	{
		return std::equal(std::begin(lhs.Counts), std::end(lhs.Counts), std::begin(rhs.Counts));
	}
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x10
struct GcGeneratorUnitComponentData
{
	enum class GeneratorUnitTypeEnum : uint32_t
	{
		MiningUnit = 0,
		GasHarvester = 1,
		SystemHoover = 2,
		SeaHarvester = 3,
	};

	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	NMS::NMSString0x10 BiomeGasRewards[17];
	NMS_GameComponents::GcGeneratorUnitComponentData::GeneratorUnitTypeEnum GeneratorUnitType;
	int32_t ResourceMaintenanceSlotOverride;

	friend bool operator==(const GcGeneratorUnitComponentData& lhs, const GcGeneratorUnitComponentData& rhs) 
	{
		return lhs.MaintenanceData == rhs.MaintenanceData &&
		std::equal(std::begin(lhs.BiomeGasRewards), std::end(lhs.BiomeGasRewards), std::begin(rhs.BiomeGasRewards)) &&
		lhs.GeneratorUnitType == rhs.GeneratorUnitType &&
		lhs.ResourceMaintenanceSlotOverride == rhs.ResourceMaintenanceSlotOverride;
	}
};

struct GcGenericIconTypes
{
	enum class GenericIconTypeEnum : uint32_t
	{
		None = 0,
		Interaction = 1,
		SpaceStation = 2,
		SpaceAnomaly = 3,
		SpaceAtlas = 4,
		Nexus = 5,
	};

	NMS_GameComponents::GcGenericIconTypes::GenericIconTypeEnum GenericIconType;

	friend bool operator==(const GcGenericIconTypes& lhs, const GcGenericIconTypes& rhs) 
	{
		return lhs.GenericIconType == rhs.GenericIconType;
	}
};

//Dependency: GcPetBehaviours
//Dependency: GcCreaturePetTraits
struct GcPetFollowUpBehaviour
{
	NMS_GameComponents::GcPetBehaviours Behaviour;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;
	float WeightMax;
	float WeightMin;
	bool TraitBased;

	friend bool operator==(const GcPetFollowUpBehaviour& lhs, const GcPetFollowUpBehaviour& rhs) 
	{
		return lhs.Behaviour == rhs.Behaviour &&
		lhs.Trait == rhs.Trait &&
		lhs.TraitMax == rhs.TraitMax &&
		lhs.TraitMin == rhs.TraitMin &&
		lhs.WeightMax == rhs.WeightMax &&
		lhs.WeightMin == rhs.WeightMin &&
		lhs.TraitBased == rhs.TraitBased;
	}
};

//Dependency: GcBroadcastLevel
//Dependency: NMSString0x10
struct GcGoToStateAction
{
	NMS::NMSString0x10 State;
	NMS_GameComponents::GcBroadcastLevel BroadcastLevel;
	bool Broadcast;

	friend bool operator==(const GcGoToStateAction& lhs, const GcGoToStateAction& rhs) 
	{
		return lhs.State == rhs.State &&
		lhs.BroadcastLevel == rhs.BroadcastLevel &&
		lhs.Broadcast == rhs.Broadcast;
	}
};

//Dependency: GcGrabbableData
struct GcGrabbableComponentData
{
	std::vector<NMS_GameComponents::GcGrabbableData> GrabbableDataArray;

	friend bool operator==(const GcGrabbableComponentData& lhs, const GcGrabbableComponentData& rhs) 
	{
		return lhs.GrabbableDataArray == rhs.GrabbableDataArray;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
struct TkImGuiSettings
{
	NMS::Colour ActiveTextColour;
	NMS::Colour ActiveWindowBackgroundColour;
	NMS::Colour ActiveWindowTitleColour;
	NMS::Colour BackgroundColour;
	NMS::Colour ButtonColour;
	NMS::Colour ButtonHighlightColour;
	NMS::Colour ButtonPressedColour;
	NMS::Colour CloseButtonClickColour;
	NMS::Colour CloseButtonColour;
	NMS::Colour CloseButtonHighlightColour;
	NMS::Colour EditBoxActiveColour;
	NMS::Colour EditBoxColour;
	NMS::Colour EditBoxSelectedColour;
	NMS::Colour MinimiseButtonClickColour;
	NMS::Colour MinimiseButtonColour;
	NMS::Colour MinimiseButtonHighlightColour;
	NMS::Colour TaskBarColour;
	NMS::Colour TaskBarShadow;
	NMS::Colour TextColour;
	NMS::Colour TextDisabledColour;
	NMS::Colour TextShadowColour;
	NMS::Colour WindowBackgroundColour;
	NMS::Colour WindowHighlight;
	NMS::Colour WindowTitleColour;
	float AltPlacementDistanceScrollSpeed;
	float ScrollSpeed;

	friend bool operator==(const TkImGuiSettings& lhs, const TkImGuiSettings& rhs) 
	{
		return lhs.ActiveTextColour == rhs.ActiveTextColour &&
		lhs.ActiveWindowBackgroundColour == rhs.ActiveWindowBackgroundColour &&
		lhs.ActiveWindowTitleColour == rhs.ActiveWindowTitleColour &&
		lhs.BackgroundColour == rhs.BackgroundColour &&
		lhs.ButtonColour == rhs.ButtonColour &&
		lhs.ButtonHighlightColour == rhs.ButtonHighlightColour &&
		lhs.ButtonPressedColour == rhs.ButtonPressedColour &&
		lhs.CloseButtonClickColour == rhs.CloseButtonClickColour &&
		lhs.CloseButtonColour == rhs.CloseButtonColour &&
		lhs.CloseButtonHighlightColour == rhs.CloseButtonHighlightColour &&
		lhs.EditBoxActiveColour == rhs.EditBoxActiveColour &&
		lhs.EditBoxColour == rhs.EditBoxColour &&
		lhs.EditBoxSelectedColour == rhs.EditBoxSelectedColour &&
		lhs.MinimiseButtonClickColour == rhs.MinimiseButtonClickColour &&
		lhs.MinimiseButtonColour == rhs.MinimiseButtonColour &&
		lhs.MinimiseButtonHighlightColour == rhs.MinimiseButtonHighlightColour &&
		lhs.TaskBarColour == rhs.TaskBarColour &&
		lhs.TaskBarShadow == rhs.TaskBarShadow &&
		lhs.TextColour == rhs.TextColour &&
		lhs.TextDisabledColour == rhs.TextDisabledColour &&
		lhs.TextShadowColour == rhs.TextShadowColour &&
		lhs.WindowBackgroundColour == rhs.WindowBackgroundColour &&
		lhs.WindowHighlight == rhs.WindowHighlight &&
		lhs.WindowTitleColour == rhs.WindowTitleColour &&
		lhs.AltPlacementDistanceScrollSpeed == rhs.AltPlacementDistanceScrollSpeed &&
		lhs.ScrollSpeed == rhs.ScrollSpeed;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceFindPurpleSystem
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceFindPurpleSystem& lhs, const GcMissionSequenceFindPurpleSystem& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: NMSString0x10
struct GcSettlementJudgementPerkOption
{
	NMS::NMSString0x10 Perk;
	float PerkChance;

	friend bool operator==(const GcSettlementJudgementPerkOption& lhs, const GcSettlementJudgementPerkOption& rhs) 
	{
		return lhs.Perk == rhs.Perk &&
		lhs.PerkChance == rhs.PerkChance;
	}
};

//Dependency: GcSettlementJudgementPerkOption
//Dependency: GcSettlementStatChange
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJudgementOption
{
	enum class JudgementOptionStandingEnum : uint32_t
	{
		None = 0,
		Positive = 1,
		Negative = 2,
	};

	NMS::NMSString0x20A OptionText;
	std::vector<NMS::NMSString0x10> AdditionalRewards;
	std::vector<NMS::NMSString0x20A> AltOptionText;
	NMS::NMSString0x10 ChainedJudgementID;
	std::vector<NMS_GameComponents::GcSettlementJudgementPerkOption> Perks;
	std::vector<NMS_GameComponents::GcSettlementStatChange> StatChanges;
	NMS_GameComponents::GcSettlementJudgementOption::JudgementOptionStandingEnum JudgementOptionStanding;
	bool HidePerkInJudgement;
	bool OptionIsPositiveForNPC;
	bool UseGiftReward;
	bool UsePolicyPerk;
	bool UsePolicyStat;
	bool UseTechPerk;

	friend bool operator==(const GcSettlementJudgementOption& lhs, const GcSettlementJudgementOption& rhs) 
	{
		return lhs.OptionText == rhs.OptionText &&
		lhs.AdditionalRewards == rhs.AdditionalRewards &&
		lhs.AltOptionText == rhs.AltOptionText &&
		lhs.ChainedJudgementID == rhs.ChainedJudgementID &&
		lhs.Perks == rhs.Perks &&
		lhs.StatChanges == rhs.StatChanges &&
		lhs.JudgementOptionStanding == rhs.JudgementOptionStanding &&
		lhs.HidePerkInJudgement == rhs.HidePerkInJudgement &&
		lhs.OptionIsPositiveForNPC == rhs.OptionIsPositiveForNPC &&
		lhs.UseGiftReward == rhs.UseGiftReward &&
		lhs.UsePolicyPerk == rhs.UsePolicyPerk &&
		lhs.UsePolicyStat == rhs.UsePolicyStat &&
		lhs.UseTechPerk == rhs.UseTechPerk;
	}
};

//Dependency: Colour
struct GcPlanetWaterColourData
{
	NMS::Colour CausticsColour;
	NMS::Colour EmissionColour;
	NMS::Colour FoamColour;
	NMS::Colour FoamEmission;
	NMS::Colour ScatterColour;
	NMS::Colour TransmittanceColour;
	float MaxScatterDistance;
	float MaxTransmittanceDistance;
	float MinScatterDistance;
	float MinTransmittanceDistance;
	float SelectionWeighting;
	float SubsurfaceBoost;
	float SurfaceAbsorptionMultiplier;

	friend bool operator==(const GcPlanetWaterColourData& lhs, const GcPlanetWaterColourData& rhs) 
	{
		return lhs.CausticsColour == rhs.CausticsColour &&
		lhs.EmissionColour == rhs.EmissionColour &&
		lhs.FoamColour == rhs.FoamColour &&
		lhs.FoamEmission == rhs.FoamEmission &&
		lhs.ScatterColour == rhs.ScatterColour &&
		lhs.TransmittanceColour == rhs.TransmittanceColour &&
		lhs.MaxScatterDistance == rhs.MaxScatterDistance &&
		lhs.MaxTransmittanceDistance == rhs.MaxTransmittanceDistance &&
		lhs.MinScatterDistance == rhs.MinScatterDistance &&
		lhs.MinTransmittanceDistance == rhs.MinTransmittanceDistance &&
		lhs.SelectionWeighting == rhs.SelectionWeighting &&
		lhs.SubsurfaceBoost == rhs.SubsurfaceBoost &&
		lhs.SurfaceAbsorptionMultiplier == rhs.SurfaceAbsorptionMultiplier;
	}
};

//Dependency: GcPlanetWaterColourData
//Dependency: GcWaterEmissionBiomeData
struct GcWaterColourSettingList
{
	std::vector<NMS_GameComponents::GcPlanetWaterColourData> Settings;
	NMS_GameComponents::GcWaterEmissionBiomeData EmissionTypeSelection[17];

	friend bool operator==(const GcWaterColourSettingList& lhs, const GcWaterColourSettingList& rhs) 
	{
		return lhs.Settings == rhs.Settings &&
		std::equal(std::begin(lhs.EmissionTypeSelection), std::end(lhs.EmissionTypeSelection), std::begin(rhs.EmissionTypeSelection));
	}
};

//Dependency: Colour
struct GcHeavyAirColourData
{
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Colour ExtremeColour1;
	NMS::Colour ExtremeColour2;

	friend bool operator==(const GcHeavyAirColourData& lhs, const GcHeavyAirColourData& rhs) 
	{
		return lhs.Colour1 == rhs.Colour1 &&
		lhs.Colour2 == rhs.Colour2 &&
		lhs.ExtremeColour1 == rhs.ExtremeColour1 &&
		lhs.ExtremeColour2 == rhs.ExtremeColour2;
	}
};

//Dependency: GcHUDComponent
//Dependency: Colour
//Dependency: VariableSizeString
struct GcHUDImageData
{
	NMS::Colour Colour;
	NMS_GameComponents::GcHUDComponent Data;
	NMS::VariableSizeString Image;

	friend bool operator==(const GcHUDImageData& lhs, const GcHUDImageData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Data == rhs.Data &&
		lhs.Image == rhs.Image;
	}
};

//Dependency: GcHUDComponent
struct GcHUDLayerData
{
	NMS_GameComponents::GcHUDComponent Data;
	std::vector<NMSTemplate> Children;

	friend bool operator==(const GcHUDLayerData& lhs, const GcHUDLayerData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.Children == rhs.Children;
	}
};

//Dependency: GcTextPreset
//Dependency: TkCurveType
struct GcHUDManagerData
{
	NMS_GameComponents::GcTextPreset SubtitleFont;
	NMS_GameComponents::GcTextPreset SubtitleFontSmall;
	NMS_GameComponents::GcTextPreset TitleFont;
	int32_t ModelRenderDisplayBorder;
	float ModelRenderDisplayMove;
	float ModelRenderDisplayOffset;
	int32_t ModelRenderDisplaySize;
	int32_t ModelRenderTextureSize;
	float OSDBaseBandY;
	float OSDBaseTextY;
	float OSDBorderY;
	float OSDCoreAlpha;
	float OSDCoreSize;
	float OSDEdgeMergeAlpha;
	float OSDFadeSpeed;
	float OSDFullSize;
	float OSDTextAppearRate;
	float OSDTextFadeRate;
	float OSDTextWaitOnAlpha;
	float OSDUnderlineWidth;
	float PopUpBGFadeInRate;
	float PopUpBGFadeOutRate;
	float PopUpBGTriggerFG;
	float PopUpCoreAlpha;
	float PopUpCoreSize;
	float PopUpFadeRate;
	float PopUpFullSize;
	float PopUpY;
	float PopUpYMidLock;
	float PromptLine1Y;
	float PromptLine2Y;
	NMS_Toolkit::TkCurveType ModelRenderDisplayAlphaCurve;
	NMS_Toolkit::TkCurveType ModelRenderDisplayMoveCurve;

	friend bool operator==(const GcHUDManagerData& lhs, const GcHUDManagerData& rhs) 
	{
		return lhs.SubtitleFont == rhs.SubtitleFont &&
		lhs.SubtitleFontSmall == rhs.SubtitleFontSmall &&
		lhs.TitleFont == rhs.TitleFont &&
		lhs.ModelRenderDisplayBorder == rhs.ModelRenderDisplayBorder &&
		lhs.ModelRenderDisplayMove == rhs.ModelRenderDisplayMove &&
		lhs.ModelRenderDisplayOffset == rhs.ModelRenderDisplayOffset &&
		lhs.ModelRenderDisplaySize == rhs.ModelRenderDisplaySize &&
		lhs.ModelRenderTextureSize == rhs.ModelRenderTextureSize &&
		lhs.OSDBaseBandY == rhs.OSDBaseBandY &&
		lhs.OSDBaseTextY == rhs.OSDBaseTextY &&
		lhs.OSDBorderY == rhs.OSDBorderY &&
		lhs.OSDCoreAlpha == rhs.OSDCoreAlpha &&
		lhs.OSDCoreSize == rhs.OSDCoreSize &&
		lhs.OSDEdgeMergeAlpha == rhs.OSDEdgeMergeAlpha &&
		lhs.OSDFadeSpeed == rhs.OSDFadeSpeed &&
		lhs.OSDFullSize == rhs.OSDFullSize &&
		lhs.OSDTextAppearRate == rhs.OSDTextAppearRate &&
		lhs.OSDTextFadeRate == rhs.OSDTextFadeRate &&
		lhs.OSDTextWaitOnAlpha == rhs.OSDTextWaitOnAlpha &&
		lhs.OSDUnderlineWidth == rhs.OSDUnderlineWidth &&
		lhs.PopUpBGFadeInRate == rhs.PopUpBGFadeInRate &&
		lhs.PopUpBGFadeOutRate == rhs.PopUpBGFadeOutRate &&
		lhs.PopUpBGTriggerFG == rhs.PopUpBGTriggerFG &&
		lhs.PopUpCoreAlpha == rhs.PopUpCoreAlpha &&
		lhs.PopUpCoreSize == rhs.PopUpCoreSize &&
		lhs.PopUpFadeRate == rhs.PopUpFadeRate &&
		lhs.PopUpFullSize == rhs.PopUpFullSize &&
		lhs.PopUpY == rhs.PopUpY &&
		lhs.PopUpYMidLock == rhs.PopUpYMidLock &&
		lhs.PromptLine1Y == rhs.PromptLine1Y &&
		lhs.PromptLine2Y == rhs.PromptLine2Y &&
		lhs.ModelRenderDisplayAlphaCurve == rhs.ModelRenderDisplayAlphaCurve &&
		lhs.ModelRenderDisplayMoveCurve == rhs.ModelRenderDisplayMoveCurve;
	}
};

//Dependency: GcTextPreset
//Dependency: GcHUDComponent
//Dependency: NMSString0x80
struct GcHUDTextData
{
	NMS_GameComponents::GcTextPreset Preset;
	NMS_GameComponents::GcHUDComponent Data;
	NMS::NMSString0x80 Text;

	friend bool operator==(const GcHUDTextData& lhs, const GcHUDTextData& rhs) 
	{
		return lhs.Preset == rhs.Preset &&
		lhs.Data == rhs.Data &&
		lhs.Text == rhs.Text;
	}
};

struct GcHarvestPlantAction
{
	float Radius;

	friend bool operator==(const GcHarvestPlantAction& lhs, const GcHarvestPlantAction& rhs) 
	{
		return lhs.Radius == rhs.Radius;
	}
};

//Dependency: GcPlayerHazardType
struct GcHazardAction
{
	NMS_GameComponents::GcPlayerHazardType Hazard;
	float Radius;
	float Strength;
	bool RadiusBasedStrength;

	friend bool operator==(const GcHazardAction& lhs, const GcHazardAction& rhs) 
	{
		return lhs.Hazard == rhs.Hazard &&
		lhs.Radius == rhs.Radius &&
		lhs.Strength == rhs.Strength &&
		lhs.RadiusBasedStrength == rhs.RadiusBasedStrength;
	}
};

struct GcMissionConditionAlienPodAggroed
{
	float Threshold;

	friend bool operator==(const GcMissionConditionAlienPodAggroed& lhs, const GcMissionConditionAlienPodAggroed& rhs) 
	{
		return lhs.Threshold == rhs.Threshold;
	}
};

struct GcHazardValueTypes
{
	enum class HazardValueEnum : uint32_t
	{
		Ambient = 0,
		Water = 1,
		Cave = 2,
		Storm = 3,
		Night = 4,
		DeepWater = 5,
	};

	NMS_GameComponents::GcHazardValueTypes::HazardValueEnum HazardValue;

	friend bool operator==(const GcHazardValueTypes& lhs, const GcHazardValueTypes& rhs) 
	{
		return lhs.HazardValue == rhs.HazardValue;
	}
};

//Dependency: TkCurveType
struct GcPhotoModeAdjustData
{
	float AdjustMax;
	float AdjustMaxRange;
	float AdjustMin;
	NMS_Toolkit::TkCurveType AdjustMaxCurve;
	NMS_Toolkit::TkCurveType AdjustMinCurve;
	bool Inverted;

	friend bool operator==(const GcPhotoModeAdjustData& lhs, const GcPhotoModeAdjustData& rhs) 
	{
		return lhs.AdjustMax == rhs.AdjustMax &&
		lhs.AdjustMaxRange == rhs.AdjustMaxRange &&
		lhs.AdjustMin == rhs.AdjustMin &&
		lhs.AdjustMaxCurve == rhs.AdjustMaxCurve &&
		lhs.AdjustMinCurve == rhs.AdjustMinCurve &&
		lhs.Inverted == rhs.Inverted;
	}
};

//Dependency: VariableSizeString
struct GcHeavyAirList
{
	std::vector<NMS::VariableSizeString> Options;

	friend bool operator==(const GcHeavyAirList& lhs, const GcHeavyAirList& rhs) 
	{
		return lhs.Options == rhs.Options;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: GcMissionCategory
//Dependency: NMSString0x10
struct GcMissionSequenceShowMessage
{
	enum class OSDMessageStyleEnum : uint32_t
	{
		Standard = 0,
		Fancy = 1,
		Stats = 2,
		Settlement = 3,
		Spook = 4,
	};

	NMS::Colour OSDMessageColour;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString OSDMessage;
	NMS::VariableSizeString OSDMessageSubtitle;
	NMS::NMSString0x10 StatusMessageDefinition;
	std::vector<NMSTemplate> UseConditionsForTextFormatting;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcMissionCategory Category;
	NMS_GameComponents::GcMissionSequenceShowMessage::OSDMessageStyleEnum OSDMessageStyle;
	float OSDTime;
	float Time;
	bool DisableIcon;
	bool DisableTitlePrefix;
	bool OSDUseMissionIcon;

	friend bool operator==(const GcMissionSequenceShowMessage& lhs, const GcMissionSequenceShowMessage& rhs) 
	{
		return lhs.OSDMessageColour == rhs.OSDMessageColour &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.OSDMessage == rhs.OSDMessage &&
		lhs.OSDMessageSubtitle == rhs.OSDMessageSubtitle &&
		lhs.StatusMessageDefinition == rhs.StatusMessageDefinition &&
		lhs.UseConditionsForTextFormatting == rhs.UseConditionsForTextFormatting &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.Category == rhs.Category &&
		lhs.OSDMessageStyle == rhs.OSDMessageStyle &&
		lhs.OSDTime == rhs.OSDTime &&
		lhs.Time == rhs.Time &&
		lhs.DisableIcon == rhs.DisableIcon &&
		lhs.DisableTitlePrefix == rhs.DisableTitlePrefix &&
		lhs.OSDUseMissionIcon == rhs.OSDUseMissionIcon;
	}
};

struct GcRewardEnableSentinels
{

	friend bool operator==(const GcRewardEnableSentinels& lhs, const GcRewardEnableSentinels& rhs) 
	{
		return true;
	}
};

struct GcHotActionMenuTypes
{
	enum class HotActionMenuTypesEnum : uint32_t
	{
		OnFoot = 0,
		InShip = 1,
		InExocraft = 2,
	};

	NMS_GameComponents::GcHotActionMenuTypes::HotActionMenuTypesEnum HotActionMenuTypes;

	friend bool operator==(const GcHotActionMenuTypes& lhs, const GcHotActionMenuTypes& rhs) 
	{
		return lhs.HotActionMenuTypes == rhs.HotActionMenuTypes;
	}
};

//Dependency: GcObjectSpawnData
//Dependency: GcTerrainTileType
struct GcObjectSpawnDataArray
{
	std::vector<NMS_GameComponents::GcObjectSpawnData> Objects;
	int32_t MaxObjectsToSpawn;
	NMS_GameComponents::GcTerrainTileType TileType;

	friend bool operator==(const GcObjectSpawnDataArray& lhs, const GcObjectSpawnDataArray& rhs) 
	{
		return lhs.Objects == rhs.Objects &&
		lhs.MaxObjectsToSpawn == rhs.MaxObjectsToSpawn &&
		lhs.TileType == rhs.TileType;
	}
};

//Dependency: NMSString0x10
struct GcIDEnum
{
	std::vector<NMS::NMSString0x10> Values;

	friend bool operator==(const GcIDEnum& lhs, const GcIDEnum& rhs) 
	{
		return lhs.Values == rhs.Values;
	}
};

struct GcMissionConditionPlatform
{
	enum class MissionPlatformEnum : uint32_t
	{
		Undefined = 0,
		NintendoSwitch = 1,
	};

	NMS_GameComponents::GcMissionConditionPlatform::MissionPlatformEnum MissionPlatform;

	friend bool operator==(const GcMissionConditionPlatform& lhs, const GcMissionConditionPlatform& rhs) 
	{
		return lhs.MissionPlatform == rhs.MissionPlatform;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkSketchNodeData
struct TkSketchComponentData
{
	std::vector<NMS_Toolkit::TkSketchNodeData> Nodes;
	float GraphPosX;
	float GraphPosY;
	float GraphZoom;
	float UpdateRateMultiplier;

	friend bool operator==(const TkSketchComponentData& lhs, const TkSketchComponentData& rhs) 
	{
		return lhs.Nodes == rhs.Nodes &&
		lhs.GraphPosX == rhs.GraphPosX &&
		lhs.GraphPosY == rhs.GraphPosY &&
		lhs.GraphZoom == rhs.GraphZoom &&
		lhs.UpdateRateMultiplier == rhs.UpdateRateMultiplier;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcInputActionMapping
{
	int32_t RemappedKey;
	int32_t RemappedPad;

	friend bool operator==(const GcInputActionMapping& lhs, const GcInputActionMapping& rhs) 
	{
		return lhs.RemappedKey == rhs.RemappedKey &&
		lhs.RemappedPad == rhs.RemappedPad;
	}
};

//Dependency: GcNameGeneratorWord
//Dependency: TkTextureResource
struct GcProductProceduralOnlyData
{
	NMS_GameComponents::GcNameGeneratorWord Description;
	NMS_Toolkit::TkTextureResource HeroIcon;
	NMS_Toolkit::TkTextureResource Icon;
	int32_t AgeMax;
	int32_t AgeMin;
	int32_t BaseValueMax;
	int32_t BaseValueMin;
	int32_t DropWeight;

	friend bool operator==(const GcProductProceduralOnlyData& lhs, const GcProductProceduralOnlyData& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.HeroIcon == rhs.HeroIcon &&
		lhs.Icon == rhs.Icon &&
		lhs.AgeMax == rhs.AgeMax &&
		lhs.AgeMin == rhs.AgeMin &&
		lhs.BaseValueMax == rhs.BaseValueMax &&
		lhs.BaseValueMin == rhs.BaseValueMin &&
		lhs.DropWeight == rhs.DropWeight;
	}
};

//Dependency: GcProductData
//Dependency: GcProductProceduralOnlyData
//Dependency: GcProceduralProductWord
//Dependency: GcNameGeneratorWord
//Dependency: GcBiomeList
//Dependency: NMSString0x20
struct GcProceduralProductData
{
	NMS_GameComponents::GcProductData Product;
	NMS_GameComponents::GcProductProceduralOnlyData ProceduralData[3];
	NMS_GameComponents::GcNameGeneratorWord NameGeneratorBase;
	std::vector<NMS_GameComponents::GcProceduralProductWord> NameGeneratorWordList;
	NMS_GameComponents::GcBiomeList PerBiomeDropWeights;
	int32_t NameGeneratorLegacyRolls;
	NMS::NMSString0x20 DeployableProductID;
	bool RecordsStat;

	friend bool operator==(const GcProceduralProductData& lhs, const GcProceduralProductData& rhs) 
	{
		return lhs.Product == rhs.Product &&
		std::equal(std::begin(lhs.ProceduralData), std::end(lhs.ProceduralData), std::begin(rhs.ProceduralData)) &&
		lhs.NameGeneratorBase == rhs.NameGeneratorBase &&
		lhs.NameGeneratorWordList == rhs.NameGeneratorWordList &&
		lhs.PerBiomeDropWeights == rhs.PerBiomeDropWeights &&
		lhs.NameGeneratorLegacyRolls == rhs.NameGeneratorLegacyRolls &&
		lhs.DeployableProductID == rhs.DeployableProductID &&
		lhs.RecordsStat == rhs.RecordsStat;
	}
};

struct GcRewardCleanUpPulseEncounter
{

	friend bool operator==(const GcRewardCleanUpPulseEncounter& lhs, const GcRewardCleanUpPulseEncounter& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcPlayerWeaponData
{
	NMS::NMSString0x10 Reticle;

	friend bool operator==(const GcPlayerWeaponData& lhs, const GcPlayerWeaponData& rhs) 
	{
		return lhs.Reticle == rhs.Reticle;
	}
};

//Dependency: NMSString0x10
struct GcModularCustomisationProductLookupList
{
	std::vector<NMS::NMSString0x10> ProductLookupList;

	friend bool operator==(const GcModularCustomisationProductLookupList& lhs, const GcModularCustomisationProductLookupList& rhs) 
	{
		return lhs.ProductLookupList == rhs.ProductLookupList;
	}
};

struct GcResourceOrigin
{
	enum class ResourceOriginEnum : uint32_t
	{
		Terrain = 0,
		Crystal = 1,
		Asteroid = 2,
		Robot = 3,
		Depot = 4,
	};

	NMS_GameComponents::GcResourceOrigin::ResourceOriginEnum ResourceOrigin;

	friend bool operator==(const GcResourceOrigin& lhs, const GcResourceOrigin& rhs) 
	{
		return lhs.ResourceOrigin == rhs.ResourceOrigin;
	}
};

//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcRobotLaserData
{
	NMS::Colour LaserColour;
	NMS::Vector3f LaserLightOffset;
	NMS::NMSString0x10 LaserID;
	float LaserActiveSpringTime;
	float LaserChargeTime;
	float LaserLightAttackSize;
	float LaserLightChargeSize;
	int32_t LaserMiningDamage;
	float LaserSpringTime;
	float LaserTime;

	friend bool operator==(const GcRobotLaserData& lhs, const GcRobotLaserData& rhs) 
	{
		return lhs.LaserColour == rhs.LaserColour &&
		lhs.LaserLightOffset == rhs.LaserLightOffset &&
		lhs.LaserID == rhs.LaserID &&
		lhs.LaserActiveSpringTime == rhs.LaserActiveSpringTime &&
		lhs.LaserChargeTime == rhs.LaserChargeTime &&
		lhs.LaserLightAttackSize == rhs.LaserLightAttackSize &&
		lhs.LaserLightChargeSize == rhs.LaserLightChargeSize &&
		lhs.LaserMiningDamage == rhs.LaserMiningDamage &&
		lhs.LaserSpringTime == rhs.LaserSpringTime &&
		lhs.LaserTime == rhs.LaserTime;
	}
};

//Dependency: GcBuildingColourPalette
//Dependency: GcWeightedColourId
struct GcSettlementColourUpgradeData
{
	std::vector<NMS_GameComponents::GcBuildingColourPalette> BuildingPalettes;
	std::vector<NMS_GameComponents::GcWeightedColourId> DefaultPalettes;

	friend bool operator==(const GcSettlementColourUpgradeData& lhs, const GcSettlementColourUpgradeData& rhs) 
	{
		return lhs.BuildingPalettes == rhs.BuildingPalettes &&
		lhs.DefaultPalettes == rhs.DefaultPalettes;
	}
};

struct GcInventoryFilterOptions
{
	enum class InventoryFilterEnum : uint32_t
	{
		All = 0,
		Substance = 1,
		HighValue = 2,
		Consumable = 3,
		Deployable = 4,
	};

	NMS_GameComponents::GcInventoryFilterOptions::InventoryFilterEnum InventoryFilter;

	friend bool operator==(const GcInventoryFilterOptions& lhs, const GcInventoryFilterOptions& rhs) 
	{
		return lhs.InventoryFilter == rhs.InventoryFilter;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x40
struct GcWikiPage
{
	NMS::NMSString0x20A PageID;
	NMS_Toolkit::TkTextureResource ContentImage;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x40 Content;
	NMS::NMSString0x40 VRAnyHandControlContent;
	NMS::NMSString0x40 VRContent;
	NMS::NMSString0x40 VRMoveControllerContent;

	friend bool operator==(const GcWikiPage& lhs, const GcWikiPage& rhs) 
	{
		return lhs.PageID == rhs.PageID &&
		lhs.ContentImage == rhs.ContentImage &&
		lhs.Icon == rhs.Icon &&
		lhs.Content == rhs.Content &&
		lhs.VRAnyHandControlContent == rhs.VRAnyHandControlContent &&
		lhs.VRContent == rhs.VRContent &&
		lhs.VRMoveControllerContent == rhs.VRMoveControllerContent;
	}
};

//Dependency: GcMissionSchedulingData
struct GcMissionSchedulesTable
{
	std::vector<NMS_GameComponents::GcMissionSchedulingData> Schedules;

	friend bool operator==(const GcMissionSchedulesTable& lhs, const GcMissionSchedulesTable& rhs) 
	{
		return lhs.Schedules == rhs.Schedules;
	}
};

//Dependency: GcFiendCrime
//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessageFiendCrime
{
	NMS::Vector3f Position;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;
	float Value;
	NMS::GcNodeID Victim;

	friend bool operator==(const GcMessageFiendCrime& lhs, const GcMessageFiendCrime& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.FiendCrimeType == rhs.FiendCrimeType &&
		lhs.Value == rhs.Value &&
		lhs.Victim == rhs.Victim;
	}
};

struct GcInventoryStoreBalance
{
	float DeconstructRefundPercentage;
	int32_t PlayerPersonalInventoryCargoHeight;
	int32_t PlayerPersonalInventoryCargoWidth;
	int32_t PlayerPersonalInventoryTechHeight;
	int32_t PlayerPersonalInventoryTechWidth;

	friend bool operator==(const GcInventoryStoreBalance& lhs, const GcInventoryStoreBalance& rhs) 
	{
		return lhs.DeconstructRefundPercentage == rhs.DeconstructRefundPercentage &&
		lhs.PlayerPersonalInventoryCargoHeight == rhs.PlayerPersonalInventoryCargoHeight &&
		lhs.PlayerPersonalInventoryCargoWidth == rhs.PlayerPersonalInventoryCargoWidth &&
		lhs.PlayerPersonalInventoryTechHeight == rhs.PlayerPersonalInventoryTechHeight &&
		lhs.PlayerPersonalInventoryTechWidth == rhs.PlayerPersonalInventoryTechWidth;
	}
};

struct GcMissionConditionVisorActive
{

	friend bool operator==(const GcMissionConditionVisorActive& lhs, const GcMissionConditionVisorActive& rhs) 
	{
		return true;
	}
};

struct GcItemFilterStageDataAcceptAll
{

	friend bool operator==(const GcItemFilterStageDataAcceptAll& lhs, const GcItemFilterStageDataAcceptAll& rhs) 
	{
		return true;
	}
};

struct GcItemFilterStageDataNegation
{
	NMSTemplate Child;

	friend bool operator==(const GcItemFilterStageDataNegation& lhs, const GcItemFilterStageDataNegation& rhs) 
	{
		return lhs.Child == rhs.Child;
	}
};

//Dependency: GcProductCategory
//Dependency: NMSString0x20A
struct GcItemFilterStageDataProductCategory
{
	NMS::NMSString0x20A DisabledMessage;
	NMS_GameComponents::GcProductCategory Category;

	friend bool operator==(const GcItemFilterStageDataProductCategory& lhs, const GcItemFilterStageDataProductCategory& rhs) 
	{
		return lhs.DisabledMessage == rhs.DisabledMessage &&
		lhs.Category == rhs.Category;
	}
};

//Dependency: NMSString0x10
struct GcRealitySubstanceCraftingMix
{
	NMS::NMSString0x10 ID;
	int32_t Ratio;

	friend bool operator==(const GcRealitySubstanceCraftingMix& lhs, const GcRealitySubstanceCraftingMix& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Ratio == rhs.Ratio;
	}
};

//Dependency: GcRealitySubstanceCraftingMix
//Dependency: NMSString0x10
struct GcRealityCraftingRecipeData
{
	NMS_GameComponents::GcRealitySubstanceCraftingMix Inputs[3];
	NMS::NMSString0x10 OutputID;

	friend bool operator==(const GcRealityCraftingRecipeData& lhs, const GcRealityCraftingRecipeData& rhs) 
	{
		return std::equal(std::begin(lhs.Inputs), std::end(lhs.Inputs), std::begin(rhs.Inputs)) &&
		lhs.OutputID == rhs.OutputID;
	}
};

//Dependency: GcRealityCraftingRecipeData
//Dependency: GcRealitySubstanceData
struct GcSubstanceTable
{
	std::vector<NMS_GameComponents::GcRealityCraftingRecipeData> Crafting;
	std::vector<NMS_GameComponents::GcRealitySubstanceData> Table;

	friend bool operator==(const GcSubstanceTable& lhs, const GcSubstanceTable& rhs) 
	{
		return lhs.Crafting == rhs.Crafting &&
		lhs.Table == rhs.Table;
	}
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
struct GcModularCustomisationColourGroup
{
	NMS::NMSString0x20A Title;
	std::vector<NMS_Toolkit::TkPaletteTexture> Palettes;
	int32_t DefaultColourIndex;

	friend bool operator==(const GcModularCustomisationColourGroup& lhs, const GcModularCustomisationColourGroup& rhs) 
	{
		return lhs.Title == rhs.Title &&
		lhs.Palettes == rhs.Palettes &&
		lhs.DefaultColourIndex == rhs.DefaultColourIndex;
	}
};

//Dependency: GcModularCustomisationColourGroup
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationColourData
{
	NMS::NMSString0x20A RequiredTextureOption;
	std::vector<NMS_GameComponents::GcModularCustomisationColourGroup> ColourGroups;
	NMS::NMSString0x10 PaletteID;
	NMS::NMSString0x10 RequiredTextureGroup;

	friend bool operator==(const GcModularCustomisationColourData& lhs, const GcModularCustomisationColourData& rhs) 
	{
		return lhs.RequiredTextureOption == rhs.RequiredTextureOption &&
		lhs.ColourGroups == rhs.ColourGroups &&
		lhs.PaletteID == rhs.PaletteID &&
		lhs.RequiredTextureGroup == rhs.RequiredTextureGroup;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcJourneyMilestoneData
{
	NMS::NMSString0x20A JourneyMilestoneTitle;
	NMS::NMSString0x20A JourneyMilestoneTitleLower;
	NMS::NMSString0x10 JourneyMilestoneId;
	int32_t PointsToUnlock;

	friend bool operator==(const GcJourneyMilestoneData& lhs, const GcJourneyMilestoneData& rhs) 
	{
		return lhs.JourneyMilestoneTitle == rhs.JourneyMilestoneTitle &&
		lhs.JourneyMilestoneTitleLower == rhs.JourneyMilestoneTitleLower &&
		lhs.JourneyMilestoneId == rhs.JourneyMilestoneId &&
		lhs.PointsToUnlock == rhs.PointsToUnlock;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceShowMissionUpdateMessage
{
	enum class PlayMusicStingEnum : uint32_t
	{
		None = 0,
		Start = 1,
		End = 2,
		Corrupted = 3,
	};

	enum class MissionUpdateMessageEnum : uint32_t
	{
		Start = 0,
		End = 1,
	};

	NMS::NMSString0x20A CustomMessageLocID;
	NMS::NMSString0x20A CustomObjectiveLocID;
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcMissionSequenceShowMissionUpdateMessage::MissionUpdateMessageEnum MissionUpdateMessage;
	NMS_GameComponents::GcMissionSequenceShowMissionUpdateMessage::PlayMusicStingEnum PlayMusicSting;
	bool SetMissionSelected;
	bool ShowChangeMissionNotify;
	bool SuppressNotificationsNotFromThisMission;
	bool WaitForMessageOver;

	friend bool operator==(const GcMissionSequenceShowMissionUpdateMessage& lhs, const GcMissionSequenceShowMissionUpdateMessage& rhs) 
	{
		return lhs.CustomMessageLocID == rhs.CustomMessageLocID &&
		lhs.CustomObjectiveLocID == rhs.CustomObjectiveLocID &&
		lhs.DebugText == rhs.DebugText &&
		lhs.MissionUpdateMessage == rhs.MissionUpdateMessage &&
		lhs.PlayMusicSting == rhs.PlayMusicSting &&
		lhs.SetMissionSelected == rhs.SetMissionSelected &&
		lhs.ShowChangeMissionNotify == rhs.ShowChangeMissionNotify &&
		lhs.SuppressNotificationsNotFromThisMission == rhs.SuppressNotificationsNotFromThisMission &&
		lhs.WaitForMessageOver == rhs.WaitForMessageOver;
	}
};

//Dependency: GcJourneyMilestoneData
struct GcJourneyMilestoneTable
{
	std::vector<NMS_GameComponents::GcJourneyMilestoneData> JourneyMilestoneTable;

	friend bool operator==(const GcJourneyMilestoneTable& lhs, const GcJourneyMilestoneTable& rhs) 
	{
		return lhs.JourneyMilestoneTable == rhs.JourneyMilestoneTable;
	}
};

//Dependency: GcCreaturePetMood
struct GcPetBehaviourMoodModifier
{
	float CooldownModifierMax;
	float CooldownModifierMin;
	NMS_GameComponents::GcCreaturePetMood Mood;
	float MoodMax;
	float MoodMin;
	float WeightModifierMax;
	float WeightModifierMin;

	friend bool operator==(const GcPetBehaviourMoodModifier& lhs, const GcPetBehaviourMoodModifier& rhs) 
	{
		return lhs.CooldownModifierMax == rhs.CooldownModifierMax &&
		lhs.CooldownModifierMin == rhs.CooldownModifierMin &&
		lhs.Mood == rhs.Mood &&
		lhs.MoodMax == rhs.MoodMax &&
		lhs.MoodMin == rhs.MoodMin &&
		lhs.WeightModifierMax == rhs.WeightModifierMax &&
		lhs.WeightModifierMin == rhs.WeightModifierMin;
	}
};

//Dependency: GcCombatEffectDamageMultiplier
//Dependency: GcImpactCombatEffectData
//Dependency: GcDamageType
//Dependency: GcProjectileImpactData
//Dependency: VariableSizeString
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcLaserBeamData
{
	NMS::Colour Colour;
	NMS::Vector3f ImpactOffset;
	NMS::Colour LightColour;
	NMS::VariableSizeString BeamCoreFile;
	NMS::VariableSizeString BeamFile;
	NMS::VariableSizeString BeamTipFile;
	std::vector<NMS_GameComponents::GcCombatEffectDamageMultiplier> CombatEffectDamageMultipliers;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnImpact;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ImpactEffect;
	std::vector<NMS_GameComponents::GcProjectileImpactData> Impacts;
	NMS::NMSString0x10 PlayerDamage;
	NMS_GameComponents::GcAudioWwiseEvents AudioOverheat;
	NMS_GameComponents::GcAudioWwiseEvents AudioStart;
	NMS_GameComponents::GcAudioWwiseEvents AudioStop;
	float CriticalHitModifier;
	NMS_GameComponents::GcDamageType DamageType;
	int32_t DefaultDamage;
	float DroneImpulse;
	float EndTime;
	float ExtraPlayerDamage;
	float HitRate;
	float HitWidth;
	float ImpactPusherPulseOffset;
	float ImpactPusherPulseSpeed;
	float ImpactPusherRadius;
	float ImpactPusherWeight;
	float LightIntensity;
	float MiningHitRate;
	float PhysicsPush;
	float PiercingDamagePercentage;
	float PulseAmplitude;
	float PulseFrequency;
	float RagdollPush;
	float Speed;
	float StartTime;
	float Width;
	bool ApplyCombatLevelMultipliers;
	bool CanMine;
	bool CreatesImpactPusher;
	bool HasLight;
	bool SingleHit;

	friend bool operator==(const GcLaserBeamData& lhs, const GcLaserBeamData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.ImpactOffset == rhs.ImpactOffset &&
		lhs.LightColour == rhs.LightColour &&
		lhs.BeamCoreFile == rhs.BeamCoreFile &&
		lhs.BeamFile == rhs.BeamFile &&
		lhs.BeamTipFile == rhs.BeamTipFile &&
		lhs.CombatEffectDamageMultipliers == rhs.CombatEffectDamageMultipliers &&
		lhs.CombatEffectsOnImpact == rhs.CombatEffectsOnImpact &&
		lhs.Id == rhs.Id &&
		lhs.ImpactEffect == rhs.ImpactEffect &&
		lhs.Impacts == rhs.Impacts &&
		lhs.PlayerDamage == rhs.PlayerDamage &&
		lhs.AudioOverheat == rhs.AudioOverheat &&
		lhs.AudioStart == rhs.AudioStart &&
		lhs.AudioStop == rhs.AudioStop &&
		lhs.CriticalHitModifier == rhs.CriticalHitModifier &&
		lhs.DamageType == rhs.DamageType &&
		lhs.DefaultDamage == rhs.DefaultDamage &&
		lhs.DroneImpulse == rhs.DroneImpulse &&
		lhs.EndTime == rhs.EndTime &&
		lhs.ExtraPlayerDamage == rhs.ExtraPlayerDamage &&
		lhs.HitRate == rhs.HitRate &&
		lhs.HitWidth == rhs.HitWidth &&
		lhs.ImpactPusherPulseOffset == rhs.ImpactPusherPulseOffset &&
		lhs.ImpactPusherPulseSpeed == rhs.ImpactPusherPulseSpeed &&
		lhs.ImpactPusherRadius == rhs.ImpactPusherRadius &&
		lhs.ImpactPusherWeight == rhs.ImpactPusherWeight &&
		lhs.LightIntensity == rhs.LightIntensity &&
		lhs.MiningHitRate == rhs.MiningHitRate &&
		lhs.PhysicsPush == rhs.PhysicsPush &&
		lhs.PiercingDamagePercentage == rhs.PiercingDamagePercentage &&
		lhs.PulseAmplitude == rhs.PulseAmplitude &&
		lhs.PulseFrequency == rhs.PulseFrequency &&
		lhs.RagdollPush == rhs.RagdollPush &&
		lhs.Speed == rhs.Speed &&
		lhs.StartTime == rhs.StartTime &&
		lhs.Width == rhs.Width &&
		lhs.ApplyCombatLevelMultipliers == rhs.ApplyCombatLevelMultipliers &&
		lhs.CanMine == rhs.CanMine &&
		lhs.CreatesImpactPusher == rhs.CreatesImpactPusher &&
		lhs.HasLight == rhs.HasLight &&
		lhs.SingleHit == rhs.SingleHit;
	}
};

struct GcMissionConditionSystemHasGasGiant
{

	friend bool operator==(const GcMissionConditionSystemHasGasGiant& lhs, const GcMissionConditionSystemHasGasGiant& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionNearFossilDisplay
{
	float Distance;
	bool MustBeComplete;

	friend bool operator==(const GcMissionConditionNearFossilDisplay& lhs, const GcMissionConditionNearFossilDisplay& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.MustBeComplete == rhs.MustBeComplete;
	}
};

//Dependency: NMSString0x20A
struct GcRewardDisableSentinels
{
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A WantedBarMessage;
	float Duration;

	friend bool operator==(const GcRewardDisableSentinels& lhs, const GcRewardDisableSentinels& rhs) 
	{
		return lhs.OSDMessage == rhs.OSDMessage &&
		lhs.WantedBarMessage == rhs.WantedBarMessage &&
		lhs.Duration == rhs.Duration;
	}
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcMaintenanceGroupEntry
{
	NMS::NMSString0x10 Id;
	float OverrideAmount;
	float ProbabilityWeighting;
	NMS_GameComponents::GcInventoryType Type;

	friend bool operator==(const GcMaintenanceGroupEntry& lhs, const GcMaintenanceGroupEntry& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.OverrideAmount == rhs.OverrideAmount &&
		lhs.ProbabilityWeighting == rhs.ProbabilityWeighting &&
		lhs.Type == rhs.Type;
	}
};

//Dependency: GcMaintenanceGroupEntry
struct GcMaintenanceGroup
{
	std::vector<NMS_GameComponents::GcMaintenanceGroupEntry> Table;

	friend bool operator==(const GcMaintenanceGroup& lhs, const GcMaintenanceGroup& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcInventoryClass
//Dependency: GcWeaponClasses
struct GcMissionConditionHasMultiTool
{
	NMS_GameComponents::GcInventoryClass InventoryClass;
	NMS_GameComponents::GcWeaponClasses WeaponClass;
	bool BetterClassMatches;
	bool CheckAllTools;
	bool MustMatchWeaponClass;
	bool TakeValueFromSeasonData;

	friend bool operator==(const GcMissionConditionHasMultiTool& lhs, const GcMissionConditionHasMultiTool& rhs) 
	{
		return lhs.InventoryClass == rhs.InventoryClass &&
		lhs.WeaponClass == rhs.WeaponClass &&
		lhs.BetterClassMatches == rhs.BetterClassMatches &&
		lhs.CheckAllTools == rhs.CheckAllTools &&
		lhs.MustMatchWeaponClass == rhs.MustMatchWeaponClass &&
		lhs.TakeValueFromSeasonData == rhs.TakeValueFromSeasonData;
	}
};

struct GcMissionConditionCurrentPlanetVisited
{
	bool JustTestSeasonStartPlanetHack;

	friend bool operator==(const GcMissionConditionCurrentPlanetVisited& lhs, const GcMissionConditionCurrentPlanetVisited& rhs) 
	{
		return lhs.JustTestSeasonStartPlanetHack == rhs.JustTestSeasonStartPlanetHack;
	}
};

struct GcWikiTopicType
{
	enum class WikiTopicTypeEnum : uint32_t
	{
		Substances = 0,
		CustomSubstanceList = 1,
		Products = 2,
		CustomProductList = 3,
		CustomItemList = 4,
		Technologies = 5,
		CustomTechnologyList = 6,
		BuildableTech = 7,
		Construction = 8,
		TradeCommodities = 9,
		Curiosities = 10,
		Cooking = 11,
		Fish = 12,
		StoneRunes = 13,
		Words = 14,
		RecipesAll = 15,
		RecipesCooker = 16,
		RecipesRefiner1 = 17,
		RecipesRefiner2 = 18,
		RecipesRefiner3 = 19,
		Guide = 20,
		Stories = 21,
		TreasureWonders = 22,
		WeirdBasePartWonders = 23,
		PlanetWonders = 24,
		CreatureWonders = 25,
		FloraWonders = 26,
		MineralWonders = 27,
		CustomWonders = 28,
		ExhibitBones = 29,
		DebugSweep = 30,
	};

	NMS_GameComponents::GcWikiTopicType::WikiTopicTypeEnum WikiTopicType;

	friend bool operator==(const GcWikiTopicType& lhs, const GcWikiTopicType& rhs) 
	{
		return lhs.WikiTopicType == rhs.WikiTopicType;
	}
};

//Dependency: GcStoryEntry
//Dependency: GcInteractionType
//Dependency: GcWikiTopicType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryPage
{
	NMS::NMSString0x20A ID;
	NMS_Toolkit::TkTextureResource Icon;
	std::vector<NMS_GameComponents::GcStoryEntry> Entries;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcWikiTopicType WikiGridType;
	bool StatIsBitmask;
	bool UseGridType;

	friend bool operator==(const GcStoryPage& lhs, const GcStoryPage& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Icon == rhs.Icon &&
		lhs.Entries == rhs.Entries &&
		lhs.Stat == rhs.Stat &&
		lhs.InteractionType == rhs.InteractionType &&
		lhs.WikiGridType == rhs.WikiGridType &&
		lhs.StatIsBitmask == rhs.StatIsBitmask &&
		lhs.UseGridType == rhs.UseGridType;
	}
};

//Dependency: GcMaintenanceGroup
struct GcMaintenanceGroupsTable
{
	NMS_GameComponents::GcMaintenanceGroup Groups[10];

	friend bool operator==(const GcMaintenanceGroupsTable& lhs, const GcMaintenanceGroupsTable& rhs) 
	{
		return std::equal(std::begin(lhs.Groups), std::end(lhs.Groups), std::begin(rhs.Groups));
	}
};

struct GcMissionConditionHasIllegalGoods
{
	bool IncludeNipNip;

	friend bool operator==(const GcMissionConditionHasIllegalGoods& lhs, const GcMissionConditionHasIllegalGoods& rhs) 
	{
		return lhs.IncludeNipNip == rhs.IncludeNipNip;
	}
};

//Dependency: GcRealityGameIcons
//Dependency: GcGenericIconTypes
//Dependency: NMSString0x20A
struct GcMarkerComponentData
{
	enum class DisplayModeEnum : uint32_t
	{
		Always = 0,
		SpaceOnly = 1,
		PlanetOnly = 2,
	};

	NMS::NMSString0x20A CustomName;
	NMS_GameComponents::GcRealityGameIcons CustomIcon;
	NMS_GameComponents::GcMarkerComponentData::DisplayModeEnum DisplayMode;
	NMS_GameComponents::GcGenericIconTypes Icon;
	float Radius;
	bool ShipScannable;
	bool UseCustomIcon;

	friend bool operator==(const GcMarkerComponentData& lhs, const GcMarkerComponentData& rhs) 
	{
		return lhs.CustomName == rhs.CustomName &&
		lhs.CustomIcon == rhs.CustomIcon &&
		lhs.DisplayMode == rhs.DisplayMode &&
		lhs.Icon == rhs.Icon &&
		lhs.Radius == rhs.Radius &&
		lhs.ShipScannable == rhs.ShipScannable &&
		lhs.UseCustomIcon == rhs.UseCustomIcon;
	}
};

//Dependency: GcSolarSystemLocatorChoice
struct GcSolarSystemEventWarpPlayer
{
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	float Time;

	friend bool operator==(const GcSolarSystemEventWarpPlayer& lhs, const GcSolarSystemEventWarpPlayer& rhs) 
	{
		return lhs.Locator == rhs.Locator &&
		lhs.Time == rhs.Time;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

struct GcSmokeTestOptions
{
	float CameraFastHeight;
	float CameraFastMoveSpeed;
	float CameraHeight;
	float CameraMoveSpeed;
	float CameraPitchAngleDeg;
	float CameraPitchSpeedRange;
	float CameraRotateSpeed;
	int32_t GifFrames;
	float GifTimeBetweenKeyframes;
	float InitialPause;
	float PlanetFlightTime;
	float PlanetFlightTimeout;
	int32_t SmokeBotNumWalksBeforeWarp;
	float SmokeBotTurnAngle;
	float SmokeTestFlashTimeDuration;
	bool GifMode;

	friend bool operator==(const GcSmokeTestOptions& lhs, const GcSmokeTestOptions& rhs) 
	{
		return lhs.CameraFastHeight == rhs.CameraFastHeight &&
		lhs.CameraFastMoveSpeed == rhs.CameraFastMoveSpeed &&
		lhs.CameraHeight == rhs.CameraHeight &&
		lhs.CameraMoveSpeed == rhs.CameraMoveSpeed &&
		lhs.CameraPitchAngleDeg == rhs.CameraPitchAngleDeg &&
		lhs.CameraPitchSpeedRange == rhs.CameraPitchSpeedRange &&
		lhs.CameraRotateSpeed == rhs.CameraRotateSpeed &&
		lhs.GifFrames == rhs.GifFrames &&
		lhs.GifTimeBetweenKeyframes == rhs.GifTimeBetweenKeyframes &&
		lhs.InitialPause == rhs.InitialPause &&
		lhs.PlanetFlightTime == rhs.PlanetFlightTime &&
		lhs.PlanetFlightTimeout == rhs.PlanetFlightTimeout &&
		lhs.SmokeBotNumWalksBeforeWarp == rhs.SmokeBotNumWalksBeforeWarp &&
		lhs.SmokeBotTurnAngle == rhs.SmokeBotTurnAngle &&
		lhs.SmokeTestFlashTimeDuration == rhs.SmokeTestFlashTimeDuration &&
		lhs.GifMode == rhs.GifMode;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcMechMeshPartData
struct GcMechMeshPartTable
{
	NMS_GameComponents::GcMechMeshPartData Parts[5];

	friend bool operator==(const GcMechMeshPartTable& lhs, const GcMechMeshPartTable& rhs) 
	{
		return std::equal(std::begin(lhs.Parts), std::end(lhs.Parts), std::begin(rhs.Parts));
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcShipAICombatDefinition
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 Behaviour;
	NMS::NMSString0x10 DamageMultiplier;
	NMS::NMSString0x10 Engine;
	NMS::NMSString0x10 Gun;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PlanetBehaviour;
	NMS::NMSString0x10 PlanetEngine;
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 Shield;
	int32_t Health;
	int32_t LaserDamageLevel;
	int32_t LevelledExtraHealth;
	int32_t RewardCount;
	bool UsesFuelRods;
	bool UsesShieldGenerators;

	friend bool operator==(const GcShipAICombatDefinition& lhs, const GcShipAICombatDefinition& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.Behaviour == rhs.Behaviour &&
		lhs.DamageMultiplier == rhs.DamageMultiplier &&
		lhs.Engine == rhs.Engine &&
		lhs.Gun == rhs.Gun &&
		lhs.Id == rhs.Id &&
		lhs.PlanetBehaviour == rhs.PlanetBehaviour &&
		lhs.PlanetEngine == rhs.PlanetEngine &&
		lhs.Reward == rhs.Reward &&
		lhs.Shield == rhs.Shield &&
		lhs.Health == rhs.Health &&
		lhs.LaserDamageLevel == rhs.LaserDamageLevel &&
		lhs.LevelledExtraHealth == rhs.LevelledExtraHealth &&
		lhs.RewardCount == rhs.RewardCount &&
		lhs.UsesFuelRods == rhs.UsesFuelRods &&
		lhs.UsesShieldGenerators == rhs.UsesShieldGenerators;
	}
};

//Dependency: NMSString0x10
struct GcPlayerMissionUpgradeMapEntry
{
	std::vector<NMS::NMSString0x10> CompletedMissions;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 NewMission;
	int32_t CompletePoint;
	int32_t MinProgress;

	friend bool operator==(const GcPlayerMissionUpgradeMapEntry& lhs, const GcPlayerMissionUpgradeMapEntry& rhs) 
	{
		return lhs.CompletedMissions == rhs.CompletedMissions &&
		lhs.Mission == rhs.Mission &&
		lhs.NewMission == rhs.NewMission &&
		lhs.CompletePoint == rhs.CompletePoint &&
		lhs.MinProgress == rhs.MinProgress;
	}
};

//Dependency: GcPlayerMissionUpgradeMapEntry
struct GcPlayerMissionUpgradeMapTable
{
	std::vector<NMS_GameComponents::GcPlayerMissionUpgradeMapEntry> MissionProgressTable;

	friend bool operator==(const GcPlayerMissionUpgradeMapTable& lhs, const GcPlayerMissionUpgradeMapTable& rhs) 
	{
		return lhs.MissionProgressTable == rhs.MissionProgressTable;
	}
};

//Dependency: GcPetBehaviours
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessagePetBehaviourEvent
{
	NMS::Vector3f Direction;
	NMS::Vector3f Position;
	NMS::NMSString0x20A UserData;
	NMS::NMSString0x10 BehaviourEvent;
	NMS_GameComponents::GcPetBehaviours ForceBehaviour;
	NMS_GameComponents::GcAlienMood Mood;
	NMS::GcNodeID SourceNode;

	friend bool operator==(const GcMessagePetBehaviourEvent& lhs, const GcMessagePetBehaviourEvent& rhs) 
	{
		return lhs.Direction == rhs.Direction &&
		lhs.Position == rhs.Position &&
		lhs.UserData == rhs.UserData &&
		lhs.BehaviourEvent == rhs.BehaviourEvent &&
		lhs.ForceBehaviour == rhs.ForceBehaviour &&
		lhs.Mood == rhs.Mood &&
		lhs.SourceNode == rhs.SourceNode;
	}
};

//Dependency: GcImpactCombatEffectData
//Dependency: GcCombatEffectDamageMultiplier
//Dependency: GcDamageType
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcNodeID
struct GcMessageProjectileImpact
{
	enum class HitTypeEnum : uint32_t
	{
		Shootable = 0,
		Terrain = 1,
		Generic = 2,
	};

	NMS::Vector3f PosLocal;
	NMS::Vector3f PosOffset;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffects;
	std::vector<NMS_GameComponents::GcCombatEffectDamageMultiplier> DamageMultipliers;
	NMS::NMSString0x10 Id;
	int32_t Damage;
	NMS_GameComponents::GcMessageProjectileImpact::HitTypeEnum HitType;
	NMS::GcNodeID Node;
	NMS_GameComponents::GcDamageType Type;
	bool Critical;
	bool Ineffective;
	bool LaserHeatBoost;

	friend bool operator==(const GcMessageProjectileImpact& lhs, const GcMessageProjectileImpact& rhs) 
	{
		return lhs.PosLocal == rhs.PosLocal &&
		lhs.PosOffset == rhs.PosOffset &&
		lhs.CombatEffects == rhs.CombatEffects &&
		lhs.DamageMultipliers == rhs.DamageMultipliers &&
		lhs.Id == rhs.Id &&
		lhs.Damage == rhs.Damage &&
		lhs.HitType == rhs.HitType &&
		lhs.Node == rhs.Node &&
		lhs.Type == rhs.Type &&
		lhs.Critical == rhs.Critical &&
		lhs.Ineffective == rhs.Ineffective &&
		lhs.LaserHeatBoost == rhs.LaserHeatBoost;
	}
};

//Dependency: GcUnlockableSeasonReward
struct GcUnlockableSeasonRewards
{
	std::vector<NMS_GameComponents::GcUnlockableSeasonReward> Table;

	friend bool operator==(const GcUnlockableSeasonRewards& lhs, const GcUnlockableSeasonRewards& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcMessageProjectileLaunch
{

	friend bool operator==(const GcMessageProjectileLaunch& lhs, const GcMessageProjectileLaunch& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector2f
struct TkInputFrame
{
	NMS::Vector2f LeftStick;
	NMS::Vector2f RightStick;
	float LeftTrigger;
	float RightTrigger;
	int16_t Buttons;

	friend bool operator==(const TkInputFrame& lhs, const TkInputFrame& rhs) 
	{
		return lhs.LeftStick == rhs.LeftStick &&
		lhs.RightStick == rhs.RightStick &&
		lhs.LeftTrigger == rhs.LeftTrigger &&
		lhs.RightTrigger == rhs.RightTrigger &&
		lhs.Buttons == rhs.Buttons;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcMessageSubstanceMined
{
	NMS::NMSString0x10 Substance;
	int32_t Amount;

	friend bool operator==(const GcMessageSubstanceMined& lhs, const GcMessageSubstanceMined& rhs) 
	{
		return lhs.Substance == rhs.Substance &&
		lhs.Amount == rhs.Amount;
	}
};

struct GcMinMaxFloat
{
	float Max;
	float Min;

	friend bool operator==(const GcMinMaxFloat& lhs, const GcMinMaxFloat& rhs) 
	{
		return lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min;
	}
};

//Dependency: NMSString0x10
struct GcMinimumUseConstraint
{
	NMS::NMSString0x10 Group;
	std::vector<NMS::NMSString0x10> Modules;
	int32_t MinUses;

	friend bool operator==(const GcMinimumUseConstraint& lhs, const GcMinimumUseConstraint& rhs) 
	{
		return lhs.Group == rhs.Group &&
		lhs.Modules == rhs.Modules &&
		lhs.MinUses == rhs.MinUses;
	}
};

//Dependency: GcMissionCommunityMissionData
//Dependency: NMSString0x10
struct GcMissionCommunityData
{
	std::vector<NMS_GameComponents::GcMissionCommunityMissionData> CommunityMissionsData;
	std::vector<NMS::NMSString0x10> CommunityMissionsIDs;

	friend bool operator==(const GcMissionCommunityData& lhs, const GcMissionCommunityData& rhs) 
	{
		return lhs.CommunityMissionsData == rhs.CommunityMissionsData &&
		lhs.CommunityMissionsIDs == rhs.CommunityMissionsIDs;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceProductAmountNeeded
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Item;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 ToBuild;
	bool IsRepair;

	friend bool operator==(const GcMissionSequenceProductAmountNeeded& lhs, const GcMissionSequenceProductAmountNeeded& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Item == rhs.Item &&
		lhs.Message == rhs.Message &&
		lhs.ToBuild == rhs.ToBuild &&
		lhs.IsRepair == rhs.IsRepair;
	}
};

//Dependency: TkCurveType
struct GcProjectileLineData
{
	float BulletGlowWidthMax;
	float BulletGlowWidthMin;
	float BulletGlowWidthTime;
	float BulletLength;
	float BulletMaxScaleDistance;
	float BulletMinScaleDistance;
	float BulletScaler;
	float BulletScalerMaxDist;
	float BulletScalerMinDist;
	NMS_Toolkit::TkCurveType BulletGlowWidthCurve;

	friend bool operator==(const GcProjectileLineData& lhs, const GcProjectileLineData& rhs) 
	{
		return lhs.BulletGlowWidthMax == rhs.BulletGlowWidthMax &&
		lhs.BulletGlowWidthMin == rhs.BulletGlowWidthMin &&
		lhs.BulletGlowWidthTime == rhs.BulletGlowWidthTime &&
		lhs.BulletLength == rhs.BulletLength &&
		lhs.BulletMaxScaleDistance == rhs.BulletMaxScaleDistance &&
		lhs.BulletMinScaleDistance == rhs.BulletMinScaleDistance &&
		lhs.BulletScaler == rhs.BulletScaler &&
		lhs.BulletScalerMaxDist == rhs.BulletScalerMaxDist &&
		lhs.BulletScalerMinDist == rhs.BulletScalerMinDist &&
		lhs.BulletGlowWidthCurve == rhs.BulletGlowWidthCurve;
	}
};

//Dependency: Colour
//Dependency: GcAudioWwiseEvents
//Dependency: GcResourceElement
//Dependency: GcImpactCombatEffectData
//Dependency: GcDamageType
//Dependency: GcProjectileLineData
//Dependency: GcProjectileImpactData
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcProjectileData
{
	enum class ClassEnum : uint32_t
	{
		Player = 0,
		PlayerShip = 1,
		Ship = 2,
		Robot = 3,
	};

	enum class BehaviourFlagsEnum : uint32_t
	{
		None = 0,
		DestroyTerrain = 1,
		DestroyAsteroids = 2,
		GatherResources = 4,
		Homing = 8,
		HomingLaser = 16,
		ScareCreatures = 32,
	};

	NMS::Colour Colour;
	NMS::Vector3f ImpactOffset;
	NMS::Colour LightColour;
	NMS_GameComponents::GcResourceElement Model;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnImpact;
	NMS::NMSString0x10 CriticalImpact;
	NMS::NMSString0x10 DefaultImpact;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcProjectileImpactData> Impacts;
	NMS::NMSString0x10 PlayerDamage;
	NMS_GameComponents::GcProjectileLineData CustomBulletData;
	NMS_GameComponents::GcProjectileData::BehaviourFlagsEnum BehaviourFlags;
	float BounceDamping;
	float BounceFinalStopTime;
	float BounceMaxSpeed;
	float CapsuleHeight;
	NMS_GameComponents::GcAudioWwiseEvents ChargedFireAudioEvent;
	NMS_GameComponents::GcProjectileData::ClassEnum Class;
	float CriticalHitModifier;
	float DamageImpactMergeTime;
	float DamageImpactMinDistance;
	float DamageImpactTimeBetweenNumbers;
	NMS_GameComponents::GcDamageType DamageType;
	int32_t DefaultBounces;
	int32_t DefaultDamage;
	float DefaultSpeed;
	float DroneImpulse;
	float ExtraPlayerDamage;
	NMS_GameComponents::GcAudioWwiseEvents FireAudioEvent;
	float Gravity;
	float HomingDelay;
	float HomingDelayAcceleration;
	float HomingDuration;
	float Life;
	float MaxHomingAcceleration;
	float MaxHomingTargetAngleLower;
	float MaxHomingTargetAngleLowerDistance;
	float MaxHomingTargetAngleUpper;
	float MaxHomingTargetAngleUpperDistance;
	float Offset;
	NMS_GameComponents::GcAudioWwiseEvents OverheatAudioEvent;
	float PhysicsPush;
	float PiercingDamagePercentage;
	float PusherForce;
	float PusherImpactDuration;
	float PusherImpactForce;
	float PusherImpactRadius;
	float PusherRadius;
	float Radius;
	float RagdollPush;
	float Scale;
	bool ApplyCombatLevelMultipliers;
	bool HitOnBounce;
	bool IsAutonomous;
	bool OverrideLightColour;
	bool ShootableCanOverrideImpact;
	bool UseCustomBulletData;
	bool UseDamageNumberData;
	bool UsePersistentAudio;
	bool UsePusherForImpact;
	bool UsePusherForProjectile;

	friend bool operator==(const GcProjectileData& lhs, const GcProjectileData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.ImpactOffset == rhs.ImpactOffset &&
		lhs.LightColour == rhs.LightColour &&
		lhs.Model == rhs.Model &&
		lhs.CombatEffectsOnImpact == rhs.CombatEffectsOnImpact &&
		lhs.CriticalImpact == rhs.CriticalImpact &&
		lhs.DefaultImpact == rhs.DefaultImpact &&
		lhs.Id == rhs.Id &&
		lhs.Impacts == rhs.Impacts &&
		lhs.PlayerDamage == rhs.PlayerDamage &&
		lhs.CustomBulletData == rhs.CustomBulletData &&
		lhs.BehaviourFlags == rhs.BehaviourFlags &&
		lhs.BounceDamping == rhs.BounceDamping &&
		lhs.BounceFinalStopTime == rhs.BounceFinalStopTime &&
		lhs.BounceMaxSpeed == rhs.BounceMaxSpeed &&
		lhs.CapsuleHeight == rhs.CapsuleHeight &&
		lhs.ChargedFireAudioEvent == rhs.ChargedFireAudioEvent &&
		lhs.Class == rhs.Class &&
		lhs.CriticalHitModifier == rhs.CriticalHitModifier &&
		lhs.DamageImpactMergeTime == rhs.DamageImpactMergeTime &&
		lhs.DamageImpactMinDistance == rhs.DamageImpactMinDistance &&
		lhs.DamageImpactTimeBetweenNumbers == rhs.DamageImpactTimeBetweenNumbers &&
		lhs.DamageType == rhs.DamageType &&
		lhs.DefaultBounces == rhs.DefaultBounces &&
		lhs.DefaultDamage == rhs.DefaultDamage &&
		lhs.DefaultSpeed == rhs.DefaultSpeed &&
		lhs.DroneImpulse == rhs.DroneImpulse &&
		lhs.ExtraPlayerDamage == rhs.ExtraPlayerDamage &&
		lhs.FireAudioEvent == rhs.FireAudioEvent &&
		lhs.Gravity == rhs.Gravity &&
		lhs.HomingDelay == rhs.HomingDelay &&
		lhs.HomingDelayAcceleration == rhs.HomingDelayAcceleration &&
		lhs.HomingDuration == rhs.HomingDuration &&
		lhs.Life == rhs.Life &&
		lhs.MaxHomingAcceleration == rhs.MaxHomingAcceleration &&
		lhs.MaxHomingTargetAngleLower == rhs.MaxHomingTargetAngleLower &&
		lhs.MaxHomingTargetAngleLowerDistance == rhs.MaxHomingTargetAngleLowerDistance &&
		lhs.MaxHomingTargetAngleUpper == rhs.MaxHomingTargetAngleUpper &&
		lhs.MaxHomingTargetAngleUpperDistance == rhs.MaxHomingTargetAngleUpperDistance &&
		lhs.Offset == rhs.Offset &&
		lhs.OverheatAudioEvent == rhs.OverheatAudioEvent &&
		lhs.PhysicsPush == rhs.PhysicsPush &&
		lhs.PiercingDamagePercentage == rhs.PiercingDamagePercentage &&
		lhs.PusherForce == rhs.PusherForce &&
		lhs.PusherImpactDuration == rhs.PusherImpactDuration &&
		lhs.PusherImpactForce == rhs.PusherImpactForce &&
		lhs.PusherImpactRadius == rhs.PusherImpactRadius &&
		lhs.PusherRadius == rhs.PusherRadius &&
		lhs.Radius == rhs.Radius &&
		lhs.RagdollPush == rhs.RagdollPush &&
		lhs.Scale == rhs.Scale &&
		lhs.ApplyCombatLevelMultipliers == rhs.ApplyCombatLevelMultipliers &&
		lhs.HitOnBounce == rhs.HitOnBounce &&
		lhs.IsAutonomous == rhs.IsAutonomous &&
		lhs.OverrideLightColour == rhs.OverrideLightColour &&
		lhs.ShootableCanOverrideImpact == rhs.ShootableCanOverrideImpact &&
		lhs.UseCustomBulletData == rhs.UseCustomBulletData &&
		lhs.UseDamageNumberData == rhs.UseDamageNumberData &&
		lhs.UsePersistentAudio == rhs.UsePersistentAudio &&
		lhs.UsePusherForImpact == rhs.UsePusherForImpact &&
		lhs.UsePusherForProjectile == rhs.UsePusherForProjectile;
	}
};

//Dependency: GcLaserBeamData
//Dependency: GcProjectileData
struct GcProjectileDataTable
{
	std::vector<NMS_GameComponents::GcLaserBeamData> Lasers;
	std::vector<NMS_GameComponents::GcProjectileData> Table;

	friend bool operator==(const GcProjectileDataTable& lhs, const GcProjectileDataTable& rhs) 
	{
		return lhs.Lasers == rhs.Lasers &&
		lhs.Table == rhs.Table;
	}
};

struct GcMissionConditionAbandonedFreighterExplored
{
	int32_t TargetRooms;

	friend bool operator==(const GcMissionConditionAbandonedFreighterExplored& lhs, const GcMissionConditionAbandonedFreighterExplored& rhs) 
	{
		return lhs.TargetRooms == rhs.TargetRooms;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcSpringLink
{
	enum class PivotAnchorsToEnum : uint32_t
	{
		Itself = 0,
		Parent = 1,
		Node = 2,
		NodeWithAnchor = 3,
	};

	enum class ApplyMotionScaleInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyMotionLimitsInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyAngularMotionScaleInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyAngularLimitsInEnum : uint32_t
	{
		Disabled = 0,
		Itself = 1,
		Parent = 2,
		Component = 3,
	};

	NMS::Vector3f AngularLimitMaxDeg;
	NMS::Vector3f AngularLimitMinDeg;
	NMS::Vector3f AngularMotionLimitBounciness;
	NMS::Vector3f AngularMotionScale;
	NMS::Vector3f CentreOfMassLocal;
	NMS::Vector3f MotionLimitBounciness;
	NMS::Vector3f MotionLimitMax;
	NMS::Vector3f MotionLimitMin;
	NMS::Vector3f MotionScale;
	NMS::Vector3f PivotAnchorLocal;
	NMS::Vector3f PivotLocal;
	std::vector<NMS::NMSString0x40> NodeNames;
	float AirSpeedFromMovementSpeedScale;
	float AngularDampingCriticality;
	float AngularMotionScale_Uniform;
	float AngularNaturalFrequency;
	NMS_GameComponents::GcSpringLink::ApplyAngularLimitsInEnum ApplyAngularLimitsIn;
	NMS_GameComponents::GcSpringLink::ApplyAngularMotionScaleInEnum ApplyAngularMotionScaleIn;
	float ApplyAngularSpringInMovingFrame;
	float ApplyGameGravity;
	float ApplyGameWind;
	float ApplyInfluenceOfTranslationInMovingFrame;
	NMS_GameComponents::GcSpringLink::ApplyMotionLimitsInEnum ApplyMotionLimitsIn;
	NMS_GameComponents::GcSpringLink::ApplyMotionScaleInEnum ApplyMotionScaleIn;
	float DampingCriticality;
	float DistanceWhereRotationMatchesLinear;
	float InfluenceOfTranslation;
	float MotionLimit_MaxDetachmentDistance;
	float MotionScale_Uniform;
	float NaturalFrequency;
	NMS_GameComponents::GcSpringLink::PivotAnchorsToEnum PivotAnchorsTo;
	float SpringHangsDown;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 PivotAnchorNode;
	bool AngularSpringEnabled;
	bool ApplySpringInMovingFrame;
	bool Enabled;
	bool PositionalSpringEnabled;
	bool SpringCollides;
	bool SpringPivots;

	friend bool operator==(const GcSpringLink& lhs, const GcSpringLink& rhs) 
	{
		return lhs.AngularLimitMaxDeg == rhs.AngularLimitMaxDeg &&
		lhs.AngularLimitMinDeg == rhs.AngularLimitMinDeg &&
		lhs.AngularMotionLimitBounciness == rhs.AngularMotionLimitBounciness &&
		lhs.AngularMotionScale == rhs.AngularMotionScale &&
		lhs.CentreOfMassLocal == rhs.CentreOfMassLocal &&
		lhs.MotionLimitBounciness == rhs.MotionLimitBounciness &&
		lhs.MotionLimitMax == rhs.MotionLimitMax &&
		lhs.MotionLimitMin == rhs.MotionLimitMin &&
		lhs.MotionScale == rhs.MotionScale &&
		lhs.PivotAnchorLocal == rhs.PivotAnchorLocal &&
		lhs.PivotLocal == rhs.PivotLocal &&
		lhs.NodeNames == rhs.NodeNames &&
		lhs.AirSpeedFromMovementSpeedScale == rhs.AirSpeedFromMovementSpeedScale &&
		lhs.AngularDampingCriticality == rhs.AngularDampingCriticality &&
		lhs.AngularMotionScale_Uniform == rhs.AngularMotionScale_Uniform &&
		lhs.AngularNaturalFrequency == rhs.AngularNaturalFrequency &&
		lhs.ApplyAngularLimitsIn == rhs.ApplyAngularLimitsIn &&
		lhs.ApplyAngularMotionScaleIn == rhs.ApplyAngularMotionScaleIn &&
		lhs.ApplyAngularSpringInMovingFrame == rhs.ApplyAngularSpringInMovingFrame &&
		lhs.ApplyGameGravity == rhs.ApplyGameGravity &&
		lhs.ApplyGameWind == rhs.ApplyGameWind &&
		lhs.ApplyInfluenceOfTranslationInMovingFrame == rhs.ApplyInfluenceOfTranslationInMovingFrame &&
		lhs.ApplyMotionLimitsIn == rhs.ApplyMotionLimitsIn &&
		lhs.ApplyMotionScaleIn == rhs.ApplyMotionScaleIn &&
		lhs.DampingCriticality == rhs.DampingCriticality &&
		lhs.DistanceWhereRotationMatchesLinear == rhs.DistanceWhereRotationMatchesLinear &&
		lhs.InfluenceOfTranslation == rhs.InfluenceOfTranslation &&
		lhs.MotionLimit_MaxDetachmentDistance == rhs.MotionLimit_MaxDetachmentDistance &&
		lhs.MotionScale_Uniform == rhs.MotionScale_Uniform &&
		lhs.NaturalFrequency == rhs.NaturalFrequency &&
		lhs.PivotAnchorsTo == rhs.PivotAnchorsTo &&
		lhs.SpringHangsDown == rhs.SpringHangsDown &&
		lhs.Name == rhs.Name &&
		lhs.PivotAnchorNode == rhs.PivotAnchorNode &&
		lhs.AngularSpringEnabled == rhs.AngularSpringEnabled &&
		lhs.ApplySpringInMovingFrame == rhs.ApplySpringInMovingFrame &&
		lhs.Enabled == rhs.Enabled &&
		lhs.PositionalSpringEnabled == rhs.PositionalSpringEnabled &&
		lhs.SpringCollides == rhs.SpringCollides &&
		lhs.SpringPivots == rhs.SpringPivots;
	}
};

//Dependency: GcCollisionCapsule
//Dependency: GcSpringLink
//Dependency: NMSString0x40
struct GcSpringComponentData
{
	std::vector<NMS_GameComponents::GcCollisionCapsule> CollisionCapsules;
	std::vector<NMS_GameComponents::GcSpringLink> SpringLinks;
	NMS::NMSString0x40 Name;
	bool Enabled;

	friend bool operator==(const GcSpringComponentData& lhs, const GcSpringComponentData& rhs) 
	{
		return lhs.CollisionCapsules == rhs.CollisionCapsules &&
		lhs.SpringLinks == rhs.SpringLinks &&
		lhs.Name == rhs.Name &&
		lhs.Enabled == rhs.Enabled;
	}
};

struct GcMissionConditionAbandonedMode
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionAbandonedMode& lhs, const GcMissionConditionAbandonedMode& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

struct GcMissionConditionAbandonedOrEmptySystem
{
	enum class MissionSystemTypeEnum : uint32_t
	{
		Either = 0,
		Empty = 1,
		Abandoned = 2,
		SeasonForcedAbandoned = 3,
	};

	NMS_GameComponents::GcMissionConditionAbandonedOrEmptySystem::MissionSystemTypeEnum MissionSystemType;

	friend bool operator==(const GcMissionConditionAbandonedOrEmptySystem& lhs, const GcMissionConditionAbandonedOrEmptySystem& rhs) 
	{
		return lhs.MissionSystemType == rhs.MissionSystemType;
	}
};

struct GcMissionConditionAllMilestonesComplete
{
	int32_t ForStage;
	bool UseSeasonOverrideMessage;

	friend bool operator==(const GcMissionConditionAllMilestonesComplete& lhs, const GcMissionConditionAllMilestonesComplete& rhs) 
	{
		return lhs.ForStage == rhs.ForStage &&
		lhs.UseSeasonOverrideMessage == rhs.UseSeasonOverrideMessage;
	}
};

struct GcMissionConditionAutoPowerEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionAutoPowerEnabled& lhs, const GcMissionConditionAutoPowerEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionBasePartNear
{
	NMS::NMSString0x10 PartID;
	float Distance;
	bool TakeIDFromSeasonData;

	friend bool operator==(const GcMissionConditionBasePartNear& lhs, const GcMissionConditionBasePartNear& rhs) 
	{
		return lhs.PartID == rhs.PartID &&
		lhs.Distance == rhs.Distance &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData;
	}
};

//Dependency: GcInWorldUIScreenData
//Dependency: Vector2f
struct GcProjectorOffsetData
{
	NMS_GameComponents::GcInWorldUIScreenData Active;
	NMS_GameComponents::GcInWorldUIScreenData Inactive;
	NMS::Vector2f ScreenScale;
	float Scale;

	friend bool operator==(const GcProjectorOffsetData& lhs, const GcProjectorOffsetData& rhs) 
	{
		return lhs.Active == rhs.Active &&
		lhs.Inactive == rhs.Inactive &&
		lhs.ScreenScale == rhs.ScreenScale &&
		lhs.Scale == rhs.Scale;
	}
};

struct GcMissionConditionBaseRequiresPower
{
	int32_t MinNumPowerUsingParts;

	friend bool operator==(const GcMissionConditionBaseRequiresPower& lhs, const GcMissionConditionBaseRequiresPower& rhs) 
	{
		return lhs.MinNumPowerUsingParts == rhs.MinNumPowerUsingParts;
	}
};

struct GcMissionConditionBinocsActive
{

	friend bool operator==(const GcMissionConditionBinocsActive& lhs, const GcMissionConditionBinocsActive& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionBlackHolesRevealed
{

	friend bool operator==(const GcMissionConditionBlackHolesRevealed& lhs, const GcMissionConditionBlackHolesRevealed& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionCanMakeItem
{
	NMS::NMSString0x10 TargetItem;
	int32_t Amount;

	friend bool operator==(const GcMissionConditionCanMakeItem& lhs, const GcMissionConditionCanMakeItem& rhs) 
	{
		return lhs.TargetItem == rhs.TargetItem &&
		lhs.Amount == rhs.Amount;
	}
};

struct GcRewardNexus
{
	bool Allow;

	friend bool operator==(const GcRewardNexus& lhs, const GcRewardNexus& rhs) 
	{
		return lhs.Allow == rhs.Allow;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionCanPayCost
{
	NMS::NMSString0x10 CostID;

	friend bool operator==(const GcMissionConditionCanPayCost& lhs, const GcMissionConditionCanPayCost& rhs) 
	{
		return lhs.CostID == rhs.CostID;
	}
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcMissionConditionHasFuel
{
	NMS::NMSString0x10 SpecificTechID;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;
	bool FormatTextAsPercentage;

	friend bool operator==(const GcMissionConditionHasFuel& lhs, const GcMissionConditionHasFuel& rhs) 
	{
		return lhs.SpecificTechID == rhs.SpecificTechID &&
		lhs.Amount == rhs.Amount &&
		lhs.TargetStat == rhs.TargetStat &&
		lhs.FormatTextAsPercentage == rhs.FormatTextAsPercentage;
	}
};

//Dependency: GcInteractionMissionState
//Dependency: NMSString0x20A
struct GcMissionConditionCheckScanEventMissionState
{
	NMS::NMSString0x20A Event;
	NMS_GameComponents::GcInteractionMissionState RequiredState;
	bool AlsoAcceptMaintenanceDone;

	friend bool operator==(const GcMissionConditionCheckScanEventMissionState& lhs, const GcMissionConditionCheckScanEventMissionState& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.RequiredState == rhs.RequiredState &&
		lhs.AlsoAcceptMaintenanceDone == rhs.AlsoAcceptMaintenanceDone;
	}
};

struct GcMissionConditionConvertedFromSeason
{
	int32_t Season;

	friend bool operator==(const GcMissionConditionConvertedFromSeason& lhs, const GcMissionConditionConvertedFromSeason& rhs) 
	{
		return lhs.Season == rhs.Season;
	}
};

struct GcMissionConditionCreatureSummoned
{

	friend bool operator==(const GcMissionConditionCreatureSummoned& lhs, const GcMissionConditionCreatureSummoned& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardActivateEncounterSentinels
{
	NMS::NMSString0x20A EncounterComponentScanEvent;
	NMS::NMSString0x10 EncounterOverride;

	friend bool operator==(const GcRewardActivateEncounterSentinels& lhs, const GcRewardActivateEncounterSentinels& rhs) 
	{
		return lhs.EncounterComponentScanEvent == rhs.EncounterComponentScanEvent &&
		lhs.EncounterOverride == rhs.EncounterOverride;
	}
};

//Dependency: GcPlayerHazardType
struct GcRewardRefreshHazProt
{
	float Amount;
	NMS_GameComponents::GcPlayerHazardType SpecificHazard;
	bool SetNotAdd;
	bool Silent;

	friend bool operator==(const GcRewardRefreshHazProt& lhs, const GcRewardRefreshHazProt& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.SpecificHazard == rhs.SpecificHazard &&
		lhs.SetNotAdd == rhs.SetNotAdd &&
		lhs.Silent == rhs.Silent;
	}
};

struct GcMissionConditionCriticalMissionsDone
{
	bool OnlyCheckSeasonalCriticals;
	bool Warped;

	friend bool operator==(const GcMissionConditionCriticalMissionsDone& lhs, const GcMissionConditionCriticalMissionsDone& rhs) 
	{
		return lhs.OnlyCheckSeasonalCriticals == rhs.OnlyCheckSeasonalCriticals &&
		lhs.Warped == rhs.Warped;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCurrentSlope
{
	float SlopeAngle;
	NMS_Toolkit::TkEqualityEnum Test;
	bool Abs;

	friend bool operator==(const GcMissionConditionCurrentSlope& lhs, const GcMissionConditionCurrentSlope& rhs) 
	{
		return lhs.SlopeAngle == rhs.SlopeAngle &&
		lhs.Test == rhs.Test &&
		lhs.Abs == rhs.Abs;
	}
};

struct GcMissionConditionDamagedFrigateAtHome
{

	friend bool operator==(const GcMissionConditionDamagedFrigateAtHome& lhs, const GcMissionConditionDamagedFrigateAtHome& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionRefinerActive
{
	NMS::NMSString0x20A ActiveRecipe;
	int32_t AmountToMake;
	bool HasFuel;

	friend bool operator==(const GcMissionConditionRefinerActive& lhs, const GcMissionConditionRefinerActive& rhs) 
	{
		return lhs.ActiveRecipe == rhs.ActiveRecipe &&
		lhs.AmountToMake == rhs.AmountToMake &&
		lhs.HasFuel == rhs.HasFuel;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkPhysicsData
{
	float AngularDamping;
	float Friction;
	float Gravity;
	float LinearDamping;
	float Mass;
	float RollingFriction;

	friend bool operator==(const TkPhysicsData& lhs, const TkPhysicsData& rhs) 
	{
		return lhs.AngularDamping == rhs.AngularDamping &&
		lhs.Friction == rhs.Friction &&
		lhs.Gravity == rhs.Gravity &&
		lhs.LinearDamping == rhs.LinearDamping &&
		lhs.Mass == rhs.Mass &&
		lhs.RollingFriction == rhs.RollingFriction;
	}
};

//Dependency: TkAnimationAction
//Dependency: TkAnimationGameData
//Dependency: NMSString0x40
//Dependency: TkAnimationNotify
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkAnimationData
{
	enum class CreatureSizeEnum : uint32_t
	{
		AllSizes = 0,
		SmallOnly = 1,
		LargeOnly = 2,
	};

	enum class AnimTypeEnum : uint32_t
	{
		Loop = 0,
		OneShot = 1,
		OneShotBlendable = 2,
		Control = 3,
	};

	NMS::NMSString0x20A Mask;
	std::vector<NMS_Toolkit::TkAnimationAction> Actions;
	NMS::NMSString0x10 AdditiveBaseAnim;
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x40> ExtraStartNodes;
	NMS::VariableSizeString Filename;
	std::vector<NMS_Toolkit::TkAnimationNotify> Notifies;
	NMS_Toolkit::TkAnimationGameData GameData;
	float ActionFrame;
	float ActionStartFrame;
	float AdditiveBaseFrame;
	NMS_Toolkit::TkAnimationData::AnimTypeEnum AnimType;
	NMS_Toolkit::TkAnimationData::CreatureSizeEnum CreatureSize;
	float Delay;
	int32_t FrameEnd;
	int32_t FrameEndGame;
	int32_t FrameStart;
	float OffsetMax;
	float OffsetMin;
	int32_t Priority;
	float Speed;
	NMS::NMSString0x40 StartNode;
	bool Active;
	bool Additive;
	bool AnimGroupOverride;
	bool Has30HzFrames;
	bool Mirrored;

	friend bool operator==(const TkAnimationData& lhs, const TkAnimationData& rhs) 
	{
		return lhs.Mask == rhs.Mask &&
		lhs.Actions == rhs.Actions &&
		lhs.AdditiveBaseAnim == rhs.AdditiveBaseAnim &&
		lhs.Anim == rhs.Anim &&
		lhs.ExtraStartNodes == rhs.ExtraStartNodes &&
		lhs.Filename == rhs.Filename &&
		lhs.Notifies == rhs.Notifies &&
		lhs.GameData == rhs.GameData &&
		lhs.ActionFrame == rhs.ActionFrame &&
		lhs.ActionStartFrame == rhs.ActionStartFrame &&
		lhs.AdditiveBaseFrame == rhs.AdditiveBaseFrame &&
		lhs.AnimType == rhs.AnimType &&
		lhs.CreatureSize == rhs.CreatureSize &&
		lhs.Delay == rhs.Delay &&
		lhs.FrameEnd == rhs.FrameEnd &&
		lhs.FrameEndGame == rhs.FrameEndGame &&
		lhs.FrameStart == rhs.FrameStart &&
		lhs.OffsetMax == rhs.OffsetMax &&
		lhs.OffsetMin == rhs.OffsetMin &&
		lhs.Priority == rhs.Priority &&
		lhs.Speed == rhs.Speed &&
		lhs.StartNode == rhs.StartNode &&
		lhs.Active == rhs.Active &&
		lhs.Additive == rhs.Additive &&
		lhs.AnimGroupOverride == rhs.AnimGroupOverride &&
		lhs.Has30HzFrames == rhs.Has30HzFrames &&
		lhs.Mirrored == rhs.Mirrored;
	}
};

//Dependency: TkAnimationData
//Dependency: NMSString0x10
struct TkAnimationOverrideList
{
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	NMS::NMSString0x10 Name;

	friend bool operator==(const TkAnimationOverrideList& lhs, const TkAnimationOverrideList& rhs) 
	{
		return lhs.Anims == rhs.Anims &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: TkAnimationData
//Dependency: TkAnimationOverrideList
//Dependency: TkBlendTreeLibrary
struct TkAnimationLibrary
{
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	std::vector<NMS_Toolkit::TkAnimationOverrideList> Overrides;
	NMS_Toolkit::TkBlendTreeLibrary Trees;

	friend bool operator==(const TkAnimationLibrary& lhs, const TkAnimationLibrary& rhs) 
	{
		return lhs.Anims == rhs.Anims &&
		lhs.Overrides == rhs.Overrides &&
		lhs.Trees == rhs.Trees;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionHasGrabbableTarget
{

	friend bool operator==(const GcMissionConditionHasGrabbableTarget& lhs, const GcMissionConditionHasGrabbableTarget& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionSettlementsEnabled
{

	friend bool operator==(const GcMissionConditionSettlementsEnabled& lhs, const GcMissionConditionSettlementsEnabled& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardRechargeTech
{
	NMS::NMSString0x10 TechID;
	bool Silent;

	friend bool operator==(const GcRewardRechargeTech& lhs, const GcRewardRechargeTech& rhs) 
	{
		return lhs.TechID == rhs.TechID &&
		lhs.Silent == rhs.Silent;
	}
};

struct GcMissionConditionEggMachinePageOpen
{

	friend bool operator==(const GcMissionConditionEggMachinePageOpen& lhs, const GcMissionConditionEggMachinePageOpen& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionElevation
{
	float HeightAboveSea;
	bool AllowInShip;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionConditionElevation& lhs, const GcMissionConditionElevation& rhs) 
	{
		return lhs.HeightAboveSea == rhs.HeightAboveSea &&
		lhs.AllowInShip == rhs.AllowInShip &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionExpeditionContainsReward
{
	NMS::NMSString0x10 RewardID;

	friend bool operator==(const GcMissionConditionExpeditionContainsReward& lhs, const GcMissionConditionExpeditionContainsReward& rhs) 
	{
		return lhs.RewardID == rhs.RewardID;
	}
};

//Dependency: NMSString0x80
struct GcWFCDecorationFace
{
	enum class CanWalkEnum : uint32_t
	{
		None = 0,
		RequireCanWalk = 1,
		RequireCanNotWalk = 2,
	};

	NMS_GameComponents::GcWFCDecorationFace::CanWalkEnum CanWalk;
	NMS::NMSString0x80 RequiredFace;

	friend bool operator==(const GcWFCDecorationFace& lhs, const GcWFCDecorationFace& rhs) 
	{
		return lhs.CanWalk == rhs.CanWalk &&
		lhs.RequiredFace == rhs.RequiredFace;
	}
};

//Dependency: GcWeightedResource
//Dependency: GcWFCDecorationFace
//Dependency: NMSString0x10
struct GcWFCDecorationItem
{
	enum class LevelEnum : uint32_t
	{
		Everywhere = 0,
		GroundLevelOnly = 1,
		AboveGroundOnly = 2,
	};

	enum class InsideOutsideEnum : uint32_t
	{
		Both = 0,
		InteriorOnly = 1,
		ExteriorOnly = 2,
	};

	std::vector<NMS::NMSString0x10> ApplicableModules;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	NMS_GameComponents::GcWFCDecorationFace Back;
	NMS_GameComponents::GcWFCDecorationFace Down;
	NMS_GameComponents::GcWFCDecorationFace Forward;
	NMS_GameComponents::GcWFCDecorationFace Left;
	NMS_GameComponents::GcWFCDecorationFace Right;
	NMS_GameComponents::GcWFCDecorationFace Up;
	NMS_GameComponents::GcWFCDecorationItem::InsideOutsideEnum InsideOutside;
	NMS_GameComponents::GcWFCDecorationItem::LevelEnum Level;
	int32_t MaxPerBuilding;
	int32_t MinPerBuilding;
	float NoSceneProbability;
	float RelativeProbability;
	bool DecorationThemes[5];
	bool Include;
	bool IsRoof;
	bool RequireAboveTerrain;
	bool RequireReachable;
	bool Rotate;

	friend bool operator==(const GcWFCDecorationItem& lhs, const GcWFCDecorationItem& rhs) 
	{
		return lhs.ApplicableModules == rhs.ApplicableModules &&
		lhs.Group == rhs.Group &&
		lhs.Name == rhs.Name &&
		lhs.Scenes == rhs.Scenes &&
		lhs.Back == rhs.Back &&
		lhs.Down == rhs.Down &&
		lhs.Forward == rhs.Forward &&
		lhs.Left == rhs.Left &&
		lhs.Right == rhs.Right &&
		lhs.Up == rhs.Up &&
		lhs.InsideOutside == rhs.InsideOutside &&
		lhs.Level == rhs.Level &&
		lhs.MaxPerBuilding == rhs.MaxPerBuilding &&
		lhs.MinPerBuilding == rhs.MinPerBuilding &&
		lhs.NoSceneProbability == rhs.NoSceneProbability &&
		lhs.RelativeProbability == rhs.RelativeProbability &&
		std::equal(std::begin(lhs.DecorationThemes), std::end(lhs.DecorationThemes), std::begin(rhs.DecorationThemes)) &&
		lhs.Include == rhs.Include &&
		lhs.IsRoof == rhs.IsRoof &&
		lhs.RequireAboveTerrain == rhs.RequireAboveTerrain &&
		lhs.RequireReachable == rhs.RequireReachable &&
		lhs.Rotate == rhs.Rotate;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionExpeditionCount
{
	int32_t ExpeditionCount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool ActiveExpeditionsCountAsFueled;
	bool OnlyCountAwaitingDebrief;
	bool OnlyCountIfActive;
	bool OnlyCountIfActiveWithRemainingEvents;
	bool OnlyCountIfFueled;

	friend bool operator==(const GcMissionConditionExpeditionCount& lhs, const GcMissionConditionExpeditionCount& rhs) 
	{
		return lhs.ExpeditionCount == rhs.ExpeditionCount &&
		lhs.Test == rhs.Test &&
		lhs.ActiveExpeditionsCountAsFueled == rhs.ActiveExpeditionsCountAsFueled &&
		lhs.OnlyCountAwaitingDebrief == rhs.OnlyCountAwaitingDebrief &&
		lhs.OnlyCountIfActive == rhs.OnlyCountIfActive &&
		lhs.OnlyCountIfActiveWithRemainingEvents == rhs.OnlyCountIfActiveWithRemainingEvents &&
		lhs.OnlyCountIfFueled == rhs.OnlyCountIfFueled;
	}
};

struct GcMissionConditionExtraSuitSlots
{
	int32_t Count;

	friend bool operator==(const GcMissionConditionExtraSuitSlots& lhs, const GcMissionConditionExtraSuitSlots& rhs) 
	{
		return lhs.Count == rhs.Count;
	}
};

//Dependency: GcMissionFaction
struct GcMissionConditionFactionRank
{
	NMS_GameComponents::GcMissionFaction Faction;
	int32_t Rank;
	bool UseSystemRace;

	friend bool operator==(const GcMissionConditionFactionRank& lhs, const GcMissionConditionFactionRank& rhs) 
	{
		return lhs.Faction == rhs.Faction &&
		lhs.Rank == rhs.Rank &&
		lhs.UseSystemRace == rhs.UseSystemRace;
	}
};

struct GcMissionConditionPirateFreighterSurrendered
{

	friend bool operator==(const GcMissionConditionPirateFreighterSurrendered& lhs, const GcMissionConditionPirateFreighterSurrendered& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionForceHideMultiplayer
{

	friend bool operator==(const GcMissionConditionForceHideMultiplayer& lhs, const GcMissionConditionForceHideMultiplayer& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionHasActiveDetailMessage
{

	friend bool operator==(const GcMissionConditionHasActiveDetailMessage& lhs, const GcMissionConditionHasActiveDetailMessage& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionHasActiveStatsMessage
{

	friend bool operator==(const GcMissionConditionHasActiveStatsMessage& lhs, const GcMissionConditionHasActiveStatsMessage& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionHasAnySettlementBuildingInProgress
{
	bool IgnoreIfTimerActive;

	friend bool operator==(const GcMissionConditionHasAnySettlementBuildingInProgress& lhs, const GcMissionConditionHasAnySettlementBuildingInProgress& rhs) 
	{
		return lhs.IgnoreIfTimerActive == rhs.IgnoreIfTimerActive;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasCommunicatorSignal
{
	NMS::NMSString0x20A SpecificSignalID;
	bool CallMustBePending;
	bool SpecificSignalIsCurrentIntervention;

	friend bool operator==(const GcMissionConditionHasCommunicatorSignal& lhs, const GcMissionConditionHasCommunicatorSignal& rhs) 
	{
		return lhs.SpecificSignalID == rhs.SpecificSignalID &&
		lhs.CallMustBePending == rhs.CallMustBePending &&
		lhs.SpecificSignalIsCurrentIntervention == rhs.SpecificSignalIsCurrentIntervention;
	}
};

struct GcMissionConditionHasCreatureEggItem
{
	enum class EggItemTypeEnum : uint32_t
	{
		Egg = 0,
		ValidCatalyst = 1,
	};

	NMS_GameComponents::GcMissionConditionHasCreatureEggItem::EggItemTypeEnum EggItemType;
	bool IncludeEggMachineInventoryInSearch;

	friend bool operator==(const GcMissionConditionHasCreatureEggItem& lhs, const GcMissionConditionHasCreatureEggItem& rhs) 
	{
		return lhs.EggItemType == rhs.EggItemType &&
		lhs.IncludeEggMachineInventoryInSearch == rhs.IncludeEggMachineInventoryInSearch;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionUnclaimedStageReward
{
	NMS::NMSString0x10 OptionalSpecificProductID;

	friend bool operator==(const GcMissionConditionUnclaimedStageReward& lhs, const GcMissionConditionUnclaimedStageReward& rhs) 
	{
		return lhs.OptionalSpecificProductID == rhs.OptionalSpecificProductID;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasEntitlement
{
	NMS::NMSString0x10 Entitlement;

	friend bool operator==(const GcMissionConditionHasEntitlement& lhs, const GcMissionConditionHasEntitlement& rhs) 
	{
		return lhs.Entitlement == rhs.Entitlement;
	}
};

//Dependency: GcGalaxyStarTypes
struct GcMissionConditionSystemStarClass
{
	NMS_GameComponents::GcGalaxyStarTypes Class;

	friend bool operator==(const GcMissionConditionSystemStarClass& lhs, const GcMissionConditionSystemStarClass& rhs) 
	{
		return lhs.Class == rhs.Class;
	}
};

//Dependency: GcFishData
//Dependency: TkEqualityEnum
struct GcMissionConditionHasFish
{
	NMS_GameComponents::GcFishData TargetFishInfo;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum QualityTest;
	NMS_Toolkit::TkEqualityEnum SizeTest;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionConditionHasFish& lhs, const GcMissionConditionHasFish& rhs) 
	{
		return lhs.TargetFishInfo == rhs.TargetFishInfo &&
		lhs.Amount == rhs.Amount &&
		lhs.QualityTest == rhs.QualityTest &&
		lhs.SizeTest == rhs.SizeTest &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

struct GcMissionConditionHasFuelForTakeoff
{
	bool FormatTextAsPercentage;

	friend bool operator==(const GcMissionConditionHasFuelForTakeoff& lhs, const GcMissionConditionHasFuelForTakeoff& rhs) 
	{
		return lhs.FormatTextAsPercentage == rhs.FormatTextAsPercentage;
	}
};

struct GcRewardTriggerStorm
{
	float Duration;

	friend bool operator==(const GcRewardTriggerStorm& lhs, const GcRewardTriggerStorm& rhs) 
	{
		return lhs.Duration == rhs.Duration;
	}
};

//Dependency: GcMaintenanceElementGroups
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionConditionHasIngredientsForItem
{
	NMS::NMSString0x20A TakeTargetItemsFromScanEvent;
	std::vector<NMS::NMSString0x10> TargetItems;
	int32_t ExpectedTargetItemsFromScanEvent;
	int32_t HorribleJustFormatTargetAmount;
	NMS_GameComponents::GcMaintenanceElementGroups ScanEventTargetGroup;
	bool FormatTextOneReqAtATime;
	bool NeverReturnTrueOnlyUseForFormatting;
	bool Repair;
	bool TakeTargetFromSeasonData;

	friend bool operator==(const GcMissionConditionHasIngredientsForItem& lhs, const GcMissionConditionHasIngredientsForItem& rhs) 
	{
		return lhs.TakeTargetItemsFromScanEvent == rhs.TakeTargetItemsFromScanEvent &&
		lhs.TargetItems == rhs.TargetItems &&
		lhs.ExpectedTargetItemsFromScanEvent == rhs.ExpectedTargetItemsFromScanEvent &&
		lhs.HorribleJustFormatTargetAmount == rhs.HorribleJustFormatTargetAmount &&
		lhs.ScanEventTargetGroup == rhs.ScanEventTargetGroup &&
		lhs.FormatTextOneReqAtATime == rhs.FormatTextOneReqAtATime &&
		lhs.NeverReturnTrueOnlyUseForFormatting == rhs.NeverReturnTrueOnlyUseForFormatting &&
		lhs.Repair == rhs.Repair &&
		lhs.TakeTargetFromSeasonData == rhs.TakeTargetFromSeasonData;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificTechRecipes
{
	NMS::NMSString0x20A SetName;
	NMS::NMSString0x10 DisplayTechId;
	std::vector<NMS::NMSString0x10> TechIds;
	bool Silent;

	friend bool operator==(const GcRewardMultiSpecificTechRecipes& lhs, const GcRewardMultiSpecificTechRecipes& rhs) 
	{
		return lhs.SetName == rhs.SetName &&
		lhs.DisplayTechId == rhs.DisplayTechId &&
		lhs.TechIds == rhs.TechIds &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasItemFromListOfValue
{
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t UnitValue;
	bool UseDefaultAmount;

	friend bool operator==(const GcMissionConditionHasItemFromListOfValue& lhs, const GcMissionConditionHasItemFromListOfValue& rhs) 
	{
		return lhs.ItemList == rhs.ItemList &&
		lhs.UnitValue == rhs.UnitValue &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasMessageWithTitle
{
	NMS::NMSString0x20A TitleLocId;

	friend bool operator==(const GcMissionConditionHasMessageWithTitle& lhs, const GcMissionConditionHasMessageWithTitle& rhs) 
	{
		return lhs.TitleLocId == rhs.TitleLocId;
	}
};

struct GcMissionConditionUsingThirdPersonCamera
{
	enum class UsingCameraModeEnum : uint32_t
	{
		OnFoot = 0,
		Ship = 1,
		Vehicle = 2,
	};

	NMS_GameComponents::GcMissionConditionUsingThirdPersonCamera::UsingCameraModeEnum UsingCameraMode;

	friend bool operator==(const GcMissionConditionUsingThirdPersonCamera& lhs, const GcMissionConditionUsingThirdPersonCamera& rhs) 
	{
		return lhs.UsingCameraMode == rhs.UsingCameraMode;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasMilestoneThatCouldRewardItem
{
	NMS::NMSString0x10 Item;
	NMS::NMSString0x10 Recipe;

	friend bool operator==(const GcMissionConditionHasMilestoneThatCouldRewardItem& lhs, const GcMissionConditionHasMilestoneThatCouldRewardItem& rhs) 
	{
		return lhs.Item == rhs.Item &&
		lhs.Recipe == rhs.Recipe;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasPendingSettlementJudgement
{
	NMS::NMSString0x10 SpecificID;

	friend bool operator==(const GcMissionConditionHasPendingSettlementJudgement& lhs, const GcMissionConditionHasPendingSettlementJudgement& rhs) 
	{
		return lhs.SpecificID == rhs.SpecificID;
	}
};

//Dependency: GcMissionFaction
struct GcMissionConditionHasProcMissionForFaction
{
	NMS_GameComponents::GcMissionFaction Faction;

	friend bool operator==(const GcMissionConditionHasProcMissionForFaction& lhs, const GcMissionConditionHasProcMissionForFaction& rhs) 
	{
		return lhs.Faction == rhs.Faction;
	}
};

//Dependency: GcProceduralProductCategory
//Dependency: GcModularCustomisationResourceType
struct GcMissionConditionHasProcProduct
{
	NMS_GameComponents::GcProceduralProductCategory ProcProduct;
	NMS_GameComponents::GcModularCustomisationResourceType SpecificFossilType;
	bool ForceSearchFreighterAndChests;
	bool SearchEveryShip;

	friend bool operator==(const GcMissionConditionHasProcProduct& lhs, const GcMissionConditionHasProcProduct& rhs) 
	{
		return lhs.ProcProduct == rhs.ProcProduct &&
		lhs.SpecificFossilType == rhs.SpecificFossilType &&
		lhs.ForceSearchFreighterAndChests == rhs.ForceSearchFreighterAndChests &&
		lhs.SearchEveryShip == rhs.SearchEveryShip;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasProcTechnology
{
	NMS::NMSString0x20A ProcTechGroupID;
	int32_t Count;

	friend bool operator==(const GcMissionConditionHasProcTechnology& lhs, const GcMissionConditionHasProcTechnology& rhs) 
	{
		return lhs.ProcTechGroupID == rhs.ProcTechGroupID &&
		lhs.Count == rhs.Count;
	}
};

struct GcModelViews
{
	enum class ModelViewsEnum : uint32_t
	{
		Suit = 0,
		SplitSuit = 1,
		SuitWithCape = 2,
		Weapon = 3,
		Ship = 4,
		SpookShip = 5,
		Vehicle = 6,
		DiscoveryMain = 7,
		DiscoveryThumbnail = 8,
		WonderThumbnail = 9,
		WonderThumbnailCreatureSmall = 10,
		WonderThumbnailCreatureMed = 11,
		WonderThumbnailCreatureLarge = 12,
		WonderThumbnailFloraSmall = 13,
		WonderThumbnailFloraLarge = 14,
		WonderThumbnailMineralSmall = 15,
		WonderThumbnailMineralLarge = 16,
		ToolboxMain = 17,
		ToolboxThumbnail = 18,
		TradeSuit = 19,
		TradeShip = 20,
		TradeCompareShips = 21,
		TradeCompareWeapons = 22,
		HUDThumbnail = 23,
		Interaction = 24,
		Freighter = 25,
		TradeFreighter = 26,
		TradeChest = 27,
		TradeCapsule = 28,
		TradeFrigate = 29,
		TerrainBall = 30,
		FreighterChest = 31,
		Submarine = 32,
		TradeCooker = 33,
		SuitRefiner = 34,
		SuitRefinerWithCape = 35,
		FreighterRepair = 36,
		DiscoveryPlanetaryMapping = 37,
		Mech = 38,
		PetThumbnail = 39,
		PetThumbnailUI = 40,
		PetLarge = 41,
		SquadronPilotLarge = 42,
		SquadronPilotThumbnail = 43,
		SquadronSpaceshipThumbnail = 44,
		VehicleRefiner = 45,
		FishingFloat = 46,
		ModelViewer = 47,
		None = 48,
	};

	NMS_GameComponents::GcModelViews::ModelViewsEnum ModelViews;

	friend bool operator==(const GcModelViews& lhs, const GcModelViews& rhs) 
	{
		return lhs.ModelViews == rhs.ModelViews;
	}
};

//Dependency: GcCurrency
//Dependency: GcInventoryContainer
//Dependency: GcCharacterCustomisationData
//Dependency: GcResourceElement
//Dependency: GcSpaceshipClasses
//Dependency: GcInventoryLayout
//Dependency: GcInventoryLayoutSizeType
//Dependency: GcModelViews
//Dependency: NMSString0x20A
struct GcRewardSpecificShip
{
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcCharacterCustomisationData Customisation;
	NMS_GameComponents::GcResourceElement ShipResource;
	NMS::NMSString0x20A NameOverride;
	NMS_GameComponents::GcInventoryLayout ShipLayout;
	int32_t CostAmount;
	NMS_GameComponents::GcCurrency CostCurrency;
	NMS_GameComponents::GcModelViews ModelViewOverride;
	NMS_GameComponents::GcInventoryLayoutSizeType OverrideSizeType;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	bool FormatAsSeasonal;
	bool IsGift;
	bool IsRewardShip;
	bool UseOverrideSizeType;

	friend bool operator==(const GcRewardSpecificShip& lhs, const GcRewardSpecificShip& rhs) 
	{
		return lhs.ShipInventory == rhs.ShipInventory &&
		lhs.Customisation == rhs.Customisation &&
		lhs.ShipResource == rhs.ShipResource &&
		lhs.NameOverride == rhs.NameOverride &&
		lhs.ShipLayout == rhs.ShipLayout &&
		lhs.CostAmount == rhs.CostAmount &&
		lhs.CostCurrency == rhs.CostCurrency &&
		lhs.ModelViewOverride == rhs.ModelViewOverride &&
		lhs.OverrideSizeType == rhs.OverrideSizeType &&
		lhs.ShipType == rhs.ShipType &&
		lhs.FormatAsSeasonal == rhs.FormatAsSeasonal &&
		lhs.IsGift == rhs.IsGift &&
		lhs.IsRewardShip == rhs.IsRewardShip &&
		lhs.UseOverrideSizeType == rhs.UseOverrideSizeType;
	}
};

//Dependency: GcBuildingClassification
struct GcMissionConditionHasSettlementBuilding
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	bool RequireComplete;

	friend bool operator==(const GcMissionConditionHasSettlementBuilding& lhs, const GcMissionConditionHasSettlementBuilding& rhs) 
	{
		return lhs.BuildingClass == rhs.BuildingClass &&
		lhs.RequireComplete == rhs.RequireComplete;
	}
};

struct GcMissionConditionHasSettlementProductPending
{

	friend bool operator==(const GcMissionConditionHasSettlementProductPending& lhs, const GcMissionConditionHasSettlementProductPending& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionHasSpareProcTech
{

	friend bool operator==(const GcMissionConditionHasSpareProcTech& lhs, const GcMissionConditionHasSpareProcTech& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionHasTechnology
{
	NMS::NMSString0x10 Technology;
	bool AllowPartiallyInstalled;
	bool TakeTechFromSeasonData;
	bool TeachIfNotKnown;

	friend bool operator==(const GcMissionConditionHasTechnology& lhs, const GcMissionConditionHasTechnology& rhs) 
	{
		return lhs.Technology == rhs.Technology &&
		lhs.AllowPartiallyInstalled == rhs.AllowPartiallyInstalled &&
		lhs.TakeTechFromSeasonData == rhs.TakeTechFromSeasonData &&
		lhs.TeachIfNotKnown == rhs.TeachIfNotKnown;
	}
};

struct GcMissionConditionHasTwitchReward
{

	friend bool operator==(const GcMissionConditionHasTwitchReward& lhs, const GcMissionConditionHasTwitchReward& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardSpecificTech
{
	NMS::NMSString0x10 TechId;
	bool AutoPin;
	bool HideInSeasonRewards;
	bool Silent;

	friend bool operator==(const GcRewardSpecificTech& lhs, const GcRewardSpecificTech& rhs) 
	{
		return lhs.TechId == rhs.TechId &&
		lhs.AutoPin == rhs.AutoPin &&
		lhs.HideInSeasonRewards == rhs.HideInSeasonRewards &&
		lhs.Silent == rhs.Silent;
	}
};

struct GcSaveContextQuery
{
	enum class SaveContextQueryEnum : uint32_t
	{
		DontCare = 0,
		Season = 1,
		Main = 2,
		NoSeason = 3,
		NoMain = 4,
	};

	NMS_GameComponents::GcSaveContextQuery::SaveContextQueryEnum SaveContextQuery;

	friend bool operator==(const GcSaveContextQuery& lhs, const GcSaveContextQuery& rhs) 
	{
		return lhs.SaveContextQuery == rhs.SaveContextQuery;
	}
};

//Dependency: GcSaveContextQuery
struct GcMissionConditionHasValidSaveContext
{
	NMS_GameComponents::GcSaveContextQuery CurrentContext;
	NMS_GameComponents::GcSaveContextQuery DesiredContext;

	friend bool operator==(const GcMissionConditionHasValidSaveContext& lhs, const GcMissionConditionHasValidSaveContext& rhs) 
	{
		return lhs.CurrentContext == rhs.CurrentContext &&
		lhs.DesiredContext == rhs.DesiredContext;
	}
};

struct GcMissionConditionHasWeapons
{
	enum class WeaponTestEnum : uint32_t
	{
		CombatPrimaryEquipped = 0,
		CombatSecondaryEquipped = 1,
		CombatPrimaryInstalled = 2,
		CombatSecondaryInstalled = 3,
		ExocraftCombatInstalled = 4,
		ExocraftCombatActive = 5,
	};

	int32_t CountForInstalledTests;
	NMS_GameComponents::GcMissionConditionHasWeapons::WeaponTestEnum WeaponTest;

	friend bool operator==(const GcMissionConditionHasWeapons& lhs, const GcMissionConditionHasWeapons& rhs) 
	{
		return lhs.CountForInstalledTests == rhs.CountForInstalledTests &&
		lhs.WeaponTest == rhs.WeaponTest;
	}
};

//Dependency: GcPlayerHazardType
//Dependency: TkEqualityEnum
struct GcMissionConditionHazardLevel
{
	int32_t Level;
	NMS_GameComponents::GcPlayerHazardType SpecificHazard;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionHazardLevel& lhs, const GcMissionConditionHazardLevel& rhs) 
	{
		return lhs.Level == rhs.Level &&
		lhs.SpecificHazard == rhs.SpecificHazard &&
		lhs.Test == rhs.Test;
	}
};

struct GcMissionConditionHazardsEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionHazardsEnabled& lhs, const GcMissionConditionHazardsEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionInCombat
{
	enum class CombatTypeEnum : uint32_t
	{
		GroundCombat = 0,
		SpaceCombat = 1,
		FiendCombat = 2,
		BigFishFiendCombat = 3,
		CorruptedSentinelCombat = 4,
		GroundWormCombat = 5,
		RewardEncounter = 6,
		BugQueen = 7,
		JellyBoss = 8,
	};

	NMS::NMSString0x20A OverrideOSDMessage;
	NMS_GameComponents::GcMissionConditionInCombat::CombatTypeEnum CombatType;
	bool CheckAllFireteamMembers;
	bool EncouragesFightingSentinels;
	bool SpaceCombatTextCountsPirates;
	bool SpaceCombatTextCountsSentinels;

	friend bool operator==(const GcMissionConditionInCombat& lhs, const GcMissionConditionInCombat& rhs) 
	{
		return lhs.OverrideOSDMessage == rhs.OverrideOSDMessage &&
		lhs.CombatType == rhs.CombatType &&
		lhs.CheckAllFireteamMembers == rhs.CheckAllFireteamMembers &&
		lhs.EncouragesFightingSentinels == rhs.EncouragesFightingSentinels &&
		lhs.SpaceCombatTextCountsPirates == rhs.SpaceCombatTextCountsPirates &&
		lhs.SpaceCombatTextCountsSentinels == rhs.SpaceCombatTextCountsSentinels;
	}
};

struct GcMissionConditionInMultiplayer
{
	bool MustBeInFireteam;

	friend bool operator==(const GcMissionConditionInMultiplayer& lhs, const GcMissionConditionInMultiplayer& rhs) 
	{
		return lhs.MustBeInFireteam == rhs.MustBeInFireteam;
	}
};

//Dependency: GcProceduralProductData
struct GcProceduralProductTable
{
	NMS_GameComponents::GcProceduralProductData Table[28];

	friend bool operator==(const GcProceduralProductTable& lhs, const GcProceduralProductTable& rhs) 
	{
		return std::equal(std::begin(lhs.Table), std::end(lhs.Table), std::begin(rhs.Table));
	}
};

struct GcMissionConditionInSeasonalUA
{
	int32_t SpecificRendevousPlanetIndex;
	bool CompleteIfRendezvousDone;
	bool SpecificIndexOnlyNeedsToMatchSystem;
	bool TakeIndexFromMilestoneStage;
	bool TakeIndexFromSeasonData;

	friend bool operator==(const GcMissionConditionInSeasonalUA& lhs, const GcMissionConditionInSeasonalUA& rhs) 
	{
		return lhs.SpecificRendevousPlanetIndex == rhs.SpecificRendevousPlanetIndex &&
		lhs.CompleteIfRendezvousDone == rhs.CompleteIfRendezvousDone &&
		lhs.SpecificIndexOnlyNeedsToMatchSystem == rhs.SpecificIndexOnlyNeedsToMatchSystem &&
		lhs.TakeIndexFromMilestoneStage == rhs.TakeIndexFromMilestoneStage &&
		lhs.TakeIndexFromSeasonData == rhs.TakeIndexFromSeasonData;
	}
};

//Dependency: NMSString0x100
struct GcMissionConditionInUA
{
	NMS::NMSString0x100 UA;

	friend bool operator==(const GcMissionConditionInUA& lhs, const GcMissionConditionInUA& rhs) 
	{
		return lhs.UA == rhs.UA;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceExploreAbandonedFreighter
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Timer;
	bool RequireAllRoomsDone;

	friend bool operator==(const GcMissionSequenceExploreAbandonedFreighter& lhs, const GcMissionSequenceExploreAbandonedFreighter& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Timer == rhs.Timer &&
		lhs.RequireAllRoomsDone == rhs.RequireAllRoomsDone;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcMissionConditionInteractionIndexChanged
{
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcMissionConditionInteractionIndexChanged& lhs, const GcMissionConditionInteractionIndexChanged& rhs) 
	{
		return lhs.InteractionType == rhs.InteractionType &&
		lhs.Race == rhs.Race;
	}
};

struct GcMissionConditionInventoryOpen
{

	friend bool operator==(const GcMissionConditionInventoryOpen& lhs, const GcMissionConditionInventoryOpen& rhs) 
	{
		return true;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionInventorySlots
{
	enum class SlotTypeEnum : uint32_t
	{
		FreeSlot = 0,
		BrokenSlot = 1,
	};

	enum class InventoryTestEnum : uint32_t
	{
		Current = 0,
		Personal = 1,
		Ship = 2,
		Vehicle = 3,
		Weapon = 4,
	};

	NMS_GameComponents::GcMissionConditionInventorySlots::InventoryTestEnum InventoryTest;
	int32_t SlotsFree;
	NMS_GameComponents::GcMissionConditionInventorySlots::SlotTypeEnum SlotType;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TestAllSlotsUnlocked;
	bool TestOnlyMainInventory;

	friend bool operator==(const GcMissionConditionInventorySlots& lhs, const GcMissionConditionInventorySlots& rhs) 
	{
		return lhs.InventoryTest == rhs.InventoryTest &&
		lhs.SlotsFree == rhs.SlotsFree &&
		lhs.SlotType == rhs.SlotType &&
		lhs.Test == rhs.Test &&
		lhs.TestAllSlotsUnlocked == rhs.TestAllSlotsUnlocked &&
		lhs.TestOnlyMainInventory == rhs.TestOnlyMainInventory;
	}
};

struct GcMissionConditionIsAbandFreighterDoorOpen
{
	enum class AbandonedFreighterDoorStatusEnum : uint32_t
	{
		DungeonNotReady = 0,
		Locked = 1,
		Opening = 2,
		Open = 3,
	};

	NMS_GameComponents::GcMissionConditionIsAbandFreighterDoorOpen::AbandonedFreighterDoorStatusEnum AbandonedFreighterDoorStatus;

	friend bool operator==(const GcMissionConditionIsAbandFreighterDoorOpen& lhs, const GcMissionConditionIsAbandFreighterDoorOpen& rhs) 
	{
		return lhs.AbandonedFreighterDoorStatus == rhs.AbandonedFreighterDoorStatus;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkProceduralModelList
{
	NMS::NMSString0x10 Id;
	std::vector<NMS::VariableSizeString> List;

	friend bool operator==(const TkProceduralModelList& lhs, const TkProceduralModelList& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.List == rhs.List;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcTradeData
struct GcTradeSettings
{
	NMS_GameComponents::GcTradeData BoneShop;
	NMS_GameComponents::GcTradeData BuilderShop;
	NMS_GameComponents::GcTradeData ExpShip;
	NMS_GameComponents::GcTradeData IllegalProds;
	NMS_GameComponents::GcTradeData LoneExp;
	NMS_GameComponents::GcTradeData LoneTra;
	NMS_GameComponents::GcTradeData LoneWar;
	NMS_GameComponents::GcTradeData MapShop;
	NMS_GameComponents::GcTradeData NexusTechSpecialist;
	NMS_GameComponents::GcTradeData PirateTech;
	NMS_GameComponents::GcTradeData PirateVisitor;
	NMS_GameComponents::GcTradeData Scrap;
	NMS_GameComponents::GcTradeData SeasonRewardsShop;
	NMS_GameComponents::GcTradeData Ship;
	NMS_GameComponents::GcTradeData ShipTechSpecialist;
	NMS_GameComponents::GcTradeData Shop;
	NMS_GameComponents::GcTradeData SmugglerStation;
	NMS_GameComponents::GcTradeData SpaceStation;
	NMS_GameComponents::GcTradeData SuitTechSpecialist;
	NMS_GameComponents::GcTradeData TechShop;
	NMS_GameComponents::GcTradeData TraShip;
	NMS_GameComponents::GcTradeData VehicleTechSpecialist;
	NMS_GameComponents::GcTradeData WarShip;
	NMS_GameComponents::GcTradeData WeapTechSpecialist;

	friend bool operator==(const GcTradeSettings& lhs, const GcTradeSettings& rhs) 
	{
		return lhs.BoneShop == rhs.BoneShop &&
		lhs.BuilderShop == rhs.BuilderShop &&
		lhs.ExpShip == rhs.ExpShip &&
		lhs.IllegalProds == rhs.IllegalProds &&
		lhs.LoneExp == rhs.LoneExp &&
		lhs.LoneTra == rhs.LoneTra &&
		lhs.LoneWar == rhs.LoneWar &&
		lhs.MapShop == rhs.MapShop &&
		lhs.NexusTechSpecialist == rhs.NexusTechSpecialist &&
		lhs.PirateTech == rhs.PirateTech &&
		lhs.PirateVisitor == rhs.PirateVisitor &&
		lhs.Scrap == rhs.Scrap &&
		lhs.SeasonRewardsShop == rhs.SeasonRewardsShop &&
		lhs.Ship == rhs.Ship &&
		lhs.ShipTechSpecialist == rhs.ShipTechSpecialist &&
		lhs.Shop == rhs.Shop &&
		lhs.SmugglerStation == rhs.SmugglerStation &&
		lhs.SpaceStation == rhs.SpaceStation &&
		lhs.SuitTechSpecialist == rhs.SuitTechSpecialist &&
		lhs.TechShop == rhs.TechShop &&
		lhs.TraShip == rhs.TraShip &&
		lhs.VehicleTechSpecialist == rhs.VehicleTechSpecialist &&
		lhs.WarShip == rhs.WarShip &&
		lhs.WeapTechSpecialist == rhs.WeapTechSpecialist;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcRealityIcon
{
	NMS::NMSString0x20A ID;
	NMS_Toolkit::TkTextureResource Texture;

	friend bool operator==(const GcRealityIcon& lhs, const GcRealityIcon& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.Texture == rhs.Texture;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcPlanetResourceIconLookup
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource IconBinocs;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcPlanetResourceIconLookup& lhs, const GcPlanetResourceIconLookup& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.IconBinocs == rhs.IconBinocs &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: GcRealityIcon
//Dependency: GcPlanetResourceIconLookup
//Dependency: TkTextureResource
struct GcRealityIconTable
{
	NMS_Toolkit::TkTextureResource GameIcons[112];
	NMS_Toolkit::TkTextureResource BinocularDiscoveryIcons[17];
	NMS_Toolkit::TkTextureResource ProductCategoryIcons[11];
	NMS_Toolkit::TkTextureResource MissionFactionIcons[10];
	NMS_Toolkit::TkTextureResource DiscoveryPageRaceIcons[9];
	NMS_Toolkit::TkTextureResource SubstanceCategoryIcons[9];
	NMS_Toolkit::TkTextureResource DifficultyPresetIcons[7];
	NMS_Toolkit::TkTextureResource DiscoveryPageTradingIcons[7];
	NMS_Toolkit::TkTextureResource HazardIcons[7];
	NMS_Toolkit::TkTextureResource HazardIconsHUD[7];
	NMS_Toolkit::TkTextureResource OptionsUIHeaderIcons[6];
	NMS_Toolkit::TkTextureResource InventoryFilterIcons[5];
	NMS_Toolkit::TkTextureResource DifficultyUIOptionIcons[4];
	NMS_Toolkit::TkTextureResource DiscoveryPageConflictIcons[4];
	std::vector<NMS_GameComponents::GcRealityIcon> MissionDetailIcons;
	NMS_Toolkit::TkTextureResource DiscoveryPageConflictUnknown;
	NMS_Toolkit::TkTextureResource DiscoveryPageRaceUnknown;
	NMS_Toolkit::TkTextureResource DiscoveryPageTradingUnknown;
	std::vector<NMS_GameComponents::GcPlanetResourceIconLookup> PlanetResourceIconLookups;
	std::vector<NMS_Toolkit::TkTextureResource> RepairTechIcons;
	std::vector<NMS_GameComponents::GcPlanetResourceIconLookup> TerrainIconLookups;

	friend bool operator==(const GcRealityIconTable& lhs, const GcRealityIconTable& rhs) 
	{
		return std::equal(std::begin(lhs.GameIcons), std::end(lhs.GameIcons), std::begin(rhs.GameIcons)) &&
		std::equal(std::begin(lhs.BinocularDiscoveryIcons), std::end(lhs.BinocularDiscoveryIcons), std::begin(rhs.BinocularDiscoveryIcons)) &&
		std::equal(std::begin(lhs.ProductCategoryIcons), std::end(lhs.ProductCategoryIcons), std::begin(rhs.ProductCategoryIcons)) &&
		std::equal(std::begin(lhs.MissionFactionIcons), std::end(lhs.MissionFactionIcons), std::begin(rhs.MissionFactionIcons)) &&
		std::equal(std::begin(lhs.DiscoveryPageRaceIcons), std::end(lhs.DiscoveryPageRaceIcons), std::begin(rhs.DiscoveryPageRaceIcons)) &&
		std::equal(std::begin(lhs.SubstanceCategoryIcons), std::end(lhs.SubstanceCategoryIcons), std::begin(rhs.SubstanceCategoryIcons)) &&
		std::equal(std::begin(lhs.DifficultyPresetIcons), std::end(lhs.DifficultyPresetIcons), std::begin(rhs.DifficultyPresetIcons)) &&
		std::equal(std::begin(lhs.DiscoveryPageTradingIcons), std::end(lhs.DiscoveryPageTradingIcons), std::begin(rhs.DiscoveryPageTradingIcons)) &&
		std::equal(std::begin(lhs.HazardIcons), std::end(lhs.HazardIcons), std::begin(rhs.HazardIcons)) &&
		std::equal(std::begin(lhs.HazardIconsHUD), std::end(lhs.HazardIconsHUD), std::begin(rhs.HazardIconsHUD)) &&
		std::equal(std::begin(lhs.OptionsUIHeaderIcons), std::end(lhs.OptionsUIHeaderIcons), std::begin(rhs.OptionsUIHeaderIcons)) &&
		std::equal(std::begin(lhs.InventoryFilterIcons), std::end(lhs.InventoryFilterIcons), std::begin(rhs.InventoryFilterIcons)) &&
		std::equal(std::begin(lhs.DifficultyUIOptionIcons), std::end(lhs.DifficultyUIOptionIcons), std::begin(rhs.DifficultyUIOptionIcons)) &&
		std::equal(std::begin(lhs.DiscoveryPageConflictIcons), std::end(lhs.DiscoveryPageConflictIcons), std::begin(rhs.DiscoveryPageConflictIcons)) &&
		lhs.MissionDetailIcons == rhs.MissionDetailIcons &&
		lhs.DiscoveryPageConflictUnknown == rhs.DiscoveryPageConflictUnknown &&
		lhs.DiscoveryPageRaceUnknown == rhs.DiscoveryPageRaceUnknown &&
		lhs.DiscoveryPageTradingUnknown == rhs.DiscoveryPageTradingUnknown &&
		lhs.PlanetResourceIconLookups == rhs.PlanetResourceIconLookups &&
		lhs.RepairTechIcons == rhs.RepairTechIcons &&
		lhs.TerrainIconLookups == rhs.TerrainIconLookups;
	}
};

//Dependency: GcRemoteWeapons
//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcShipWeaponData
{
	NMS::NMSString0x10 Projectile;
	NMS::NMSString0x10 Reticle;
	float AutoAimAngle;
	float AutoAimExtraAngle;
	float CoolRate;
	float OverheatCoolTime;
	NMS_GameComponents::GcRemoteWeapons RemoteType;
	NMS_GameComponents::GcStatsTypes Stat;
	bool IsProjectile;
	bool ShowOverheatSwitch;

	friend bool operator==(const GcShipWeaponData& lhs, const GcShipWeaponData& rhs) 
	{
		return lhs.Projectile == rhs.Projectile &&
		lhs.Reticle == rhs.Reticle &&
		lhs.AutoAimAngle == rhs.AutoAimAngle &&
		lhs.AutoAimExtraAngle == rhs.AutoAimExtraAngle &&
		lhs.CoolRate == rhs.CoolRate &&
		lhs.OverheatCoolTime == rhs.OverheatCoolTime &&
		lhs.RemoteType == rhs.RemoteType &&
		lhs.Stat == rhs.Stat &&
		lhs.IsProjectile == rhs.IsProjectile &&
		lhs.ShowOverheatSwitch == rhs.ShowOverheatSwitch;
	}
};

//Dependency: NMSString0x10
struct GcTechList
{
	std::vector<NMS::NMSString0x10> AvailableTech;

	friend bool operator==(const GcTechList& lhs, const GcTechList& rhs) 
	{
		return lhs.AvailableTech == rhs.AvailableTech;
	}
};

//Dependency: GcStatsTypes
//Dependency: Colour
//Dependency: NMSString0x10
struct GcStatsEntry
{
	NMS::Colour Colour;
	NMS::NMSString0x10 BaseTechID;
	float RangeMax;
	float RangeMin;
	NMS_GameComponents::GcStatsTypes Type;
	bool LessIsBetter;

	friend bool operator==(const GcStatsEntry& lhs, const GcStatsEntry& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.BaseTechID == rhs.BaseTechID &&
		lhs.RangeMax == rhs.RangeMax &&
		lhs.RangeMin == rhs.RangeMin &&
		lhs.Type == rhs.Type &&
		lhs.LessIsBetter == rhs.LessIsBetter;
	}
};

//Dependency: GcStatsEntry
//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcStatsGroup
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcStatsEntry> StatIds;

	friend bool operator==(const GcStatsGroup& lhs, const GcStatsGroup& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.Id == rhs.Id &&
		lhs.StatIds == rhs.StatIds;
	}
};

//Dependency: GcStatsGroup
struct GcStats
{
	std::vector<NMS_GameComponents::GcStatsGroup> Stats;

	friend bool operator==(const GcStats& lhs, const GcStats& rhs) 
	{
		return lhs.Stats == rhs.Stats;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkIdArray
{
	std::vector<NMS::NMSString0x10> Array;

	friend bool operator==(const TkIdArray& lhs, const TkIdArray& rhs) 
	{
		return lhs.Array == rhs.Array;
	}
};

struct TkRawID
{
	uint64_t Value0;
	uint64_t Value1;

	friend bool operator==(const TkRawID& lhs, const TkRawID& rhs) 
	{
		return lhs.Value0 == rhs.Value0 &&
		lhs.Value1 == rhs.Value1;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcRepShopData
//Dependency: GcPlayerWeaponData
//Dependency: GcTradeSettings
//Dependency: GcFiendCrimeSpawnTable
//Dependency: GcRealityIconTable
//Dependency: GcNumberedTextList
//Dependency: GcSubstanceSecondaryBiome
//Dependency: GcShipWeaponData
//Dependency: GcTechList
//Dependency: GcStats
//Dependency: GcAlienPuzzleTableIndex
//Dependency: GcInventoryLayout
//Dependency: TkCurveType
//Dependency: GcRewardMissionOverride
//Dependency: GcFreighterCargoOption
//Dependency: GcDamageMultiplierLookup
//Dependency: GcIDPair
//Dependency: GcSubstanceSecondaryLookup
//Dependency: GcMinMaxFloat
//Dependency: VariableSizeString
//Dependency: GcDiscoveryWorth
//Dependency: TkTextureResource
//Dependency: TkIdArray
//Dependency: TkRawID
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRealityManagerData
{
	enum class StatsEnum : uint32_t
	{
		Suit = 0,
		Weapon = 1,
		Ship = 2,
		Freighter = 3,
		Vehicle = 4,
	};

	NMS::Colour SubstanceCategoryColours[9];
	NMS::Colour HazardColours[7];
	NMS::Colour RarityColours[3];
	NMS_GameComponents::GcTradeSettings TradeSettings;
	NMS_GameComponents::GcRealityIconTable Icons;
	NMS_Toolkit::TkTextureResource StatCategoryIcons[203];
	NMS_Toolkit::TkTextureResource StatTechPackageIcons[203];
	NMS_GameComponents::GcNumberedTextList MissionNameAdjectives[23];
	NMS_GameComponents::GcNumberedTextList MissionNameFormats[23];
	NMS_GameComponents::GcNumberedTextList MissionNameNouns[23];
	NMS_GameComponents::GcSubstanceSecondaryBiome SubstanceSecondaryBiome;
	NMS_GameComponents::GcShipWeaponData ShipWeapons[7];
	NMS::NMSString0x20A FactionNames[10];
	NMS_GameComponents::GcPlayerWeaponData PlayerWeapons[20];
	NMS_GameComponents::GcRepShopData RepShops[10];
	NMS_GameComponents::GcTechList PlanetTechShops[17];
	NMS_GameComponents::GcNumberedTextList FactionClients[10];
	NMS_Toolkit::TkTextureResource SubstanceChargeIcons[9];
	NMS_Toolkit::TkIdArray MissionBoardRewardOptions[11];
	NMS::NMSString0x10 FactionStandingIDs[10];
	NMS_Toolkit::TkIdArray DefaultVehicleLoadout[7];
	NMS::VariableSizeString Catalogues[5];
	NMS_GameComponents::GcStats Stats[5];
	NMS::VariableSizeString ProductTables[3];
	NMS_GameComponents::GcInventoryLayout ShipCargoOnlyStartingLayout;
	NMS_GameComponents::GcInventoryLayout ShipStartingLayout;
	NMS_GameComponents::GcInventoryLayout ShipTechOnlyStartingLayout;
	NMS_GameComponents::GcInventoryLayout SuitCargoStartingSlotLayout;
	NMS_GameComponents::GcInventoryLayout SuitStartingSlotLayout;
	NMS_GameComponents::GcInventoryLayout SuitTechOnlyStartingSlotLayout;
	std::vector<NMS::VariableSizeString> AlienPuzzleTables;
	NMS::VariableSizeString AlienWordsTable;
	NMS::VariableSizeString BaitDataTable;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> BuilderMissionRewardOverrides;
	NMS::VariableSizeString CombatEffectsTable;
	NMS::VariableSizeString ConsumableItemTable;
	NMS::VariableSizeString CostTable;
	std::vector<NMS_GameComponents::GcDamageMultiplierLookup> DamageMultiplierTable;
	NMS::VariableSizeString DamageTable;
	NMS::VariableSizeString DialogClearanceTable;
	NMS::VariableSizeString DiscoveryRewardTable;
	std::vector<NMS_GameComponents::GcFiendCrimeSpawnTable> FiendCrimeSpawnTable;
	NMS::VariableSizeString FishDataTable;
	std::vector<NMS_GameComponents::GcIDPair> FreighterBaseItemPairs;
	std::vector<NMS_GameComponents::GcFreighterCargoOption> FreighterCargoOptions;
	NMS::VariableSizeString HistoricalSeasonDataTable;
	NMS::VariableSizeString InventoryTable;
	NMS::VariableSizeString LegacyItemConversionTable;
	std::vector<NMS_Toolkit::TkRawID> LegacyRepairTable;
	NMS::VariableSizeString MaintenanceGroupsTable;
	NMS::VariableSizeString MaintenanceOverrideTable;
	std::vector<NMS::NMSString0x10> NeverOfferedForSale;
	std::vector<NMS::NMSString0x10> NeverSellableItems;
	std::vector<NMS::NMSString0x10> PirateStationExtraProds;
	NMS::VariableSizeString PlayerWeaponPropertiesTable;
	NMS::VariableSizeString ProceduralProductTable;
	NMS::VariableSizeString ProceduralTechnologyTable;
	NMS::VariableSizeString ProductDescriptionOverrideTable;
	NMS::VariableSizeString PurchaseableBuildingBlueprintsTable;
	NMS::VariableSizeString PurchaseableSpecialsTable;
	NMS::VariableSizeString RecipeTable;
	NMS::VariableSizeString RewardTable;
	NMS::VariableSizeString SettlementPerksTable;
	NMS_GameComponents::GcTechList StationTechShops;
	NMS::VariableSizeString StatRewardsTable;
	NMS::VariableSizeString StoriesTable;
	std::vector<NMS_GameComponents::GcSubstanceSecondaryLookup> SubstanceSecondaryLookups;
	NMS::VariableSizeString SubstanceTable;
	std::vector<int32_t> SuitCargoUpgradePrices;
	std::vector<int32_t> SuitTechOnlyUpgradePrices;
	std::vector<int32_t> SuitUpgradePrices;
	NMS::VariableSizeString TechBoxTable;
	NMS::VariableSizeString TechnologyTable;
	NMS::VariableSizeString TradingClassDataTable;
	NMS::VariableSizeString TradingCostTable;
	NMS::VariableSizeString UnlockableItemTrees;
	NMS::VariableSizeString UnlockablePlatformRewardsTable;
	NMS::VariableSizeString UnlockableSeasonRewardsTable;
	NMS::VariableSizeString UnlockableTwitchRewardsTable;
	NMS_GameComponents::GcMinMaxFloat FoodStatValues[203];
	NMS_GameComponents::GcAlienPuzzleTableIndex InteractionPuzzlesIndexTypes[149];
	NMS_GameComponents::GcDiscoveryWorth DiscoveryWorth[17];
	float NormalisedPriceLimits[5];
	float CreatureDiscoverySizeMultiplier[4];
	float WeightedTextWeights[3];
	uint16_t HomeRealityIteration;
	uint16_t RealityIteration;
	bool LoopInteractionPuzzles[149];
	NMS_Toolkit::TkCurveType WeightingCurves[7];

	friend bool operator==(const GcRealityManagerData& lhs, const GcRealityManagerData& rhs) 
	{
		return std::equal(std::begin(lhs.SubstanceCategoryColours), std::end(lhs.SubstanceCategoryColours), std::begin(rhs.SubstanceCategoryColours)) &&
		std::equal(std::begin(lhs.HazardColours), std::end(lhs.HazardColours), std::begin(rhs.HazardColours)) &&
		std::equal(std::begin(lhs.RarityColours), std::end(lhs.RarityColours), std::begin(rhs.RarityColours)) &&
		lhs.TradeSettings == rhs.TradeSettings &&
		lhs.Icons == rhs.Icons &&
		std::equal(std::begin(lhs.StatCategoryIcons), std::end(lhs.StatCategoryIcons), std::begin(rhs.StatCategoryIcons)) &&
		std::equal(std::begin(lhs.StatTechPackageIcons), std::end(lhs.StatTechPackageIcons), std::begin(rhs.StatTechPackageIcons)) &&
		std::equal(std::begin(lhs.MissionNameAdjectives), std::end(lhs.MissionNameAdjectives), std::begin(rhs.MissionNameAdjectives)) &&
		std::equal(std::begin(lhs.MissionNameFormats), std::end(lhs.MissionNameFormats), std::begin(rhs.MissionNameFormats)) &&
		std::equal(std::begin(lhs.MissionNameNouns), std::end(lhs.MissionNameNouns), std::begin(rhs.MissionNameNouns)) &&
		lhs.SubstanceSecondaryBiome == rhs.SubstanceSecondaryBiome &&
		std::equal(std::begin(lhs.ShipWeapons), std::end(lhs.ShipWeapons), std::begin(rhs.ShipWeapons)) &&
		std::equal(std::begin(lhs.FactionNames), std::end(lhs.FactionNames), std::begin(rhs.FactionNames)) &&
		std::equal(std::begin(lhs.PlayerWeapons), std::end(lhs.PlayerWeapons), std::begin(rhs.PlayerWeapons)) &&
		std::equal(std::begin(lhs.RepShops), std::end(lhs.RepShops), std::begin(rhs.RepShops)) &&
		std::equal(std::begin(lhs.PlanetTechShops), std::end(lhs.PlanetTechShops), std::begin(rhs.PlanetTechShops)) &&
		std::equal(std::begin(lhs.FactionClients), std::end(lhs.FactionClients), std::begin(rhs.FactionClients)) &&
		std::equal(std::begin(lhs.SubstanceChargeIcons), std::end(lhs.SubstanceChargeIcons), std::begin(rhs.SubstanceChargeIcons)) &&
		std::equal(std::begin(lhs.MissionBoardRewardOptions), std::end(lhs.MissionBoardRewardOptions), std::begin(rhs.MissionBoardRewardOptions)) &&
		std::equal(std::begin(lhs.FactionStandingIDs), std::end(lhs.FactionStandingIDs), std::begin(rhs.FactionStandingIDs)) &&
		std::equal(std::begin(lhs.DefaultVehicleLoadout), std::end(lhs.DefaultVehicleLoadout), std::begin(rhs.DefaultVehicleLoadout)) &&
		std::equal(std::begin(lhs.Catalogues), std::end(lhs.Catalogues), std::begin(rhs.Catalogues)) &&
		std::equal(std::begin(lhs.Stats), std::end(lhs.Stats), std::begin(rhs.Stats)) &&
		std::equal(std::begin(lhs.ProductTables), std::end(lhs.ProductTables), std::begin(rhs.ProductTables)) &&
		lhs.ShipCargoOnlyStartingLayout == rhs.ShipCargoOnlyStartingLayout &&
		lhs.ShipStartingLayout == rhs.ShipStartingLayout &&
		lhs.ShipTechOnlyStartingLayout == rhs.ShipTechOnlyStartingLayout &&
		lhs.SuitCargoStartingSlotLayout == rhs.SuitCargoStartingSlotLayout &&
		lhs.SuitStartingSlotLayout == rhs.SuitStartingSlotLayout &&
		lhs.SuitTechOnlyStartingSlotLayout == rhs.SuitTechOnlyStartingSlotLayout &&
		lhs.AlienPuzzleTables == rhs.AlienPuzzleTables &&
		lhs.AlienWordsTable == rhs.AlienWordsTable &&
		lhs.BaitDataTable == rhs.BaitDataTable &&
		lhs.BuilderMissionRewardOverrides == rhs.BuilderMissionRewardOverrides &&
		lhs.CombatEffectsTable == rhs.CombatEffectsTable &&
		lhs.ConsumableItemTable == rhs.ConsumableItemTable &&
		lhs.CostTable == rhs.CostTable &&
		lhs.DamageMultiplierTable == rhs.DamageMultiplierTable &&
		lhs.DamageTable == rhs.DamageTable &&
		lhs.DialogClearanceTable == rhs.DialogClearanceTable &&
		lhs.DiscoveryRewardTable == rhs.DiscoveryRewardTable &&
		lhs.FiendCrimeSpawnTable == rhs.FiendCrimeSpawnTable &&
		lhs.FishDataTable == rhs.FishDataTable &&
		lhs.FreighterBaseItemPairs == rhs.FreighterBaseItemPairs &&
		lhs.FreighterCargoOptions == rhs.FreighterCargoOptions &&
		lhs.HistoricalSeasonDataTable == rhs.HistoricalSeasonDataTable &&
		lhs.InventoryTable == rhs.InventoryTable &&
		lhs.LegacyItemConversionTable == rhs.LegacyItemConversionTable &&
		lhs.LegacyRepairTable == rhs.LegacyRepairTable &&
		lhs.MaintenanceGroupsTable == rhs.MaintenanceGroupsTable &&
		lhs.MaintenanceOverrideTable == rhs.MaintenanceOverrideTable &&
		lhs.NeverOfferedForSale == rhs.NeverOfferedForSale &&
		lhs.NeverSellableItems == rhs.NeverSellableItems &&
		lhs.PirateStationExtraProds == rhs.PirateStationExtraProds &&
		lhs.PlayerWeaponPropertiesTable == rhs.PlayerWeaponPropertiesTable &&
		lhs.ProceduralProductTable == rhs.ProceduralProductTable &&
		lhs.ProceduralTechnologyTable == rhs.ProceduralTechnologyTable &&
		lhs.ProductDescriptionOverrideTable == rhs.ProductDescriptionOverrideTable &&
		lhs.PurchaseableBuildingBlueprintsTable == rhs.PurchaseableBuildingBlueprintsTable &&
		lhs.PurchaseableSpecialsTable == rhs.PurchaseableSpecialsTable &&
		lhs.RecipeTable == rhs.RecipeTable &&
		lhs.RewardTable == rhs.RewardTable &&
		lhs.SettlementPerksTable == rhs.SettlementPerksTable &&
		lhs.StationTechShops == rhs.StationTechShops &&
		lhs.StatRewardsTable == rhs.StatRewardsTable &&
		lhs.StoriesTable == rhs.StoriesTable &&
		lhs.SubstanceSecondaryLookups == rhs.SubstanceSecondaryLookups &&
		lhs.SubstanceTable == rhs.SubstanceTable &&
		lhs.SuitCargoUpgradePrices == rhs.SuitCargoUpgradePrices &&
		lhs.SuitTechOnlyUpgradePrices == rhs.SuitTechOnlyUpgradePrices &&
		lhs.SuitUpgradePrices == rhs.SuitUpgradePrices &&
		lhs.TechBoxTable == rhs.TechBoxTable &&
		lhs.TechnologyTable == rhs.TechnologyTable &&
		lhs.TradingClassDataTable == rhs.TradingClassDataTable &&
		lhs.TradingCostTable == rhs.TradingCostTable &&
		lhs.UnlockableItemTrees == rhs.UnlockableItemTrees &&
		lhs.UnlockablePlatformRewardsTable == rhs.UnlockablePlatformRewardsTable &&
		lhs.UnlockableSeasonRewardsTable == rhs.UnlockableSeasonRewardsTable &&
		lhs.UnlockableTwitchRewardsTable == rhs.UnlockableTwitchRewardsTable &&
		std::equal(std::begin(lhs.FoodStatValues), std::end(lhs.FoodStatValues), std::begin(rhs.FoodStatValues)) &&
		std::equal(std::begin(lhs.InteractionPuzzlesIndexTypes), std::end(lhs.InteractionPuzzlesIndexTypes), std::begin(rhs.InteractionPuzzlesIndexTypes)) &&
		std::equal(std::begin(lhs.DiscoveryWorth), std::end(lhs.DiscoveryWorth), std::begin(rhs.DiscoveryWorth)) &&
		std::equal(std::begin(lhs.NormalisedPriceLimits), std::end(lhs.NormalisedPriceLimits), std::begin(rhs.NormalisedPriceLimits)) &&
		std::equal(std::begin(lhs.CreatureDiscoverySizeMultiplier), std::end(lhs.CreatureDiscoverySizeMultiplier), std::begin(rhs.CreatureDiscoverySizeMultiplier)) &&
		std::equal(std::begin(lhs.WeightedTextWeights), std::end(lhs.WeightedTextWeights), std::begin(rhs.WeightedTextWeights)) &&
		lhs.HomeRealityIteration == rhs.HomeRealityIteration &&
		lhs.RealityIteration == rhs.RealityIteration &&
		std::equal(std::begin(lhs.LoopInteractionPuzzles), std::end(lhs.LoopInteractionPuzzles), std::begin(rhs.LoopInteractionPuzzles)) &&
		std::equal(std::begin(lhs.WeightingCurves), std::end(lhs.WeightingCurves), std::begin(rhs.WeightingCurves));
	}
};

struct GcMissionConditionIsCurrentMission
{

	friend bool operator==(const GcMissionConditionIsCurrentMission& lhs, const GcMissionConditionIsCurrentMission& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsDepotDestroyed
{
	NMS::NMSString0x20A ControllingScanEvent;

	friend bool operator==(const GcMissionConditionIsDepotDestroyed& lhs, const GcMissionConditionIsDepotDestroyed& rhs) 
	{
		return lhs.ControllingScanEvent == rhs.ControllingScanEvent;
	}
};

struct GcMissionConditionIsFirstPurpleSystemLocal
{

	friend bool operator==(const GcMissionConditionIsFirstPurpleSystemLocal& lhs, const GcMissionConditionIsFirstPurpleSystemLocal& rhs) 
	{
		return true;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForAbandFreighterDoorOpen
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageOvertime;
	float MinTime;

	friend bool operator==(const GcMissionSequenceWaitForAbandFreighterDoorOpen& lhs, const GcMissionSequenceWaitForAbandFreighterDoorOpen& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageOvertime == rhs.MessageOvertime &&
		lhs.MinTime == rhs.MinTime;
	}
};

struct GcMissionConditionIsFishing
{
	float MinimumDepth;
	bool TakeDepthFromSeasonData;

	friend bool operator==(const GcMissionConditionIsFishing& lhs, const GcMissionConditionIsFishing& rhs) 
	{
		return lhs.MinimumDepth == rhs.MinimumDepth &&
		lhs.TakeDepthFromSeasonData == rhs.TakeDepthFromSeasonData;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceDiscoverOnPlanet
{
	enum class DiscoverTargetOnThisPlanetEnum : uint32_t
	{
		Animal = 0,
		Vegetable = 1,
		Mineral = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionSequenceDiscoverOnPlanet::DiscoverTargetOnThisPlanetEnum DiscoverTargetOnThisPlanet;
	float PercentToDiscover;

	friend bool operator==(const GcMissionSequenceDiscoverOnPlanet& lhs, const GcMissionSequenceDiscoverOnPlanet& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.DiscoverTargetOnThisPlanet == rhs.DiscoverTargetOnThisPlanet &&
		lhs.PercentToDiscover == rhs.PercentToDiscover;
	}
};

struct GcRewardJourneyThroughCentre
{
	enum class CentreJourneyDestinationEnum : uint32_t
	{
		Next = 0,
		Abandoned = 1,
		Vicious = 2,
		Lush = 3,
		Balanced = 4,
	};

	NMS_GameComponents::GcRewardJourneyThroughCentre::CentreJourneyDestinationEnum CentreJourneyDestination;

	friend bool operator==(const GcRewardJourneyThroughCentre& lhs, const GcRewardJourneyThroughCentre& rhs) 
	{
		return lhs.CentreJourneyDestination == rhs.CentreJourneyDestination;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMission
{
	NMS::NMSString0x20A AlreadyActiveFailureMessage;
	NMS::NMSString0x10 Mission;
	bool FailRewardIfMissionActive;
	bool Restart;
	bool SetAsSelected;

	friend bool operator==(const GcRewardMission& lhs, const GcRewardMission& rhs) 
	{
		return lhs.AlreadyActiveFailureMessage == rhs.AlreadyActiveFailureMessage &&
		lhs.Mission == rhs.Mission &&
		lhs.FailRewardIfMissionActive == rhs.FailRewardIfMissionActive &&
		lhs.Restart == rhs.Restart &&
		lhs.SetAsSelected == rhs.SetAsSelected;
	}
};

//Dependency: GcFrigateFlybyType
struct GcMissionConditionIsFrigateFlybyActive
{
	NMS_GameComponents::GcFrigateFlybyType FrigateFlybyType;

	friend bool operator==(const GcMissionConditionIsFrigateFlybyActive& lhs, const GcMissionConditionIsFrigateFlybyActive& rhs) 
	{
		return lhs.FrigateFlybyType == rhs.FrigateFlybyType;
	}
};

struct GcMissionConditionIsGrabbed
{

	friend bool operator==(const GcMissionConditionIsGrabbed& lhs, const GcMissionConditionIsGrabbed& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionIsLookingAtAnomaly
{
	float FOV;
	float MaxDistance;

	friend bool operator==(const GcMissionConditionIsLookingAtAnomaly& lhs, const GcMissionConditionIsLookingAtAnomaly& rhs) 
	{
		return lhs.FOV == rhs.FOV &&
		lhs.MaxDistance == rhs.MaxDistance;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventLocal
{
	NMS::NMSString0x20A Event;
	bool BlockMissionRestart;
	bool RequiresFullFireteam;

	friend bool operator==(const GcMissionConditionIsScanEventLocal& lhs, const GcMissionConditionIsScanEventLocal& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.BlockMissionRestart == rhs.BlockMissionRestart &&
		lhs.RequiresFullFireteam == rhs.RequiresFullFireteam;
	}
};

struct GcTracerData
{
	float DamageMax;
	float DamageMaxDistance;
	float DamageMin;
	float DamageMinDistance;
	float Length;
	float Speed;

	friend bool operator==(const GcTracerData& lhs, const GcTracerData& rhs) 
	{
		return lhs.DamageMax == rhs.DamageMax &&
		lhs.DamageMaxDistance == rhs.DamageMaxDistance &&
		lhs.DamageMin == rhs.DamageMin &&
		lhs.DamageMinDistance == rhs.DamageMinDistance &&
		lhs.Length == rhs.Length &&
		lhs.Speed == rhs.Speed;
	}
};

struct GcResourceCollectEffect
{
	float OffsetMax;
	float OffsetMin;
	float PlayerOffset;
	float RotateMax;
	float RotateMin;
	float SizeMax;
	float SizeMin;
	float StartOffsetMax;
	float StartOffsetMin;
	float StartSpeedMax;
	float StartSpeedMin;
	float TimeMax;
	float TimeMin;

	friend bool operator==(const GcResourceCollectEffect& lhs, const GcResourceCollectEffect& rhs) 
	{
		return lhs.OffsetMax == rhs.OffsetMax &&
		lhs.OffsetMin == rhs.OffsetMin &&
		lhs.PlayerOffset == rhs.PlayerOffset &&
		lhs.RotateMax == rhs.RotateMax &&
		lhs.RotateMin == rhs.RotateMin &&
		lhs.SizeMax == rhs.SizeMax &&
		lhs.SizeMin == rhs.SizeMin &&
		lhs.StartOffsetMax == rhs.StartOffsetMax &&
		lhs.StartOffsetMin == rhs.StartOffsetMin &&
		lhs.StartSpeedMax == rhs.StartSpeedMax &&
		lhs.StartSpeedMin == rhs.StartSpeedMin &&
		lhs.TimeMax == rhs.TimeMax &&
		lhs.TimeMin == rhs.TimeMin;
	}
};

//Dependency: VariableSizeString
struct GcShipHUDTargetIconData
{
	NMS::VariableSizeString Corner;
	NMS::VariableSizeString GlowCorner;
	NMS::VariableSizeString GlowLineHorizontal;
	NMS::VariableSizeString GlowLineVertical;
	NMS::VariableSizeString LineHorizontal;
	NMS::VariableSizeString LineVertical;

	friend bool operator==(const GcShipHUDTargetIconData& lhs, const GcShipHUDTargetIconData& rhs) 
	{
		return lhs.Corner == rhs.Corner &&
		lhs.GlowCorner == rhs.GlowCorner &&
		lhs.GlowLineHorizontal == rhs.GlowLineHorizontal &&
		lhs.GlowLineVertical == rhs.GlowLineVertical &&
		lhs.LineHorizontal == rhs.LineHorizontal &&
		lhs.LineVertical == rhs.LineVertical;
	}
};

//Dependency: GcShipHUDTargetIconData
//Dependency: Colour
//Dependency: VariableSizeString
struct GcShipHUDTargetData
{
	NMS::Colour BaseColour;
	NMS::Colour LockColour;
	NMS::Colour PoliceColour1;
	NMS::Colour PoliceColour2;
	NMS::Colour ThreatColour;
	NMS_GameComponents::GcShipHUDTargetIconData IconData;
	NMS::VariableSizeString Arrow;
	float ActivateTime;
	float ActiveDistance;
	float ArrowFadeRange;
	float ArrowMaxSize;
	float ArrowMinFadeDist;
	float ArrowMinSize;
	float ArrowOffset;
	float ArrowScale;
	float GlowAlpha;
	float HighlightTime;
	float HitPulse;
	float HitPulseTime;
	float HitWhiteOut;
	float IconMaxSize;
	float IconMinSize;
	float IconSizeIn;
	float IconSizeScale;
	float PoliceColourFreq;

	friend bool operator==(const GcShipHUDTargetData& lhs, const GcShipHUDTargetData& rhs) 
	{
		return lhs.BaseColour == rhs.BaseColour &&
		lhs.LockColour == rhs.LockColour &&
		lhs.PoliceColour1 == rhs.PoliceColour1 &&
		lhs.PoliceColour2 == rhs.PoliceColour2 &&
		lhs.ThreatColour == rhs.ThreatColour &&
		lhs.IconData == rhs.IconData &&
		lhs.Arrow == rhs.Arrow &&
		lhs.ActivateTime == rhs.ActivateTime &&
		lhs.ActiveDistance == rhs.ActiveDistance &&
		lhs.ArrowFadeRange == rhs.ArrowFadeRange &&
		lhs.ArrowMaxSize == rhs.ArrowMaxSize &&
		lhs.ArrowMinFadeDist == rhs.ArrowMinFadeDist &&
		lhs.ArrowMinSize == rhs.ArrowMinSize &&
		lhs.ArrowOffset == rhs.ArrowOffset &&
		lhs.ArrowScale == rhs.ArrowScale &&
		lhs.GlowAlpha == rhs.GlowAlpha &&
		lhs.HighlightTime == rhs.HighlightTime &&
		lhs.HitPulse == rhs.HitPulse &&
		lhs.HitPulseTime == rhs.HitPulseTime &&
		lhs.HitWhiteOut == rhs.HitWhiteOut &&
		lhs.IconMaxSize == rhs.IconMaxSize &&
		lhs.IconMinSize == rhs.IconMinSize &&
		lhs.IconSizeIn == rhs.IconSizeIn &&
		lhs.IconSizeScale == rhs.IconSizeScale &&
		lhs.PoliceColourFreq == rhs.PoliceColourFreq;
	}
};

struct GcZoomData
{
	enum class ZoomTypeEnum : uint32_t
	{
		None = 0,
		Far = 1,
		Mid = 2,
		Close = 3,
	};

	float EffectStrength;
	float FoV;
	float MaxScanDistance;
	float MinScanDistance;
	float MoveSpeed;
	float WalkSpeed;
	NMS_GameComponents::GcZoomData::ZoomTypeEnum ZoomType;

	friend bool operator==(const GcZoomData& lhs, const GcZoomData& rhs) 
	{
		return lhs.EffectStrength == rhs.EffectStrength &&
		lhs.FoV == rhs.FoV &&
		lhs.MaxScanDistance == rhs.MaxScanDistance &&
		lhs.MinScanDistance == rhs.MinScanDistance &&
		lhs.MoveSpeed == rhs.MoveSpeed &&
		lhs.WalkSpeed == rhs.WalkSpeed &&
		lhs.ZoomType == rhs.ZoomType;
	}
};

struct GcPortalData
{
	float RuneRotateTime;
	bool KnowAllRunes;
	bool SkipRuneEntry;

	friend bool operator==(const GcPortalData& lhs, const GcPortalData& rhs) 
	{
		return lhs.RuneRotateTime == rhs.RuneRotateTime &&
		lhs.KnowAllRunes == rhs.KnowAllRunes &&
		lhs.SkipRuneEntry == rhs.SkipRuneEntry;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcTracerData
//Dependency: GcResourceCollectEffect
//Dependency: NMSString0x20
//Dependency: GcDiscoveryTrimSettings
//Dependency: GcShipHUDTargetData
//Dependency: GcScanEffectData
//Dependency: GcExperienceTimers
//Dependency: GcScanToRevealComponentData
//Dependency: GcZoomData
//Dependency: GcPortalData
//Dependency: GcBuildingClassification
//Dependency: GcInteractionType
//Dependency: TkModelResource
//Dependency: GcPlayerHazardType
//Dependency: GcTechnologyCategory
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcGameplayGlobals
{
	NMS_GameComponents::GcDiscoveryTrimSettings DiscoveryTrimSettings;
	NMS_GameComponents::GcShipHUDTargetData HUDTarget;
	NMS_GameComponents::GcScanEffectData BaseBuildingDeleteScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorAboveWaterScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorBelowWaterScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorCollisionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorImpossibleScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorInsideScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorUnaffordableScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingGhostScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingPreviewSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingRemotePlayerSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingRemotePlayerValidScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingSpawnStaticEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingValidScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingVisionScanEffect;
	NMS_GameComponents::GcScanEffectData BinocularScanEffect;
	NMS_GameComponents::GcScanEffectData BinocularSelectedEffect;
	NMS_GameComponents::GcScanEffectData BlankScanEffect;
	NMS_GameComponents::GcScanEffectData BuildingScanEffect;
	NMS_GameComponents::GcScanEffectData CreatureScanEffect;
	NMS_GameComponents::GcScanEffectData DeconstructEffect;
	NMS_GameComponents::GcScanEffectData HitEffect;
	NMS_GameComponents::GcScanEffectData HitEffectCritical;
	NMS_GameComponents::GcScanEffectData HUDShipScanEffect;
	NMS_GameComponents::GcScanEffectData ObjectsScanEffect;
	NMS_GameComponents::GcScanEffectData PassiveScanEffect;
	NMS_GameComponents::GcScanEffectData ShipBuilderNullScanEffect;
	NMS_GameComponents::GcScanEffectData ShipBuilderScanEffect;
	NMS_GameComponents::GcScanEffectData ShipSalvageScanEffect;
	NMS_GameComponents::GcScanEffectData TargetShipScanEffect;
	NMS_GameComponents::GcScanEffectData VRGhostScanEffect;
	NMS::Colour BinocularScanTargetColour;
	NMS::Colour BinocularSelectedColour;
	NMS::Colour BinocularSelectedUnknownColour;
	NMS::Colour BulletTraceLineColour;
	NMS::Vector3f CommunicatorShipSpawnOffset;
	NMS::Colour HUDDamageSplatPainColour;
	NMS::Colour HUDDamageSplatShieldColour;
	NMS::Colour OverHeatBarColour;
	NMS::Colour OverHeatColour;
	NMS::Colour PainColour;
	NMS::Colour PlayerAmbientSpotLightColour;
	NMS::Colour RefinerColour1A;
	NMS::Colour RefinerColour1B;
	NMS::Colour RefinerColour1C;
	NMS::Colour RefinerColour1D;
	NMS::Colour ScannerColour1;
	NMS::Colour ScannerColour2;
	NMS::Colour TorchColour;
	NMS_GameComponents::GcScanToRevealComponentData CaveGraveRevealData;
	NMS::NMSString0x10 SalvageTechList[5];
	NMS::NMSString0x10 SalvageTechListMultiTool[5];
	NMS::NMSString0x10 SalvageRewardsDropship[4];
	NMS::NMSString0x10 SalvageRewardsFighter[4];
	NMS::NMSString0x10 SalvageRewardsScience[4];
	NMS::NMSString0x10 SalvageRewardsShuttle[4];
	NMS::NMSString0x20A CommunicatorFireteamNexusExitDialog;
	NMS::NMSString0x20A CommunicatorNexusExitAbandonWarningDialog;
	NMS_Toolkit::TkModelResource WeaponSpawnAltObject;
	NMS_Toolkit::TkModelResource WeaponSpawnObject;
	NMS::VariableSizeString BaseBuildingTable;
	NMS::NMSString0x10 BeaconScan;
	NMS::NMSString0x10 BioShipTerrainResource;
	NMS::NMSString0x10 BuildersWordReward;
	std::vector<NMS_GameComponents::GcScanEffectData> CommunicatorEffectTable;
	NMS::NMSString0x10 DebugScanPlanet;
	NMS::NMSString0x10 DebugScanSpace;
	NMS::NMSString0x10 DefaultAnim;
	NMS::NMSString0x10 DistressSignalScan;
	NMS::NMSString0x10 FreeShipSlotID;
	NMS::NMSString0x10 FreeSuitSlotID;
	NMS::NMSString0x10 FreeWeapSlotID;
	std::vector<NMS::NMSString0x10> FreighterHyperdriveAccess;
	std::vector<NMS::NMSString0x10> HyperdriveAccess;
	NMS::VariableSizeString InitialDebrisScene;
	NMS::VariableSizeString LegacyBaseBuildingTable;
	NMS::NMSString0x10 MissionSurveyBugsID;
	NMS::NMSString0x10 MissionSurveyWormID;
	NMS::NMSString0x10 NexusRecipeCostType;
	NMS::NMSString0x10 ObservatoryScan;
	std::vector<float> PirateEarlySpawnChances;
	NMS::NMSString0x10 PirateMissionPrimaryReward;
	NMS::NMSString0x10 PirateMissionSecondReward;
	NMS::NMSString0x10 RadioTowerScan;
	NMS::NMSString0x10 ResourceDirtSubstanceID;
	NMS::VariableSizeString ResourceParticleFile;
	NMS::NMSString0x10 ResourceUnderwaterSubstanceID;
	std::vector<NMS::NMSString0x10> SalvageProdsList;
	std::vector<NMS::NMSString0x10> SalvageSubstancesList;
	NMS::NMSString0x10 SandwormTerrainResource;
	NMS::NMSString0x10 SeaTrashDeployID;
	NMS::NMSString0x10 ShipScan;
	NMS::NMSString0x10 ToolScan;
	NMS::NMSString0x10 ToolScanHardMode;
	NMS::NMSString0x10 VisualScan;
	NMS::NMSString0x10 WaypointScan;
	std::vector<NMS_GameComponents::GcZoomData> ZoomLevels;
	uint64_t CookingRefreshTimeInSeconds;
	uint64_t NPCWorkerInteractionCooldown;
	NMS_GameComponents::GcResourceCollectEffect AsteroidResourceCollect;
	int32_t AlienShipEvolveCosts[8];
	NMS_GameComponents::GcExperienceTimers FlybyTimers;
	int32_t FreighterTechQualityWeightings[8];
	NMS_GameComponents::GcExperienceTimers FreighterTimers;
	NMS_GameComponents::GcExperienceTimers PlanetPirateTimers;
	NMS_GameComponents::GcExperienceTimers PoliceTimers;
	NMS_GameComponents::GcExperienceTimers SentinelTimersLow;
	NMS_GameComponents::GcExperienceTimers SentinelTimersNormal;
	NMS_GameComponents::GcExperienceTimers SpaceFlybyTimers;
	NMS_GameComponents::GcExperienceTimers SpacePirateTimers;
	NMS_GameComponents::GcTracerData BulletTracer;
	NMS_GameComponents::GcTracerData ShipTracer;
	float ChanceOfPirateFreighterBattleOnWarpToSystem[4];
	float MissionSubstanceDifficultyMultipliers[3];
	int32_t PirateInterestLevels[3];
	int32_t PirateInterestLevelsSurvival[3];
	int32_t PoliceInterestLevels[3];
	int32_t PoliceInterestLevelsSurvival[3];
	NMS::Vector2f FrigateFlybyTimer;
	NMS::Vector2f HUDDamageSize;
	NMS::Vector2f HUDDamageSplatSize;
	NMS_GameComponents::GcPortalData Portal;
	NMS::Vector2f SaveContextTransferShipCostScaleNanites;
	NMS::Vector2f SaveContextTransferShipCostScaleUnits;
	NMS::Vector2f SaveContextTransferWeaponCostScaleNanites;
	NMS::Vector2f SaveContextTransferWeaponCostScaleUnits;
	float AggressiveSentinelProbability;
	float AggressiveSentinelProbabilitySurvival;
	float AirLockDoorRange;
	float AlienPodThreshold1;
	float AlienPodThreshold2;
	float AllRecipesKnownNanitesMax;
	float AllRecipesKnownNanitesMin;
	float AngleFromBaseComputerWhenTeleporting;
	float AsteroidCarveRadius;
	float AsteroidHitForce;
	int32_t AsteroidResourceReducer;
	int32_t AsteroidScanMaxShown;
	float AsteroidScanRange;
	float AsteroidScanTime;
	float AsteroidTorqueForce;
	float AtlasGunCurrencyConversion;
	float AtmosphereEntryErrorTime;
	float AtmosphereEntryFadeTimeFactor;
	float AtmosphereEntryOffset;
	float AtmosphereEntryTime;
	float AutoTranslateWordChance;
	float BackgroundSpaceEncounterCheckTimer;
	float BarrelOffset;
	float BaseBuildingHoverTimeToKnowPart;
	float BaseBuildingRemotePlayerErrorAlphaScanEffect;
	float BaseFoodDuration;
	float BaseLaserHeatTime;
	float BeaconInteractRange;
	float BinocCreatureScanTime;
	float BinocMinScanTime;
	float BinocScanTime;
	float BinocTimeBeforeScan;
	float BinocularScanTargetFadeTime;
	float BinocularScanTargetHeightRange;
	float BinocularScanTargetInitialFadeTime;
	float BinocularScanTargetLineWidth;
	float BinocularScanTargetMinHeight;
	float BinocularScanTargetScaler;
	float BlackHoleJumpVoxelDist;
	float BlackHoleJumpVoxelVariation;
	float BonusChildTypeElementsAdd;
	float BonusChildTypeElementsMultiply;
	float BonusSameTypeElementsAdd;
	float BonusSameTypeElementsMultiply;
	int32_t BugFiendCap;
	float BuildingBeamDistance;
	float BuildingPlayerBaseIconOffset;
	float BulletTraceLineWidth;
	float CargoShieldStrength;
	float CockpitScale;
	float CombatLevelBaseValueBoltcaster;
	float CombatLevelBaseValueCannon;
	float CombatLevelBaseValueGrenade;
	float CombatLevelBaseValueRailgun;
	float CombatLevelBaseValueShotgun;
	float CombatLevelBaseValueSMG;
	float CombatLevelBestWeaponBias;
	float CombatLevelSClassValue;
	float CombatSpeedReadoutMultiplier;
	int32_t CommonProductEffectiveness;
	float CommunicatorCargoScanDroneAtOffsetFallback;
	float CommunicatorCargoScanDronePitch;
	float CommunicatorCargoScanDroneRoll;
	float CommunicatorCargoScanDroneScale;
	float CommunicatorCargoScanDroneScaleFallback;
	float CommunicatorCargoScanDroneUpOffset;
	float CommunicatorCargoScanDroneUpOffsetFallback;
	float CommunicatorCargoScanDroneYaw;
	float CommunicatorFadeTime;
	float CommunicatorSpawnHeightOffset;
	float CommunicatorSpawnOffset;
	float CommunicatorSpawnRotation;
	float CommunicatorSpawnScale;
	float CorruptSentinelProbability;
	float CreatureMinScanTime;
	float CreatureScanAngle;
	float CreatureScanStickyDecay;
	int32_t CreaturesToBaitForTutorial;
	int32_t CreaturesToFeedForTutorial;
	int32_t CritDamage;
	float CriticalHitMultiplier;
	float CritScale;
	int32_t CronusNaniteDonationMul;
	float DeadPlanetGravityFactor;
	int32_t DeathMoneyPenalty;
	NMS_GameComponents::GcBuildingClassification DebugScanForceBuildingType;
	float DeepWaterJellyCrimeModMax;
	float DeepWaterResourceMulMax;
	float DerelictPulseEncounterAtmosphericEffectChance;
	float DestroyEffectHeight;
	float DestroyEffectMaxScale;
	float DistanceFromBaseComputerWhenTeleporting;
	float DockNodeBuyRadius;
	int32_t EarlyPiratesToBeKilled;
	float EmergencyBuildingScanEventDistance;
	float EmergencyBuildingScanEventTime;
	float EventTargetSpeed;
	float ExcitingNearRange;
	float ExcitingViewAngle;
	float ExcitingViewRange;
	float ExplosionForce;
	float ExplosionForceMaxForceRadius;
	float ExplosionRadiusMultiplier;
	int32_t FourthRaceSpawnPercentage;
	float FreighterBattleRadius;
	float FreighterCargoPodHealthFraction;
	float FreighterFuelRodHealthFraction;
	int32_t FreighterStartPecent;
	float GasGiantGravityFactor;
	float GoalGapVoxelDist;
	int32_t GPSRandomChangeTimeBuilderCorruption;
	int32_t GPSRandomChangeTimeMid;
	int32_t GPSRandomChangeTimeNarrow;
	int32_t GPSRandomChangeTimeWide;
	float GrabPlayerCooldownTime;
	int32_t GuildStockReplenishTime;
	int32_t GuildStockReplenishTimeSubstance;
	float GunDownAngle;
	float GunOffsetAggressiveX;
	float GunOffsetAggressiveY;
	float GunOffsetAggressiveZ;
	float GunOffsetX;
	float GunOffsetY;
	float GunOffsetZ;
	float GunUpAngle;
	int32_t HardModeTechDamageHighPercent;
	int32_t HardModeTechDamageMidNum;
	int32_t HardModeTechDamageMidPercent;
	float HeatAlertTime;
	float HeatDamageBoost;
	float HeatMaxPowerPoint;
	float HeatWidthBoost;
	float HeatWidthBoostAlt;
	float HitEffectMinTime;
	float HitOffset;
	float HmdInteractionRangeMinDistance;
	float HmdInteractionRangeMinRange;
	float HmdInteractionRangeMultiplier;
	float HoursBetweenBattles;
	float HoursBetweenMiniStation;
	float HoverTimeToScan;
	float HoverTimeToScanCreatures;
	int32_t HoverVisiblePointsNeeded;
	float HUDArrowPrimaryScaler;
	float HUDDamageOffset;
	float HUDDamageRadius;
	float HUDDamageScaler;
	float HUDLabelAngle;
	float HUDLabelAngleOffset;
	float HUDLabelOffsetX;
	float HUDLabelOffsetY;
	float HUDLabelOffsetZ;
	float HUDLabelScale;
	float HUDLabelTime;
	float HUDLockOnAudioTime;
	float HUDReticuleMoveAim;
	float HUDReticuleMoveBack;
	float HUDScaleAdd;
	float HUDScaleFarTarget;
	float HUDScaleMax;
	float HUDScaleMin;
	float HUDScaleMinAim;
	float HUDScaleRadius;
	float HUDStoreFlashTime;
	float IllegalTechProductTradingMod;
	float InfestedPlanetDeepSpaceFlybyMultiplier;
	float InitialLocationProtectionRadiusMultiplier;
	float InteractionAttractTime;
	float InteractionComponentUpdateDistance;
	float InteractionDescriptionTextTime;
	float InteractionMessageModuleDisplayTime;
	float InteractionMinTimeBeforeHighlightedOptionSelection;
	float InteractionMinTimeBetweenStickOptionHighlights;
	float InteractionMinTimeForResponseText;
	NMS_GameComponents::GcInteractionType InteractionOverrideFrom;
	NMS_GameComponents::GcInteractionType InteractionOverrideTo;
	float InteractionPickupAngle;
	float InteractionPickupRadius;
	float InteractionStickOptionStrength;
	float InteractionTorchFoV;
	float InteractionTorchStrength;
	float JumpToCenterFuelCost;
	float LaserExplosionForce;
	float LaserExplosionForceMaxForceRadius;
	float LaserExplosionForceRadius;
	int32_t LaserRechargeHintThresholdEarly;
	int32_t LaserRechargeHintThresholdLate;
	float LightStrength;
	float LineWidth;
	float LockOffFactor;
	float LowSentinelProbability;
	float LowSentinelProbabilitySurvival;
	float MapFOV;
	float MapHeight;
	float MapOffset;
	float MapRadius;
	float MapTargetOffset;
	int32_t MaxActiveWeatherHazardGifts;
	int32_t MaxCookingRank;
	float MaxDistanceForLadderTeleport;
	int32_t MaxDronesAggressive;
	int32_t MaxDronesAggressiveSurvival;
	int32_t MaxDronesLow;
	int32_t MaxDronesLowSurvival;
	int32_t MaxDronesNormal;
	int32_t MaxDronesNormalSurvival;
	float MaxMeteorSurfaceAngle;
	int32_t MaxNumMissionsFromMissionGiver;
	int32_t MaxNumSameGroupTech;
	float MaxPossibleShipDamagePotential;
	int32_t MaxResourceCrystalBlobSize;
	float MaxRespawnOnGroundHeight;
	float MaxSpawnTime;
	float MaxStandingTechDiscount;
	int32_t MaxTorpedoesInFlight;
	int32_t MeleeHintThresholdEarly;
	int32_t MeleeHintThresholdLate;
	int32_t MinCookingRank;
	float MissileApproachTime;
	float MissileBrakeForceMax;
	float MissileBrakeForceMin;
	float MissileBrakeTime;
	float MissileForceMax;
	float MissileForceMin;
	float MissileHitRadius;
	float MissileLockTime;
	float MissileMaxSpeed;
	float MissileMaxTurnAngle;
	float MissileMinCircleTime;
	float MissileOffset;
	float MissileReloadTime;
	float MissileRotateMax;
	float MissileRotateMin;
	float MissileRotateSpeed;
	float MissileThreatTime;
	float MissionEventAllowResetDistance;
	float MissionSurveyAutoScanDistance;
	float MissionSurveyAutoScanFlattenRadiusMul;
	float MissionSurveyBeginScanPercentageEvent;
	float MissionSurveyBeginScanPercentageScannable;
	float MissionSurveyInShipArrivedDistance;
	float MissionSurveyMarkerAutoHideTime;
	float MissionSurveyMaxAngleOffset;
	float MissionSurveyMaxGuidanceDistance;
	float MissionSurveyMaxGuidanceDistanceWorms;
	float MissionSurveyMaxScanAngle;
	float MissionSurveyMaxScanAngleScannableComp;
	float MissionSurveyMaxSignalConeAngle;
	float MissionSurveyRevealWithoutScanDistance;
	float MissionSurveyScanRangeMultiplier;
	float MissionSurveyScanSpeed;
	float MissionSurveyScanSpeedScannableComp;
	float MissionSurveySonarMaxPulseSpeed;
	float MissionSurveySonarMinPulseSpeed;
	float MissionSurveySonarPulseSpeedBandCount;
	float MouseSensitivity;
	float MouseSensitivityShip;
	float MouseSensitivityVehicle;
	float MultidimensionalFadeTime;
	float NewDiscoveryDisplayTime;
	int32_t NexusRecipeCostNaniteMultiplier;
	float NonAggressiveLushSurvivalProbabability;
	int32_t NonDominantRaceSpawnPercentage;
	int32_t NonDominantRaceSpawnPercentagePirate;
	float NonNaturalCostMul;
	float NormalModeHeatBonus;
	float NPCNavNodeSearchUpDistScaling;
	float NPCWaitWhenRevealedTime;
	int32_t NumMissionsPerSolarSystem;
	float OffscreenFadeDistance;
	float OffscreenMinDot;
	float OverheatDecay;
	float OverheatGenerosity;
	float PainTime;
	float PartyPlanetSearchDistance;
	int32_t PersonalInventoryMinHeightMax;
	int32_t PersonalInventoryMinWidthMax;
	int32_t PersonalTechInventoryMinHeightMax;
	int32_t PersonalTechInventoryMinWidthMax;
	float PirateEarlySpawnTime;
	float PirateFreighterBattleNoTargetLeaderTime;
	float PirateFreighterBeginFleeHealthFraction;
	int32_t PirateFreighterFrigateCountForReinforce;
	float PirateFreighterRewardDelayTime;
	float PirateFreighterRewardDelayTimeEscaped;
	float PirateFreighterRewardMessageDelayTime;
	float PirateFreighterRewardMessageDelayTimeEscaped;
	float PirateFreighterWarpChargeTime;
	float PirateFreighterWarpChargeTimeToAddPerBrokenEngine;
	float PirateGroundAccelerator;
	float PirateGroundInventoryAccelerator;
	float PirateInterestDistance;
	float PirateInterestDistanceMPMission;
	int32_t PirateInterestOverride;
	float PirateRaidAccelerator;
	int32_t PlanetPirateFlybyMaxRepeatCounter;
	float PlayerAmbientSpotLightIntensity;
	float PlayerAmbientSpotLightOffsetY;
	float PlayerAmbientSpotLightOffsetZ;
	float PoliceAcceleratorNoCargoNormal;
	float PoliceAcceleratorNoCargoSkipScanOdds;
	float PoliceAcceleratorNoCargoWealthy;
	float PoliceAcceleratorPulseExtra;
	int32_t PoliceAcceleratorSmugglingItemsMax;
	float PoliceAcceleratorSmugglingMulMax;
	float PoliceAcceleratorStationLockOn;
	float PoliceInterestDistance;
	float PoliceInterestDistanceMPMission;
	int32_t PoliceInterestOverride;
	int32_t ProductItemStockDecayTime;
	int32_t ProductItemStockReplenishTime;
	float ProjectileLightIntensity;
	float ProjectileSpeedBoost;
	float PulseEncounterChance;
	float PulseEncounterChanceBlue;
	float PulseEncounterChanceGreen;
	float PulseEncounterChanceRed;
	float PulseEncounterChanceStandard;
	float PulseEncounterCheckTimer;
	float PulseEncounterStopPower;
	float PulseEncounterStopSpeed;
	int32_t RareProductEffectiveness;
	int32_t RareSubstanceEffectiveness;
	int32_t RefinerProductsMadeInTime;
	int32_t RefinerProductsMadeInTimeSurvival;
	int32_t RefinerSubsMadeInTime;
	int32_t RefinerSubsMadeInTimeSurvival;
	int32_t ResourceCommonMaxAmount;
	int32_t ResourceCommonMinAmount;
	int32_t ResourceCommonReducer;
	int32_t ResourceDirtMaxAmount;
	int32_t ResourceDirtMinAmount;
	int32_t ResourceDirtReducer;
	int32_t ResourceMaxAmount;
	int32_t ResourceMinAmount;
	int32_t ResourceParticleMaxNum;
	int32_t ResourceParticleMinNum;
	float ResourceParticleSpeed;
	float ResourceParticleSpread;
	int32_t ResourceReducer;
	int32_t RocketLockerFuelUse;
	float SalvageShipExplodeShipDistance;
	float SalvageShipExplodeSpeed;
	float SalvageShipHeightOffset;
	float SalvageShipOneRevolutionTime;
	float SalvageShipPitch;
	float SalvageShipShowShipDistance;
	float SalvageShipShowShipSpeed;
	float SalvageShipShowShipSpeedSwitching;
	int32_t SalvageSubstanceValueThreshold;
	float SalvageValueAsProds;
	float SalvageWeaponHeightOffset;
	float SalvageWeaponMaxSize;
	float SalvageWeaponPitch;
	float SalvageWeaponScale;
	float ScanAngle;
	float ScanAngleCutoff;
	float ScannableComponentMarkerOffset;
	float ScannableComponentPlaceMarkerOffset;
	float ScannerAnalyzeFXRate;
	float ScannerIconsClumpRadius;
	float ScannerMarkerFadeTime;
	float ScannerPhysicsProbeAABBSize;
	float ScannerSmallMarkerFadeTime;
	float ScannerSubstanceTimePerTrigger;
	float ScannerTuningA;
	float ScannerTuningB;
	float ScannerTuningC;
	float ScannerTuningD;
	float ScannerTuningResourceOffset1;
	float ScannerTuningResourceOffset2;
	float ScannerTuningSmoothStepAmount;
	float ScannerTuningTrailingEdge;
	float ScanStartTimeDelayMinDist;
	float ScanStartTimeDelayRange;
	float ScanStartTimeDistanceDelayTime;
	float ScanStickyDecay;
	float ScanToRevealDelayOverride;
	float ScanToRevealVFXBaseScalingSize;
	float ScrapDroneProbability;
	float SeasonalMessageModuleAttractDistanceMul;
	int32_t SentinelsHigh;
	int32_t SentinelsLow;
	float ShipBulletTraceLineWidth;
	float ShipDisplayDamageMultiplier;
	float ShipInteractRadius;
	float ShipInterestAcceleratorInAsteroidField;
	int32_t ShipInventoryMinHeightMax;
	int32_t ShipInventoryMinWidthMax;
	float ShipMiningMul;
	float ShipScanOffset;
	float ShipScanOffsetGap;
	float ShipScanPlanetRechargeMultiplier;
	float ShipScanSpaceRechargeMultiplier;
	int32_t ShipTechInventoryMinHeightMax;
	int32_t ShipTechInventoryMinWidthMax;
	float ShootableAggroForgetTime;
	float ShootableAggroMinStartTime;
	float ShootableArmourHighlightHitTime;
	float SimpleInteractionMessageTime;
	float SimpleInteractionPickupAngle;
	float SimpleInteractionPickupRadius;
	float SmugglerSellingMarkup;
	float SpaceBattleAnyHostileShipsRadius;
	int32_t SpaceBattleMaxTorpedosTargetingLeaderShip;
	int32_t SpaceBattleMaxTorpedosTargetingNonLeaderShip;
	float SpaceBattleRadius;
	float SpaceCombatRadius;
	float SpaceSpeedReadoutMultiplier;
	float SpawnerWeaponRange;
	int32_t SpecialMiningAmount;
	float SpecialMiningTime;
	float SpecialTechSlotBonus;
	float SpeedReadoutMultiplier;
	float SpookMessageChance;
	float SpookMessageCooldown;
	float SpookMessageThreshold;
	float StormBonusJetpackMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusJetpackWeather;
	float StormBonusMiningAmountMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusMiningAmountWeather;
	float StormBonusMiningHeatMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusMiningHeatWeather;
	float StormBonusSprintMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusSprintWeather;
	float StormGravityChangeTime;
	int32_t SubstanceItemStockDecayTime;
	int32_t SubstanceItemStockReplenishTime;
	float SurveyBeginScanPercentage;
	float SurveyMaxDistance;
	float SurveyScanMaxSpeed;
	float SurveyScanMinSpeed;
	float SurveySonarMaxPulseSpeed;
	float SurveySonarMiddleRangeMax;
	float SurveySonarMiddleRangeMin;
	float SurveySonarMinPulseSpeed;
	float SurveySonarPulseSpeedBandCount;
	float TapInteractionDecay;
	float TapInteractionIncreaseAmount;
	float TechDamageChanceShieldedMax;
	float TechDamageChanceShieldLevelMax;
	float TechDamageChanceShieldLevelMin;
	float TechDamageChanceToSelectPrimary;
	NMS_GameComponents::GcTechnologyCategory TechnologyOverrideForSmuggler;
	float TeleporterDistanceTravelledMultiplier;
	float TerrainResourceCompassRange;
	float TerrainResourceScanRange;
	float TerrainResourceScanTime;
	float TimeToDisplayScanResults;
	int32_t TorchCookieIndex;
	int32_t TorchDimCookieIndex;
	float TorchDimFoV;
	float TorchDimStrength;
	float TorchFollowCameraPitch;
	float TorchFollowCameraTime;
	float TorchFoV;
	float TorchHandOffsetX;
	float TorchHandOffsetY;
	float TorchHandOffsetZ;
	float TorchOffsetX;
	float TorchOffsetY;
	float TorchOffsetZ;
	float TorchOffsetZMin;
	float TorchOffsetZMinSpeed;
	float TorchOffsetZSpeedRange;
	float TorchRotation;
	float TorchStaffOffsetY;
	float TorchStaffOffsetZ;
	float TorchStaffOffsetZMin;
	float TorchStrength;
	float TorpedoCooldown;
	float TorpedoCooldownRandomExtra;
	float TorpedoInitialWait;
	float TorpedoLaunchWarning;
	int32_t TunnelStatReducer;
	float TurretAITargetingDistanceFactor;
	float TurretAITargetingFocusPlayerFactor;
	float TurretAITargetingLastHitFactor;
	float TurretAITargetingPitchAngleFactor;
	float TurretAITargetingYawAngleFactor;
	float UndergroundTorchFoV;
	float UndergroundTorchStrength;
	float UnderwaterAmbientLightStrength;
	float UnderwaterLightningDamageDistanceMultiplier;
	float UnderwaterTorchFoV;
	float UnderwaterTorchStrengthMax;
	float UnderwaterTorchVolumetricStrength;
	float VehicleAllIconScanTime;
	int32_t VehicleInventoryMinHeightMax;
	int32_t VehicleInventoryMinWidthMax;
	float ViciousSentinelProbability;
	float ViciousStormProbability;
	float ViciousWeatherProbability;
	float VoxelAsteroidResourceChance;
	int32_t WarpsBetweenBattles;
	int32_t WarpsBetweenMiniStation;
	float WaterLandingDamageMultiplier;
	float WaypointScanTime;
	int32_t WeaponInventoryMinHeightMax;
	int32_t WeaponInventoryMinWidthMax;
	float WeatherHazardGiftLifeTime;
	float WeatherHazardGiftMaxDistance;
	float ZoomFindBuildingRange;
	NMS::NMSString0x20 DepotResource;
	NMS::NMSString0x20 RobotResource;
	bool AllowBinocularMarker;
	bool AllowDeconstruct;
	bool AllowSpaceScanEvents;
	NMS_Toolkit::TkCurveType AtmosphereEntryCurve;
	bool Autolevel;
	bool BinocsDisplayUnknownCreatures;
	NMS_Toolkit::TkCurveType BinocularScanTargetHeightCurve;
	bool CanMoveTechnology;
	bool ChangePricesLocally;
	bool DebugDrawTriggerBoxes;
	bool DebugPrintShootables;
	bool DebugScanForceBuilding;
	bool DisableAnomalyAmbientSpawn;
	bool DisableBasePowerHUDOverlay;
	bool DisableGalaxyMapInQuickMenu;
	bool DisableNexusInQuickMenu;
	bool EnableShootHitEffect;
	bool EnableTechPackaging;
	bool EnableTeleporters;
	bool EveryMaintenanceIsBroken;
	bool FailToFindBuildings;
	bool FreighterRequiresRGBHyperdriveUpgrades;
	bool HUDUpdateFromData;
	bool InstallTechWithInteraction;
	bool InteractionOverride;
	bool KeepAttackingMaxWantedLevel;
	bool MissionSurveySuggestSurveyForNearScannables;
	NMS_Toolkit::TkCurveType OverheatColourCurve;
	NMS_Toolkit::TkCurveType OverheatColourCurveShip;
	NMS_Toolkit::TkCurveType OverheatCurve;
	NMS_Toolkit::TkCurveType PainCurve;
	bool PlayHitEffectsOnZeroDamage;
	bool RewardInventoryClassItemFromShipSalvage;
	bool ScanToRevealIgnoreRequirements;
	bool ScanToRevealNPCsAlwaysTriggersCameraEvent;
	NMS_Toolkit::TkCurveType ShipScanCurve;
	bool ShowPriceMarkupsAsPercentages;
	bool SpawnResourceBlobsOnPartDelete;
	bool TechMustBeInTechInventory;
	bool TorchDisabledInTheDay;
	bool UseCustomSaveDirectory;
	bool UseDebugScan;
	bool UseMultiplierBonus;
	bool UseOverheatColour;
	bool UseSecondaryBiomeSubstances;
	bool UseTradingCostTable;

	friend bool operator==(const GcGameplayGlobals& lhs, const GcGameplayGlobals& rhs) 
	{
		return lhs.DiscoveryTrimSettings == rhs.DiscoveryTrimSettings &&
		lhs.HUDTarget == rhs.HUDTarget &&
		lhs.BaseBuildingDeleteScanEffect == rhs.BaseBuildingDeleteScanEffect &&
		lhs.BaseBuildingErrorAboveWaterScanEffect == rhs.BaseBuildingErrorAboveWaterScanEffect &&
		lhs.BaseBuildingErrorBelowWaterScanEffect == rhs.BaseBuildingErrorBelowWaterScanEffect &&
		lhs.BaseBuildingErrorCollisionScanEffect == rhs.BaseBuildingErrorCollisionScanEffect &&
		lhs.BaseBuildingErrorImpossibleScanEffect == rhs.BaseBuildingErrorImpossibleScanEffect &&
		lhs.BaseBuildingErrorInsideScanEffect == rhs.BaseBuildingErrorInsideScanEffect &&
		lhs.BaseBuildingErrorUnaffordableScanEffect == rhs.BaseBuildingErrorUnaffordableScanEffect &&
		lhs.BaseBuildingGhostScanEffect == rhs.BaseBuildingGhostScanEffect &&
		lhs.BaseBuildingPreviewSelectionScanEffect == rhs.BaseBuildingPreviewSelectionScanEffect &&
		lhs.BaseBuildingRemotePlayerSelectionScanEffect == rhs.BaseBuildingRemotePlayerSelectionScanEffect &&
		lhs.BaseBuildingRemotePlayerValidScanEffect == rhs.BaseBuildingRemotePlayerValidScanEffect &&
		lhs.BaseBuildingSelectionScanEffect == rhs.BaseBuildingSelectionScanEffect &&
		lhs.BaseBuildingSpawnStaticEffect == rhs.BaseBuildingSpawnStaticEffect &&
		lhs.BaseBuildingValidScanEffect == rhs.BaseBuildingValidScanEffect &&
		lhs.BaseBuildingVisionScanEffect == rhs.BaseBuildingVisionScanEffect &&
		lhs.BinocularScanEffect == rhs.BinocularScanEffect &&
		lhs.BinocularSelectedEffect == rhs.BinocularSelectedEffect &&
		lhs.BlankScanEffect == rhs.BlankScanEffect &&
		lhs.BuildingScanEffect == rhs.BuildingScanEffect &&
		lhs.CreatureScanEffect == rhs.CreatureScanEffect &&
		lhs.DeconstructEffect == rhs.DeconstructEffect &&
		lhs.HitEffect == rhs.HitEffect &&
		lhs.HitEffectCritical == rhs.HitEffectCritical &&
		lhs.HUDShipScanEffect == rhs.HUDShipScanEffect &&
		lhs.ObjectsScanEffect == rhs.ObjectsScanEffect &&
		lhs.PassiveScanEffect == rhs.PassiveScanEffect &&
		lhs.ShipBuilderNullScanEffect == rhs.ShipBuilderNullScanEffect &&
		lhs.ShipBuilderScanEffect == rhs.ShipBuilderScanEffect &&
		lhs.ShipSalvageScanEffect == rhs.ShipSalvageScanEffect &&
		lhs.TargetShipScanEffect == rhs.TargetShipScanEffect &&
		lhs.VRGhostScanEffect == rhs.VRGhostScanEffect &&
		lhs.BinocularScanTargetColour == rhs.BinocularScanTargetColour &&
		lhs.BinocularSelectedColour == rhs.BinocularSelectedColour &&
		lhs.BinocularSelectedUnknownColour == rhs.BinocularSelectedUnknownColour &&
		lhs.BulletTraceLineColour == rhs.BulletTraceLineColour &&
		lhs.CommunicatorShipSpawnOffset == rhs.CommunicatorShipSpawnOffset &&
		lhs.HUDDamageSplatPainColour == rhs.HUDDamageSplatPainColour &&
		lhs.HUDDamageSplatShieldColour == rhs.HUDDamageSplatShieldColour &&
		lhs.OverHeatBarColour == rhs.OverHeatBarColour &&
		lhs.OverHeatColour == rhs.OverHeatColour &&
		lhs.PainColour == rhs.PainColour &&
		lhs.PlayerAmbientSpotLightColour == rhs.PlayerAmbientSpotLightColour &&
		lhs.RefinerColour1A == rhs.RefinerColour1A &&
		lhs.RefinerColour1B == rhs.RefinerColour1B &&
		lhs.RefinerColour1C == rhs.RefinerColour1C &&
		lhs.RefinerColour1D == rhs.RefinerColour1D &&
		lhs.ScannerColour1 == rhs.ScannerColour1 &&
		lhs.ScannerColour2 == rhs.ScannerColour2 &&
		lhs.TorchColour == rhs.TorchColour &&
		lhs.CaveGraveRevealData == rhs.CaveGraveRevealData &&
		std::equal(std::begin(lhs.SalvageTechList), std::end(lhs.SalvageTechList), std::begin(rhs.SalvageTechList)) &&
		std::equal(std::begin(lhs.SalvageTechListMultiTool), std::end(lhs.SalvageTechListMultiTool), std::begin(rhs.SalvageTechListMultiTool)) &&
		std::equal(std::begin(lhs.SalvageRewardsDropship), std::end(lhs.SalvageRewardsDropship), std::begin(rhs.SalvageRewardsDropship)) &&
		std::equal(std::begin(lhs.SalvageRewardsFighter), std::end(lhs.SalvageRewardsFighter), std::begin(rhs.SalvageRewardsFighter)) &&
		std::equal(std::begin(lhs.SalvageRewardsScience), std::end(lhs.SalvageRewardsScience), std::begin(rhs.SalvageRewardsScience)) &&
		std::equal(std::begin(lhs.SalvageRewardsShuttle), std::end(lhs.SalvageRewardsShuttle), std::begin(rhs.SalvageRewardsShuttle)) &&
		lhs.CommunicatorFireteamNexusExitDialog == rhs.CommunicatorFireteamNexusExitDialog &&
		lhs.CommunicatorNexusExitAbandonWarningDialog == rhs.CommunicatorNexusExitAbandonWarningDialog &&
		lhs.WeaponSpawnAltObject == rhs.WeaponSpawnAltObject &&
		lhs.WeaponSpawnObject == rhs.WeaponSpawnObject &&
		lhs.BaseBuildingTable == rhs.BaseBuildingTable &&
		lhs.BeaconScan == rhs.BeaconScan &&
		lhs.BioShipTerrainResource == rhs.BioShipTerrainResource &&
		lhs.BuildersWordReward == rhs.BuildersWordReward &&
		lhs.CommunicatorEffectTable == rhs.CommunicatorEffectTable &&
		lhs.DebugScanPlanet == rhs.DebugScanPlanet &&
		lhs.DebugScanSpace == rhs.DebugScanSpace &&
		lhs.DefaultAnim == rhs.DefaultAnim &&
		lhs.DistressSignalScan == rhs.DistressSignalScan &&
		lhs.FreeShipSlotID == rhs.FreeShipSlotID &&
		lhs.FreeSuitSlotID == rhs.FreeSuitSlotID &&
		lhs.FreeWeapSlotID == rhs.FreeWeapSlotID &&
		lhs.FreighterHyperdriveAccess == rhs.FreighterHyperdriveAccess &&
		lhs.HyperdriveAccess == rhs.HyperdriveAccess &&
		lhs.InitialDebrisScene == rhs.InitialDebrisScene &&
		lhs.LegacyBaseBuildingTable == rhs.LegacyBaseBuildingTable &&
		lhs.MissionSurveyBugsID == rhs.MissionSurveyBugsID &&
		lhs.MissionSurveyWormID == rhs.MissionSurveyWormID &&
		lhs.NexusRecipeCostType == rhs.NexusRecipeCostType &&
		lhs.ObservatoryScan == rhs.ObservatoryScan &&
		lhs.PirateEarlySpawnChances == rhs.PirateEarlySpawnChances &&
		lhs.PirateMissionPrimaryReward == rhs.PirateMissionPrimaryReward &&
		lhs.PirateMissionSecondReward == rhs.PirateMissionSecondReward &&
		lhs.RadioTowerScan == rhs.RadioTowerScan &&
		lhs.ResourceDirtSubstanceID == rhs.ResourceDirtSubstanceID &&
		lhs.ResourceParticleFile == rhs.ResourceParticleFile &&
		lhs.ResourceUnderwaterSubstanceID == rhs.ResourceUnderwaterSubstanceID &&
		lhs.SalvageProdsList == rhs.SalvageProdsList &&
		lhs.SalvageSubstancesList == rhs.SalvageSubstancesList &&
		lhs.SandwormTerrainResource == rhs.SandwormTerrainResource &&
		lhs.SeaTrashDeployID == rhs.SeaTrashDeployID &&
		lhs.ShipScan == rhs.ShipScan &&
		lhs.ToolScan == rhs.ToolScan &&
		lhs.ToolScanHardMode == rhs.ToolScanHardMode &&
		lhs.VisualScan == rhs.VisualScan &&
		lhs.WaypointScan == rhs.WaypointScan &&
		lhs.ZoomLevels == rhs.ZoomLevels &&
		lhs.CookingRefreshTimeInSeconds == rhs.CookingRefreshTimeInSeconds &&
		lhs.NPCWorkerInteractionCooldown == rhs.NPCWorkerInteractionCooldown &&
		lhs.AsteroidResourceCollect == rhs.AsteroidResourceCollect &&
		std::equal(std::begin(lhs.AlienShipEvolveCosts), std::end(lhs.AlienShipEvolveCosts), std::begin(rhs.AlienShipEvolveCosts)) &&
		lhs.FlybyTimers == rhs.FlybyTimers &&
		std::equal(std::begin(lhs.FreighterTechQualityWeightings), std::end(lhs.FreighterTechQualityWeightings), std::begin(rhs.FreighterTechQualityWeightings)) &&
		lhs.FreighterTimers == rhs.FreighterTimers &&
		lhs.PlanetPirateTimers == rhs.PlanetPirateTimers &&
		lhs.PoliceTimers == rhs.PoliceTimers &&
		lhs.SentinelTimersLow == rhs.SentinelTimersLow &&
		lhs.SentinelTimersNormal == rhs.SentinelTimersNormal &&
		lhs.SpaceFlybyTimers == rhs.SpaceFlybyTimers &&
		lhs.SpacePirateTimers == rhs.SpacePirateTimers &&
		lhs.BulletTracer == rhs.BulletTracer &&
		lhs.ShipTracer == rhs.ShipTracer &&
		std::equal(std::begin(lhs.ChanceOfPirateFreighterBattleOnWarpToSystem), std::end(lhs.ChanceOfPirateFreighterBattleOnWarpToSystem), std::begin(rhs.ChanceOfPirateFreighterBattleOnWarpToSystem)) &&
		std::equal(std::begin(lhs.MissionSubstanceDifficultyMultipliers), std::end(lhs.MissionSubstanceDifficultyMultipliers), std::begin(rhs.MissionSubstanceDifficultyMultipliers)) &&
		std::equal(std::begin(lhs.PirateInterestLevels), std::end(lhs.PirateInterestLevels), std::begin(rhs.PirateInterestLevels)) &&
		std::equal(std::begin(lhs.PirateInterestLevelsSurvival), std::end(lhs.PirateInterestLevelsSurvival), std::begin(rhs.PirateInterestLevelsSurvival)) &&
		std::equal(std::begin(lhs.PoliceInterestLevels), std::end(lhs.PoliceInterestLevels), std::begin(rhs.PoliceInterestLevels)) &&
		std::equal(std::begin(lhs.PoliceInterestLevelsSurvival), std::end(lhs.PoliceInterestLevelsSurvival), std::begin(rhs.PoliceInterestLevelsSurvival)) &&
		lhs.FrigateFlybyTimer == rhs.FrigateFlybyTimer &&
		lhs.HUDDamageSize == rhs.HUDDamageSize &&
		lhs.HUDDamageSplatSize == rhs.HUDDamageSplatSize &&
		lhs.Portal == rhs.Portal &&
		lhs.SaveContextTransferShipCostScaleNanites == rhs.SaveContextTransferShipCostScaleNanites &&
		lhs.SaveContextTransferShipCostScaleUnits == rhs.SaveContextTransferShipCostScaleUnits &&
		lhs.SaveContextTransferWeaponCostScaleNanites == rhs.SaveContextTransferWeaponCostScaleNanites &&
		lhs.SaveContextTransferWeaponCostScaleUnits == rhs.SaveContextTransferWeaponCostScaleUnits &&
		lhs.AggressiveSentinelProbability == rhs.AggressiveSentinelProbability &&
		lhs.AggressiveSentinelProbabilitySurvival == rhs.AggressiveSentinelProbabilitySurvival &&
		lhs.AirLockDoorRange == rhs.AirLockDoorRange &&
		lhs.AlienPodThreshold1 == rhs.AlienPodThreshold1 &&
		lhs.AlienPodThreshold2 == rhs.AlienPodThreshold2 &&
		lhs.AllRecipesKnownNanitesMax == rhs.AllRecipesKnownNanitesMax &&
		lhs.AllRecipesKnownNanitesMin == rhs.AllRecipesKnownNanitesMin &&
		lhs.AngleFromBaseComputerWhenTeleporting == rhs.AngleFromBaseComputerWhenTeleporting &&
		lhs.AsteroidCarveRadius == rhs.AsteroidCarveRadius &&
		lhs.AsteroidHitForce == rhs.AsteroidHitForce &&
		lhs.AsteroidResourceReducer == rhs.AsteroidResourceReducer &&
		lhs.AsteroidScanMaxShown == rhs.AsteroidScanMaxShown &&
		lhs.AsteroidScanRange == rhs.AsteroidScanRange &&
		lhs.AsteroidScanTime == rhs.AsteroidScanTime &&
		lhs.AsteroidTorqueForce == rhs.AsteroidTorqueForce &&
		lhs.AtlasGunCurrencyConversion == rhs.AtlasGunCurrencyConversion &&
		lhs.AtmosphereEntryErrorTime == rhs.AtmosphereEntryErrorTime &&
		lhs.AtmosphereEntryFadeTimeFactor == rhs.AtmosphereEntryFadeTimeFactor &&
		lhs.AtmosphereEntryOffset == rhs.AtmosphereEntryOffset &&
		lhs.AtmosphereEntryTime == rhs.AtmosphereEntryTime &&
		lhs.AutoTranslateWordChance == rhs.AutoTranslateWordChance &&
		lhs.BackgroundSpaceEncounterCheckTimer == rhs.BackgroundSpaceEncounterCheckTimer &&
		lhs.BarrelOffset == rhs.BarrelOffset &&
		lhs.BaseBuildingHoverTimeToKnowPart == rhs.BaseBuildingHoverTimeToKnowPart &&
		lhs.BaseBuildingRemotePlayerErrorAlphaScanEffect == rhs.BaseBuildingRemotePlayerErrorAlphaScanEffect &&
		lhs.BaseFoodDuration == rhs.BaseFoodDuration &&
		lhs.BaseLaserHeatTime == rhs.BaseLaserHeatTime &&
		lhs.BeaconInteractRange == rhs.BeaconInteractRange &&
		lhs.BinocCreatureScanTime == rhs.BinocCreatureScanTime &&
		lhs.BinocMinScanTime == rhs.BinocMinScanTime &&
		lhs.BinocScanTime == rhs.BinocScanTime &&
		lhs.BinocTimeBeforeScan == rhs.BinocTimeBeforeScan &&
		lhs.BinocularScanTargetFadeTime == rhs.BinocularScanTargetFadeTime &&
		lhs.BinocularScanTargetHeightRange == rhs.BinocularScanTargetHeightRange &&
		lhs.BinocularScanTargetInitialFadeTime == rhs.BinocularScanTargetInitialFadeTime &&
		lhs.BinocularScanTargetLineWidth == rhs.BinocularScanTargetLineWidth &&
		lhs.BinocularScanTargetMinHeight == rhs.BinocularScanTargetMinHeight &&
		lhs.BinocularScanTargetScaler == rhs.BinocularScanTargetScaler &&
		lhs.BlackHoleJumpVoxelDist == rhs.BlackHoleJumpVoxelDist &&
		lhs.BlackHoleJumpVoxelVariation == rhs.BlackHoleJumpVoxelVariation &&
		lhs.BonusChildTypeElementsAdd == rhs.BonusChildTypeElementsAdd &&
		lhs.BonusChildTypeElementsMultiply == rhs.BonusChildTypeElementsMultiply &&
		lhs.BonusSameTypeElementsAdd == rhs.BonusSameTypeElementsAdd &&
		lhs.BonusSameTypeElementsMultiply == rhs.BonusSameTypeElementsMultiply &&
		lhs.BugFiendCap == rhs.BugFiendCap &&
		lhs.BuildingBeamDistance == rhs.BuildingBeamDistance &&
		lhs.BuildingPlayerBaseIconOffset == rhs.BuildingPlayerBaseIconOffset &&
		lhs.BulletTraceLineWidth == rhs.BulletTraceLineWidth &&
		lhs.CargoShieldStrength == rhs.CargoShieldStrength &&
		lhs.CockpitScale == rhs.CockpitScale &&
		lhs.CombatLevelBaseValueBoltcaster == rhs.CombatLevelBaseValueBoltcaster &&
		lhs.CombatLevelBaseValueCannon == rhs.CombatLevelBaseValueCannon &&
		lhs.CombatLevelBaseValueGrenade == rhs.CombatLevelBaseValueGrenade &&
		lhs.CombatLevelBaseValueRailgun == rhs.CombatLevelBaseValueRailgun &&
		lhs.CombatLevelBaseValueShotgun == rhs.CombatLevelBaseValueShotgun &&
		lhs.CombatLevelBaseValueSMG == rhs.CombatLevelBaseValueSMG &&
		lhs.CombatLevelBestWeaponBias == rhs.CombatLevelBestWeaponBias &&
		lhs.CombatLevelSClassValue == rhs.CombatLevelSClassValue &&
		lhs.CombatSpeedReadoutMultiplier == rhs.CombatSpeedReadoutMultiplier &&
		lhs.CommonProductEffectiveness == rhs.CommonProductEffectiveness &&
		lhs.CommunicatorCargoScanDroneAtOffsetFallback == rhs.CommunicatorCargoScanDroneAtOffsetFallback &&
		lhs.CommunicatorCargoScanDronePitch == rhs.CommunicatorCargoScanDronePitch &&
		lhs.CommunicatorCargoScanDroneRoll == rhs.CommunicatorCargoScanDroneRoll &&
		lhs.CommunicatorCargoScanDroneScale == rhs.CommunicatorCargoScanDroneScale &&
		lhs.CommunicatorCargoScanDroneScaleFallback == rhs.CommunicatorCargoScanDroneScaleFallback &&
		lhs.CommunicatorCargoScanDroneUpOffset == rhs.CommunicatorCargoScanDroneUpOffset &&
		lhs.CommunicatorCargoScanDroneUpOffsetFallback == rhs.CommunicatorCargoScanDroneUpOffsetFallback &&
		lhs.CommunicatorCargoScanDroneYaw == rhs.CommunicatorCargoScanDroneYaw &&
		lhs.CommunicatorFadeTime == rhs.CommunicatorFadeTime &&
		lhs.CommunicatorSpawnHeightOffset == rhs.CommunicatorSpawnHeightOffset &&
		lhs.CommunicatorSpawnOffset == rhs.CommunicatorSpawnOffset &&
		lhs.CommunicatorSpawnRotation == rhs.CommunicatorSpawnRotation &&
		lhs.CommunicatorSpawnScale == rhs.CommunicatorSpawnScale &&
		lhs.CorruptSentinelProbability == rhs.CorruptSentinelProbability &&
		lhs.CreatureMinScanTime == rhs.CreatureMinScanTime &&
		lhs.CreatureScanAngle == rhs.CreatureScanAngle &&
		lhs.CreatureScanStickyDecay == rhs.CreatureScanStickyDecay &&
		lhs.CreaturesToBaitForTutorial == rhs.CreaturesToBaitForTutorial &&
		lhs.CreaturesToFeedForTutorial == rhs.CreaturesToFeedForTutorial &&
		lhs.CritDamage == rhs.CritDamage &&
		lhs.CriticalHitMultiplier == rhs.CriticalHitMultiplier &&
		lhs.CritScale == rhs.CritScale &&
		lhs.CronusNaniteDonationMul == rhs.CronusNaniteDonationMul &&
		lhs.DeadPlanetGravityFactor == rhs.DeadPlanetGravityFactor &&
		lhs.DeathMoneyPenalty == rhs.DeathMoneyPenalty &&
		lhs.DebugScanForceBuildingType == rhs.DebugScanForceBuildingType &&
		lhs.DeepWaterJellyCrimeModMax == rhs.DeepWaterJellyCrimeModMax &&
		lhs.DeepWaterResourceMulMax == rhs.DeepWaterResourceMulMax &&
		lhs.DerelictPulseEncounterAtmosphericEffectChance == rhs.DerelictPulseEncounterAtmosphericEffectChance &&
		lhs.DestroyEffectHeight == rhs.DestroyEffectHeight &&
		lhs.DestroyEffectMaxScale == rhs.DestroyEffectMaxScale &&
		lhs.DistanceFromBaseComputerWhenTeleporting == rhs.DistanceFromBaseComputerWhenTeleporting &&
		lhs.DockNodeBuyRadius == rhs.DockNodeBuyRadius &&
		lhs.EarlyPiratesToBeKilled == rhs.EarlyPiratesToBeKilled &&
		lhs.EmergencyBuildingScanEventDistance == rhs.EmergencyBuildingScanEventDistance &&
		lhs.EmergencyBuildingScanEventTime == rhs.EmergencyBuildingScanEventTime &&
		lhs.EventTargetSpeed == rhs.EventTargetSpeed &&
		lhs.ExcitingNearRange == rhs.ExcitingNearRange &&
		lhs.ExcitingViewAngle == rhs.ExcitingViewAngle &&
		lhs.ExcitingViewRange == rhs.ExcitingViewRange &&
		lhs.ExplosionForce == rhs.ExplosionForce &&
		lhs.ExplosionForceMaxForceRadius == rhs.ExplosionForceMaxForceRadius &&
		lhs.ExplosionRadiusMultiplier == rhs.ExplosionRadiusMultiplier &&
		lhs.FourthRaceSpawnPercentage == rhs.FourthRaceSpawnPercentage &&
		lhs.FreighterBattleRadius == rhs.FreighterBattleRadius &&
		lhs.FreighterCargoPodHealthFraction == rhs.FreighterCargoPodHealthFraction &&
		lhs.FreighterFuelRodHealthFraction == rhs.FreighterFuelRodHealthFraction &&
		lhs.FreighterStartPecent == rhs.FreighterStartPecent &&
		lhs.GasGiantGravityFactor == rhs.GasGiantGravityFactor &&
		lhs.GoalGapVoxelDist == rhs.GoalGapVoxelDist &&
		lhs.GPSRandomChangeTimeBuilderCorruption == rhs.GPSRandomChangeTimeBuilderCorruption &&
		lhs.GPSRandomChangeTimeMid == rhs.GPSRandomChangeTimeMid &&
		lhs.GPSRandomChangeTimeNarrow == rhs.GPSRandomChangeTimeNarrow &&
		lhs.GPSRandomChangeTimeWide == rhs.GPSRandomChangeTimeWide &&
		lhs.GrabPlayerCooldownTime == rhs.GrabPlayerCooldownTime &&
		lhs.GuildStockReplenishTime == rhs.GuildStockReplenishTime &&
		lhs.GuildStockReplenishTimeSubstance == rhs.GuildStockReplenishTimeSubstance &&
		lhs.GunDownAngle == rhs.GunDownAngle &&
		lhs.GunOffsetAggressiveX == rhs.GunOffsetAggressiveX &&
		lhs.GunOffsetAggressiveY == rhs.GunOffsetAggressiveY &&
		lhs.GunOffsetAggressiveZ == rhs.GunOffsetAggressiveZ &&
		lhs.GunOffsetX == rhs.GunOffsetX &&
		lhs.GunOffsetY == rhs.GunOffsetY &&
		lhs.GunOffsetZ == rhs.GunOffsetZ &&
		lhs.GunUpAngle == rhs.GunUpAngle &&
		lhs.HardModeTechDamageHighPercent == rhs.HardModeTechDamageHighPercent &&
		lhs.HardModeTechDamageMidNum == rhs.HardModeTechDamageMidNum &&
		lhs.HardModeTechDamageMidPercent == rhs.HardModeTechDamageMidPercent &&
		lhs.HeatAlertTime == rhs.HeatAlertTime &&
		lhs.HeatDamageBoost == rhs.HeatDamageBoost &&
		lhs.HeatMaxPowerPoint == rhs.HeatMaxPowerPoint &&
		lhs.HeatWidthBoost == rhs.HeatWidthBoost &&
		lhs.HeatWidthBoostAlt == rhs.HeatWidthBoostAlt &&
		lhs.HitEffectMinTime == rhs.HitEffectMinTime &&
		lhs.HitOffset == rhs.HitOffset &&
		lhs.HmdInteractionRangeMinDistance == rhs.HmdInteractionRangeMinDistance &&
		lhs.HmdInteractionRangeMinRange == rhs.HmdInteractionRangeMinRange &&
		lhs.HmdInteractionRangeMultiplier == rhs.HmdInteractionRangeMultiplier &&
		lhs.HoursBetweenBattles == rhs.HoursBetweenBattles &&
		lhs.HoursBetweenMiniStation == rhs.HoursBetweenMiniStation &&
		lhs.HoverTimeToScan == rhs.HoverTimeToScan &&
		lhs.HoverTimeToScanCreatures == rhs.HoverTimeToScanCreatures &&
		lhs.HoverVisiblePointsNeeded == rhs.HoverVisiblePointsNeeded &&
		lhs.HUDArrowPrimaryScaler == rhs.HUDArrowPrimaryScaler &&
		lhs.HUDDamageOffset == rhs.HUDDamageOffset &&
		lhs.HUDDamageRadius == rhs.HUDDamageRadius &&
		lhs.HUDDamageScaler == rhs.HUDDamageScaler &&
		lhs.HUDLabelAngle == rhs.HUDLabelAngle &&
		lhs.HUDLabelAngleOffset == rhs.HUDLabelAngleOffset &&
		lhs.HUDLabelOffsetX == rhs.HUDLabelOffsetX &&
		lhs.HUDLabelOffsetY == rhs.HUDLabelOffsetY &&
		lhs.HUDLabelOffsetZ == rhs.HUDLabelOffsetZ &&
		lhs.HUDLabelScale == rhs.HUDLabelScale &&
		lhs.HUDLabelTime == rhs.HUDLabelTime &&
		lhs.HUDLockOnAudioTime == rhs.HUDLockOnAudioTime &&
		lhs.HUDReticuleMoveAim == rhs.HUDReticuleMoveAim &&
		lhs.HUDReticuleMoveBack == rhs.HUDReticuleMoveBack &&
		lhs.HUDScaleAdd == rhs.HUDScaleAdd &&
		lhs.HUDScaleFarTarget == rhs.HUDScaleFarTarget &&
		lhs.HUDScaleMax == rhs.HUDScaleMax &&
		lhs.HUDScaleMin == rhs.HUDScaleMin &&
		lhs.HUDScaleMinAim == rhs.HUDScaleMinAim &&
		lhs.HUDScaleRadius == rhs.HUDScaleRadius &&
		lhs.HUDStoreFlashTime == rhs.HUDStoreFlashTime &&
		lhs.IllegalTechProductTradingMod == rhs.IllegalTechProductTradingMod &&
		lhs.InfestedPlanetDeepSpaceFlybyMultiplier == rhs.InfestedPlanetDeepSpaceFlybyMultiplier &&
		lhs.InitialLocationProtectionRadiusMultiplier == rhs.InitialLocationProtectionRadiusMultiplier &&
		lhs.InteractionAttractTime == rhs.InteractionAttractTime &&
		lhs.InteractionComponentUpdateDistance == rhs.InteractionComponentUpdateDistance &&
		lhs.InteractionDescriptionTextTime == rhs.InteractionDescriptionTextTime &&
		lhs.InteractionMessageModuleDisplayTime == rhs.InteractionMessageModuleDisplayTime &&
		lhs.InteractionMinTimeBeforeHighlightedOptionSelection == rhs.InteractionMinTimeBeforeHighlightedOptionSelection &&
		lhs.InteractionMinTimeBetweenStickOptionHighlights == rhs.InteractionMinTimeBetweenStickOptionHighlights &&
		lhs.InteractionMinTimeForResponseText == rhs.InteractionMinTimeForResponseText &&
		lhs.InteractionOverrideFrom == rhs.InteractionOverrideFrom &&
		lhs.InteractionOverrideTo == rhs.InteractionOverrideTo &&
		lhs.InteractionPickupAngle == rhs.InteractionPickupAngle &&
		lhs.InteractionPickupRadius == rhs.InteractionPickupRadius &&
		lhs.InteractionStickOptionStrength == rhs.InteractionStickOptionStrength &&
		lhs.InteractionTorchFoV == rhs.InteractionTorchFoV &&
		lhs.InteractionTorchStrength == rhs.InteractionTorchStrength &&
		lhs.JumpToCenterFuelCost == rhs.JumpToCenterFuelCost &&
		lhs.LaserExplosionForce == rhs.LaserExplosionForce &&
		lhs.LaserExplosionForceMaxForceRadius == rhs.LaserExplosionForceMaxForceRadius &&
		lhs.LaserExplosionForceRadius == rhs.LaserExplosionForceRadius &&
		lhs.LaserRechargeHintThresholdEarly == rhs.LaserRechargeHintThresholdEarly &&
		lhs.LaserRechargeHintThresholdLate == rhs.LaserRechargeHintThresholdLate &&
		lhs.LightStrength == rhs.LightStrength &&
		lhs.LineWidth == rhs.LineWidth &&
		lhs.LockOffFactor == rhs.LockOffFactor &&
		lhs.LowSentinelProbability == rhs.LowSentinelProbability &&
		lhs.LowSentinelProbabilitySurvival == rhs.LowSentinelProbabilitySurvival &&
		lhs.MapFOV == rhs.MapFOV &&
		lhs.MapHeight == rhs.MapHeight &&
		lhs.MapOffset == rhs.MapOffset &&
		lhs.MapRadius == rhs.MapRadius &&
		lhs.MapTargetOffset == rhs.MapTargetOffset &&
		lhs.MaxActiveWeatherHazardGifts == rhs.MaxActiveWeatherHazardGifts &&
		lhs.MaxCookingRank == rhs.MaxCookingRank &&
		lhs.MaxDistanceForLadderTeleport == rhs.MaxDistanceForLadderTeleport &&
		lhs.MaxDronesAggressive == rhs.MaxDronesAggressive &&
		lhs.MaxDronesAggressiveSurvival == rhs.MaxDronesAggressiveSurvival &&
		lhs.MaxDronesLow == rhs.MaxDronesLow &&
		lhs.MaxDronesLowSurvival == rhs.MaxDronesLowSurvival &&
		lhs.MaxDronesNormal == rhs.MaxDronesNormal &&
		lhs.MaxDronesNormalSurvival == rhs.MaxDronesNormalSurvival &&
		lhs.MaxMeteorSurfaceAngle == rhs.MaxMeteorSurfaceAngle &&
		lhs.MaxNumMissionsFromMissionGiver == rhs.MaxNumMissionsFromMissionGiver &&
		lhs.MaxNumSameGroupTech == rhs.MaxNumSameGroupTech &&
		lhs.MaxPossibleShipDamagePotential == rhs.MaxPossibleShipDamagePotential &&
		lhs.MaxResourceCrystalBlobSize == rhs.MaxResourceCrystalBlobSize &&
		lhs.MaxRespawnOnGroundHeight == rhs.MaxRespawnOnGroundHeight &&
		lhs.MaxSpawnTime == rhs.MaxSpawnTime &&
		lhs.MaxStandingTechDiscount == rhs.MaxStandingTechDiscount &&
		lhs.MaxTorpedoesInFlight == rhs.MaxTorpedoesInFlight &&
		lhs.MeleeHintThresholdEarly == rhs.MeleeHintThresholdEarly &&
		lhs.MeleeHintThresholdLate == rhs.MeleeHintThresholdLate &&
		lhs.MinCookingRank == rhs.MinCookingRank &&
		lhs.MissileApproachTime == rhs.MissileApproachTime &&
		lhs.MissileBrakeForceMax == rhs.MissileBrakeForceMax &&
		lhs.MissileBrakeForceMin == rhs.MissileBrakeForceMin &&
		lhs.MissileBrakeTime == rhs.MissileBrakeTime &&
		lhs.MissileForceMax == rhs.MissileForceMax &&
		lhs.MissileForceMin == rhs.MissileForceMin &&
		lhs.MissileHitRadius == rhs.MissileHitRadius &&
		lhs.MissileLockTime == rhs.MissileLockTime &&
		lhs.MissileMaxSpeed == rhs.MissileMaxSpeed &&
		lhs.MissileMaxTurnAngle == rhs.MissileMaxTurnAngle &&
		lhs.MissileMinCircleTime == rhs.MissileMinCircleTime &&
		lhs.MissileOffset == rhs.MissileOffset &&
		lhs.MissileReloadTime == rhs.MissileReloadTime &&
		lhs.MissileRotateMax == rhs.MissileRotateMax &&
		lhs.MissileRotateMin == rhs.MissileRotateMin &&
		lhs.MissileRotateSpeed == rhs.MissileRotateSpeed &&
		lhs.MissileThreatTime == rhs.MissileThreatTime &&
		lhs.MissionEventAllowResetDistance == rhs.MissionEventAllowResetDistance &&
		lhs.MissionSurveyAutoScanDistance == rhs.MissionSurveyAutoScanDistance &&
		lhs.MissionSurveyAutoScanFlattenRadiusMul == rhs.MissionSurveyAutoScanFlattenRadiusMul &&
		lhs.MissionSurveyBeginScanPercentageEvent == rhs.MissionSurveyBeginScanPercentageEvent &&
		lhs.MissionSurveyBeginScanPercentageScannable == rhs.MissionSurveyBeginScanPercentageScannable &&
		lhs.MissionSurveyInShipArrivedDistance == rhs.MissionSurveyInShipArrivedDistance &&
		lhs.MissionSurveyMarkerAutoHideTime == rhs.MissionSurveyMarkerAutoHideTime &&
		lhs.MissionSurveyMaxAngleOffset == rhs.MissionSurveyMaxAngleOffset &&
		lhs.MissionSurveyMaxGuidanceDistance == rhs.MissionSurveyMaxGuidanceDistance &&
		lhs.MissionSurveyMaxGuidanceDistanceWorms == rhs.MissionSurveyMaxGuidanceDistanceWorms &&
		lhs.MissionSurveyMaxScanAngle == rhs.MissionSurveyMaxScanAngle &&
		lhs.MissionSurveyMaxScanAngleScannableComp == rhs.MissionSurveyMaxScanAngleScannableComp &&
		lhs.MissionSurveyMaxSignalConeAngle == rhs.MissionSurveyMaxSignalConeAngle &&
		lhs.MissionSurveyRevealWithoutScanDistance == rhs.MissionSurveyRevealWithoutScanDistance &&
		lhs.MissionSurveyScanRangeMultiplier == rhs.MissionSurveyScanRangeMultiplier &&
		lhs.MissionSurveyScanSpeed == rhs.MissionSurveyScanSpeed &&
		lhs.MissionSurveyScanSpeedScannableComp == rhs.MissionSurveyScanSpeedScannableComp &&
		lhs.MissionSurveySonarMaxPulseSpeed == rhs.MissionSurveySonarMaxPulseSpeed &&
		lhs.MissionSurveySonarMinPulseSpeed == rhs.MissionSurveySonarMinPulseSpeed &&
		lhs.MissionSurveySonarPulseSpeedBandCount == rhs.MissionSurveySonarPulseSpeedBandCount &&
		lhs.MouseSensitivity == rhs.MouseSensitivity &&
		lhs.MouseSensitivityShip == rhs.MouseSensitivityShip &&
		lhs.MouseSensitivityVehicle == rhs.MouseSensitivityVehicle &&
		lhs.MultidimensionalFadeTime == rhs.MultidimensionalFadeTime &&
		lhs.NewDiscoveryDisplayTime == rhs.NewDiscoveryDisplayTime &&
		lhs.NexusRecipeCostNaniteMultiplier == rhs.NexusRecipeCostNaniteMultiplier &&
		lhs.NonAggressiveLushSurvivalProbabability == rhs.NonAggressiveLushSurvivalProbabability &&
		lhs.NonDominantRaceSpawnPercentage == rhs.NonDominantRaceSpawnPercentage &&
		lhs.NonDominantRaceSpawnPercentagePirate == rhs.NonDominantRaceSpawnPercentagePirate &&
		lhs.NonNaturalCostMul == rhs.NonNaturalCostMul &&
		lhs.NormalModeHeatBonus == rhs.NormalModeHeatBonus &&
		lhs.NPCNavNodeSearchUpDistScaling == rhs.NPCNavNodeSearchUpDistScaling &&
		lhs.NPCWaitWhenRevealedTime == rhs.NPCWaitWhenRevealedTime &&
		lhs.NumMissionsPerSolarSystem == rhs.NumMissionsPerSolarSystem &&
		lhs.OffscreenFadeDistance == rhs.OffscreenFadeDistance &&
		lhs.OffscreenMinDot == rhs.OffscreenMinDot &&
		lhs.OverheatDecay == rhs.OverheatDecay &&
		lhs.OverheatGenerosity == rhs.OverheatGenerosity &&
		lhs.PainTime == rhs.PainTime &&
		lhs.PartyPlanetSearchDistance == rhs.PartyPlanetSearchDistance &&
		lhs.PersonalInventoryMinHeightMax == rhs.PersonalInventoryMinHeightMax &&
		lhs.PersonalInventoryMinWidthMax == rhs.PersonalInventoryMinWidthMax &&
		lhs.PersonalTechInventoryMinHeightMax == rhs.PersonalTechInventoryMinHeightMax &&
		lhs.PersonalTechInventoryMinWidthMax == rhs.PersonalTechInventoryMinWidthMax &&
		lhs.PirateEarlySpawnTime == rhs.PirateEarlySpawnTime &&
		lhs.PirateFreighterBattleNoTargetLeaderTime == rhs.PirateFreighterBattleNoTargetLeaderTime &&
		lhs.PirateFreighterBeginFleeHealthFraction == rhs.PirateFreighterBeginFleeHealthFraction &&
		lhs.PirateFreighterFrigateCountForReinforce == rhs.PirateFreighterFrigateCountForReinforce &&
		lhs.PirateFreighterRewardDelayTime == rhs.PirateFreighterRewardDelayTime &&
		lhs.PirateFreighterRewardDelayTimeEscaped == rhs.PirateFreighterRewardDelayTimeEscaped &&
		lhs.PirateFreighterRewardMessageDelayTime == rhs.PirateFreighterRewardMessageDelayTime &&
		lhs.PirateFreighterRewardMessageDelayTimeEscaped == rhs.PirateFreighterRewardMessageDelayTimeEscaped &&
		lhs.PirateFreighterWarpChargeTime == rhs.PirateFreighterWarpChargeTime &&
		lhs.PirateFreighterWarpChargeTimeToAddPerBrokenEngine == rhs.PirateFreighterWarpChargeTimeToAddPerBrokenEngine &&
		lhs.PirateGroundAccelerator == rhs.PirateGroundAccelerator &&
		lhs.PirateGroundInventoryAccelerator == rhs.PirateGroundInventoryAccelerator &&
		lhs.PirateInterestDistance == rhs.PirateInterestDistance &&
		lhs.PirateInterestDistanceMPMission == rhs.PirateInterestDistanceMPMission &&
		lhs.PirateInterestOverride == rhs.PirateInterestOverride &&
		lhs.PirateRaidAccelerator == rhs.PirateRaidAccelerator &&
		lhs.PlanetPirateFlybyMaxRepeatCounter == rhs.PlanetPirateFlybyMaxRepeatCounter &&
		lhs.PlayerAmbientSpotLightIntensity == rhs.PlayerAmbientSpotLightIntensity &&
		lhs.PlayerAmbientSpotLightOffsetY == rhs.PlayerAmbientSpotLightOffsetY &&
		lhs.PlayerAmbientSpotLightOffsetZ == rhs.PlayerAmbientSpotLightOffsetZ &&
		lhs.PoliceAcceleratorNoCargoNormal == rhs.PoliceAcceleratorNoCargoNormal &&
		lhs.PoliceAcceleratorNoCargoSkipScanOdds == rhs.PoliceAcceleratorNoCargoSkipScanOdds &&
		lhs.PoliceAcceleratorNoCargoWealthy == rhs.PoliceAcceleratorNoCargoWealthy &&
		lhs.PoliceAcceleratorPulseExtra == rhs.PoliceAcceleratorPulseExtra &&
		lhs.PoliceAcceleratorSmugglingItemsMax == rhs.PoliceAcceleratorSmugglingItemsMax &&
		lhs.PoliceAcceleratorSmugglingMulMax == rhs.PoliceAcceleratorSmugglingMulMax &&
		lhs.PoliceAcceleratorStationLockOn == rhs.PoliceAcceleratorStationLockOn &&
		lhs.PoliceInterestDistance == rhs.PoliceInterestDistance &&
		lhs.PoliceInterestDistanceMPMission == rhs.PoliceInterestDistanceMPMission &&
		lhs.PoliceInterestOverride == rhs.PoliceInterestOverride &&
		lhs.ProductItemStockDecayTime == rhs.ProductItemStockDecayTime &&
		lhs.ProductItemStockReplenishTime == rhs.ProductItemStockReplenishTime &&
		lhs.ProjectileLightIntensity == rhs.ProjectileLightIntensity &&
		lhs.ProjectileSpeedBoost == rhs.ProjectileSpeedBoost &&
		lhs.PulseEncounterChance == rhs.PulseEncounterChance &&
		lhs.PulseEncounterChanceBlue == rhs.PulseEncounterChanceBlue &&
		lhs.PulseEncounterChanceGreen == rhs.PulseEncounterChanceGreen &&
		lhs.PulseEncounterChanceRed == rhs.PulseEncounterChanceRed &&
		lhs.PulseEncounterChanceStandard == rhs.PulseEncounterChanceStandard &&
		lhs.PulseEncounterCheckTimer == rhs.PulseEncounterCheckTimer &&
		lhs.PulseEncounterStopPower == rhs.PulseEncounterStopPower &&
		lhs.PulseEncounterStopSpeed == rhs.PulseEncounterStopSpeed &&
		lhs.RareProductEffectiveness == rhs.RareProductEffectiveness &&
		lhs.RareSubstanceEffectiveness == rhs.RareSubstanceEffectiveness &&
		lhs.RefinerProductsMadeInTime == rhs.RefinerProductsMadeInTime &&
		lhs.RefinerProductsMadeInTimeSurvival == rhs.RefinerProductsMadeInTimeSurvival &&
		lhs.RefinerSubsMadeInTime == rhs.RefinerSubsMadeInTime &&
		lhs.RefinerSubsMadeInTimeSurvival == rhs.RefinerSubsMadeInTimeSurvival &&
		lhs.ResourceCommonMaxAmount == rhs.ResourceCommonMaxAmount &&
		lhs.ResourceCommonMinAmount == rhs.ResourceCommonMinAmount &&
		lhs.ResourceCommonReducer == rhs.ResourceCommonReducer &&
		lhs.ResourceDirtMaxAmount == rhs.ResourceDirtMaxAmount &&
		lhs.ResourceDirtMinAmount == rhs.ResourceDirtMinAmount &&
		lhs.ResourceDirtReducer == rhs.ResourceDirtReducer &&
		lhs.ResourceMaxAmount == rhs.ResourceMaxAmount &&
		lhs.ResourceMinAmount == rhs.ResourceMinAmount &&
		lhs.ResourceParticleMaxNum == rhs.ResourceParticleMaxNum &&
		lhs.ResourceParticleMinNum == rhs.ResourceParticleMinNum &&
		lhs.ResourceParticleSpeed == rhs.ResourceParticleSpeed &&
		lhs.ResourceParticleSpread == rhs.ResourceParticleSpread &&
		lhs.ResourceReducer == rhs.ResourceReducer &&
		lhs.RocketLockerFuelUse == rhs.RocketLockerFuelUse &&
		lhs.SalvageShipExplodeShipDistance == rhs.SalvageShipExplodeShipDistance &&
		lhs.SalvageShipExplodeSpeed == rhs.SalvageShipExplodeSpeed &&
		lhs.SalvageShipHeightOffset == rhs.SalvageShipHeightOffset &&
		lhs.SalvageShipOneRevolutionTime == rhs.SalvageShipOneRevolutionTime &&
		lhs.SalvageShipPitch == rhs.SalvageShipPitch &&
		lhs.SalvageShipShowShipDistance == rhs.SalvageShipShowShipDistance &&
		lhs.SalvageShipShowShipSpeed == rhs.SalvageShipShowShipSpeed &&
		lhs.SalvageShipShowShipSpeedSwitching == rhs.SalvageShipShowShipSpeedSwitching &&
		lhs.SalvageSubstanceValueThreshold == rhs.SalvageSubstanceValueThreshold &&
		lhs.SalvageValueAsProds == rhs.SalvageValueAsProds &&
		lhs.SalvageWeaponHeightOffset == rhs.SalvageWeaponHeightOffset &&
		lhs.SalvageWeaponMaxSize == rhs.SalvageWeaponMaxSize &&
		lhs.SalvageWeaponPitch == rhs.SalvageWeaponPitch &&
		lhs.SalvageWeaponScale == rhs.SalvageWeaponScale &&
		lhs.ScanAngle == rhs.ScanAngle &&
		lhs.ScanAngleCutoff == rhs.ScanAngleCutoff &&
		lhs.ScannableComponentMarkerOffset == rhs.ScannableComponentMarkerOffset &&
		lhs.ScannableComponentPlaceMarkerOffset == rhs.ScannableComponentPlaceMarkerOffset &&
		lhs.ScannerAnalyzeFXRate == rhs.ScannerAnalyzeFXRate &&
		lhs.ScannerIconsClumpRadius == rhs.ScannerIconsClumpRadius &&
		lhs.ScannerMarkerFadeTime == rhs.ScannerMarkerFadeTime &&
		lhs.ScannerPhysicsProbeAABBSize == rhs.ScannerPhysicsProbeAABBSize &&
		lhs.ScannerSmallMarkerFadeTime == rhs.ScannerSmallMarkerFadeTime &&
		lhs.ScannerSubstanceTimePerTrigger == rhs.ScannerSubstanceTimePerTrigger &&
		lhs.ScannerTuningA == rhs.ScannerTuningA &&
		lhs.ScannerTuningB == rhs.ScannerTuningB &&
		lhs.ScannerTuningC == rhs.ScannerTuningC &&
		lhs.ScannerTuningD == rhs.ScannerTuningD &&
		lhs.ScannerTuningResourceOffset1 == rhs.ScannerTuningResourceOffset1 &&
		lhs.ScannerTuningResourceOffset2 == rhs.ScannerTuningResourceOffset2 &&
		lhs.ScannerTuningSmoothStepAmount == rhs.ScannerTuningSmoothStepAmount &&
		lhs.ScannerTuningTrailingEdge == rhs.ScannerTuningTrailingEdge &&
		lhs.ScanStartTimeDelayMinDist == rhs.ScanStartTimeDelayMinDist &&
		lhs.ScanStartTimeDelayRange == rhs.ScanStartTimeDelayRange &&
		lhs.ScanStartTimeDistanceDelayTime == rhs.ScanStartTimeDistanceDelayTime &&
		lhs.ScanStickyDecay == rhs.ScanStickyDecay &&
		lhs.ScanToRevealDelayOverride == rhs.ScanToRevealDelayOverride &&
		lhs.ScanToRevealVFXBaseScalingSize == rhs.ScanToRevealVFXBaseScalingSize &&
		lhs.ScrapDroneProbability == rhs.ScrapDroneProbability &&
		lhs.SeasonalMessageModuleAttractDistanceMul == rhs.SeasonalMessageModuleAttractDistanceMul &&
		lhs.SentinelsHigh == rhs.SentinelsHigh &&
		lhs.SentinelsLow == rhs.SentinelsLow &&
		lhs.ShipBulletTraceLineWidth == rhs.ShipBulletTraceLineWidth &&
		lhs.ShipDisplayDamageMultiplier == rhs.ShipDisplayDamageMultiplier &&
		lhs.ShipInteractRadius == rhs.ShipInteractRadius &&
		lhs.ShipInterestAcceleratorInAsteroidField == rhs.ShipInterestAcceleratorInAsteroidField &&
		lhs.ShipInventoryMinHeightMax == rhs.ShipInventoryMinHeightMax &&
		lhs.ShipInventoryMinWidthMax == rhs.ShipInventoryMinWidthMax &&
		lhs.ShipMiningMul == rhs.ShipMiningMul &&
		lhs.ShipScanOffset == rhs.ShipScanOffset &&
		lhs.ShipScanOffsetGap == rhs.ShipScanOffsetGap &&
		lhs.ShipScanPlanetRechargeMultiplier == rhs.ShipScanPlanetRechargeMultiplier &&
		lhs.ShipScanSpaceRechargeMultiplier == rhs.ShipScanSpaceRechargeMultiplier &&
		lhs.ShipTechInventoryMinHeightMax == rhs.ShipTechInventoryMinHeightMax &&
		lhs.ShipTechInventoryMinWidthMax == rhs.ShipTechInventoryMinWidthMax &&
		lhs.ShootableAggroForgetTime == rhs.ShootableAggroForgetTime &&
		lhs.ShootableAggroMinStartTime == rhs.ShootableAggroMinStartTime &&
		lhs.ShootableArmourHighlightHitTime == rhs.ShootableArmourHighlightHitTime &&
		lhs.SimpleInteractionMessageTime == rhs.SimpleInteractionMessageTime &&
		lhs.SimpleInteractionPickupAngle == rhs.SimpleInteractionPickupAngle &&
		lhs.SimpleInteractionPickupRadius == rhs.SimpleInteractionPickupRadius &&
		lhs.SmugglerSellingMarkup == rhs.SmugglerSellingMarkup &&
		lhs.SpaceBattleAnyHostileShipsRadius == rhs.SpaceBattleAnyHostileShipsRadius &&
		lhs.SpaceBattleMaxTorpedosTargetingLeaderShip == rhs.SpaceBattleMaxTorpedosTargetingLeaderShip &&
		lhs.SpaceBattleMaxTorpedosTargetingNonLeaderShip == rhs.SpaceBattleMaxTorpedosTargetingNonLeaderShip &&
		lhs.SpaceBattleRadius == rhs.SpaceBattleRadius &&
		lhs.SpaceCombatRadius == rhs.SpaceCombatRadius &&
		lhs.SpaceSpeedReadoutMultiplier == rhs.SpaceSpeedReadoutMultiplier &&
		lhs.SpawnerWeaponRange == rhs.SpawnerWeaponRange &&
		lhs.SpecialMiningAmount == rhs.SpecialMiningAmount &&
		lhs.SpecialMiningTime == rhs.SpecialMiningTime &&
		lhs.SpecialTechSlotBonus == rhs.SpecialTechSlotBonus &&
		lhs.SpeedReadoutMultiplier == rhs.SpeedReadoutMultiplier &&
		lhs.SpookMessageChance == rhs.SpookMessageChance &&
		lhs.SpookMessageCooldown == rhs.SpookMessageCooldown &&
		lhs.SpookMessageThreshold == rhs.SpookMessageThreshold &&
		lhs.StormBonusJetpackMod == rhs.StormBonusJetpackMod &&
		lhs.StormBonusJetpackWeather == rhs.StormBonusJetpackWeather &&
		lhs.StormBonusMiningAmountMod == rhs.StormBonusMiningAmountMod &&
		lhs.StormBonusMiningAmountWeather == rhs.StormBonusMiningAmountWeather &&
		lhs.StormBonusMiningHeatMod == rhs.StormBonusMiningHeatMod &&
		lhs.StormBonusMiningHeatWeather == rhs.StormBonusMiningHeatWeather &&
		lhs.StormBonusSprintMod == rhs.StormBonusSprintMod &&
		lhs.StormBonusSprintWeather == rhs.StormBonusSprintWeather &&
		lhs.StormGravityChangeTime == rhs.StormGravityChangeTime &&
		lhs.SubstanceItemStockDecayTime == rhs.SubstanceItemStockDecayTime &&
		lhs.SubstanceItemStockReplenishTime == rhs.SubstanceItemStockReplenishTime &&
		lhs.SurveyBeginScanPercentage == rhs.SurveyBeginScanPercentage &&
		lhs.SurveyMaxDistance == rhs.SurveyMaxDistance &&
		lhs.SurveyScanMaxSpeed == rhs.SurveyScanMaxSpeed &&
		lhs.SurveyScanMinSpeed == rhs.SurveyScanMinSpeed &&
		lhs.SurveySonarMaxPulseSpeed == rhs.SurveySonarMaxPulseSpeed &&
		lhs.SurveySonarMiddleRangeMax == rhs.SurveySonarMiddleRangeMax &&
		lhs.SurveySonarMiddleRangeMin == rhs.SurveySonarMiddleRangeMin &&
		lhs.SurveySonarMinPulseSpeed == rhs.SurveySonarMinPulseSpeed &&
		lhs.SurveySonarPulseSpeedBandCount == rhs.SurveySonarPulseSpeedBandCount &&
		lhs.TapInteractionDecay == rhs.TapInteractionDecay &&
		lhs.TapInteractionIncreaseAmount == rhs.TapInteractionIncreaseAmount &&
		lhs.TechDamageChanceShieldedMax == rhs.TechDamageChanceShieldedMax &&
		lhs.TechDamageChanceShieldLevelMax == rhs.TechDamageChanceShieldLevelMax &&
		lhs.TechDamageChanceShieldLevelMin == rhs.TechDamageChanceShieldLevelMin &&
		lhs.TechDamageChanceToSelectPrimary == rhs.TechDamageChanceToSelectPrimary &&
		lhs.TechnologyOverrideForSmuggler == rhs.TechnologyOverrideForSmuggler &&
		lhs.TeleporterDistanceTravelledMultiplier == rhs.TeleporterDistanceTravelledMultiplier &&
		lhs.TerrainResourceCompassRange == rhs.TerrainResourceCompassRange &&
		lhs.TerrainResourceScanRange == rhs.TerrainResourceScanRange &&
		lhs.TerrainResourceScanTime == rhs.TerrainResourceScanTime &&
		lhs.TimeToDisplayScanResults == rhs.TimeToDisplayScanResults &&
		lhs.TorchCookieIndex == rhs.TorchCookieIndex &&
		lhs.TorchDimCookieIndex == rhs.TorchDimCookieIndex &&
		lhs.TorchDimFoV == rhs.TorchDimFoV &&
		lhs.TorchDimStrength == rhs.TorchDimStrength &&
		lhs.TorchFollowCameraPitch == rhs.TorchFollowCameraPitch &&
		lhs.TorchFollowCameraTime == rhs.TorchFollowCameraTime &&
		lhs.TorchFoV == rhs.TorchFoV &&
		lhs.TorchHandOffsetX == rhs.TorchHandOffsetX &&
		lhs.TorchHandOffsetY == rhs.TorchHandOffsetY &&
		lhs.TorchHandOffsetZ == rhs.TorchHandOffsetZ &&
		lhs.TorchOffsetX == rhs.TorchOffsetX &&
		lhs.TorchOffsetY == rhs.TorchOffsetY &&
		lhs.TorchOffsetZ == rhs.TorchOffsetZ &&
		lhs.TorchOffsetZMin == rhs.TorchOffsetZMin &&
		lhs.TorchOffsetZMinSpeed == rhs.TorchOffsetZMinSpeed &&
		lhs.TorchOffsetZSpeedRange == rhs.TorchOffsetZSpeedRange &&
		lhs.TorchRotation == rhs.TorchRotation &&
		lhs.TorchStaffOffsetY == rhs.TorchStaffOffsetY &&
		lhs.TorchStaffOffsetZ == rhs.TorchStaffOffsetZ &&
		lhs.TorchStaffOffsetZMin == rhs.TorchStaffOffsetZMin &&
		lhs.TorchStrength == rhs.TorchStrength &&
		lhs.TorpedoCooldown == rhs.TorpedoCooldown &&
		lhs.TorpedoCooldownRandomExtra == rhs.TorpedoCooldownRandomExtra &&
		lhs.TorpedoInitialWait == rhs.TorpedoInitialWait &&
		lhs.TorpedoLaunchWarning == rhs.TorpedoLaunchWarning &&
		lhs.TunnelStatReducer == rhs.TunnelStatReducer &&
		lhs.TurretAITargetingDistanceFactor == rhs.TurretAITargetingDistanceFactor &&
		lhs.TurretAITargetingFocusPlayerFactor == rhs.TurretAITargetingFocusPlayerFactor &&
		lhs.TurretAITargetingLastHitFactor == rhs.TurretAITargetingLastHitFactor &&
		lhs.TurretAITargetingPitchAngleFactor == rhs.TurretAITargetingPitchAngleFactor &&
		lhs.TurretAITargetingYawAngleFactor == rhs.TurretAITargetingYawAngleFactor &&
		lhs.UndergroundTorchFoV == rhs.UndergroundTorchFoV &&
		lhs.UndergroundTorchStrength == rhs.UndergroundTorchStrength &&
		lhs.UnderwaterAmbientLightStrength == rhs.UnderwaterAmbientLightStrength &&
		lhs.UnderwaterLightningDamageDistanceMultiplier == rhs.UnderwaterLightningDamageDistanceMultiplier &&
		lhs.UnderwaterTorchFoV == rhs.UnderwaterTorchFoV &&
		lhs.UnderwaterTorchStrengthMax == rhs.UnderwaterTorchStrengthMax &&
		lhs.UnderwaterTorchVolumetricStrength == rhs.UnderwaterTorchVolumetricStrength &&
		lhs.VehicleAllIconScanTime == rhs.VehicleAllIconScanTime &&
		lhs.VehicleInventoryMinHeightMax == rhs.VehicleInventoryMinHeightMax &&
		lhs.VehicleInventoryMinWidthMax == rhs.VehicleInventoryMinWidthMax &&
		lhs.ViciousSentinelProbability == rhs.ViciousSentinelProbability &&
		lhs.ViciousStormProbability == rhs.ViciousStormProbability &&
		lhs.ViciousWeatherProbability == rhs.ViciousWeatherProbability &&
		lhs.VoxelAsteroidResourceChance == rhs.VoxelAsteroidResourceChance &&
		lhs.WarpsBetweenBattles == rhs.WarpsBetweenBattles &&
		lhs.WarpsBetweenMiniStation == rhs.WarpsBetweenMiniStation &&
		lhs.WaterLandingDamageMultiplier == rhs.WaterLandingDamageMultiplier &&
		lhs.WaypointScanTime == rhs.WaypointScanTime &&
		lhs.WeaponInventoryMinHeightMax == rhs.WeaponInventoryMinHeightMax &&
		lhs.WeaponInventoryMinWidthMax == rhs.WeaponInventoryMinWidthMax &&
		lhs.WeatherHazardGiftLifeTime == rhs.WeatherHazardGiftLifeTime &&
		lhs.WeatherHazardGiftMaxDistance == rhs.WeatherHazardGiftMaxDistance &&
		lhs.ZoomFindBuildingRange == rhs.ZoomFindBuildingRange &&
		lhs.DepotResource == rhs.DepotResource &&
		lhs.RobotResource == rhs.RobotResource &&
		lhs.AllowBinocularMarker == rhs.AllowBinocularMarker &&
		lhs.AllowDeconstruct == rhs.AllowDeconstruct &&
		lhs.AllowSpaceScanEvents == rhs.AllowSpaceScanEvents &&
		lhs.AtmosphereEntryCurve == rhs.AtmosphereEntryCurve &&
		lhs.Autolevel == rhs.Autolevel &&
		lhs.BinocsDisplayUnknownCreatures == rhs.BinocsDisplayUnknownCreatures &&
		lhs.BinocularScanTargetHeightCurve == rhs.BinocularScanTargetHeightCurve &&
		lhs.CanMoveTechnology == rhs.CanMoveTechnology &&
		lhs.ChangePricesLocally == rhs.ChangePricesLocally &&
		lhs.DebugDrawTriggerBoxes == rhs.DebugDrawTriggerBoxes &&
		lhs.DebugPrintShootables == rhs.DebugPrintShootables &&
		lhs.DebugScanForceBuilding == rhs.DebugScanForceBuilding &&
		lhs.DisableAnomalyAmbientSpawn == rhs.DisableAnomalyAmbientSpawn &&
		lhs.DisableBasePowerHUDOverlay == rhs.DisableBasePowerHUDOverlay &&
		lhs.DisableGalaxyMapInQuickMenu == rhs.DisableGalaxyMapInQuickMenu &&
		lhs.DisableNexusInQuickMenu == rhs.DisableNexusInQuickMenu &&
		lhs.EnableShootHitEffect == rhs.EnableShootHitEffect &&
		lhs.EnableTechPackaging == rhs.EnableTechPackaging &&
		lhs.EnableTeleporters == rhs.EnableTeleporters &&
		lhs.EveryMaintenanceIsBroken == rhs.EveryMaintenanceIsBroken &&
		lhs.FailToFindBuildings == rhs.FailToFindBuildings &&
		lhs.FreighterRequiresRGBHyperdriveUpgrades == rhs.FreighterRequiresRGBHyperdriveUpgrades &&
		lhs.HUDUpdateFromData == rhs.HUDUpdateFromData &&
		lhs.InstallTechWithInteraction == rhs.InstallTechWithInteraction &&
		lhs.InteractionOverride == rhs.InteractionOverride &&
		lhs.KeepAttackingMaxWantedLevel == rhs.KeepAttackingMaxWantedLevel &&
		lhs.MissionSurveySuggestSurveyForNearScannables == rhs.MissionSurveySuggestSurveyForNearScannables &&
		lhs.OverheatColourCurve == rhs.OverheatColourCurve &&
		lhs.OverheatColourCurveShip == rhs.OverheatColourCurveShip &&
		lhs.OverheatCurve == rhs.OverheatCurve &&
		lhs.PainCurve == rhs.PainCurve &&
		lhs.PlayHitEffectsOnZeroDamage == rhs.PlayHitEffectsOnZeroDamage &&
		lhs.RewardInventoryClassItemFromShipSalvage == rhs.RewardInventoryClassItemFromShipSalvage &&
		lhs.ScanToRevealIgnoreRequirements == rhs.ScanToRevealIgnoreRequirements &&
		lhs.ScanToRevealNPCsAlwaysTriggersCameraEvent == rhs.ScanToRevealNPCsAlwaysTriggersCameraEvent &&
		lhs.ShipScanCurve == rhs.ShipScanCurve &&
		lhs.ShowPriceMarkupsAsPercentages == rhs.ShowPriceMarkupsAsPercentages &&
		lhs.SpawnResourceBlobsOnPartDelete == rhs.SpawnResourceBlobsOnPartDelete &&
		lhs.TechMustBeInTechInventory == rhs.TechMustBeInTechInventory &&
		lhs.TorchDisabledInTheDay == rhs.TorchDisabledInTheDay &&
		lhs.UseCustomSaveDirectory == rhs.UseCustomSaveDirectory &&
		lhs.UseDebugScan == rhs.UseDebugScan &&
		lhs.UseMultiplierBonus == rhs.UseMultiplierBonus &&
		lhs.UseOverheatColour == rhs.UseOverheatColour &&
		lhs.UseSecondaryBiomeSubstances == rhs.UseSecondaryBiomeSubstances &&
		lhs.UseTradingCostTable == rhs.UseTradingCostTable;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcMissionConditionIsScanEventLocal
struct GcMissionConditionIsScanEventLocalOrNear
{
	NMS_GameComponents::GcMissionConditionIsScanEventLocal Local;
	float MaxDistance;

	friend bool operator==(const GcMissionConditionIsScanEventLocalOrNear& lhs, const GcMissionConditionIsScanEventLocalOrNear& rhs) 
	{
		return lhs.Local == rhs.Local &&
		lhs.MaxDistance == rhs.MaxDistance;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventOnCurrentPlanet
{
	NMS::NMSString0x20A Event;
	bool AllowInShip;

	friend bool operator==(const GcMissionConditionIsScanEventOnCurrentPlanet& lhs, const GcMissionConditionIsScanEventOnCurrentPlanet& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.AllowInShip == rhs.AllowInShip;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventRepaired
{
	NMS::NMSString0x20A Event;
	bool CheckForAllRepairsInBuilding;
	bool OnlyCheckRequiresEmptySlotTypes;

	friend bool operator==(const GcMissionConditionIsScanEventRepaired& lhs, const GcMissionConditionIsScanEventRepaired& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.CheckForAllRepairsInBuilding == rhs.CheckForAllRepairsInBuilding &&
		lhs.OnlyCheckRequiresEmptySlotTypes == rhs.OnlyCheckRequiresEmptySlotTypes;
	}
};

//Dependency: GcItemNeedPurpose
struct GcMissionConditionItemCostsEnabled
{
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool Enabled;

	friend bool operator==(const GcMissionConditionItemCostsEnabled& lhs, const GcMissionConditionItemCostsEnabled& rhs) 
	{
		return lhs.Purpose == rhs.Purpose &&
		lhs.Enabled == rhs.Enabled;
	}
};

struct GcMissionConditionLocalScanActive
{

	friend bool operator==(const GcMissionConditionLocalScanActive& lhs, const GcMissionConditionLocalScanActive& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionLocalSystemHasTradeSurgeGoods
{

	friend bool operator==(const GcMissionConditionLocalSystemHasTradeSurgeGoods& lhs, const GcMissionConditionLocalSystemHasTradeSurgeGoods& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionMessageBeaconsQuery
{
	int32_t MaxPartsFound;
	int32_t MinPartsFound;
	float SearchDistanceLimit;

	friend bool operator==(const GcMissionConditionMessageBeaconsQuery& lhs, const GcMissionConditionMessageBeaconsQuery& rhs) 
	{
		return lhs.MaxPartsFound == rhs.MaxPartsFound &&
		lhs.MinPartsFound == rhs.MinPartsFound &&
		lhs.SearchDistanceLimit == rhs.SearchDistanceLimit;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionMissionCompleted
{
	NMS::NMSString0x10 MissionID;
	int32_t CalculateSeasonalSeedFromStageIndexOffset;
	int32_t SeasonalMissionSeed;
	bool CalculateTextMissionTargetFromStageIndex;
	bool TakeIDFromSeasonData;

	friend bool operator==(const GcMissionConditionMissionCompleted& lhs, const GcMissionConditionMissionCompleted& rhs) 
	{
		return lhs.MissionID == rhs.MissionID &&
		lhs.CalculateSeasonalSeedFromStageIndexOffset == rhs.CalculateSeasonalSeedFromStageIndexOffset &&
		lhs.SeasonalMissionSeed == rhs.SeasonalMissionSeed &&
		lhs.CalculateTextMissionTargetFromStageIndex == rhs.CalculateTextMissionTargetFromStageIndex &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData;
	}
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionConditionMissionMessage
{
	NMS::NMSString0x10 Message;
	NMS::VariableSizeString MessageToFormatSeasonalIDInto;

	friend bool operator==(const GcMissionConditionMissionMessage& lhs, const GcMissionConditionMissionMessage& rhs) 
	{
		return lhs.Message == rhs.Message &&
		lhs.MessageToFormatSeasonalIDInto == rhs.MessageToFormatSeasonalIDInto;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcNodeActivationAction
{
	enum class NodeActiveStateEnum : uint32_t
	{
		Activate = 0,
		Deactivate = 1,
		Toggle = 2,
		Add = 3,
		Remove = 4,
		RemoveChildren = 5,
	};

	NMS::VariableSizeString SceneToAdd;
	NMS_GameComponents::GcNodeActivationAction::NodeActiveStateEnum NodeActiveState;
	NMS::NMSString0x80 Name;
	bool AffectModels;
	bool IncludeChildPhysics;
	bool IncludePhysics;
	bool NotifyNPC;
	bool RestartEmitters;
	bool UseLocalNode;
	bool UseMasterModel;

	friend bool operator==(const GcNodeActivationAction& lhs, const GcNodeActivationAction& rhs) 
	{
		return lhs.SceneToAdd == rhs.SceneToAdd &&
		lhs.NodeActiveState == rhs.NodeActiveState &&
		lhs.Name == rhs.Name &&
		lhs.AffectModels == rhs.AffectModels &&
		lhs.IncludeChildPhysics == rhs.IncludeChildPhysics &&
		lhs.IncludePhysics == rhs.IncludePhysics &&
		lhs.NotifyNPC == rhs.NotifyNPC &&
		lhs.RestartEmitters == rhs.RestartEmitters &&
		lhs.UseLocalNode == rhs.UseLocalNode &&
		lhs.UseMasterModel == rhs.UseMasterModel;
	}
};

struct GcMissionConditionMissionMessagePortal
{

	friend bool operator==(const GcMissionConditionMissionMessagePortal& lhs, const GcMissionConditionMissionMessagePortal& rhs) 
	{
		return true;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionMissionStatValue
{
	uint64_t MissionStatValue;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionMissionStatValue& lhs, const GcMissionConditionMissionStatValue& rhs) 
	{
		return lhs.MissionStatValue == rhs.MissionStatValue &&
		lhs.Test == rhs.Test;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAnimationNotify
struct TkAnimationNotifies
{
	std::vector<NMS_Toolkit::TkAnimationNotify> Notifies;

	friend bool operator==(const TkAnimationNotifies& lhs, const TkAnimationNotifies& rhs) 
	{
		return lhs.Notifies == rhs.Notifies;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionMultiplayerFreighterAvailable
{

	friend bool operator==(const GcMissionConditionMultiplayerFreighterAvailable& lhs, const GcMissionConditionMultiplayerFreighterAvailable& rhs) 
	{
		return true;
	}
};

//Dependency: GcSmokeBotSystemReport
struct GcSmokeBotReport
{
	std::vector<NMS_GameComponents::GcSmokeBotSystemReport> Systems;
	uint64_t StartingUA;

	friend bool operator==(const GcSmokeBotReport& lhs, const GcSmokeBotReport& rhs) 
	{
		return lhs.Systems == rhs.Systems &&
		lhs.StartingUA == rhs.StartingUA;
	}
};

struct GcMissionConditionNearObject
{
	enum class MissionObjectEnum : uint32_t
	{
		PlayerShip = 0,
		PlayerVehicle = 1,
		PlayerSubmarine = 2,
		StoryPortal = 3,
		OpenStoryPortal = 4,
		OpenStandardPortal = 5,
	};

	float Distance;
	NMS_GameComponents::GcMissionConditionNearObject::MissionObjectEnum MissionObject;

	friend bool operator==(const GcMissionConditionNearObject& lhs, const GcMissionConditionNearObject& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.MissionObject == rhs.MissionObject;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSuitUpgrade
{
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceWaitForSuitUpgrade& lhs, const GcMissionSequenceWaitForSuitUpgrade& rhs) 
	{
		return lhs.DebugText == rhs.DebugText;
	}
};

struct GcMissionConditionNearSettlement
{
	float Distance;
	bool AllowBuildersSettlement;
	bool MustMatchThisMissionSeed;

	friend bool operator==(const GcMissionConditionNearSettlement& lhs, const GcMissionConditionNearSettlement& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.AllowBuildersSettlement == rhs.AllowBuildersSettlement &&
		lhs.MustMatchThisMissionSeed == rhs.MustMatchThisMissionSeed;
	}
};

//Dependency: GcBuildingClassification
//Dependency: GcInteractionType
struct GcMissionConditionNearestBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> AdditionalBuildings;
	NMS_GameComponents::GcBuildingClassification Building;
	float Distance;
	NMS_GameComponents::GcInteractionType RequireIncompleteInteraction;

	friend bool operator==(const GcMissionConditionNearestBuilding& lhs, const GcMissionConditionNearestBuilding& rhs) 
	{
		return lhs.AdditionalBuildings == rhs.AdditionalBuildings &&
		lhs.Building == rhs.Building &&
		lhs.Distance == rhs.Distance &&
		lhs.RequireIncompleteInteraction == rhs.RequireIncompleteInteraction;
	}
};

struct GcMissionConditionNexusEnabled
{

	friend bool operator==(const GcMissionConditionNexusEnabled& lhs, const GcMissionConditionNexusEnabled& rhs) 
	{
		return true;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumAtlasStationsVisited
{
	int32_t Count;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionNumAtlasStationsVisited& lhs, const GcMissionConditionNumAtlasStationsVisited& rhs) 
	{
		return lhs.Count == rhs.Count &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumBrokenSlots
{
	enum class InventoryToTestEnum : uint32_t
	{
		Ship = 0,
		ShipTech = 1,
		Weapon = 2,
	};

	NMS_GameComponents::GcMissionConditionNumBrokenSlots::InventoryToTestEnum InventoryToTest;
	int32_t NumberOfBrokenSlots;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionNumBrokenSlots& lhs, const GcMissionConditionNumBrokenSlots& rhs) 
	{
		return lhs.InventoryToTest == rhs.InventoryToTest &&
		lhs.NumberOfBrokenSlots == rhs.NumberOfBrokenSlots &&
		lhs.Test == rhs.Test;
	}
};

struct GcMissionConditionOnFootCombatEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionOnFootCombatEnabled& lhs, const GcMissionConditionOnFootCombatEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

struct GcMissionConditionOnOtherSideOfPortal
{
	bool TestForRegularPortal;
	bool TestForStoryPortal;

	friend bool operator==(const GcMissionConditionOnOtherSideOfPortal& lhs, const GcMissionConditionOnOtherSideOfPortal& rhs) 
	{
		return lhs.TestForRegularPortal == rhs.TestForRegularPortal &&
		lhs.TestForStoryPortal == rhs.TestForStoryPortal;
	}
};

struct GcMissionConditionOnPlanetWithSandwormsOverriden
{
	bool AcceptMatchingSystem;
	bool AllowInShip;

	friend bool operator==(const GcMissionConditionOnPlanetWithSandwormsOverriden& lhs, const GcMissionConditionOnPlanetWithSandwormsOverriden& rhs) 
	{
		return lhs.AcceptMatchingSystem == rhs.AcceptMatchingSystem &&
		lhs.AllowInShip == rhs.AllowInShip;
	}
};

struct GcRewardFreeStamina
{
	float Duration;

	friend bool operator==(const GcRewardFreeStamina& lhs, const GcRewardFreeStamina& rhs) 
	{
		return lhs.Duration == rhs.Duration;
	}
};

struct GcMissionConditionPadActive
{

	friend bool operator==(const GcMissionConditionPadActive& lhs, const GcMissionConditionPadActive& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionPercentageChance
{
	int32_t Percent;
	bool OverrideMissionSeedWithRandomSeed;
	bool OverrideZeroSeed;
	bool Seeded;

	friend bool operator==(const GcMissionConditionPercentageChance& lhs, const GcMissionConditionPercentageChance& rhs) 
	{
		return lhs.Percent == rhs.Percent &&
		lhs.OverrideMissionSeedWithRandomSeed == rhs.OverrideMissionSeedWithRandomSeed &&
		lhs.OverrideZeroSeed == rhs.OverrideZeroSeed &&
		lhs.Seeded == rhs.Seeded;
	}
};

//Dependency: GcBuildingClassification
struct GcNPCSettlementBehaviourBuildingClassWeightEntry
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	float EntryWeight;
	float ExitWeight;

	friend bool operator==(const GcNPCSettlementBehaviourBuildingClassWeightEntry& lhs, const GcNPCSettlementBehaviourBuildingClassWeightEntry& rhs) 
	{
		return lhs.BuildingClass == rhs.BuildingClass &&
		lhs.EntryWeight == rhs.EntryWeight &&
		lhs.ExitWeight == rhs.ExitWeight;
	}
};

//Dependency: GcCurrency
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableTreeCostType
{
	enum class TypeOfCostEnum : uint32_t
	{
		Currency = 0,
		Substance = 1,
		Product = 2,
	};

	NMS::NMSString0x20A CantAffordString;
	NMS::NMSString0x10 CostTypeID;
	NMS::NMSString0x10 TypeID;
	NMS_GameComponents::GcCurrency CurrencyType;
	NMS_GameComponents::GcUnlockableTreeCostType::TypeOfCostEnum TypeOfCost;

	friend bool operator==(const GcUnlockableTreeCostType& lhs, const GcUnlockableTreeCostType& rhs) 
	{
		return lhs.CantAffordString == rhs.CantAffordString &&
		lhs.CostTypeID == rhs.CostTypeID &&
		lhs.TypeID == rhs.TypeID &&
		lhs.CurrencyType == rhs.CurrencyType &&
		lhs.TypeOfCost == rhs.TypeOfCost;
	}
};

//Dependency: GcUnlockableItemTrees
//Dependency: GcUnlockableTreeCostType
struct GcUnlockableTrees
{
	NMS_GameComponents::GcUnlockableItemTrees Trees[14];
	std::vector<NMS_GameComponents::GcUnlockableTreeCostType> CostTypes;

	friend bool operator==(const GcUnlockableTrees& lhs, const GcUnlockableTrees& rhs) 
	{
		return std::equal(std::begin(lhs.Trees), std::end(lhs.Trees), std::begin(rhs.Trees)) &&
		lhs.CostTypes == rhs.CostTypes;
	}
};

//Dependency: GcAlienPuzzleOption
struct GcRewardSecondaryInteractionOptions
{
	std::vector<NMS_GameComponents::GcAlienPuzzleOption> Options;

	friend bool operator==(const GcRewardSecondaryInteractionOptions& lhs, const GcRewardSecondaryInteractionOptions& rhs) 
	{
		return lhs.Options == rhs.Options;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkBlackboardValueInteger
{
	NMS::NMSString0x10 Key;
	int32_t Value;

	friend bool operator==(const TkBlackboardValueInteger& lhs, const TkBlackboardValueInteger& rhs) 
	{
		return lhs.Key == rhs.Key &&
		lhs.Value == rhs.Value;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionPirateSystem
{

	friend bool operator==(const GcMissionConditionPirateSystem& lhs, const GcMissionConditionPirateSystem& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionPlanetCorruptSentinelGeneration
{

	friend bool operator==(const GcMissionConditionPlanetCorruptSentinelGeneration& lhs, const GcMissionConditionPlanetCorruptSentinelGeneration& rhs) 
	{
		return true;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionPlanetCreatureRoles
{
	int32_t NumRoles;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeNumFromSeasonData;

	friend bool operator==(const GcMissionConditionPlanetCreatureRoles& lhs, const GcMissionConditionPlanetCreatureRoles& rhs) 
	{
		return lhs.NumRoles == rhs.NumRoles &&
		lhs.Test == rhs.Test &&
		lhs.TakeNumFromSeasonData == rhs.TakeNumFromSeasonData;
	}
};

//Dependency: GcDiscoveryType
struct GcMissionConditionPlanetDiscoveries
{
	NMS_GameComponents::GcDiscoveryType DiscoveryType;
	float PercentDiscovered;
	bool DeepSearchDoneDiscos;

	friend bool operator==(const GcMissionConditionPlanetDiscoveries& lhs, const GcMissionConditionPlanetDiscoveries& rhs) 
	{
		return lhs.DiscoveryType == rhs.DiscoveryType &&
		lhs.PercentDiscovered == rhs.PercentDiscovered &&
		lhs.DeepSearchDoneDiscos == rhs.DeepSearchDoneDiscos;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceOpenSettlementBuildingWithScanEvent
{
	NMS::NMSString0x20A ScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageWhenDistant;
	NMS::VariableSizeString UpgradeMessage;
	NMS::VariableSizeString UpgradeMessageWhenDistant;

	friend bool operator==(const GcMissionSequenceOpenSettlementBuildingWithScanEvent& lhs, const GcMissionSequenceOpenSettlementBuildingWithScanEvent& rhs) 
	{
		return lhs.ScanEvent == rhs.ScanEvent &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageWhenDistant == rhs.MessageWhenDistant &&
		lhs.UpgradeMessage == rhs.UpgradeMessage &&
		lhs.UpgradeMessageWhenDistant == rhs.UpgradeMessageWhenDistant;
	}
};

//Dependency: GcBuildingClassification
struct GcMissionConditionPlanetHasBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> AdditionalBuildings;
	NMS_GameComponents::GcBuildingClassification Building;

	friend bool operator==(const GcMissionConditionPlanetHasBuilding& lhs, const GcMissionConditionPlanetHasBuilding& rhs) 
	{
		return lhs.AdditionalBuildings == rhs.AdditionalBuildings &&
		lhs.Building == rhs.Building;
	}
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionConditionPlanetResourceHint
{
	NMS::NMSString0x20A UseScanEventToDetermineLocalResource;
	NMS::NMSString0x10 ResourceHint;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool AllowInShip;
	bool AllowNexus;
	bool TestAllPlanetsInSystem;

	friend bool operator==(const GcMissionConditionPlanetResourceHint& lhs, const GcMissionConditionPlanetResourceHint& rhs) 
	{
		return lhs.UseScanEventToDetermineLocalResource == rhs.UseScanEventToDetermineLocalResource &&
		lhs.ResourceHint == rhs.ResourceHint &&
		lhs.LocalSubstanceType == rhs.LocalSubstanceType &&
		lhs.AllowInShip == rhs.AllowInShip &&
		lhs.AllowNexus == rhs.AllowNexus &&
		lhs.TestAllPlanetsInSystem == rhs.TestAllPlanetsInSystem;
	}
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionPlanetStatLevel
{
	NMS::NMSString0x10 Stat;
	uint64_t SpecificUA;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool CalculateUAFromMilestoneIndex;
	bool CalculateUAFromSeasonData;
	bool TakeAmountFromSeasonData;
	bool UseCurrentUA;

	friend bool operator==(const GcMissionConditionPlanetStatLevel& lhs, const GcMissionConditionPlanetStatLevel& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.SpecificUA == rhs.SpecificUA &&
		lhs.Amount == rhs.Amount &&
		lhs.Test == rhs.Test &&
		lhs.CalculateUAFromMilestoneIndex == rhs.CalculateUAFromMilestoneIndex &&
		lhs.CalculateUAFromSeasonData == rhs.CalculateUAFromSeasonData &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.UseCurrentUA == rhs.UseCurrentUA;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionPulseEncounterActive
{
	enum class TestEncounterTypeEnum : uint32_t
	{
		AnyEncounter = 0,
		AnyObject = 1,
		SpecificObject = 2,
		Trader = 3,
		AbandonedFreighter = 4,
		AnyEncounterOtherThanTheNamedOne = 5,
		SpecificID = 6,
	};

	NMS::NMSString0x10 SpecificObjectID;
	NMS_GameComponents::GcMissionConditionPulseEncounterActive::TestEncounterTypeEnum TestEncounterType;
	bool RequireFullySpawned;

	friend bool operator==(const GcMissionConditionPulseEncounterActive& lhs, const GcMissionConditionPulseEncounterActive& rhs) 
	{
		return lhs.SpecificObjectID == rhs.SpecificObjectID &&
		lhs.TestEncounterType == rhs.TestEncounterType &&
		lhs.RequireFullySpawned == rhs.RequireFullySpawned;
	}
};

struct GcMissionConditionPulseEncounterOverriden
{

	friend bool operator==(const GcMissionConditionPulseEncounterOverriden& lhs, const GcMissionConditionPulseEncounterOverriden& rhs) 
	{
		return true;
	}
};

//Dependency: GcInputActions
//Dependency: GcCharacterControlOutputSpace
//Dependency: GcCharacterControlInputValidity
//Dependency: NMSString0x10
struct GcPlayerControlInputAxis
{
	NMS::NMSString0x10 Output;
	NMS::NMSString0x10 OutputLength;
	NMS_GameComponents::GcInputActions InputX;
	NMS_GameComponents::GcInputActions InputY;
	NMS_GameComponents::GcCharacterControlOutputSpace OutputSpace;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;

	friend bool operator==(const GcPlayerControlInputAxis& lhs, const GcPlayerControlInputAxis& rhs) 
	{
		return lhs.Output == rhs.Output &&
		lhs.OutputLength == rhs.OutputLength &&
		lhs.InputX == rhs.InputX &&
		lhs.InputY == rhs.InputY &&
		lhs.OutputSpace == rhs.OutputSpace &&
		lhs.Validity == rhs.Validity;
	}
};

struct GcMissionConditionReadyToSpawnPirates
{

	friend bool operator==(const GcMissionConditionReadyToSpawnPirates& lhs, const GcMissionConditionReadyToSpawnPirates& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionRefinerHasInput
{
	NMS::NMSString0x10 InputProduct;
	int32_t InputAmount;
	bool MustBeCooker;

	friend bool operator==(const GcMissionConditionRefinerHasInput& lhs, const GcMissionConditionRefinerHasInput& rhs) 
	{
		return lhs.InputProduct == rhs.InputProduct &&
		lhs.InputAmount == rhs.InputAmount &&
		lhs.MustBeCooker == rhs.MustBeCooker;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionRefinerHasOutput
{
	NMS::NMSString0x10 OutputProduct;
	int32_t OutputAmount;
	bool MustBeCooker;
	bool UseDefaultAmount;

	friend bool operator==(const GcMissionConditionRefinerHasOutput& lhs, const GcMissionConditionRefinerHasOutput& rhs) 
	{
		return lhs.OutputProduct == rhs.OutputProduct &&
		lhs.OutputAmount == rhs.OutputAmount &&
		lhs.MustBeCooker == rhs.MustBeCooker &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkTextureResource
struct TkReplacementResource
{
	NMS_Toolkit::TkTextureResource Original;
	NMS_Toolkit::TkTextureResource Replacement;

	friend bool operator==(const TkReplacementResource& lhs, const TkReplacementResource& rhs) 
	{
		return lhs.Original == rhs.Original &&
		lhs.Replacement == rhs.Replacement;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionRidingCreature
{

	friend bool operator==(const GcMissionConditionRidingCreature& lhs, const GcMissionConditionRidingCreature& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionSeasonAvailable
{

	friend bool operator==(const GcMissionConditionSeasonAvailable& lhs, const GcMissionConditionSeasonAvailable& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardTableEntitlementItem
{
	NMS::NMSString0x10 EntitlementId;
	NMSTemplate Reward;
	NMS::NMSString0x10 RewardId;

	friend bool operator==(const GcRewardTableEntitlementItem& lhs, const GcRewardTableEntitlementItem& rhs) 
	{
		return lhs.EntitlementId == rhs.EntitlementId &&
		lhs.Reward == rhs.Reward &&
		lhs.RewardId == rhs.RewardId;
	}
};

//Dependency: GcSaveContextQuery
//Dependency: GcSeasonEndRewardsRedemptionState
struct GcMissionConditionSeasonRewardRedemptionState
{
	NMS_GameComponents::GcSaveContextQuery CurrentContext;
	NMS_GameComponents::GcSeasonEndRewardsRedemptionState RewardRedempionState;

	friend bool operator==(const GcMissionConditionSeasonRewardRedemptionState& lhs, const GcMissionConditionSeasonRewardRedemptionState& rhs) 
	{
		return lhs.CurrentContext == rhs.CurrentContext &&
		lhs.RewardRedempionState == rhs.RewardRedempionState;
	}
};

struct GcRewardTraderFlyby
{
	int32_t ExperienceSpawnIndex;

	friend bool operator==(const GcRewardTraderFlyby& lhs, const GcRewardTraderFlyby& rhs) 
	{
		return lhs.ExperienceSpawnIndex == rhs.ExperienceSpawnIndex;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionSeasonRewardUnlocked
{
	NMS::NMSString0x10 SpecialID;

	friend bool operator==(const GcMissionConditionSeasonRewardUnlocked& lhs, const GcMissionConditionSeasonRewardUnlocked& rhs) 
	{
		return lhs.SpecialID == rhs.SpecialID;
	}
};

//Dependency: GcSettlementJudgementOption
//Dependency: GcSettlementJudgementType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJudgementData
{
	enum class NPCsEnum : uint32_t
	{
		None = 0,
		One = 1,
		Two = 2,
		ExistingPerkJob = 3,
	};

	NMS::NMSString0x20A DilemmaText;
	NMS::NMSString0x20A HeaderOverride;
	NMS::NMSString0x20A NPC1CustomName;
	NMS::NMSString0x20A NPC2CustomName;
	NMS::NMSString0x20A NPCTitle;
	NMS::NMSString0x20A QuestionText;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 NPC1CustomId;
	NMS::NMSString0x10 NPC1HoloEffect;
	NMS::NMSString0x10 NPC2CustomId;
	NMS::NMSString0x10 NPC2HoloEffect;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option1List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option2List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option3List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option4List;
	NMS_GameComponents::GcSettlementJudgementType JudgementType;
	NMS_GameComponents::GcSettlementJudgementData::NPCsEnum NPCs;
	float Weighting;
	bool DilemmaTextIsAlien;
	bool UseAltResearchLoc;
	bool UseResearchLoc;

	friend bool operator==(const GcSettlementJudgementData& lhs, const GcSettlementJudgementData& rhs) 
	{
		return lhs.DilemmaText == rhs.DilemmaText &&
		lhs.HeaderOverride == rhs.HeaderOverride &&
		lhs.NPC1CustomName == rhs.NPC1CustomName &&
		lhs.NPC2CustomName == rhs.NPC2CustomName &&
		lhs.NPCTitle == rhs.NPCTitle &&
		lhs.QuestionText == rhs.QuestionText &&
		lhs.Title == rhs.Title &&
		lhs.NPC1CustomId == rhs.NPC1CustomId &&
		lhs.NPC1HoloEffect == rhs.NPC1HoloEffect &&
		lhs.NPC2CustomId == rhs.NPC2CustomId &&
		lhs.NPC2HoloEffect == rhs.NPC2HoloEffect &&
		lhs.Option1List == rhs.Option1List &&
		lhs.Option2List == rhs.Option2List &&
		lhs.Option3List == rhs.Option3List &&
		lhs.Option4List == rhs.Option4List &&
		lhs.JudgementType == rhs.JudgementType &&
		lhs.NPCs == rhs.NPCs &&
		lhs.Weighting == rhs.Weighting &&
		lhs.DilemmaTextIsAlien == rhs.DilemmaTextIsAlien &&
		lhs.UseAltResearchLoc == rhs.UseAltResearchLoc &&
		lhs.UseResearchLoc == rhs.UseResearchLoc;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionSeasonRewardsRecipe
{
	NMS::NMSString0x10 RecipeID;

	friend bool operator==(const GcMissionConditionSeasonRewardsRecipe& lhs, const GcMissionConditionSeasonRewardsRecipe& rhs) 
	{
		return lhs.RecipeID == rhs.RecipeID;
	}
};

struct GcTerrainTextureSettings
{
	float Brightness;
	float Contrast;
	float Specular;

	friend bool operator==(const GcTerrainTextureSettings& lhs, const GcTerrainTextureSettings& rhs) 
	{
		return lhs.Brightness == rhs.Brightness &&
		lhs.Contrast == rhs.Contrast &&
		lhs.Specular == rhs.Specular;
	}
};

struct GcMissionConditionSentinelLevel
{
	enum class RequiredSentinelLevelEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Default = 2,
		Aggressive = 3,
		Corrupt = 4,
	};

	NMS_GameComponents::GcMissionConditionSentinelLevel::RequiredSentinelLevelEnum RequiredSentinelLevel;

	friend bool operator==(const GcMissionConditionSentinelLevel& lhs, const GcMissionConditionSentinelLevel& rhs) 
	{
		return lhs.RequiredSentinelLevel == rhs.RequiredSentinelLevel;
	}
};

struct GcMissionConditionSentinelsDisabled
{

	friend bool operator==(const GcMissionConditionSentinelsDisabled& lhs, const GcMissionConditionSentinelsDisabled& rhs) 
	{
		return true;
	}
};

//Dependency: GcSettlementStatType
//Dependency: TkEqualityEnum
struct GcMissionConditionSettlementStatLevel
{
	float NormalisedLevel;
	NMS_GameComponents::GcSettlementStatType Stat;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionSettlementStatLevel& lhs, const GcMissionConditionSettlementStatLevel& rhs) 
	{
		return lhs.NormalisedLevel == rhs.NormalisedLevel &&
		lhs.Stat == rhs.Stat &&
		lhs.Test == rhs.Test;
	}
};

struct GcMissionConditionShieldDown
{
	bool RequireOnFoot;

	friend bool operator==(const GcMissionConditionShieldDown& lhs, const GcMissionConditionShieldDown& rhs) 
	{
		return lhs.RequireOnFoot == rhs.RequireOnFoot;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcRewardIncrementInteractionIndex
{
	NMS_GameComponents::GcInteractionType InteractionToIncrement;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcRewardIncrementInteractionIndex& lhs, const GcRewardIncrementInteractionIndex& rhs) 
	{
		return lhs.InteractionToIncrement == rhs.InteractionToIncrement &&
		lhs.Race == rhs.Race;
	}
};

struct GcMissionConditionShipEngineStatus
{
	enum class EngineStatusEnum : uint32_t
	{
		Thrusting = 0,
		Braking = 1,
		Landing = 2,
		Landed = 3,
		Boosting = 4,
		Pulsing = 5,
		LowFlight = 6,
		Inverted = 7,
		EnginesRepaired = 8,
		PulsingToPlanet = 9,
	};

	NMS_GameComponents::GcMissionConditionShipEngineStatus::EngineStatusEnum EngineStatus;

	friend bool operator==(const GcMissionConditionShipEngineStatus& lhs, const GcMissionConditionShipEngineStatus& rhs) 
	{
		return lhs.EngineStatus == rhs.EngineStatus;
	}
};

struct GcMissionConsequenceResetStoryPortal
{

	friend bool operator==(const GcMissionConsequenceResetStoryPortal& lhs, const GcMissionConsequenceResetStoryPortal& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputValidation
{
	enum class InputValidationEnum : uint32_t
	{
		Held = 0,
		Pressed = 1,
		HeldConfirm = 2,
		Released = 3,
		HeldOver = 4,
	};

	NMS_Toolkit::TkInputValidation::InputValidationEnum InputValidation;

	friend bool operator==(const TkInputValidation& lhs, const TkInputValidation& rhs) 
	{
		return lhs.InputValidation == rhs.InputValidation;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionSpaceCombatEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionSpaceCombatEnabled& lhs, const GcMissionConditionSpaceCombatEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionSpecialKnown
{
	NMS::NMSString0x10 SpecialID;

	friend bool operator==(const GcMissionConditionSpecialKnown& lhs, const GcMissionConditionSpecialKnown& rhs) 
	{
		return lhs.SpecialID == rhs.SpecialID;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: GcSeasonSaveStateOnDeath
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcRewardDeath
{
	NMS::Colour InitialFadeColour;
	NMS::NMSString0x20A DeathAuthor;
	NMS::NMSString0x20A DeathQuote;
	NMS::NMSString0x10 CameraShake;
	NMS::NMSString0x10 PlayerDamage;
	NMS::Vector2f DeathSpinPitch;
	NMS::Vector2f DeathSpinRoll;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float BlackScreenBeforeQuote;
	float FadeDuration;
	NMS_GameComponents::GcSeasonSaveStateOnDeath SetSeasonSaveState;
	float TimeToSpendDead;
	NMS_Toolkit::TkCurveType FadeCurve;
	bool OverrideShipSpin;

	friend bool operator==(const GcRewardDeath& lhs, const GcRewardDeath& rhs) 
	{
		return lhs.InitialFadeColour == rhs.InitialFadeColour &&
		lhs.DeathAuthor == rhs.DeathAuthor &&
		lhs.DeathQuote == rhs.DeathQuote &&
		lhs.CameraShake == rhs.CameraShake &&
		lhs.PlayerDamage == rhs.PlayerDamage &&
		lhs.DeathSpinPitch == rhs.DeathSpinPitch &&
		lhs.DeathSpinRoll == rhs.DeathSpinRoll &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.BlackScreenBeforeQuote == rhs.BlackScreenBeforeQuote &&
		lhs.FadeDuration == rhs.FadeDuration &&
		lhs.SetSeasonSaveState == rhs.SetSeasonSaveState &&
		lhs.TimeToSpendDead == rhs.TimeToSpendDead &&
		lhs.FadeCurve == rhs.FadeCurve &&
		lhs.OverrideShipSpin == rhs.OverrideShipSpin;
	}
};

struct GcRocketLockerComponentData
{
	int32_t NumSlots;

	friend bool operator==(const GcRocketLockerComponentData& lhs, const GcRocketLockerComponentData& rhs) 
	{
		return lhs.NumSlots == rhs.NumSlots;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionSquadronPilotsOwned
{
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeNumberFromSeasonData;

	friend bool operator==(const GcMissionConditionSquadronPilotsOwned& lhs, const GcMissionConditionSquadronPilotsOwned& rhs) 
	{
		return lhs.Amount == rhs.Amount &&
		lhs.Test == rhs.Test &&
		lhs.TakeNumberFromSeasonData == rhs.TakeNumberFromSeasonData;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionSquadronSlots
{
	int32_t PilotSlots;
	NMS_Toolkit::TkEqualityEnum Test;
	bool OnlyCountFreeSlots;
	bool TakeNumberFromSeasonData;

	friend bool operator==(const GcMissionConditionSquadronSlots& lhs, const GcMissionConditionSquadronSlots& rhs) 
	{
		return lhs.PilotSlots == rhs.PilotSlots &&
		lhs.Test == rhs.Test &&
		lhs.OnlyCountFreeSlots == rhs.OnlyCountFreeSlots &&
		lhs.TakeNumberFromSeasonData == rhs.TakeNumberFromSeasonData;
	}
};

struct GcMissionConditionStartWithAllPartsKnown
{

	friend bool operator==(const GcMissionConditionStartWithAllPartsKnown& lhs, const GcMissionConditionStartWithAllPartsKnown& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionStatChange
{
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;

	friend bool operator==(const GcMissionConditionStatChange& lhs, const GcMissionConditionStatChange& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.StatGroup == rhs.StatGroup;
	}
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionStatDiff
{
	NMS::NMSString0x10 CurrentStat;
	NMS::NMSString0x10 TargetStat;
	int32_t AmountPastTarget;
	NMS_Toolkit::TkEqualityEnum Test;

	friend bool operator==(const GcMissionConditionStatDiff& lhs, const GcMissionConditionStatDiff& rhs) 
	{
		return lhs.CurrentStat == rhs.CurrentStat &&
		lhs.TargetStat == rhs.TargetStat &&
		lhs.AmountPastTarget == rhs.AmountPastTarget &&
		lhs.Test == rhs.Test;
	}
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionConditionStatLevel
{
	NMS::NMSString0x10 CompareStat;
	NMS::NMSString0x10 FormatItemNameIntoText;
	NMS::VariableSizeString FormatStatStyle;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t DisplayMilestoneNumber;
	int32_t Level;
	int32_t LevelledStatRank;
	NMS_Toolkit::TkEqualityEnum Test;
	bool ForceIgnoreLevelledStat;
	bool MulAmountBySeasonTier;
	bool TakeLevelFromSeasonData;
	bool TakeStatFromSeasonData;

	friend bool operator==(const GcMissionConditionStatLevel& lhs, const GcMissionConditionStatLevel& rhs) 
	{
		return lhs.CompareStat == rhs.CompareStat &&
		lhs.FormatItemNameIntoText == rhs.FormatItemNameIntoText &&
		lhs.FormatStatStyle == rhs.FormatStatStyle &&
		lhs.Stat == rhs.Stat &&
		lhs.StatGroup == rhs.StatGroup &&
		lhs.DisplayMilestoneNumber == rhs.DisplayMilestoneNumber &&
		lhs.Level == rhs.Level &&
		lhs.LevelledStatRank == rhs.LevelledStatRank &&
		lhs.Test == rhs.Test &&
		lhs.ForceIgnoreLevelledStat == rhs.ForceIgnoreLevelledStat &&
		lhs.MulAmountBySeasonTier == rhs.MulAmountBySeasonTier &&
		lhs.TakeLevelFromSeasonData == rhs.TakeLevelFromSeasonData &&
		lhs.TakeStatFromSeasonData == rhs.TakeStatFromSeasonData;
	}
};

struct GcMissionConditionSystemHasInfestedPlanet
{

	friend bool operator==(const GcMissionConditionSystemHasInfestedPlanet& lhs, const GcMissionConditionSystemHasInfestedPlanet& rhs) 
	{
		return true;
	}
};

struct GcMissionConditionSystemHasRobotCreatures
{
	bool RequireOnPlanet;

	friend bool operator==(const GcMissionConditionSystemHasRobotCreatures& lhs, const GcMissionConditionSystemHasRobotCreatures& rhs) 
	{
		return lhs.RequireOnPlanet == rhs.RequireOnPlanet;
	}
};

//Dependency: GcAlienRace
struct GcMissionConditionSystemRace
{
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcMissionConditionSystemRace& lhs, const GcMissionConditionSystemRace& rhs) 
	{
		return lhs.Race == rhs.Race;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionTakingDamage
{
	NMS::NMSString0x10 DamageID;
	bool RequireShieldDown;

	friend bool operator==(const GcMissionConditionTakingDamage& lhs, const GcMissionConditionTakingDamage& rhs) 
	{
		return lhs.DamageID == rhs.DamageID &&
		lhs.RequireShieldDown == rhs.RequireShieldDown;
	}
};

//Dependency: NMSString0x10
struct GcMissionConditionTechnologyKnown
{
	NMS::NMSString0x10 Technology;
	bool DependentOnSeasonMilestone;
	bool TakeTechFromSeasonData;

	friend bool operator==(const GcMissionConditionTechnologyKnown& lhs, const GcMissionConditionTechnologyKnown& rhs) 
	{
		return lhs.Technology == rhs.Technology &&
		lhs.DependentOnSeasonMilestone == rhs.DependentOnSeasonMilestone &&
		lhs.TakeTechFromSeasonData == rhs.TakeTechFromSeasonData;
	}
};

struct GcMissionConditionThisMissionStageIndex
{
	int32_t StageIndex;

	friend bool operator==(const GcMissionConditionThisMissionStageIndex& lhs, const GcMissionConditionThisMissionStageIndex& rhs) 
	{
		return lhs.StageIndex == rhs.StageIndex;
	}
};

struct GcMissionConditionTouchControlled
{

	friend bool operator==(const GcMissionConditionTouchControlled& lhs, const GcMissionConditionTouchControlled& rhs) 
	{
		return true;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshInclusionType
{
	enum class NavMeshInclusionTypeEnum : uint32_t
	{
		Auto = 0,
		Ignore = 1,
		Obstacle = 2,
		Walkable = 3,
	};

	NMS_Toolkit::TkNavMeshInclusionType::NavMeshInclusionTypeEnum NavMeshInclusionType;

	friend bool operator==(const TkNavMeshInclusionType& lhs, const TkNavMeshInclusionType& rhs) 
	{
		return lhs.NavMeshInclusionType == rhs.NavMeshInclusionType;
	}
};

struct TkNavMeshAreaType
{
	enum class NavMeshAreaTypeEnum : uint32_t
	{
		Null = 0,
		Grass = 1,
		Rock = 2,
		Snow = 3,
		Mud = 4,
		Sand = 5,
		Cave = 6,
		Forest = 7,
		Wetlands = 8,
		Mistlands = 9,
		GrassAlt = 10,
		RockAlt = 11,
		ForestAlt = 12,
		MudAlt = 13,
		Soil = 14,
		Resource = 15,
		TerrainInstance = 16,
		Normal = 17,
		Water = 18,
		Auto = 19,
		UseCollisionTileType = 20,
	};

	NMS_Toolkit::TkNavMeshAreaType::NavMeshAreaTypeEnum NavMeshAreaType;

	friend bool operator==(const TkNavMeshAreaType& lhs, const TkNavMeshAreaType& rhs) 
	{
		return lhs.NavMeshAreaType == rhs.NavMeshAreaType;
	}
};

//Dependency: TkNavMeshInclusionType
//Dependency: TkNavMeshAreaType
struct TkNavMeshInclusionParams
{
	float InclusionMinSize;
	NMS_Toolkit::TkNavMeshInclusionType InclusionType;
	NMS_Toolkit::TkNavMeshAreaType AreaType;

	friend bool operator==(const TkNavMeshInclusionParams& lhs, const TkNavMeshInclusionParams& rhs) 
	{
		return lhs.InclusionMinSize == rhs.InclusionMinSize &&
		lhs.InclusionType == rhs.InclusionType &&
		lhs.AreaType == rhs.AreaType;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcMissionConditionTradeSurge
{
	enum class SurgeTestTypeEnum : uint32_t
	{
		Timer = 0,
		Collection = 1,
		Delivery = 2,
	};

	NMS::NMSString0x20A ControllingScanEvent;
	NMS_GameComponents::GcMissionConditionTradeSurge::SurgeTestTypeEnum SurgeTestType;
	int32_t TimeToCompleteInMinutes;

	friend bool operator==(const GcMissionConditionTradeSurge& lhs, const GcMissionConditionTradeSurge& rhs) 
	{
		return lhs.ControllingScanEvent == rhs.ControllingScanEvent &&
		lhs.SurgeTestType == rhs.SurgeTestType &&
		lhs.TimeToCompleteInMinutes == rhs.TimeToCompleteInMinutes;
	}
};

struct GcMissionConditionTutorialEnabled
{
	bool Enabled;

	friend bool operator==(const GcMissionConditionTutorialEnabled& lhs, const GcMissionConditionTutorialEnabled& rhs) 
	{
		return lhs.Enabled == rhs.Enabled;
	}
};

struct GcMissionConditionUnderwaterDepth
{
	float Depth;
	bool InBaseCanCountAsUnderwater;
	bool ReturnTrueIfWaterBelowIsAtDepth;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionConditionUnderwaterDepth& lhs, const GcMissionConditionUnderwaterDepth& rhs) 
	{
		return lhs.Depth == rhs.Depth &&
		lhs.InBaseCanCountAsUnderwater == rhs.InBaseCanCountAsUnderwater &&
		lhs.ReturnTrueIfWaterBelowIsAtDepth == rhs.ReturnTrueIfWaterBelowIsAtDepth &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcMissionConditionUsingInteraction
{
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;
	bool MustBeSelectedMission;

	friend bool operator==(const GcMissionConditionUsingInteraction& lhs, const GcMissionConditionUsingInteraction& rhs) 
	{
		return lhs.InteractionType == rhs.InteractionType &&
		lhs.Race == rhs.Race &&
		lhs.MustBeSelectedMission == rhs.MustBeSelectedMission;
	}
};

struct GcMissionConditionUsingPortal
{
	enum class PortalTypeEnum : uint32_t
	{
		Any = 0,
		Story = 1,
		NotStory = 2,
	};

	NMS_GameComponents::GcMissionConditionUsingPortal::PortalTypeEnum PortalType;

	friend bool operator==(const GcMissionConditionUsingPortal& lhs, const GcMissionConditionUsingPortal& rhs) 
	{
		return lhs.PortalType == rhs.PortalType;
	}
};

//Dependency: TkEqualityEnum
struct GcMissionConditionWaitForPirates
{
	int32_t LivingPirates;
	NMS_Toolkit::TkEqualityEnum Test;
	bool CareAboutAttackingPlayer;
	bool CheckAllFireteamMembers;
	bool CompleteOnlyInSpace;
	bool CountHostileTraders;

	friend bool operator==(const GcMissionConditionWaitForPirates& lhs, const GcMissionConditionWaitForPirates& rhs) 
	{
		return lhs.LivingPirates == rhs.LivingPirates &&
		lhs.Test == rhs.Test &&
		lhs.CareAboutAttackingPlayer == rhs.CareAboutAttackingPlayer &&
		lhs.CheckAllFireteamMembers == rhs.CheckAllFireteamMembers &&
		lhs.CompleteOnlyInSpace == rhs.CompleteOnlyInSpace &&
		lhs.CountHostileTraders == rhs.CountHostileTraders;
	}
};

struct GcMissionConditionWarping
{

	friend bool operator==(const GcMissionConditionWarping& lhs, const GcMissionConditionWarping& rhs) 
	{
		return true;
	}
};

struct GcScanEventGPSHint
{
	enum class ScanEventGPSHintEnum : uint32_t
	{
		None = 0,
		Accurate = 1,
		OffsetNarrow = 2,
		OffsetMid = 3,
		OffsetWide = 4,
		Obfuscated = 5,
		PartObfuscated = 6,
		BuilderCorruption = 7,
	};

	NMS_GameComponents::GcScanEventGPSHint::ScanEventGPSHintEnum ScanEventGPSHint;

	friend bool operator==(const GcScanEventGPSHint& lhs, const GcScanEventGPSHint& rhs) 
	{
		return lhs.ScanEventGPSHint == rhs.ScanEventGPSHint;
	}
};

//Dependency: GcScanEventGPSHint
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceGetToScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A NexusMessage;
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString GalaxyMapMessageNotSpace;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float Distance;
	float Timeout;
	NMS_GameComponents::GcScanEventGPSHint UseGPSInText;
	bool AlwaysAllowInShip;
	bool CanFormatObjectives;
	bool DistanceTimeout;
	bool EndEventWhenReached;

	friend bool operator==(const GcMissionSequenceGetToScanEvent& lhs, const GcMissionSequenceGetToScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.NexusMessage == rhs.NexusMessage &&
		lhs.SurveyHint == rhs.SurveyHint &&
		lhs.SurveyInactiveHint == rhs.SurveyInactiveHint &&
		lhs.SurveySwapHint == rhs.SurveySwapHint &&
		lhs.SurveyVehicleHint == rhs.SurveyVehicleHint &&
		lhs.DebugText == rhs.DebugText &&
		lhs.GalaxyMapMessage == rhs.GalaxyMapMessage &&
		lhs.GalaxyMapMessageNotSpace == rhs.GalaxyMapMessageNotSpace &&
		lhs.Message == rhs.Message &&
		lhs.TimeoutOSD == rhs.TimeoutOSD &&
		lhs.Distance == rhs.Distance &&
		lhs.Timeout == rhs.Timeout &&
		lhs.UseGPSInText == rhs.UseGPSInText &&
		lhs.AlwaysAllowInShip == rhs.AlwaysAllowInShip &&
		lhs.CanFormatObjectives == rhs.CanFormatObjectives &&
		lhs.DistanceTimeout == rhs.DistanceTimeout &&
		lhs.EndEventWhenReached == rhs.EndEventWhenReached;
	}
};

struct GcMissionConditionWaterInSystem
{
	bool WaterworldSpecific;

	friend bool operator==(const GcMissionConditionWaterInSystem& lhs, const GcMissionConditionWaterInSystem& rhs) 
	{
		return lhs.WaterworldSpecific == rhs.WaterworldSpecific;
	}
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
struct GcMissionConditionWordCategoryKnown
{
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	NMS_GameComponents::GcAlienRace Race;

	friend bool operator==(const GcMissionConditionWordCategoryKnown& lhs, const GcMissionConditionWordCategoryKnown& rhs) 
	{
		return lhs.Category == rhs.Category &&
		lhs.Race == rhs.Race;
	}
};

//Dependency: GcAudioWwiseEvents
struct GcMissionConsequenceAudioEvent
{
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool UseFrontendAudioObject;

	friend bool operator==(const GcMissionConsequenceAudioEvent& lhs, const GcMissionConsequenceAudioEvent& rhs) 
	{
		return lhs.AudioEvent == rhs.AudioEvent &&
		lhs.UseFrontendAudioObject == rhs.UseFrontendAudioObject;
	}
};

//Dependency: GcFiendCrime
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardActivateFiends
{
	NMS::NMSString0x20A ActiveFailureOSD;
	NMS::NMSString0x20A WaterFailureOSD;
	NMS::NMSString0x10 SpawnID;
	NMS_GameComponents::GcFiendCrime CrimeType;
	bool AllowInWater;
	bool FailIfAlreadyActive;

	friend bool operator==(const GcRewardActivateFiends& lhs, const GcRewardActivateFiends& rhs) 
	{
		return lhs.ActiveFailureOSD == rhs.ActiveFailureOSD &&
		lhs.WaterFailureOSD == rhs.WaterFailureOSD &&
		lhs.SpawnID == rhs.SpawnID &&
		lhs.CrimeType == rhs.CrimeType &&
		lhs.AllowInWater == rhs.AllowInWater &&
		lhs.FailIfAlreadyActive == rhs.FailIfAlreadyActive;
	}
};

//Dependency: GcSettlementStatValueRange
struct GcSettlementBuildingContribution
{
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Base;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade1;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade2;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade3;

	friend bool operator==(const GcSettlementBuildingContribution& lhs, const GcSettlementBuildingContribution& rhs) 
	{
		return lhs.Base == rhs.Base &&
		lhs.Upgrade1 == rhs.Upgrade1 &&
		lhs.Upgrade2 == rhs.Upgrade2 &&
		lhs.Upgrade3 == rhs.Upgrade3;
	}
};

struct GcMissionConsequenceClearDetailMessages
{

	friend bool operator==(const GcMissionConsequenceClearDetailMessages& lhs, const GcMissionConsequenceClearDetailMessages& rhs) 
	{
		return true;
	}
};

struct GcPulseEncounterSpawnPirates
{

	friend bool operator==(const GcPulseEncounterSpawnPirates& lhs, const GcPulseEncounterSpawnPirates& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcMissionConsequenceGiveReward
{
	NMS::NMSString0x10 Reward;

	friend bool operator==(const GcMissionConsequenceGiveReward& lhs, const GcMissionConsequenceGiveReward& rhs) 
	{
		return lhs.Reward == rhs.Reward;
	}
};

//Dependency: GcPersistencyMissionOverride
//Dependency: GcInteractionActivationCost
//Dependency: GcInteractionBaseBuildingState
//Dependency: GcRewardMissionOverride
//Dependency: GcDiscoveryType
//Dependency: GcFiendCrime
//Dependency: GcRarity
//Dependency: GcSizeIndicator
//Dependency: GcStatsEnum
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcSimpleInteractionComponentData
{
	enum class SimpleInteractionTypeEnum : uint32_t
	{
		Interact = 0,
		Treasure = 1,
		Beacon = 2,
		Scan = 3,
		Save = 4,
		CallShip = 5,
		CallVehicle = 6,
		Word = 7,
		Tech = 8,
		GenericReward = 9,
		Feed = 10,
		Ladder = 11,
		ClaimBase = 12,
		TeleportStartPoint = 13,
		TeleportEndPoint = 14,
		Portal = 15,
		Chest = 16,
		ResourceHarvester = 17,
		BaseCapsule = 18,
		Hologram = 19,
		NPCTerminalMessage = 20,
		VehicleBoot = 21,
		BiomeHarvester = 22,
		FreighterGalacticMap = 23,
		FreighterChest = 24,
		Collectable = 25,
		Chair = 26,
		BaseTreasureChest = 27,
		SpawnObject = 28,
		NoiseBox = 29,
		AbandFreighterTeleporter = 30,
		PetEgg = 31,
		SubstancePickup = 32,
		FreighterTeleport = 33,
		MiniPortalTrigger = 34,
		SuperDoopaScanner = 35,
	};

	NMS_GameComponents::GcInteractionActivationCost ActivationCost;
	NMS::NMSString0x10 RarityLocators[3];
	NMS::NMSString0x20A ForceSubtitle;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A ScanData;
	NMS::NMSString0x20A ScanType;
	NMS::NMSString0x20A TerminalHeading;
	NMS::NMSString0x20A TerminalMessage;
	NMS::NMSString0x20A VRInteractMessage;
	std::vector<NMS_GameComponents::GcInteractionBaseBuildingState> BaseBuildingTriggerActions;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcPersistencyMissionOverride> PersistencyBufferOverride;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 TriggerActionOnPrepare;
	NMS::NMSString0x10 TriggerActionToggle;
	float DeactivateSimilarInteractionsNearbyRadius;
	float Delay;
	int32_t IncreaseCorruptSentinelWanted;
	int32_t InteractCrimeLevel;
	float InteractDistance;
	float InteractFiendCrimeChance;
	NMS_GameComponents::GcFiendCrime InteractFiendCrimeType;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcDiscoveryType ScanIcon;
	NMS_GameComponents::GcSimpleInteractionComponentData::SimpleInteractionTypeEnum SimpleInteractionType;
	NMS_GameComponents::GcSizeIndicator Size;
	NMS_GameComponents::GcStatsEnum StatToTrack;
	bool ActivateLocatorsFromRarity;
	bool BroadcastTriggerAction;
	bool CanCollectInMech;
	bool HideContents;
	bool InteractIsCrime;
	bool MustBeVisibleToInteract;
	bool NeedsStorm;
	bool NotifyEncounter;
	bool ReseedOnRewardSuccess;
	bool StartsBuried;
	bool Use2dInteractDistance;
	bool UsePersonalPersistentBuffer;

	friend bool operator==(const GcSimpleInteractionComponentData& lhs, const GcSimpleInteractionComponentData& rhs) 
	{
		return lhs.ActivationCost == rhs.ActivationCost &&
		std::equal(std::begin(lhs.RarityLocators), std::end(lhs.RarityLocators), std::begin(rhs.RarityLocators)) &&
		lhs.ForceSubtitle == rhs.ForceSubtitle &&
		lhs.Name == rhs.Name &&
		lhs.ScanData == rhs.ScanData &&
		lhs.ScanType == rhs.ScanType &&
		lhs.TerminalHeading == rhs.TerminalHeading &&
		lhs.TerminalMessage == rhs.TerminalMessage &&
		lhs.VRInteractMessage == rhs.VRInteractMessage &&
		lhs.BaseBuildingTriggerActions == rhs.BaseBuildingTriggerActions &&
		lhs.Id == rhs.Id &&
		lhs.PersistencyBufferOverride == rhs.PersistencyBufferOverride &&
		lhs.RewardOverrideTable == rhs.RewardOverrideTable &&
		lhs.TriggerAction == rhs.TriggerAction &&
		lhs.TriggerActionOnPrepare == rhs.TriggerActionOnPrepare &&
		lhs.TriggerActionToggle == rhs.TriggerActionToggle &&
		lhs.DeactivateSimilarInteractionsNearbyRadius == rhs.DeactivateSimilarInteractionsNearbyRadius &&
		lhs.Delay == rhs.Delay &&
		lhs.IncreaseCorruptSentinelWanted == rhs.IncreaseCorruptSentinelWanted &&
		lhs.InteractCrimeLevel == rhs.InteractCrimeLevel &&
		lhs.InteractDistance == rhs.InteractDistance &&
		lhs.InteractFiendCrimeChance == rhs.InteractFiendCrimeChance &&
		lhs.InteractFiendCrimeType == rhs.InteractFiendCrimeType &&
		lhs.Rarity == rhs.Rarity &&
		lhs.ScanIcon == rhs.ScanIcon &&
		lhs.SimpleInteractionType == rhs.SimpleInteractionType &&
		lhs.Size == rhs.Size &&
		lhs.StatToTrack == rhs.StatToTrack &&
		lhs.ActivateLocatorsFromRarity == rhs.ActivateLocatorsFromRarity &&
		lhs.BroadcastTriggerAction == rhs.BroadcastTriggerAction &&
		lhs.CanCollectInMech == rhs.CanCollectInMech &&
		lhs.HideContents == rhs.HideContents &&
		lhs.InteractIsCrime == rhs.InteractIsCrime &&
		lhs.MustBeVisibleToInteract == rhs.MustBeVisibleToInteract &&
		lhs.NeedsStorm == rhs.NeedsStorm &&
		lhs.NotifyEncounter == rhs.NotifyEncounter &&
		lhs.ReseedOnRewardSuccess == rhs.ReseedOnRewardSuccess &&
		lhs.StartsBuried == rhs.StartsBuried &&
		lhs.Use2dInteractDistance == rhs.Use2dInteractDistance &&
		lhs.UsePersonalPersistentBuffer == rhs.UsePersonalPersistentBuffer;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveCommunicatorMessage
{
	NMS::NMSString0x20A Comms;

	friend bool operator==(const GcMissionConsequenceRemoveCommunicatorMessage& lhs, const GcMissionConsequenceRemoveCommunicatorMessage& rhs) 
	{
		return lhs.Comms == rhs.Comms;
	}
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveScanEvent
{
	NMS::NMSString0x20A Event;

	friend bool operator==(const GcMissionConsequenceRemoveScanEvent& lhs, const GcMissionConsequenceRemoveScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event;
	}
};

//Dependency: GcModularCustomisationSlotItemData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: Vector2f
struct GcModularCustomisationSlotConfig
{
	NMS_GameComponents::GcModularCustomisationSlotItemData SlotEmptyFinalCustomisation;
	NMS_GameComponents::GcModularCustomisationSlotItemData SlotEmptyPreviewCustomisation;
	NMS::NMSString0x20A LabelLocID;
	std::vector<NMS::NMSString0x10> AdditionalSlottableItemLists;
	std::vector<NMS::NMSString0x20> AssociatedNonProcNodes;
	NMS::NMSString0x10 SlotID;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> SlottableItems;
	NMS::NMSString0x10 UISlotGraphicLayer;
	NMS::Vector2f UISlotPosition;
	float UILineLengthFactor;
	float UILineMaxAngle;
	NMS::NMSString0x20 UILocatorName;
	bool IncludeInSeed;

	friend bool operator==(const GcModularCustomisationSlotConfig& lhs, const GcModularCustomisationSlotConfig& rhs) 
	{
		return lhs.SlotEmptyFinalCustomisation == rhs.SlotEmptyFinalCustomisation &&
		lhs.SlotEmptyPreviewCustomisation == rhs.SlotEmptyPreviewCustomisation &&
		lhs.LabelLocID == rhs.LabelLocID &&
		lhs.AdditionalSlottableItemLists == rhs.AdditionalSlottableItemLists &&
		lhs.AssociatedNonProcNodes == rhs.AssociatedNonProcNodes &&
		lhs.SlotID == rhs.SlotID &&
		lhs.SlottableItems == rhs.SlottableItems &&
		lhs.UISlotGraphicLayer == rhs.UISlotGraphicLayer &&
		lhs.UISlotPosition == rhs.UISlotPosition &&
		lhs.UILineLengthFactor == rhs.UILineLengthFactor &&
		lhs.UILineMaxAngle == rhs.UILineMaxAngle &&
		lhs.UILocatorName == rhs.UILocatorName &&
		lhs.IncludeInSeed == rhs.IncludeInSeed;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationTextureGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 TextureOptionGroup;

	friend bool operator==(const GcModularCustomisationTextureGroup& lhs, const GcModularCustomisationTextureGroup& rhs) 
	{
		return lhs.Title == rhs.Title &&
		lhs.TextureOptionGroup == rhs.TextureOptionGroup;
	}
};

//Dependency: GcExactResource
//Dependency: TkModelRendererData
//Dependency: GcModularCustomisationColourData
//Dependency: GcModularCustomisationEffectsData
//Dependency: NMSString0x20A
//Dependency: GcModularCustomisationSlotConfig
//Dependency: GcModularCustomisationTextureGroup
struct GcModularCustomisationConfig
{
	NMS_Toolkit::TkModelRendererData InteractionCameraData;
	NMS_Toolkit::TkModelRendererData ModelRenderData;
	NMS_GameComponents::GcExactResource BaseResource;
	NMS::NMSString0x20A SubtitleApplyingLocId;
	NMS::NMSString0x20A SubtitleLocId;
	NMS::NMSString0x20A SubtitleSlotsBlockedLocId;
	NMS::NMSString0x20A SubtitleSlotsFullLocId;
	NMS::NMSString0x20A TitleLocId;
	std::vector<NMS_GameComponents::GcModularCustomisationColourData> ColourDataPriorityList;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotConfig> Slots;
	std::vector<NMS_GameComponents::GcModularCustomisationTextureGroup> TextureData;
	NMS_GameComponents::GcModularCustomisationEffectsData Effects;
	float HologramOffset;
	float HologramScale;
	bool IsEnabled;
	bool OverrideInteractionCamera;

	friend bool operator==(const GcModularCustomisationConfig& lhs, const GcModularCustomisationConfig& rhs) 
	{
		return lhs.InteractionCameraData == rhs.InteractionCameraData &&
		lhs.ModelRenderData == rhs.ModelRenderData &&
		lhs.BaseResource == rhs.BaseResource &&
		lhs.SubtitleApplyingLocId == rhs.SubtitleApplyingLocId &&
		lhs.SubtitleLocId == rhs.SubtitleLocId &&
		lhs.SubtitleSlotsBlockedLocId == rhs.SubtitleSlotsBlockedLocId &&
		lhs.SubtitleSlotsFullLocId == rhs.SubtitleSlotsFullLocId &&
		lhs.TitleLocId == rhs.TitleLocId &&
		lhs.ColourDataPriorityList == rhs.ColourDataPriorityList &&
		lhs.Slots == rhs.Slots &&
		lhs.TextureData == rhs.TextureData &&
		lhs.Effects == rhs.Effects &&
		lhs.HologramOffset == rhs.HologramOffset &&
		lhs.HologramScale == rhs.HologramScale &&
		lhs.IsEnabled == rhs.IsEnabled &&
		lhs.OverrideInteractionCamera == rhs.OverrideInteractionCamera;
	}
};

//Dependency: GcModularCustomisationSlotItemData
//Dependency: NMSString0x10
struct GcModularCustomisationSlottableItemList
{
	NMS::NMSString0x10 ListID;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> SlottableItems;

	friend bool operator==(const GcModularCustomisationSlottableItemList& lhs, const GcModularCustomisationSlottableItemList& rhs) 
	{
		return lhs.ListID == rhs.ListID &&
		lhs.SlottableItems == rhs.SlottableItems;
	}
};

//Dependency: GcModularCustomisationConfig
//Dependency: GcModularCustomisationProductLookupList
//Dependency: GcModularCustomisationSlottableItemList
struct GcModularCustomisationDataTable
{
	NMS_GameComponents::GcModularCustomisationConfig ModularCustomisationConfigs[11];
	NMS_GameComponents::GcModularCustomisationProductLookupList ProductLookupLists[11];
	std::vector<NMS_GameComponents::GcModularCustomisationSlottableItemList> SharedSlottableItemLists;

	friend bool operator==(const GcModularCustomisationDataTable& lhs, const GcModularCustomisationDataTable& rhs) 
	{
		return std::equal(std::begin(lhs.ModularCustomisationConfigs), std::end(lhs.ModularCustomisationConfigs), std::begin(rhs.ModularCustomisationConfigs)) &&
		std::equal(std::begin(lhs.ProductLookupLists), std::end(lhs.ProductLookupLists), std::begin(rhs.ProductLookupLists)) &&
		lhs.SharedSlottableItemLists == rhs.SharedSlottableItemLists;
	}
};

//Dependency: GcBuildingClassification
//Dependency: GcSettlementStatChange
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementPerkData
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Name;
	std::vector<NMS_GameComponents::GcBuildingClassification> AssociatedBuildings;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcSettlementStatChange> StatChanges;
	bool IsBlessing;
	bool IsJob;
	bool IsNegative;
	bool IsProc;
	bool IsStarter;

	friend bool operator==(const GcSettlementPerkData& lhs, const GcSettlementPerkData& rhs) 
	{
		return lhs.Description == rhs.Description &&
		lhs.Name == rhs.Name &&
		lhs.AssociatedBuildings == rhs.AssociatedBuildings &&
		lhs.ID == rhs.ID &&
		lhs.StatChanges == rhs.StatChanges &&
		lhs.IsBlessing == rhs.IsBlessing &&
		lhs.IsJob == rhs.IsJob &&
		lhs.IsNegative == rhs.IsNegative &&
		lhs.IsProc == rhs.IsProc &&
		lhs.IsStarter == rhs.IsStarter;
	}
};

//Dependency: GcSettlementPerkData
struct GcSettlementPerksTable
{
	std::vector<NMS_GameComponents::GcSettlementPerkData> Table;

	friend bool operator==(const GcSettlementPerksTable& lhs, const GcSettlementPerksTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

struct GcWonderCustomCategory
{
	enum class WonderCustomCategoryEnum : uint32_t
	{
		Custom01 = 0,
		Custom02 = 1,
		Custom03 = 2,
		Custom04 = 3,
		Custom05 = 4,
		Custom06 = 5,
		Custom07 = 6,
		Custom08 = 7,
		Custom09 = 8,
		Custom10 = 9,
		Custom11 = 10,
		Custom12 = 11,
	};

	NMS_GameComponents::GcWonderCustomCategory::WonderCustomCategoryEnum WonderCustomCategory;

	friend bool operator==(const GcWonderCustomCategory& lhs, const GcWonderCustomCategory& rhs) 
	{
		return lhs.WonderCustomCategory == rhs.WonderCustomCategory;
	}
};

//Dependency: GcWFCDecorationItem
struct GcWFCDecorationSet
{
	std::vector<NMS_GameComponents::GcWFCDecorationItem> Items;

	friend bool operator==(const GcWFCDecorationSet& lhs, const GcWFCDecorationSet& rhs) 
	{
		return lhs.Items == rhs.Items;
	}
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceBounty
{
	NMS::NMSString0x10 Bounty;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageDestroy;
	NMS::VariableSizeString MessageEngage;
	NMS::VariableSizeString MessageGetToSpace;

	friend bool operator==(const GcMissionSequenceBounty& lhs, const GcMissionSequenceBounty& rhs) 
	{
		return lhs.Bounty == rhs.Bounty &&
		lhs.DebugText == rhs.DebugText &&
		lhs.MessageDestroy == rhs.MessageDestroy &&
		lhs.MessageEngage == rhs.MessageEngage &&
		lhs.MessageGetToSpace == rhs.MessageGetToSpace;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceBroadcastMessage
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 MessageID;
	bool BroadcastToActiveMultiplayerMission;
	bool CanSendToInactive;
	bool Multiplayer;
	bool Seeded;
	bool SendToAllMatchingSeeds;

	friend bool operator==(const GcMissionSequenceBroadcastMessage& lhs, const GcMissionSequenceBroadcastMessage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.MessageID == rhs.MessageID &&
		lhs.BroadcastToActiveMultiplayerMission == rhs.BroadcastToActiveMultiplayerMission &&
		lhs.CanSendToInactive == rhs.CanSendToInactive &&
		lhs.Multiplayer == rhs.Multiplayer &&
		lhs.Seeded == rhs.Seeded &&
		lhs.SendToAllMatchingSeeds == rhs.SendToAllMatchingSeeds;
	}
};

//Dependency: GcBuildingPartSearchType
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceBuild
{
	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Part;
	bool TakePartFromSeasonData;
	bool TeachIfNotKnown;

	friend bool operator==(const GcMissionSequenceBuild& lhs, const GcMissionSequenceBuild& rhs) 
	{
		return lhs.Type == rhs.Type &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Part == rhs.Part &&
		lhs.TakePartFromSeasonData == rhs.TakePartFromSeasonData &&
		lhs.TeachIfNotKnown == rhs.TeachIfNotKnown;
	}
};

struct GcMissionSequenceClearInventoryHistory
{

	friend bool operator==(const GcMissionSequenceClearInventoryHistory& lhs, const GcMissionSequenceClearInventoryHistory& rhs) 
	{
		return true;
	}
};

//Dependency: GcCurrency
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCollectMoney
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForItemID;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcCurrency CollectCurrency;
	int32_t ForItemQuantity;
	bool ApplyDifficultyScaling;
	bool DiscountAlreadyAcquiredForItems;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionSequenceCollectMoney& lhs, const GcMissionSequenceCollectMoney& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.ForItemID == rhs.ForItemID &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount &&
		lhs.CollectCurrency == rhs.CollectCurrency &&
		lhs.ForItemQuantity == rhs.ForItemQuantity &&
		lhs.ApplyDifficultyScaling == rhs.ApplyDifficultyScaling &&
		lhs.DiscountAlreadyAcquiredForItems == rhs.DiscountAlreadyAcquiredForItems &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

//Dependency: GcStoryPage
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcStoryCategory
{
	NMS::NMSString0x20A CategoryID;
	NMS::NMSString0x20A CategoryIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS_GameComponents::GcStoryPage> Pages;

	friend bool operator==(const GcStoryCategory& lhs, const GcStoryCategory& rhs) 
	{
		return lhs.CategoryID == rhs.CategoryID &&
		lhs.CategoryIDUpper == rhs.CategoryIDUpper &&
		lhs.IconOff == rhs.IconOff &&
		lhs.IconOn == rhs.IconOn &&
		lhs.Pages == rhs.Pages;
	}
};

//Dependency: GcStoryCategory
struct GcStoriesTable
{
	NMS_GameComponents::GcStoryCategory Table[9];

	friend bool operator==(const GcStoriesTable& lhs, const GcStoriesTable& rhs) 
	{
		return std::equal(std::begin(lhs.Table), std::end(lhs.Table), std::begin(rhs.Table));
	}
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcItemNeedPurpose
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCollectProduct
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForBuild;
	NMS::NMSString0x10 ForRepair;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Product;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool DependentOnSeasonMilestone;
	bool FromNow;
	bool HintAtCraftTree;
	bool SearchCookingIngredients;
	bool TakeAmountFromSeasonData;
	bool TeachIfNotKnown;
	bool UseDefaultValue;
	bool WaitForSelected;

	friend bool operator==(const GcMissionSequenceCollectProduct& lhs, const GcMissionSequenceCollectProduct& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.ForBuild == rhs.ForBuild &&
		lhs.ForRepair == rhs.ForRepair &&
		lhs.Message == rhs.Message &&
		lhs.Product == rhs.Product &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Default == rhs.Default &&
		lhs.Purpose == rhs.Purpose &&
		lhs.CanFormatObjectives == rhs.CanFormatObjectives &&
		lhs.CanSetIcon == rhs.CanSetIcon &&
		lhs.DependentOnSeasonMilestone == rhs.DependentOnSeasonMilestone &&
		lhs.FromNow == rhs.FromNow &&
		lhs.HintAtCraftTree == rhs.HintAtCraftTree &&
		lhs.SearchCookingIngredients == rhs.SearchCookingIngredients &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.TeachIfNotKnown == rhs.TeachIfNotKnown &&
		lhs.UseDefaultValue == rhs.UseDefaultValue &&
		lhs.WaitForSelected == rhs.WaitForSelected;
	}
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
//Dependency: GcItemNeedPurpose
//Dependency: VariableSizeString
struct GcMissionSequenceCollectSubstance
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForBuild;
	NMS::NMSString0x10 ForRepair;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Substance;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool FromNow;
	bool SearchCookingIngredients;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;
	bool WaitForSelected;

	friend bool operator==(const GcMissionSequenceCollectSubstance& lhs, const GcMissionSequenceCollectSubstance& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.ForBuild == rhs.ForBuild &&
		lhs.ForRepair == rhs.ForRepair &&
		lhs.Message == rhs.Message &&
		lhs.Substance == rhs.Substance &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Default == rhs.Default &&
		lhs.DefaultValueMultiplier == rhs.DefaultValueMultiplier &&
		lhs.Purpose == rhs.Purpose &&
		lhs.CanFormatObjectives == rhs.CanFormatObjectives &&
		lhs.CanSetIcon == rhs.CanSetIcon &&
		lhs.FromNow == rhs.FromNow &&
		lhs.SearchCookingIngredients == rhs.SearchCookingIngredients &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.UseDefaultValue == rhs.UseDefaultValue &&
		lhs.WaitForSelected == rhs.WaitForSelected;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMissionSequenceCommunicator
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::NMSString0x20A OptionalWaitMessage;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString OSDMessage;
	NMS::VariableSizeString VRMessage;
	float MinTimeInSpaceBeforeCall;
	NMS::NMSString0x20 FormatDialogIDWithSeasonData;
	bool AutoOpen;
	bool UsePulseEncounterObjectAsAttachment;

	friend bool operator==(const GcMissionSequenceCommunicator& lhs, const GcMissionSequenceCommunicator& rhs) 
	{
		return lhs.Comms == rhs.Comms &&
		lhs.OptionalWaitMessage == rhs.OptionalWaitMessage &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.OSDMessage == rhs.OSDMessage &&
		lhs.VRMessage == rhs.VRMessage &&
		lhs.MinTimeInSpaceBeforeCall == rhs.MinTimeInSpaceBeforeCall &&
		lhs.FormatDialogIDWithSeasonData == rhs.FormatDialogIDWithSeasonData &&
		lhs.AutoOpen == rhs.AutoOpen &&
		lhs.UsePulseEncounterObjectAsAttachment == rhs.UsePulseEncounterObjectAsAttachment;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCompleteMission
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Mission;
	bool UseSeed;

	friend bool operator==(const GcMissionSequenceCompleteMission& lhs, const GcMissionSequenceCompleteMission& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Mission == rhs.Mission &&
		lhs.UseSeed == rhs.UseSeed;
	}
};

struct GcMissionSequenceCompleteSeasonalMilestone
{

	friend bool operator==(const GcMissionSequenceCompleteSeasonalMilestone& lhs, const GcMissionSequenceCompleteSeasonalMilestone& rhs) 
	{
		return true;
	}
};

//Dependency: GcMissionConditionTest
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceConditionalReward
{
	std::vector<NMSTemplate> Conditions;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 RewardIfFalse;
	NMS::NMSString0x10 RewardIfTrue;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;

	friend bool operator==(const GcMissionSequenceConditionalReward& lhs, const GcMissionSequenceConditionalReward& rhs) 
	{
		return lhs.Conditions == rhs.Conditions &&
		lhs.DebugText == rhs.DebugText &&
		lhs.RewardIfFalse == rhs.RewardIfFalse &&
		lhs.RewardIfTrue == rhs.RewardIfTrue &&
		lhs.ConditionTest == rhs.ConditionTest;
	}
};

//Dependency: GcBuildingPartSearchType
//Dependency: GcConstructionPartGroup
//Dependency: GcConstructionPart
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceConstruct
{
	NMS::NMSString0x20A NexusNeedPartsScanEvent;
	NMS::NMSString0x20A NoBaseInSystemScanEvent;
	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageInNexusAndNeedParts;
	NMS::VariableSizeString MessageNoBaseInSystem;
	NMS::VariableSizeString MessageNoBaseInSystemAndNoStation;
	NMS::VariableSizeString MessageOutsideBase;
	std::vector<NMS_GameComponents::GcConstructionPartGroup> PotentialPartGroups;
	std::vector<NMS_GameComponents::GcConstructionPart> PotentialParts;
	int32_t NumUniquePartsRequired;
	bool HideCompletedPartsOutOfBase;
	bool HideOtherPartsWhenBuyingBlueprints;
	bool OnlyPickFromKnown;
	bool ShuffleParts;

	friend bool operator==(const GcMissionSequenceConstruct& lhs, const GcMissionSequenceConstruct& rhs) 
	{
		return lhs.NexusNeedPartsScanEvent == rhs.NexusNeedPartsScanEvent &&
		lhs.NoBaseInSystemScanEvent == rhs.NoBaseInSystemScanEvent &&
		lhs.Type == rhs.Type &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageInNexusAndNeedParts == rhs.MessageInNexusAndNeedParts &&
		lhs.MessageNoBaseInSystem == rhs.MessageNoBaseInSystem &&
		lhs.MessageNoBaseInSystemAndNoStation == rhs.MessageNoBaseInSystemAndNoStation &&
		lhs.MessageOutsideBase == rhs.MessageOutsideBase &&
		lhs.PotentialPartGroups == rhs.PotentialPartGroups &&
		lhs.PotentialParts == rhs.PotentialParts &&
		lhs.NumUniquePartsRequired == rhs.NumUniquePartsRequired &&
		lhs.HideCompletedPartsOutOfBase == rhs.HideCompletedPartsOutOfBase &&
		lhs.HideOtherPartsWhenBuyingBlueprints == rhs.HideOtherPartsWhenBuyingBlueprints &&
		lhs.OnlyPickFromKnown == rhs.OnlyPickFromKnown &&
		lhs.ShuffleParts == rhs.ShuffleParts;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceConstructSettlementBuildingWithScanEvent
{
	NMS::NMSString0x20A ScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageWhenDistant;
	NMS::VariableSizeString MessageWhileBuilding;
	NMS::VariableSizeString MessageWithItemsGathered;
	NMS::VariableSizeString UpgradeMessageWithItemsGathered;
	float ForceCompleteSequenceAtStagePercentage;

	friend bool operator==(const GcMissionSequenceConstructSettlementBuildingWithScanEvent& lhs, const GcMissionSequenceConstructSettlementBuildingWithScanEvent& rhs) 
	{
		return lhs.ScanEvent == rhs.ScanEvent &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageWhenDistant == rhs.MessageWhenDistant &&
		lhs.MessageWhileBuilding == rhs.MessageWhileBuilding &&
		lhs.MessageWithItemsGathered == rhs.MessageWithItemsGathered &&
		lhs.UpgradeMessageWithItemsGathered == rhs.UpgradeMessageWithItemsGathered &&
		lhs.ForceCompleteSequenceAtStagePercentage == rhs.ForceCompleteSequenceAtStagePercentage;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceCraftProduct
{
	NMS::NMSString0x20A MessageCanCraft;
	NMS::NMSString0x20A MessageLearnPreReqs;
	NMS::NMSString0x20A MessageLearnRecipe;
	NMS::NMSString0x20A MessageNoIngreds;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 TargetProductID;
	int32_t TargetAmount;
	bool CanSetIcon;
	bool TakeAmountFromSeasonData;
	bool TakeIDFromSeasonData;
	bool TeachIfNotKnown;
	bool WaitForSelected;

	friend bool operator==(const GcMissionSequenceCraftProduct& lhs, const GcMissionSequenceCraftProduct& rhs) 
	{
		return lhs.MessageCanCraft == rhs.MessageCanCraft &&
		lhs.MessageLearnPreReqs == rhs.MessageLearnPreReqs &&
		lhs.MessageLearnRecipe == rhs.MessageLearnRecipe &&
		lhs.MessageNoIngreds == rhs.MessageNoIngreds &&
		lhs.DebugText == rhs.DebugText &&
		lhs.TargetProductID == rhs.TargetProductID &&
		lhs.TargetAmount == rhs.TargetAmount &&
		lhs.CanSetIcon == rhs.CanSetIcon &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.TakeIDFromSeasonData == rhs.TakeIDFromSeasonData &&
		lhs.TeachIfNotKnown == rhs.TeachIfNotKnown &&
		lhs.WaitForSelected == rhs.WaitForSelected;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceCreateSpecificPulseEncounter
{
	NMS::NMSString0x20A ShipHUDOverrideWhenReady;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageEncounterReady;
	NMS::VariableSizeString MessageNoShip;
	NMS::VariableSizeString MessageNotPulsing;
	NMS::VariableSizeString MessageSignalBlocked;
	NMS::NMSString0x10 PulseEncounterID;
	float MinTimeInPulse;
	bool AllowAnyEncounter;
	bool AllowOutsideShip;
	bool EnsureClearOfSolarSystemObjects;
	bool Silent;
	bool TakeEncounterIDFromSeasonData;

	friend bool operator==(const GcMissionSequenceCreateSpecificPulseEncounter& lhs, const GcMissionSequenceCreateSpecificPulseEncounter& rhs) 
	{
		return lhs.ShipHUDOverrideWhenReady == rhs.ShipHUDOverrideWhenReady &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageEncounterReady == rhs.MessageEncounterReady &&
		lhs.MessageNoShip == rhs.MessageNoShip &&
		lhs.MessageNotPulsing == rhs.MessageNotPulsing &&
		lhs.MessageSignalBlocked == rhs.MessageSignalBlocked &&
		lhs.PulseEncounterID == rhs.PulseEncounterID &&
		lhs.MinTimeInPulse == rhs.MinTimeInPulse &&
		lhs.AllowAnyEncounter == rhs.AllowAnyEncounter &&
		lhs.AllowOutsideShip == rhs.AllowOutsideShip &&
		lhs.EnsureClearOfSolarSystemObjects == rhs.EnsureClearOfSolarSystemObjects &&
		lhs.Silent == rhs.Silent &&
		lhs.TakeEncounterIDFromSeasonData == rhs.TakeEncounterIDFromSeasonData;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceDiscover
{
	enum class DiscoverTargetEnum : uint32_t
	{
		Animal = 0,
		Vegetable = 1,
		Mineral = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcMissionSequenceDiscover::DiscoverTargetEnum DiscoverTarget;
	bool PerPlanet;
	bool TakeAmountFromSeasonalData;

	friend bool operator==(const GcMissionSequenceDiscover& lhs, const GcMissionSequenceDiscover& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.DiscoverTarget == rhs.DiscoverTarget &&
		lhs.PerPlanet == rhs.PerPlanet &&
		lhs.TakeAmountFromSeasonalData == rhs.TakeAmountFromSeasonalData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
struct TkHeavyAirSystem
{
	NMS::Vector3f AmplitudeMax;
	NMS::Vector3f AmplitudeMin;
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f FadeSpeedRange;
	NMS::Vector3f MajorDirection;
	NMS::Vector3f RotationSpeedRange;
	NMS::Vector3f ScaleRange;
	NMS::Vector3f TwinkleRange;
	NMS::VariableSizeString Material;
	float Colour1Alpha;
	float Colour2Alpha;

	friend bool operator==(const TkHeavyAirSystem& lhs, const TkHeavyAirSystem& rhs) 
	{
		return lhs.AmplitudeMax == rhs.AmplitudeMax &&
		lhs.AmplitudeMin == rhs.AmplitudeMin &&
		lhs.Colour1 == rhs.Colour1 &&
		lhs.Colour2 == rhs.Colour2 &&
		lhs.FadeSpeedRange == rhs.FadeSpeedRange &&
		lhs.MajorDirection == rhs.MajorDirection &&
		lhs.RotationSpeedRange == rhs.RotationSpeedRange &&
		lhs.ScaleRange == rhs.ScaleRange &&
		lhs.TwinkleRange == rhs.TwinkleRange &&
		lhs.Material == rhs.Material &&
		lhs.Colour1Alpha == rhs.Colour1Alpha &&
		lhs.Colour2Alpha == rhs.Colour2Alpha;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceDisplaySeasonRewardReminder
{
	NMS::VariableSizeString DebugText;
	float Time;

	friend bool operator==(const GcMissionSequenceDisplaySeasonRewardReminder& lhs, const GcMissionSequenceDisplaySeasonRewardReminder& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Time == rhs.Time;
	}
};

//Dependency: GcFactionSelectOptions
//Dependency: VariableSizeString
struct GcMissionSequenceDoMissionsForFaction
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcFactionSelectOptions SelectFrom;
	int32_t AmountMax;
	int32_t AmountMin;

	friend bool operator==(const GcMissionSequenceDoMissionsForFaction& lhs, const GcMissionSequenceDoMissionsForFaction& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.SelectFrom == rhs.SelectFrom &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin;
	}
};

//Dependency: GcNPCPropInfo
struct GcNPCPropTable
{
	NMS_GameComponents::GcNPCPropInfo Props[15];

	friend bool operator==(const GcNPCPropTable& lhs, const GcNPCPropTable& rhs) 
	{
		return std::equal(std::begin(lhs.Props), std::end(lhs.Props), std::begin(rhs.Props));
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceExplorationLogSpecial
{
	NMS::NMSString0x20A CustomPlanetLog;
	NMS::NMSString0x20A CustomPlanetMessage;
	NMS::NMSString0x20A CustomSystemLog;
	NMS::NMSString0x20A CustomSystemMessage;
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceExplorationLogSpecial& lhs, const GcMissionSequenceExplorationLogSpecial& rhs) 
	{
		return lhs.CustomPlanetLog == rhs.CustomPlanetLog &&
		lhs.CustomPlanetMessage == rhs.CustomPlanetMessage &&
		lhs.CustomSystemLog == rhs.CustomSystemLog &&
		lhs.CustomSystemMessage == rhs.CustomSystemMessage &&
		lhs.DebugText == rhs.DebugText;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

struct GcAtlasGlobals
{
	int32_t ChanceOfDisconnect;
	int32_t TimeoutSecConnection;
	int32_t TimeoutSecNameResolution;
	int32_t TimeoutSecSendRecv;

	friend bool operator==(const GcAtlasGlobals& lhs, const GcAtlasGlobals& rhs) 
	{
		return lhs.ChanceOfDisconnect == rhs.ChanceOfDisconnect &&
		lhs.TimeoutSecConnection == rhs.TimeoutSecConnection &&
		lhs.TimeoutSecNameResolution == rhs.TimeoutSecNameResolution &&
		lhs.TimeoutSecSendRecv == rhs.TimeoutSecSendRecv;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceFeed
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;
	bool RequireSpecificBait;

	friend bool operator==(const GcMissionSequenceFeed& lhs, const GcMissionSequenceFeed& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.RequireSpecificBait == rhs.RequireSpecificBait;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceFinishSummonAnomaly
{
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceFinishSummonAnomaly& lhs, const GcMissionSequenceFinishSummonAnomaly& rhs) 
	{
		return lhs.DebugText == rhs.DebugText;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkLocalisationEntry
{
	NMS::NMSString0x20A Id;
	NMS::VariableSizeString BrazilianPortuguese;
	NMS::VariableSizeString Dutch;
	NMS::VariableSizeString English;
	NMS::VariableSizeString French;
	NMS::VariableSizeString German;
	NMS::VariableSizeString Italian;
	NMS::VariableSizeString Japanese;
	NMS::VariableSizeString Korean;
	NMS::VariableSizeString LatinAmericanSpanish;
	NMS::VariableSizeString Polish;
	NMS::VariableSizeString Portuguese;
	NMS::VariableSizeString Russian;
	NMS::VariableSizeString SimplifiedChinese;
	NMS::VariableSizeString Spanish;
	NMS::VariableSizeString TencentChinese;
	NMS::VariableSizeString TraditionalChinese;
	NMS::VariableSizeString USEnglish;

	friend bool operator==(const TkLocalisationEntry& lhs, const TkLocalisationEntry& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.BrazilianPortuguese == rhs.BrazilianPortuguese &&
		lhs.Dutch == rhs.Dutch &&
		lhs.English == rhs.English &&
		lhs.French == rhs.French &&
		lhs.German == rhs.German &&
		lhs.Italian == rhs.Italian &&
		lhs.Japanese == rhs.Japanese &&
		lhs.Korean == rhs.Korean &&
		lhs.LatinAmericanSpanish == rhs.LatinAmericanSpanish &&
		lhs.Polish == rhs.Polish &&
		lhs.Portuguese == rhs.Portuguese &&
		lhs.Russian == rhs.Russian &&
		lhs.SimplifiedChinese == rhs.SimplifiedChinese &&
		lhs.Spanish == rhs.Spanish &&
		lhs.TencentChinese == rhs.TencentChinese &&
		lhs.TraditionalChinese == rhs.TraditionalChinese &&
		lhs.USEnglish == rhs.USEnglish;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcMissionFishData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceFish
{
	NMS_GameComponents::GcMissionFishData TargetFishInfo;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 FormatStatIntoText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageAvailableNearby;
	NMS::VariableSizeString MessageNoFishLaserEquipped;
	NMS::VariableSizeString MessageNoFishLaserInstalled;
	NMS::VariableSizeString MessageNoneInSystem;
	int32_t Amount;
	float DepthToFormatIntoText;
	bool FromNow;
	bool Multiplayer;
	bool NeverCompleteSequence;
	bool QualityTestIsEqualOrGreater;
	bool SizeTestIsEqualOrGreater;
	bool TakeAmountFromDefaultNumber;
	bool TakeAmountFromSeasonData;
	bool TakeDepthFromSeasonData;

	friend bool operator==(const GcMissionSequenceFish& lhs, const GcMissionSequenceFish& rhs) 
	{
		return lhs.TargetFishInfo == rhs.TargetFishInfo &&
		lhs.DebugText == rhs.DebugText &&
		lhs.FormatStatIntoText == rhs.FormatStatIntoText &&
		lhs.Message == rhs.Message &&
		lhs.MessageAvailableNearby == rhs.MessageAvailableNearby &&
		lhs.MessageNoFishLaserEquipped == rhs.MessageNoFishLaserEquipped &&
		lhs.MessageNoFishLaserInstalled == rhs.MessageNoFishLaserInstalled &&
		lhs.MessageNoneInSystem == rhs.MessageNoneInSystem &&
		lhs.Amount == rhs.Amount &&
		lhs.DepthToFormatIntoText == rhs.DepthToFormatIntoText &&
		lhs.FromNow == rhs.FromNow &&
		lhs.Multiplayer == rhs.Multiplayer &&
		lhs.NeverCompleteSequence == rhs.NeverCompleteSequence &&
		lhs.QualityTestIsEqualOrGreater == rhs.QualityTestIsEqualOrGreater &&
		lhs.SizeTestIsEqualOrGreater == rhs.SizeTestIsEqualOrGreater &&
		lhs.TakeAmountFromDefaultNumber == rhs.TakeAmountFromDefaultNumber &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData &&
		lhs.TakeDepthFromSeasonData == rhs.TakeDepthFromSeasonData;
	}
};

//Dependency: NMSString0x100
struct GcNGuiFileBrowserRecents
{
	NMS::NMSString0x100 Recents[10];

	friend bool operator==(const GcNGuiFileBrowserRecents& lhs, const GcNGuiFileBrowserRecents& rhs) 
	{
		return std::equal(std::begin(lhs.Recents), std::end(lhs.Recents), std::begin(rhs.Recents));
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceFreighterDefend
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceFreighterDefend& lhs, const GcMissionSequenceFreighterDefend& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
struct GcRewardSpecificSubstance
{
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool Silent;
	bool UseFuelMultiplier;
	bool UseMissionBoardDifficultyScale;

	friend bool operator==(const GcRewardSpecificSubstance& lhs, const GcRewardSpecificSubstance& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Default == rhs.Default &&
		lhs.DisableMultiplier == rhs.DisableMultiplier &&
		lhs.RewardAsBlobs == rhs.RewardAsBlobs &&
		lhs.Silent == rhs.Silent &&
		lhs.UseFuelMultiplier == rhs.UseFuelMultiplier &&
		lhs.UseMissionBoardDifficultyScale == rhs.UseMissionBoardDifficultyScale;
	}
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceGatherForRefuel
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;

	friend bool operator==(const GcMissionSequenceGatherForRefuel& lhs, const GcMissionSequenceGatherForRefuel& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount &&
		lhs.TargetStat == rhs.TargetStat;
	}
};

//Dependency: NMSString0x10
struct GcPainAction
{
	NMS::NMSString0x10 Damage;
	float Radius;
	float RetriggerTime;
	bool AffectsPlayer;
	bool RadiusBasedDamage;

	friend bool operator==(const GcPainAction& lhs, const GcPainAction& rhs) 
	{
		return lhs.Damage == rhs.Damage &&
		lhs.Radius == rhs.Radius &&
		lhs.RetriggerTime == rhs.RetriggerTime &&
		lhs.AffectsPlayer == rhs.AffectsPlayer &&
		lhs.RadiusBasedDamage == rhs.RadiusBasedDamage;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: VariableSizeString
//Dependency: Vector3f
struct GcSceneOptions
{
	NMS::VariableSizeString AtmosphereFile;
	NMS::VariableSizeString BiomeFile;
	NMS::VariableSizeString CaveBiomeFile;
	std::vector<NMS::Vector3f> ForceResource;
	NMS::VariableSizeString TerrainFile;
	NMS::VariableSizeString WaterBiomeFile;
	float ForceResourceSize;
	int32_t RecentToolboxIndex;
	int32_t SelectedToolboxIndex;
	bool OverrideAtmosphere;
	bool OverrideBiome;
	bool OverrideCaveBiome;
	bool OverrideTerrain;
	bool OverrideWaterBiome;

	friend bool operator==(const GcSceneOptions& lhs, const GcSceneOptions& rhs) 
	{
		return lhs.AtmosphereFile == rhs.AtmosphereFile &&
		lhs.BiomeFile == rhs.BiomeFile &&
		lhs.CaveBiomeFile == rhs.CaveBiomeFile &&
		lhs.ForceResource == rhs.ForceResource &&
		lhs.TerrainFile == rhs.TerrainFile &&
		lhs.WaterBiomeFile == rhs.WaterBiomeFile &&
		lhs.ForceResourceSize == rhs.ForceResourceSize &&
		lhs.RecentToolboxIndex == rhs.RecentToolboxIndex &&
		lhs.SelectedToolboxIndex == rhs.SelectedToolboxIndex &&
		lhs.OverrideAtmosphere == rhs.OverrideAtmosphere &&
		lhs.OverrideBiome == rhs.OverrideBiome &&
		lhs.OverrideCaveBiome == rhs.OverrideCaveBiome &&
		lhs.OverrideTerrain == rhs.OverrideTerrain &&
		lhs.OverrideWaterBiome == rhs.OverrideWaterBiome;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGatherForRepair
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 GatherResource;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcStatsTypes TargetStat;

	friend bool operator==(const GcMissionSequenceGatherForRepair& lhs, const GcMissionSequenceGatherForRepair& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.GatherResource == rhs.GatherResource &&
		lhs.Message == rhs.Message &&
		lhs.TargetStat == rhs.TargetStat;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceGetToExpedition
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float CompletionDistance;
	float Timeout;

	friend bool operator==(const GcMissionSequenceGetToExpedition& lhs, const GcMissionSequenceGetToExpedition& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.DebugText == rhs.DebugText &&
		lhs.GalaxyMapMessage == rhs.GalaxyMapMessage &&
		lhs.Message == rhs.Message &&
		lhs.TimeoutOSD == rhs.TimeoutOSD &&
		lhs.CompletionDistance == rhs.CompletionDistance &&
		lhs.Timeout == rhs.Timeout;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceGetUnits
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;

	friend bool operator==(const GcMissionSequenceGetUnits& lhs, const GcMissionSequenceGetUnits& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: GcMissionGalacticPoint
//Dependency: VariableSizeString
struct GcMissionSequenceGoToGalacticPoint
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionGalacticPoint Target;

	friend bool operator==(const GcMissionSequenceGoToGalacticPoint& lhs, const GcMissionSequenceGoToGalacticPoint& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Target == rhs.Target;
	}
};

//Dependency: GcNPCProbabilityAnimationData
struct GcNPCAnimationList
{
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> Animations;

	friend bool operator==(const GcNPCAnimationList& lhs, const GcNPCAnimationList& rhs) 
	{
		return lhs.Animations == rhs.Animations;
	}
};

//Dependency: GcNPCAnimationList
//Dependency: GcNPCProbabilityAnimationData
//Dependency: NMSString0x10
struct GcNPCAnimationSetData
{
	NMS_GameComponents::GcNPCAnimationList MoodAnims[10];
	NMS::NMSString0x10 MoodLoops[10];
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> ChatterAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> GreetAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> IdleAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> IdleFlavourAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> ListenAnimations;

	friend bool operator==(const GcNPCAnimationSetData& lhs, const GcNPCAnimationSetData& rhs) 
	{
		return std::equal(std::begin(lhs.MoodAnims), std::end(lhs.MoodAnims), std::begin(rhs.MoodAnims)) &&
		std::equal(std::begin(lhs.MoodLoops), std::end(lhs.MoodLoops), std::begin(rhs.MoodLoops)) &&
		lhs.ChatterAnimations == rhs.ChatterAnimations &&
		lhs.GreetAnimations == rhs.GreetAnimations &&
		lhs.IdleAnimations == rhs.IdleAnimations &&
		lhs.IdleFlavourAnimations == rhs.IdleFlavourAnimations &&
		lhs.ListenAnimations == rhs.ListenAnimations;
	}
};

//Dependency: GcNPCAnimationSetData
struct GcNPCAnimationsData
{
	NMS_GameComponents::GcNPCAnimationSetData SittingAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData SittingIPadAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingIPadAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingStaffAnimatons;

	friend bool operator==(const GcNPCAnimationsData& lhs, const GcNPCAnimationsData& rhs) 
	{
		return lhs.SittingAnimatons == rhs.SittingAnimatons &&
		lhs.SittingIPadAnimatons == rhs.SittingIPadAnimatons &&
		lhs.StandingAnimatons == rhs.StandingAnimatons &&
		lhs.StandingIPadAnimatons == rhs.StandingIPadAnimatons &&
		lhs.StandingStaffAnimatons == rhs.StandingStaffAnimatons;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcTargetMissionSurveyOptions
{
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::NMSString0x10 TargetMissionSurveyDefinitelyExistsWithResourceHint;
	NMS::NMSString0x10 TargetMissionSurveyId;
	bool ForceSurveyTextForAllSequencesInThisGroup;
	bool TargetMissionSurveyDefinitelyExists;

	friend bool operator==(const GcTargetMissionSurveyOptions& lhs, const GcTargetMissionSurveyOptions& rhs) 
	{
		return lhs.SurveyHint == rhs.SurveyHint &&
		lhs.SurveyInactiveHint == rhs.SurveyInactiveHint &&
		lhs.SurveySwapHint == rhs.SurveySwapHint &&
		lhs.SurveyVehicleHint == rhs.SurveyVehicleHint &&
		lhs.TargetMissionSurveyDefinitelyExistsWithResourceHint == rhs.TargetMissionSurveyDefinitelyExistsWithResourceHint &&
		lhs.TargetMissionSurveyId == rhs.TargetMissionSurveyId &&
		lhs.ForceSurveyTextForAllSequencesInThisGroup == rhs.ForceSurveyTextForAllSequencesInThisGroup &&
		lhs.TargetMissionSurveyDefinitelyExists == rhs.TargetMissionSurveyDefinitelyExists;
	}
};

//Dependency: GcMissionConditionTest
//Dependency: GcCustomNotifyTimerOptions
//Dependency: GcTargetMissionSurveyOptions
//Dependency: GcMissionCategory
//Dependency: GcSeasonalObjectiveOverrides
//Dependency: GcGenericMissionStage
//Dependency: GcObjectiveTextFormatOptions
//Dependency: GcMissionPageHint
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceGroup
{
	enum class RepeatLogicEnum : uint32_t
	{
		None = 0,
		Loop = 1,
		RestartOnConditionFail = 2,
	};

	enum class IconStyleEnum : uint32_t
	{
		Default = 0,
		Large = 1,
		Square = 2,
		NoFrame = 3,
	};

	enum class GalMapPathOverrideEnum : uint32_t
	{
		None = 0,
		BlackHole = 1,
		Atlas = 2,
	};

	NMS::Colour ColourOverride;
	NMS_GameComponents::GcTargetMissionSurveyOptions SurveyTarget;
	NMS_GameComponents::GcSeasonalObjectiveOverrides SeasonalObjectiveOverrides;
	NMS_GameComponents::GcObjectiveTextFormatOptions ObjectiveFormatting;
	NMS::NMSString0x20A ObjectiveID;
	NMS::NMSString0x20A ObjectiveTipID;
	NMS::NMSString0x20A PageDataLocID;
	NMS::NMSString0x20A PrefixTitleText;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 BuildMenuHint;
	std::vector<NMSTemplate> Conditions;
	std::vector<NMSTemplate> Consequences;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 FoodTarget;
	NMS::NMSString0x10 InventoryHint;
	std::vector<NMS_GameComponents::GcGenericMissionStage> Stages;
	NMS::NMSString0x10 TerrainTarget;
	NMS_GameComponents::GcCustomNotifyTimerOptions CustomNotifyTimers;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	NMS_GameComponents::GcMissionSequenceGroup::GalMapPathOverrideEnum GalMapPathOverride;
	NMS_GameComponents::GcMissionSequenceGroup::IconStyleEnum IconStyle;
	NMS_GameComponents::GcMissionCategory OverrideCategory;
	NMS_GameComponents::GcMissionPageHint PageHint;
	NMS_GameComponents::GcMissionSequenceGroup::RepeatLogicEnum RepeatLogic;
	NMS_Toolkit::TkInputEnum SpecialButtonIcon;
	bool AutoPinRepairs;
	bool BlockPinning;
	bool BlockSpaceBattles;
	bool DoConsequencesIfNeverActivated;
	bool HasCategoryOverride;
	bool HasColourOverride;
	bool HideFromLogIfConditionsMet;
	bool PrefixTitle;
	bool Silent;

	friend bool operator==(const GcMissionSequenceGroup& lhs, const GcMissionSequenceGroup& rhs) 
	{
		return lhs.ColourOverride == rhs.ColourOverride &&
		lhs.SurveyTarget == rhs.SurveyTarget &&
		lhs.SeasonalObjectiveOverrides == rhs.SeasonalObjectiveOverrides &&
		lhs.ObjectiveFormatting == rhs.ObjectiveFormatting &&
		lhs.ObjectiveID == rhs.ObjectiveID &&
		lhs.ObjectiveTipID == rhs.ObjectiveTipID &&
		lhs.PageDataLocID == rhs.PageDataLocID &&
		lhs.PrefixTitleText == rhs.PrefixTitleText &&
		lhs.Icon == rhs.Icon &&
		lhs.BuildMenuHint == rhs.BuildMenuHint &&
		lhs.Conditions == rhs.Conditions &&
		lhs.Consequences == rhs.Consequences &&
		lhs.DebugText == rhs.DebugText &&
		lhs.FoodTarget == rhs.FoodTarget &&
		lhs.InventoryHint == rhs.InventoryHint &&
		lhs.Stages == rhs.Stages &&
		lhs.TerrainTarget == rhs.TerrainTarget &&
		lhs.CustomNotifyTimers == rhs.CustomNotifyTimers &&
		lhs.ConditionTest == rhs.ConditionTest &&
		lhs.GalMapPathOverride == rhs.GalMapPathOverride &&
		lhs.IconStyle == rhs.IconStyle &&
		lhs.OverrideCategory == rhs.OverrideCategory &&
		lhs.PageHint == rhs.PageHint &&
		lhs.RepeatLogic == rhs.RepeatLogic &&
		lhs.SpecialButtonIcon == rhs.SpecialButtonIcon &&
		lhs.AutoPinRepairs == rhs.AutoPinRepairs &&
		lhs.BlockPinning == rhs.BlockPinning &&
		lhs.BlockSpaceBattles == rhs.BlockSpaceBattles &&
		lhs.DoConsequencesIfNeverActivated == rhs.DoConsequencesIfNeverActivated &&
		lhs.HasCategoryOverride == rhs.HasCategoryOverride &&
		lhs.HasColourOverride == rhs.HasColourOverride &&
		lhs.HideFromLogIfConditionsMet == rhs.HideFromLogIfConditionsMet &&
		lhs.PrefixTitle == rhs.PrefixTitle &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceKill
{
	enum class KillTargetEnum : uint32_t
	{
		Robots = 0,
		Drones = 1,
		Quads = 2,
		Walkers = 3,
		Predators = 4,
		Creatures = 5,
		Pirates = 6,
		Traders = 7,
		Fiends = 8,
		Queens = 9,
		HazardousFlora = 10,
		Worms = 11,
		CorruptSentinels = 12,
		SpiderSentinels = 13,
		SmallSpiderSentinels = 14,
		HostilesWhileInMech = 15,
		CorruptPillars = 16,
		Mechs = 17,
		SpookSquids = 18,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMaxNoMP;
	int32_t AmountMin;
	int32_t AmountMinNoMP;
	NMS_GameComponents::GcMissionSequenceKill::KillTargetEnum KillTarget;
	int32_t OverrideMissionStageIDForMPProgress;
	bool AddToMissionBoardObjective;
	bool UseDefaultAmount;
	bool WriteProgressToMissionStat;

	friend bool operator==(const GcMissionSequenceKill& lhs, const GcMissionSequenceKill& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMaxNoMP == rhs.AmountMaxNoMP &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.AmountMinNoMP == rhs.AmountMinNoMP &&
		lhs.KillTarget == rhs.KillTarget &&
		lhs.OverrideMissionStageIDForMPProgress == rhs.OverrideMissionStageIDForMPProgress &&
		lhs.AddToMissionBoardObjective == rhs.AddToMissionBoardObjective &&
		lhs.UseDefaultAmount == rhs.UseDefaultAmount &&
		lhs.WriteProgressToMissionStat == rhs.WriteProgressToMissionStat;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceKillEncounter
{
	NMS::NMSString0x20A EncounterComponentScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	bool AllowedToEscape;

	friend bool operator==(const GcMissionSequenceKillEncounter& lhs, const GcMissionSequenceKillEncounter& rhs) 
	{
		return lhs.EncounterComponentScanEvent == rhs.EncounterComponentScanEvent &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.AllowedToEscape == rhs.AllowedToEscape;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceLearnWords
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;

	friend bool operator==(const GcMissionSequenceLearnWords& lhs, const GcMissionSequenceLearnWords& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: GcStatModifyType
//Dependency: NMSString0x10
struct GcMissionSequenceModifyStat
{
	NMS::NMSString0x10 Stat;
	int32_t Amount;
	NMS_GameComponents::GcStatModifyType ModifyType;

	friend bool operator==(const GcMissionSequenceModifyStat& lhs, const GcMissionSequenceModifyStat& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.Amount == rhs.Amount &&
		lhs.ModifyType == rhs.ModifyType;
	}
};

//Dependency: NMSString0x10
struct GcMissionSequencePinProductSurrogate
{
	NMS::NMSString0x10 ProductID;
	bool TakeProductFromSeasonData;

	friend bool operator==(const GcMissionSequencePinProductSurrogate& lhs, const GcMissionSequencePinProductSurrogate& rhs) 
	{
		return lhs.ProductID == rhs.ProductID &&
		lhs.TakeProductFromSeasonData == rhs.TakeProductFromSeasonData;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceStop
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceStop& lhs, const GcMissionSequenceStop& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequencePirates
{
	enum class PirateSpawnTypeEnum : uint32_t
	{
		CargoAttackStart = 0,
		ProbeSuccess = 1,
		PlanetaryRaidStart = 2,
	};

	NMS::NMSString0x20A RewardMessageOverride;
	NMS::NMSString0x10 AttackDefinition;
	NMS::VariableSizeString DebugText;
	float DistanceOverride;
	int32_t NumSquads;
	NMS_GameComponents::GcMissionSequencePirates::PirateSpawnTypeEnum PirateSpawnType;
	bool ForceSpawn;
	bool Silent;

	friend bool operator==(const GcMissionSequencePirates& lhs, const GcMissionSequencePirates& rhs) 
	{
		return lhs.RewardMessageOverride == rhs.RewardMessageOverride &&
		lhs.AttackDefinition == rhs.AttackDefinition &&
		lhs.DebugText == rhs.DebugText &&
		lhs.DistanceOverride == rhs.DistanceOverride &&
		lhs.NumSquads == rhs.NumSquads &&
		lhs.PirateSpawnType == rhs.PirateSpawnType &&
		lhs.ForceSpawn == rhs.ForceSpawn &&
		lhs.Silent == rhs.Silent;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkLSystemRestrictionData
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemGlobalRestriction
{
	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemRestrictionData> Restrictions;
	NMS::NMSString0x20 Name;

	friend bool operator==(const TkLSystemGlobalRestriction& lhs, const TkLSystemGlobalRestriction& rhs) 
	{
		return lhs.Model == rhs.Model &&
		lhs.Restrictions == rhs.Restrictions &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceQuickWarp
{
	NMS::NMSString0x20A ScanEventToWarpTo;
	NMS::NMSString0x10 CameraShakeID;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageCannotWarp;
	NMS::VariableSizeString MessageWarping;
	float EffectTime;
	float SequenceTime;
	bool DoCameraShake;
	bool DoWhiteout;

	friend bool operator==(const GcMissionSequenceQuickWarp& lhs, const GcMissionSequenceQuickWarp& rhs) 
	{
		return lhs.ScanEventToWarpTo == rhs.ScanEventToWarpTo &&
		lhs.CameraShakeID == rhs.CameraShakeID &&
		lhs.DebugText == rhs.DebugText &&
		lhs.MessageCannotWarp == rhs.MessageCannotWarp &&
		lhs.MessageWarping == rhs.MessageWarping &&
		lhs.EffectTime == rhs.EffectTime &&
		lhs.SequenceTime == rhs.SequenceTime &&
		lhs.DoCameraShake == rhs.DoCameraShake &&
		lhs.DoWhiteout == rhs.DoWhiteout;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceRepairTech
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	std::vector<NMS::NMSString0x10> TechsToRepair;

	friend bool operator==(const GcMissionSequenceRepairTech& lhs, const GcMissionSequenceRepairTech& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.TechsToRepair == rhs.TechsToRepair;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceRestorePurpleSystemStats
{
	NMS::VariableSizeString DebugText;

	friend bool operator==(const GcMissionSequenceRestorePurpleSystemStats& lhs, const GcMissionSequenceRestorePurpleSystemStats& rhs) 
	{
		return lhs.DebugText == rhs.DebugText;
	}
};

//Dependency: GcPlayerEmotePropData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcResource
struct GcPlayerEmote
{
	NMS_GameComponents::GcPlayerEmotePropData PropData;
	NMS::NMSString0x20A ChatText;
	NMS::NMSString0x20A PetCommandTitle;
	NMS::NMSString0x20A Title;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource PetCommandIcon;
	NMS::NMSString0x10 AnimationName;
	NMS::NMSString0x10 EmoteID;
	NMS::NMSString0x10 GekAnimationName;
	NMS::NMSString0x10 GekLoopAnimUntilMove;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 LoopAnimUntilMove;
	NMS::NMSString0x10 RidingAnimationName;
	NMS::GcResource IconPetCommandResource;
	NMS::GcResource IconResource;
	bool AvailableUnderwater;
	bool ChatUsesPrefix;
	bool CloseMenuOnSelect;
	bool IsPetCommand;
	bool MoveToCancel;
	bool NeverShowInMenu;

	friend bool operator==(const GcPlayerEmote& lhs, const GcPlayerEmote& rhs) 
	{
		return lhs.PropData == rhs.PropData &&
		lhs.ChatText == rhs.ChatText &&
		lhs.PetCommandTitle == rhs.PetCommandTitle &&
		lhs.Title == rhs.Title &&
		lhs.Icon == rhs.Icon &&
		lhs.PetCommandIcon == rhs.PetCommandIcon &&
		lhs.AnimationName == rhs.AnimationName &&
		lhs.EmoteID == rhs.EmoteID &&
		lhs.GekAnimationName == rhs.GekAnimationName &&
		lhs.GekLoopAnimUntilMove == rhs.GekLoopAnimUntilMove &&
		lhs.LinkedSpecialID == rhs.LinkedSpecialID &&
		lhs.LoopAnimUntilMove == rhs.LoopAnimUntilMove &&
		lhs.RidingAnimationName == rhs.RidingAnimationName &&
		lhs.IconPetCommandResource == rhs.IconPetCommandResource &&
		lhs.IconResource == rhs.IconResource &&
		lhs.AvailableUnderwater == rhs.AvailableUnderwater &&
		lhs.ChatUsesPrefix == rhs.ChatUsesPrefix &&
		lhs.CloseMenuOnSelect == rhs.CloseMenuOnSelect &&
		lhs.IsPetCommand == rhs.IsPetCommand &&
		lhs.MoveToCancel == rhs.MoveToCancel &&
		lhs.NeverShowInMenu == rhs.NeverShowInMenu;
	}
};

//Dependency: GcPlayerEmote
struct GcPlayerEmoteList
{
	std::vector<NMS_GameComponents::GcPlayerEmote> Emotes;

	friend bool operator==(const GcPlayerEmoteList& lhs, const GcPlayerEmoteList& rhs) 
	{
		return lhs.Emotes == rhs.Emotes;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceReward
{
	enum class RewardInventoryOverrideEnum : uint32_t
	{
		None = 0,
		Suit = 1,
		Ship = 2,
		Vehicle = 3,
		Freighter = 4,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Reward;
	NMS_GameComponents::GcMissionSequenceReward::RewardInventoryOverrideEnum RewardInventoryOverride;
	bool DoMissionBoardOverride;
	bool Silent;

	friend bool operator==(const GcMissionSequenceReward& lhs, const GcMissionSequenceReward& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Reward == rhs.Reward &&
		lhs.RewardInventoryOverride == rhs.RewardInventoryOverride &&
		lhs.DoMissionBoardOverride == rhs.DoMissionBoardOverride &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceScan
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 ScanOverrideData;
	float WaitTime;
	bool ScanTypesToOverride[11];
	bool BlockTimedScans;
	bool RequiresMissionActive;

	friend bool operator==(const GcMissionSequenceScan& lhs, const GcMissionSequenceScan& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.ScanOverrideData == rhs.ScanOverrideData &&
		lhs.WaitTime == rhs.WaitTime &&
		std::equal(std::begin(lhs.ScanTypesToOverride), std::end(lhs.ScanTypesToOverride), std::begin(rhs.ScanTypesToOverride)) &&
		lhs.BlockTimedScans == rhs.BlockTimedScans &&
		lhs.RequiresMissionActive == rhs.RequiresMissionActive;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceSendChatMessage
{
	NMS::NMSString0x20A CustomText;
	NMS::NMSString0x10 StatusMessageId;

	friend bool operator==(const GcMissionSequenceSendChatMessage& lhs, const GcMissionSequenceSendChatMessage& rhs) 
	{
		return lhs.CustomText == rhs.CustomText &&
		lhs.StatusMessageId == rhs.StatusMessageId;
	}
};

//Dependency: NMSString0x10
struct GcRewardPirateAttack
{
	NMS::NMSString0x10 AttackDefinition;
	int32_t NumSquads;
	bool Instant;

	friend bool operator==(const GcRewardPirateAttack& lhs, const GcRewardPirateAttack& rhs) 
	{
		return lhs.AttackDefinition == rhs.AttackDefinition &&
		lhs.NumSquads == rhs.NumSquads &&
		lhs.Instant == rhs.Instant;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceSetCurrentMission
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 MissionID;
	bool FirstIncompleteMilestone;
	bool Silent;

	friend bool operator==(const GcMissionSequenceSetCurrentMission& lhs, const GcMissionSequenceSetCurrentMission& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.MissionID == rhs.MissionID &&
		lhs.FirstIncompleteMilestone == rhs.FirstIncompleteMilestone &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceShowHintMessage
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 InventoryHint;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessagePadControl;
	NMS::VariableSizeString MessageTitle;
	std::vector<NMSTemplate> UseConditionsForTextFormatting;
	float HighPriorityTime;
	float InitialWaitTime;
	float SecondaryWaitTime;
	bool AllowedWhileInDanger;

	friend bool operator==(const GcMissionSequenceShowHintMessage& lhs, const GcMissionSequenceShowHintMessage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.InventoryHint == rhs.InventoryHint &&
		lhs.Message == rhs.Message &&
		lhs.MessagePadControl == rhs.MessagePadControl &&
		lhs.MessageTitle == rhs.MessageTitle &&
		lhs.UseConditionsForTextFormatting == rhs.UseConditionsForTextFormatting &&
		lhs.HighPriorityTime == rhs.HighPriorityTime &&
		lhs.InitialWaitTime == rhs.InitialWaitTime &&
		lhs.SecondaryWaitTime == rhs.SecondaryWaitTime &&
		lhs.AllowedWhileInDanger == rhs.AllowedWhileInDanger;
	}
};

//Dependency: GcSolarSystemLocatorTypes
//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcSolarSystemLocator
{
	NMS::Vector3f Direction;
	NMS::Vector3f Position;
	float Radius;
	NMS_GameComponents::GcSolarSystemLocatorTypes Type;
	NMS::NMSString0x20 Name;

	friend bool operator==(const GcSolarSystemLocator& lhs, const GcSolarSystemLocator& rhs) 
	{
		return lhs.Direction == rhs.Direction &&
		lhs.Position == rhs.Position &&
		lhs.Radius == rhs.Radius &&
		lhs.Type == rhs.Type &&
		lhs.Name == rhs.Name;
	}
};

struct GcNPCSettlementBehaviourAreaProperty
{
	enum class NPCSettlementBehaviourAreaPropertyEnum : uint32_t
	{
		ContainsPlayer = 0,
		ContainsNPCs = 1,
	};

	NMS_GameComponents::GcNPCSettlementBehaviourAreaProperty::NPCSettlementBehaviourAreaPropertyEnum NPCSettlementBehaviourAreaProperty;

	friend bool operator==(const GcNPCSettlementBehaviourAreaProperty& lhs, const GcNPCSettlementBehaviourAreaProperty& rhs) 
	{
		return lhs.NPCSettlementBehaviourAreaProperty == rhs.NPCSettlementBehaviourAreaProperty;
	}
};

//Dependency: GcNPCSettlementBehaviourAreaProperty
struct GcNPCSettlementBehaviourAreaPropertyWeightEntry
{
	NMS_GameComponents::GcNPCSettlementBehaviourAreaProperty AreaProperty;
	float EntryWeight;
	float ExitWeight;

	friend bool operator==(const GcNPCSettlementBehaviourAreaPropertyWeightEntry& lhs, const GcNPCSettlementBehaviourAreaPropertyWeightEntry& rhs) 
	{
		return lhs.AreaProperty == rhs.AreaProperty &&
		lhs.EntryWeight == rhs.EntryWeight &&
		lhs.ExitWeight == rhs.ExitWeight;
	}
};

//Dependency: GcMissionGalacticPoint
//Dependency: VariableSizeString
struct GcMissionSequenceSignalGalacticPoint
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionGalacticPoint Target;

	friend bool operator==(const GcMissionSequenceSignalGalacticPoint& lhs, const GcMissionSequenceSignalGalacticPoint& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Target == rhs.Target;
	}
};

//Dependency: GcBaseSnapState
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcSnapPointCondition
{
	NMS::NMSString0x10 ObjectId;
	int32_t SnapPointIndex;
	NMS_GameComponents::GcBaseSnapState SnapState;
	NMS::NMSString0x80 SnapPoint;

	friend bool operator==(const GcSnapPointCondition& lhs, const GcSnapPointCondition& rhs) 
	{
		return lhs.ObjectId == rhs.ObjectId &&
		lhs.SnapPointIndex == rhs.SnapPointIndex &&
		lhs.SnapState == rhs.SnapState &&
		lhs.SnapPoint == rhs.SnapPoint;
	}
};

struct GcScanEventTableType
{
	enum class ScanTableEnum : uint32_t
	{
		Space = 0,
		Planet = 1,
		Missions = 2,
		Tutorial = 3,
		MissionsCreative = 4,
		Vehicle = 5,
		NPCPlanetSite = 6,
		Seasonal = 7,
	};

	NMS_GameComponents::GcScanEventTableType::ScanTableEnum ScanTable;

	friend bool operator==(const GcScanEventTableType& lhs, const GcScanEventTableType& rhs) 
	{
		return lhs.ScanTable == rhs.ScanTable;
	}
};

//Dependency: GcPlayerMissionParticipantType
//Dependency: VariableSizeString
//Dependency: GcScanEventTableType
//Dependency: NMSString0x20A
struct GcMissionSequenceStartScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	int32_t InSystemRerolls;
	NMS_GameComponents::GcPlayerMissionParticipantType Participant;
	NMS_GameComponents::GcScanEventTableType Table;
	float Time;
	bool AllowOtherPlayersBase;
	bool DoAerialScan;
	bool IgnoreIfAlreadyActive;

	friend bool operator==(const GcMissionSequenceStartScanEvent& lhs, const GcMissionSequenceStartScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.DebugText == rhs.DebugText &&
		lhs.InSystemRerolls == rhs.InSystemRerolls &&
		lhs.Participant == rhs.Participant &&
		lhs.Table == rhs.Table &&
		lhs.Time == rhs.Time &&
		lhs.AllowOtherPlayersBase == rhs.AllowOtherPlayersBase &&
		lhs.DoAerialScan == rhs.DoAerialScan &&
		lhs.IgnoreIfAlreadyActive == rhs.IgnoreIfAlreadyActive;
	}
};

//Dependency: GcPlayerMissionParticipant
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
struct GcMissionSequenceStartScanEventSpecific
{
	NMS_GameComponents::GcPlayerMissionParticipant Participant;
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	float Time;
	bool AllowOtherPlayersBase;
	bool IMeantThisAndKnowWhatItDoes;

	friend bool operator==(const GcMissionSequenceStartScanEventSpecific& lhs, const GcMissionSequenceStartScanEventSpecific& rhs) 
	{
		return lhs.Participant == rhs.Participant &&
		lhs.Event == rhs.Event &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Time == rhs.Time &&
		lhs.AllowOtherPlayersBase == rhs.AllowOtherPlayersBase &&
		lhs.IMeantThisAndKnowWhatItDoes == rhs.IMeantThisAndKnowWhatItDoes;
	}
};

//Dependency: NMSString0x10
struct GcRewardSpecificCommunityTierProduct
{
	std::vector<NMS::NMSString0x10> ProductList;
	NMS::NMSString0x10 RequiresTech;
	int32_t AmountMax;
	int32_t AmountMin;
	bool ForceSpecialMessage;

	friend bool operator==(const GcRewardSpecificCommunityTierProduct& lhs, const GcRewardSpecificCommunityTierProduct& rhs) 
	{
		return lhs.ProductList == rhs.ProductList &&
		lhs.RequiresTech == rhs.RequiresTech &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ForceSpecialMessage == rhs.ForceSpecialMessage;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceSummonNexus
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	bool IgnorePlanetRadiusAndForceSpawn;

	friend bool operator==(const GcMissionSequenceSummonNexus& lhs, const GcMissionSequenceSummonNexus& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.IgnorePlanetRadiusAndForceSpawn == rhs.IgnorePlanetRadiusAndForceSpawn;
	}
};

struct GcTeleporterType
{
	enum class TeleporterDestinationTypeEnum : uint32_t
	{
		Base = 0,
		Spacestation = 1,
		Atlas = 2,
		PlanetAwayFromShip = 3,
		ExternalBase = 4,
		EmergencyGalaxyFix = 5,
		OnNexus = 6,
		SpacestationFixPosition = 7,
		Settlement = 8,
		Freighter = 9,
	};

	NMS_GameComponents::GcTeleporterType::TeleporterDestinationTypeEnum TeleporterDestinationType;

	friend bool operator==(const GcTeleporterType& lhs, const GcTeleporterType& rhs) 
	{
		return lhs.TeleporterDestinationType == rhs.TeleporterDestinationType;
	}
};

//Dependency: GcTeleporterType
//Dependency: VariableSizeString
struct GcMissionSequenceTeleport
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	float EffectTime;
	float SequenceTime;
	NMS_GameComponents::GcTeleporterType TeleporterType;
	bool DoCameraShake;
	bool DoWhiteout;

	friend bool operator==(const GcMissionSequenceTeleport& lhs, const GcMissionSequenceTeleport& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.EffectTime == rhs.EffectTime &&
		lhs.SequenceTime == rhs.SequenceTime &&
		lhs.TeleporterType == rhs.TeleporterType &&
		lhs.DoCameraShake == rhs.DoCameraShake &&
		lhs.DoWhiteout == rhs.DoWhiteout;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceVehicleScan
{
	NMS::NMSString0x20A ScanEventID;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;

	friend bool operator==(const GcMissionSequenceVehicleScan& lhs, const GcMissionSequenceVehicleScan& rhs) 
	{
		return lhs.ScanEventID == rhs.ScanEventID &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message;
	}
};

//Dependency: NMSString0x10
struct GcRewardCompleteMission
{
	NMS::NMSString0x10 Mission;

	friend bool operator==(const GcRewardCompleteMission& lhs, const GcRewardCompleteMission& rhs) 
	{
		return lhs.Mission == rhs.Mission;
	}
};

//Dependency: GcBiomeType
//Dependency: VariableSizeString
struct GcMissionSequenceVisitPlanets
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageOnIncompletePlanet;
	std::vector<NMS_GameComponents::GcBiomeType> PlanetTypesToWatch;
	int32_t NumberOfEachToDiscover;
	bool MustAlsoDiscover;
	bool MustAlsoTakePhoto;
	bool TakeNumberFromSeasonalData;

	friend bool operator==(const GcMissionSequenceVisitPlanets& lhs, const GcMissionSequenceVisitPlanets& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.MessageOnIncompletePlanet == rhs.MessageOnIncompletePlanet &&
		lhs.PlanetTypesToWatch == rhs.PlanetTypesToWatch &&
		lhs.NumberOfEachToDiscover == rhs.NumberOfEachToDiscover &&
		lhs.MustAlsoDiscover == rhs.MustAlsoDiscover &&
		lhs.MustAlsoTakePhoto == rhs.MustAlsoTakePhoto &&
		lhs.TakeNumberFromSeasonalData == rhs.TakeNumberFromSeasonalData;
	}
};

struct GcRewardUpgradeWeaponClass
{
	bool MatchClassToCommunityTier;
	bool Silent;
	bool SilentlyMoveOnAtMaxClass;

	friend bool operator==(const GcRewardUpgradeWeaponClass& lhs, const GcRewardUpgradeWeaponClass& rhs) 
	{
		return lhs.MatchClassToCommunityTier == rhs.MatchClassToCommunityTier &&
		lhs.Silent == rhs.Silent &&
		lhs.SilentlyMoveOnAtMaxClass == rhs.SilentlyMoveOnAtMaxClass;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWait
{
	NMS::VariableSizeString DebugText;
	float Time;
	bool MultiplyTimeBySeasonValue;
	bool SuppressMessages;

	friend bool operator==(const GcMissionSequenceWait& lhs, const GcMissionSequenceWait& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Time == rhs.Time &&
		lhs.MultiplyTimeBySeasonValue == rhs.MultiplyTimeBySeasonValue &&
		lhs.SuppressMessages == rhs.SuppressMessages;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForBuild
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 TargetTech;

	friend bool operator==(const GcMissionSequenceWaitForBuild& lhs, const GcMissionSequenceWaitForBuild& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.TargetTech == rhs.TargetTech;
	}
};

//Dependency: GcFactionSelectOptions
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFactionStanding
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcFactionSelectOptions SelectFrom;
	int32_t AmountMax;
	int32_t AmountMin;

	friend bool operator==(const GcMissionSequenceWaitForFactionStanding& lhs, const GcMissionSequenceWaitForFactionStanding& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.SelectFrom == rhs.SelectFrom &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFriendlyDroneScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageCantSummon;
	NMS::VariableSizeString MessageNotAvailable;
	NMS::VariableSizeString MessageSummoned;
	NMS::VariableSizeString MessageUnsummoned;

	friend bool operator==(const GcMissionSequenceWaitForFriendlyDroneScanEvent& lhs, const GcMissionSequenceWaitForFriendlyDroneScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.DebugText == rhs.DebugText &&
		lhs.MessageCantSummon == rhs.MessageCantSummon &&
		lhs.MessageNotAvailable == rhs.MessageNotAvailable &&
		lhs.MessageSummoned == rhs.MessageSummoned &&
		lhs.MessageUnsummoned == rhs.MessageUnsummoned;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcMissionSequenceWaitForMessage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 SetIconWithID;
	NMS::NMSString0x10 WaitMessageID;
	NMS::NMSString0x20 FormatMessageWithSeasonData;

	friend bool operator==(const GcMissionSequenceWaitForMessage& lhs, const GcMissionSequenceWaitForMessage& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.SetIconWithID == rhs.SetIconWithID &&
		lhs.WaitMessageID == rhs.WaitMessageID &&
		lhs.FormatMessageWithSeasonData == rhs.FormatMessageWithSeasonData;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcNPCPropType
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: NMSString0x10
struct GcCharacterGlobals
{
	NMS::VariableSizeString CharacterFile;
	NMS::GcSeed CharacterSeedOverride;
	NMS::NMSString0x10 LadderClimbDown;
	NMS::NMSString0x10 LadderClimbIdle;
	NMS::NMSString0x10 LadderClimbUp;
	NMS::NMSString0x10 LadderDismountBottom;
	NMS::NMSString0x10 LadderDismountTop;
	NMS::NMSString0x10 LadderMountBottom;
	NMS::NMSString0x10 LadderMountTop;
	NMS::NMSString0x10 NPCStaffPropTag;
	NMS::NMSString0x10 WaterEffectBodyID;
	NMS::NMSString0x10 WaterEffectLeftHandID;
	NMS::NMSString0x10 WaterEffectRightHandID;
	float AimPitchAnimScale;
	float AimPitchInterpSpeed;
	float AimYawAnimScale;
	float BankingMaxStrength;
	float BankingMinimumSpeed;
	float BankingSpeedForMaxStrength;
	float BlendToNewFeetSpeed;
	float CharacterJetpackTurnAimSpeed;
	float CharacterJetpackTurnSpeed;
	float CharacterRotationOffsetY;
	float CharacterRoughHeadHeight;
	float CharacterRunTurnSpeed;
	float CharacterSwimmingTurnAimSpeed;
	float CharacterSwimmingTurnSpeed;
	float CharacterTurnAimSpeed;
	float CharacterTurnSpeed;
	float DontShowCharacterWithinCameraDistance;
	float FeetShiftOnTurnMaxSpeed;
	float FeetShiftOnTurnSpeed;
	float FootPlantedTolerance;
	float FootPlantSpring;
	float GunRotationSpeed;
	float HoldWeaponAsPropXRotationDegrees;
	float IkBlendStrengthSpeed;
	float IKLegStretchStrength;
	float JetpackSwimmingPitchRotation;
	float LadderCooldownAfterBeforeAutoClimb;
	float LadderDistanceToAutoMount;
	float MaxAnkleRotationAngle;
	float MaxSwimmingPitchRotation;
	float MaxSwimmingRollRotation;
	float MinimumIdleToJogAnimSpeed;
	float MinStickForIntoJogAnim;
	float MinSwimmingPitchRotation;
	float MinSwimmingRollRotation;
	float MinTurnAngle;
	float NPCActiveListenChance;
	float NPCAnimSpeedMax;
	float NPCAnimSpeedMin;
	float NPCArriveDist;
	float NPCBehaviourTimeModifier;
	float NPCBlockedDestRadius;
	float NPCCamoScanRevealTime;
	float NPCCamoWipeEffectTime;
	float NPCDecelerateStrength;
	float NPCDisplayThoughtsMaxDistance;
	float NPCDisplayThoughtsMaxDuration;
	float NPCDisplayThoughtsProbability;
	float NPCDisplayThoughtsRefreshInterval;
	float NPCFastStaticTurnAngle;
	float NPCFlavourIdleTimeMax;
	float NPCFlavourIdleTimeMin;
	NMS_GameComponents::GcNPCPropType NPCForceProp;
	float NPCHackMoveUpToStopFallingThoughFloor;
	float NPCIKBodyWeightNormal;
	float NPCIKBodyWeightNormalGek;
	float NPCIKBodyWeightSeated;
	float NPCIncreasedSteeringDist;
	float NPCLookAtTerminateAngle;
	float NPCLookAtThingChance;
	float NPCLookAtThingTimeMax;
	float NPCLookAtThingTimeMin;
	float NPCLookAwayTimeMax;
	float NPCLookAwayTimeMin;
	float NPCMaxFreighterInteractionSearchDist;
	float NPCMaxInteractionSearchDist;
	float NPCMaxLookAtAngleMoving;
	float NPCMaxLookAtAngleStatic;
	float NPCMaxRandomNavPathMaxIndoorOffset;
	float NPCMaxRandomNavPathMaxOutdoorOffset;
	float NPCMaxRandomNavPathMinIndoorOffset;
	float NPCMaxRandomNavPathMinOutdoorOffset;
	float NPCMaxSettlementInteractionSearchDist;
	float NPCMaxStaticTurnSpeed;
	float NPCMaxTurnSpeed;
	float NPCMinInteractionSearchDist;
	float NPCMinStaticTurnAngle;
	float NPCMinTurnSpeed;
	float NPCMinTurnSpeedMech;
	float NPCMoodIdleDelayChance;
	float NPCMoodIdleLowIntensityChance;
	int32_t NPCNumNavFailuresUntilNoPhysFallback;
	float NPCPerceptionRadius;
	float NPCPermittedNavigationDelayFactor;
	float NPCPOISelectionNearbyNPCBaseMultiplier;
	float NPCPropScaleTime;
	float NPCReactCooldown;
	float NPCReactionChance;
	float NPCReactToPlayerPresenceDist;
	float NPCReactToPlayerPresenceGloablCooldown;
	float NPCReactToPlayerPresenceIndividualCooldown;
	float NPCReactToPlayerPresenceStaticTimer;
	float NPCRunSpeed;
	float NPCRunSpeedGek;
	float NPCScalingMaxRandomVariance;
	float NPCSeatedLookAtLateralReduction;
	float NPCSlowStaticTurnAngle;
	float NPCSpineAdjustGek;
	float NPCSpineAdjustVykeen;
	float NPCStaticDistance;
	float NPCStaticTimeUntilFail;
	float NPCStaticTurnTime;
	float NPCSteeringAvoidStrength;
	float NPCSteeringCollisionAvoidAngle;
	float NPCSteeringCollisionAvoidStrength;
	float NPCSteeringComingTowardsDegrees;
	float NPCSteeringFollowStrength;
	float NPCSteeringObstacleAvoidStrength;
	float NPCSteeringRadius;
	float NPCSteeringRayLength;
	float NPCSteeringRaySphereSize;
	float NPCSteeringRaySpread;
	float NPCSteeringRepelDist;
	float NPCSteeringSpringTime;
	float NPCTeleportEffectTime;
	float NPCWalkSpeed;
	float NPCWalkSpeedGek;
	float NPCWalkSpeedMech;
	float NPCWithScanEventReactCooldown;
	float NPCWithScanEventReactToPlayerPresenceDist;
	float NPCWithScanEventReactToPlayerPresenceIndividualCooldown;
	float PitchTest;
	float RagdollConeLimit;
	float RagdollDamping;
	float RagdollMotorFadeEnd;
	float RagdollMotorFadeStart;
	float RagdollTau;
	float RagdollTwistLimit;
	float RocketBootsLandedTurnSpeed;
	float RocketBootsTurnSpeed;
	float RollTest;
	float RootedAnimInterpolationTime;
	float RotateToFaceSlopeSpeed;
	float RoughSeaIdleSwimmingPitchRotation;
	float SitPostureChangeTimeMax;
	float SitPostureChangeTimeMin;
	float SlidingBrake;
	float SlopeAngleForDownhillClimb;
	float SlopeAngleForSlide;
	float SlopeAngleForUphillClimb;
	float SmoothVelocitySpeed;
	float SwimmingPitchRotationSurfaceExtra;
	float SwimmingRollSmoothTime;
	float SwimmingRollSmoothTimeWithWeapon;
	float SwimmingSmoothTime;
	float SwimmingSmoothTimeMin;
	float SwimmingSmoothTimeWithWeapon;
	float TimeAfterDeathRagdollIsEnabledBackward;
	float TimeAfterDeathRagdollIsEnabledForward;
	float TimeAfterDeathRagdollIsEnabledWhenBlocked;
	float TimeFallingUntilPanic;
	float TimeNotOnGroundToBeConsideredInAir;
	float TimeNotOnGroundToUseFallingCamera;
	float TimeToShowSplashEffect;
	float TrudgeUphillSpeed;
	float UnderwaterToAirTolerance;
	float UphillSpeedMultiplier;
	float WaterBottomSmoothPushUp;
	float WaterBottomSmoothPushUpDepth;
	float WaterEffectFadeSpring;
	float WaterEffectSpeedFadeMax;
	float WaterEffectSpeedFadeMin;
	float YawPullSpeed;
	bool NPCBehaviourInfo;
	bool NPCLightsAlwaysOn;
	bool NPCLookAtEnabled;
	bool NPCUseBehaviourTree;

	friend bool operator==(const GcCharacterGlobals& lhs, const GcCharacterGlobals& rhs) 
	{
		return lhs.CharacterFile == rhs.CharacterFile &&
		lhs.CharacterSeedOverride == rhs.CharacterSeedOverride &&
		lhs.LadderClimbDown == rhs.LadderClimbDown &&
		lhs.LadderClimbIdle == rhs.LadderClimbIdle &&
		lhs.LadderClimbUp == rhs.LadderClimbUp &&
		lhs.LadderDismountBottom == rhs.LadderDismountBottom &&
		lhs.LadderDismountTop == rhs.LadderDismountTop &&
		lhs.LadderMountBottom == rhs.LadderMountBottom &&
		lhs.LadderMountTop == rhs.LadderMountTop &&
		lhs.NPCStaffPropTag == rhs.NPCStaffPropTag &&
		lhs.WaterEffectBodyID == rhs.WaterEffectBodyID &&
		lhs.WaterEffectLeftHandID == rhs.WaterEffectLeftHandID &&
		lhs.WaterEffectRightHandID == rhs.WaterEffectRightHandID &&
		lhs.AimPitchAnimScale == rhs.AimPitchAnimScale &&
		lhs.AimPitchInterpSpeed == rhs.AimPitchInterpSpeed &&
		lhs.AimYawAnimScale == rhs.AimYawAnimScale &&
		lhs.BankingMaxStrength == rhs.BankingMaxStrength &&
		lhs.BankingMinimumSpeed == rhs.BankingMinimumSpeed &&
		lhs.BankingSpeedForMaxStrength == rhs.BankingSpeedForMaxStrength &&
		lhs.BlendToNewFeetSpeed == rhs.BlendToNewFeetSpeed &&
		lhs.CharacterJetpackTurnAimSpeed == rhs.CharacterJetpackTurnAimSpeed &&
		lhs.CharacterJetpackTurnSpeed == rhs.CharacterJetpackTurnSpeed &&
		lhs.CharacterRotationOffsetY == rhs.CharacterRotationOffsetY &&
		lhs.CharacterRoughHeadHeight == rhs.CharacterRoughHeadHeight &&
		lhs.CharacterRunTurnSpeed == rhs.CharacterRunTurnSpeed &&
		lhs.CharacterSwimmingTurnAimSpeed == rhs.CharacterSwimmingTurnAimSpeed &&
		lhs.CharacterSwimmingTurnSpeed == rhs.CharacterSwimmingTurnSpeed &&
		lhs.CharacterTurnAimSpeed == rhs.CharacterTurnAimSpeed &&
		lhs.CharacterTurnSpeed == rhs.CharacterTurnSpeed &&
		lhs.DontShowCharacterWithinCameraDistance == rhs.DontShowCharacterWithinCameraDistance &&
		lhs.FeetShiftOnTurnMaxSpeed == rhs.FeetShiftOnTurnMaxSpeed &&
		lhs.FeetShiftOnTurnSpeed == rhs.FeetShiftOnTurnSpeed &&
		lhs.FootPlantedTolerance == rhs.FootPlantedTolerance &&
		lhs.FootPlantSpring == rhs.FootPlantSpring &&
		lhs.GunRotationSpeed == rhs.GunRotationSpeed &&
		lhs.HoldWeaponAsPropXRotationDegrees == rhs.HoldWeaponAsPropXRotationDegrees &&
		lhs.IkBlendStrengthSpeed == rhs.IkBlendStrengthSpeed &&
		lhs.IKLegStretchStrength == rhs.IKLegStretchStrength &&
		lhs.JetpackSwimmingPitchRotation == rhs.JetpackSwimmingPitchRotation &&
		lhs.LadderCooldownAfterBeforeAutoClimb == rhs.LadderCooldownAfterBeforeAutoClimb &&
		lhs.LadderDistanceToAutoMount == rhs.LadderDistanceToAutoMount &&
		lhs.MaxAnkleRotationAngle == rhs.MaxAnkleRotationAngle &&
		lhs.MaxSwimmingPitchRotation == rhs.MaxSwimmingPitchRotation &&
		lhs.MaxSwimmingRollRotation == rhs.MaxSwimmingRollRotation &&
		lhs.MinimumIdleToJogAnimSpeed == rhs.MinimumIdleToJogAnimSpeed &&
		lhs.MinStickForIntoJogAnim == rhs.MinStickForIntoJogAnim &&
		lhs.MinSwimmingPitchRotation == rhs.MinSwimmingPitchRotation &&
		lhs.MinSwimmingRollRotation == rhs.MinSwimmingRollRotation &&
		lhs.MinTurnAngle == rhs.MinTurnAngle &&
		lhs.NPCActiveListenChance == rhs.NPCActiveListenChance &&
		lhs.NPCAnimSpeedMax == rhs.NPCAnimSpeedMax &&
		lhs.NPCAnimSpeedMin == rhs.NPCAnimSpeedMin &&
		lhs.NPCArriveDist == rhs.NPCArriveDist &&
		lhs.NPCBehaviourTimeModifier == rhs.NPCBehaviourTimeModifier &&
		lhs.NPCBlockedDestRadius == rhs.NPCBlockedDestRadius &&
		lhs.NPCCamoScanRevealTime == rhs.NPCCamoScanRevealTime &&
		lhs.NPCCamoWipeEffectTime == rhs.NPCCamoWipeEffectTime &&
		lhs.NPCDecelerateStrength == rhs.NPCDecelerateStrength &&
		lhs.NPCDisplayThoughtsMaxDistance == rhs.NPCDisplayThoughtsMaxDistance &&
		lhs.NPCDisplayThoughtsMaxDuration == rhs.NPCDisplayThoughtsMaxDuration &&
		lhs.NPCDisplayThoughtsProbability == rhs.NPCDisplayThoughtsProbability &&
		lhs.NPCDisplayThoughtsRefreshInterval == rhs.NPCDisplayThoughtsRefreshInterval &&
		lhs.NPCFastStaticTurnAngle == rhs.NPCFastStaticTurnAngle &&
		lhs.NPCFlavourIdleTimeMax == rhs.NPCFlavourIdleTimeMax &&
		lhs.NPCFlavourIdleTimeMin == rhs.NPCFlavourIdleTimeMin &&
		lhs.NPCForceProp == rhs.NPCForceProp &&
		lhs.NPCHackMoveUpToStopFallingThoughFloor == rhs.NPCHackMoveUpToStopFallingThoughFloor &&
		lhs.NPCIKBodyWeightNormal == rhs.NPCIKBodyWeightNormal &&
		lhs.NPCIKBodyWeightNormalGek == rhs.NPCIKBodyWeightNormalGek &&
		lhs.NPCIKBodyWeightSeated == rhs.NPCIKBodyWeightSeated &&
		lhs.NPCIncreasedSteeringDist == rhs.NPCIncreasedSteeringDist &&
		lhs.NPCLookAtTerminateAngle == rhs.NPCLookAtTerminateAngle &&
		lhs.NPCLookAtThingChance == rhs.NPCLookAtThingChance &&
		lhs.NPCLookAtThingTimeMax == rhs.NPCLookAtThingTimeMax &&
		lhs.NPCLookAtThingTimeMin == rhs.NPCLookAtThingTimeMin &&
		lhs.NPCLookAwayTimeMax == rhs.NPCLookAwayTimeMax &&
		lhs.NPCLookAwayTimeMin == rhs.NPCLookAwayTimeMin &&
		lhs.NPCMaxFreighterInteractionSearchDist == rhs.NPCMaxFreighterInteractionSearchDist &&
		lhs.NPCMaxInteractionSearchDist == rhs.NPCMaxInteractionSearchDist &&
		lhs.NPCMaxLookAtAngleMoving == rhs.NPCMaxLookAtAngleMoving &&
		lhs.NPCMaxLookAtAngleStatic == rhs.NPCMaxLookAtAngleStatic &&
		lhs.NPCMaxRandomNavPathMaxIndoorOffset == rhs.NPCMaxRandomNavPathMaxIndoorOffset &&
		lhs.NPCMaxRandomNavPathMaxOutdoorOffset == rhs.NPCMaxRandomNavPathMaxOutdoorOffset &&
		lhs.NPCMaxRandomNavPathMinIndoorOffset == rhs.NPCMaxRandomNavPathMinIndoorOffset &&
		lhs.NPCMaxRandomNavPathMinOutdoorOffset == rhs.NPCMaxRandomNavPathMinOutdoorOffset &&
		lhs.NPCMaxSettlementInteractionSearchDist == rhs.NPCMaxSettlementInteractionSearchDist &&
		lhs.NPCMaxStaticTurnSpeed == rhs.NPCMaxStaticTurnSpeed &&
		lhs.NPCMaxTurnSpeed == rhs.NPCMaxTurnSpeed &&
		lhs.NPCMinInteractionSearchDist == rhs.NPCMinInteractionSearchDist &&
		lhs.NPCMinStaticTurnAngle == rhs.NPCMinStaticTurnAngle &&
		lhs.NPCMinTurnSpeed == rhs.NPCMinTurnSpeed &&
		lhs.NPCMinTurnSpeedMech == rhs.NPCMinTurnSpeedMech &&
		lhs.NPCMoodIdleDelayChance == rhs.NPCMoodIdleDelayChance &&
		lhs.NPCMoodIdleLowIntensityChance == rhs.NPCMoodIdleLowIntensityChance &&
		lhs.NPCNumNavFailuresUntilNoPhysFallback == rhs.NPCNumNavFailuresUntilNoPhysFallback &&
		lhs.NPCPerceptionRadius == rhs.NPCPerceptionRadius &&
		lhs.NPCPermittedNavigationDelayFactor == rhs.NPCPermittedNavigationDelayFactor &&
		lhs.NPCPOISelectionNearbyNPCBaseMultiplier == rhs.NPCPOISelectionNearbyNPCBaseMultiplier &&
		lhs.NPCPropScaleTime == rhs.NPCPropScaleTime &&
		lhs.NPCReactCooldown == rhs.NPCReactCooldown &&
		lhs.NPCReactionChance == rhs.NPCReactionChance &&
		lhs.NPCReactToPlayerPresenceDist == rhs.NPCReactToPlayerPresenceDist &&
		lhs.NPCReactToPlayerPresenceGloablCooldown == rhs.NPCReactToPlayerPresenceGloablCooldown &&
		lhs.NPCReactToPlayerPresenceIndividualCooldown == rhs.NPCReactToPlayerPresenceIndividualCooldown &&
		lhs.NPCReactToPlayerPresenceStaticTimer == rhs.NPCReactToPlayerPresenceStaticTimer &&
		lhs.NPCRunSpeed == rhs.NPCRunSpeed &&
		lhs.NPCRunSpeedGek == rhs.NPCRunSpeedGek &&
		lhs.NPCScalingMaxRandomVariance == rhs.NPCScalingMaxRandomVariance &&
		lhs.NPCSeatedLookAtLateralReduction == rhs.NPCSeatedLookAtLateralReduction &&
		lhs.NPCSlowStaticTurnAngle == rhs.NPCSlowStaticTurnAngle &&
		lhs.NPCSpineAdjustGek == rhs.NPCSpineAdjustGek &&
		lhs.NPCSpineAdjustVykeen == rhs.NPCSpineAdjustVykeen &&
		lhs.NPCStaticDistance == rhs.NPCStaticDistance &&
		lhs.NPCStaticTimeUntilFail == rhs.NPCStaticTimeUntilFail &&
		lhs.NPCStaticTurnTime == rhs.NPCStaticTurnTime &&
		lhs.NPCSteeringAvoidStrength == rhs.NPCSteeringAvoidStrength &&
		lhs.NPCSteeringCollisionAvoidAngle == rhs.NPCSteeringCollisionAvoidAngle &&
		lhs.NPCSteeringCollisionAvoidStrength == rhs.NPCSteeringCollisionAvoidStrength &&
		lhs.NPCSteeringComingTowardsDegrees == rhs.NPCSteeringComingTowardsDegrees &&
		lhs.NPCSteeringFollowStrength == rhs.NPCSteeringFollowStrength &&
		lhs.NPCSteeringObstacleAvoidStrength == rhs.NPCSteeringObstacleAvoidStrength &&
		lhs.NPCSteeringRadius == rhs.NPCSteeringRadius &&
		lhs.NPCSteeringRayLength == rhs.NPCSteeringRayLength &&
		lhs.NPCSteeringRaySphereSize == rhs.NPCSteeringRaySphereSize &&
		lhs.NPCSteeringRaySpread == rhs.NPCSteeringRaySpread &&
		lhs.NPCSteeringRepelDist == rhs.NPCSteeringRepelDist &&
		lhs.NPCSteeringSpringTime == rhs.NPCSteeringSpringTime &&
		lhs.NPCTeleportEffectTime == rhs.NPCTeleportEffectTime &&
		lhs.NPCWalkSpeed == rhs.NPCWalkSpeed &&
		lhs.NPCWalkSpeedGek == rhs.NPCWalkSpeedGek &&
		lhs.NPCWalkSpeedMech == rhs.NPCWalkSpeedMech &&
		lhs.NPCWithScanEventReactCooldown == rhs.NPCWithScanEventReactCooldown &&
		lhs.NPCWithScanEventReactToPlayerPresenceDist == rhs.NPCWithScanEventReactToPlayerPresenceDist &&
		lhs.NPCWithScanEventReactToPlayerPresenceIndividualCooldown == rhs.NPCWithScanEventReactToPlayerPresenceIndividualCooldown &&
		lhs.PitchTest == rhs.PitchTest &&
		lhs.RagdollConeLimit == rhs.RagdollConeLimit &&
		lhs.RagdollDamping == rhs.RagdollDamping &&
		lhs.RagdollMotorFadeEnd == rhs.RagdollMotorFadeEnd &&
		lhs.RagdollMotorFadeStart == rhs.RagdollMotorFadeStart &&
		lhs.RagdollTau == rhs.RagdollTau &&
		lhs.RagdollTwistLimit == rhs.RagdollTwistLimit &&
		lhs.RocketBootsLandedTurnSpeed == rhs.RocketBootsLandedTurnSpeed &&
		lhs.RocketBootsTurnSpeed == rhs.RocketBootsTurnSpeed &&
		lhs.RollTest == rhs.RollTest &&
		lhs.RootedAnimInterpolationTime == rhs.RootedAnimInterpolationTime &&
		lhs.RotateToFaceSlopeSpeed == rhs.RotateToFaceSlopeSpeed &&
		lhs.RoughSeaIdleSwimmingPitchRotation == rhs.RoughSeaIdleSwimmingPitchRotation &&
		lhs.SitPostureChangeTimeMax == rhs.SitPostureChangeTimeMax &&
		lhs.SitPostureChangeTimeMin == rhs.SitPostureChangeTimeMin &&
		lhs.SlidingBrake == rhs.SlidingBrake &&
		lhs.SlopeAngleForDownhillClimb == rhs.SlopeAngleForDownhillClimb &&
		lhs.SlopeAngleForSlide == rhs.SlopeAngleForSlide &&
		lhs.SlopeAngleForUphillClimb == rhs.SlopeAngleForUphillClimb &&
		lhs.SmoothVelocitySpeed == rhs.SmoothVelocitySpeed &&
		lhs.SwimmingPitchRotationSurfaceExtra == rhs.SwimmingPitchRotationSurfaceExtra &&
		lhs.SwimmingRollSmoothTime == rhs.SwimmingRollSmoothTime &&
		lhs.SwimmingRollSmoothTimeWithWeapon == rhs.SwimmingRollSmoothTimeWithWeapon &&
		lhs.SwimmingSmoothTime == rhs.SwimmingSmoothTime &&
		lhs.SwimmingSmoothTimeMin == rhs.SwimmingSmoothTimeMin &&
		lhs.SwimmingSmoothTimeWithWeapon == rhs.SwimmingSmoothTimeWithWeapon &&
		lhs.TimeAfterDeathRagdollIsEnabledBackward == rhs.TimeAfterDeathRagdollIsEnabledBackward &&
		lhs.TimeAfterDeathRagdollIsEnabledForward == rhs.TimeAfterDeathRagdollIsEnabledForward &&
		lhs.TimeAfterDeathRagdollIsEnabledWhenBlocked == rhs.TimeAfterDeathRagdollIsEnabledWhenBlocked &&
		lhs.TimeFallingUntilPanic == rhs.TimeFallingUntilPanic &&
		lhs.TimeNotOnGroundToBeConsideredInAir == rhs.TimeNotOnGroundToBeConsideredInAir &&
		lhs.TimeNotOnGroundToUseFallingCamera == rhs.TimeNotOnGroundToUseFallingCamera &&
		lhs.TimeToShowSplashEffect == rhs.TimeToShowSplashEffect &&
		lhs.TrudgeUphillSpeed == rhs.TrudgeUphillSpeed &&
		lhs.UnderwaterToAirTolerance == rhs.UnderwaterToAirTolerance &&
		lhs.UphillSpeedMultiplier == rhs.UphillSpeedMultiplier &&
		lhs.WaterBottomSmoothPushUp == rhs.WaterBottomSmoothPushUp &&
		lhs.WaterBottomSmoothPushUpDepth == rhs.WaterBottomSmoothPushUpDepth &&
		lhs.WaterEffectFadeSpring == rhs.WaterEffectFadeSpring &&
		lhs.WaterEffectSpeedFadeMax == rhs.WaterEffectSpeedFadeMax &&
		lhs.WaterEffectSpeedFadeMin == rhs.WaterEffectSpeedFadeMin &&
		lhs.YawPullSpeed == rhs.YawPullSpeed &&
		lhs.NPCBehaviourInfo == rhs.NPCBehaviourInfo &&
		lhs.NPCLightsAlwaysOn == rhs.NPCLightsAlwaysOn &&
		lhs.NPCLookAtEnabled == rhs.NPCLookAtEnabled &&
		lhs.NPCUseBehaviourTree == rhs.NPCUseBehaviourTree;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcPhotoPlant
struct GcPhotoFlora
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoPlant PlantType;

	friend bool operator==(const GcPhotoFlora& lhs, const GcPhotoFlora& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.PlantType == rhs.PlantType;
	}
};

struct GcPhotoCreature
{
	enum class PhotoCreatureTypeEnum : uint32_t
	{
		Ground = 0,
		Water = 1,
		Air = 2,
	};

	NMS_GameComponents::GcPhotoCreature::PhotoCreatureTypeEnum PhotoCreatureType;

	friend bool operator==(const GcPhotoCreature& lhs, const GcPhotoCreature& rhs) 
	{
		return lhs.PhotoCreatureType == rhs.PhotoCreatureType;
	}
};

//Dependency: GcPhotoCreature
struct GcPhotoFauna
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoCreature CreatureArea;
	bool MustBePet;

	friend bool operator==(const GcPhotoFauna& lhs, const GcPhotoFauna& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.CreatureArea == rhs.CreatureArea &&
		lhs.MustBePet == rhs.MustBePet;
	}
};

//Dependency: GcBiomeType
//Dependency: GcPhotoFlora
//Dependency: GcPhotoBuildings
//Dependency: GcPhotoFauna
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForPhoto
{
	std::vector<NMS_GameComponents::GcBiomeType> Biomes;
	std::vector<NMS_GameComponents::GcPhotoBuildings> Buildings;
	NMS::VariableSizeString DebugText;
	std::vector<NMS_GameComponents::GcPhotoFauna> Fauna;
	std::vector<NMS_GameComponents::GcPhotoFlora> Flora;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageSecondary;
	NMS::VariableSizeString MessageSuccess;
	bool TakeAmountFromSeasonData;

	friend bool operator==(const GcMissionSequenceWaitForPhoto& lhs, const GcMissionSequenceWaitForPhoto& rhs) 
	{
		return lhs.Biomes == rhs.Biomes &&
		lhs.Buildings == rhs.Buildings &&
		lhs.DebugText == rhs.DebugText &&
		lhs.Fauna == rhs.Fauna &&
		lhs.Flora == rhs.Flora &&
		lhs.Message == rhs.Message &&
		lhs.MessageSecondary == rhs.MessageSecondary &&
		lhs.MessageSuccess == rhs.MessageSuccess &&
		lhs.TakeAmountFromSeasonData == rhs.TakeAmountFromSeasonData;
	}
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForRepair
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcStatsTypes TargetStat;

	friend bool operator==(const GcMissionSequenceWaitForRepair& lhs, const GcMissionSequenceWaitForRepair& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.TargetStat == rhs.TargetStat;
	}
};

//Dependency: GcScanEventGPSHint
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A NexusMessage;
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString GalaxyMapMessageNotSpace;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float Timeout;
	NMS_GameComponents::GcScanEventGPSHint UseGPSInText;
	bool DistanceTimeout;

	friend bool operator==(const GcMissionSequenceWaitForScanEvent& lhs, const GcMissionSequenceWaitForScanEvent& rhs) 
	{
		return lhs.Event == rhs.Event &&
		lhs.NexusMessage == rhs.NexusMessage &&
		lhs.SurveyHint == rhs.SurveyHint &&
		lhs.SurveyInactiveHint == rhs.SurveyInactiveHint &&
		lhs.SurveySwapHint == rhs.SurveySwapHint &&
		lhs.SurveyVehicleHint == rhs.SurveyVehicleHint &&
		lhs.DebugText == rhs.DebugText &&
		lhs.GalaxyMapMessage == rhs.GalaxyMapMessage &&
		lhs.GalaxyMapMessageNotSpace == rhs.GalaxyMapMessageNotSpace &&
		lhs.Message == rhs.Message &&
		lhs.TimeoutOSD == rhs.TimeoutOSD &&
		lhs.Timeout == rhs.Timeout &&
		lhs.UseGPSInText == rhs.UseGPSInText &&
		lhs.DistanceTimeout == rhs.DistanceTimeout;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStat
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Amount;

	friend bool operator==(const GcMissionSequenceWaitForStat& lhs, const GcMissionSequenceWaitForStat& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Stat == rhs.Stat &&
		lhs.StatGroup == rhs.StatGroup &&
		lhs.Amount == rhs.Amount;
	}
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForWarps
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;

	friend bool operator==(const GcMissionSequenceWaitForWarps& lhs, const GcMissionSequenceWaitForWarps& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.Amount == rhs.Amount;
	}
};

struct GcWonderCreatureCategory
{
	enum class WonderCreatureCategoryEnum : uint32_t
	{
		HerbivoreSizeMax = 0,
		HerbivoreSizeMin = 1,
		CarnivoreSizeMax = 2,
		CarnivoreSizeMin = 3,
		IntelligenceMax = 4,
		ViciousnessMax = 5,
		Hot = 6,
		Cold = 7,
		Tox = 8,
		Rad = 9,
		Weird = 10,
		Water = 11,
		Robot = 12,
		Flyer = 13,
		Cave = 14,
	};

	NMS_GameComponents::GcWonderCreatureCategory::WonderCreatureCategoryEnum WonderCreatureCategory;

	friend bool operator==(const GcWonderCreatureCategory& lhs, const GcWonderCreatureCategory& rhs) 
	{
		return lhs.WonderCreatureCategory == rhs.WonderCreatureCategory;
	}
};

struct GcWonderFloraCategory
{
	enum class WonderFloraCategoryEnum : uint32_t
	{
		GeneralFact0 = 0,
		GeneralFact1 = 1,
		GeneralFact2 = 2,
		GeneralFact3 = 3,
		ColdFact = 4,
		HotFact = 5,
		RadFact = 6,
		ToxFact = 7,
	};

	NMS_GameComponents::GcWonderFloraCategory::WonderFloraCategoryEnum WonderFloraCategory;

	friend bool operator==(const GcWonderFloraCategory& lhs, const GcWonderFloraCategory& rhs) 
	{
		return lhs.WonderFloraCategory == rhs.WonderFloraCategory;
	}
};

struct GcWonderPlanetCategory
{
	enum class WonderPlanetCategoryEnum : uint32_t
	{
		TemperatureMax = 0,
		TemperatureMin = 1,
		ToxicityMax = 2,
		RadiationMax = 3,
		AnomalyMax = 4,
		RadiusMax = 5,
		RadiusMin = 6,
		AltitudeReachedMax = 7,
		AltitudeReachedMin = 8,
		PerfectionMax = 9,
		PerfectionMin = 10,
	};

	NMS_GameComponents::GcWonderPlanetCategory::WonderPlanetCategoryEnum WonderPlanetCategory;

	friend bool operator==(const GcWonderPlanetCategory& lhs, const GcWonderPlanetCategory& rhs) 
	{
		return lhs.WonderPlanetCategory == rhs.WonderPlanetCategory;
	}
};

struct GcWonderMineralCategory
{
	enum class WonderMineralCategoryEnum : uint32_t
	{
		GeneralFact0 = 0,
		GeneralFact1 = 1,
		GeneralFact2 = 2,
		MetalFact = 3,
		ColdFact = 4,
		HotFact = 5,
		RadFact = 6,
		ToxFact = 7,
	};

	NMS_GameComponents::GcWonderMineralCategory::WonderMineralCategoryEnum WonderMineralCategory;

	friend bool operator==(const GcWonderMineralCategory& lhs, const GcWonderMineralCategory& rhs) 
	{
		return lhs.WonderMineralCategory == rhs.WonderMineralCategory;
	}
};

//Dependency: GcWonderCreatureCategory
//Dependency: VariableSizeString
//Dependency: GcWonderFloraCategory
//Dependency: GcWonderPlanetCategory
//Dependency: GcWonderMineralCategory
//Dependency: GcWonderType
//Dependency: TkEqualityEnum
struct GcMissionSequenceWaitForWonderValue
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcWonderCreatureCategory CreatureWonderType;
	int32_t Decimals;
	NMS_GameComponents::GcWonderFloraCategory FloraWonderType;
	NMS_GameComponents::GcWonderMineralCategory MineralWonderType;
	NMS_GameComponents::GcWonderPlanetCategory PlanetWonderType;
	NMS_Toolkit::TkEqualityEnum Test;
	float Value;
	NMS_GameComponents::GcWonderType WonderTypeToUse;
	bool TakeAmountFromSeasonalData;

	friend bool operator==(const GcMissionSequenceWaitForWonderValue& lhs, const GcMissionSequenceWaitForWonderValue& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.Message == rhs.Message &&
		lhs.CreatureWonderType == rhs.CreatureWonderType &&
		lhs.Decimals == rhs.Decimals &&
		lhs.FloraWonderType == rhs.FloraWonderType &&
		lhs.MineralWonderType == rhs.MineralWonderType &&
		lhs.PlanetWonderType == rhs.PlanetWonderType &&
		lhs.Test == rhs.Test &&
		lhs.Value == rhs.Value &&
		lhs.WonderTypeToUse == rhs.WonderTypeToUse &&
		lhs.TakeAmountFromSeasonalData == rhs.TakeAmountFromSeasonalData;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitRealTimeCombat
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 DisplayStat;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageCombat;
	uint64_t Time;
	float Randomness;
	bool StatFromNow;

	friend bool operator==(const GcMissionSequenceWaitRealTimeCombat& lhs, const GcMissionSequenceWaitRealTimeCombat& rhs) 
	{
		return lhs.DebugText == rhs.DebugText &&
		lhs.DisplayStat == rhs.DisplayStat &&
		lhs.Message == rhs.Message &&
		lhs.MessageCombat == rhs.MessageCombat &&
		lhs.Time == rhs.Time &&
		lhs.Randomness == rhs.Randomness &&
		lhs.StatFromNow == rhs.StatFromNow;
	}
};

//Dependency: GcGenericMissionSequence
struct GcMissionTable
{
	std::vector<NMS_GameComponents::GcGenericMissionSequence> Missions;

	friend bool operator==(const GcMissionTable& lhs, const GcMissionTable& rhs) 
	{
		return lhs.Missions == rhs.Missions;
	}
};

//Dependency: GcBuildingSpawnData
//Dependency: GcBuildingSpawnSlot
//Dependency: GcBuildingOverrideData
struct GcPlanetBuildingData
{
	std::vector<NMS_GameComponents::GcBuildingSpawnData> Buildings;
	std::vector<NMS_GameComponents::GcBuildingSpawnSlot> BuildingSlots;
	std::vector<NMS_GameComponents::GcBuildingOverrideData> OverrideBuildings;
	uint64_t PlanetUA;
	float PlanetRadius;
	float Spacing;
	float VoronoiPointDivisions;
	int32_t VoronoiPointSeed;
	int32_t VoronoiSectorSeed;
	bool InitialBuildingsPlaced;
	bool IsPrime;
	bool IsWaterworld;

	friend bool operator==(const GcPlanetBuildingData& lhs, const GcPlanetBuildingData& rhs) 
	{
		return lhs.Buildings == rhs.Buildings &&
		lhs.BuildingSlots == rhs.BuildingSlots &&
		lhs.OverrideBuildings == rhs.OverrideBuildings &&
		lhs.PlanetUA == rhs.PlanetUA &&
		lhs.PlanetRadius == rhs.PlanetRadius &&
		lhs.Spacing == rhs.Spacing &&
		lhs.VoronoiPointDivisions == rhs.VoronoiPointDivisions &&
		lhs.VoronoiPointSeed == rhs.VoronoiPointSeed &&
		lhs.VoronoiSectorSeed == rhs.VoronoiSectorSeed &&
		lhs.InitialBuildingsPlaced == rhs.InitialBuildingsPlaced &&
		lhs.IsPrime == rhs.IsPrime &&
		lhs.IsWaterworld == rhs.IsWaterworld;
	}
};

//Dependency: GcInteractionMissionState
struct GcRewardWeapon
{
	float PoolTypeProbabilities[5];
	int32_t ItemLevel;
	NMS_GameComponents::GcInteractionMissionState SetInteractionStateOnSuccess;
	bool ForceFixed;
	bool MarkInteractionComplete;
	bool OnlyUseNextInteractionOnSuccess;
	bool ReinteractOnDecline;
	bool RequeueInteraction;
	bool UsePlanetSeed;

	friend bool operator==(const GcRewardWeapon& lhs, const GcRewardWeapon& rhs) 
	{
		return std::equal(std::begin(lhs.PoolTypeProbabilities), std::end(lhs.PoolTypeProbabilities), std::begin(rhs.PoolTypeProbabilities)) &&
		lhs.ItemLevel == rhs.ItemLevel &&
		lhs.SetInteractionStateOnSuccess == rhs.SetInteractionStateOnSuccess &&
		lhs.ForceFixed == rhs.ForceFixed &&
		lhs.MarkInteractionComplete == rhs.MarkInteractionComplete &&
		lhs.OnlyUseNextInteractionOnSuccess == rhs.OnlyUseNextInteractionOnSuccess &&
		lhs.ReinteractOnDecline == rhs.ReinteractOnDecline &&
		lhs.RequeueInteraction == rhs.RequeueInteraction &&
		lhs.UsePlanetSeed == rhs.UsePlanetSeed;
	}
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationColourGroupPalette
{
	NMS::NMSString0x20A RequiredTextureOption;
	NMS::NMSString0x10 RequiredTextureGroup;
	NMS_Toolkit::TkPaletteTexture Palette;

	friend bool operator==(const GcModularCustomisationColourGroupPalette& lhs, const GcModularCustomisationColourGroupPalette& rhs) 
	{
		return lhs.RequiredTextureOption == rhs.RequiredTextureOption &&
		lhs.RequiredTextureGroup == rhs.RequiredTextureGroup &&
		lhs.Palette == rhs.Palette;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: VariableSizeString
struct TkFoliageData
{
	NMS::Colour Colour;
	NMS::VariableSizeString Material;
	float AngleMultiplier;
	float Density;
	float DensityVariance;
	float Scale;
	bool AngleExponentially;

	friend bool operator==(const TkFoliageData& lhs, const TkFoliageData& rhs) 
	{
		return lhs.Colour == rhs.Colour &&
		lhs.Material == rhs.Material &&
		lhs.AngleMultiplier == rhs.AngleMultiplier &&
		lhs.Density == rhs.Density &&
		lhs.DensityVariance == rhs.DensityVariance &&
		lhs.Scale == rhs.Scale &&
		lhs.AngleExponentially == rhs.AngleExponentially;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemGlobalVariation
{
	NMS::VariableSizeString Model;
	int32_t Variations;
	NMS::NMSString0x20 Name;

	friend bool operator==(const TkLSystemGlobalVariation& lhs, const TkLSystemGlobalVariation& rhs) 
	{
		return lhs.Model == rhs.Model &&
		lhs.Variations == rhs.Variations &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardCustomPlayerControl
{
	NMS::NMSString0x10 RequestedMode;

	friend bool operator==(const GcRewardCustomPlayerControl& lhs, const GcRewardCustomPlayerControl& rhs) 
	{
		return lhs.RequestedMode == rhs.RequestedMode;
	}
};

//Dependency: GcScannerIconHighlightTypes
//Dependency: TkTextureResource
struct GcScannerIcon
{
	NMS_Toolkit::TkTextureResource Main;
	NMS_Toolkit::TkTextureResource Small;
	NMS_GameComponents::GcScannerIconHighlightTypes Highlight;

	friend bool operator==(const GcScannerIcon& lhs, const GcScannerIcon& rhs) 
	{
		return lhs.Main == rhs.Main &&
		lhs.Small == rhs.Small &&
		lhs.Highlight == rhs.Highlight;
	}
};

//Dependency: GcScannerIcon
//Dependency: TkTextureResource
//Dependency: Colour
struct GcScannerIcons
{
	NMS::Colour ScannableColours[75];
	NMS::Colour NetworkFSPlayerColours[4];
	NMS::Colour BuildingColour;
	NMS::Colour GenericColour;
	NMS::Colour RelicColour;
	NMS::Colour SignalColour;
	NMS::Colour UnknownColour;
	NMS_GameComponents::GcScannerIcon ScannableIcons[75];
	NMS_GameComponents::GcScannerIcon ScannableIconsBinocs[75];
	NMS_GameComponents::GcScannerIcon BuildingIcons[35];
	NMS_GameComponents::GcScannerIcon BuildingIconsBinocs[35];
	NMS_GameComponents::GcScannerIcon BuildingIconsHuge[35];
	NMS_GameComponents::GcScannerIcon Vehicles[7];
	NMS_GameComponents::GcScannerIcon GenericIcons[6];
	NMS_GameComponents::GcScannerIcon NetworkFSPlayerMarkers[4];
	NMS_GameComponents::GcScannerIcon NetworkFSPlayerMarkersShip[4];
	NMS_GameComponents::GcScannerIcon NetworkPlayerFreighter[4];
	NMS_Toolkit::TkTextureResource HighlightIcons[5];
	NMS_GameComponents::GcScannerIcon ArrowLarge;
	NMS_GameComponents::GcScannerIcon ArrowSmall;
	NMS_GameComponents::GcScannerIcon BaseBuildingMarker;
	NMS_GameComponents::GcScannerIcon Battle;
	NMS_GameComponents::GcScannerIcon BattleSmall;
	NMS_GameComponents::GcScannerIcon BlackHole;
	NMS_GameComponents::GcScannerIcon Bounty1;
	NMS_GameComponents::GcScannerIcon Bounty2;
	NMS_GameComponents::GcScannerIcon Bounty3;
	NMS_GameComponents::GcScannerIcon BountySmall;
	NMS_GameComponents::GcScannerIcon Checkpoint;
	NMS_GameComponents::GcScannerIcon CircleAnimation;
	NMS_GameComponents::GcScannerIcon CreatureAction;
	NMS_GameComponents::GcScannerIcon CreatureCurious;
	NMS_GameComponents::GcScannerIcon CreatureDanger;
	NMS_GameComponents::GcScannerIcon CreatureDiscovered;
	NMS_GameComponents::GcScannerIcon CreatureFiend;
	NMS_GameComponents::GcScannerIcon CreatureInteraction;
	NMS_GameComponents::GcScannerIcon CreatureMilk;
	NMS_GameComponents::GcScannerIcon CreatureTame;
	NMS_GameComponents::GcScannerIcon CreatureUndiscovered;
	NMS_GameComponents::GcScannerIcon CreatureUnknown;
	NMS_GameComponents::GcScannerIcon DamagedFrigate;
	NMS_GameComponents::GcScannerIcon Death;
	NMS_GameComponents::GcScannerIcon DeathSmall;
	NMS_GameComponents::GcScannerIcon DiamondAnimation;
	NMS_GameComponents::GcScannerIcon EditingBase;
	NMS_GameComponents::GcScannerIcon Expedition;
	NMS_GameComponents::GcScannerIcon Freighter;
	NMS_GameComponents::GcScannerIcon FreighterBase;
	NMS_GameComponents::GcScannerIcon FriendlyDrone;
	NMS_GameComponents::GcScannerIcon Garage;
	NMS_GameComponents::GcScannerIcon HexAnimation;
	NMS_GameComponents::GcScannerIcon MessageBeacon;
	NMS_GameComponents::GcScannerIcon MessageBeaconSmall;
	NMS_GameComponents::GcScannerIcon MissionAbandonedFreighter;
	NMS_GameComponents::GcScannerIcon MissionEnterBuilding;
	NMS_GameComponents::GcScannerIcon MissionEnterFreighter;
	NMS_GameComponents::GcScannerIcon MissionEnterOrbit;
	NMS_GameComponents::GcScannerIcon MissionEnterStation;
	NMS_GameComponents::GcScannerIcon MonumentMarker;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarker;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarkerShip;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarkerVehicle;
	NMS_GameComponents::GcScannerIcon NPC;
	NMS_GameComponents::GcScannerIcon OtherPlayerSettlement;
	NMS_GameComponents::GcScannerIcon Pet;
	NMS_GameComponents::GcScannerIcon PetActivity;
	NMS_GameComponents::GcScannerIcon PetInteraction;
	NMS_GameComponents::GcScannerIcon PetSad;
	NMS_GameComponents::GcScannerIcon PirateRaid;
	NMS_GameComponents::GcScannerIcon PlanetPoleEast;
	NMS_GameComponents::GcScannerIcon PlanetPoleNorth;
	NMS_GameComponents::GcScannerIcon PlanetPoleSouth;
	NMS_GameComponents::GcScannerIcon PlanetPoleWest;
	NMS_GameComponents::GcScannerIcon PlayerBase;
	NMS_GameComponents::GcScannerIcon PlayerFreighter;
	NMS_GameComponents::GcScannerIcon PlayerSettlement;
	NMS_GameComponents::GcScannerIcon PortalMarker;
	NMS_GameComponents::GcScannerIcon PurchasableFrigate;
	NMS_GameComponents::GcScannerIcon SettlementNPC;
	NMS_GameComponents::GcScannerIcon Ship;
	NMS_GameComponents::GcScannerIcon ShipSmall;
	NMS_GameComponents::GcScannerIcon TaggedBuilding;
	NMS_GameComponents::GcScannerIcon TaggedPlanet;
	NMS_GameComponents::GcScannerIcon TimedEvent;
	NMS_GameComponents::GcScannerIcon VehicleGeneric;

	friend bool operator==(const GcScannerIcons& lhs, const GcScannerIcons& rhs) 
	{
		return std::equal(std::begin(lhs.ScannableColours), std::end(lhs.ScannableColours), std::begin(rhs.ScannableColours)) &&
		std::equal(std::begin(lhs.NetworkFSPlayerColours), std::end(lhs.NetworkFSPlayerColours), std::begin(rhs.NetworkFSPlayerColours)) &&
		lhs.BuildingColour == rhs.BuildingColour &&
		lhs.GenericColour == rhs.GenericColour &&
		lhs.RelicColour == rhs.RelicColour &&
		lhs.SignalColour == rhs.SignalColour &&
		lhs.UnknownColour == rhs.UnknownColour &&
		std::equal(std::begin(lhs.ScannableIcons), std::end(lhs.ScannableIcons), std::begin(rhs.ScannableIcons)) &&
		std::equal(std::begin(lhs.ScannableIconsBinocs), std::end(lhs.ScannableIconsBinocs), std::begin(rhs.ScannableIconsBinocs)) &&
		std::equal(std::begin(lhs.BuildingIcons), std::end(lhs.BuildingIcons), std::begin(rhs.BuildingIcons)) &&
		std::equal(std::begin(lhs.BuildingIconsBinocs), std::end(lhs.BuildingIconsBinocs), std::begin(rhs.BuildingIconsBinocs)) &&
		std::equal(std::begin(lhs.BuildingIconsHuge), std::end(lhs.BuildingIconsHuge), std::begin(rhs.BuildingIconsHuge)) &&
		std::equal(std::begin(lhs.Vehicles), std::end(lhs.Vehicles), std::begin(rhs.Vehicles)) &&
		std::equal(std::begin(lhs.GenericIcons), std::end(lhs.GenericIcons), std::begin(rhs.GenericIcons)) &&
		std::equal(std::begin(lhs.NetworkFSPlayerMarkers), std::end(lhs.NetworkFSPlayerMarkers), std::begin(rhs.NetworkFSPlayerMarkers)) &&
		std::equal(std::begin(lhs.NetworkFSPlayerMarkersShip), std::end(lhs.NetworkFSPlayerMarkersShip), std::begin(rhs.NetworkFSPlayerMarkersShip)) &&
		std::equal(std::begin(lhs.NetworkPlayerFreighter), std::end(lhs.NetworkPlayerFreighter), std::begin(rhs.NetworkPlayerFreighter)) &&
		std::equal(std::begin(lhs.HighlightIcons), std::end(lhs.HighlightIcons), std::begin(rhs.HighlightIcons)) &&
		lhs.ArrowLarge == rhs.ArrowLarge &&
		lhs.ArrowSmall == rhs.ArrowSmall &&
		lhs.BaseBuildingMarker == rhs.BaseBuildingMarker &&
		lhs.Battle == rhs.Battle &&
		lhs.BattleSmall == rhs.BattleSmall &&
		lhs.BlackHole == rhs.BlackHole &&
		lhs.Bounty1 == rhs.Bounty1 &&
		lhs.Bounty2 == rhs.Bounty2 &&
		lhs.Bounty3 == rhs.Bounty3 &&
		lhs.BountySmall == rhs.BountySmall &&
		lhs.Checkpoint == rhs.Checkpoint &&
		lhs.CircleAnimation == rhs.CircleAnimation &&
		lhs.CreatureAction == rhs.CreatureAction &&
		lhs.CreatureCurious == rhs.CreatureCurious &&
		lhs.CreatureDanger == rhs.CreatureDanger &&
		lhs.CreatureDiscovered == rhs.CreatureDiscovered &&
		lhs.CreatureFiend == rhs.CreatureFiend &&
		lhs.CreatureInteraction == rhs.CreatureInteraction &&
		lhs.CreatureMilk == rhs.CreatureMilk &&
		lhs.CreatureTame == rhs.CreatureTame &&
		lhs.CreatureUndiscovered == rhs.CreatureUndiscovered &&
		lhs.CreatureUnknown == rhs.CreatureUnknown &&
		lhs.DamagedFrigate == rhs.DamagedFrigate &&
		lhs.Death == rhs.Death &&
		lhs.DeathSmall == rhs.DeathSmall &&
		lhs.DiamondAnimation == rhs.DiamondAnimation &&
		lhs.EditingBase == rhs.EditingBase &&
		lhs.Expedition == rhs.Expedition &&
		lhs.Freighter == rhs.Freighter &&
		lhs.FreighterBase == rhs.FreighterBase &&
		lhs.FriendlyDrone == rhs.FriendlyDrone &&
		lhs.Garage == rhs.Garage &&
		lhs.HexAnimation == rhs.HexAnimation &&
		lhs.MessageBeacon == rhs.MessageBeacon &&
		lhs.MessageBeaconSmall == rhs.MessageBeaconSmall &&
		lhs.MissionAbandonedFreighter == rhs.MissionAbandonedFreighter &&
		lhs.MissionEnterBuilding == rhs.MissionEnterBuilding &&
		lhs.MissionEnterFreighter == rhs.MissionEnterFreighter &&
		lhs.MissionEnterOrbit == rhs.MissionEnterOrbit &&
		lhs.MissionEnterStation == rhs.MissionEnterStation &&
		lhs.MonumentMarker == rhs.MonumentMarker &&
		lhs.NetworkPlayerMarker == rhs.NetworkPlayerMarker &&
		lhs.NetworkPlayerMarkerShip == rhs.NetworkPlayerMarkerShip &&
		lhs.NetworkPlayerMarkerVehicle == rhs.NetworkPlayerMarkerVehicle &&
		lhs.NPC == rhs.NPC &&
		lhs.OtherPlayerSettlement == rhs.OtherPlayerSettlement &&
		lhs.Pet == rhs.Pet &&
		lhs.PetActivity == rhs.PetActivity &&
		lhs.PetInteraction == rhs.PetInteraction &&
		lhs.PetSad == rhs.PetSad &&
		lhs.PirateRaid == rhs.PirateRaid &&
		lhs.PlanetPoleEast == rhs.PlanetPoleEast &&
		lhs.PlanetPoleNorth == rhs.PlanetPoleNorth &&
		lhs.PlanetPoleSouth == rhs.PlanetPoleSouth &&
		lhs.PlanetPoleWest == rhs.PlanetPoleWest &&
		lhs.PlayerBase == rhs.PlayerBase &&
		lhs.PlayerFreighter == rhs.PlayerFreighter &&
		lhs.PlayerSettlement == rhs.PlayerSettlement &&
		lhs.PortalMarker == rhs.PortalMarker &&
		lhs.PurchasableFrigate == rhs.PurchasableFrigate &&
		lhs.SettlementNPC == rhs.SettlementNPC &&
		lhs.Ship == rhs.Ship &&
		lhs.ShipSmall == rhs.ShipSmall &&
		lhs.TaggedBuilding == rhs.TaggedBuilding &&
		lhs.TaggedPlanet == rhs.TaggedPlanet &&
		lhs.TimedEvent == rhs.TimedEvent &&
		lhs.VehicleGeneric == rhs.VehicleGeneric;
	}
};

//Dependency: GcWeightedResource
//Dependency: NMSString0x10
struct GcModuleOverride
{
	NMS::NMSString0x10 Module;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	float OriginalSceneProbability;
	float ProbabilityMultiplier;

	friend bool operator==(const GcModuleOverride& lhs, const GcModuleOverride& rhs) 
	{
		return lhs.Module == rhs.Module &&
		lhs.Scenes == rhs.Scenes &&
		lhs.OriginalSceneProbability == rhs.OriginalSceneProbability &&
		lhs.ProbabilityMultiplier == rhs.ProbabilityMultiplier;
	}
};

//Dependency: NMSString0x80
struct GcMonthlyRecurrence
{
	int32_t RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;

	friend bool operator==(const GcMonthlyRecurrence& lhs, const GcMonthlyRecurrence& rhs) 
	{
		return lhs.RecurrenceDay == rhs.RecurrenceDay &&
		lhs.RecurrenceHour == rhs.RecurrenceHour &&
		lhs.RecurrenceMinute == rhs.RecurrenceMinute &&
		lhs.DebugText == rhs.DebugText;
	}
};

//Dependency: GcColourisePalette
struct GcMultiColouriseComponentData
{
	std::vector<NMS_GameComponents::GcColourisePalette> Palettes;

	friend bool operator==(const GcMultiColouriseComponentData& lhs, const GcMultiColouriseComponentData& rhs) 
	{
		return lhs.Palettes == rhs.Palettes;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiActionData
{
	enum class ActionEnum : uint32_t
	{
		Click = 0,
		Hover = 1,
		ArrowLeft = 2,
		ArrowRight = 3,
	};

	NMS::VariableSizeString Data;
	NMS::NMSString0x10 LayerID;
	NMS_GameComponents::GcNGuiActionData::ActionEnum Action;

	friend bool operator==(const GcNGuiActionData& lhs, const GcNGuiActionData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.LayerID == rhs.LayerID &&
		lhs.Action == rhs.Action;
	}
};

//Dependency: NMSString0x10
struct GcRewardFreighterSlot
{
	NMS::NMSString0x10 Cost;

	friend bool operator==(const GcRewardFreighterSlot& lhs, const GcRewardFreighterSlot& rhs) 
	{
		return lhs.Cost == rhs.Cost;
	}
};

struct GcRewardSetWeaponSuppressed
{
	bool WeaponSuppressed;

	friend bool operator==(const GcRewardSetWeaponSuppressed& lhs, const GcRewardSetWeaponSuppressed& rhs) 
	{
		return lhs.WeaponSuppressed == rhs.WeaponSuppressed;
	}
};

//Dependency: GcNGuiElementData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
struct GcNGuiLayerData
{
	enum class AltModeEnum : uint32_t
	{
		None = 0,
		Normal = 1,
		Alt = 2,
		NeverOnTouch = 3,
		OnlyOnTouch = 4,
	};

	NMS_GameComponents::GcNGuiElementData ElementData;
	std::vector<NMSTemplate> Children;
	NMS::VariableSizeString DataFilename;
	NMS::VariableSizeString Image;
	NMS_Toolkit::TkNGuiGraphicStyle Style;
	NMS_GameComponents::GcNGuiLayerData::AltModeEnum AltMode;

	friend bool operator==(const GcNGuiLayerData& lhs, const GcNGuiLayerData& rhs) 
	{
		return lhs.ElementData == rhs.ElementData &&
		lhs.Children == rhs.Children &&
		lhs.DataFilename == rhs.DataFilename &&
		lhs.Image == rhs.Image &&
		lhs.Style == rhs.Style &&
		lhs.AltMode == rhs.AltMode;
	}
};

//Dependency: GcNGuiPresetText
//Dependency: GcNGuiPresetGraphic
//Dependency: GcNGuiLayoutData
//Dependency: VariableSizeString
struct GcNGuiPreset
{
	NMS_GameComponents::GcNGuiPresetText Text[10];
	NMS_GameComponents::GcNGuiPresetGraphic Graphic[10];
	NMS_GameComponents::GcNGuiPresetGraphic Layer[10];
	NMS_GameComponents::GcNGuiLayoutData SpacingLayout;
	NMS::VariableSizeString Font;

	friend bool operator==(const GcNGuiPreset& lhs, const GcNGuiPreset& rhs) 
	{
		return std::equal(std::begin(lhs.Text), std::end(lhs.Text), std::begin(rhs.Text)) &&
		std::equal(std::begin(lhs.Graphic), std::end(lhs.Graphic), std::begin(rhs.Graphic)) &&
		std::equal(std::begin(lhs.Layer), std::end(lhs.Layer), std::begin(rhs.Layer)) &&
		lhs.SpacingLayout == rhs.SpacingLayout &&
		lhs.Font == rhs.Font;
	}
};

//Dependency: GcNGuiElementData
struct GcNGuiSpacingData
{
	NMS_GameComponents::GcNGuiElementData ElementData;

	friend bool operator==(const GcNGuiSpacingData& lhs, const GcNGuiSpacingData& rhs) 
	{
		return lhs.ElementData == rhs.ElementData;
	}
};

//Dependency: GcNGuiSpecialTextImageData
struct GcNGuiSpecialTextImages
{
	std::vector<NMS_GameComponents::GcNGuiSpecialTextImageData> SpecialImages;

	friend bool operator==(const GcNGuiSpecialTextImages& lhs, const GcNGuiSpecialTextImages& rhs) 
	{
		return lhs.SpecialImages == rhs.SpecialImages;
	}
};

//Dependency: GcNGuiStyleAnimationData
//Dependency: NMSString0x10
struct GcNGuiSpecialTextStyleData
{
	NMS_GameComponents::GcNGuiStyleAnimationData Animation;
	NMS::NMSString0x10 Name;
	std::vector<NMSTemplate> StyleProperties;

	friend bool operator==(const GcNGuiSpecialTextStyleData& lhs, const GcNGuiSpecialTextStyleData& rhs) 
	{
		return lhs.Animation == rhs.Animation &&
		lhs.Name == rhs.Name &&
		lhs.StyleProperties == rhs.StyleProperties;
	}
};

struct GcSentinelQuadWeaponMode
{
	enum class SentinelQuadWeaponModeEnum : uint32_t
	{
		Laser = 0,
		MiniCannon = 1,
		Grenades = 2,
		Flamethrower = 3,
	};

	NMS_GameComponents::GcSentinelQuadWeaponMode::SentinelQuadWeaponModeEnum SentinelQuadWeaponMode;

	friend bool operator==(const GcSentinelQuadWeaponMode& lhs, const GcSentinelQuadWeaponMode& rhs) 
	{
		return lhs.SentinelQuadWeaponMode == rhs.SentinelQuadWeaponMode;
	}
};

//Dependency: GcNGuiSpecialTextStyleData
struct GcNGuiSpecialTextStyles
{
	std::vector<NMS_GameComponents::GcNGuiSpecialTextStyleData> SpecialStyles;

	friend bool operator==(const GcNGuiSpecialTextStyles& lhs, const GcNGuiSpecialTextStyles& rhs) 
	{
		return lhs.SpecialStyles == rhs.SpecialStyles;
	}
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcResourceElement
//Dependency: GcRealityCommonFactions
//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnTrader
{
	NMS_GameComponents::GcPlayerCommunicatorMessage HailingMessage;
	NMS_GameComponents::GcResourceElement CustomShipResource;
	NMS::NMSString0x20A CustomHailOSD;
	NMS_GameComponents::GcRealityCommonFactions ShipTrailFactionOverride;
	bool UseCustomMessage;
	bool UseSentinelCrashedShipResource;
	bool WarpOutOnCombatStart;

	friend bool operator==(const GcPulseEncounterSpawnTrader& lhs, const GcPulseEncounterSpawnTrader& rhs) 
	{
		return lhs.HailingMessage == rhs.HailingMessage &&
		lhs.CustomShipResource == rhs.CustomShipResource &&
		lhs.CustomHailOSD == rhs.CustomHailOSD &&
		lhs.ShipTrailFactionOverride == rhs.ShipTrailFactionOverride &&
		lhs.UseCustomMessage == rhs.UseCustomMessage &&
		lhs.UseSentinelCrashedShipResource == rhs.UseSentinelCrashedShipResource &&
		lhs.WarpOutOnCombatStart == rhs.WarpOutOnCombatStart;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcVehicleScanTableEntry
{
	NMS::NMSString0x20A Name;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 RequiredTech;
	std::vector<NMS::NMSString0x20A> ScanList;

	friend bool operator==(const GcVehicleScanTableEntry& lhs, const GcVehicleScanTableEntry& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Icon == rhs.Icon &&
		lhs.RequiredTech == rhs.RequiredTech &&
		lhs.ScanList == rhs.ScanList;
	}
};

//Dependency: GcVehicleScanTableEntry
struct GcVehicleScanTable
{
	std::vector<NMS_GameComponents::GcVehicleScanTableEntry> VehicleScanTable;

	friend bool operator==(const GcVehicleScanTable& lhs, const GcVehicleScanTable& rhs) 
	{
		return lhs.VehicleScanTable == rhs.VehicleScanTable;
	}
};

//Dependency: GcCharacterAlternateAnimation
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcNPCComponentData
{
	std::vector<NMS_GameComponents::GcCharacterAlternateAnimation> AlternateAnims;
	NMS::NMSString0x10 HologramEffect;
	std::vector<NMS::NMSString0x10> Tags;
	NMS_GameComponents::GcAlienRace Race;
	bool IsMech;
	bool IsOldStyleNPC;

	friend bool operator==(const GcNPCComponentData& lhs, const GcNPCComponentData& rhs) 
	{
		return lhs.AlternateAnims == rhs.AlternateAnims &&
		lhs.HologramEffect == rhs.HologramEffect &&
		lhs.Tags == rhs.Tags &&
		lhs.Race == rhs.Race &&
		lhs.IsMech == rhs.IsMech &&
		lhs.IsOldStyleNPC == rhs.IsOldStyleNPC;
	}
};

//Dependency: GcNPCHabitationType
//Dependency: NMSString0x10
struct GcNPCHabitationComponentData
{
	NMS::NMSString0x10 NPCSpawnLocator;
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;

	friend bool operator==(const GcNPCHabitationComponentData& lhs, const GcNPCHabitationComponentData& rhs) 
	{
		return lhs.NPCSpawnLocator == rhs.NPCSpawnLocator &&
		lhs.NPCHabitationType == rhs.NPCHabitationType;
	}
};

//Dependency: GcSettlementMaterialData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementColourPalette
{
	NMS_GameComponents::GcSettlementMaterialData UpgradeLevel[4];
	NMS::NMSString0x10 Name;
	float RelativeProbability;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;

	friend bool operator==(const GcSettlementColourPalette& lhs, const GcSettlementColourPalette& rhs) 
	{
		return std::equal(std::begin(lhs.UpgradeLevel), std::end(lhs.UpgradeLevel), std::begin(rhs.UpgradeLevel)) &&
		lhs.Name == rhs.Name &&
		lhs.RelativeProbability == rhs.RelativeProbability &&
		lhs.Style == rhs.Style;
	}
};

//Dependency: GcSettlementColourPalette
//Dependency: NMSString0x10
struct GcSettlementColourTable
{
	std::vector<NMS::NMSString0x10> DecorationPartIds;
	std::vector<NMS_GameComponents::GcSettlementColourPalette> SettlementColourPalettes;

	friend bool operator==(const GcSettlementColourTable& lhs, const GcSettlementColourTable& rhs) 
	{
		return lhs.DecorationPartIds == rhs.DecorationPartIds &&
		lhs.SettlementColourPalettes == rhs.SettlementColourPalettes;
	}
};

//Dependency: TkAttachmentData
//Dependency: NMSString0x10
struct GcNPCInteractionData
{
	NMS_Toolkit::TkAttachmentData Data;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcNPCInteractionData& lhs, const GcNPCInteractionData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.ID == rhs.ID;
	}
};

//Dependency: GcNPCInteractionData
struct GcNPCInteractionsDataTable
{
	std::vector<NMS_GameComponents::GcNPCInteractionData> NPCInteractions;

	friend bool operator==(const GcNPCInteractionsDataTable& lhs, const GcNPCInteractionsDataTable& rhs) 
	{
		return lhs.NPCInteractions == rhs.NPCInteractions;
	}
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: TkTextureResource
struct GcRewardOSDMessage
{
	NMS::Colour MessageColour;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float Time;
	bool RandomiseMessage;
	bool UseFancyMessage;
	bool UseSpookMessage;
	bool UseTimedMessage;

	friend bool operator==(const GcRewardOSDMessage& lhs, const GcRewardOSDMessage& rhs) 
	{
		return lhs.MessageColour == rhs.MessageColour &&
		lhs.Icon == rhs.Icon &&
		lhs.Message == rhs.Message &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.Time == rhs.Time &&
		lhs.RandomiseMessage == rhs.RandomiseMessage &&
		lhs.UseFancyMessage == rhs.UseFancyMessage &&
		lhs.UseSpookMessage == rhs.UseSpookMessage &&
		lhs.UseTimedMessage == rhs.UseTimedMessage;
	}
};

struct GcNPCNavigationAreaComponentData
{
	enum class NavAreaTypeEnum : uint32_t
	{
		Normal = 0,
		BuildingWithExterior = 1,
		Debris = 2,
		Ship = 3,
		Mech = 4,
		PlanetMech = 5,
		Demo = 6,
		WFCBase = 7,
		FreighterBase = 8,
	};

	float ConnectionLengthFactor;
	float MaxNeighbourSlope;
	float MaxRadius;
	float MinRadius;
	NMS_GameComponents::GcNPCNavigationAreaComponentData::NavAreaTypeEnum NavAreaType;
	float NeighbourCandidateDistance;
	float SphereCastHeightClearance;
	bool LimitPOIConnections;

	friend bool operator==(const GcNPCNavigationAreaComponentData& lhs, const GcNPCNavigationAreaComponentData& rhs) 
	{
		return lhs.ConnectionLengthFactor == rhs.ConnectionLengthFactor &&
		lhs.MaxNeighbourSlope == rhs.MaxNeighbourSlope &&
		lhs.MaxRadius == rhs.MaxRadius &&
		lhs.MinRadius == rhs.MinRadius &&
		lhs.NavAreaType == rhs.NavAreaType &&
		lhs.NeighbourCandidateDistance == rhs.NeighbourCandidateDistance &&
		lhs.SphereCastHeightClearance == rhs.SphereCastHeightClearance &&
		lhs.LimitPOIConnections == rhs.LimitPOIConnections;
	}
};

struct GcRewardFreighterBaseReset
{

	friend bool operator==(const GcRewardFreighterBaseReset& lhs, const GcRewardFreighterBaseReset& rhs) 
	{
		return true;
	}
};

//Dependency: GcInteractionType
//Dependency: GcAlienMoodMissionOverride
//Dependency: GcScanToRevealComponentData
//Dependency: GcAlienPuzzleMissionOverride
//Dependency: GcNPCPropType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcTechnologyCategory
//Dependency: NMSString0x20
struct GcNPCPlacementInfo
{
	NMS_GameComponents::GcScanToRevealComponentData ScanToRevealData;
	NMS::NMSString0x20A ForceInteraction;
	std::vector<NMS::NMSString0x10> HideDuringMissions;
	std::vector<NMS_GameComponents::GcAlienMoodMissionOverride> MoodMissionOverrideTable;
	NMS::NMSString0x10 PlacementRuleId;
	std::vector<NMS_GameComponents::GcAlienPuzzleMissionOverride> PuzzleMissionOverrideTable;
	NMS::NMSString0x10 SpawnSpecific;
	NMS_GameComponents::GcNPCPropType DefaultProp;
	float FractionOfNodesActive;
	NMS_GameComponents::GcInteractionType InteractionOverride;
	int32_t MaxNodesActivated;
	NMS_GameComponents::GcAlienRace Race;
	float SpawnChance;
	NMS_GameComponents::GcTechnologyCategory TechShopCategory;
	NMS::NMSString0x20 PlacmentNodeName;
	NMS::NMSString0x20 SpawnUnderNodeName;
	bool CanTurn;
	bool DisableInteraction;
	bool IsMannequin;
	bool MustPlace;
	bool OnlyUsePuzzleOverridesIfPlayerOwned;
	bool PlaceAtLeastOne;
	bool SpawnAnyMajorRace;
	bool SpawnInAbandoned;
	bool SpawnMoving;
	bool UseFreighterNPC;
	bool UseScanToRevealData;

	friend bool operator==(const GcNPCPlacementInfo& lhs, const GcNPCPlacementInfo& rhs) 
	{
		return lhs.ScanToRevealData == rhs.ScanToRevealData &&
		lhs.ForceInteraction == rhs.ForceInteraction &&
		lhs.HideDuringMissions == rhs.HideDuringMissions &&
		lhs.MoodMissionOverrideTable == rhs.MoodMissionOverrideTable &&
		lhs.PlacementRuleId == rhs.PlacementRuleId &&
		lhs.PuzzleMissionOverrideTable == rhs.PuzzleMissionOverrideTable &&
		lhs.SpawnSpecific == rhs.SpawnSpecific &&
		lhs.DefaultProp == rhs.DefaultProp &&
		lhs.FractionOfNodesActive == rhs.FractionOfNodesActive &&
		lhs.InteractionOverride == rhs.InteractionOverride &&
		lhs.MaxNodesActivated == rhs.MaxNodesActivated &&
		lhs.Race == rhs.Race &&
		lhs.SpawnChance == rhs.SpawnChance &&
		lhs.TechShopCategory == rhs.TechShopCategory &&
		lhs.PlacmentNodeName == rhs.PlacmentNodeName &&
		lhs.SpawnUnderNodeName == rhs.SpawnUnderNodeName &&
		lhs.CanTurn == rhs.CanTurn &&
		lhs.DisableInteraction == rhs.DisableInteraction &&
		lhs.IsMannequin == rhs.IsMannequin &&
		lhs.MustPlace == rhs.MustPlace &&
		lhs.OnlyUsePuzzleOverridesIfPlayerOwned == rhs.OnlyUsePuzzleOverridesIfPlayerOwned &&
		lhs.PlaceAtLeastOne == rhs.PlaceAtLeastOne &&
		lhs.SpawnAnyMajorRace == rhs.SpawnAnyMajorRace &&
		lhs.SpawnInAbandoned == rhs.SpawnInAbandoned &&
		lhs.SpawnMoving == rhs.SpawnMoving &&
		lhs.UseFreighterNPC == rhs.UseFreighterNPC &&
		lhs.UseScanToRevealData == rhs.UseScanToRevealData;
	}
};

//Dependency: GcNPCProbabilityReactionData
//Dependency: NMSString0x10
struct GcNPCReactionEntry
{
	std::vector<NMS_GameComponents::GcNPCProbabilityReactionData> Animations;
	NMS::NMSString0x10 Emote;
	float ReactionChance;

	friend bool operator==(const GcNPCReactionEntry& lhs, const GcNPCReactionEntry& rhs) 
	{
		return lhs.Animations == rhs.Animations &&
		lhs.Emote == rhs.Emote &&
		lhs.ReactionChance == rhs.ReactionChance;
	}
};

//Dependency: GcNPCReactionEntry
struct GcNPCReactionData
{
	std::vector<NMS_GameComponents::GcNPCReactionEntry> Reactions;

	friend bool operator==(const GcNPCReactionData& lhs, const GcNPCReactionData& rhs) 
	{
		return lhs.Reactions == rhs.Reactions;
	}
};

//Dependency: GcNPCSettlementBehaviourAreaPropertyWeightEntry
//Dependency: GcNPCSettlementBehaviourBuildingClassCapacityEntry
//Dependency: GcNPCSettlementBehaviourBuildingClassWeightEntry
//Dependency: GcNPCSettlementBehaviourObjectTypeWeightEntry
struct GcNPCSettlementBehaviourEntry
{
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourAreaPropertyWeightEntry> AreaPropertyWeights;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourBuildingClassCapacityEntry> BuildingClassCapacities;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourBuildingClassWeightEntry> BuildingClassWeights;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourObjectTypeWeightEntry> ObjectTypeWeights;
	float RunWhenOutdoorsProbability;
	bool OnlyUseIndoorPOIs;

	friend bool operator==(const GcNPCSettlementBehaviourEntry& lhs, const GcNPCSettlementBehaviourEntry& rhs) 
	{
		return lhs.AreaPropertyWeights == rhs.AreaPropertyWeights &&
		lhs.BuildingClassCapacities == rhs.BuildingClassCapacities &&
		lhs.BuildingClassWeights == rhs.BuildingClassWeights &&
		lhs.ObjectTypeWeights == rhs.ObjectTypeWeights &&
		lhs.RunWhenOutdoorsProbability == rhs.RunWhenOutdoorsProbability &&
		lhs.OnlyUseIndoorPOIs == rhs.OnlyUseIndoorPOIs;
	}
};

//Dependency: GcNPCSettlementBehaviourEntry
struct GcNPCSettlementBehaviourData
{
	NMS_GameComponents::GcNPCSettlementBehaviourEntry BehaviourOverrides[5];
	NMS_GameComponents::GcNPCSettlementBehaviourEntry BaseBehaviour;

	friend bool operator==(const GcNPCSettlementBehaviourData& lhs, const GcNPCSettlementBehaviourData& rhs) 
	{
		return std::equal(std::begin(lhs.BehaviourOverrides), std::end(lhs.BehaviourOverrides), std::begin(rhs.BehaviourOverrides)) &&
		lhs.BaseBehaviour == rhs.BaseBehaviour;
	}
};

struct GcNameGeneratorSectorTypes
{
	enum class SectorNameEnum : uint32_t
	{
		Generic = 0,
		Elevated = 1,
		Low = 2,
		Trees = 3,
		LushTrees = 4,
		Lush = 5,
		Wet = 6,
		Cave = 7,
		Dead = 8,
		Buildings = 9,
		Water = 10,
		Ice = 11,
	};

	NMS_GameComponents::GcNameGeneratorSectorTypes::SectorNameEnum SectorName;

	friend bool operator==(const GcNameGeneratorSectorTypes& lhs, const GcNameGeneratorSectorTypes& rhs) 
	{
		return lhs.SectorName == rhs.SectorName;
	}
};

struct GcStormEvent
{
	bool InStorm;

	friend bool operator==(const GcStormEvent& lhs, const GcStormEvent& rhs) 
	{
		return lhs.InStorm == rhs.InStorm;
	}
};

struct GcNPCSettlementBehaviourState
{
	enum class NPCSettlementBehaviourStateEnum : uint32_t
	{
		Generic = 0,
		Sociable = 1,
		Productive = 2,
		Tired = 3,
		Afraid = 4,
	};

	NMS_GameComponents::GcNPCSettlementBehaviourState::NPCSettlementBehaviourStateEnum NPCSettlementBehaviourState;

	friend bool operator==(const GcNPCSettlementBehaviourState& lhs, const GcNPCSettlementBehaviourState& rhs) 
	{
		return lhs.NPCSettlementBehaviourState == rhs.NPCSettlementBehaviourState;
	}
};

//Dependency: GcResourceElement
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcUniqueNPCSpawnData
{
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PresetId;
	NMS_GameComponents::GcAlienRace Race;
	float Scale;

	friend bool operator==(const GcUniqueNPCSpawnData& lhs, const GcUniqueNPCSpawnData& rhs) 
	{
		return lhs.ResourceElement == rhs.ResourceElement &&
		lhs.Id == rhs.Id &&
		lhs.PresetId == rhs.PresetId &&
		lhs.Race == rhs.Race &&
		lhs.Scale == rhs.Scale;
	}
};

//Dependency: GcNPCPlacementInfo
//Dependency: GcUniqueNPCSpawnData
//Dependency: VariableSizeString
struct GcNPCSpawnTable
{
	NMS::VariableSizeString NPCModelNames[9];
	NMS::VariableSizeString NPCMannequinModelName;
	std::vector<NMS_GameComponents::GcNPCPlacementInfo> PlacementInfos;
	std::vector<NMS_GameComponents::GcUniqueNPCSpawnData> UniqueNPCs;
	float NPCRaceScale[9];

	friend bool operator==(const GcNPCSpawnTable& lhs, const GcNPCSpawnTable& rhs) 
	{
		return std::equal(std::begin(lhs.NPCModelNames), std::end(lhs.NPCModelNames), std::begin(rhs.NPCModelNames)) &&
		lhs.NPCMannequinModelName == rhs.NPCMannequinModelName &&
		lhs.PlacementInfos == rhs.PlacementInfos &&
		lhs.UniqueNPCs == rhs.UniqueNPCs &&
		std::equal(std::begin(lhs.NPCRaceScale), std::end(lhs.NPCRaceScale), std::begin(rhs.NPCRaceScale));
	}
};

//Dependency: GcNPCWordReactionList
struct GcNPCWordReactionCategory
{
	NMS_GameComponents::GcNPCWordReactionList Categories[7];
	NMS_GameComponents::GcNPCWordReactionList Fallback;

	friend bool operator==(const GcNPCWordReactionCategory& lhs, const GcNPCWordReactionCategory& rhs) 
	{
		return std::equal(std::begin(lhs.Categories), std::end(lhs.Categories), std::begin(rhs.Categories)) &&
		lhs.Fallback == rhs.Fallback;
	}
};

//Dependency: GcNPCWordReactionCategory
struct GcNPCWordReactionTable
{
	NMS_GameComponents::GcNPCWordReactionCategory Races[9];

	friend bool operator==(const GcNPCWordReactionTable& lhs, const GcNPCWordReactionTable& rhs) 
	{
		return std::equal(std::begin(lhs.Races), std::end(lhs.Races), std::begin(rhs.Races));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkWaterCondition
{
	enum class WaterConditionEnum : uint32_t
	{
		Absolutely_Tranquil = 0,
		Breezy_Lake = 1,
		Wavy_Lake = 2,
		Still_Pond = 3,
		Agitated_Pond = 4,
		Agitated_Lake = 5,
		Surf = 6,
		Big_Surf = 7,
		Chaotic_Sea = 8,
		Huge_Swell = 9,
		Choppy_Sea = 10,
		Very_Choppy_Sea = 11,
		White_Horses = 12,
		Ocean_Planet = 13,
		Wall_Of_Water = 14,
	};

	NMS_Toolkit::TkWaterCondition::WaterConditionEnum WaterCondition;

	friend bool operator==(const TkWaterCondition& lhs, const TkWaterCondition& rhs) 
	{
		return lhs.WaterCondition == rhs.WaterCondition;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcCreaturePetTraits
struct GcPetTraitStaminaModifier
{
	float StaminaDrainModifierMax;
	float StaminaDrainModifierMin;
	float StaminaRechargeModifierMax;
	float StaminaRechargeModifierMin;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;

	friend bool operator==(const GcPetTraitStaminaModifier& lhs, const GcPetTraitStaminaModifier& rhs) 
	{
		return lhs.StaminaDrainModifierMax == rhs.StaminaDrainModifierMax &&
		lhs.StaminaDrainModifierMin == rhs.StaminaDrainModifierMin &&
		lhs.StaminaRechargeModifierMax == rhs.StaminaRechargeModifierMax &&
		lhs.StaminaRechargeModifierMin == rhs.StaminaRechargeModifierMin &&
		lhs.Trait == rhs.Trait &&
		lhs.TraitMax == rhs.TraitMax &&
		lhs.TraitMin == rhs.TraitMin;
	}
};

//Dependency: VariableSizeString
struct GcObjectDefinitionData
{
	enum class SizeClassEnum : uint32_t
	{
		Tiny = 0,
		Small = 1,
		Medium = 2,
		Large = 3,
		Massive = 4,
	};

	enum class ObjectRenderTypeEnum : uint32_t
	{
		Instanced = 0,
		Single = 1,
	};

	enum class ObjectCoverageTypeEnum : uint32_t
	{
		Blanket = 0,
		Cluster = 1,
		Solo = 2,
	};

	enum class ObjectAlignmentEnum : uint32_t
	{
		Upright = 0,
		SlightOffsetFromUpright = 1,
		LargeOffsetFromUpright = 2,
		ToNormal = 3,
		SlightOffsetFromNormal = 4,
		LargeOffsetFromNormal = 5,
	};

	enum class LocationTypeEnum : uint32_t
	{
		AboveGround = 0,
		UnderGround = 1,
		WaterSurface = 2,
		UnderWater = 3,
	};

	enum class LifeTypeEnum : uint32_t
	{
		Rock = 0,
		DryPlant = 1,
		LushPlant = 2,
		Artificial = 3,
	};

	NMS::VariableSizeString Filename;
	NMS_GameComponents::GcObjectDefinitionData::LifeTypeEnum LifeType;
	NMS_GameComponents::GcObjectDefinitionData::LocationTypeEnum LocationType;
	NMS_GameComponents::GcObjectDefinitionData::ObjectAlignmentEnum ObjectAlignment;
	NMS_GameComponents::GcObjectDefinitionData::ObjectCoverageTypeEnum ObjectCoverageType;
	NMS_GameComponents::GcObjectDefinitionData::ObjectRenderTypeEnum ObjectRenderType;
	NMS_GameComponents::GcObjectDefinitionData::SizeClassEnum SizeClass;
	bool AutoCollision;
	bool MatchGroundColour;

	friend bool operator==(const GcObjectDefinitionData& lhs, const GcObjectDefinitionData& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.LifeType == rhs.LifeType &&
		lhs.LocationType == rhs.LocationType &&
		lhs.ObjectAlignment == rhs.ObjectAlignment &&
		lhs.ObjectCoverageType == rhs.ObjectCoverageType &&
		lhs.ObjectRenderType == rhs.ObjectRenderType &&
		lhs.SizeClass == rhs.SizeClass &&
		lhs.AutoCollision == rhs.AutoCollision &&
		lhs.MatchGroundColour == rhs.MatchGroundColour;
	}
};

struct GcObjectPlacementCategory
{
	enum class ObjectPlacementEnum : uint32_t
	{
		None = 0,
		ResourceSmall = 1,
		ResourceMedium = 2,
		ResourceLarge = 3,
		ResourceDebris = 4,
	};

	NMS_GameComponents::GcObjectPlacementCategory::ObjectPlacementEnum ObjectPlacement;

	friend bool operator==(const GcObjectPlacementCategory& lhs, const GcObjectPlacementCategory& rhs) 
	{
		return lhs.ObjectPlacement == rhs.ObjectPlacement;
	}
};

struct GcRewardDiscoverRune
{
	bool AllRunes;

	friend bool operator==(const GcRewardDiscoverRune& lhs, const GcRewardDiscoverRune& rhs) 
	{
		return lhs.AllRunes == rhs.AllRunes;
	}
};

struct GcOptionsUIHeaderIcons
{
	enum class OptionsUIHeaderIconTypeEnum : uint32_t
	{
		General = 0,
		Ship = 1,
		Cog = 2,
		Scanner = 3,
		Advanced = 4,
		Cloud = 5,
	};

	NMS_GameComponents::GcOptionsUIHeaderIcons::OptionsUIHeaderIconTypeEnum OptionsUIHeaderIconType;

	friend bool operator==(const GcOptionsUIHeaderIcons& lhs, const GcOptionsUIHeaderIcons& rhs) 
	{
		return lhs.OptionsUIHeaderIconType == rhs.OptionsUIHeaderIconType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: TkTrophyEntry
//Dependency: TkLocalisationEntry
//Dependency: TkLanguages
//Dependency: Vector3f
//Dependency: Vector4f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: HashedString
//Dependency: LinkableNMSTemplate
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: GcNodeID
//Dependency: NMSString0x20
//Dependency: GcResource
//Dependency: NMSString0x100
//Dependency: NMSString0x800
//Dependency: NMSString0x400
//Dependency: NMSString0x200
//Dependency: NMSString0x80
//Dependency: Colour32
//Dependency: NMSString0x40
struct TkTestMetadata
{
	enum class TestEnumUInt8Enum : uint32_t
	{
		Enum1 = 0,
		Enum2 = 1,
		Enum3 = 2,
	};

	enum class TestInlineEnumEnum : uint32_t
	{
		Default = 0,
		NotDefault = 1,
		Other = 2,
	};

	enum class TestFlagsEnum : uint32_t
	{
		None = 0,
		Flag1 = 1,
		Flag2 = 2,
	};

	enum class TestEnumUInt32BitFieldEnum : uint32_t
	{
		None = 0,
		Enum1 = 1,
		Enum2 = 2,
	};

	enum class TestEnumEnum : uint32_t
	{
		Default = 0,
		Option1 = 1,
		Option2 = 2,
		Option3 = 3,
	};

	enum class DocOptionalEnumEnum : uint32_t
	{
		SomeValue1 = 0,
		SomeValue2 = 1,
		SomeValue3 = 2,
		SomeValue4 = 3,
	};

	enum class TestEnumArrayEnum : uint32_t
	{
		Default = 0,
		Option1 = 1,
		Option2 = 2,
		Option3 = 3,
	};

	NMS::Vector3f DocOptionalVector;
	NMS::Colour TestColour;
	NMS::Vector3f TestVector;
	NMS::Vector4f TestVector4;
	NMS_Toolkit::TkTrophyEntry TestClass;
	std::vector<NMS_Toolkit::TkLocalisationEntry> TestHashMap;
	NMS::NMSString0x20A DocOptionalRenamed;
	NMS::NMSString0x20A TestID256;
	NMS::NMSString0x20A TestLocID;
	NMS::HashedString TestHashedString;
	NMSTemplate TestClassPointer;
	std::vector<float> TestDynamicArray;
	NMS::VariableSizeString TestDynamicString;
	NMS::NMSString0x10 TestID;
	NMS::NMSString0x10 TestIDLookup;
	std::vector<NMS::LinkableNMSTemplate> TestLinkableClassPointerArray;
	NMS::VariableSizeString TestModelFilename;
	NMS::GcSeed TestSeed;
	NMS::VariableSizeString TestTextureFilename;
	int64_t TestInt64;
	uint64_t TestUInt64;
	uint64_t TestUniqueId;
	float TestStaticArray[10];
	float TestExternalEnumArray[5];
	float TestEnumArray[4];
	NMS::Vector2f TestVector2;
	NMS_Toolkit::TkTestMetadata::DocOptionalEnumEnum DocOptionalEnum;
	NMS_GameComponents::GcAudioWwiseEvents TestAudioEvent;
	NMS_Toolkit::TkTestMetadata::TestEnumEnum TestEnum;
	NMS_Toolkit::TkTestMetadata::TestEnumUInt32BitFieldEnum TestEnumUInt32BitField;
	NMS_Toolkit::TkLanguages TestExternalEnum;
	NMS_Toolkit::TkTestMetadata::TestFlagsEnum TestFlags;
	float TestFloat;
	NMS_Toolkit::TkTestMetadata::TestInlineEnumEnum TestInlineEnum;
	int32_t TestInt;
	NMS::GcNodeID TestNodeHandle;
	NMS::GcResource TestResource;
	uint32_t TestUInt32;
	int16_t TestInt16;
	uint16_t TestUInt16;
	NMS::NMSString0x800 TestString2048;
	NMS::NMSString0x400 TestString1024;
	NMS::NMSString0x200 TestString512;
	NMS::NMSString0x100 TestString256;
	NMS::NMSString0x80 TestString128;
	NMS::NMSString0x40 DocRenamedString64;
	NMS::NMSString0x40 TestString64;
	NMS::NMSString0x20 TestString;
	NMS::Colour32 TestColour32;
	bool TestBool;
	uint8_t TestByte;
	NMS_Toolkit::TkTestMetadata::TestEnumUInt8Enum TestEnumUInt8;
	int8_t TestInt8;

	friend bool operator==(const TkTestMetadata& lhs, const TkTestMetadata& rhs) 
	{
		return lhs.DocOptionalVector == rhs.DocOptionalVector &&
		lhs.TestColour == rhs.TestColour &&
		lhs.TestVector == rhs.TestVector &&
		lhs.TestVector4 == rhs.TestVector4 &&
		lhs.TestClass == rhs.TestClass &&
		lhs.TestHashMap == rhs.TestHashMap &&
		lhs.DocOptionalRenamed == rhs.DocOptionalRenamed &&
		lhs.TestID256 == rhs.TestID256 &&
		lhs.TestLocID == rhs.TestLocID &&
		lhs.TestHashedString == rhs.TestHashedString &&
		lhs.TestClassPointer == rhs.TestClassPointer &&
		lhs.TestDynamicArray == rhs.TestDynamicArray &&
		lhs.TestDynamicString == rhs.TestDynamicString &&
		lhs.TestID == rhs.TestID &&
		lhs.TestIDLookup == rhs.TestIDLookup &&
		lhs.TestLinkableClassPointerArray == rhs.TestLinkableClassPointerArray &&
		lhs.TestModelFilename == rhs.TestModelFilename &&
		lhs.TestSeed == rhs.TestSeed &&
		lhs.TestTextureFilename == rhs.TestTextureFilename &&
		lhs.TestInt64 == rhs.TestInt64 &&
		lhs.TestUInt64 == rhs.TestUInt64 &&
		lhs.TestUniqueId == rhs.TestUniqueId &&
		std::equal(std::begin(lhs.TestStaticArray), std::end(lhs.TestStaticArray), std::begin(rhs.TestStaticArray)) &&
		std::equal(std::begin(lhs.TestExternalEnumArray), std::end(lhs.TestExternalEnumArray), std::begin(rhs.TestExternalEnumArray)) &&
		std::equal(std::begin(lhs.TestEnumArray), std::end(lhs.TestEnumArray), std::begin(rhs.TestEnumArray)) &&
		lhs.TestVector2 == rhs.TestVector2 &&
		lhs.DocOptionalEnum == rhs.DocOptionalEnum &&
		lhs.TestAudioEvent == rhs.TestAudioEvent &&
		lhs.TestEnum == rhs.TestEnum &&
		lhs.TestEnumUInt32BitField == rhs.TestEnumUInt32BitField &&
		lhs.TestExternalEnum == rhs.TestExternalEnum &&
		lhs.TestFlags == rhs.TestFlags &&
		lhs.TestFloat == rhs.TestFloat &&
		lhs.TestInlineEnum == rhs.TestInlineEnum &&
		lhs.TestInt == rhs.TestInt &&
		lhs.TestNodeHandle == rhs.TestNodeHandle &&
		lhs.TestResource == rhs.TestResource &&
		lhs.TestUInt32 == rhs.TestUInt32 &&
		lhs.TestInt16 == rhs.TestInt16 &&
		lhs.TestUInt16 == rhs.TestUInt16 &&
		lhs.TestString2048 == rhs.TestString2048 &&
		lhs.TestString1024 == rhs.TestString1024 &&
		lhs.TestString512 == rhs.TestString512 &&
		lhs.TestString256 == rhs.TestString256 &&
		lhs.TestString128 == rhs.TestString128 &&
		lhs.DocRenamedString64 == rhs.DocRenamedString64 &&
		lhs.TestString64 == rhs.TestString64 &&
		lhs.TestString == rhs.TestString &&
		lhs.TestColour32 == rhs.TestColour32 &&
		lhs.TestBool == rhs.TestBool &&
		lhs.TestByte == rhs.TestByte &&
		lhs.TestEnumUInt8 == rhs.TestEnumUInt8 &&
		lhs.TestInt8 == rhs.TestInt8;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPaletteColourAlt
{
	enum class ColourAltNewEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Alternative3 = 2,
		Alternative4 = 3,
		Alternative5 = 4,
		Unique = 5,
		MatchGround = 6,
		None = 7,
	};

	NMS_GameComponents::GcPaletteColourAlt::ColourAltNewEnum ColourAltNew;

	friend bool operator==(const GcPaletteColourAlt& lhs, const GcPaletteColourAlt& rhs) 
	{
		return lhs.ColourAltNew == rhs.ColourAltNew;
	}
};

//Dependency: GcImpactCombatEffectData
//Dependency: NMSString0x10
struct GcRewardDamage
{
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffects;
	NMS::NMSString0x10 PlayerDamage;

	friend bool operator==(const GcRewardDamage& lhs, const GcRewardDamage& rhs) 
	{
		return lhs.CombatEffects == rhs.CombatEffects &&
		lhs.PlayerDamage == rhs.PlayerDamage;
	}
};

//Dependency: GcPaletteData
struct GcPaletteList
{
	enum class PalettesEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	NMS_GameComponents::GcPaletteData Palettes[64];

	friend bool operator==(const GcPaletteList& lhs, const GcPaletteList& rhs) 
	{
		return std::equal(std::begin(lhs.Palettes), std::end(lhs.Palettes), std::begin(rhs.Palettes));
	}
};

//Dependency: GcBroadcastLevel
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcParticleAction
{
	NMS::NMSString0x10 Effect;
	NMS_GameComponents::GcBroadcastLevel FindRange;
	NMS::NMSString0x20 Joint;
	bool Exact;

	friend bool operator==(const GcParticleAction& lhs, const GcParticleAction& rhs) 
	{
		return lhs.Effect == rhs.Effect &&
		lhs.FindRange == rhs.FindRange &&
		lhs.Joint == rhs.Joint &&
		lhs.Exact == rhs.Exact;
	}
};

//Dependency: GcPlayerCommunicatorMessageWeighted
struct GcShipDialogue
{
	NMS_GameComponents::GcPlayerCommunicatorMessageWeighted DialogueTree[7];

	friend bool operator==(const GcShipDialogue& lhs, const GcShipDialogue& rhs) 
	{
		return std::equal(std::begin(lhs.DialogueTree), std::end(lhs.DialogueTree), std::begin(rhs.DialogueTree));
	}
};

//Dependency: GcPetFollowUpBehaviour
//Dependency: GcPetBehaviourMoodModifier
//Dependency: NMSString0x20A
//Dependency: GcPetBehaviourTraitModifier
struct GcPetBehaviourData
{
	enum class PetBehaviourValidityEnum : uint32_t
	{
		Everywhere = 0,
		OnPlanet = 1,
	};

	NMS::NMSString0x20A LabelText;
	std::vector<NMS_GameComponents::GcPetFollowUpBehaviour> FollowUpBehaviours;
	std::vector<NMS_GameComponents::GcPetBehaviourMoodModifier> MoodBehaviourModifiers;
	std::vector<NMS_GameComponents::GcPetBehaviourTraitModifier> TraitBehaviourModifiers;
	float MoodModifyOnComplete[2];
	float ApproachPlayerDist;
	float ChatChance;
	float CooldownTime;
	float MaxPerformTime;
	float MinPerformTime;
	NMS_GameComponents::GcPetBehaviourData::PetBehaviourValidityEnum PetBehaviourValidity;
	float SearchDist;
	float Weight;
	bool ReactiveBehaviour;
	bool UsefulBehaviour;

	friend bool operator==(const GcPetBehaviourData& lhs, const GcPetBehaviourData& rhs) 
	{
		return lhs.LabelText == rhs.LabelText &&
		lhs.FollowUpBehaviours == rhs.FollowUpBehaviours &&
		lhs.MoodBehaviourModifiers == rhs.MoodBehaviourModifiers &&
		lhs.TraitBehaviourModifiers == rhs.TraitBehaviourModifiers &&
		std::equal(std::begin(lhs.MoodModifyOnComplete), std::end(lhs.MoodModifyOnComplete), std::begin(rhs.MoodModifyOnComplete)) &&
		lhs.ApproachPlayerDist == rhs.ApproachPlayerDist &&
		lhs.ChatChance == rhs.ChatChance &&
		lhs.CooldownTime == rhs.CooldownTime &&
		lhs.MaxPerformTime == rhs.MaxPerformTime &&
		lhs.MinPerformTime == rhs.MinPerformTime &&
		lhs.PetBehaviourValidity == rhs.PetBehaviourValidity &&
		lhs.SearchDist == rhs.SearchDist &&
		lhs.Weight == rhs.Weight &&
		lhs.ReactiveBehaviour == rhs.ReactiveBehaviour &&
		lhs.UsefulBehaviour == rhs.UsefulBehaviour;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: TkModelRendererData
//Dependency: TkMaterialResource
struct GcEffectsGlobals
{
	NMS_Toolkit::TkModelRendererData ResourceRendererData;
	NMS_Toolkit::TkMaterialResource HologramComponentDefaultMaterial;
	float ClickToPlayCameraOffset;
	float ClickToPlayScale;

	friend bool operator==(const GcEffectsGlobals& lhs, const GcEffectsGlobals& rhs) 
	{
		return lhs.ResourceRendererData == rhs.ResourceRendererData &&
		lhs.HologramComponentDefaultMaterial == rhs.HologramComponentDefaultMaterial &&
		lhs.ClickToPlayCameraOffset == rhs.ClickToPlayCameraOffset &&
		lhs.ClickToPlayScale == rhs.ClickToPlayScale;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcCreaturePetMood
struct GcPetMoodStaminaModifier
{
	NMS_GameComponents::GcCreaturePetMood Mood;
	float MoodMax;
	float MoodMin;
	float StaminaDrainModifierMax;
	float StaminaDrainModifierMin;
	float StaminaRechargeModifierMax;
	float StaminaRechargeModifierMin;

	friend bool operator==(const GcPetMoodStaminaModifier& lhs, const GcPetMoodStaminaModifier& rhs) 
	{
		return lhs.Mood == rhs.Mood &&
		lhs.MoodMax == rhs.MoodMax &&
		lhs.MoodMin == rhs.MoodMin &&
		lhs.StaminaDrainModifierMax == rhs.StaminaDrainModifierMax &&
		lhs.StaminaDrainModifierMin == rhs.StaminaDrainModifierMin &&
		lhs.StaminaRechargeModifierMax == rhs.StaminaRechargeModifierMax &&
		lhs.StaminaRechargeModifierMin == rhs.StaminaRechargeModifierMin;
	}
};

struct GcPetTraitMoodModifier
{
	float MoodIncreaseMultiplierMax;
	float MoodIncreaseMultiplierMin;
	float TraitMax;
	float TraitMin;

	friend bool operator==(const GcPetTraitMoodModifier& lhs, const GcPetTraitMoodModifier& rhs) 
	{
		return lhs.MoodIncreaseMultiplierMax == rhs.MoodIncreaseMultiplierMax &&
		lhs.MoodIncreaseMultiplierMin == rhs.MoodIncreaseMultiplierMin &&
		lhs.TraitMax == rhs.TraitMax &&
		lhs.TraitMin == rhs.TraitMin;
	}
};

//Dependency: GcPetTraitMoodModifier
struct GcPetTraitMoodModifierList
{
	NMS_GameComponents::GcPetTraitMoodModifier Modifiers[2];

	friend bool operator==(const GcPetTraitMoodModifierList& lhs, const GcPetTraitMoodModifierList& rhs) 
	{
		return std::equal(std::begin(lhs.Modifiers), std::end(lhs.Modifiers), std::begin(rhs.Modifiers));
	}
};

//Dependency: GcPetBehaviourData
//Dependency: GcCreaturePetTraitRanges
//Dependency: GcPetMoodStaminaModifier
//Dependency: GcPetTraitStaminaModifier
//Dependency: GcPetTraitMoodModifierList
//Dependency: GcPetActionMoodModifier
struct GcPetBehaviourTable
{
	NMS_GameComponents::GcPetBehaviourData Behaviours[28];
	std::vector<NMS_GameComponents::GcPetMoodStaminaModifier> MoodStaminaModifiers;
	std::vector<NMS_GameComponents::GcPetTraitStaminaModifier> TraitStaminaModifiers;
	NMS_GameComponents::GcCreaturePetTraitRanges TraitRanges[11];
	NMS_GameComponents::GcPetTraitMoodModifierList TraitMoodModifiers[3];
	NMS_GameComponents::GcPetActionMoodModifier RewardMoodModifier[9];
	float MoodIncreaseTime[2];
	float MoodValuesOnAdopt[2];
	float MoodValuesOnHatch[2];
	float AccessoryGyroDamping;
	float AccessoryGyroFollowMotionStrength;
	float AccessoryGyroStrength;
	float AccessoryGyroToNeutralStrength;
	float GlobalCooldownModifier;
	float PlayerActivityDecreaseTime;
	float PlayerActivityIncreaseTime;
	float UsefulBehaviourLinkedCooldownAmount;
	bool AccessoryGyroActive;

	friend bool operator==(const GcPetBehaviourTable& lhs, const GcPetBehaviourTable& rhs) 
	{
		return std::equal(std::begin(lhs.Behaviours), std::end(lhs.Behaviours), std::begin(rhs.Behaviours)) &&
		lhs.MoodStaminaModifiers == rhs.MoodStaminaModifiers &&
		lhs.TraitStaminaModifiers == rhs.TraitStaminaModifiers &&
		std::equal(std::begin(lhs.TraitRanges), std::end(lhs.TraitRanges), std::begin(rhs.TraitRanges)) &&
		std::equal(std::begin(lhs.TraitMoodModifiers), std::end(lhs.TraitMoodModifiers), std::begin(rhs.TraitMoodModifiers)) &&
		std::equal(std::begin(lhs.RewardMoodModifier), std::end(lhs.RewardMoodModifier), std::begin(rhs.RewardMoodModifier)) &&
		std::equal(std::begin(lhs.MoodIncreaseTime), std::end(lhs.MoodIncreaseTime), std::begin(rhs.MoodIncreaseTime)) &&
		std::equal(std::begin(lhs.MoodValuesOnAdopt), std::end(lhs.MoodValuesOnAdopt), std::begin(rhs.MoodValuesOnAdopt)) &&
		std::equal(std::begin(lhs.MoodValuesOnHatch), std::end(lhs.MoodValuesOnHatch), std::begin(rhs.MoodValuesOnHatch)) &&
		lhs.AccessoryGyroDamping == rhs.AccessoryGyroDamping &&
		lhs.AccessoryGyroFollowMotionStrength == rhs.AccessoryGyroFollowMotionStrength &&
		lhs.AccessoryGyroStrength == rhs.AccessoryGyroStrength &&
		lhs.AccessoryGyroToNeutralStrength == rhs.AccessoryGyroToNeutralStrength &&
		lhs.GlobalCooldownModifier == rhs.GlobalCooldownModifier &&
		lhs.PlayerActivityDecreaseTime == rhs.PlayerActivityDecreaseTime &&
		lhs.PlayerActivityIncreaseTime == rhs.PlayerActivityIncreaseTime &&
		lhs.UsefulBehaviourLinkedCooldownAmount == rhs.UsefulBehaviourLinkedCooldownAmount &&
		lhs.AccessoryGyroActive == rhs.AccessoryGyroActive;
	}
};

struct GcPetChatType
{
	enum class PetChatTypeEnum : uint32_t
	{
		Adopted = 0,
		Hatched = 1,
		Summoned = 2,
		Greeting = 3,
		Hazard = 4,
		Scanning = 5,
		PositiveEmote = 6,
		HungryEmote = 7,
		LonelyEmote = 8,
		Go_There = 9,
		Come_Here = 10,
		Planet = 11,
		Mine = 12,
		Attack = 13,
		Chase = 14,
		ReceivedTreat = 15,
		Tickled = 16,
		Ride = 17,
		Egg_Laid = 18,
		Customise = 19,
		Unsummoned = 20,
	};

	NMS_GameComponents::GcPetChatType::PetChatTypeEnum PetChatType;

	friend bool operator==(const GcPetChatType& lhs, const GcPetChatType& rhs) 
	{
		return lhs.PetChatType == rhs.PetChatType;
	}
};

//Dependency: NMSString0x10
struct GcPetEggSpeciesOverrideData
{
	NMS::NMSString0x10 CreatureID;
	float MaxScaleOverride;
	float MinScaleOverride;
	bool CanChangeAccessories;
	bool CanChangeColour;
	bool CanChangeGrowth;
	bool CanChangeTraits;

	friend bool operator==(const GcPetEggSpeciesOverrideData& lhs, const GcPetEggSpeciesOverrideData& rhs) 
	{
		return lhs.CreatureID == rhs.CreatureID &&
		lhs.MaxScaleOverride == rhs.MaxScaleOverride &&
		lhs.MinScaleOverride == rhs.MinScaleOverride &&
		lhs.CanChangeAccessories == rhs.CanChangeAccessories &&
		lhs.CanChangeColour == rhs.CanChangeColour &&
		lhs.CanChangeGrowth == rhs.CanChangeGrowth &&
		lhs.CanChangeTraits == rhs.CanChangeTraits;
	}
};

//Dependency: GcPetEggSpeciesOverrideData
struct GcPetEggSpeciesOverrideTable
{
	std::vector<NMS_GameComponents::GcPetEggSpeciesOverrideData> SpeciesOverrides;

	friend bool operator==(const GcPetEggSpeciesOverrideTable& lhs, const GcPetEggSpeciesOverrideTable& rhs) 
	{
		return lhs.SpeciesOverrides == rhs.SpeciesOverrides;
	}
};

//Dependency: GcCreaturePetTraits
//Dependency: NMSString0x10
struct GcPetEggTraitModifierOverrideData
{
	NMS::NMSString0x10 ProductID;
	NMS::NMSString0x10 SubstanceID;
	int32_t BaseValueOverride;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	bool IncreasesTrait;

	friend bool operator==(const GcPetEggTraitModifierOverrideData& lhs, const GcPetEggTraitModifierOverrideData& rhs) 
	{
		return lhs.ProductID == rhs.ProductID &&
		lhs.SubstanceID == rhs.SubstanceID &&
		lhs.BaseValueOverride == rhs.BaseValueOverride &&
		lhs.Trait == rhs.Trait &&
		lhs.IncreasesTrait == rhs.IncreasesTrait;
	}
};

//Dependency: GcPetEggTraitModifierOverrideData
struct GcPetEggTraitModifierOverrideTable
{
	std::vector<NMS_GameComponents::GcPetEggTraitModifierOverrideData> TraitModifiers;

	friend bool operator==(const GcPetEggTraitModifierOverrideTable& lhs, const GcPetEggTraitModifierOverrideTable& rhs) 
	{
		return lhs.TraitModifiers == rhs.TraitModifiers;
	}
};

struct GcRewardCrashSiteRepair
{

	friend bool operator==(const GcRewardCrashSiteRepair& lhs, const GcRewardCrashSiteRepair& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcStatGroupData
{
	NMS::NMSString0x10 GroupName;
	std::vector<NMS::NMSString0x10> TrackedStats;

	friend bool operator==(const GcStatGroupData& lhs, const GcStatGroupData& rhs) 
	{
		return lhs.GroupName == rhs.GroupName &&
		lhs.TrackedStats == rhs.TrackedStats;
	}
};

//Dependency: GcStatGroupData
struct GcStatGroupTable
{
	std::vector<NMS_GameComponents::GcStatGroupData> StatGroupTable;

	friend bool operator==(const GcStatGroupTable& lhs, const GcStatGroupTable& rhs) 
	{
		return lhs.StatGroupTable == rhs.StatGroupTable;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkNamedAudioIdArray
{
	std::vector<NMS::NMSString0x80> Values;
	NMS::NMSString0x80 Name;

	friend bool operator==(const TkNamedAudioIdArray& lhs, const TkNamedAudioIdArray& rhs) 
	{
		return lhs.Values == rhs.Values &&
		lhs.Name == rhs.Name;
	}
};

struct TkAnimStateMachineBlendTimeMode
{
	enum class TimeModeEnum : uint32_t
	{
		Normalised = 0,
		Seconds = 1,
	};

	NMS_Toolkit::TkAnimStateMachineBlendTimeMode::TimeModeEnum TimeMode;

	friend bool operator==(const TkAnimStateMachineBlendTimeMode& lhs, const TkAnimStateMachineBlendTimeMode& rhs) 
	{
		return lhs.TimeMode == rhs.TimeMode;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcPlanetDataResourceHint
{
	NMS::NMSString0x10 Hint;
	NMS::NMSString0x10 Icon;

	friend bool operator==(const GcPlanetDataResourceHint& lhs, const GcPlanetDataResourceHint& rhs) 
	{
		return lhs.Hint == rhs.Hint &&
		lhs.Icon == rhs.Icon;
	}
};

//Dependency: GcPhysicsCollisionGroupCollidesWith
struct GcPhysicsCollisionTable
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroupCollidesWith> CollisionTable;

	friend bool operator==(const GcPhysicsCollisionTable& lhs, const GcPhysicsCollisionTable& rhs) 
	{
		return lhs.CollisionTable == rhs.CollisionTable;
	}
};

//Dependency: NMSString0x100
//Dependency: NMSString0x80
//Dependency: NMSString0x40
struct GcPlayfabMatchmakingAttributes
{
	int32_t gameProgress;
	int32_t isBackfilling;
	int32_t needsSmallLobby;
	NMS::NMSString0x100 lobbyConnectionString;
	NMS::NMSString0x80 gamemode;
	NMS::NMSString0x80 matchmakingVersion;
	NMS::NMSString0x80 platform;
	NMS::NMSString0x40 seasonNumber;
	NMS::NMSString0x40 UA;

	friend bool operator==(const GcPlayfabMatchmakingAttributes& lhs, const GcPlayfabMatchmakingAttributes& rhs) 
	{
		return lhs.gameProgress == rhs.gameProgress &&
		lhs.isBackfilling == rhs.isBackfilling &&
		lhs.needsSmallLobby == rhs.needsSmallLobby &&
		lhs.lobbyConnectionString == rhs.lobbyConnectionString &&
		lhs.gamemode == rhs.gamemode &&
		lhs.matchmakingVersion == rhs.matchmakingVersion &&
		lhs.platform == rhs.platform &&
		lhs.seasonNumber == rhs.seasonNumber &&
		lhs.UA == rhs.UA;
	}
};

//Dependency: GcSeed
//Dependency: Vector2f
struct GcPlanetCloudProperties
{
	enum class CloudinessEnum : uint32_t
	{
		CloudyWithClearSpells = 0,
		ClearWithCloudySpells = 1,
	};

	NMS::GcSeed Seed;
	NMS::Vector2f CoverageRange;
	NMS::Vector2f CoverExtremes;
	NMS_GameComponents::GcPlanetCloudProperties::CloudinessEnum Cloudiness;
	float Coverage1;
	float Coverage2;
	float Coverage3;
	float Offset1;
	float Offset2;
	float Offset3;
	float RateOfChange;
	float Ratio;
	float SecondaryRateOfChange;

	friend bool operator==(const GcPlanetCloudProperties& lhs, const GcPlanetCloudProperties& rhs) 
	{
		return lhs.Seed == rhs.Seed &&
		lhs.CoverageRange == rhs.CoverageRange &&
		lhs.CoverExtremes == rhs.CoverExtremes &&
		lhs.Cloudiness == rhs.Cloudiness &&
		lhs.Coverage1 == rhs.Coverage1 &&
		lhs.Coverage2 == rhs.Coverage2 &&
		lhs.Coverage3 == rhs.Coverage3 &&
		lhs.Offset1 == rhs.Offset1 &&
		lhs.Offset2 == rhs.Offset2 &&
		lhs.Offset3 == rhs.Offset3 &&
		lhs.RateOfChange == rhs.RateOfChange &&
		lhs.Ratio == rhs.Ratio &&
		lhs.SecondaryRateOfChange == rhs.SecondaryRateOfChange;
	}
};

//Dependency: GcColourPaletteData
struct GcPlanetColourData
{
	enum class PalettesEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	NMS_GameComponents::GcColourPaletteData Palettes[64];

	friend bool operator==(const GcPlanetColourData& lhs, const GcPlanetColourData& rhs) 
	{
		return std::equal(std::begin(lhs.Palettes), std::end(lhs.Palettes), std::begin(rhs.Palettes));
	}
};

struct GcWonderTreasureCategory
{
	enum class WonderTreasureCategoryEnum : uint32_t
	{
		Loot = 0,
		Document = 1,
		BioSample = 2,
		Fossil = 3,
		Plant = 4,
		Tool = 5,
		Farm = 6,
		SeaLoot = 7,
		SeaHorror = 8,
		Salvage = 9,
		Bones = 10,
		SpaceHorror = 11,
		SpaceBones = 12,
	};

	NMS_GameComponents::GcWonderTreasureCategory::WonderTreasureCategoryEnum WonderTreasureCategory;

	friend bool operator==(const GcWonderTreasureCategory& lhs, const GcWonderTreasureCategory& rhs) 
	{
		return lhs.WonderTreasureCategory == rhs.WonderTreasureCategory;
	}
};

//Dependency: Colour
//Dependency: Vector3f
struct GcPlanetRingData
{
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f Up;
	float AlphaMultiplier;
	float Depth;
	float LargeScale1;
	float LargeScale2;
	float MidScale;
	float MidStrength;
	float Offset;
	float SmallScale;
	bool HasRings;

	friend bool operator==(const GcPlanetRingData& lhs, const GcPlanetRingData& rhs) 
	{
		return lhs.Colour1 == rhs.Colour1 &&
		lhs.Colour2 == rhs.Colour2 &&
		lhs.Up == rhs.Up &&
		lhs.AlphaMultiplier == rhs.AlphaMultiplier &&
		lhs.Depth == rhs.Depth &&
		lhs.LargeScale1 == rhs.LargeScale1 &&
		lhs.LargeScale2 == rhs.LargeScale2 &&
		lhs.MidScale == rhs.MidScale &&
		lhs.MidStrength == rhs.MidStrength &&
		lhs.Offset == rhs.Offset &&
		lhs.SmallScale == rhs.SmallScale &&
		lhs.HasRings == rhs.HasRings;
	}
};

//Dependency: GcHeavyAirColourData
//Dependency: VariableSizeString
struct GcPlanetHeavyAirData
{
	NMS_GameComponents::GcHeavyAirColourData Colours[5];
	NMS::VariableSizeString Filename;

	friend bool operator==(const GcPlanetHeavyAirData& lhs, const GcPlanetHeavyAirData& rhs) 
	{
		return std::equal(std::begin(lhs.Colours), std::end(lhs.Colours), std::begin(rhs.Colours)) &&
		lhs.Filename == rhs.Filename;
	}
};

//Dependency: GcPlanetHeavyAirData
//Dependency: GcRainbowType
//Dependency: GcScreenFilters
//Dependency: GcWeatherOptions
struct GcPlanetWeatherData
{
	enum class WeatherIntensityEnum : uint32_t
	{
		Default = 0,
		Extreme = 1,
	};

	enum class StormFrequencyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		High = 2,
		Always = 3,
	};

	enum class AtmosphereTypeEnum : uint32_t
	{
		None = 0,
		Normal = 1,
	};

	NMS_GameComponents::GcPlanetHeavyAirData HeavyAir;
	NMS_GameComponents::GcPlanetWeatherData::AtmosphereTypeEnum AtmosphereType;
	int32_t DayColourIndex;
	int32_t DuskColourIndex;
	int32_t NightColourIndex;
	NMS_GameComponents::GcRainbowType RainbowType;
	NMS_GameComponents::GcScreenFilters ScreenFilter;
	NMS_GameComponents::GcPlanetWeatherData::StormFrequencyEnum StormFrequency;
	NMS_GameComponents::GcScreenFilters StormScreenFilter;
	NMS_GameComponents::GcPlanetWeatherData::WeatherIntensityEnum WeatherIntensity;
	NMS_GameComponents::GcWeatherOptions WeatherType;

	friend bool operator==(const GcPlanetWeatherData& lhs, const GcPlanetWeatherData& rhs) 
	{
		return lhs.HeavyAir == rhs.HeavyAir &&
		lhs.AtmosphereType == rhs.AtmosphereType &&
		lhs.DayColourIndex == rhs.DayColourIndex &&
		lhs.DuskColourIndex == rhs.DuskColourIndex &&
		lhs.NightColourIndex == rhs.NightColourIndex &&
		lhs.RainbowType == rhs.RainbowType &&
		lhs.ScreenFilter == rhs.ScreenFilter &&
		lhs.StormFrequency == rhs.StormFrequency &&
		lhs.StormScreenFilter == rhs.StormScreenFilter &&
		lhs.WeatherIntensity == rhs.WeatherIntensity &&
		lhs.WeatherType == rhs.WeatherType;
	}
};

//Dependency: NMSString0x80
struct GcPlanetInfo
{
	NMS::NMSString0x80 SentinelsPerDifficulty[4];
	NMS::NMSString0x80 Fauna;
	NMS::NMSString0x80 Flora;
	NMS::NMSString0x80 PlanetDescription;
	NMS::NMSString0x80 PlanetType;
	NMS::NMSString0x80 Resources;
	NMS::NMSString0x80 Weather;
	bool SentinelHighlightPerDifficulty[4];
	bool IsWeatherExtreme;
	bool SpecialFauna;

	friend bool operator==(const GcPlanetInfo& lhs, const GcPlanetInfo& rhs) 
	{
		return std::equal(std::begin(lhs.SentinelsPerDifficulty), std::end(lhs.SentinelsPerDifficulty), std::begin(rhs.SentinelsPerDifficulty)) &&
		lhs.Fauna == rhs.Fauna &&
		lhs.Flora == rhs.Flora &&
		lhs.PlanetDescription == rhs.PlanetDescription &&
		lhs.PlanetType == rhs.PlanetType &&
		lhs.Resources == rhs.Resources &&
		lhs.Weather == rhs.Weather &&
		std::equal(std::begin(lhs.SentinelHighlightPerDifficulty), std::end(lhs.SentinelHighlightPerDifficulty), std::begin(rhs.SentinelHighlightPerDifficulty)) &&
		lhs.IsWeatherExtreme == rhs.IsWeatherExtreme &&
		lhs.SpecialFauna == rhs.SpecialFauna;
	}
};

//Dependency: GcPlanetBuildingData
//Dependency: GcPlanetColourData
//Dependency: GcPlanetCloudProperties
//Dependency: GcEnvironmentSpawnData
//Dependency: GcPlanetRingData
//Dependency: GcPlanetWeatherData
//Dependency: GcPlanetGenerationIntermediateData
//Dependency: GcPlanetDataResourceHint
//Dependency: GcPlanetHazardData
//Dependency: GcPlanetGroundCombatData
//Dependency: GcPlanetWaterData
//Dependency: GcBuildingDensityLevels
//Dependency: GcPlanetLife
//Dependency: GcAlienRace
//Dependency: GcPlanetInfo
//Dependency: TkVoxelGeneratorData
//Dependency: Colour
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcPlanetData
{
	enum class ResourceLevelEnum : uint32_t
	{
		Low = 0,
		High = 1,
	};

	NMS_GameComponents::GcPlanetColourData Colours;
	NMS_GameComponents::GcPlanetWeatherData Weather;
	NMS::Colour TileColours[23];
	NMS_GameComponents::GcPlanetRingData Rings;
	NMS_Toolkit::TkVoxelGeneratorData Terrain;
	NMS_GameComponents::GcPlanetGenerationIntermediateData GenerationData;
	NMS_GameComponents::GcEnvironmentSpawnData SpawnData;
	NMS_GameComponents::GcPlanetBuildingData BuildingData;
	NMS_GameComponents::GcPlanetCloudProperties Clouds;
	NMS::NMSString0x10 CommonSubstanceID;
	std::vector<NMS_GameComponents::GcPlanetDataResourceHint> ExtraResourceHints;
	NMS::NMSString0x10 RareSubstanceID;
	NMS::VariableSizeString TerrainFile;
	std::vector<int32_t> TileTypeIndices;
	NMS::NMSString0x10 UncommonSubstanceID;
	NMS_GameComponents::GcPlanetHazardData Hazard;
	NMS_GameComponents::GcPlanetGroundCombatData GroundCombatDataPerDifficulty[4];
	NMS_GameComponents::GcPlanetWaterData Water;
	NMS_GameComponents::GcBuildingDensityLevels BuildingLevel;
	NMS_GameComponents::GcPlanetLife CreatureLife;
	float FuelMultiplier;
	NMS_GameComponents::GcAlienRace InhabitingRace;
	NMS_GameComponents::GcPlanetLife Life;
	int32_t PlanetIndex;
	NMS_GameComponents::GcPlanetData::ResourceLevelEnum ResourceLevel;
	int32_t TileTypeSet;
	NMS_GameComponents::GcPlanetInfo PlanetInfo;
	NMS::NMSString0x80 Name;
	bool InAbandonedSystem;
	bool InEmptySystem;
	bool InGasGiantSystem;

	friend bool operator==(const GcPlanetData& lhs, const GcPlanetData& rhs) 
	{
		return lhs.Colours == rhs.Colours &&
		lhs.Weather == rhs.Weather &&
		std::equal(std::begin(lhs.TileColours), std::end(lhs.TileColours), std::begin(rhs.TileColours)) &&
		lhs.Rings == rhs.Rings &&
		lhs.Terrain == rhs.Terrain &&
		lhs.GenerationData == rhs.GenerationData &&
		lhs.SpawnData == rhs.SpawnData &&
		lhs.BuildingData == rhs.BuildingData &&
		lhs.Clouds == rhs.Clouds &&
		lhs.CommonSubstanceID == rhs.CommonSubstanceID &&
		lhs.ExtraResourceHints == rhs.ExtraResourceHints &&
		lhs.RareSubstanceID == rhs.RareSubstanceID &&
		lhs.TerrainFile == rhs.TerrainFile &&
		lhs.TileTypeIndices == rhs.TileTypeIndices &&
		lhs.UncommonSubstanceID == rhs.UncommonSubstanceID &&
		lhs.Hazard == rhs.Hazard &&
		std::equal(std::begin(lhs.GroundCombatDataPerDifficulty), std::end(lhs.GroundCombatDataPerDifficulty), std::begin(rhs.GroundCombatDataPerDifficulty)) &&
		lhs.Water == rhs.Water &&
		lhs.BuildingLevel == rhs.BuildingLevel &&
		lhs.CreatureLife == rhs.CreatureLife &&
		lhs.FuelMultiplier == rhs.FuelMultiplier &&
		lhs.InhabitingRace == rhs.InhabitingRace &&
		lhs.Life == rhs.Life &&
		lhs.PlanetIndex == rhs.PlanetIndex &&
		lhs.ResourceLevel == rhs.ResourceLevel &&
		lhs.TileTypeSet == rhs.TileTypeSet &&
		lhs.PlanetInfo == rhs.PlanetInfo &&
		lhs.Name == rhs.Name &&
		lhs.InAbandonedSystem == rhs.InAbandonedSystem &&
		lhs.InEmptySystem == rhs.InEmptySystem &&
		lhs.InGasGiantSystem == rhs.InGasGiantSystem;
	}
};

//Dependency: GcBiomeType
//Dependency: GcBiomeSubType
//Dependency: NMSString0x10
//Dependency: GcPlanetClass
//Dependency: GcPlanetSize
//Dependency: GcGalaxyStarTypes
//Dependency: GcSeed
struct GcPlanetGenerationInputData
{
	NMS::NMSString0x10 CommonSubstance;
	NMS::NMSString0x10 RareSubstance;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcBiomeSubType BiomeSubType;
	NMS_GameComponents::GcPlanetClass Class;
	int32_t PlanetIndex;
	NMS_GameComponents::GcPlanetSize PlanetSize;
	int32_t RealityIndex;
	NMS_GameComponents::GcGalaxyStarTypes Star;
	bool ForceContinents;
	bool HasRings;
	bool InAbandonedSystem;
	bool InEmptySystem;
	bool InGasGiantSystem;
	bool InPirateSystem;
	bool Prime;

	friend bool operator==(const GcPlanetGenerationInputData& lhs, const GcPlanetGenerationInputData& rhs) 
	{
		return lhs.CommonSubstance == rhs.CommonSubstance &&
		lhs.RareSubstance == rhs.RareSubstance &&
		lhs.Seed == rhs.Seed &&
		lhs.Biome == rhs.Biome &&
		lhs.BiomeSubType == rhs.BiomeSubType &&
		lhs.Class == rhs.Class &&
		lhs.PlanetIndex == rhs.PlanetIndex &&
		lhs.PlanetSize == rhs.PlanetSize &&
		lhs.RealityIndex == rhs.RealityIndex &&
		lhs.Star == rhs.Star &&
		lhs.ForceContinents == rhs.ForceContinents &&
		lhs.HasRings == rhs.HasRings &&
		lhs.InAbandonedSystem == rhs.InAbandonedSystem &&
		lhs.InEmptySystem == rhs.InEmptySystem &&
		lhs.InGasGiantSystem == rhs.InGasGiantSystem &&
		lhs.InPirateSystem == rhs.InPirateSystem &&
		lhs.Prime == rhs.Prime;
	}
};

//Dependency: NMSString0x10
struct GcRewardScan
{
	NMS::NMSString0x10 ScanDataId;

	friend bool operator==(const GcRewardScan& lhs, const GcRewardScan& rhs) 
	{
		return lhs.ScanDataId == rhs.ScanDataId;
	}
};

//Dependency: GcMissionFaction
struct GcRewardFactionStanding
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcMissionFaction Faction;
	bool SetToMinBeforeAdd;

	friend bool operator==(const GcRewardFactionStanding& lhs, const GcRewardFactionStanding& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Faction == rhs.Faction &&
		lhs.SetToMinBeforeAdd == rhs.SetToMinBeforeAdd;
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x40
struct GcTradingCategoryData
{
	NMS_Toolkit::TkTextureResource Icon;
	float ProductMultiplierChangePer100;
	float SubstanceMultiplierChangePer100;
	NMS::NMSString0x40 Name;

	friend bool operator==(const GcTradingCategoryData& lhs, const GcTradingCategoryData& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.ProductMultiplierChangePer100 == rhs.ProductMultiplierChangePer100 &&
		lhs.SubstanceMultiplierChangePer100 == rhs.SubstanceMultiplierChangePer100 &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: GcTradeCategory
//Dependency: TkTextureResource
struct GcTradingClassData
{
	NMS_Toolkit::TkTextureResource Icon;
	float MaxBuyingPriceMultiplier;
	float MaxBuyingPriceMultiplierSurge;
	float MaxSellingPriceMultiplier;
	float MinBuyingPriceMultiplier;
	float MinBuyingPriceMultiplierSurge;
	float MinSellingPriceMultiplier;
	NMS_GameComponents::GcTradeCategory Needs;
	NMS_GameComponents::GcTradeCategory Sells;

	friend bool operator==(const GcTradingClassData& lhs, const GcTradingClassData& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.MaxBuyingPriceMultiplier == rhs.MaxBuyingPriceMultiplier &&
		lhs.MaxBuyingPriceMultiplierSurge == rhs.MaxBuyingPriceMultiplierSurge &&
		lhs.MaxSellingPriceMultiplier == rhs.MaxSellingPriceMultiplier &&
		lhs.MinBuyingPriceMultiplier == rhs.MinBuyingPriceMultiplier &&
		lhs.MinBuyingPriceMultiplierSurge == rhs.MinBuyingPriceMultiplierSurge &&
		lhs.MinSellingPriceMultiplier == rhs.MinSellingPriceMultiplier &&
		lhs.Needs == rhs.Needs &&
		lhs.Sells == rhs.Sells;
	}
};

//Dependency: GcTradingCategoryData
//Dependency: GcTradingClassData
struct GcTradingClassTable
{
	NMS_GameComponents::GcTradingCategoryData CategoryData[9];
	NMS_GameComponents::GcTradingClassData TradingClassesData[7];
	float MaxTradingMultiplier;
	float MinTradingMultiplier;

	friend bool operator==(const GcTradingClassTable& lhs, const GcTradingClassTable& rhs) 
	{
		return std::equal(std::begin(lhs.CategoryData), std::end(lhs.CategoryData), std::begin(rhs.CategoryData)) &&
		std::equal(std::begin(lhs.TradingClassesData), std::end(lhs.TradingClassesData), std::begin(rhs.TradingClassesData)) &&
		lhs.MaxTradingMultiplier == rhs.MaxTradingMultiplier &&
		lhs.MinTradingMultiplier == rhs.MinTradingMultiplier;
	}
};

//Dependency: TkPaletteTexture
struct GcPlanetTerrainColour
{
	NMS_Toolkit::TkPaletteTexture Palette;
	int32_t Index;

	friend bool operator==(const GcPlanetTerrainColour& lhs, const GcPlanetTerrainColour& rhs) 
	{
		return lhs.Palette == rhs.Palette &&
		lhs.Index == rhs.Index;
	}
};

struct GcShipWeapons
{
	enum class ShipWeaponEnum : uint32_t
	{
		Laser = 0,
		Projectile = 1,
		Shotgun = 2,
		Minigun = 3,
		Plasma = 4,
		Missile = 5,
		Rocket = 6,
	};

	NMS_GameComponents::GcShipWeapons::ShipWeaponEnum ShipWeapon;

	friend bool operator==(const GcShipWeapons& lhs, const GcShipWeapons& rhs) 
	{
		return lhs.ShipWeapon == rhs.ShipWeapon;
	}
};

//Dependency: GcRewardTableCategory
//Dependency: NMSString0x10
struct GcRewardTableEntry
{
	NMS_GameComponents::GcRewardTableCategory Rarities[3];
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcRewardTableEntry& lhs, const GcRewardTableEntry& rhs) 
	{
		return std::equal(std::begin(lhs.Rarities), std::end(lhs.Rarities), std::begin(rhs.Rarities)) &&
		lhs.Id == rhs.Id;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNavMeshAreaType
//Dependency: NMSString0x10
struct TkNavMeshAreaGroup
{
	std::vector<NMS_Toolkit::TkNavMeshAreaType> Areas;
	NMS::NMSString0x10 GroupId;

	friend bool operator==(const TkNavMeshAreaGroup& lhs, const TkNavMeshAreaGroup& rhs) 
	{
		return lhs.Areas == rhs.Areas &&
		lhs.GroupId == rhs.GroupId;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPlanetWeatherColourIndex
{
	enum class WeatherColourSetEnum : uint32_t
	{
		Common = 0,
		Rare = 1,
	};

	int32_t Index;
	NMS_GameComponents::GcPlanetWeatherColourIndex::WeatherColourSetEnum WeatherColourSet;

	friend bool operator==(const GcPlanetWeatherColourIndex& lhs, const GcPlanetWeatherColourIndex& rhs) 
	{
		return lhs.Index == rhs.Index &&
		lhs.WeatherColourSet == rhs.WeatherColourSet;
	}
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardProduct
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory ItemCategory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool AllowedProductTypes[11];

	friend bool operator==(const GcRewardProduct& lhs, const GcRewardProduct& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ItemCategory == rhs.ItemCategory &&
		lhs.ItemLevel == rhs.ItemLevel &&
		lhs.ItemRarity == rhs.ItemRarity &&
		std::equal(std::begin(lhs.AllowedProductTypes), std::end(lhs.AllowedProductTypes), std::begin(rhs.AllowedProductTypes));
	}
};

//Dependency: GcPlanetaryMappingValues
struct GcPlanetaryMappingTable
{
	NMS_GameComponents::GcPlanetaryMappingValues MappingInfo[5];

	friend bool operator==(const GcPlanetaryMappingTable& lhs, const GcPlanetaryMappingTable& rhs) 
	{
		return std::equal(std::begin(lhs.MappingInfo), std::end(lhs.MappingInfo), std::begin(rhs.MappingInfo));
	}
};

//Dependency: NMSString0x10
struct GcPlayAnimAction
{
	NMS::NMSString0x10 Anim;

	friend bool operator==(const GcPlayAnimAction& lhs, const GcPlayAnimAction& rhs) 
	{
		return lhs.Anim == rhs.Anim;
	}
};

//Dependency: NMSString0x80
struct GcPlayAudioAction
{
	float OcclusionRadius;
	NMS::NMSString0x80 Sound;
	bool UseOcclusion;

	friend bool operator==(const GcPlayAudioAction& lhs, const GcPlayAudioAction& rhs) 
	{
		return lhs.OcclusionRadius == rhs.OcclusionRadius &&
		lhs.Sound == rhs.Sound &&
		lhs.UseOcclusion == rhs.UseOcclusion;
	}
};

struct GcRewardBuildersKnown
{

	friend bool operator==(const GcRewardBuildersKnown& lhs, const GcRewardBuildersKnown& rhs) 
	{
		return true;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcPlayerControlModeEntry
{
	NMS_Toolkit::TkModelResource ControlModeResource;
	NMS::NMSString0x10 Id;

	friend bool operator==(const GcPlayerControlModeEntry& lhs, const GcPlayerControlModeEntry& rhs) 
	{
		return lhs.ControlModeResource == rhs.ControlModeResource &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: GcCharacterJetpackEffect
//Dependency: NMSString0x10
//Dependency: GcPlayerControlModeEntry
struct GcPlayerCharacterComponentData
{
	NMS::NMSString0x10 IntialPlayerControlMode;
	std::vector<NMS_GameComponents::GcCharacterJetpackEffect> JetpackEffects;
	std::vector<NMS_GameComponents::GcPlayerControlModeEntry> PlayerControlModes;

	friend bool operator==(const GcPlayerCharacterComponentData& lhs, const GcPlayerCharacterComponentData& rhs) 
	{
		return lhs.IntialPlayerControlMode == rhs.IntialPlayerControlMode &&
		lhs.JetpackEffects == rhs.JetpackEffects &&
		lhs.PlayerControlModes == rhs.PlayerControlModes;
	}
};

//Dependency: GcInputActions
//Dependency: GcCharacterControlInputValidity
struct GcPlayerControlInputRemap
{
	enum class InputRemapModeEnum : uint32_t
	{
		ReplaceOriginalBinding = 0,
		AdditionalBinding = 1,
	};

	NMS_GameComponents::GcInputActions Action;
	NMS_GameComponents::GcInputActions CanBeTriggeredBy;
	NMS_GameComponents::GcPlayerControlInputRemap::InputRemapModeEnum InputRemapMode;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;

	friend bool operator==(const GcPlayerControlInputRemap& lhs, const GcPlayerControlInputRemap& rhs) 
	{
		return lhs.Action == rhs.Action &&
		lhs.CanBeTriggeredBy == rhs.CanBeTriggeredBy &&
		lhs.InputRemapMode == rhs.InputRemapMode &&
		lhs.Validity == rhs.Validity;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationNotifyAddEffectGroundInteraction
{
	float FadeOutHeightBegin;
	float FadeOutHeightEnd;
	float TravelSpeed;
	bool ClampToGround;
	bool UseGroundNormal;
	bool UseWaterSurface;

	friend bool operator==(const TkAnimationNotifyAddEffectGroundInteraction& lhs, const TkAnimationNotifyAddEffectGroundInteraction& rhs) 
	{
		return lhs.FadeOutHeightBegin == rhs.FadeOutHeightBegin &&
		lhs.FadeOutHeightEnd == rhs.FadeOutHeightEnd &&
		lhs.TravelSpeed == rhs.TravelSpeed &&
		lhs.ClampToGround == rhs.ClampToGround &&
		lhs.UseGroundNormal == rhs.UseGroundNormal &&
		lhs.UseWaterSurface == rhs.UseWaterSurface;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBreakTechByStatData
//Dependency: GcAudioWwiseEvents
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerDamageData
{
	enum class PlayerDamageTypeEnum : uint32_t
	{
		Normal = 0,
		Toxic = 1,
		Radioactive = 2,
		Freeze = 3,
		Scorch = 4,
	};

	NMS::NMSString0x20A CriticalHitMessage;
	NMS::NMSString0x20A DeathMessage;
	NMS::NMSString0x20A HitChatMessage;
	NMS::NMSString0x20A HitMessage;
	NMS_Toolkit::TkTextureResource HitIcon;
	NMS::NMSString0x10 CameraShakeNoShield;
	NMS::NMSString0x10 CameraShakeShield;
	std::vector<NMS_GameComponents::GcBreakTechByStatData> DamageTechWithStat;
	NMS::NMSString0x10 DeathStat;
	NMS::NMSString0x10 Id;
	float CameraTurn;
	NMS_GameComponents::GcAudioWwiseEvents CriticalHitMessageAudio;
	float Damage;
	int32_t HazardDrain;
	NMS_GameComponents::GcAudioWwiseEvents HitMessageAudio;
	NMS_GameComponents::GcPlayerDamageData::PlayerDamageTypeEnum PlayerDamageType;
	float PushForce;
	float TechDamageChance;
	bool AllowDeathInInteraction;
	bool ForceDamageInInteraction;
	bool ShowTrackIcon;

	friend bool operator==(const GcPlayerDamageData& lhs, const GcPlayerDamageData& rhs) 
	{
		return lhs.CriticalHitMessage == rhs.CriticalHitMessage &&
		lhs.DeathMessage == rhs.DeathMessage &&
		lhs.HitChatMessage == rhs.HitChatMessage &&
		lhs.HitMessage == rhs.HitMessage &&
		lhs.HitIcon == rhs.HitIcon &&
		lhs.CameraShakeNoShield == rhs.CameraShakeNoShield &&
		lhs.CameraShakeShield == rhs.CameraShakeShield &&
		lhs.DamageTechWithStat == rhs.DamageTechWithStat &&
		lhs.DeathStat == rhs.DeathStat &&
		lhs.Id == rhs.Id &&
		lhs.CameraTurn == rhs.CameraTurn &&
		lhs.CriticalHitMessageAudio == rhs.CriticalHitMessageAudio &&
		lhs.Damage == rhs.Damage &&
		lhs.HazardDrain == rhs.HazardDrain &&
		lhs.HitMessageAudio == rhs.HitMessageAudio &&
		lhs.PlayerDamageType == rhs.PlayerDamageType &&
		lhs.PushForce == rhs.PushForce &&
		lhs.TechDamageChance == rhs.TechDamageChance &&
		lhs.AllowDeathInInteraction == rhs.AllowDeathInInteraction &&
		lhs.ForceDamageInInteraction == rhs.ForceDamageInInteraction &&
		lhs.ShowTrackIcon == rhs.ShowTrackIcon;
	}
};

//Dependency: GcPlayerDamageData
struct GcPlayerDamageTable
{
	std::vector<NMS_GameComponents::GcPlayerDamageData> DamageTable;

	friend bool operator==(const GcPlayerDamageTable& lhs, const GcPlayerDamageTable& rhs) 
	{
		return lhs.DamageTable == rhs.DamageTable;
	}
};

struct GcPlayerEffectsComponentData
{
	float VehicleInOutDissolveDelay;
	float VehicleInOutEffectDelay;
	float VehicleInOutTime;

	friend bool operator==(const GcPlayerEffectsComponentData& lhs, const GcPlayerEffectsComponentData& rhs) 
	{
		return lhs.VehicleInOutDissolveDelay == rhs.VehicleInOutDissolveDelay &&
		lhs.VehicleInOutEffectDelay == rhs.VehicleInOutEffectDelay &&
		lhs.VehicleInOutTime == rhs.VehicleInOutTime;
	}
};

//Dependency: GcScreenFilterData
struct GcScreenFilterTable
{
	NMS_GameComponents::GcScreenFilterData Filters[84];

	friend bool operator==(const GcScreenFilterTable& lhs, const GcScreenFilterTable& rhs) 
	{
		return std::equal(std::begin(lhs.Filters), std::end(lhs.Filters), std::begin(rhs.Filters));
	}
};

//Dependency: Vector2f
struct GcThirdPersonAnimParams
{
	NMS::Vector2f AimDirection;
	NMS::Vector2f MoveForce;
	NMS::Vector2f Velocity;
	NMS::Vector2f VelocityXY;
	float AimPitch;
	float AimYaw;
	float DistanceFromGround;
	float Foot;
	float HitFB;
	float HitLR;
	float LeanFB;
	float LeanLR;
	float MoveForceApplied;
	float SlopeAngle;
	float Speed;
	float TimeSinceJetpackEngaged;
	float TurnAngle;
	float Uphill;
	float VelocityY;
	float VelocityZ;

	friend bool operator==(const GcThirdPersonAnimParams& lhs, const GcThirdPersonAnimParams& rhs) 
	{
		return lhs.AimDirection == rhs.AimDirection &&
		lhs.MoveForce == rhs.MoveForce &&
		lhs.Velocity == rhs.Velocity &&
		lhs.VelocityXY == rhs.VelocityXY &&
		lhs.AimPitch == rhs.AimPitch &&
		lhs.AimYaw == rhs.AimYaw &&
		lhs.DistanceFromGround == rhs.DistanceFromGround &&
		lhs.Foot == rhs.Foot &&
		lhs.HitFB == rhs.HitFB &&
		lhs.HitLR == rhs.HitLR &&
		lhs.LeanFB == rhs.LeanFB &&
		lhs.LeanLR == rhs.LeanLR &&
		lhs.MoveForceApplied == rhs.MoveForceApplied &&
		lhs.SlopeAngle == rhs.SlopeAngle &&
		lhs.Speed == rhs.Speed &&
		lhs.TimeSinceJetpackEngaged == rhs.TimeSinceJetpackEngaged &&
		lhs.TurnAngle == rhs.TurnAngle &&
		lhs.Uphill == rhs.Uphill &&
		lhs.VelocityY == rhs.VelocityY &&
		lhs.VelocityZ == rhs.VelocityZ;
	}
};

//Dependency: GcIKConstraint
//Dependency: GcCharacterLookAtData
//Dependency: GcCreatureIkData
//Dependency: NMSString0x20
struct GcPlayerFullBodyIKComponentData
{
	enum class PlayerHeadUpAxisEnum : uint32_t
	{
		X = 0,
		XNeg = 1,
		Y = 2,
		YNeg = 3,
		Z = 4,
		ZNeg = 5,
	};

	NMS_GameComponents::GcIKConstraint COGConstraint;
	NMS_GameComponents::GcIKConstraint SitConstraint;
	std::vector<NMS::NMSString0x20> CameraNeckBones;
	std::vector<NMS::NMSString0x20> HandBones;
	std::vector<NMS_GameComponents::GcIKConstraint> HeadConstraints;
	std::vector<NMS_GameComponents::GcCreatureIkData> JointDataDeprecated;
	std::vector<NMS_GameComponents::GcIKConstraint> LegConstraints;
	std::vector<NMS_GameComponents::GcIKConstraint> RestrictConstraints;
	NMS_GameComponents::GcCharacterLookAtData LookAtSettings;
	NMS_GameComponents::GcPlayerFullBodyIKComponentData::PlayerHeadUpAxisEnum PlayerHeadUpAxis;
	bool Enabled;
	bool EnableFootRaycasts;
	bool UseFootGlue;

	friend bool operator==(const GcPlayerFullBodyIKComponentData& lhs, const GcPlayerFullBodyIKComponentData& rhs) 
	{
		return lhs.COGConstraint == rhs.COGConstraint &&
		lhs.SitConstraint == rhs.SitConstraint &&
		lhs.CameraNeckBones == rhs.CameraNeckBones &&
		lhs.HandBones == rhs.HandBones &&
		lhs.HeadConstraints == rhs.HeadConstraints &&
		lhs.JointDataDeprecated == rhs.JointDataDeprecated &&
		lhs.LegConstraints == rhs.LegConstraints &&
		lhs.RestrictConstraints == rhs.RestrictConstraints &&
		lhs.LookAtSettings == rhs.LookAtSettings &&
		lhs.PlayerHeadUpAxis == rhs.PlayerHeadUpAxis &&
		lhs.Enabled == rhs.Enabled &&
		lhs.EnableFootRaycasts == rhs.EnableFootRaycasts &&
		lhs.UseFootGlue == rhs.UseFootGlue;
	}
};

//Dependency: GcPlayerHazardData
struct GcPlayerHazardTable
{
	NMS_GameComponents::GcPlayerHazardData Table[7];

	friend bool operator==(const GcPlayerHazardTable& lhs, const GcPlayerHazardTable& rhs) 
	{
		return std::equal(std::begin(lhs.Table), std::end(lhs.Table), std::begin(rhs.Table));
	}
};

//Dependency: GcHazardValues
//Dependency: VariableSizeString
struct GcWeatherTable
{
	NMS::VariableSizeString Table[17];
	NMS_GameComponents::GcHazardValues DefaultRadiation[6];
	NMS_GameComponents::GcHazardValues DefaultSpookLevel[6];
	NMS_GameComponents::GcHazardValues DefaultTemperature[6];
	NMS_GameComponents::GcHazardValues DefaultToxicity[6];

	friend bool operator==(const GcWeatherTable& lhs, const GcWeatherTable& rhs) 
	{
		return std::equal(std::begin(lhs.Table), std::end(lhs.Table), std::begin(rhs.Table)) &&
		std::equal(std::begin(lhs.DefaultRadiation), std::end(lhs.DefaultRadiation), std::begin(rhs.DefaultRadiation)) &&
		std::equal(std::begin(lhs.DefaultSpookLevel), std::end(lhs.DefaultSpookLevel), std::begin(rhs.DefaultSpookLevel)) &&
		std::equal(std::begin(lhs.DefaultTemperature), std::end(lhs.DefaultTemperature), std::begin(rhs.DefaultTemperature)) &&
		std::equal(std::begin(lhs.DefaultToxicity), std::end(lhs.DefaultToxicity), std::begin(rhs.DefaultToxicity));
	}
};

struct GcWarpAction
{
	enum class WarpTypeEnum : uint32_t
	{
		BlackHole = 0,
		SpacePOI = 1,
	};

	NMS_GameComponents::GcWarpAction::WarpTypeEnum WarpType;

	friend bool operator==(const GcWarpAction& lhs, const GcWarpAction& rhs) 
	{
		return lhs.WarpType == rhs.WarpType;
	}
};

struct GcPlayerSpaceshipAim
{
	float AimAngleMin;
	float AimAngleRange;
	float AimDistanceAngleMin;
	float AimDistanceAngleRange;
	float AimDistanceMin;
	float AimDistanceRange;

	friend bool operator==(const GcPlayerSpaceshipAim& lhs, const GcPlayerSpaceshipAim& rhs) 
	{
		return lhs.AimAngleMin == rhs.AimAngleMin &&
		lhs.AimAngleRange == rhs.AimAngleRange &&
		lhs.AimDistanceAngleMin == rhs.AimDistanceAngleMin &&
		lhs.AimDistanceAngleRange == rhs.AimDistanceAngleRange &&
		lhs.AimDistanceMin == rhs.AimDistanceMin &&
		lhs.AimDistanceRange == rhs.AimDistanceRange;
	}
};

struct GcPlayerSpaceshipClassBonuses
{
	float BoostingTurnDampMax;
	float BoostingTurnDampMin;
	float BoostMaxSpeedMax;
	float BoostMaxSpeedMin;
	float DirectionBrakeMax;
	float DirectionBrakeMin;
	float MaxSpeedMax;
	float MaxSpeedMin;
	float ThrustForceMax;
	float ThrustForceMin;
	float TurnStrengthMax;
	float TurnStrengthMin;

	friend bool operator==(const GcPlayerSpaceshipClassBonuses& lhs, const GcPlayerSpaceshipClassBonuses& rhs) 
	{
		return lhs.BoostingTurnDampMax == rhs.BoostingTurnDampMax &&
		lhs.BoostingTurnDampMin == rhs.BoostingTurnDampMin &&
		lhs.BoostMaxSpeedMax == rhs.BoostMaxSpeedMax &&
		lhs.BoostMaxSpeedMin == rhs.BoostMaxSpeedMin &&
		lhs.DirectionBrakeMax == rhs.DirectionBrakeMax &&
		lhs.DirectionBrakeMin == rhs.DirectionBrakeMin &&
		lhs.MaxSpeedMax == rhs.MaxSpeedMax &&
		lhs.MaxSpeedMin == rhs.MaxSpeedMin &&
		lhs.ThrustForceMax == rhs.ThrustForceMax &&
		lhs.ThrustForceMin == rhs.ThrustForceMin &&
		lhs.TurnStrengthMax == rhs.TurnStrengthMax &&
		lhs.TurnStrengthMin == rhs.TurnStrengthMin;
	}
};

//Dependency: GcAISpaceshipModelData
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcPlayerSquadronConfig
{
	NMS::Vector3f CombatFormationOffset;
	NMS::Vector3f CombatFormationOffsetThirdPerson;
	NMS::Vector3f FormationOffset;
	NMS::Vector3f FormationOffsetThirdPerson;
	NMS::NMSString0x10 PilotRankAttackDefinitions[4];
	std::vector<NMS::VariableSizeString> RandomPilotNPCResources;
	std::vector<NMS_GameComponents::GcAISpaceshipModelData> RandomSpaceshipResources;
	NMS::Vector2f PilotRankTraitRanges[4];
	float BreakFormationMaxForce;
	float BreakFormationMaxTurnAngle;
	float BreakFormationMinTurnAngle;
	float BreakFormationTime;
	float CombatFormationOffsetCylinderHeight;
	float CombatFormationOffsetCylinderHeightThirdPerson;
	float CombatFormationOffsetCylinderLength;
	float CombatFormationOffsetCylinderLengthThirdPerson;
	float CombatFormationOffsetCylinderWidth;
	float CombatFormationOffsetCylinderWidthThirdPerson;
	float FormationOffsetCylinderHeight;
	float FormationOffsetCylinderHeightThirdPerson;
	float FormationOffsetCylinderLength;
	float FormationOffsetCylinderLengthThirdPerson;
	float FormationOffsetCylinderWidth;
	float FormationOffsetCylinderWidthThirdPerson;
	float FormationOffsetRotationMaxSpeed;
	float FormationOffsetRotationPeriod;
	float FormationOffsetZOffsetVarianceMax;
	float FormationOffsetZOffsetVarianceMaxSpeedScale;
	float FormationOffsetZOffsetVarianceMin;
	float FormationOffsetZOffsetVarianceMinSpeedScale;
	float FormationOffsetZOffsetVariancePeriod;
	float JoinFormationArrivalTolerance;
	float JoinFormationBoostAlignStrength;
	float JoinFormationBoostMaxDist;
	float JoinFormationBoostMaxSpeed;
	float JoinFormationBoostMinDist;
	float JoinFormationBrakeAlignStrength;
	float JoinFormationBrakeDist;
	float JoinFormationMaxForce;
	float JoinFormationMaxSpeedBrake;
	float JoinFormationMinSpeed;
	float JoinFormationOffset;
	float LeavingForceScaleDistMax;
	float LeavingForceScaleDistMin;
	float LeavingFromPlanetOrbitMaxSpeed;
	float LeavingFromPlanetOrbitMinIncline;
	float LeavingFromPlanetOrbitWarpDist;
	float LeavingFromSpaceAngleFromFwdMax;
	float LeavingFromSpaceAngleFromFwdMin;
	float LeavingFromSpaceWarpDist;
	float LeavingMaxForceMultiplier;
	float MaintainFormationAlignMaxDist;
	float MaintainFormationAlignMaxSpeed;
	float MaintainFormationAlignMinDist;
	float MaintainFormationAlignMinSpeed;
	float MaintainFormationInCombatMaxTime;
	float MaintainFormationInCombatMinTime;
	float MaintainFormationLockAlignStrength;
	float MaintainFormationLockRollAlignStrength;
	float MaintainFormationLockStrength;
	float MaintainFormationLockStrengthBoosting;
	float MaintainFormationLockStrengthCombat;
	float MaintainFormationMaxForce;
	float MaintainFormationPostBoostSmoothTime;
	float MaintainFormationSharpTurnMinSpeed;
	float MaintainFormationSharpTurnMinSpeedForce;
	float MaintainFormationStartSmoothTime;
	float MaintainFormationStrengthVariance;
	int32_t MaxShipsInFormationDuringCombat;
	int32_t MinShipsInFormationDuringCombat;
	float MinSpeedForSummonInMoveDir;
	float MinTimeBetweenFormationBreaks;
	float OutOfFormationMaxTime;
	float OutOfFormationMinTime;
	float SummonArriveTime;
	float SummonArriveTimeIntervalMax;
	float SummonArriveTimeIntervalMin;
	float SummonInFormationFwdOffset;
	float SummonLimitTurningTime;
	float SummonPlanetDistance;
	float SummonPlanetPitchMax;
	float SummonPlanetPitchMin;
	float SummonPlanetYawMax;
	float SummonPlanetYawMin;
	float SummonSpaceSpawnAngleMax;
	float SummonSpaceSpawnAngleMin;
	float SummonSpaceSpawnRangeMax;
	float SummonSpaceSpawnRangeMin;
	float SummonStartSpeed;
	NMS::NMSString0x20 SquadName;
	bool SummonInFormation;

	friend bool operator==(const GcPlayerSquadronConfig& lhs, const GcPlayerSquadronConfig& rhs) 
	{
		return lhs.CombatFormationOffset == rhs.CombatFormationOffset &&
		lhs.CombatFormationOffsetThirdPerson == rhs.CombatFormationOffsetThirdPerson &&
		lhs.FormationOffset == rhs.FormationOffset &&
		lhs.FormationOffsetThirdPerson == rhs.FormationOffsetThirdPerson &&
		std::equal(std::begin(lhs.PilotRankAttackDefinitions), std::end(lhs.PilotRankAttackDefinitions), std::begin(rhs.PilotRankAttackDefinitions)) &&
		lhs.RandomPilotNPCResources == rhs.RandomPilotNPCResources &&
		lhs.RandomSpaceshipResources == rhs.RandomSpaceshipResources &&
		std::equal(std::begin(lhs.PilotRankTraitRanges), std::end(lhs.PilotRankTraitRanges), std::begin(rhs.PilotRankTraitRanges)) &&
		lhs.BreakFormationMaxForce == rhs.BreakFormationMaxForce &&
		lhs.BreakFormationMaxTurnAngle == rhs.BreakFormationMaxTurnAngle &&
		lhs.BreakFormationMinTurnAngle == rhs.BreakFormationMinTurnAngle &&
		lhs.BreakFormationTime == rhs.BreakFormationTime &&
		lhs.CombatFormationOffsetCylinderHeight == rhs.CombatFormationOffsetCylinderHeight &&
		lhs.CombatFormationOffsetCylinderHeightThirdPerson == rhs.CombatFormationOffsetCylinderHeightThirdPerson &&
		lhs.CombatFormationOffsetCylinderLength == rhs.CombatFormationOffsetCylinderLength &&
		lhs.CombatFormationOffsetCylinderLengthThirdPerson == rhs.CombatFormationOffsetCylinderLengthThirdPerson &&
		lhs.CombatFormationOffsetCylinderWidth == rhs.CombatFormationOffsetCylinderWidth &&
		lhs.CombatFormationOffsetCylinderWidthThirdPerson == rhs.CombatFormationOffsetCylinderWidthThirdPerson &&
		lhs.FormationOffsetCylinderHeight == rhs.FormationOffsetCylinderHeight &&
		lhs.FormationOffsetCylinderHeightThirdPerson == rhs.FormationOffsetCylinderHeightThirdPerson &&
		lhs.FormationOffsetCylinderLength == rhs.FormationOffsetCylinderLength &&
		lhs.FormationOffsetCylinderLengthThirdPerson == rhs.FormationOffsetCylinderLengthThirdPerson &&
		lhs.FormationOffsetCylinderWidth == rhs.FormationOffsetCylinderWidth &&
		lhs.FormationOffsetCylinderWidthThirdPerson == rhs.FormationOffsetCylinderWidthThirdPerson &&
		lhs.FormationOffsetRotationMaxSpeed == rhs.FormationOffsetRotationMaxSpeed &&
		lhs.FormationOffsetRotationPeriod == rhs.FormationOffsetRotationPeriod &&
		lhs.FormationOffsetZOffsetVarianceMax == rhs.FormationOffsetZOffsetVarianceMax &&
		lhs.FormationOffsetZOffsetVarianceMaxSpeedScale == rhs.FormationOffsetZOffsetVarianceMaxSpeedScale &&
		lhs.FormationOffsetZOffsetVarianceMin == rhs.FormationOffsetZOffsetVarianceMin &&
		lhs.FormationOffsetZOffsetVarianceMinSpeedScale == rhs.FormationOffsetZOffsetVarianceMinSpeedScale &&
		lhs.FormationOffsetZOffsetVariancePeriod == rhs.FormationOffsetZOffsetVariancePeriod &&
		lhs.JoinFormationArrivalTolerance == rhs.JoinFormationArrivalTolerance &&
		lhs.JoinFormationBoostAlignStrength == rhs.JoinFormationBoostAlignStrength &&
		lhs.JoinFormationBoostMaxDist == rhs.JoinFormationBoostMaxDist &&
		lhs.JoinFormationBoostMaxSpeed == rhs.JoinFormationBoostMaxSpeed &&
		lhs.JoinFormationBoostMinDist == rhs.JoinFormationBoostMinDist &&
		lhs.JoinFormationBrakeAlignStrength == rhs.JoinFormationBrakeAlignStrength &&
		lhs.JoinFormationBrakeDist == rhs.JoinFormationBrakeDist &&
		lhs.JoinFormationMaxForce == rhs.JoinFormationMaxForce &&
		lhs.JoinFormationMaxSpeedBrake == rhs.JoinFormationMaxSpeedBrake &&
		lhs.JoinFormationMinSpeed == rhs.JoinFormationMinSpeed &&
		lhs.JoinFormationOffset == rhs.JoinFormationOffset &&
		lhs.LeavingForceScaleDistMax == rhs.LeavingForceScaleDistMax &&
		lhs.LeavingForceScaleDistMin == rhs.LeavingForceScaleDistMin &&
		lhs.LeavingFromPlanetOrbitMaxSpeed == rhs.LeavingFromPlanetOrbitMaxSpeed &&
		lhs.LeavingFromPlanetOrbitMinIncline == rhs.LeavingFromPlanetOrbitMinIncline &&
		lhs.LeavingFromPlanetOrbitWarpDist == rhs.LeavingFromPlanetOrbitWarpDist &&
		lhs.LeavingFromSpaceAngleFromFwdMax == rhs.LeavingFromSpaceAngleFromFwdMax &&
		lhs.LeavingFromSpaceAngleFromFwdMin == rhs.LeavingFromSpaceAngleFromFwdMin &&
		lhs.LeavingFromSpaceWarpDist == rhs.LeavingFromSpaceWarpDist &&
		lhs.LeavingMaxForceMultiplier == rhs.LeavingMaxForceMultiplier &&
		lhs.MaintainFormationAlignMaxDist == rhs.MaintainFormationAlignMaxDist &&
		lhs.MaintainFormationAlignMaxSpeed == rhs.MaintainFormationAlignMaxSpeed &&
		lhs.MaintainFormationAlignMinDist == rhs.MaintainFormationAlignMinDist &&
		lhs.MaintainFormationAlignMinSpeed == rhs.MaintainFormationAlignMinSpeed &&
		lhs.MaintainFormationInCombatMaxTime == rhs.MaintainFormationInCombatMaxTime &&
		lhs.MaintainFormationInCombatMinTime == rhs.MaintainFormationInCombatMinTime &&
		lhs.MaintainFormationLockAlignStrength == rhs.MaintainFormationLockAlignStrength &&
		lhs.MaintainFormationLockRollAlignStrength == rhs.MaintainFormationLockRollAlignStrength &&
		lhs.MaintainFormationLockStrength == rhs.MaintainFormationLockStrength &&
		lhs.MaintainFormationLockStrengthBoosting == rhs.MaintainFormationLockStrengthBoosting &&
		lhs.MaintainFormationLockStrengthCombat == rhs.MaintainFormationLockStrengthCombat &&
		lhs.MaintainFormationMaxForce == rhs.MaintainFormationMaxForce &&
		lhs.MaintainFormationPostBoostSmoothTime == rhs.MaintainFormationPostBoostSmoothTime &&
		lhs.MaintainFormationSharpTurnMinSpeed == rhs.MaintainFormationSharpTurnMinSpeed &&
		lhs.MaintainFormationSharpTurnMinSpeedForce == rhs.MaintainFormationSharpTurnMinSpeedForce &&
		lhs.MaintainFormationStartSmoothTime == rhs.MaintainFormationStartSmoothTime &&
		lhs.MaintainFormationStrengthVariance == rhs.MaintainFormationStrengthVariance &&
		lhs.MaxShipsInFormationDuringCombat == rhs.MaxShipsInFormationDuringCombat &&
		lhs.MinShipsInFormationDuringCombat == rhs.MinShipsInFormationDuringCombat &&
		lhs.MinSpeedForSummonInMoveDir == rhs.MinSpeedForSummonInMoveDir &&
		lhs.MinTimeBetweenFormationBreaks == rhs.MinTimeBetweenFormationBreaks &&
		lhs.OutOfFormationMaxTime == rhs.OutOfFormationMaxTime &&
		lhs.OutOfFormationMinTime == rhs.OutOfFormationMinTime &&
		lhs.SummonArriveTime == rhs.SummonArriveTime &&
		lhs.SummonArriveTimeIntervalMax == rhs.SummonArriveTimeIntervalMax &&
		lhs.SummonArriveTimeIntervalMin == rhs.SummonArriveTimeIntervalMin &&
		lhs.SummonInFormationFwdOffset == rhs.SummonInFormationFwdOffset &&
		lhs.SummonLimitTurningTime == rhs.SummonLimitTurningTime &&
		lhs.SummonPlanetDistance == rhs.SummonPlanetDistance &&
		lhs.SummonPlanetPitchMax == rhs.SummonPlanetPitchMax &&
		lhs.SummonPlanetPitchMin == rhs.SummonPlanetPitchMin &&
		lhs.SummonPlanetYawMax == rhs.SummonPlanetYawMax &&
		lhs.SummonPlanetYawMin == rhs.SummonPlanetYawMin &&
		lhs.SummonSpaceSpawnAngleMax == rhs.SummonSpaceSpawnAngleMax &&
		lhs.SummonSpaceSpawnAngleMin == rhs.SummonSpaceSpawnAngleMin &&
		lhs.SummonSpaceSpawnRangeMax == rhs.SummonSpaceSpawnRangeMax &&
		lhs.SummonSpaceSpawnRangeMin == rhs.SummonSpaceSpawnRangeMin &&
		lhs.SummonStartSpeed == rhs.SummonStartSpeed &&
		lhs.SquadName == rhs.SquadName &&
		lhs.SummonInFormation == rhs.SummonInFormation;
	}
};

struct GcPlayerSurvivalBarType
{
	enum class SurvivalBarEnum : uint32_t
	{
		Health = 0,
		Hazard = 1,
		Energy = 2,
	};

	NMS_GameComponents::GcPlayerSurvivalBarType::SurvivalBarEnum SurvivalBar;

	friend bool operator==(const GcPlayerSurvivalBarType& lhs, const GcPlayerSurvivalBarType& rhs) 
	{
		return lhs.SurvivalBar == rhs.SurvivalBar;
	}
};

//Dependency: GcPlayerTitle
struct GcPlayerTitleData
{
	std::vector<NMS_GameComponents::GcPlayerTitle> Titles;

	friend bool operator==(const GcPlayerTitleData& lhs, const GcPlayerTitleData& rhs) 
	{
		return lhs.Titles == rhs.Titles;
	}
};

//Dependency: GcWeightedFilename
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcPlayerHazardType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWeatherEffect
{
	enum class WeatherEffectSpawnTypeEnum : uint32_t
	{
		Single = 0,
		Cluster = 1,
		Patch = 2,
		ClusterPatch = 3,
	};

	enum class WeatherEffectBehaviourEnum : uint32_t
	{
		Static = 0,
		Wander = 1,
		ChasePlayer = 2,
	};

	enum class SpawnConditionsEnum : uint32_t
	{
		Anytime = 0,
		DuringStorm = 1,
		AtNight = 2,
		NotInStorm = 3,
		AtNightNotInStorm = 4,
	};

	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x10 BlockedByCluster;
	NMSTemplate EffectData;
	std::vector<NMS_GameComponents::GcWeightedFilename> Effects;
	NMS::NMSString0x10 ForcedOnByHazard;
	NMS::NMSString0x10 Id;
	NMS::VariableSizeString ImpactGift;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	float ChanceOfPlanetBeingExtreme;
	float ClusterMaxLifetime;
	float ClusterMinLifetime;
	float ClusterSpawnChance;
	float FadeoutStart;
	float ImpactGiftChance;
	int32_t MaxHazardsOfThisTypeActive;
	float MaxLifetime;
	float MaxSpawnDistance;
	float MaxSpawnScale;
	float MinLifetime;
	float MinSpawnDistance;
	float MinSpawnScale;
	float MoveSpeed;
	NMS_GameComponents::GcPlayerHazardType MultiplySpawnChanceByHazardLevel;
	float PatchMaxRadius;
	int32_t PatchMaxSpawns;
	float PatchMaxTimeSpawnOffset;
	float PatchMinRadius;
	int32_t PatchMinSpawns;
	float PatchScaling;
	int32_t SpawnAttemptsPerRegion;
	float SpawnChancePerSecondExtreme;
	float SpawnChancePerSecondPerAttempt;
	NMS_GameComponents::GcWeatherEffect::SpawnConditionsEnum SpawnConditions;
	float WanderMaxArcDeg;
	float WanderMaxRadius;
	float WanderMinArcDeg;
	float WanderMinRadius;
	NMS_GameComponents::GcWeatherEffect::WeatherEffectBehaviourEnum WeatherEffectBehaviour;
	NMS_GameComponents::GcWeatherEffect::WeatherEffectSpawnTypeEnum WeatherEffectSpawnType;
	bool ExclusivePrimaryHazard;
	bool FadeoutAudio;
	bool FadeoutVisuals;
	bool RandomRotationAroundUp;

	friend bool operator==(const GcWeatherEffect& lhs, const GcWeatherEffect& rhs) 
	{
		return lhs.OSDMessage == rhs.OSDMessage &&
		lhs.BlockedByCluster == rhs.BlockedByCluster &&
		lhs.EffectData == rhs.EffectData &&
		lhs.Effects == rhs.Effects &&
		lhs.ForcedOnByHazard == rhs.ForcedOnByHazard &&
		lhs.Id == rhs.Id &&
		lhs.ImpactGift == rhs.ImpactGift &&
		lhs.Audio == rhs.Audio &&
		lhs.ChanceOfPlanetBeingExtreme == rhs.ChanceOfPlanetBeingExtreme &&
		lhs.ClusterMaxLifetime == rhs.ClusterMaxLifetime &&
		lhs.ClusterMinLifetime == rhs.ClusterMinLifetime &&
		lhs.ClusterSpawnChance == rhs.ClusterSpawnChance &&
		lhs.FadeoutStart == rhs.FadeoutStart &&
		lhs.ImpactGiftChance == rhs.ImpactGiftChance &&
		lhs.MaxHazardsOfThisTypeActive == rhs.MaxHazardsOfThisTypeActive &&
		lhs.MaxLifetime == rhs.MaxLifetime &&
		lhs.MaxSpawnDistance == rhs.MaxSpawnDistance &&
		lhs.MaxSpawnScale == rhs.MaxSpawnScale &&
		lhs.MinLifetime == rhs.MinLifetime &&
		lhs.MinSpawnDistance == rhs.MinSpawnDistance &&
		lhs.MinSpawnScale == rhs.MinSpawnScale &&
		lhs.MoveSpeed == rhs.MoveSpeed &&
		lhs.MultiplySpawnChanceByHazardLevel == rhs.MultiplySpawnChanceByHazardLevel &&
		lhs.PatchMaxRadius == rhs.PatchMaxRadius &&
		lhs.PatchMaxSpawns == rhs.PatchMaxSpawns &&
		lhs.PatchMaxTimeSpawnOffset == rhs.PatchMaxTimeSpawnOffset &&
		lhs.PatchMinRadius == rhs.PatchMinRadius &&
		lhs.PatchMinSpawns == rhs.PatchMinSpawns &&
		lhs.PatchScaling == rhs.PatchScaling &&
		lhs.SpawnAttemptsPerRegion == rhs.SpawnAttemptsPerRegion &&
		lhs.SpawnChancePerSecondExtreme == rhs.SpawnChancePerSecondExtreme &&
		lhs.SpawnChancePerSecondPerAttempt == rhs.SpawnChancePerSecondPerAttempt &&
		lhs.SpawnConditions == rhs.SpawnConditions &&
		lhs.WanderMaxArcDeg == rhs.WanderMaxArcDeg &&
		lhs.WanderMaxRadius == rhs.WanderMaxRadius &&
		lhs.WanderMinArcDeg == rhs.WanderMinArcDeg &&
		lhs.WanderMinRadius == rhs.WanderMinRadius &&
		lhs.WeatherEffectBehaviour == rhs.WeatherEffectBehaviour &&
		lhs.WeatherEffectSpawnType == rhs.WeatherEffectSpawnType &&
		lhs.ExclusivePrimaryHazard == rhs.ExclusivePrimaryHazard &&
		lhs.FadeoutAudio == rhs.FadeoutAudio &&
		lhs.FadeoutVisuals == rhs.FadeoutVisuals &&
		lhs.RandomRotationAroundUp == rhs.RandomRotationAroundUp;
	}
};

struct GcPowerStateAction
{
	bool SetConnectionEnabled;
	bool SetRateEnabled;

	friend bool operator==(const GcPowerStateAction& lhs, const GcPowerStateAction& rhs) 
	{
		return lhs.SetConnectionEnabled == rhs.SetConnectionEnabled &&
		lhs.SetRateEnabled == rhs.SetRateEnabled;
	}
};

//Dependency: GcProductDescriptionOverride
struct GcProductDescriptionOverrideTable
{
	std::vector<NMS_GameComponents::GcProductDescriptionOverride> Table;

	friend bool operator==(const GcProductDescriptionOverrideTable& lhs, const GcProductDescriptionOverrideTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkEmitterFloatProperty
{
	enum class AuthoringEnum : uint32_t
	{
		FixedValue = 0,
		RandomRangeFloat = 1,
		Curves = 2,
	};

	NMSTemplate NextStage;
	NMS_Toolkit::TkEmitterFloatProperty::AuthoringEnum Authoring;
	float CurveBlendMidpoint;
	float CurveEndValue;
	float CurveMidValue;
	float CurveStartValue;
	float CurveVariation;
	float FixedValue;
	float MaxRandomValue;
	float MinRandomValue;
	NMS_Toolkit::TkCurveType Curve1Shape;
	NMS_Toolkit::TkCurveType Curve2Shape;

	friend bool operator==(const TkEmitterFloatProperty& lhs, const TkEmitterFloatProperty& rhs) 
	{
		return lhs.NextStage == rhs.NextStage &&
		lhs.Authoring == rhs.Authoring &&
		lhs.CurveBlendMidpoint == rhs.CurveBlendMidpoint &&
		lhs.CurveEndValue == rhs.CurveEndValue &&
		lhs.CurveMidValue == rhs.CurveMidValue &&
		lhs.CurveStartValue == rhs.CurveStartValue &&
		lhs.CurveVariation == rhs.CurveVariation &&
		lhs.FixedValue == rhs.FixedValue &&
		lhs.MaxRandomValue == rhs.MaxRandomValue &&
		lhs.MinRandomValue == rhs.MinRandomValue &&
		lhs.Curve1Shape == rhs.Curve1Shape &&
		lhs.Curve2Shape == rhs.Curve2Shape;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkModelResource
struct GcPulseEncounterSpawnAbandonedFreighter
{
	NMS_Toolkit::TkModelResource AbandonedFreighter;

	friend bool operator==(const GcPulseEncounterSpawnAbandonedFreighter& lhs, const GcPulseEncounterSpawnAbandonedFreighter& rhs) 
	{
		return lhs.AbandonedFreighter == rhs.AbandonedFreighter;
	}
};

//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnAlienFreighter
{
	NMS::NMSString0x20A HailingPuzzleID;

	friend bool operator==(const GcPulseEncounterSpawnAlienFreighter& lhs, const GcPulseEncounterSpawnAlienFreighter& rhs) 
	{
		return lhs.HailingPuzzleID == rhs.HailingPuzzleID;
	}
};

//Dependency: NMSString0x20
struct GcPunctuationDelay
{
	float Delay;
	NMS::NMSString0x20 Punctuation;

	friend bool operator==(const GcPunctuationDelay& lhs, const GcPunctuationDelay& rhs) 
	{
		return lhs.Delay == rhs.Delay &&
		lhs.Punctuation == rhs.Punctuation;
	}
};

//Dependency: GcPunctuationDelay
struct GcPunctuationDelayData
{
	std::vector<NMS_GameComponents::GcPunctuationDelay> PunctuationList;
	float DefaultDelay;

	friend bool operator==(const GcPunctuationDelayData& lhs, const GcPunctuationDelayData& rhs) 
	{
		return lhs.PunctuationList == rhs.PunctuationList &&
		lhs.DefaultDelay == rhs.DefaultDelay;
	}
};

//Dependency: GcPunctuationDelayData
struct GcPunctuationDelayTable
{
	enum class PunctuationDelaysEnum : uint32_t
	{
		Default = 0,
		Gek = 1,
		Korvax = 2,
		Vykeen = 3,
		FourthRace = 4,
		Builders = 5,
	};

	NMS_GameComponents::GcPunctuationDelayData PunctuationDelays[6];

	friend bool operator==(const GcPunctuationDelayTable& lhs, const GcPunctuationDelayTable& rhs) 
	{
		return std::equal(std::begin(lhs.PunctuationDelays), std::end(lhs.PunctuationDelays), std::begin(rhs.PunctuationDelays));
	}
};

//Dependency: GcBuildingClassification
//Dependency: NMSString0x20A
struct GcSettlementColourUpgradeBuildingOverride
{
	NMS::NMSString0x20A BuildingPalette;
	NMS::NMSString0x20A DecorationPalette;
	NMS_GameComponents::GcBuildingClassification Building;

	friend bool operator==(const GcSettlementColourUpgradeBuildingOverride& lhs, const GcSettlementColourUpgradeBuildingOverride& rhs) 
	{
		return lhs.BuildingPalette == rhs.BuildingPalette &&
		lhs.DecorationPalette == rhs.DecorationPalette &&
		lhs.Building == rhs.Building;
	}
};

//Dependency: GcBuildingBlueprint
struct GcPurchaseableBuildingBlueprints
{
	std::vector<int32_t> GroupMaxItems;
	std::vector<NMS_GameComponents::GcBuildingBlueprint> Table;

	friend bool operator==(const GcPurchaseableBuildingBlueprints& lhs, const GcPurchaseableBuildingBlueprints& rhs) 
	{
		return lhs.GroupMaxItems == rhs.GroupMaxItems &&
		lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcQuestItemPlacementRule
{
	NMS::NMSString0x10 MustBeAfterQuestItem;
	NMS::NMSString0x10 MustBeBeforeQuestItem;
	NMS::NMSString0x10 QuestItemID;
	std::vector<NMS::NMSString0x10> ValidRoomIDs;
	int32_t MaxRoomIndex;
	int32_t MinRoomIndex;

	friend bool operator==(const GcQuestItemPlacementRule& lhs, const GcQuestItemPlacementRule& rhs) 
	{
		return lhs.MustBeAfterQuestItem == rhs.MustBeAfterQuestItem &&
		lhs.MustBeBeforeQuestItem == rhs.MustBeBeforeQuestItem &&
		lhs.QuestItemID == rhs.QuestItemID &&
		lhs.ValidRoomIDs == rhs.ValidRoomIDs &&
		lhs.MaxRoomIndex == rhs.MaxRoomIndex &&
		lhs.MinRoomIndex == rhs.MinRoomIndex;
	}
};

//Dependency: NMSString0x20
struct GcThereminComponentData
{
	float IgnorePlayerDistance;
	float MaxPitch;
	float MaxVolume;
	float MinPitch;
	float MinVolume;
	float PitchMaxDist;
	float PitchMinDist;
	float VolumeMaxDist;
	float VolumeMinDist;
	NMS::NMSString0x20 PitchEndLocator;
	NMS::NMSString0x20 PitchStartLocator;
	NMS::NMSString0x20 VolumeBBName;

	friend bool operator==(const GcThereminComponentData& lhs, const GcThereminComponentData& rhs) 
	{
		return lhs.IgnorePlayerDistance == rhs.IgnorePlayerDistance &&
		lhs.MaxPitch == rhs.MaxPitch &&
		lhs.MaxVolume == rhs.MaxVolume &&
		lhs.MinPitch == rhs.MinPitch &&
		lhs.MinVolume == rhs.MinVolume &&
		lhs.PitchMaxDist == rhs.PitchMaxDist &&
		lhs.PitchMinDist == rhs.PitchMinDist &&
		lhs.VolumeMaxDist == rhs.VolumeMaxDist &&
		lhs.VolumeMinDist == rhs.VolumeMinDist &&
		lhs.PitchEndLocator == rhs.PitchEndLocator &&
		lhs.PitchStartLocator == rhs.PitchStartLocator &&
		lhs.VolumeBBName == rhs.VolumeBBName;
	}
};

struct GcRewardSetNexusExitWarpTargetToFireteamMemberUA
{
	int32_t FireteamMemberIndex;

	friend bool operator==(const GcRewardSetNexusExitWarpTargetToFireteamMemberUA& lhs, const GcRewardSetNexusExitWarpTargetToFireteamMemberUA& rhs) 
	{
		return lhs.FireteamMemberIndex == rhs.FireteamMemberIndex;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshAreaFlags
{
	enum class NavMeshAreaFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_Toolkit::TkNavMeshAreaFlags::NavMeshAreaFlagsEnum NavMeshAreaFlags;

	friend bool operator==(const TkNavMeshAreaFlags& lhs, const TkNavMeshAreaFlags& rhs) 
	{
		return lhs.NavMeshAreaFlags == rhs.NavMeshAreaFlags;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkPaletteTexture
struct GcTileTypeOptions
{
	std::vector<NMS_Toolkit::TkPaletteTexture> Options;

	friend bool operator==(const GcTileTypeOptions& lhs, const GcTileTypeOptions& rhs) 
	{
		return lhs.Options == rhs.Options;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkShearWindOctaveData
{
	float MaxStrength;
	float MinStrength;
	float StrengthVariationFreq;
	float WaveFrequency;
	float WaveSize;

	friend bool operator==(const TkShearWindOctaveData& lhs, const TkShearWindOctaveData& rhs) 
	{
		return lhs.MaxStrength == rhs.MaxStrength &&
		lhs.MinStrength == rhs.MinStrength &&
		lhs.StrengthVariationFreq == rhs.StrengthVariationFreq &&
		lhs.WaveFrequency == rhs.WaveFrequency &&
		lhs.WaveSize == rhs.WaveSize;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcRefinerRecipeElement
//Dependency: NMSString0x20A
struct GcRefinerRecipe
{
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A RecipeName;
	NMS::NMSString0x20A RecipeType;
	NMS_GameComponents::GcRefinerRecipeElement Result;
	std::vector<NMS_GameComponents::GcRefinerRecipeElement> Ingredients;
	float TimeToMake;
	bool Cooking;

	friend bool operator==(const GcRefinerRecipe& lhs, const GcRefinerRecipe& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.RecipeName == rhs.RecipeName &&
		lhs.RecipeType == rhs.RecipeType &&
		lhs.Result == rhs.Result &&
		lhs.Ingredients == rhs.Ingredients &&
		lhs.TimeToMake == rhs.TimeToMake &&
		lhs.Cooking == rhs.Cooking;
	}
};

//Dependency: GcRefinerRecipe
struct GcRecipeTable
{
	std::vector<NMS_GameComponents::GcRefinerRecipe> Table;

	friend bool operator==(const GcRecipeTable& lhs, const GcRecipeTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcMaintenanceComponentData
struct GcRefinerUnitComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumInputs;
	bool IsCooker;

	friend bool operator==(const GcRefinerUnitComponentData& lhs, const GcRefinerUnitComponentData& rhs) 
	{
		return lhs.MaintenanceData == rhs.MaintenanceData &&
		lhs.NumInputs == rhs.NumInputs &&
		lhs.IsCooker == rhs.IsCooker;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: VariableSizeString
//Dependency: GcBuildMenuIconSet
//Dependency: Colour
//Dependency: GcBaseBuildingCameraMode
//Dependency: Vector3f
//Dependency: TkTextureResource
//Dependency: TkLODDistances
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcBuildingGlobals
{
	NMS::Vector3f BuildingPartPreviewOffset;
	NMS::Colour MarkerLineColour;
	NMS_GameComponents::GcBuildMenuIconSet Icons[16];
	NMS_GameComponents::GcBuildMenuIconSet IconsTouch[16];
	NMS_Toolkit::TkTextureResource ScreenSpaceRotationGlow;
	NMS_Toolkit::TkTextureResource ScreenSpaceRotationIcon;
	NMS::VariableSizeString FreighterBaseSpawnOverride;
	NMS_Toolkit::TkLODDistances ActiveLodDistances[4];
	NMS_Toolkit::TkLODDistances InactiveLodDistances[4];
	float TotalPlanetFrameTimeForComplexity[4];
	float TotalSpaceFrameTimeForComplexity[4];
	NMS::Vector2f BuildingPlacementScaleMinMax;
	float AddToRadius_DoNotPlaceClose;
	float AmountToMoveMarkerRoundSphere;
	NMS_GameComponents::GcBaseBuildingCameraMode BaseBuildingCamMode;
	float BaseBuildingTerrainEditBaseYOffset;
	float BaseBuildingTerrainEditBoundsScalar;
	float BaseBuildingTerrainEditTopYOffset;
	float BaseBuildingWiringSnappingScaleFactorEasy;
	float BaseBuildingWiringSnappingScaleFactorHard;
	float BaseRadiusExtension;
	float BuildingApproachDistance;
	float BuildingLineAlphaEnd0;
	float BuildingLineAlphaEnd1;
	float BuildingLineAlphaStart;
	int32_t BuildingLineCount;
	float BuildingLineMoveSpeed;
	float BuildingLineOBBShrink;
	float BuildingLineProjectorLength;
	float BuildingLineProjectorWidth;
	float BuildingLineResetTime;
	float BuildingLineWidth;
	float BuildingNearArcDistance;
	float BuildingNearDistance;
	float BuildingPartPreviewPitch;
	float BuildingPartPreviewRadius;
	float BuildingPartPreviewRotateSpeed;
	float BuildingPlacementConeEndDistance;
	float BuildingPlacementConeEndDistanceIndoors;
	float BuildingPlacementConeEndRadius;
	float BuildingPlacementConeEndRadiusIndoors;
	float BuildingPlacementConeStartRadius;
	float BuildingPlacementConeStartRadiusIndoors;
	float BuildingPlacementCursorOffset;
	float BuildingPlacementDefaultMaxMinDistanceVR;
	float BuildingPlacementDefaultMinDistance;
	float BuildingPlacementDefaultMinMinDistanceVR;
	float BuildingPlacementEffectCrossFadeTime;
	float BuildingPlacementEffectDissolveSpeed;
	float BuildingPlacementEffectFadeWaitTime;
	float BuildingPlacementEffectHidePlaceholderDistance;
	float BuildingPlacementEffectHidePlaceholderFadeTime;
	float BuildingPlacementEffectInterpRate;
	float BuildingPlacementEffectInterpRateSlow;
	float BuildingPlacementEffectPostPreviewInterpTime;
	float BuildingPlacementEffectPreviewInterpTime;
	float BuildingPlacementEffectSpringFast;
	float BuildingPlacementEffectSpringSlow;
	float BuildingPlacementFocusModeAttachSnappingDistance;
	float BuildingPlacementFocusModeMaxDistanceScaling;
	float BuildingPlacementFocusModeMinDistance;
	float BuildingPlacementFocusModeSurfaceSnappingDistance;
	float BuildingPlacementGhostHearScaleDistanceMod;
	float BuildingPlacementGhostHeartSizeScale;
	float BuildingPlacementGhostHeartSizeScaleMin;
	float BuildingPlacementGhostHeartSizeSelected;
	float BuildingPlacementGhostHeartWiringSizeOtherSnapped;
	float BuildingPlacementGhostHeartWiringSizeScale;
	float BuildingPlacementGhostHeartWiringSizeScaleMin;
	float BuildingPlacementGhostReductionMaxSize;
	float BuildingPlacementMaxConnectionLength;
	float BuildingPlacementMaxDistance;
	float BuildingPlacementMaxDistanceNoHit;
	float BuildingPlacementMaxDistanceNoHitExtra;
	float BuildingPlacementMaxDistanceScaleExtra;
	float BuildingPlacementMaxDistanceScaleExtraMaxSize;
	float BuildingPlacementMaxDistanceScaleExtraMinSize;
	float BuildingPlacementMinDistanceScaleIncrease;
	float BuildingPlacementMinDistanceScaleIncreaseVR;
	float BuildingPlacementMinDotProductRequiredToSnap;
	float BuildingPlacementNumGhostsMinOffset;
	float BuildingPlacementNumGhostsVolume;
	float BuildingPlacementNumGhostsVRMultiplier;
	float BuildingPlacementNumGhostsVRMultiplierEyeTracking;
	float BuildingPlacementTwistScale;
	float BuildingSelectionFocusModeCursorRadius;
	float BuildingVisitDistance;
	float BuildingWaterMargin;
	float BuildingYOffset;
	float ChanceOfAddingShelter;
	float CompassIconSize;
	float ComplexityDensitySigmaSquared;
	float ComplexityDensityTestRange;
	float DistanceForTooltip;
	float DistanceForVisited;
	float DistanceTagXOffset;
	float DistanceTextXOffset;
	float FadeDistance;
	float FadeStart;
	float FlyingBuildingIconTime;
	float HeightDiffLineAdjustFactor;
	float HeightDiffLineAdjustMax;
	float HeightDiffLineAdjustMin;
	float HologramDistanceMultiplier;
	float HologramDistanceMultiplierAlt;
	float HoverFadeAlpha;
	float HoverFadeAlphaHmd;
	float HoverFadeTime;
	float HoverFadeTimeHmd;
	float HoverInactiveSize;
	float HoverInactiveSizeHmd;
	float HoverLockedActiveTime;
	float HoverLockedActiveTimeHmd;
	float HoverLockedIconScale;
	float HoverLockedIconScaleHmd;
	float HoverLockedInitTime;
	float HoverLockedInitTimeHmd;
	float HoverMinToStayActiveTime;
	float HoverMinToStayActiveTimeHmd;
	float HoverStayActiveTime;
	float HoverStayActiveTimeHmd;
	float HoverTime;
	float HoverTimeHmd;
	float HoverVisibilityTime;
	float HoverVisibilityTimeHmd;
	float IconSpringTime;
	float InactiveVisibleComplexityFactor;
	float InteractMarkerYOffset;
	float LargeIconArrowOffset;
	float LargeIconSize;
	float LineDistanceRange;
	float LineMinDistance;
	float LineScaleFactor;
	float MarkerLineWidth;
	float MarkerTimeIncrease;
	float MarkerTransitionDistance;
	float MaxIconRange;
	float MaximumComplexityDensity;
	float MaxLineLength;
	float MaxLowHeight;
	float MaxRadiusForPlanetBases;
	float MaxRadiusForSpaceBases;
	int32_t MaxShipScanBuildings;
	float MaxTimeBetweenEvents;
	float MinAlpha;
	float MinElevatedHeight;
	float MinLineLength;
	float MinLineLengthShip;
	float MinLoadingPercentageNodesBufferFree;
	float MinPercentageNodesBufferFree;
	float MinRadius;
	float MinRadiusForBases;
	float MinRadiusFromFeaturedBases;
	int32_t MinShipScanBuildings;
	float MinTimeBetweenBuildingEntryMessage;
	float MinTimeBetweenBuildingEntryMessageBase;
	float NearLineScaleFactor;
	float NearMaxLineLength;
	float NearMinAlpha;
	float NearMinLineLength;
	float ObjectFadeRadius;
	float PercentagePhysicsComponentsForComplexity;
	float PowerlineSnapDistance;
	float Radius_DoNotPlaceAnywhereNear;
	float RadiusMultiplier_DoNotPlace;
	float RadiusMultiplier_DoNotPlaceAnywhereNear;
	float RadiusMultiplier_DoNotPlaceClose;
	float RadiusMultiplier_OnlyPlaceAround;
	float SectorMessageCenterDistance;
	float SectorMessageMinTime;
	float SectorMessageReshowDistance;
	float ShowTimeNotDistance;
	float SmallIconArrowOffset;
	float SmallIconSize;
	float SpaceMarkerMaxHeight;
	float SpaceMarkerMinHeight;
	float SpaceMarkerOffset;
	float SpaceMarkerOffsetPlanet;
	float SpaceMarkerOffsetSamePlanet;
	float StartCrashSiteMaxDistance;
	float StartCrashSiteMinDistance;
	float StartShelterMaxDistance;
	float StartShelterMinDistance;
	float TestDistanceForSettlementBaseBufferAlignment;
	float TextStringXOffset;
	float TextTagLength;
	float TextTagWidthOffset;
	float TextTagXOffset;
	float TextTagYOffset;
	float UnknownBuildingRange;
	bool AllowBuildingUsingIntermediates;
	bool BaseBuildingTerrainEditBoundsOverride;
	bool BuildingPlacementEffectEnabled;
	NMS_Toolkit::TkCurveType BuildingPlacementGhostHeartSizeCurve;
	bool DebugForceShowInactives;
	NMS_Toolkit::TkCurveType LineCurve;

	friend bool operator==(const GcBuildingGlobals& lhs, const GcBuildingGlobals& rhs) 
	{
		return lhs.BuildingPartPreviewOffset == rhs.BuildingPartPreviewOffset &&
		lhs.MarkerLineColour == rhs.MarkerLineColour &&
		std::equal(std::begin(lhs.Icons), std::end(lhs.Icons), std::begin(rhs.Icons)) &&
		std::equal(std::begin(lhs.IconsTouch), std::end(lhs.IconsTouch), std::begin(rhs.IconsTouch)) &&
		lhs.ScreenSpaceRotationGlow == rhs.ScreenSpaceRotationGlow &&
		lhs.ScreenSpaceRotationIcon == rhs.ScreenSpaceRotationIcon &&
		lhs.FreighterBaseSpawnOverride == rhs.FreighterBaseSpawnOverride &&
		std::equal(std::begin(lhs.ActiveLodDistances), std::end(lhs.ActiveLodDistances), std::begin(rhs.ActiveLodDistances)) &&
		std::equal(std::begin(lhs.InactiveLodDistances), std::end(lhs.InactiveLodDistances), std::begin(rhs.InactiveLodDistances)) &&
		std::equal(std::begin(lhs.TotalPlanetFrameTimeForComplexity), std::end(lhs.TotalPlanetFrameTimeForComplexity), std::begin(rhs.TotalPlanetFrameTimeForComplexity)) &&
		std::equal(std::begin(lhs.TotalSpaceFrameTimeForComplexity), std::end(lhs.TotalSpaceFrameTimeForComplexity), std::begin(rhs.TotalSpaceFrameTimeForComplexity)) &&
		lhs.BuildingPlacementScaleMinMax == rhs.BuildingPlacementScaleMinMax &&
		lhs.AddToRadius_DoNotPlaceClose == rhs.AddToRadius_DoNotPlaceClose &&
		lhs.AmountToMoveMarkerRoundSphere == rhs.AmountToMoveMarkerRoundSphere &&
		lhs.BaseBuildingCamMode == rhs.BaseBuildingCamMode &&
		lhs.BaseBuildingTerrainEditBaseYOffset == rhs.BaseBuildingTerrainEditBaseYOffset &&
		lhs.BaseBuildingTerrainEditBoundsScalar == rhs.BaseBuildingTerrainEditBoundsScalar &&
		lhs.BaseBuildingTerrainEditTopYOffset == rhs.BaseBuildingTerrainEditTopYOffset &&
		lhs.BaseBuildingWiringSnappingScaleFactorEasy == rhs.BaseBuildingWiringSnappingScaleFactorEasy &&
		lhs.BaseBuildingWiringSnappingScaleFactorHard == rhs.BaseBuildingWiringSnappingScaleFactorHard &&
		lhs.BaseRadiusExtension == rhs.BaseRadiusExtension &&
		lhs.BuildingApproachDistance == rhs.BuildingApproachDistance &&
		lhs.BuildingLineAlphaEnd0 == rhs.BuildingLineAlphaEnd0 &&
		lhs.BuildingLineAlphaEnd1 == rhs.BuildingLineAlphaEnd1 &&
		lhs.BuildingLineAlphaStart == rhs.BuildingLineAlphaStart &&
		lhs.BuildingLineCount == rhs.BuildingLineCount &&
		lhs.BuildingLineMoveSpeed == rhs.BuildingLineMoveSpeed &&
		lhs.BuildingLineOBBShrink == rhs.BuildingLineOBBShrink &&
		lhs.BuildingLineProjectorLength == rhs.BuildingLineProjectorLength &&
		lhs.BuildingLineProjectorWidth == rhs.BuildingLineProjectorWidth &&
		lhs.BuildingLineResetTime == rhs.BuildingLineResetTime &&
		lhs.BuildingLineWidth == rhs.BuildingLineWidth &&
		lhs.BuildingNearArcDistance == rhs.BuildingNearArcDistance &&
		lhs.BuildingNearDistance == rhs.BuildingNearDistance &&
		lhs.BuildingPartPreviewPitch == rhs.BuildingPartPreviewPitch &&
		lhs.BuildingPartPreviewRadius == rhs.BuildingPartPreviewRadius &&
		lhs.BuildingPartPreviewRotateSpeed == rhs.BuildingPartPreviewRotateSpeed &&
		lhs.BuildingPlacementConeEndDistance == rhs.BuildingPlacementConeEndDistance &&
		lhs.BuildingPlacementConeEndDistanceIndoors == rhs.BuildingPlacementConeEndDistanceIndoors &&
		lhs.BuildingPlacementConeEndRadius == rhs.BuildingPlacementConeEndRadius &&
		lhs.BuildingPlacementConeEndRadiusIndoors == rhs.BuildingPlacementConeEndRadiusIndoors &&
		lhs.BuildingPlacementConeStartRadius == rhs.BuildingPlacementConeStartRadius &&
		lhs.BuildingPlacementConeStartRadiusIndoors == rhs.BuildingPlacementConeStartRadiusIndoors &&
		lhs.BuildingPlacementCursorOffset == rhs.BuildingPlacementCursorOffset &&
		lhs.BuildingPlacementDefaultMaxMinDistanceVR == rhs.BuildingPlacementDefaultMaxMinDistanceVR &&
		lhs.BuildingPlacementDefaultMinDistance == rhs.BuildingPlacementDefaultMinDistance &&
		lhs.BuildingPlacementDefaultMinMinDistanceVR == rhs.BuildingPlacementDefaultMinMinDistanceVR &&
		lhs.BuildingPlacementEffectCrossFadeTime == rhs.BuildingPlacementEffectCrossFadeTime &&
		lhs.BuildingPlacementEffectDissolveSpeed == rhs.BuildingPlacementEffectDissolveSpeed &&
		lhs.BuildingPlacementEffectFadeWaitTime == rhs.BuildingPlacementEffectFadeWaitTime &&
		lhs.BuildingPlacementEffectHidePlaceholderDistance == rhs.BuildingPlacementEffectHidePlaceholderDistance &&
		lhs.BuildingPlacementEffectHidePlaceholderFadeTime == rhs.BuildingPlacementEffectHidePlaceholderFadeTime &&
		lhs.BuildingPlacementEffectInterpRate == rhs.BuildingPlacementEffectInterpRate &&
		lhs.BuildingPlacementEffectInterpRateSlow == rhs.BuildingPlacementEffectInterpRateSlow &&
		lhs.BuildingPlacementEffectPostPreviewInterpTime == rhs.BuildingPlacementEffectPostPreviewInterpTime &&
		lhs.BuildingPlacementEffectPreviewInterpTime == rhs.BuildingPlacementEffectPreviewInterpTime &&
		lhs.BuildingPlacementEffectSpringFast == rhs.BuildingPlacementEffectSpringFast &&
		lhs.BuildingPlacementEffectSpringSlow == rhs.BuildingPlacementEffectSpringSlow &&
		lhs.BuildingPlacementFocusModeAttachSnappingDistance == rhs.BuildingPlacementFocusModeAttachSnappingDistance &&
		lhs.BuildingPlacementFocusModeMaxDistanceScaling == rhs.BuildingPlacementFocusModeMaxDistanceScaling &&
		lhs.BuildingPlacementFocusModeMinDistance == rhs.BuildingPlacementFocusModeMinDistance &&
		lhs.BuildingPlacementFocusModeSurfaceSnappingDistance == rhs.BuildingPlacementFocusModeSurfaceSnappingDistance &&
		lhs.BuildingPlacementGhostHearScaleDistanceMod == rhs.BuildingPlacementGhostHearScaleDistanceMod &&
		lhs.BuildingPlacementGhostHeartSizeScale == rhs.BuildingPlacementGhostHeartSizeScale &&
		lhs.BuildingPlacementGhostHeartSizeScaleMin == rhs.BuildingPlacementGhostHeartSizeScaleMin &&
		lhs.BuildingPlacementGhostHeartSizeSelected == rhs.BuildingPlacementGhostHeartSizeSelected &&
		lhs.BuildingPlacementGhostHeartWiringSizeOtherSnapped == rhs.BuildingPlacementGhostHeartWiringSizeOtherSnapped &&
		lhs.BuildingPlacementGhostHeartWiringSizeScale == rhs.BuildingPlacementGhostHeartWiringSizeScale &&
		lhs.BuildingPlacementGhostHeartWiringSizeScaleMin == rhs.BuildingPlacementGhostHeartWiringSizeScaleMin &&
		lhs.BuildingPlacementGhostReductionMaxSize == rhs.BuildingPlacementGhostReductionMaxSize &&
		lhs.BuildingPlacementMaxConnectionLength == rhs.BuildingPlacementMaxConnectionLength &&
		lhs.BuildingPlacementMaxDistance == rhs.BuildingPlacementMaxDistance &&
		lhs.BuildingPlacementMaxDistanceNoHit == rhs.BuildingPlacementMaxDistanceNoHit &&
		lhs.BuildingPlacementMaxDistanceNoHitExtra == rhs.BuildingPlacementMaxDistanceNoHitExtra &&
		lhs.BuildingPlacementMaxDistanceScaleExtra == rhs.BuildingPlacementMaxDistanceScaleExtra &&
		lhs.BuildingPlacementMaxDistanceScaleExtraMaxSize == rhs.BuildingPlacementMaxDistanceScaleExtraMaxSize &&
		lhs.BuildingPlacementMaxDistanceScaleExtraMinSize == rhs.BuildingPlacementMaxDistanceScaleExtraMinSize &&
		lhs.BuildingPlacementMinDistanceScaleIncrease == rhs.BuildingPlacementMinDistanceScaleIncrease &&
		lhs.BuildingPlacementMinDistanceScaleIncreaseVR == rhs.BuildingPlacementMinDistanceScaleIncreaseVR &&
		lhs.BuildingPlacementMinDotProductRequiredToSnap == rhs.BuildingPlacementMinDotProductRequiredToSnap &&
		lhs.BuildingPlacementNumGhostsMinOffset == rhs.BuildingPlacementNumGhostsMinOffset &&
		lhs.BuildingPlacementNumGhostsVolume == rhs.BuildingPlacementNumGhostsVolume &&
		lhs.BuildingPlacementNumGhostsVRMultiplier == rhs.BuildingPlacementNumGhostsVRMultiplier &&
		lhs.BuildingPlacementNumGhostsVRMultiplierEyeTracking == rhs.BuildingPlacementNumGhostsVRMultiplierEyeTracking &&
		lhs.BuildingPlacementTwistScale == rhs.BuildingPlacementTwistScale &&
		lhs.BuildingSelectionFocusModeCursorRadius == rhs.BuildingSelectionFocusModeCursorRadius &&
		lhs.BuildingVisitDistance == rhs.BuildingVisitDistance &&
		lhs.BuildingWaterMargin == rhs.BuildingWaterMargin &&
		lhs.BuildingYOffset == rhs.BuildingYOffset &&
		lhs.ChanceOfAddingShelter == rhs.ChanceOfAddingShelter &&
		lhs.CompassIconSize == rhs.CompassIconSize &&
		lhs.ComplexityDensitySigmaSquared == rhs.ComplexityDensitySigmaSquared &&
		lhs.ComplexityDensityTestRange == rhs.ComplexityDensityTestRange &&
		lhs.DistanceForTooltip == rhs.DistanceForTooltip &&
		lhs.DistanceForVisited == rhs.DistanceForVisited &&
		lhs.DistanceTagXOffset == rhs.DistanceTagXOffset &&
		lhs.DistanceTextXOffset == rhs.DistanceTextXOffset &&
		lhs.FadeDistance == rhs.FadeDistance &&
		lhs.FadeStart == rhs.FadeStart &&
		lhs.FlyingBuildingIconTime == rhs.FlyingBuildingIconTime &&
		lhs.HeightDiffLineAdjustFactor == rhs.HeightDiffLineAdjustFactor &&
		lhs.HeightDiffLineAdjustMax == rhs.HeightDiffLineAdjustMax &&
		lhs.HeightDiffLineAdjustMin == rhs.HeightDiffLineAdjustMin &&
		lhs.HologramDistanceMultiplier == rhs.HologramDistanceMultiplier &&
		lhs.HologramDistanceMultiplierAlt == rhs.HologramDistanceMultiplierAlt &&
		lhs.HoverFadeAlpha == rhs.HoverFadeAlpha &&
		lhs.HoverFadeAlphaHmd == rhs.HoverFadeAlphaHmd &&
		lhs.HoverFadeTime == rhs.HoverFadeTime &&
		lhs.HoverFadeTimeHmd == rhs.HoverFadeTimeHmd &&
		lhs.HoverInactiveSize == rhs.HoverInactiveSize &&
		lhs.HoverInactiveSizeHmd == rhs.HoverInactiveSizeHmd &&
		lhs.HoverLockedActiveTime == rhs.HoverLockedActiveTime &&
		lhs.HoverLockedActiveTimeHmd == rhs.HoverLockedActiveTimeHmd &&
		lhs.HoverLockedIconScale == rhs.HoverLockedIconScale &&
		lhs.HoverLockedIconScaleHmd == rhs.HoverLockedIconScaleHmd &&
		lhs.HoverLockedInitTime == rhs.HoverLockedInitTime &&
		lhs.HoverLockedInitTimeHmd == rhs.HoverLockedInitTimeHmd &&
		lhs.HoverMinToStayActiveTime == rhs.HoverMinToStayActiveTime &&
		lhs.HoverMinToStayActiveTimeHmd == rhs.HoverMinToStayActiveTimeHmd &&
		lhs.HoverStayActiveTime == rhs.HoverStayActiveTime &&
		lhs.HoverStayActiveTimeHmd == rhs.HoverStayActiveTimeHmd &&
		lhs.HoverTime == rhs.HoverTime &&
		lhs.HoverTimeHmd == rhs.HoverTimeHmd &&
		lhs.HoverVisibilityTime == rhs.HoverVisibilityTime &&
		lhs.HoverVisibilityTimeHmd == rhs.HoverVisibilityTimeHmd &&
		lhs.IconSpringTime == rhs.IconSpringTime &&
		lhs.InactiveVisibleComplexityFactor == rhs.InactiveVisibleComplexityFactor &&
		lhs.InteractMarkerYOffset == rhs.InteractMarkerYOffset &&
		lhs.LargeIconArrowOffset == rhs.LargeIconArrowOffset &&
		lhs.LargeIconSize == rhs.LargeIconSize &&
		lhs.LineDistanceRange == rhs.LineDistanceRange &&
		lhs.LineMinDistance == rhs.LineMinDistance &&
		lhs.LineScaleFactor == rhs.LineScaleFactor &&
		lhs.MarkerLineWidth == rhs.MarkerLineWidth &&
		lhs.MarkerTimeIncrease == rhs.MarkerTimeIncrease &&
		lhs.MarkerTransitionDistance == rhs.MarkerTransitionDistance &&
		lhs.MaxIconRange == rhs.MaxIconRange &&
		lhs.MaximumComplexityDensity == rhs.MaximumComplexityDensity &&
		lhs.MaxLineLength == rhs.MaxLineLength &&
		lhs.MaxLowHeight == rhs.MaxLowHeight &&
		lhs.MaxRadiusForPlanetBases == rhs.MaxRadiusForPlanetBases &&
		lhs.MaxRadiusForSpaceBases == rhs.MaxRadiusForSpaceBases &&
		lhs.MaxShipScanBuildings == rhs.MaxShipScanBuildings &&
		lhs.MaxTimeBetweenEvents == rhs.MaxTimeBetweenEvents &&
		lhs.MinAlpha == rhs.MinAlpha &&
		lhs.MinElevatedHeight == rhs.MinElevatedHeight &&
		lhs.MinLineLength == rhs.MinLineLength &&
		lhs.MinLineLengthShip == rhs.MinLineLengthShip &&
		lhs.MinLoadingPercentageNodesBufferFree == rhs.MinLoadingPercentageNodesBufferFree &&
		lhs.MinPercentageNodesBufferFree == rhs.MinPercentageNodesBufferFree &&
		lhs.MinRadius == rhs.MinRadius &&
		lhs.MinRadiusForBases == rhs.MinRadiusForBases &&
		lhs.MinRadiusFromFeaturedBases == rhs.MinRadiusFromFeaturedBases &&
		lhs.MinShipScanBuildings == rhs.MinShipScanBuildings &&
		lhs.MinTimeBetweenBuildingEntryMessage == rhs.MinTimeBetweenBuildingEntryMessage &&
		lhs.MinTimeBetweenBuildingEntryMessageBase == rhs.MinTimeBetweenBuildingEntryMessageBase &&
		lhs.NearLineScaleFactor == rhs.NearLineScaleFactor &&
		lhs.NearMaxLineLength == rhs.NearMaxLineLength &&
		lhs.NearMinAlpha == rhs.NearMinAlpha &&
		lhs.NearMinLineLength == rhs.NearMinLineLength &&
		lhs.ObjectFadeRadius == rhs.ObjectFadeRadius &&
		lhs.PercentagePhysicsComponentsForComplexity == rhs.PercentagePhysicsComponentsForComplexity &&
		lhs.PowerlineSnapDistance == rhs.PowerlineSnapDistance &&
		lhs.Radius_DoNotPlaceAnywhereNear == rhs.Radius_DoNotPlaceAnywhereNear &&
		lhs.RadiusMultiplier_DoNotPlace == rhs.RadiusMultiplier_DoNotPlace &&
		lhs.RadiusMultiplier_DoNotPlaceAnywhereNear == rhs.RadiusMultiplier_DoNotPlaceAnywhereNear &&
		lhs.RadiusMultiplier_DoNotPlaceClose == rhs.RadiusMultiplier_DoNotPlaceClose &&
		lhs.RadiusMultiplier_OnlyPlaceAround == rhs.RadiusMultiplier_OnlyPlaceAround &&
		lhs.SectorMessageCenterDistance == rhs.SectorMessageCenterDistance &&
		lhs.SectorMessageMinTime == rhs.SectorMessageMinTime &&
		lhs.SectorMessageReshowDistance == rhs.SectorMessageReshowDistance &&
		lhs.ShowTimeNotDistance == rhs.ShowTimeNotDistance &&
		lhs.SmallIconArrowOffset == rhs.SmallIconArrowOffset &&
		lhs.SmallIconSize == rhs.SmallIconSize &&
		lhs.SpaceMarkerMaxHeight == rhs.SpaceMarkerMaxHeight &&
		lhs.SpaceMarkerMinHeight == rhs.SpaceMarkerMinHeight &&
		lhs.SpaceMarkerOffset == rhs.SpaceMarkerOffset &&
		lhs.SpaceMarkerOffsetPlanet == rhs.SpaceMarkerOffsetPlanet &&
		lhs.SpaceMarkerOffsetSamePlanet == rhs.SpaceMarkerOffsetSamePlanet &&
		lhs.StartCrashSiteMaxDistance == rhs.StartCrashSiteMaxDistance &&
		lhs.StartCrashSiteMinDistance == rhs.StartCrashSiteMinDistance &&
		lhs.StartShelterMaxDistance == rhs.StartShelterMaxDistance &&
		lhs.StartShelterMinDistance == rhs.StartShelterMinDistance &&
		lhs.TestDistanceForSettlementBaseBufferAlignment == rhs.TestDistanceForSettlementBaseBufferAlignment &&
		lhs.TextStringXOffset == rhs.TextStringXOffset &&
		lhs.TextTagLength == rhs.TextTagLength &&
		lhs.TextTagWidthOffset == rhs.TextTagWidthOffset &&
		lhs.TextTagXOffset == rhs.TextTagXOffset &&
		lhs.TextTagYOffset == rhs.TextTagYOffset &&
		lhs.UnknownBuildingRange == rhs.UnknownBuildingRange &&
		lhs.AllowBuildingUsingIntermediates == rhs.AllowBuildingUsingIntermediates &&
		lhs.BaseBuildingTerrainEditBoundsOverride == rhs.BaseBuildingTerrainEditBoundsOverride &&
		lhs.BuildingPlacementEffectEnabled == rhs.BuildingPlacementEffectEnabled &&
		lhs.BuildingPlacementGhostHeartSizeCurve == rhs.BuildingPlacementGhostHeartSizeCurve &&
		lhs.DebugForceShowInactives == rhs.DebugForceShowInactives &&
		lhs.LineCurve == rhs.LineCurve;
	}
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimVectorBlendNodeData
{
	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 WeightIn;
	float WeightRangeBegin;
	float WeightRangeEnd;
	float WeightSpringTime;
	NMS_Toolkit::TkCurveType WeightCurve;
	float InitialWeight;
	NMSTemplate BlendChild;

	friend bool operator==(const TkAnimVectorBlendNodeData& lhs, const TkAnimVectorBlendNodeData& rhs) 
	{
		return lhs.NodeId == rhs.NodeId &&
		lhs.WeightIn == rhs.WeightIn &&
		lhs.WeightRangeBegin == rhs.WeightRangeBegin &&
		lhs.WeightRangeEnd == rhs.WeightRangeEnd &&
		lhs.WeightSpringTime == rhs.WeightSpringTime &&
		lhs.WeightCurve == rhs.WeightCurve &&
		lhs.InitialWeight == rhs.InitialWeight &&
		lhs.BlendChild == rhs.BlendChild;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRegionHotspotTypes
{
	enum class HotspotTypeEnum : uint32_t
	{
		None = 0,
		Power = 1,
		Mineral1 = 2,
		Mineral2 = 4,
		Mineral3 = 8,
		Gas1 = 16,
	};

	NMS_GameComponents::GcRegionHotspotTypes::HotspotTypeEnum HotspotType;

	friend bool operator==(const GcRegionHotspotTypes& lhs, const GcRegionHotspotTypes& rhs) 
	{
		return lhs.HotspotType == rhs.HotspotType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimBlendType
{
	enum class BlendTypeEnum : uint32_t
	{
		Normal = 0,
		MatchTimes = 1,
		MatchTimesAndPhase = 2,
		OffsetByBlendTime = 3,
	};

	NMS_Toolkit::TkAnimBlendType::BlendTypeEnum BlendType;

	friend bool operator==(const TkAnimBlendType& lhs, const TkAnimBlendType& rhs) 
	{
		return lhs.BlendType == rhs.BlendType;
	}
};

//Dependency: TkAnimBlendType
//Dependency: TkAnimStateMachineBlendTimeMode
//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionData
{
	std::vector<NMSTemplate> Conditions;
	NMS::NMSString0x10 DestinationStateDebugName;
	NMS_Toolkit::TkAnimBlendType BlendType;
	int32_t DestinationState;
	float ExitTime;
	float TransitionTime;
	NMS_Toolkit::TkAnimStateMachineBlendTimeMode TransitionTimeMode;
	bool HasTimedExit;

	friend bool operator==(const TkAnimStateMachineTransitionData& lhs, const TkAnimStateMachineTransitionData& rhs) 
	{
		return lhs.Conditions == rhs.Conditions &&
		lhs.DestinationStateDebugName == rhs.DestinationStateDebugName &&
		lhs.BlendType == rhs.BlendType &&
		lhs.DestinationState == rhs.DestinationState &&
		lhs.ExitTime == rhs.ExitTime &&
		lhs.TransitionTime == rhs.TransitionTime &&
		lhs.TransitionTimeMode == rhs.TransitionTimeMode &&
		lhs.HasTimedExit == rhs.HasTimedExit;
	}
};

//Dependency: TkAnimStateMachineTransitionData
//Dependency: NMSString0x10
struct TkAnimStateMachineStateData
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Name;
	std::vector<NMS_Toolkit::TkAnimStateMachineTransitionData> Transitions;
	int32_t Id;
	int32_t NodePosX;
	int32_t NodePosY;
	float ScrollX;
	float ScrollY;
	float Zoom;

	friend bool operator==(const TkAnimStateMachineStateData& lhs, const TkAnimStateMachineStateData& rhs) 
	{
		return lhs.Anim == rhs.Anim &&
		lhs.Name == rhs.Name &&
		lhs.Transitions == rhs.Transitions &&
		lhs.Id == rhs.Id &&
		lhs.NodePosX == rhs.NodePosX &&
		lhs.NodePosY == rhs.NodePosY &&
		lhs.ScrollX == rhs.ScrollX &&
		lhs.ScrollY == rhs.ScrollY &&
		lhs.Zoom == rhs.Zoom;
	}
};

//Dependency: TkAnimStateMachineTransitionData
//Dependency: TkAnimStateMachineStateData
//Dependency: NMSString0x10
struct TkAnimStateMachineData
{
	std::vector<NMS_Toolkit::TkAnimStateMachineTransitionData> EntryTransitions;
	NMS::NMSString0x10 LayerId;
	std::vector<NMS_Toolkit::TkAnimStateMachineStateData> States;
	int32_t DefaultState;
	int32_t EntryPosX;
	int32_t EntryPosY;
	float ScrollX;
	float ScrollY;
	float Zoom;

	friend bool operator==(const TkAnimStateMachineData& lhs, const TkAnimStateMachineData& rhs) 
	{
		return lhs.EntryTransitions == rhs.EntryTransitions &&
		lhs.LayerId == rhs.LayerId &&
		lhs.States == rhs.States &&
		lhs.DefaultState == rhs.DefaultState &&
		lhs.EntryPosX == rhs.EntryPosX &&
		lhs.EntryPosY == rhs.EntryPosY &&
		lhs.ScrollX == rhs.ScrollX &&
		lhs.ScrollY == rhs.ScrollY &&
		lhs.Zoom == rhs.Zoom;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcSpaceshipAvoidanceData
{
	float EndRadiusMultiplier;
	float Force;
	int32_t NumRays;
	float RayMinRange;
	float RaySpeedTime;
	float SpeedInterp;
	float SpeedInterpMinSpeed;
	float SpeedInterpRange;
	float StartRadiusMultiplier;

	friend bool operator==(const GcSpaceshipAvoidanceData& lhs, const GcSpaceshipAvoidanceData& rhs) 
	{
		return lhs.EndRadiusMultiplier == rhs.EndRadiusMultiplier &&
		lhs.Force == rhs.Force &&
		lhs.NumRays == rhs.NumRays &&
		lhs.RayMinRange == rhs.RayMinRange &&
		lhs.RaySpeedTime == rhs.RaySpeedTime &&
		lhs.SpeedInterp == rhs.SpeedInterp &&
		lhs.SpeedInterpMinSpeed == rhs.SpeedInterpMinSpeed &&
		lhs.SpeedInterpRange == rhs.SpeedInterpRange &&
		lhs.StartRadiusMultiplier == rhs.StartRadiusMultiplier;
	}
};

struct GcResetSimpleInteractionAction
{

	friend bool operator==(const GcResetSimpleInteractionAction& lhs, const GcResetSimpleInteractionAction& rhs) 
	{
		return true;
	}
};

struct GcRewardAbortTakeoff
{

	friend bool operator==(const GcRewardAbortTakeoff& lhs, const GcRewardAbortTakeoff& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
struct GcRewardAdvancePortalState
{
	NMS::NMSString0x20A PortalScanEvent;

	friend bool operator==(const GcRewardAdvancePortalState& lhs, const GcRewardAdvancePortalState& rhs) 
	{
		return lhs.PortalScanEvent == rhs.PortalScanEvent;
	}
};

struct GcRewardAssessCookedProduct
{
	int32_t AmountAverage;
	int32_t AmountBad;
	int32_t AmountBest;
	int32_t AmountBestUpper;
	int32_t AmountGood;
	int32_t AmountWorst;

	friend bool operator==(const GcRewardAssessCookedProduct& lhs, const GcRewardAssessCookedProduct& rhs) 
	{
		return lhs.AmountAverage == rhs.AmountAverage &&
		lhs.AmountBad == rhs.AmountBad &&
		lhs.AmountBest == rhs.AmountBest &&
		lhs.AmountBestUpper == rhs.AmountBestUpper &&
		lhs.AmountGood == rhs.AmountGood &&
		lhs.AmountWorst == rhs.AmountWorst;
	}
};

struct GcRewardCargo
{

	friend bool operator==(const GcRewardCargo& lhs, const GcRewardCargo& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardCustomExpeditionLogEntry
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 RewardID;
	bool FromIntervention;
	bool WhaleEvent;

	friend bool operator==(const GcRewardCustomExpeditionLogEntry& lhs, const GcRewardCustomExpeditionLogEntry& rhs) 
	{
		return lhs.LocID == rhs.LocID &&
		lhs.RewardID == rhs.RewardID &&
		lhs.FromIntervention == rhs.FromIntervention &&
		lhs.WhaleEvent == rhs.WhaleEvent;
	}
};

//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
struct GcRewardDamageTech
{
	NMS::NMSString0x10 TechToDamage_optional;
	NMS_GameComponents::GcTechnologyCategory Category;
	bool ShowDamageMessage;

	friend bool operator==(const GcRewardDamageTech& lhs, const GcRewardDamageTech& rhs) 
	{
		return lhs.TechToDamage_optional == rhs.TechToDamage_optional &&
		lhs.Category == rhs.Category &&
		lhs.ShowDamageMessage == rhs.ShowDamageMessage;
	}
};

//Dependency: GcRewardDestructRarities
struct GcRewardDestructTable
{
	NMS_GameComponents::GcRewardDestructRarities Categories[9];

	friend bool operator==(const GcRewardDestructTable& lhs, const GcRewardDestructTable& rhs) 
	{
		return std::equal(std::begin(lhs.Categories), std::end(lhs.Categories), std::begin(rhs.Categories));
	}
};

//Dependency: NMSString0x10
struct GcRewardDisplayTechWindow
{
	NMS::NMSString0x10 TechID;
	bool Damaged;
	bool FullBox;
	bool NeedsInstall;

	friend bool operator==(const GcRewardDisplayTechWindow& lhs, const GcRewardDisplayTechWindow& rhs) 
	{
		return lhs.TechID == rhs.TechID &&
		lhs.Damaged == rhs.Damaged &&
		lhs.FullBox == rhs.FullBox &&
		lhs.NeedsInstall == rhs.NeedsInstall;
	}
};

struct GcRewardEnableInteractionClass
{

	friend bool operator==(const GcRewardEnableInteractionClass& lhs, const GcRewardEnableInteractionClass& rhs) 
	{
		return true;
	}
};

struct GcRewardEndFrigateFlyby
{

	friend bool operator==(const GcRewardEndFrigateFlyby& lhs, const GcRewardEndFrigateFlyby& rhs) 
	{
		return true;
	}
};

struct GcRewardPurpleSystems
{
	bool Allow;

	friend bool operator==(const GcRewardPurpleSystems& lhs, const GcRewardPurpleSystems& rhs) 
	{
		return lhs.Allow == rhs.Allow;
	}
};

//Dependency: NMSString0x20A
struct GcRewardEndScanEvent
{
	NMS::NMSString0x20A EventID;

	friend bool operator==(const GcRewardEndScanEvent& lhs, const GcRewardEndScanEvent& rhs) 
	{
		return lhs.EventID == rhs.EventID;
	}
};

struct GcRewardEndSettlementExpedition
{
	enum class EndTypeEnum : uint32_t
	{
		Debrief = 0,
		Shutdown = 1,
	};

	NMS_GameComponents::GcRewardEndSettlementExpedition::EndTypeEnum EndType;

	friend bool operator==(const GcRewardEndSettlementExpedition& lhs, const GcRewardEndSettlementExpedition& rhs) 
	{
		return lhs.EndType == rhs.EndType;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkMaterialFlags
{
	enum class MaterialFlagEnum : uint32_t
	{
		_F01_DIFFUSEMAP = 0,
		_F02_SKINNED = 1,
		_F03_NORMALMAP = 2,
		_F04_FEATURESMAP = 3,
		_F05_DEPTH_EFFECT = 4,
		_F06 = 5,
		_F07_UNLIT = 6,
		_F08 = 7,
		_F09_TRANSPARENT = 8,
		_F10 = 9,
		_F11_ALPHACUTOUT = 10,
		_F12_BATCHED_BILLBOARD = 11,
		_F13_UV_EFFECT = 12,
		_F14 = 13,
		_F15_WIND = 14,
		_F16_DIFFUSE2MAP = 15,
		_F17 = 16,
		_F18 = 17,
		_F19_BILLBOARD = 18,
		_F20_PARALLAX = 19,
		_F21_VERTEXCUSTOM = 20,
		_F22_OCCLUSION_MAP = 21,
		_F23 = 22,
		_F24 = 23,
		_F25_MASKS_MAP = 24,
		_F26 = 25,
		_F27 = 26,
		_F28 = 27,
		_F29 = 28,
		_F30_REFRACTION = 29,
		_F31_DISPLACEMENT = 30,
		_F32_REFRACTION_MASK = 31,
		_F33_SHELLS = 32,
		_F34 = 33,
		_F35 = 34,
		_F36_DOUBLESIDED = 35,
		_F37_EXPLICIT_MOTION_VECTORS = 36,
		_F38 = 37,
		_F39 = 38,
		_F40 = 39,
		_F41 = 40,
		_F42_DETAIL_NORMAL = 41,
		_F43 = 42,
		_F44_IMPOSTER = 43,
		_F45 = 44,
		_F46 = 45,
		_F47_REFLECTION_PROBE = 46,
		_F48 = 47,
		_F49 = 48,
		_F50_DISABLE_POSTPROCESS = 49,
		_F51 = 50,
		_F52 = 51,
		_F53_COLOURISABLE = 52,
		_F54 = 53,
		_F55_MULTITEXTURE = 54,
		_F56_MATCH_GROUND = 55,
		_F57 = 56,
		_F58_USE_CENTRAL_NORMAL = 57,
		_F59_BIASED_REACTIVITY = 58,
		_F60 = 59,
		_F61 = 60,
		_F62 = 61,
		_F63_DISSOLVE = 62,
		_F64_RESERVED_FLAG_FOR_EARLY_Z_PATCHING_DO_NOT_USE = 63,
	};

	NMS_Toolkit::TkMaterialFlags::MaterialFlagEnum MaterialFlag;

	friend bool operator==(const TkMaterialFlags& lhs, const TkMaterialFlags& rhs) 
	{
		return lhs.MaterialFlag == rhs.MaterialFlag;
	}
};

//Dependency: Vector4i
//Dependency: VariableSizeString
struct TkMaterialUniform_UInt
{
	NMS::Vector4i Values;
	std::vector<NMS::Vector4i> ExtendedValues;
	NMS::VariableSizeString Name;

	friend bool operator==(const TkMaterialUniform_UInt& lhs, const TkMaterialUniform_UInt& rhs) 
	{
		return lhs.Values == rhs.Values &&
		lhs.ExtendedValues == rhs.ExtendedValues &&
		lhs.Name == rhs.Name;
	}
};

struct TkMaterialFxFlags
{
	enum class MaterialFxFlagEnum : uint32_t
	{
		_X01_DIFFUSEMAP = 0,
		_X02_SKINNED = 1,
		_X03_NORMALMAP = 2,
		_X04_FEATURESMAP = 3,
		_X05_INVERT_ALPHA = 4,
		_X06_BRIGHT_EDGE = 5,
		_X07_UNLIT = 6,
		_X08_REFLECTIVE = 7,
		_X09_TRANSPARENT = 8,
		_X10_NORECEIVESHADOW = 9,
		_X11_ALPHACUTOUT = 10,
		_X12_BATCHED_BILLBOARD = 11,
		_X13_UVANIMATION = 12,
		_X14_UVSCROLL = 13,
		_X15_WIND = 14,
		_X16_DIFFUSE2MAP = 15,
		_X17_DOUBLESIDED_KEEP_NORMALS = 16,
		_X18_UVTILES = 17,
		_X19_BILLBOARD = 18,
		_X20_PARALLAXMAP = 19,
		_X21_VERTEXCOLOUR = 20,
		_X22_TRANSPARENT_SCALAR = 21,
		_X23_TRANSLUCENT = 22,
		_X24_AOMAP = 23,
		_X25_ROUGHNESS_MASK = 24,
		_X26_IMAGE_BASED_LIGHTING = 25,
		_X27_VBTANGENT = 26,
		_X28_VBSKINNED = 27,
		_X29_VBCOLOUR = 28,
		_X30_REFRACTION = 29,
		_X31_DISPLACEMENT = 30,
		_X32_REFRACTION_MASK = 31,
		_X33_SHELLS = 32,
		_X34_GLOW = 33,
		_X35_GLOW_MASK = 34,
		_X36_DOUBLESIDED = 35,
		_X37_EXPLICIT_MOTION_VECTORS = 36,
		_X38_BENT_NORMALS = 37,
		_X39_METALLIC_MASK = 38,
		_X40_SUBSURFACE_MASK = 39,
		_X41_REFLECTANCE_MASK = 40,
		_X42_DETAIL_NORMAL = 41,
		_X43_NORMAL_TILING = 42,
		_X44_IMPOSTER = 43,
		_X45_VERTEX_BLEND = 44,
		_X46_BILLBOARD_AT = 45,
		_X47_REFLECTION_PROBE = 46,
		_X48_WARPED_DIFFUSE_LIGHTING = 47,
		_X49_DISABLE_AMBIENT = 48,
		_X50_DISABLE_POSTPROCESS = 49,
		_X51_DECAL_DIFFUSE = 50,
		_X52_DECAL_NORMAL = 51,
		_X53_COLOURISABLE = 52,
		_X54_COLOURMASK = 53,
		_X55_MULTITEXTURE = 54,
		_X56_MATCH_GROUND = 55,
		_X57_VERTEXALPHA_AO = 56,
		_X58_USE_CENTRAL_NORMAL = 57,
		_X59_BIASED_REACTIVITY = 58,
		_X60_ACUTE_ANGLE_FADE = 59,
		_X61_CLAMP_AMBIENT = 60,
		_X62_DETAIL_ALPHACUTOUT = 61,
		_X63_DISSOLVE = 62,
		_X64_RESERVED_FLAG_FOR_EARLY_Z_PATCHING_DO_NOT_USE = 63,
	};

	NMS_Toolkit::TkMaterialFxFlags::MaterialFxFlagEnum MaterialFxFlag;

	friend bool operator==(const TkMaterialFxFlags& lhs, const TkMaterialFxFlags& rhs) 
	{
		return lhs.MaterialFxFlag == rhs.MaterialFxFlag;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkMaterialSampler
{
	enum class TextureFilterModeEnum : uint32_t
	{
		None = 0,
		Bilinear = 1,
		Trilinear = 2,
	};

	enum class TextureAddressModeEnum : uint32_t
	{
		Wrap = 0,
		WrapUClampV = 1,
		Clamp = 2,
		ClampToBorder = 3,
		Mirror = 4,
	};

	NMS::NMSString0x20A MaterialAlternativeId;
	NMS::VariableSizeString Map;
	NMS::VariableSizeString Name;
	int32_t Anisotropy;
	NMS_Toolkit::TkMaterialSampler::TextureAddressModeEnum TextureAddressMode;
	NMS_Toolkit::TkMaterialSampler::TextureFilterModeEnum TextureFilterMode;
	bool IsCube;
	bool IsSRGB;
	bool UseCompression;
	bool UseMipMaps;

	friend bool operator==(const TkMaterialSampler& lhs, const TkMaterialSampler& rhs) 
	{
		return lhs.MaterialAlternativeId == rhs.MaterialAlternativeId &&
		lhs.Map == rhs.Map &&
		lhs.Name == rhs.Name &&
		lhs.Anisotropy == rhs.Anisotropy &&
		lhs.TextureAddressMode == rhs.TextureAddressMode &&
		lhs.TextureFilterMode == rhs.TextureFilterMode &&
		lhs.IsCube == rhs.IsCube &&
		lhs.IsSRGB == rhs.IsSRGB &&
		lhs.UseCompression == rhs.UseCompression &&
		lhs.UseMipMaps == rhs.UseMipMaps;
	}
};

//Dependency: Vector4f
//Dependency: VariableSizeString
struct TkMaterialUniform_Float
{
	NMS::Vector4f Values;
	std::vector<NMS::Vector4f> ExtendedValues;
	NMS::VariableSizeString Name;

	friend bool operator==(const TkMaterialUniform_Float& lhs, const TkMaterialUniform_Float& rhs) 
	{
		return lhs.Values == rhs.Values &&
		lhs.ExtendedValues == rhs.ExtendedValues &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: TkMaterialFlags
//Dependency: TkMaterialUniform_UInt
//Dependency: TkMaterialFxFlags
//Dependency: TkMaterialSampler
//Dependency: TkMaterialUniform_Float
//Dependency: NMSString0x20
//Dependency: VariableSizeString
struct TkMaterialData
{
	std::vector<NMS_Toolkit::TkMaterialFlags> Flags;
	std::vector<NMS_Toolkit::TkMaterialFxFlags> FxFlags;
	NMS::VariableSizeString Link;
	NMS::VariableSizeString Metamaterial;
	NMS::VariableSizeString Name;
	std::vector<NMS_Toolkit::TkMaterialSampler> Samplers;
	NMS::VariableSizeString Shader;
	std::vector<NMS_Toolkit::TkMaterialUniform_Float> Uniforms_Float;
	std::vector<NMS_Toolkit::TkMaterialUniform_UInt> Uniforms_UInt;
	int64_t ShaderMillDataHash;
	int32_t TransparencyLayerID;
	NMS::NMSString0x20 Class;
	bool CastShadow;
	bool CreateFur;
	bool DisableZTest;
	bool EnableLodFade;

	friend bool operator==(const TkMaterialData& lhs, const TkMaterialData& rhs) 
	{
		return lhs.Flags == rhs.Flags &&
		lhs.FxFlags == rhs.FxFlags &&
		lhs.Link == rhs.Link &&
		lhs.Metamaterial == rhs.Metamaterial &&
		lhs.Name == rhs.Name &&
		lhs.Samplers == rhs.Samplers &&
		lhs.Shader == rhs.Shader &&
		lhs.Uniforms_Float == rhs.Uniforms_Float &&
		lhs.Uniforms_UInt == rhs.Uniforms_UInt &&
		lhs.ShaderMillDataHash == rhs.ShaderMillDataHash &&
		lhs.TransparencyLayerID == rhs.TransparencyLayerID &&
		lhs.Class == rhs.Class &&
		lhs.CastShadow == rhs.CastShadow &&
		lhs.CreateFur == rhs.CreateFur &&
		lhs.DisableZTest == rhs.DisableZTest &&
		lhs.EnableLodFade == rhs.EnableLodFade;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20
struct GcRewardFillInventoryWithBrokenSlots
{
	enum class InventoryToBreakEnum : uint32_t
	{
		Ship = 0,
		ShipTech = 1,
		Freighter = 2,
		FreighterTech = 3,
		Vehicle = 4,
		VehicleTech = 5,
		Weapon = 6,
	};

	int32_t CustomTechCount;
	int32_t CustomTechOffset;
	float FractionOfInventoryToBreak;
	NMS_GameComponents::GcRewardFillInventoryWithBrokenSlots::InventoryToBreakEnum InventoryToBreak;
	NMS::NMSString0x20 CustomTechFormat;

	friend bool operator==(const GcRewardFillInventoryWithBrokenSlots& lhs, const GcRewardFillInventoryWithBrokenSlots& rhs) 
	{
		return lhs.CustomTechCount == rhs.CustomTechCount &&
		lhs.CustomTechOffset == rhs.CustomTechOffset &&
		lhs.FractionOfInventoryToBreak == rhs.FractionOfInventoryToBreak &&
		lhs.InventoryToBreak == rhs.InventoryToBreak &&
		lhs.CustomTechFormat == rhs.CustomTechFormat;
	}
};

//Dependency: GcItemQuality
struct GcRewardFishRelease
{
	NMS_GameComponents::GcItemQuality Rarity;

	friend bool operator==(const GcRewardFishRelease& lhs, const GcRewardFishRelease& rhs) 
	{
		return lhs.Rarity == rhs.Rarity;
	}
};

struct GcRewardForceDiscoverSystem
{
	bool Silent;

	friend bool operator==(const GcRewardForceDiscoverSystem& lhs, const GcRewardForceDiscoverSystem& rhs) 
	{
		return lhs.Silent == rhs.Silent;
	}
};

//Dependency: GcDiscoveryType
//Dependency: GcScannerIconTypes
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcScannableComponentData
{
	enum class ScannableTypeEnum : uint32_t
	{
		Binoculars = 0,
		BinocularsHotspots = 1,
		Scanner = 2,
		Marker = 3,
		SpaceBattleTarget = 4,
		None = 5,
	};

	NMS::NMSString0x20A FreighterObjectAlreadyUsedLocID;
	std::vector<NMS::NMSString0x10> ValidMissionSurveyIds;
	float AlwaysShowRange;
	NMS_GameComponents::GcDiscoveryType BinocsDiscoIconOverride;
	float CompassRangeMultiplier;
	NMS_GameComponents::GcScannerIconTypes Icon;
	float MarkerOffsetOverride;
	float MinDisplayDistanceOverride;
	NMS_GameComponents::GcScannableComponentData::ScannableTypeEnum ScannableType;
	float ScanRange;
	float ScanTime;
	NMS::NMSString0x20 ScanName;
	bool AllowedToMerge;
	bool CanTagIcon;
	bool ClearTagOnArrival;
	bool DisableIfBuildingPart;
	bool DisableIfInBase;
	bool GetIconAndNameFromSettlementBuilding;
	bool IsPlacedMarker;
	bool MarkerActiveWithNodeInactive;
	bool ShowInFreighterBranchRoom;
	bool TellPlayerIfFreighterObjectUsed;
	bool UseModelNode;

	friend bool operator==(const GcScannableComponentData& lhs, const GcScannableComponentData& rhs) 
	{
		return lhs.FreighterObjectAlreadyUsedLocID == rhs.FreighterObjectAlreadyUsedLocID &&
		lhs.ValidMissionSurveyIds == rhs.ValidMissionSurveyIds &&
		lhs.AlwaysShowRange == rhs.AlwaysShowRange &&
		lhs.BinocsDiscoIconOverride == rhs.BinocsDiscoIconOverride &&
		lhs.CompassRangeMultiplier == rhs.CompassRangeMultiplier &&
		lhs.Icon == rhs.Icon &&
		lhs.MarkerOffsetOverride == rhs.MarkerOffsetOverride &&
		lhs.MinDisplayDistanceOverride == rhs.MinDisplayDistanceOverride &&
		lhs.ScannableType == rhs.ScannableType &&
		lhs.ScanRange == rhs.ScanRange &&
		lhs.ScanTime == rhs.ScanTime &&
		lhs.ScanName == rhs.ScanName &&
		lhs.AllowedToMerge == rhs.AllowedToMerge &&
		lhs.CanTagIcon == rhs.CanTagIcon &&
		lhs.ClearTagOnArrival == rhs.ClearTagOnArrival &&
		lhs.DisableIfBuildingPart == rhs.DisableIfBuildingPart &&
		lhs.DisableIfInBase == rhs.DisableIfInBase &&
		lhs.GetIconAndNameFromSettlementBuilding == rhs.GetIconAndNameFromSettlementBuilding &&
		lhs.IsPlacedMarker == rhs.IsPlacedMarker &&
		lhs.MarkerActiveWithNodeInactive == rhs.MarkerActiveWithNodeInactive &&
		lhs.ShowInFreighterBranchRoom == rhs.ShowInFreighterBranchRoom &&
		lhs.TellPlayerIfFreighterObjectUsed == rhs.TellPlayerIfFreighterObjectUsed &&
		lhs.UseModelNode == rhs.UseModelNode;
	}
};

struct GcRewardForceOpenGalaxyMap
{
	bool BlockWarp;

	friend bool operator==(const GcRewardForceOpenGalaxyMap& lhs, const GcRewardForceOpenGalaxyMap& rhs) 
	{
		return lhs.BlockWarp == rhs.BlockWarp;
	}
};

struct GcSolarSystemClass
{
	enum class SolarSystemClassEnum : uint32_t
	{
		Default = 0,
		Initial = 1,
		Anomaly = 2,
		GameStart = 3,
	};

	NMS_GameComponents::GcSolarSystemClass::SolarSystemClassEnum SolarSystemClass;

	friend bool operator==(const GcSolarSystemClass& lhs, const GcSolarSystemClass& rhs) 
	{
		return lhs.SolarSystemClass == rhs.SolarSystemClass;
	}
};

//Dependency: NMSString0x10
struct GcRewardForgetSpecificTechRecipe
{
	std::vector<NMS::NMSString0x10> TechList;

	friend bool operator==(const GcRewardForgetSpecificTechRecipe& lhs, const GcRewardForgetSpecificTechRecipe& rhs) 
	{
		return lhs.TechList == rhs.TechList;
	}
};

struct GcRewardFreighterMegaWarp
{

	friend bool operator==(const GcRewardFreighterMegaWarp& lhs, const GcRewardFreighterMegaWarp& rhs) 
	{
		return true;
	}
};

struct GcRewardHealth
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool SilentUnlessShieldAtMax;

	friend bool operator==(const GcRewardHealth& lhs, const GcRewardHealth& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.SilentUnlessShieldAtMax == rhs.SilentUnlessShieldAtMax;
	}
};

//Dependency: NMSString0x10
struct GcRewardInteractionSketchBroadcast
{
	NMS::NMSString0x10 BroadcastValue;

	friend bool operator==(const GcRewardInteractionSketchBroadcast& lhs, const GcRewardInteractionSketchBroadcast& rhs) 
	{
		return lhs.BroadcastValue == rhs.BroadcastValue;
	}
};

struct GcRewardInventorySlots
{
	int32_t Amount;

	friend bool operator==(const GcRewardInventorySlots& lhs, const GcRewardInventorySlots& rhs) 
	{
		return lhs.Amount == rhs.Amount;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkSceneBoneRemapping
{
	NMS::NMSString0x80 FromBone;
	NMS::NMSString0x80 ToBone;

	friend bool operator==(const TkSceneBoneRemapping& lhs, const TkSceneBoneRemapping& rhs) 
	{
		return lhs.FromBone == rhs.FromBone &&
		lhs.ToBone == rhs.ToBone;
	}
};

//Dependency: TkSceneBoneRemapping
struct TkSceneBoneRemappingTable
{
	std::vector<NMS_Toolkit::TkSceneBoneRemapping> BoneMappings;

	friend bool operator==(const TkSceneBoneRemappingTable& lhs, const TkSceneBoneRemappingTable& rhs) 
	{
		return lhs.BoneMappings == rhs.BoneMappings;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardJetpackBoost
{
	float Duration;
	float ForwardBoost;
	float IgnitionBoost;
	float UpBoost;

	friend bool operator==(const GcRewardJetpackBoost& lhs, const GcRewardJetpackBoost& rhs) 
	{
		return lhs.Duration == rhs.Duration &&
		lhs.ForwardBoost == rhs.ForwardBoost &&
		lhs.IgnitionBoost == rhs.IgnitionBoost &&
		lhs.UpBoost == rhs.UpBoost;
	}
};

//Dependency: NMSString0x10
struct GcRewardMissionMessageSeeded
{
	NMS::NMSString0x10 MessageID;
	NMS::NMSString0x10 SpecificMissionID;
	bool BroadcastInMultiplayer;
	bool BroadcastToActiveMultiplayerMission;

	friend bool operator==(const GcRewardMissionMessageSeeded& lhs, const GcRewardMissionMessageSeeded& rhs) 
	{
		return lhs.MessageID == rhs.MessageID &&
		lhs.SpecificMissionID == rhs.SpecificMissionID &&
		lhs.BroadcastInMultiplayer == rhs.BroadcastInMultiplayer &&
		lhs.BroadcastToActiveMultiplayerMission == rhs.BroadcastToActiveMultiplayerMission;
	}
};

//Dependency: NMSString0x10
struct GcRewardMissionMessageToMatchingSeeds
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastInMultiplayer;

	friend bool operator==(const GcRewardMissionMessageToMatchingSeeds& lhs, const GcRewardMissionMessageToMatchingSeeds& rhs) 
	{
		return lhs.MessageID == rhs.MessageID &&
		lhs.BroadcastInMultiplayer == rhs.BroadcastInMultiplayer;
	}
};

//Dependency: GcCurrency
struct GcRewardMoney
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcCurrency Currency;
	bool RoundNumber;

	friend bool operator==(const GcRewardMoney& lhs, const GcRewardMoney& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Currency == rhs.Currency &&
		lhs.RoundNumber == rhs.RoundNumber;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificProductRecipes
{
	NMS::NMSString0x20A SetName;
	NMS::NMSString0x10 DisplayProductId;
	std::vector<NMS::NMSString0x10> ProductIds;
	bool Silent;

	friend bool operator==(const GcRewardMultiSpecificProductRecipes& lhs, const GcRewardMultiSpecificProductRecipes& rhs) 
	{
		return lhs.SetName == rhs.SetName &&
		lhs.DisplayProductId == rhs.DisplayProductId &&
		lhs.ProductIds == rhs.ProductIds &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificProducts
{
	NMS::NMSString0x20A SetName;
	std::vector<NMS::NMSString0x10> ProductIds;
	bool UseListPopup;

	friend bool operator==(const GcRewardMultiSpecificProducts& lhs, const GcRewardMultiSpecificProducts& rhs) 
	{
		return lhs.SetName == rhs.SetName &&
		lhs.ProductIds == rhs.ProductIds &&
		lhs.UseListPopup == rhs.UseListPopup;
	}
};

//Dependency: NMSString0x40
struct GcRewardNetworkPlayer
{
	NMS::NMSString0x40 RewardWord;

	friend bool operator==(const GcRewardNetworkPlayer& lhs, const GcRewardNetworkPlayer& rhs) 
	{
		return lhs.RewardWord == rhs.RewardWord;
	}
};

//Dependency: NMSString0x20A
struct GcRewardOpenFreeFreighter
{
	NMS::NMSString0x20A NextInteractionIfBought;
	NMS::NMSString0x20A NextInteractionIfNotBought;
	bool ReinteractWhenBought;

	friend bool operator==(const GcRewardOpenFreeFreighter& lhs, const GcRewardOpenFreeFreighter& rhs) 
	{
		return lhs.NextInteractionIfBought == rhs.NextInteractionIfBought &&
		lhs.NextInteractionIfNotBought == rhs.NextInteractionIfNotBought &&
		lhs.ReinteractWhenBought == rhs.ReinteractWhenBought;
	}
};

struct GcRewardOverridePulseEncounterChance
{
	float Chance;

	friend bool operator==(const GcRewardOverridePulseEncounterChance& lhs, const GcRewardOverridePulseEncounterChance& rhs) 
	{
		return lhs.Chance == rhs.Chance;
	}
};

//Dependency: GcCreaturePetRewardActions
//Dependency: NMSString0x10
struct GcRewardPetAction
{
	NMS::NMSString0x10 EffectID;
	NMS::NMSString0x10 PlayerEmoteID;
	NMS::NMSString0x10 SpecialHarvestID;
	NMS_GameComponents::GcCreaturePetRewardActions PetAction;
	int32_t SpecialHarvestMul;

	friend bool operator==(const GcRewardPetAction& lhs, const GcRewardPetAction& rhs) 
	{
		return lhs.EffectID == rhs.EffectID &&
		lhs.PlayerEmoteID == rhs.PlayerEmoteID &&
		lhs.SpecialHarvestID == rhs.SpecialHarvestID &&
		lhs.PetAction == rhs.PetAction &&
		lhs.SpecialHarvestMul == rhs.SpecialHarvestMul;
	}
};

struct GcRewardPetEgg
{

	friend bool operator==(const GcRewardPetEgg& lhs, const GcRewardPetEgg& rhs) 
	{
		return true;
	}
};

struct GcRewardPetEggHatch
{
	int32_t EggIndex;

	friend bool operator==(const GcRewardPetEggHatch& lhs, const GcRewardPetEggHatch& rhs) 
	{
		return lhs.EggIndex == rhs.EggIndex;
	}
};

struct GcRewardPlanetSubstance
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool UseFuelMultiplier;

	friend bool operator==(const GcRewardPlanetSubstance& lhs, const GcRewardPlanetSubstance& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.DisableMultiplier == rhs.DisableMultiplier &&
		lhs.RewardAsBlobs == rhs.RewardAsBlobs &&
		lhs.UseFuelMultiplier == rhs.UseFuelMultiplier;
	}
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardSubstance
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory ItemCatagory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool UseFuelMultiplier;

	friend bool operator==(const GcRewardSubstance& lhs, const GcRewardSubstance& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ItemCatagory == rhs.ItemCatagory &&
		lhs.ItemLevel == rhs.ItemLevel &&
		lhs.ItemRarity == rhs.ItemRarity &&
		lhs.DisableMultiplier == rhs.DisableMultiplier &&
		lhs.RewardAsBlobs == rhs.RewardAsBlobs &&
		lhs.UseFuelMultiplier == rhs.UseFuelMultiplier;
	}
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
struct GcRewardProceduralProduct
{
	NMS::NMSString0x20A OSDMessage;
	int32_t FreighterTechQualityOverride;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcProceduralProductCategory Type;
	bool OverrideRarity;
	bool SubIfPlayerAlreadyHasOne;

	friend bool operator==(const GcRewardProceduralProduct& lhs, const GcRewardProceduralProduct& rhs) 
	{
		return lhs.OSDMessage == rhs.OSDMessage &&
		lhs.FreighterTechQualityOverride == rhs.FreighterTechQualityOverride &&
		lhs.Rarity == rhs.Rarity &&
		lhs.Type == rhs.Type &&
		lhs.OverrideRarity == rhs.OverrideRarity &&
		lhs.SubIfPlayerAlreadyHasOne == rhs.SubIfPlayerAlreadyHasOne;
	}
};

struct GcRewardProceduralProductFromBiome
{

	friend bool operator==(const GcRewardProceduralProductFromBiome& lhs, const GcRewardProceduralProductFromBiome& rhs) 
	{
		return true;
	}
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardProductRecipe
{
	NMS_GameComponents::GcRealitySubstanceCategory ItemCatagory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool AllowedProductTypes[11];
	bool IgnoreRarity;

	friend bool operator==(const GcRewardProductRecipe& lhs, const GcRewardProductRecipe& rhs) 
	{
		return lhs.ItemCatagory == rhs.ItemCatagory &&
		lhs.ItemLevel == rhs.ItemLevel &&
		lhs.ItemRarity == rhs.ItemRarity &&
		std::equal(std::begin(lhs.AllowedProductTypes), std::end(lhs.AllowedProductTypes), std::begin(rhs.AllowedProductTypes)) &&
		lhs.IgnoreRarity == rhs.IgnoreRarity;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAudioAnimTrigger
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct TkAudioComponentData
{
	NMS::NMSString0x10 AmbientState;
	std::vector<NMS_Toolkit::TkAudioAnimTrigger> AnimTriggers;
	std::vector<NMSTemplate> Emitters;
	int32_t MaxDistance;
	float OcclusionRadius;
	float OcclusionRange;
	NMS::NMSString0x80 Ambient;
	NMS::NMSString0x80 Shutdown;
	bool LocalOnly;

	friend bool operator==(const TkAudioComponentData& lhs, const TkAudioComponentData& rhs) 
	{
		return lhs.AmbientState == rhs.AmbientState &&
		lhs.AnimTriggers == rhs.AnimTriggers &&
		lhs.Emitters == rhs.Emitters &&
		lhs.MaxDistance == rhs.MaxDistance &&
		lhs.OcclusionRadius == rhs.OcclusionRadius &&
		lhs.OcclusionRange == rhs.OcclusionRange &&
		lhs.Ambient == rhs.Ambient &&
		lhs.Shutdown == rhs.Shutdown &&
		lhs.LocalOnly == rhs.LocalOnly;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcRewardReinitialise
{
	NMS::NMSString0x20A OverrideMessage;
	bool DoIntroNextWarp;

	friend bool operator==(const GcRewardReinitialise& lhs, const GcRewardReinitialise& rhs) 
	{
		return lhs.OverrideMessage == rhs.OverrideMessage &&
		lhs.DoIntroNextWarp == rhs.DoIntroNextWarp;
	}
};

struct GcRewardRemoveSettlementJobPerk
{

	friend bool operator==(const GcRewardRemoveSettlementJobPerk& lhs, const GcRewardRemoveSettlementJobPerk& rhs) 
	{
		return true;
	}
};

struct GcRewardSalvageMultitool
{

	friend bool operator==(const GcRewardSalvageMultitool& lhs, const GcRewardSalvageMultitool& rhs) 
	{
		return true;
	}
};

struct GcRewardScanEventNearestBuilding
{
	bool DoAerialScan;
	bool IncludeVisited;

	friend bool operator==(const GcRewardScanEventNearestBuilding& lhs, const GcRewardScanEventNearestBuilding& rhs) 
	{
		return lhs.DoAerialScan == rhs.DoAerialScan &&
		lhs.IncludeVisited == rhs.IncludeVisited;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAnimMaskBone
//Dependency: NMSString0x20A
struct TkAnimMask
{
	NMS::NMSString0x20A Id;
	std::vector<NMS_Toolkit::TkAnimMaskBone> Bones;

	friend bool operator==(const TkAnimMask& lhs, const TkAnimMask& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Bones == rhs.Bones;
	}
};

//Dependency: TkAnimMask
struct TkAnimMaskTable
{
	std::vector<NMS_Toolkit::TkAnimMask> Table;

	friend bool operator==(const TkAnimMaskTable& lhs, const TkAnimMaskTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardScanEventOutcome
{
	enum class RewardScanEventOutcomeEnum : uint32_t
	{
		Success = 0,
		Interstellar = 1,
		BadData = 2,
		FailedToFindBase = 3,
		Duplicate = 4,
		NoBuilding = 5,
		NoSystem = 6,
	};

	NMS_GameComponents::GcRewardScanEventOutcome::RewardScanEventOutcomeEnum RewardScanEventOutcome;

	friend bool operator==(const GcRewardScanEventOutcome& lhs, const GcRewardScanEventOutcome& rhs) 
	{
		return lhs.RewardScanEventOutcome == rhs.RewardScanEventOutcome;
	}
};

//Dependency: NMSString0x10
struct GcRewardSecondarySubstance
{
	NMS::NMSString0x10 ID;
	float AmountFactor;
	bool RewardAsBlobs;

	friend bool operator==(const GcRewardSecondarySubstance& lhs, const GcRewardSecondarySubstance& rhs) 
	{
		return lhs.ID == rhs.ID &&
		lhs.AmountFactor == rhs.AmountFactor &&
		lhs.RewardAsBlobs == rhs.RewardAsBlobs;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSendChatMessage
{
	NMS::NMSString0x20A CustomText;
	NMS::NMSString0x10 StatusMessageId;

	friend bool operator==(const GcRewardSendChatMessage& lhs, const GcRewardSendChatMessage& rhs) 
	{
		return lhs.CustomText == rhs.CustomText &&
		lhs.StatusMessageId == rhs.StatusMessageId;
	}
};

struct GcSkiffComponentData
{
	float ArrivalTime;
	float MaximumTravelForce;

	friend bool operator==(const GcSkiffComponentData& lhs, const GcSkiffComponentData& rhs) 
	{
		return lhs.ArrivalTime == rhs.ArrivalTime &&
		lhs.MaximumTravelForce == rhs.MaximumTravelForce;
	}
};

//Dependency: NMSString0x100
//Dependency: NMSString0x20
struct GcShipDataNames
{
	NMS::NMSString0x100 ResourceName;
	NMS::NMSString0x20 DataName;

	friend bool operator==(const GcShipDataNames& lhs, const GcShipDataNames& rhs) 
	{
		return lhs.ResourceName == rhs.ResourceName &&
		lhs.DataName == rhs.DataName;
	}
};

struct GcRewardSetAbandonedFreighterMissionState
{
	enum class AbandonedFreighterMissionStateEnum : uint32_t
	{
		EndRoomComplete = 0,
		CrewManifestRead = 1,
		CaptainsLogRead = 2,
		HazardOn = 3,
		SlowWalkOn = 4,
		OpenDoors = 5,
	};

	NMS_GameComponents::GcRewardSetAbandonedFreighterMissionState::AbandonedFreighterMissionStateEnum AbandonedFreighterMissionState;
	bool Silent;

	friend bool operator==(const GcRewardSetAbandonedFreighterMissionState& lhs, const GcRewardSetAbandonedFreighterMissionState& rhs) 
	{
		return lhs.AbandonedFreighterMissionState == rhs.AbandonedFreighterMissionState &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: GcInteractionMissionState
//Dependency: GcInteractionType
struct GcRewardSetInteractionMissionState
{
	NMS_GameComponents::GcInteractionMissionState MissionState;
	NMS_GameComponents::GcInteractionType SetForInteractionClassInMyBuilding;
	bool SetForThisInteraction;

	friend bool operator==(const GcRewardSetInteractionMissionState& lhs, const GcRewardSetInteractionMissionState& rhs) 
	{
		return lhs.MissionState == rhs.MissionState &&
		lhs.SetForInteractionClassInMyBuilding == rhs.SetForInteractionClassInMyBuilding &&
		lhs.SetForThisInteraction == rhs.SetForThisInteraction;
	}
};

//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcRewardSetInteractionSeenBitmask
{
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcInteractionType InteractionType;
	int32_t OverrideIndex;

	friend bool operator==(const GcRewardSetInteractionSeenBitmask& lhs, const GcRewardSetInteractionSeenBitmask& rhs) 
	{
		return lhs.Stat == rhs.Stat &&
		lhs.InteractionType == rhs.InteractionType &&
		lhs.OverrideIndex == rhs.OverrideIndex;
	}
};

struct GcRewardSettlementJobGift
{

	friend bool operator==(const GcRewardSettlementJobGift& lhs, const GcRewardSettlementJobGift& rhs) 
	{
		return true;
	}
};

//Dependency: GcBuildingClassification
struct GcRewardSettlementProgress
{
	NMS_GameComponents::GcBuildingClassification BuildingType;
	bool UseInteractionBuildingType;

	friend bool operator==(const GcRewardSettlementProgress& lhs, const GcRewardSettlementProgress& rhs) 
	{
		return lhs.BuildingType == rhs.BuildingType &&
		lhs.UseInteractionBuildingType == rhs.UseInteractionBuildingType;
	}
};

//Dependency: GcSettlementStatChange
struct GcRewardSettlementStat
{
	NMS_GameComponents::GcSettlementStatChange StatToAward;
	bool Silent;

	friend bool operator==(const GcRewardSettlementStat& lhs, const GcRewardSettlementStat& rhs) 
	{
		return lhs.StatToAward == rhs.StatToAward &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: GcPersistentBaseTypes
struct GcRewardUpgradeBase
{
	enum class UpgradeBaseTypeEnum : uint32_t
	{
		AllMatching = 0,
		NearestMatching = 1,
	};

	std::vector<NMS_GameComponents::GcPersistentBaseTypes> MatchingBaseTypes;
	NMS_GameComponents::GcRewardUpgradeBase::UpgradeBaseTypeEnum UpgradeBaseType;

	friend bool operator==(const GcRewardUpgradeBase& lhs, const GcRewardUpgradeBase& rhs) 
	{
		return lhs.MatchingBaseTypes == rhs.MatchingBaseTypes &&
		lhs.UpgradeBaseType == rhs.UpgradeBaseType;
	}
};

struct GcRewardShield
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool ShowOSDOnFail;
	bool ShowOSDOnSuccess;

	friend bool operator==(const GcRewardShield& lhs, const GcRewardShield& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.ShowOSDOnFail == rhs.ShowOSDOnFail &&
		lhs.ShowOSDOnSuccess == rhs.ShowOSDOnSuccess;
	}
};

struct GcRewardShipAssistance
{
	enum class AssistanceTypeEnum : uint32_t
	{
		Police = 0,
		Wingmen = 1,
	};

	NMS_GameComponents::GcRewardShipAssistance::AssistanceTypeEnum AssistanceType;
	float Time;

	friend bool operator==(const GcRewardShipAssistance& lhs, const GcRewardShipAssistance& rhs) 
	{
		return lhs.AssistanceType == rhs.AssistanceType &&
		lhs.Time == rhs.Time;
	}
};

//Dependency: GcShipMessage
struct GcRewardShipMessage
{
	NMS_GameComponents::GcShipMessage ShipMessage;

	friend bool operator==(const GcRewardShipMessage& lhs, const GcRewardShipMessage& rhs) 
	{
		return lhs.ShipMessage == rhs.ShipMessage;
	}
};

//Dependency: NMSString0x10
struct GcRewardShipSlot
{
	NMS::NMSString0x10 Cost;
	int32_t NumTokens;
	bool AwardCostAndOpenWindow;
	bool FallbackOpenWindowIfBlocked;
	bool IsAlien;

	friend bool operator==(const GcRewardShipSlot& lhs, const GcRewardShipSlot& rhs) 
	{
		return lhs.Cost == rhs.Cost &&
		lhs.NumTokens == rhs.NumTokens &&
		lhs.AwardCostAndOpenWindow == rhs.AwardCostAndOpenWindow &&
		lhs.FallbackOpenWindowIfBlocked == rhs.FallbackOpenWindowIfBlocked &&
		lhs.IsAlien == rhs.IsAlien;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcPlanetRingData
//Dependency: Vector3f
//Dependency: GcAsteroidSystemGenerationData
//Dependency: GcAISpaceshipWeightingData
//Dependency: NMSString0x10
//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcSolarGenerationGlobals
{
	NMS_GameComponents::GcPlanetRingData PlanetRingsMax;
	NMS_GameComponents::GcPlanetRingData PlanetRingsMin;
	NMS::Vector3f SolarSystemSize;
	std::vector<NMS_GameComponents::GcAsteroidSystemGenerationData> AsteroidSettings;
	NMS::NMSString0x10 CommonAsteroidResourceFuel;
	NMS::NMSString0x10 CommonAsteroidResourceMain;
	NMS::NMSString0x10 CommonAsteroidResourceProduct;
	NMS::NMSString0x10 CommonAsteroidResourceSecondary;
	NMS::NMSString0x10 RareAsteroidDataProduct;
	NMS::NMSString0x10 RareAsteroidResource;
	NMS::NMSString0x10 RareAsteroidResourceFuel;
	std::vector<float> SpaceshipSpawnFreqMultipliers;
	std::vector<NMS_GameComponents::GcAISpaceshipWeightingData> SpaceshipWeightings;
	float AbandonedSystemProbability[5];
	float EmptySystemProbability[5];
	float ExtremePlanetChance[5];
	float PirateSystemProbability[5];
	NMS::Vector2f PerPlanetGenerationAngleChangeDegreesRange;
	NMS::Vector2f PerPlanetGenerationElevationChangeDegreesRange;
	NMS::Vector2f RareAsteroidNoiseRangeLotsOfRares;
	NMS::Vector2f RareAsteroidNoiseRangeSomeRares;
	NMS::Vector2f SpawnPointStationToPlanetInterpRange;
	float AsteroidAnomalyAvoidRadius;
	float AsteroidLotsOfRaresOdds;
	int32_t AsteroidNoiseOctaves;
	float AsteroidSomeRaresOdds;
	float AsteroidSpaceStationAvoidRadius;
	float AsteroidWarpInAreaAvoidRadius;
	float AsteroidCreatureRichSystemProbability;
	int32_t CivilianTraderSpaceshipsCacheCount;
	int32_t CommonAsteroidMaxResources;
	int32_t CommonAsteroidMinResources;
	int32_t CommonAsteroidResourceFuelMultiplier;
	float CommonAsteroidResourceFuelOdds;
	float CommonAsteroidResourceProductOdds;
	float CommonAsteroidResourceSecondaryOdds;
	NMS_GameComponents::GcCombatTimerDifficultyOption CorruptSentinelBuildingCheckDifficulty;
	int32_t FuelAsteroidMultiplier;
	int32_t GenerateForcedNumberPlanets;
	float LargeAsteroidFadeTime;
	int32_t LocatorScatterChanceOfCapitalShips;
	int32_t LocatorScatterChanceOfPirates;
	int32_t LocatorScatterMaxCount;
	float LocatorScatterMaxDistanceFromPlanet;
	int32_t LocatorScatterMinCount;
	int32_t PercentChanceExtraPrime;
	float PirateClassShipOverrideProbability;
	float PirateClassShipOverrideProbabilityPirateSystem;
	float PlanetInvalidAsteroidZone;
	float PlanetRingProbability;
	float RareAsteroidDataProductOdds;
	int32_t RareAsteroidMaxResources;
	int32_t RareAsteroidMinResources;
	float RareAsteroidResourceFuelOdds;
	float RareAsteroidSystemOddsBlue;
	float RareAsteroidSystemOddsGreen;
	float RareAsteroidSystemOddsPurple;
	float RareAsteroidSystemOddsRed;
	float RareAsteroidSystemOddsYellow;
	float SolarSystemMaximumRadius;
	float SolarSystemMaximumRadiusMassive;
	float SparseAsteroidSpread;
	float StationSpawnAvoidRadius;
	NMS_Toolkit::TkCurveType AsteroidScaleVarianceCurve;
	bool AsteroidsCheckNoise;
	bool AsteroidsEnabled;
	bool GenerateMaximumSolarSystem;
	bool MassiveSolarSystems;
	bool UseSingleRacePerSystem;
	bool UseCorruptSentinelLUT;

	friend bool operator==(const GcSolarGenerationGlobals& lhs, const GcSolarGenerationGlobals& rhs) 
	{
		return lhs.PlanetRingsMax == rhs.PlanetRingsMax &&
		lhs.PlanetRingsMin == rhs.PlanetRingsMin &&
		lhs.SolarSystemSize == rhs.SolarSystemSize &&
		lhs.AsteroidSettings == rhs.AsteroidSettings &&
		lhs.CommonAsteroidResourceFuel == rhs.CommonAsteroidResourceFuel &&
		lhs.CommonAsteroidResourceMain == rhs.CommonAsteroidResourceMain &&
		lhs.CommonAsteroidResourceProduct == rhs.CommonAsteroidResourceProduct &&
		lhs.CommonAsteroidResourceSecondary == rhs.CommonAsteroidResourceSecondary &&
		lhs.RareAsteroidDataProduct == rhs.RareAsteroidDataProduct &&
		lhs.RareAsteroidResource == rhs.RareAsteroidResource &&
		lhs.RareAsteroidResourceFuel == rhs.RareAsteroidResourceFuel &&
		lhs.SpaceshipSpawnFreqMultipliers == rhs.SpaceshipSpawnFreqMultipliers &&
		lhs.SpaceshipWeightings == rhs.SpaceshipWeightings &&
		std::equal(std::begin(lhs.AbandonedSystemProbability), std::end(lhs.AbandonedSystemProbability), std::begin(rhs.AbandonedSystemProbability)) &&
		std::equal(std::begin(lhs.EmptySystemProbability), std::end(lhs.EmptySystemProbability), std::begin(rhs.EmptySystemProbability)) &&
		std::equal(std::begin(lhs.ExtremePlanetChance), std::end(lhs.ExtremePlanetChance), std::begin(rhs.ExtremePlanetChance)) &&
		std::equal(std::begin(lhs.PirateSystemProbability), std::end(lhs.PirateSystemProbability), std::begin(rhs.PirateSystemProbability)) &&
		lhs.PerPlanetGenerationAngleChangeDegreesRange == rhs.PerPlanetGenerationAngleChangeDegreesRange &&
		lhs.PerPlanetGenerationElevationChangeDegreesRange == rhs.PerPlanetGenerationElevationChangeDegreesRange &&
		lhs.RareAsteroidNoiseRangeLotsOfRares == rhs.RareAsteroidNoiseRangeLotsOfRares &&
		lhs.RareAsteroidNoiseRangeSomeRares == rhs.RareAsteroidNoiseRangeSomeRares &&
		lhs.SpawnPointStationToPlanetInterpRange == rhs.SpawnPointStationToPlanetInterpRange &&
		lhs.AsteroidAnomalyAvoidRadius == rhs.AsteroidAnomalyAvoidRadius &&
		lhs.AsteroidLotsOfRaresOdds == rhs.AsteroidLotsOfRaresOdds &&
		lhs.AsteroidNoiseOctaves == rhs.AsteroidNoiseOctaves &&
		lhs.AsteroidSomeRaresOdds == rhs.AsteroidSomeRaresOdds &&
		lhs.AsteroidSpaceStationAvoidRadius == rhs.AsteroidSpaceStationAvoidRadius &&
		lhs.AsteroidWarpInAreaAvoidRadius == rhs.AsteroidWarpInAreaAvoidRadius &&
		lhs.AsteroidCreatureRichSystemProbability == rhs.AsteroidCreatureRichSystemProbability &&
		lhs.CivilianTraderSpaceshipsCacheCount == rhs.CivilianTraderSpaceshipsCacheCount &&
		lhs.CommonAsteroidMaxResources == rhs.CommonAsteroidMaxResources &&
		lhs.CommonAsteroidMinResources == rhs.CommonAsteroidMinResources &&
		lhs.CommonAsteroidResourceFuelMultiplier == rhs.CommonAsteroidResourceFuelMultiplier &&
		lhs.CommonAsteroidResourceFuelOdds == rhs.CommonAsteroidResourceFuelOdds &&
		lhs.CommonAsteroidResourceProductOdds == rhs.CommonAsteroidResourceProductOdds &&
		lhs.CommonAsteroidResourceSecondaryOdds == rhs.CommonAsteroidResourceSecondaryOdds &&
		lhs.CorruptSentinelBuildingCheckDifficulty == rhs.CorruptSentinelBuildingCheckDifficulty &&
		lhs.FuelAsteroidMultiplier == rhs.FuelAsteroidMultiplier &&
		lhs.GenerateForcedNumberPlanets == rhs.GenerateForcedNumberPlanets &&
		lhs.LargeAsteroidFadeTime == rhs.LargeAsteroidFadeTime &&
		lhs.LocatorScatterChanceOfCapitalShips == rhs.LocatorScatterChanceOfCapitalShips &&
		lhs.LocatorScatterChanceOfPirates == rhs.LocatorScatterChanceOfPirates &&
		lhs.LocatorScatterMaxCount == rhs.LocatorScatterMaxCount &&
		lhs.LocatorScatterMaxDistanceFromPlanet == rhs.LocatorScatterMaxDistanceFromPlanet &&
		lhs.LocatorScatterMinCount == rhs.LocatorScatterMinCount &&
		lhs.PercentChanceExtraPrime == rhs.PercentChanceExtraPrime &&
		lhs.PirateClassShipOverrideProbability == rhs.PirateClassShipOverrideProbability &&
		lhs.PirateClassShipOverrideProbabilityPirateSystem == rhs.PirateClassShipOverrideProbabilityPirateSystem &&
		lhs.PlanetInvalidAsteroidZone == rhs.PlanetInvalidAsteroidZone &&
		lhs.PlanetRingProbability == rhs.PlanetRingProbability &&
		lhs.RareAsteroidDataProductOdds == rhs.RareAsteroidDataProductOdds &&
		lhs.RareAsteroidMaxResources == rhs.RareAsteroidMaxResources &&
		lhs.RareAsteroidMinResources == rhs.RareAsteroidMinResources &&
		lhs.RareAsteroidResourceFuelOdds == rhs.RareAsteroidResourceFuelOdds &&
		lhs.RareAsteroidSystemOddsBlue == rhs.RareAsteroidSystemOddsBlue &&
		lhs.RareAsteroidSystemOddsGreen == rhs.RareAsteroidSystemOddsGreen &&
		lhs.RareAsteroidSystemOddsPurple == rhs.RareAsteroidSystemOddsPurple &&
		lhs.RareAsteroidSystemOddsRed == rhs.RareAsteroidSystemOddsRed &&
		lhs.RareAsteroidSystemOddsYellow == rhs.RareAsteroidSystemOddsYellow &&
		lhs.SolarSystemMaximumRadius == rhs.SolarSystemMaximumRadius &&
		lhs.SolarSystemMaximumRadiusMassive == rhs.SolarSystemMaximumRadiusMassive &&
		lhs.SparseAsteroidSpread == rhs.SparseAsteroidSpread &&
		lhs.StationSpawnAvoidRadius == rhs.StationSpawnAvoidRadius &&
		lhs.AsteroidScaleVarianceCurve == rhs.AsteroidScaleVarianceCurve &&
		lhs.AsteroidsCheckNoise == rhs.AsteroidsCheckNoise &&
		lhs.AsteroidsEnabled == rhs.AsteroidsEnabled &&
		lhs.GenerateMaximumSolarSystem == rhs.GenerateMaximumSolarSystem &&
		lhs.MassiveSolarSystems == rhs.MassiveSolarSystems &&
		lhs.UseSingleRacePerSystem == rhs.UseSingleRacePerSystem &&
		lhs.UseCorruptSentinelLUT == rhs.UseCorruptSentinelLUT;
	}
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcRewardSignalScan
{
	enum class SignalScanTypeEnum : uint32_t
	{
		None = 0,
		DropPod = 1,
		Shelter = 2,
		Search = 3,
		Relic = 4,
		Industrial = 5,
		Alien = 6,
		CrashedFreighter = 7,
	};

	NMS_GameComponents::GcRewardSignalScan::SignalScanTypeEnum SignalScanType;

	friend bool operator==(const GcRewardSignalScan& lhs, const GcRewardSignalScan& rhs) 
	{
		return lhs.SignalScanType == rhs.SignalScanType;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecialFromList
{
	NMS::NMSString0x20A TextFormat;
	std::vector<NMS::NMSString0x10> FallbackList;
	std::vector<NMS::NMSString0x10> PriorityList;

	friend bool operator==(const GcRewardSpecialFromList& lhs, const GcRewardSpecialFromList& rhs) 
	{
		return lhs.TextFormat == rhs.TextFormat &&
		lhs.FallbackList == rhs.FallbackList &&
		lhs.PriorityList == rhs.PriorityList;
	}
};

//Dependency: GcAlienRace
//Dependency: GcFrigateClass
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificFrigate
{
	NMS::NMSString0x20A NameOverride;
	NMS::NMSString0x10 PrimaryTrait;
	uint64_t FrigateSeed;
	uint64_t SystemSeed;
	NMS_GameComponents::GcAlienRace AlienRace;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	bool FormatAsSeasonal;
	bool IgnoreAndMoveOnIfCannotRecruit;
	bool IsGift;
	bool IsRewardFrigate;
	bool UseSeedFromCommunicator;

	friend bool operator==(const GcRewardSpecificFrigate& lhs, const GcRewardSpecificFrigate& rhs) 
	{
		return lhs.NameOverride == rhs.NameOverride &&
		lhs.PrimaryTrait == rhs.PrimaryTrait &&
		lhs.FrigateSeed == rhs.FrigateSeed &&
		lhs.SystemSeed == rhs.SystemSeed &&
		lhs.AlienRace == rhs.AlienRace &&
		lhs.FrigateClass == rhs.FrigateClass &&
		lhs.FormatAsSeasonal == rhs.FormatAsSeasonal &&
		lhs.IgnoreAndMoveOnIfCannotRecruit == rhs.IgnoreAndMoveOnIfCannotRecruit &&
		lhs.IsGift == rhs.IsGift &&
		lhs.IsRewardFrigate == rhs.IsRewardFrigate &&
		lhs.UseSeedFromCommunicator == rhs.UseSeedFromCommunicator;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificProductRecipe
{
	NMS::NMSString0x20A SeasonRewardFormat;
	NMS::NMSString0x10 ID;
	bool HideInSeasonRewards;
	bool Silent;

	friend bool operator==(const GcRewardSpecificProductRecipe& lhs, const GcRewardSpecificProductRecipe& rhs) 
	{
		return lhs.SeasonRewardFormat == rhs.SeasonRewardFormat &&
		lhs.ID == rhs.ID &&
		lhs.HideInSeasonRewards == rhs.HideInSeasonRewards &&
		lhs.Silent == rhs.Silent;
	}
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificSpecial
{
	NMS::NMSString0x20A Message;
	NMS::NMSString0x20A MilestoneRewardOverrideText;
	NMS::NMSString0x10 ID;
	bool FailIfAlreadyKnown;
	bool HideInSeasonRewards;
	bool ShowSpecialProductPopup;
	bool UseSpecialFormatting;

	friend bool operator==(const GcRewardSpecificSpecial& lhs, const GcRewardSpecificSpecial& rhs) 
	{
		return lhs.Message == rhs.Message &&
		lhs.MilestoneRewardOverrideText == rhs.MilestoneRewardOverrideText &&
		lhs.ID == rhs.ID &&
		lhs.FailIfAlreadyKnown == rhs.FailIfAlreadyKnown &&
		lhs.HideInSeasonRewards == rhs.HideInSeasonRewards &&
		lhs.ShowSpecialProductPopup == rhs.ShowSpecialProductPopup &&
		lhs.UseSpecialFormatting == rhs.UseSpecialFormatting;
	}
};

//Dependency: GcInventoryContainer
//Dependency: GcExactResource
//Dependency: GcInventoryLayout
//Dependency: GcInventoryLayoutSizeType
//Dependency: GcWeaponClasses
//Dependency: NMSString0x20A
struct GcRewardSpecificWeapon
{
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS::NMSString0x20A NameOverride;
	NMS_GameComponents::GcExactResource WeaponResource;
	NMS_GameComponents::GcInventoryLayout WeaponLayout;
	NMS_GameComponents::GcInventoryLayoutSizeType InventorySizeOverride;
	NMS_GameComponents::GcWeaponClasses WeaponType;
	bool FormatAsSeasonal;
	bool IsGift;
	bool IsRewardWeapon;

	friend bool operator==(const GcRewardSpecificWeapon& lhs, const GcRewardSpecificWeapon& rhs) 
	{
		return lhs.WeaponInventory == rhs.WeaponInventory &&
		lhs.NameOverride == rhs.NameOverride &&
		lhs.WeaponResource == rhs.WeaponResource &&
		lhs.WeaponLayout == rhs.WeaponLayout &&
		lhs.InventorySizeOverride == rhs.InventorySizeOverride &&
		lhs.WeaponType == rhs.WeaponType &&
		lhs.FormatAsSeasonal == rhs.FormatAsSeasonal &&
		lhs.IsGift == rhs.IsGift &&
		lhs.IsRewardWeapon == rhs.IsRewardWeapon;
	}
};

//Dependency: GcAlienRace
struct GcRewardStanding
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcAlienRace Race;
	bool UseExpeditionEventSystemRace;

	friend bool operator==(const GcRewardStanding& lhs, const GcRewardStanding& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Race == rhs.Race &&
		lhs.UseExpeditionEventSystemRace == rhs.UseExpeditionEventSystemRace;
	}
};

struct GcRewardStartPurchase
{

	friend bool operator==(const GcRewardStartPurchase& lhs, const GcRewardStartPurchase& rhs) 
	{
		return true;
	}
};

//Dependency: NMSString0x10
struct GcRewardStatCompareAndSet
{
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;

	friend bool operator==(const GcRewardStatCompareAndSet& lhs, const GcRewardStatCompareAndSet& rhs) 
	{
		return lhs.CompareAndSetStat == rhs.CompareAndSetStat &&
		lhs.CoreStat == rhs.CoreStat;
	}
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcRewardStatDiff
{
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;
	NMS::NMSString0x10 SubstanceID;
	int32_t AmountPerStat;
	NMS_GameComponents::GcCurrency RewardCurrency;
	int32_t StatRewardCap;
	bool OKToGiveZero;

	friend bool operator==(const GcRewardStatDiff& lhs, const GcRewardStatDiff& rhs) 
	{
		return lhs.CompareAndSetStat == rhs.CompareAndSetStat &&
		lhs.CoreStat == rhs.CoreStat &&
		lhs.SubstanceID == rhs.SubstanceID &&
		lhs.AmountPerStat == rhs.AmountPerStat &&
		lhs.RewardCurrency == rhs.RewardCurrency &&
		lhs.StatRewardCap == rhs.StatRewardCap &&
		lhs.OKToGiveZero == rhs.OKToGiveZero;
	}
};

//Dependency: GcGenericRewardTableEntry
//Dependency: GcRewardTableEntitlementItem
//Dependency: GcRewardTableEntry
//Dependency: NMSString0x10
struct GcRewardTable
{
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> DestructionTable;
	std::vector<NMS_GameComponents::GcRewardTableEntitlementItem> EntitlementTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> FleetTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> GenericTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> InteractionTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> MissionBoardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> MixerRewardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> NPCPlanetSiteTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> OldInteractionTable;
	std::vector<NMS::NMSString0x10> ProductRewardOrder;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable1;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable10;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable11;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable12;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable13;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable14;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable15;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable16;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable17;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable18;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable19;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable2;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable20;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable3;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable4;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable5;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable6;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable7;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable8;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable9;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SettlementTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> ShipSalvageTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SpecialRewardTable;
	std::vector<NMS_GameComponents::GcRewardTableEntry> Table;
	std::vector<NMS::NMSString0x10> TechRewardOrder;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> TwitchRewardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> WikiProgressTable;

	friend bool operator==(const GcRewardTable& lhs, const GcRewardTable& rhs) 
	{
		return lhs.DestructionTable == rhs.DestructionTable &&
		lhs.EntitlementTable == rhs.EntitlementTable &&
		lhs.FleetTable == rhs.FleetTable &&
		lhs.GenericTable == rhs.GenericTable &&
		lhs.InteractionTable == rhs.InteractionTable &&
		lhs.MissionBoardTable == rhs.MissionBoardTable &&
		lhs.MixerRewardTable == rhs.MixerRewardTable &&
		lhs.NPCPlanetSiteTable == rhs.NPCPlanetSiteTable &&
		lhs.OldInteractionTable == rhs.OldInteractionTable &&
		lhs.ProductRewardOrder == rhs.ProductRewardOrder &&
		lhs.SeasonRewardTable1 == rhs.SeasonRewardTable1 &&
		lhs.SeasonRewardTable10 == rhs.SeasonRewardTable10 &&
		lhs.SeasonRewardTable11 == rhs.SeasonRewardTable11 &&
		lhs.SeasonRewardTable12 == rhs.SeasonRewardTable12 &&
		lhs.SeasonRewardTable13 == rhs.SeasonRewardTable13 &&
		lhs.SeasonRewardTable14 == rhs.SeasonRewardTable14 &&
		lhs.SeasonRewardTable15 == rhs.SeasonRewardTable15 &&
		lhs.SeasonRewardTable16 == rhs.SeasonRewardTable16 &&
		lhs.SeasonRewardTable17 == rhs.SeasonRewardTable17 &&
		lhs.SeasonRewardTable18 == rhs.SeasonRewardTable18 &&
		lhs.SeasonRewardTable19 == rhs.SeasonRewardTable19 &&
		lhs.SeasonRewardTable2 == rhs.SeasonRewardTable2 &&
		lhs.SeasonRewardTable20 == rhs.SeasonRewardTable20 &&
		lhs.SeasonRewardTable3 == rhs.SeasonRewardTable3 &&
		lhs.SeasonRewardTable4 == rhs.SeasonRewardTable4 &&
		lhs.SeasonRewardTable5 == rhs.SeasonRewardTable5 &&
		lhs.SeasonRewardTable6 == rhs.SeasonRewardTable6 &&
		lhs.SeasonRewardTable7 == rhs.SeasonRewardTable7 &&
		lhs.SeasonRewardTable8 == rhs.SeasonRewardTable8 &&
		lhs.SeasonRewardTable9 == rhs.SeasonRewardTable9 &&
		lhs.SettlementTable == rhs.SettlementTable &&
		lhs.ShipSalvageTable == rhs.ShipSalvageTable &&
		lhs.SpecialRewardTable == rhs.SpecialRewardTable &&
		lhs.Table == rhs.Table &&
		lhs.TechRewardOrder == rhs.TechRewardOrder &&
		lhs.TwitchRewardTable == rhs.TwitchRewardTable &&
		lhs.WikiProgressTable == rhs.WikiProgressTable;
	}
};

//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcRewardTeachSpecificWords
{
	NMS::NMSString0x20A CustomOSDMessage;
	std::vector<NMS::NMSString0x20A> SpecificWordGroups;
	float OSDMessageTime;
	NMS_GameComponents::GcAlienRace Race;
	bool SuppressOSDMessage;

	friend bool operator==(const GcRewardTeachSpecificWords& lhs, const GcRewardTeachSpecificWords& rhs) 
	{
		return lhs.CustomOSDMessage == rhs.CustomOSDMessage &&
		lhs.SpecificWordGroups == rhs.SpecificWordGroups &&
		lhs.OSDMessageTime == rhs.OSDMessageTime &&
		lhs.Race == rhs.Race &&
		lhs.SuppressOSDMessage == rhs.SuppressOSDMessage;
	}
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
struct GcRewardTeachWord
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	NMS_GameComponents::GcAlienRace Race;
	bool UseCategory;

	friend bool operator==(const GcRewardTeachWord& lhs, const GcRewardTeachWord& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Category == rhs.Category &&
		lhs.Race == rhs.Race &&
		lhs.UseCategory == rhs.UseCategory;
	}
};

//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
struct GcRewardTechRecipe
{
	NMS::NMSString0x10 RewardGroup;
	NMS_GameComponents::GcTechnologyCategory Category;

	friend bool operator==(const GcRewardTechRecipe& lhs, const GcRewardTechRecipe& rhs) 
	{
		return lhs.RewardGroup == rhs.RewardGroup &&
		lhs.Category == rhs.Category;
	}
};

struct GcRewardTriggerMaintenance
{

	friend bool operator==(const GcRewardTriggerMaintenance& lhs, const GcRewardTriggerMaintenance& rhs) 
	{
		return true;
	}
};

//Dependency: GcInventoryClass
struct GcRewardUpgradeShipClass
{
	NMS_GameComponents::GcInventoryClass ForceToSpecificClass;
	bool MatchClassToCommunityTier;
	bool Silent;
	bool SilentlyMoveOnAtMaxClass;

	friend bool operator==(const GcRewardUpgradeShipClass& lhs, const GcRewardUpgradeShipClass& rhs) 
	{
		return lhs.ForceToSpecificClass == rhs.ForceToSpecificClass &&
		lhs.MatchClassToCommunityTier == rhs.MatchClassToCommunityTier &&
		lhs.Silent == rhs.Silent &&
		lhs.SilentlyMoveOnAtMaxClass == rhs.SilentlyMoveOnAtMaxClass;
	}
};

struct GcVehicleWeaponMode
{
	enum class VehicleWeaponModeEnum : uint32_t
	{
		Laser = 0,
		Gun = 1,
		TerrainEdit = 2,
		StunGun = 3,
		Flamethrower = 4,
	};

	NMS_GameComponents::GcVehicleWeaponMode::VehicleWeaponModeEnum VehicleWeaponMode;

	friend bool operator==(const GcVehicleWeaponMode& lhs, const GcVehicleWeaponMode& rhs) 
	{
		return lhs.VehicleWeaponMode == rhs.VehicleWeaponMode;
	}
};

//Dependency: NMSString0x10
struct GcRewardWeaponSlot
{
	NMS::NMSString0x10 Cost;
	int32_t NumTokens;
	bool AwardCostAndOpenWindow;

	friend bool operator==(const GcRewardWeaponSlot& lhs, const GcRewardWeaponSlot& rhs) 
	{
		return lhs.Cost == rhs.Cost &&
		lhs.NumTokens == rhs.NumTokens &&
		lhs.AwardCostAndOpenWindow == rhs.AwardCostAndOpenWindow;
	}
};

//Dependency: GcNPCHabitationType
struct GcRewardWorker
{
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;

	friend bool operator==(const GcRewardWorker& lhs, const GcRewardWorker& rhs) 
	{
		return lhs.NPCHabitationType == rhs.NPCHabitationType;
	}
};

//Dependency: NMSString0x10
struct GcRoomSequenceRule
{
	NMS::NMSString0x10 MustBeAfterRoom;
	NMS::NMSString0x10 MustBeBeforeRoom;
	NMS::NMSString0x10 RoomID;
	int32_t MinRoomIndex;

	friend bool operator==(const GcRoomSequenceRule& lhs, const GcRoomSequenceRule& rhs) 
	{
		return lhs.MustBeAfterRoom == rhs.MustBeAfterRoom &&
		lhs.MustBeBeforeRoom == rhs.MustBeBeforeRoom &&
		lhs.RoomID == rhs.RoomID &&
		lhs.MinRoomIndex == rhs.MinRoomIndex;
	}
};

struct GcSaveContextDataMask
{
	bool Ammo;
	bool AtlasStations;
	bool Banner;
	bool BaseBuildingObjects;
	bool BuildersKnown;
	bool CharacterCustomisation;
	bool ChestInventories;
	bool ChestMagicInventories;
	bool CookingIngredientsInventory;
	bool DifficultySettings;
	bool FishPlatformInventory;
	bool Fleet;
	bool Freighter;
	bool GalaxyWaypoints;
	bool HotActions;
	bool Interactions;
	bool KnownProducts;
	bool KnownRefinerRecipes;
	bool KnownSpecials;
	bool KnownTech;
	bool KnownWords;
	bool MultiTools;
	bool Nanites;
	bool NexusAccess;
	bool NPCWorkers;
	bool PersistentBases;
	bool Pets;
	bool PlayerInventory;
	bool Portals;
	bool ProcTechIndex;
	bool ProgressionLevel;
	bool RedeemedRewards;
	bool RevealBlackHoles;
	bool RocketLauncherInventory;
	bool SeenBaseObjects;
	bool SeenStories;
	bool SettlementState;
	bool Ships;
	bool ShopTier;
	bool Specials;
	bool SquadronPilots;
	bool Stats;
	bool TeleportEndpoints;
	bool TerrainEdits;
	bool TradingSupply;
	bool Units;
	bool Vehicles;
	bool VisitedSystems;
	bool Wonders;

	friend bool operator==(const GcSaveContextDataMask& lhs, const GcSaveContextDataMask& rhs) 
	{
		return lhs.Ammo == rhs.Ammo &&
		lhs.AtlasStations == rhs.AtlasStations &&
		lhs.Banner == rhs.Banner &&
		lhs.BaseBuildingObjects == rhs.BaseBuildingObjects &&
		lhs.BuildersKnown == rhs.BuildersKnown &&
		lhs.CharacterCustomisation == rhs.CharacterCustomisation &&
		lhs.ChestInventories == rhs.ChestInventories &&
		lhs.ChestMagicInventories == rhs.ChestMagicInventories &&
		lhs.CookingIngredientsInventory == rhs.CookingIngredientsInventory &&
		lhs.DifficultySettings == rhs.DifficultySettings &&
		lhs.FishPlatformInventory == rhs.FishPlatformInventory &&
		lhs.Fleet == rhs.Fleet &&
		lhs.Freighter == rhs.Freighter &&
		lhs.GalaxyWaypoints == rhs.GalaxyWaypoints &&
		lhs.HotActions == rhs.HotActions &&
		lhs.Interactions == rhs.Interactions &&
		lhs.KnownProducts == rhs.KnownProducts &&
		lhs.KnownRefinerRecipes == rhs.KnownRefinerRecipes &&
		lhs.KnownSpecials == rhs.KnownSpecials &&
		lhs.KnownTech == rhs.KnownTech &&
		lhs.KnownWords == rhs.KnownWords &&
		lhs.MultiTools == rhs.MultiTools &&
		lhs.Nanites == rhs.Nanites &&
		lhs.NexusAccess == rhs.NexusAccess &&
		lhs.NPCWorkers == rhs.NPCWorkers &&
		lhs.PersistentBases == rhs.PersistentBases &&
		lhs.Pets == rhs.Pets &&
		lhs.PlayerInventory == rhs.PlayerInventory &&
		lhs.Portals == rhs.Portals &&
		lhs.ProcTechIndex == rhs.ProcTechIndex &&
		lhs.ProgressionLevel == rhs.ProgressionLevel &&
		lhs.RedeemedRewards == rhs.RedeemedRewards &&
		lhs.RevealBlackHoles == rhs.RevealBlackHoles &&
		lhs.RocketLauncherInventory == rhs.RocketLauncherInventory &&
		lhs.SeenBaseObjects == rhs.SeenBaseObjects &&
		lhs.SeenStories == rhs.SeenStories &&
		lhs.SettlementState == rhs.SettlementState &&
		lhs.Ships == rhs.Ships &&
		lhs.ShopTier == rhs.ShopTier &&
		lhs.Specials == rhs.Specials &&
		lhs.SquadronPilots == rhs.SquadronPilots &&
		lhs.Stats == rhs.Stats &&
		lhs.TeleportEndpoints == rhs.TeleportEndpoints &&
		lhs.TerrainEdits == rhs.TerrainEdits &&
		lhs.TradingSupply == rhs.TradingSupply &&
		lhs.Units == rhs.Units &&
		lhs.Vehicles == rhs.Vehicles &&
		lhs.VisitedSystems == rhs.VisitedSystems &&
		lhs.Wonders == rhs.Wonders;
	}
};

//Dependency: GcSaveContextDataMask
//Dependency: NMSString0x10
struct GcSaveContextDataMaskTableEntry
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcSaveContextDataMask Mask;

	friend bool operator==(const GcSaveContextDataMaskTableEntry& lhs, const GcSaveContextDataMaskTableEntry& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Mask == rhs.Mask;
	}
};

//Dependency: GcSaveContextDataMaskTableEntry
//Dependency: GcSaveContextDataMask
struct GcSaveContextDataMaskTable
{
	std::vector<NMS_GameComponents::GcSaveContextDataMaskTableEntry> Masks;
	NMS_GameComponents::GcSaveContextDataMask Default;

	friend bool operator==(const GcSaveContextDataMaskTable& lhs, const GcSaveContextDataMaskTable& rhs) 
	{
		return lhs.Masks == rhs.Masks &&
		lhs.Default == rhs.Default;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct TkResourceDescriptorData
{
	NMS::NMSString0x20A Id;
	std::vector<NMSTemplate> Children;
	std::vector<NMS::VariableSizeString> ReferencePaths;
	float Chance;
	NMS::NMSString0x80 Name;

	friend bool operator==(const TkResourceDescriptorData& lhs, const TkResourceDescriptorData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Children == rhs.Children &&
		lhs.ReferencePaths == rhs.ReferencePaths &&
		lhs.Chance == rhs.Chance &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcTerrainTextureSettings
//Dependency: VariableSizeString
struct GcTerrainTexture
{
	NMS::VariableSizeString DiffuseTexture;
	NMS::VariableSizeString NormalMap;
	NMS_GameComponents::GcTerrainTextureSettings TextureConfig[12];

	friend bool operator==(const GcTerrainTexture& lhs, const GcTerrainTexture& rhs) 
	{
		return lhs.DiffuseTexture == rhs.DiffuseTexture &&
		lhs.NormalMap == rhs.NormalMap &&
		std::equal(std::begin(lhs.TextureConfig), std::end(lhs.TextureConfig), std::begin(rhs.TextureConfig));
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkMaterialShaderMillComment
{
	int32_t PosMaxX;
	int32_t PosMaxY;
	int32_t PosMinX;
	int32_t PosMinY;
	NMS::NMSString0x100 Text;

	friend bool operator==(const TkMaterialShaderMillComment& lhs, const TkMaterialShaderMillComment& rhs) 
	{
		return lhs.PosMaxX == rhs.PosMaxX &&
		lhs.PosMaxY == rhs.PosMaxY &&
		lhs.PosMinX == rhs.PosMinX &&
		lhs.PosMinY == rhs.PosMinY &&
		lhs.Text == rhs.Text;
	}
};

//Dependency: NMSString0x20
struct TkMaterialShaderMillFlag
{
	NMS::NMSString0x20 Flag;

	friend bool operator==(const TkMaterialShaderMillFlag& lhs, const TkMaterialShaderMillFlag& rhs) 
	{
		return lhs.Flag == rhs.Flag;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct TkMaterialShaderMillLink
{
	NMS::NMSString0x10 InputShuffle;
	NMS::NMSString0x10 OutputShuffle;
	int32_t Count;
	int32_t InputNode;
	int32_t OutputNode;
	NMS::NMSString0x20 InputConnect;
	NMS::NMSString0x20 OutputConnect;

	friend bool operator==(const TkMaterialShaderMillLink& lhs, const TkMaterialShaderMillLink& rhs) 
	{
		return lhs.InputShuffle == rhs.InputShuffle &&
		lhs.OutputShuffle == rhs.OutputShuffle &&
		lhs.Count == rhs.Count &&
		lhs.InputNode == rhs.InputNode &&
		lhs.OutputNode == rhs.OutputNode &&
		lhs.InputConnect == rhs.InputConnect &&
		lhs.OutputConnect == rhs.OutputConnect;
	}
};

//Dependency: TkMaterialShaderMillConnect
//Dependency: NMSString0x40
//Dependency: Colour
//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct TkMaterialShaderMillNode
{
	NMS::Colour ColourValue;
	std::vector<NMS_Toolkit::TkMaterialShaderMillConnect> Inputs;
	std::vector<NMS_Toolkit::TkMaterialShaderMillConnect> Outputs;
	float FValue;
	float FValue2;
	int32_t Id;
	int32_t IValue;
	int32_t IValue2;
	int32_t WindowX;
	int32_t WindowY;
	NMS::NMSString0x80 Value;
	NMS::NMSString0x40 ParameterName;
	NMS::NMSString0x20 Type;
	bool ExposeAsParameter;

	friend bool operator==(const TkMaterialShaderMillNode& lhs, const TkMaterialShaderMillNode& rhs) 
	{
		return lhs.ColourValue == rhs.ColourValue &&
		lhs.Inputs == rhs.Inputs &&
		lhs.Outputs == rhs.Outputs &&
		lhs.FValue == rhs.FValue &&
		lhs.FValue2 == rhs.FValue2 &&
		lhs.Id == rhs.Id &&
		lhs.IValue == rhs.IValue &&
		lhs.IValue2 == rhs.IValue2 &&
		lhs.WindowX == rhs.WindowX &&
		lhs.WindowY == rhs.WindowY &&
		lhs.Value == rhs.Value &&
		lhs.ParameterName == rhs.ParameterName &&
		lhs.Type == rhs.Type &&
		lhs.ExposeAsParameter == rhs.ExposeAsParameter;
	}
};

//Dependency: TkMaterialShaderMillComment
//Dependency: NMSString0x100
//Dependency: TkMaterialShaderMillFlag
//Dependency: TkMaterialShaderMillLink
//Dependency: TkMaterialShaderMillNode
//Dependency: NMSString0x40
struct TkMaterialShaderMillData
{
	std::vector<NMS_Toolkit::TkMaterialShaderMillComment> ShaderMillCmts;
	std::vector<NMS_Toolkit::TkMaterialShaderMillFlag> ShaderMillFlags;
	std::vector<NMS_Toolkit::TkMaterialShaderMillLink> ShaderMillLinks;
	std::vector<NMS_Toolkit::TkMaterialShaderMillNode> ShaderMillNodes;
	int32_t OutputX;
	int32_t OutputY;
	float ScrollX;
	float ScrollY;
	float Zoom;
	NMS::NMSString0x100 Description;
	NMS::NMSString0x100 Filename;
	NMS::NMSString0x40 Name;

	friend bool operator==(const TkMaterialShaderMillData& lhs, const TkMaterialShaderMillData& rhs) 
	{
		return lhs.ShaderMillCmts == rhs.ShaderMillCmts &&
		lhs.ShaderMillFlags == rhs.ShaderMillFlags &&
		lhs.ShaderMillLinks == rhs.ShaderMillLinks &&
		lhs.ShaderMillNodes == rhs.ShaderMillNodes &&
		lhs.OutputX == rhs.OutputX &&
		lhs.OutputY == rhs.OutputY &&
		lhs.ScrollX == rhs.ScrollX &&
		lhs.ScrollY == rhs.ScrollY &&
		lhs.Zoom == rhs.Zoom &&
		lhs.Description == rhs.Description &&
		lhs.Filename == rhs.Filename &&
		lhs.Name == rhs.Name;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcScanEffectData
//Dependency: NMSString0x40
struct GcScanEffectComponentData
{
	std::vector<NMS_GameComponents::GcScanEffectData> ScanEffects;
	NMS::NMSString0x40 NodeName;

	friend bool operator==(const GcScanEffectComponentData& lhs, const GcScanEffectComponentData& rhs) 
	{
		return lhs.ScanEffects == rhs.ScanEffects &&
		lhs.NodeName == rhs.NodeName;
	}
};

struct GcScareCreaturesAction
{
	float FleeRadius;
	float HearRadius;

	friend bool operator==(const GcScareCreaturesAction& lhs, const GcScareCreaturesAction& rhs) 
	{
		return lhs.FleeRadius == rhs.FleeRadius &&
		lhs.HearRadius == rhs.HearRadius;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVolumeTriggerType
{
	enum class VolumeTriggerTypeEnum : uint32_t
	{
		Open = 0,
		GenericInterior = 1,
		GenericGlassInterior = 2,
		Corridor = 3,
		SmallRoom = 4,
		LargeRoom = 5,
		OpenCovered = 6,
		HazardProtection = 7,
		Dungeon = 8,
		FieldBoundary = 9,
		Custom_Biodome = 10,
		Portal = 11,
		VehicleBoost = 12,
		NexusPlaza = 13,
		NexusCommunityHub = 14,
		NexusHangar = 15,
		RaceObstacle = 16,
		HazardProtectionCold = 17,
		SpaceStorm = 18,
		HazardProtectionNoRecharge = 19,
		HazardProtectionSpook = 20,
		ForceJetpackIgnition = 21,
	};

	NMS_Toolkit::TkVolumeTriggerType::VolumeTriggerTypeEnum VolumeTriggerType;

	friend bool operator==(const TkVolumeTriggerType& lhs, const TkVolumeTriggerType& rhs) 
	{
		return lhs.VolumeTriggerType == rhs.VolumeTriggerType;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSelectableObjectList
struct GcSelectableObjectTable
{
	std::vector<NMS_GameComponents::GcSelectableObjectList> Lists;

	friend bool operator==(const GcSelectableObjectTable& lhs, const GcSelectableObjectTable& rhs) 
	{
		return lhs.Lists == rhs.Lists;
	}
};

//Dependency: GcSentinelSpawnSequence
struct GcSentinelSpawnSequenceGroup
{
	NMS_GameComponents::GcSentinelSpawnSequence ExtremeSequence;
	NMS_GameComponents::GcSentinelSpawnSequence Sequence;

	friend bool operator==(const GcSentinelSpawnSequenceGroup& lhs, const GcSentinelSpawnSequenceGroup& rhs) 
	{
		return lhs.ExtremeSequence == rhs.ExtremeSequence &&
		lhs.Sequence == rhs.Sequence;
	}
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcSettlementBuildingCostData
{
	std::vector<NMS::NMSString0x10> Products;
	std::vector<NMS::NMSString0x10> Substances;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcCurrency Currency;

	friend bool operator==(const GcSettlementBuildingCostData& lhs, const GcSettlementBuildingCostData& rhs) 
	{
		return lhs.Products == rhs.Products &&
		lhs.Substances == rhs.Substances &&
		lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin &&
		lhs.Currency == rhs.Currency;
	}
};

//Dependency: GcSettlementBuildingCostData
struct GcSettlementBuildingCost
{
	NMS_GameComponents::GcSettlementBuildingCostData StageCosts[9];

	friend bool operator==(const GcSettlementBuildingCost& lhs, const GcSettlementBuildingCost& rhs) 
	{
		return std::equal(std::begin(lhs.StageCosts), std::end(lhs.StageCosts), std::begin(rhs.StageCosts));
	}
};

//Dependency: GcSettlementColourUpgradeData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementColourUpgradeTable
{
	NMS_GameComponents::GcSettlementColourUpgradeData UpgradeLevels[3];
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;

	friend bool operator==(const GcSettlementColourUpgradeTable& lhs, const GcSettlementColourUpgradeTable& rhs) 
	{
		return std::equal(std::begin(lhs.UpgradeLevels), std::end(lhs.UpgradeLevels), std::begin(rhs.UpgradeLevels)) &&
		lhs.Name == rhs.Name &&
		lhs.Style == rhs.Style;
	}
};

struct GcSettlementConstructionLevel
{
	enum class SettlementConstructionLevelEnum : uint32_t
	{
		Start = 0,
		GroundStorey = 1,
		RegularStorey = 2,
		Roof = 3,
		Decoration = 4,
		Upgrade1 = 5,
		Upgrade2 = 6,
		Upgrade3 = 7,
		Other = 8,
	};

	NMS_GameComponents::GcSettlementConstructionLevel::SettlementConstructionLevelEnum SettlementConstructionLevel;

	friend bool operator==(const GcSettlementConstructionLevel& lhs, const GcSettlementConstructionLevel& rhs) 
	{
		return lhs.SettlementConstructionLevel == rhs.SettlementConstructionLevel;
	}
};

//Dependency: GcSettlementJudgementData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementCustomJudgement
{
	NMS_GameComponents::GcSettlementJudgementData Data;
	NMS::NMSString0x20A CustomCostText;
	NMS::NMSString0x20A CustomMissionObjectiveText;
	NMS::NMSString0x10 ID;

	friend bool operator==(const GcSettlementCustomJudgement& lhs, const GcSettlementCustomJudgement& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.CustomCostText == rhs.CustomCostText &&
		lhs.CustomMissionObjectiveText == rhs.CustomMissionObjectiveText &&
		lhs.ID == rhs.ID;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
struct TkAnimStateMachineComponentData
{
	NMS::NMSString0x20A InitialStateMachine;

	friend bool operator==(const TkAnimStateMachineComponentData& lhs, const TkAnimStateMachineComponentData& rhs) 
	{
		return lhs.InitialStateMachine == rhs.InitialStateMachine;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSettlementMaterialData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementMaterialTable
{
	NMS_GameComponents::GcSettlementMaterialData UpgradeLevels[4];
	NMS::NMSString0x10 Name;
	float RelativeProbability;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;

	friend bool operator==(const GcSettlementMaterialTable& lhs, const GcSettlementMaterialTable& rhs) 
	{
		return std::equal(std::begin(lhs.UpgradeLevels), std::end(lhs.UpgradeLevels), std::begin(rhs.UpgradeLevels)) &&
		lhs.Name == rhs.Name &&
		lhs.RelativeProbability == rhs.RelativeProbability &&
		lhs.Style == rhs.Style;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkEmitterFloatProperty
struct TkParticleBurstData
{
	NMS_Toolkit::TkEmitterFloatProperty BurstAmount;
	NMS_Toolkit::TkEmitterFloatProperty BurstInterval;
	int32_t LoopCount;

	friend bool operator==(const TkParticleBurstData& lhs, const TkParticleBurstData& rhs) 
	{
		return lhs.BurstAmount == rhs.BurstAmount &&
		lhs.BurstInterval == rhs.BurstInterval &&
		lhs.LoopCount == rhs.LoopCount;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSettlementStatType
//Dependency: NMSString0x10
struct GcSettlementPerkUsefulData
{
	NMS::NMSString0x10 BaseID;
	uint64_t SeedValue;
	float ChangeStrength;
	NMS_GameComponents::GcSettlementStatType Stat;
	bool IsNegative;
	bool IsProc;

	friend bool operator==(const GcSettlementPerkUsefulData& lhs, const GcSettlementPerkUsefulData& rhs) 
	{
		return lhs.BaseID == rhs.BaseID &&
		lhs.SeedValue == rhs.SeedValue &&
		lhs.ChangeStrength == rhs.ChangeStrength &&
		lhs.Stat == rhs.Stat &&
		lhs.IsNegative == rhs.IsNegative &&
		lhs.IsProc == rhs.IsProc;
	}
};

struct GcWeatherHazardTornadoData
{
	float SuckInRadius;
	float SuckInStrength;
	float SuckUpHeight;
	float SuckUpHeightCutoff;
	float SuckUpRadius;
	float SuckUpStrength;

	friend bool operator==(const GcWeatherHazardTornadoData& lhs, const GcWeatherHazardTornadoData& rhs) 
	{
		return lhs.SuckInRadius == rhs.SuckInRadius &&
		lhs.SuckInStrength == rhs.SuckInStrength &&
		lhs.SuckUpHeight == rhs.SuckUpHeight &&
		lhs.SuckUpHeightCutoff == rhs.SuckUpHeightCutoff &&
		lhs.SuckUpRadius == rhs.SuckUpRadius &&
		lhs.SuckUpStrength == rhs.SuckUpStrength;
	}
};

//Dependency: GcSettlementProductionElementRequirement
//Dependency: NMSString0x10
struct GcSettlementProductionElement
{
	NMS::NMSString0x10 Product;
	std::vector<NMS_GameComponents::GcSettlementProductionElementRequirement> Requirements;
	int32_t ProductionAccumulationCap;
	float ProductionAmountMultiplier;
	float ProductionTimeMultiplier;

	friend bool operator==(const GcSettlementProductionElement& lhs, const GcSettlementProductionElement& rhs) 
	{
		return lhs.Product == rhs.Product &&
		lhs.Requirements == rhs.Requirements &&
		lhs.ProductionAccumulationCap == rhs.ProductionAccumulationCap &&
		lhs.ProductionAmountMultiplier == rhs.ProductionAmountMultiplier &&
		lhs.ProductionTimeMultiplier == rhs.ProductionTimeMultiplier;
	}
};

struct GcSettlementStatStrengthRanges
{
	int32_t AmountMax;
	int32_t AmountMin;

	friend bool operator==(const GcSettlementStatStrengthRanges& lhs, const GcSettlementStatStrengthRanges& rhs) 
	{
		return lhs.AmountMax == rhs.AmountMax &&
		lhs.AmountMin == rhs.AmountMin;
	}
};

//Dependency: GcSettlementStatStrengthRanges
struct GcSettlementStatStrengthData
{
	NMS_GameComponents::GcSettlementStatStrengthRanges PerkStatStrengthValues[7];

	friend bool operator==(const GcSettlementStatStrengthData& lhs, const GcSettlementStatStrengthData& rhs) 
	{
		return std::equal(std::begin(lhs.PerkStatStrengthValues), std::end(lhs.PerkStatStrengthValues), std::begin(rhs.PerkStatStrengthValues));
	}
};

//Dependency: NMSString0x10
struct GcSpaceshipShieldData
{
	NMS::NMSString0x10 DamageMulOverride;
	NMS::NMSString0x10 Id;
	int32_t Health;
	int32_t LevelledExtraHealth;
	float RechargeDelayTime;
	float RechargeTime;
	bool StartDepletedWhenEnabled;

	friend bool operator==(const GcSpaceshipShieldData& lhs, const GcSpaceshipShieldData& rhs) 
	{
		return lhs.DamageMulOverride == rhs.DamageMulOverride &&
		lhs.Id == rhs.Id &&
		lhs.Health == rhs.Health &&
		lhs.LevelledExtraHealth == rhs.LevelledExtraHealth &&
		lhs.RechargeDelayTime == rhs.RechargeDelayTime &&
		lhs.RechargeTime == rhs.RechargeTime &&
		lhs.StartDepletedWhenEnabled == rhs.StartDepletedWhenEnabled;
	}
};

//Dependency: GcShipAIAttackData
//Dependency: GcShipAICombatDefinition
//Dependency: GcSpaceshipTravelData
//Dependency: GcSpaceshipShieldData
//Dependency: NMSString0x10
struct GcShipAIAttackDataTable
{
	NMS::NMSString0x10 TraderAttackLookup[4];
	std::vector<NMS_GameComponents::GcShipAIAttackData> BehaviourTable;
	std::vector<NMS_GameComponents::GcShipAICombatDefinition> Definitions;
	std::vector<NMS_GameComponents::GcSpaceshipTravelData> EngineTable;
	std::vector<NMS_GameComponents::GcSpaceshipShieldData> ShieldTable;

	friend bool operator==(const GcShipAIAttackDataTable& lhs, const GcShipAIAttackDataTable& rhs) 
	{
		return std::equal(std::begin(lhs.TraderAttackLookup), std::end(lhs.TraderAttackLookup), std::begin(rhs.TraderAttackLookup)) &&
		lhs.BehaviourTable == rhs.BehaviourTable &&
		lhs.Definitions == rhs.Definitions &&
		lhs.EngineTable == rhs.EngineTable &&
		lhs.ShieldTable == rhs.ShieldTable;
	}
};

//Dependency: GcSpaceshipClasses
//Dependency: TkModelRendererData
//Dependency: VariableSizeString
struct GcSpaceshipComponentData
{
	NMS_Toolkit::TkModelRendererData Renderer;
	NMS::VariableSizeString Cockpit;
	NMS_GameComponents::GcSpaceshipClasses Class;
	int32_t DefaultHealth;
	float FoVFixedDistance;
	float MaxHeadPitchDown;
	float MaxHeadPitchUp;
	float MaxHeadTurn;
	bool Buildable;

	friend bool operator==(const GcSpaceshipComponentData& lhs, const GcSpaceshipComponentData& rhs) 
	{
		return lhs.Renderer == rhs.Renderer &&
		lhs.Cockpit == rhs.Cockpit &&
		lhs.Class == rhs.Class &&
		lhs.DefaultHealth == rhs.DefaultHealth &&
		lhs.FoVFixedDistance == rhs.FoVFixedDistance &&
		lhs.MaxHeadPitchDown == rhs.MaxHeadPitchDown &&
		lhs.MaxHeadPitchUp == rhs.MaxHeadPitchUp &&
		lhs.MaxHeadTurn == rhs.MaxHeadTurn &&
		lhs.Buildable == rhs.Buildable;
	}
};

//Dependency: GcSpaceshipComponentData
struct GcShipOwnershipComponentData
{
	NMS_GameComponents::GcSpaceshipComponentData Data;

	friend bool operator==(const GcShipOwnershipComponentData& lhs, const GcShipOwnershipComponentData& rhs) 
	{
		return lhs.Data == rhs.Data;
	}
};

//Dependency: GcProjectileImpactData
//Dependency: GcProjectileImpactType
//Dependency: GcFiendCrime
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcShootableComponentData
{
	NMS_GameComponents::GcProjectileImpactData ImpactOverrideData;
	NMS::NMSString0x10 DamageMultiplier;
	NMS::NMSString0x10 ImpactShakeEffect;
	NMS::NMSString0x10 RequiredTech;
	float CapHealthForMissingArmour;
	float FiendCrimeModifier;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;
	NMS_GameComponents::GcProjectileImpactType ForceImpactType;
	int32_t Health;
	int32_t IncreaseCorruptSentinelWanted;
	int32_t IncreaseWanted;
	float IncreaseWantedThresholdTime;
	int32_t LevelledExtraHealth;
	int32_t MinDamage;
	float RepairTime;
	NMS::NMSString0x20 NameOverride;
	bool AutoAimTarget;
	bool CouldCountAsArmourForParent;
	bool HitEffectEnabled;
	bool HitEffectEntireModel;
	bool IgnoreHitPush;
	bool IgnorePlayer;
	bool IgnoreTerrainEditKills;
	bool ImpactShake;
	bool IsAffectedByPiercing;
	bool IsArmoured;
	bool IsPiercable;
	bool PlayerOnly;
	bool StaticUntilShot;
	bool UseSpaceLevelForExtraHealth;

	friend bool operator==(const GcShootableComponentData& lhs, const GcShootableComponentData& rhs) 
	{
		return lhs.ImpactOverrideData == rhs.ImpactOverrideData &&
		lhs.DamageMultiplier == rhs.DamageMultiplier &&
		lhs.ImpactShakeEffect == rhs.ImpactShakeEffect &&
		lhs.RequiredTech == rhs.RequiredTech &&
		lhs.CapHealthForMissingArmour == rhs.CapHealthForMissingArmour &&
		lhs.FiendCrimeModifier == rhs.FiendCrimeModifier &&
		lhs.FiendCrimeType == rhs.FiendCrimeType &&
		lhs.ForceImpactType == rhs.ForceImpactType &&
		lhs.Health == rhs.Health &&
		lhs.IncreaseCorruptSentinelWanted == rhs.IncreaseCorruptSentinelWanted &&
		lhs.IncreaseWanted == rhs.IncreaseWanted &&
		lhs.IncreaseWantedThresholdTime == rhs.IncreaseWantedThresholdTime &&
		lhs.LevelledExtraHealth == rhs.LevelledExtraHealth &&
		lhs.MinDamage == rhs.MinDamage &&
		lhs.RepairTime == rhs.RepairTime &&
		lhs.NameOverride == rhs.NameOverride &&
		lhs.AutoAimTarget == rhs.AutoAimTarget &&
		lhs.CouldCountAsArmourForParent == rhs.CouldCountAsArmourForParent &&
		lhs.HitEffectEnabled == rhs.HitEffectEnabled &&
		lhs.HitEffectEntireModel == rhs.HitEffectEntireModel &&
		lhs.IgnoreHitPush == rhs.IgnoreHitPush &&
		lhs.IgnorePlayer == rhs.IgnorePlayer &&
		lhs.IgnoreTerrainEditKills == rhs.IgnoreTerrainEditKills &&
		lhs.ImpactShake == rhs.ImpactShake &&
		lhs.IsAffectedByPiercing == rhs.IsAffectedByPiercing &&
		lhs.IsArmoured == rhs.IsArmoured &&
		lhs.IsPiercable == rhs.IsPiercable &&
		lhs.PlayerOnly == rhs.PlayerOnly &&
		lhs.StaticUntilShot == rhs.StaticUntilShot &&
		lhs.UseSpaceLevelForExtraHealth == rhs.UseSpaceLevelForExtraHealth;
	}
};

//Dependency: NMSString0x100
struct GcSimpleIkRecoilComponentData
{
	float ActiveRange;
	float AngleLimit;
	float HitReactDirectedMax;
	float HitReactDirectedMin;
	float HitReactRandomMax;
	float HitReactRandomMin;
	float MinHitReactTime;
	float RecoverTime;
	NMS::NMSString0x100 EndJoint;

	friend bool operator==(const GcSimpleIkRecoilComponentData& lhs, const GcSimpleIkRecoilComponentData& rhs) 
	{
		return lhs.ActiveRange == rhs.ActiveRange &&
		lhs.AngleLimit == rhs.AngleLimit &&
		lhs.HitReactDirectedMax == rhs.HitReactDirectedMax &&
		lhs.HitReactDirectedMin == rhs.HitReactDirectedMin &&
		lhs.HitReactRandomMax == rhs.HitReactRandomMax &&
		lhs.HitReactRandomMin == rhs.HitReactRandomMin &&
		lhs.MinHitReactTime == rhs.MinHitReactTime &&
		lhs.RecoverTime == rhs.RecoverTime &&
		lhs.EndJoint == rhs.EndJoint;
	}
};

//Dependency: GcPlanetWeatherColourIndex
//Dependency: Colour
struct GcSpaceSkyProperties
{
	NMS::Colour PlanetHorizonColour;
	NMS::Colour PlanetSkyColour;
	NMS_GameComponents::GcPlanetWeatherColourIndex ColourIndex;
	float AtmosphereThickness;
	float CenterPower;
	float CloudNoiseFrequency;
	float HorizonFadeSpeed;
	float HorizonMultiplier;
	float NebulaBrightness;
	float NebulaCloudStrength;
	float NebulaCloudStrength1;
	float NebulaDistortionStrength;
	float NebulaFBMStrength;
	float NebulaFBMStrength1;
	float NebulaFogAmount;
	float NebulaFrequency;
	float NebulaNoiseFrequency;
	float NebulaSeed;
	float NebulaSparseness;
	float NebulaTendrilStrength;
	float NebulaTurbulenceStrength;
	float NebulaWispyness;
	float NebulaWispyness1;
	float PlanetFogStrength;
	float SpaceFogColour2Strength;
	float SpaceFogColourStrength;
	float SpaceFogMax;
	float SpaceFogPlanetMax;
	float SpaceFogStrength;
	float StarVisibility;
	float SunSize;
	float SunStrength;

	friend bool operator==(const GcSpaceSkyProperties& lhs, const GcSpaceSkyProperties& rhs) 
	{
		return lhs.PlanetHorizonColour == rhs.PlanetHorizonColour &&
		lhs.PlanetSkyColour == rhs.PlanetSkyColour &&
		lhs.ColourIndex == rhs.ColourIndex &&
		lhs.AtmosphereThickness == rhs.AtmosphereThickness &&
		lhs.CenterPower == rhs.CenterPower &&
		lhs.CloudNoiseFrequency == rhs.CloudNoiseFrequency &&
		lhs.HorizonFadeSpeed == rhs.HorizonFadeSpeed &&
		lhs.HorizonMultiplier == rhs.HorizonMultiplier &&
		lhs.NebulaBrightness == rhs.NebulaBrightness &&
		lhs.NebulaCloudStrength == rhs.NebulaCloudStrength &&
		lhs.NebulaCloudStrength1 == rhs.NebulaCloudStrength1 &&
		lhs.NebulaDistortionStrength == rhs.NebulaDistortionStrength &&
		lhs.NebulaFBMStrength == rhs.NebulaFBMStrength &&
		lhs.NebulaFBMStrength1 == rhs.NebulaFBMStrength1 &&
		lhs.NebulaFogAmount == rhs.NebulaFogAmount &&
		lhs.NebulaFrequency == rhs.NebulaFrequency &&
		lhs.NebulaNoiseFrequency == rhs.NebulaNoiseFrequency &&
		lhs.NebulaSeed == rhs.NebulaSeed &&
		lhs.NebulaSparseness == rhs.NebulaSparseness &&
		lhs.NebulaTendrilStrength == rhs.NebulaTendrilStrength &&
		lhs.NebulaTurbulenceStrength == rhs.NebulaTurbulenceStrength &&
		lhs.NebulaWispyness == rhs.NebulaWispyness &&
		lhs.NebulaWispyness1 == rhs.NebulaWispyness1 &&
		lhs.PlanetFogStrength == rhs.PlanetFogStrength &&
		lhs.SpaceFogColour2Strength == rhs.SpaceFogColour2Strength &&
		lhs.SpaceFogColourStrength == rhs.SpaceFogColourStrength &&
		lhs.SpaceFogMax == rhs.SpaceFogMax &&
		lhs.SpaceFogPlanetMax == rhs.SpaceFogPlanetMax &&
		lhs.SpaceFogStrength == rhs.SpaceFogStrength &&
		lhs.StarVisibility == rhs.StarVisibility &&
		lhs.SunSize == rhs.SunSize &&
		lhs.SunStrength == rhs.SunStrength;
	}
};

//Dependency: Vector2f
struct GcSolarSystemTraderSpawnData
{
	NMS::Vector2f SequenceTakeoffDelay;
	int32_t ChanceToDelayLaunch;
	float InitialTakeoffDelay;
	int32_t MaxToSpawn;

	friend bool operator==(const GcSolarSystemTraderSpawnData& lhs, const GcSolarSystemTraderSpawnData& rhs) 
	{
		return lhs.SequenceTakeoffDelay == rhs.SequenceTakeoffDelay &&
		lhs.ChanceToDelayLaunch == rhs.ChanceToDelayLaunch &&
		lhs.InitialTakeoffDelay == rhs.InitialTakeoffDelay &&
		lhs.MaxToSpawn == rhs.MaxToSpawn;
	}
};

//Dependency: GcSolarSystemLocator
//Dependency: GcPlanetGenerationInputData
//Dependency: GcPlanetColourData
//Dependency: GcSpaceStationSpawnData
//Dependency: GcSpaceSkyProperties
//Dependency: GcSolarSystemTraderSpawnData
//Dependency: GcLightProperties
//Dependency: GcAISpaceshipPreloadCacheData
//Dependency: GcScreenFilters
//Dependency: GcPlanetTradingData
//Dependency: GcSolarSystemClass
//Dependency: GcPlayerConflictData
//Dependency: GcAlienRace
//Dependency: GcGalaxyStarTypes
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: NMSString0x80
struct GcSolarSystemData
{
	enum class AsteroidLevelEnum : uint32_t
	{
		NoRares = 0,
		SomeRares = 1,
		LotsOfRares = 2,
	};

	NMS_GameComponents::GcPlanetColourData Colours;
	NMS_GameComponents::GcSpaceStationSpawnData SpaceStationSpawn;
	NMS_GameComponents::GcSpaceSkyProperties Sky;
	NMS::Vector3f PlanetPositions[8];
	NMS_GameComponents::GcLightProperties Light;
	NMS::Vector3f SunPosition;
	NMS_GameComponents::GcPlanetGenerationInputData PlanetGenerationInputs[8];
	std::vector<NMSTemplate> AsteroidGenerators;
	NMS::NMSString0x10 AsteroidSubstanceID;
	NMS::VariableSizeString HeavyAir;
	std::vector<NMS_GameComponents::GcSolarSystemLocator> Locators;
	NMS::GcSeed Seed;
	NMS::GcSeed SentinelCrashSiteShipSeed;
	std::vector<NMS_GameComponents::GcAISpaceshipPreloadCacheData> SystemShips;
	int32_t PlanetOrbits[8];
	NMS_GameComponents::GcSolarSystemTraderSpawnData TraderSpawnInStations;
	NMS_GameComponents::GcSolarSystemTraderSpawnData TraderSpawnOnOutposts;
	NMS::Vector2f FlybyTimer;
	NMS::Vector2f FreighterTimer;
	NMS::Vector2f PlanetPirateTimer;
	NMS::Vector2f PoliceTimer;
	NMS::Vector2f SpacePirateTimer;
	NMS_GameComponents::GcPlanetTradingData TradingData;
	NMS_GameComponents::GcSolarSystemData::AsteroidLevelEnum AsteroidLevel;
	NMS_GameComponents::GcSolarSystemClass Class;
	NMS_GameComponents::GcPlayerConflictData ConflictData;
	NMS_GameComponents::GcAlienRace InhabitingRace;
	int32_t MaxNumFreighters;
	int32_t NumTradeRoutes;
	int32_t NumVisibleTradeRoutes;
	int32_t Planets;
	int32_t PrimePlanets;
	NMS_GameComponents::GcScreenFilters ScreenFilter;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	NMS::NMSString0x80 Name;
	bool StartWithFreighters;

	friend bool operator==(const GcSolarSystemData& lhs, const GcSolarSystemData& rhs) 
	{
		return lhs.Colours == rhs.Colours &&
		lhs.SpaceStationSpawn == rhs.SpaceStationSpawn &&
		lhs.Sky == rhs.Sky &&
		std::equal(std::begin(lhs.PlanetPositions), std::end(lhs.PlanetPositions), std::begin(rhs.PlanetPositions)) &&
		lhs.Light == rhs.Light &&
		lhs.SunPosition == rhs.SunPosition &&
		std::equal(std::begin(lhs.PlanetGenerationInputs), std::end(lhs.PlanetGenerationInputs), std::begin(rhs.PlanetGenerationInputs)) &&
		lhs.AsteroidGenerators == rhs.AsteroidGenerators &&
		lhs.AsteroidSubstanceID == rhs.AsteroidSubstanceID &&
		lhs.HeavyAir == rhs.HeavyAir &&
		lhs.Locators == rhs.Locators &&
		lhs.Seed == rhs.Seed &&
		lhs.SentinelCrashSiteShipSeed == rhs.SentinelCrashSiteShipSeed &&
		lhs.SystemShips == rhs.SystemShips &&
		std::equal(std::begin(lhs.PlanetOrbits), std::end(lhs.PlanetOrbits), std::begin(rhs.PlanetOrbits)) &&
		lhs.TraderSpawnInStations == rhs.TraderSpawnInStations &&
		lhs.TraderSpawnOnOutposts == rhs.TraderSpawnOnOutposts &&
		lhs.FlybyTimer == rhs.FlybyTimer &&
		lhs.FreighterTimer == rhs.FreighterTimer &&
		lhs.PlanetPirateTimer == rhs.PlanetPirateTimer &&
		lhs.PoliceTimer == rhs.PoliceTimer &&
		lhs.SpacePirateTimer == rhs.SpacePirateTimer &&
		lhs.TradingData == rhs.TradingData &&
		lhs.AsteroidLevel == rhs.AsteroidLevel &&
		lhs.Class == rhs.Class &&
		lhs.ConflictData == rhs.ConflictData &&
		lhs.InhabitingRace == rhs.InhabitingRace &&
		lhs.MaxNumFreighters == rhs.MaxNumFreighters &&
		lhs.NumTradeRoutes == rhs.NumTradeRoutes &&
		lhs.NumVisibleTradeRoutes == rhs.NumVisibleTradeRoutes &&
		lhs.Planets == rhs.Planets &&
		lhs.PrimePlanets == rhs.PrimePlanets &&
		lhs.ScreenFilter == rhs.ScreenFilter &&
		lhs.StarType == rhs.StarType &&
		lhs.Name == rhs.Name &&
		lhs.StartWithFreighters == rhs.StartWithFreighters;
	}
};

//Dependency: GcSolarSystemLocatorChoice
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: NMSString0x20
//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
struct GcSolarSystemEventWarpIn
{
	NMS::GcSeed Seed;
	std::vector<int32_t> ShipChoiceSequence;
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	NMS::Vector2f RepeatIntervalRange;
	NMS::Vector2f ShipCountRange;
	NMS::Vector2f SpeedRange;
	NMS::Vector2f WarpIntervalRange;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	int32_t Repeat;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;
	float Time;
	NMS::NMSString0x20 SquadName;
	bool InstantWarpIn;
	bool InvertDirection;

	friend bool operator==(const GcSolarSystemEventWarpIn& lhs, const GcSolarSystemEventWarpIn& rhs) 
	{
		return lhs.Seed == rhs.Seed &&
		lhs.ShipChoiceSequence == rhs.ShipChoiceSequence &&
		lhs.Locator == rhs.Locator &&
		lhs.RepeatIntervalRange == rhs.RepeatIntervalRange &&
		lhs.ShipCountRange == rhs.ShipCountRange &&
		lhs.SpeedRange == rhs.SpeedRange &&
		lhs.WarpIntervalRange == rhs.WarpIntervalRange &&
		lhs.Faction == rhs.Faction &&
		lhs.Repeat == rhs.Repeat &&
		lhs.ShipRole == rhs.ShipRole &&
		lhs.Time == rhs.Time &&
		lhs.SquadName == rhs.SquadName &&
		lhs.InstantWarpIn == rhs.InstantWarpIn &&
		lhs.InvertDirection == rhs.InvertDirection;
	}
};

//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcSolarSystemEventWarpOut
{
	NMS::Vector2f WarpIntervalRange;
	float Time;
	NMS::NMSString0x20 SquadName;

	friend bool operator==(const GcSolarSystemEventWarpOut& lhs, const GcSolarSystemEventWarpOut& rhs) 
	{
		return lhs.WarpIntervalRange == rhs.WarpIntervalRange &&
		lhs.Time == rhs.Time &&
		lhs.SquadName == rhs.SquadName;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVertexElement
{
	enum class InstancingEnum : uint32_t
	{
		PerVertex = 0,
		PerModel = 1,
	};

	NMS_Toolkit::TkVertexElement::InstancingEnum Instancing;
	int32_t Type;
	uint8_t Normalise;
	uint8_t Offset;
	uint8_t SemanticID;
	uint8_t Size;

	friend bool operator==(const TkVertexElement& lhs, const TkVertexElement& rhs) 
	{
		return lhs.Instancing == rhs.Instancing &&
		lhs.Type == rhs.Type &&
		lhs.Normalise == rhs.Normalise &&
		lhs.Offset == rhs.Offset &&
		lhs.SemanticID == rhs.SemanticID &&
		lhs.Size == rhs.Size;
	}
};

//Dependency: TkVertexElement
struct TkVertexLayout
{
	std::vector<NMS_Toolkit::TkVertexElement> VertexElements;
	int64_t PlatformData;
	int32_t ElementCount;
	int32_t Stride;

	friend bool operator==(const TkVertexLayout& lhs, const TkVertexLayout& rhs) 
	{
		return lhs.VertexElements == rhs.VertexElements &&
		lhs.PlatformData == rhs.PlatformData &&
		lhs.ElementCount == rhs.ElementCount &&
		lhs.Stride == rhs.Stride;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcSpaceStormData
{
	NMS::VariableSizeString File;
	NMS::NMSString0x10 StormId;

	friend bool operator==(const GcSpaceStormData& lhs, const GcSpaceStormData& rhs) 
	{
		return lhs.File == rhs.File &&
		lhs.StormId == rhs.StormId;
	}
};

//Dependency: NMSString0x10
struct GcSpawnAction
{
	NMS::NMSString0x10 Event;

	friend bool operator==(const GcSpawnAction& lhs, const GcSpawnAction& rhs) 
	{
		return lhs.Event == rhs.Event;
	}
};

struct GcSpecialPetChatType
{
	enum class SpecialPetChatTypeEnum : uint32_t
	{
		Monster = 0,
		Quad = 1,
		MiniRobo = 2,
	};

	NMS_GameComponents::GcSpecialPetChatType::SpecialPetChatTypeEnum SpecialPetChatType;

	friend bool operator==(const GcSpecialPetChatType& lhs, const GcSpecialPetChatType& rhs) 
	{
		return lhs.SpecialPetChatType == rhs.SpecialPetChatType;
	}
};

//Dependency: VariableSizeString
struct GcStatIconTable
{
	NMS::VariableSizeString StatIcons[203];

	friend bool operator==(const GcStatIconTable& lhs, const GcStatIconTable& rhs) 
	{
		return std::equal(std::begin(lhs.StatIcons), std::end(lhs.StatIcons), std::begin(rhs.StatIcons));
	}
};

struct GcStatsAchievements
{
	enum class StatsAchievementsEnum : uint32_t
	{
		FirstWarp = 0,
		FirstDiscovery = 1,
	};

	NMS_GameComponents::GcStatsAchievements::StatsAchievementsEnum StatsAchievements;

	friend bool operator==(const GcStatsAchievements& lhs, const GcStatsAchievements& rhs) 
	{
		return lhs.StatsAchievements == rhs.StatsAchievements;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkNGuiEditorSavedTreeNodeModification
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedTreeNodeModification> Children;
	NMS::NMSString0x100 Name;
	bool Modified;

	friend bool operator==(const TkNGuiEditorSavedTreeNodeModification& lhs, const TkNGuiEditorSavedTreeNodeModification& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.Name == rhs.Name &&
		lhs.Modified == rhs.Modified;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcStatsOneShotTypes
{
	enum class StatsOneShotEnum : uint32_t
	{
		ShipLanded = 0,
		ShipLaunched = 1,
		ShipWarped = 2,
		WeaponFired = 3,
	};

	NMS_GameComponents::GcStatsOneShotTypes::StatsOneShotEnum StatsOneShot;

	friend bool operator==(const GcStatsOneShotTypes& lhs, const GcStatsOneShotTypes& rhs) 
	{
		return lhs.StatsOneShot == rhs.StatsOneShot;
	}
};

//Dependency: Colour
struct GcStyleProp_Colour
{
	NMS::Colour Colour;

	friend bool operator==(const GcStyleProp_Colour& lhs, const GcStyleProp_Colour& rhs) 
	{
		return lhs.Colour == rhs.Colour;
	}
};

struct GcSurvivalBarBoolArray
{
	bool Values[3];

	friend bool operator==(const GcSurvivalBarBoolArray& lhs, const GcSurvivalBarBoolArray& rhs) 
	{
		return std::equal(std::begin(lhs.Values), std::end(lhs.Values), std::begin(rhs.Values));
	}
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcTechBoxData
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 InstallTechID;
	NMS::NMSString0x10 ProductID;
	bool IsAlien;

	friend bool operator==(const GcTechBoxData& lhs, const GcTechBoxData& rhs) 
	{
		return lhs.Icon == rhs.Icon &&
		lhs.InstallTechID == rhs.InstallTechID &&
		lhs.ProductID == rhs.ProductID &&
		lhs.IsAlien == rhs.IsAlien;
	}
};

//Dependency: GcTechBoxData
struct GcTechBoxTable
{
	std::vector<NMS_GameComponents::GcTechBoxData> Table;

	friend bool operator==(const GcTechBoxTable& lhs, const GcTechBoxTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct GcTechnologyAttachmentComponentData
{
	enum class InventoryEnum : uint32_t
	{
		Vehicle = 0,
	};

	std::vector<NMS::NMSString0x10> Techs;
	NMS_GameComponents::GcTechnologyAttachmentComponentData::InventoryEnum Inventory;
	bool Inverted;

	friend bool operator==(const GcTechnologyAttachmentComponentData& lhs, const GcTechnologyAttachmentComponentData& rhs) 
	{
		return lhs.Techs == rhs.Techs &&
		lhs.Inventory == rhs.Inventory &&
		lhs.Inverted == rhs.Inverted;
	}
};

//Dependency: GcTechnology
struct GcTechnologyTable
{
	std::vector<NMS_GameComponents::GcTechnology> Table;

	friend bool operator==(const GcTechnologyTable& lhs, const GcTechnologyTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: GcTechnology
struct GcTechnologyTypes
{
	std::vector<NMS_GameComponents::GcTechnology> Technology;

	friend bool operator==(const GcTechnologyTypes& lhs, const GcTechnologyTypes& rhs) 
	{
		return lhs.Technology == rhs.Technology;
	}
};

struct GcTrackedPosition
{
	enum class TrackedPositionEnum : uint32_t
	{
		GameCamera = 0,
		ActiveCamera = 1,
		DebugCamera = 2,
		Frozen = 3,
	};

	NMS_GameComponents::GcTrackedPosition::TrackedPositionEnum TrackedPosition;

	friend bool operator==(const GcTrackedPosition& lhs, const GcTrackedPosition& rhs) 
	{
		return lhs.TrackedPosition == rhs.TrackedPosition;
	}
};

//Dependency: GcTextPreset
struct GcTextPresetTable
{
	std::vector<NMS_GameComponents::GcTextPreset> Table;

	friend bool operator==(const GcTextPresetTable& lhs, const GcTextPresetTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: Colour
//Dependency: Vector2f
struct GcTextStyleOutline
{
	NMS::Colour OutlineColour;
	NMS::Vector2f OutlineOffset;

	friend bool operator==(const GcTextStyleOutline& lhs, const GcTextStyleOutline& rhs) 
	{
		return lhs.OutlineColour == rhs.OutlineColour &&
		lhs.OutlineOffset == rhs.OutlineOffset;
	}
};

//Dependency: Colour
//Dependency: Vector2f
struct GcTextStyleShadow
{
	NMS::Colour ShadowColour;
	NMS::Vector2f ShadowOffset;

	friend bool operator==(const GcTextStyleShadow& lhs, const GcTextStyleShadow& rhs) 
	{
		return lhs.ShadowColour == rhs.ShadowColour &&
		lhs.ShadowOffset == rhs.ShadowOffset;
	}
};

//Dependency: NMSString0x10
struct GcTorpedoComponentData
{
	NMS::NMSString0x10 DamageProjectileId;
	NMS::NMSString0x10 DamageShieldProjectileId;
	NMS::NMSString0x10 DestroyedEffect;
	float ApproachTime;
	float BrakeForceMax;
	float BrakeForceMin;
	float BrakeTime;
	float ForceMax;
	float ForceMin;
	float HitRadius;
	float MaxLifetime;
	float MaxSpeed;
	float MinCircleTime;
	float NoTargetLife;
	float RotateSpeed;

	friend bool operator==(const GcTorpedoComponentData& lhs, const GcTorpedoComponentData& rhs) 
	{
		return lhs.DamageProjectileId == rhs.DamageProjectileId &&
		lhs.DamageShieldProjectileId == rhs.DamageShieldProjectileId &&
		lhs.DestroyedEffect == rhs.DestroyedEffect &&
		lhs.ApproachTime == rhs.ApproachTime &&
		lhs.BrakeForceMax == rhs.BrakeForceMax &&
		lhs.BrakeForceMin == rhs.BrakeForceMin &&
		lhs.BrakeTime == rhs.BrakeTime &&
		lhs.ForceMax == rhs.ForceMax &&
		lhs.ForceMin == rhs.ForceMin &&
		lhs.HitRadius == rhs.HitRadius &&
		lhs.MaxLifetime == rhs.MaxLifetime &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MinCircleTime == rhs.MinCircleTime &&
		lhs.NoTargetLife == rhs.NoTargetLife &&
		lhs.RotateSpeed == rhs.RotateSpeed;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimRandomOneShots
{
	std::vector<NMS::NMSString0x10> List;
	NMS::NMSString0x10 Parent;
	float DelayMax;
	float DelayMin;

	friend bool operator==(const TkAnimRandomOneShots& lhs, const TkAnimRandomOneShots& rhs) 
	{
		return lhs.List == rhs.List &&
		lhs.Parent == rhs.Parent &&
		lhs.DelayMax == rhs.DelayMax &&
		lhs.DelayMin == rhs.DelayMin;
	}
};

//Dependency: VariableSizeString
struct TkNetEntityRefComponentData
{
	NMS::VariableSizeString Reference;

	friend bool operator==(const TkNetEntityRefComponentData& lhs, const TkNetEntityRefComponentData& rhs) 
	{
		return lhs.Reference == rhs.Reference;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcActionTriggerState
//Dependency: NMSString0x10
struct GcTriggerActionComponentData
{
	NMS::NMSString0x10 PersistentState;
	std::vector<NMS_GameComponents::GcActionTriggerState> States;
	bool HideModel;
	bool LinkStateToBaseGrid;
	bool Persistent;
	bool ResetShotTimeOnStateChange;
	bool StartInactive;

	friend bool operator==(const GcTriggerActionComponentData& lhs, const GcTriggerActionComponentData& rhs) 
	{
		return lhs.PersistentState == rhs.PersistentState &&
		lhs.States == rhs.States &&
		lhs.HideModel == rhs.HideModel &&
		lhs.LinkStateToBaseGrid == rhs.LinkStateToBaseGrid &&
		lhs.Persistent == rhs.Persistent &&
		lhs.ResetShotTimeOnStateChange == rhs.ResetShotTimeOnStateChange &&
		lhs.StartInactive == rhs.StartInactive;
	}
};

//Dependency: GcInputActions
//Dependency: TkTriggerFeedbackData
//Dependency: NMSString0x10
struct GcTriggerFeedbackState
{
	NMS::NMSString0x10 Id;
	NMS_Toolkit::TkTriggerFeedbackData Data;
	NMS_GameComponents::GcInputActions Action;

	friend bool operator==(const GcTriggerFeedbackState& lhs, const GcTriggerFeedbackState& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Data == rhs.Data &&
		lhs.Action == rhs.Action;
	}
};

//Dependency: GcTriggerFeedbackState
struct GcTriggerFeedbackStateTable
{
	std::vector<NMS_GameComponents::GcTriggerFeedbackState> Events;

	friend bool operator==(const GcTriggerFeedbackStateTable& lhs, const GcTriggerFeedbackStateTable& rhs) 
	{
		return lhs.Events == rhs.Events;
	}
};

//Dependency: NMSString0x10
struct GcTurretComponentData
{
	enum class TargetFilterEnum : uint32_t
	{
		Any = 0,
		FreightersOnly = 1,
		SmallShipsOnly = 2,
	};

	enum class GunTypeEnum : uint32_t
	{
		Laser = 0,
		Projectile = 1,
		Missile = 2,
	};

	NMS::NMSString0x10 LaserEffectId;
	NMS::NMSString0x10 LaserMuzzleChargeId;
	NMS::NMSString0x10 LaserMuzzleFlashId;
	NMS::NMSString0x10 MissileId;
	NMS::NMSString0x10 ProjectileId;
	NMS::NMSString0x10 ProjectileMuzzleFlashId;
	float BaseRotationAngleThreshold;
	NMS_GameComponents::GcTurretComponentData::GunTypeEnum GunType;
	float LevelledBurstCountExtra;
	float LevelledBurstTimeMultiplier;
	NMS_GameComponents::GcTurretComponentData::TargetFilterEnum TargetFilter;
	float TurrentLaserShootTimeRandomExtraMax;
	float TurretAimOffset;
	float TurretAngle;
	int32_t TurretBurstCount;
	float TurretBurstTime;
	float TurretDispersionAngle;
	float TurretLaserAbortDistance;
	float TurretLaserActiveTime;
	float TurretLaserChargeTime;
	float TurretLaserLength;
	float TurretLaserMoveSpeed;
	float TurretLaserShootTime;
	float TurretMaxDownAngle;
	float TurretMaxPitchTurnSpeedDegPerSec;
	float TurretMaxYawTurnSpeedDegPerSec;
	float TurretMissileLaunchSpeed;
	float TurretMissileLaunchTime;
	float TurretMissileRange;
	float TurretPitchSmoothTurnTime;
	float TurretProjectileRange;
	float TurretRange;
	float TurretShootPauseTime;
	float TurretYawSmoothTurnTime;
	bool CanMoveDuringBurst;
	bool FireInTurretFacing;
	bool HasFreighterAlertLight;
	bool RemotePlayersCanDamage;

	friend bool operator==(const GcTurretComponentData& lhs, const GcTurretComponentData& rhs) 
	{
		return lhs.LaserEffectId == rhs.LaserEffectId &&
		lhs.LaserMuzzleChargeId == rhs.LaserMuzzleChargeId &&
		lhs.LaserMuzzleFlashId == rhs.LaserMuzzleFlashId &&
		lhs.MissileId == rhs.MissileId &&
		lhs.ProjectileId == rhs.ProjectileId &&
		lhs.ProjectileMuzzleFlashId == rhs.ProjectileMuzzleFlashId &&
		lhs.BaseRotationAngleThreshold == rhs.BaseRotationAngleThreshold &&
		lhs.GunType == rhs.GunType &&
		lhs.LevelledBurstCountExtra == rhs.LevelledBurstCountExtra &&
		lhs.LevelledBurstTimeMultiplier == rhs.LevelledBurstTimeMultiplier &&
		lhs.TargetFilter == rhs.TargetFilter &&
		lhs.TurrentLaserShootTimeRandomExtraMax == rhs.TurrentLaserShootTimeRandomExtraMax &&
		lhs.TurretAimOffset == rhs.TurretAimOffset &&
		lhs.TurretAngle == rhs.TurretAngle &&
		lhs.TurretBurstCount == rhs.TurretBurstCount &&
		lhs.TurretBurstTime == rhs.TurretBurstTime &&
		lhs.TurretDispersionAngle == rhs.TurretDispersionAngle &&
		lhs.TurretLaserAbortDistance == rhs.TurretLaserAbortDistance &&
		lhs.TurretLaserActiveTime == rhs.TurretLaserActiveTime &&
		lhs.TurretLaserChargeTime == rhs.TurretLaserChargeTime &&
		lhs.TurretLaserLength == rhs.TurretLaserLength &&
		lhs.TurretLaserMoveSpeed == rhs.TurretLaserMoveSpeed &&
		lhs.TurretLaserShootTime == rhs.TurretLaserShootTime &&
		lhs.TurretMaxDownAngle == rhs.TurretMaxDownAngle &&
		lhs.TurretMaxPitchTurnSpeedDegPerSec == rhs.TurretMaxPitchTurnSpeedDegPerSec &&
		lhs.TurretMaxYawTurnSpeedDegPerSec == rhs.TurretMaxYawTurnSpeedDegPerSec &&
		lhs.TurretMissileLaunchSpeed == rhs.TurretMissileLaunchSpeed &&
		lhs.TurretMissileLaunchTime == rhs.TurretMissileLaunchTime &&
		lhs.TurretMissileRange == rhs.TurretMissileRange &&
		lhs.TurretPitchSmoothTurnTime == rhs.TurretPitchSmoothTurnTime &&
		lhs.TurretProjectileRange == rhs.TurretProjectileRange &&
		lhs.TurretRange == rhs.TurretRange &&
		lhs.TurretShootPauseTime == rhs.TurretShootPauseTime &&
		lhs.TurretYawSmoothTurnTime == rhs.TurretYawSmoothTurnTime &&
		lhs.CanMoveDuringBurst == rhs.CanMoveDuringBurst &&
		lhs.FireInTurretFacing == rhs.FireInTurretFacing &&
		lhs.HasFreighterAlertLight == rhs.HasFreighterAlertLight &&
		lhs.RemotePlayersCanDamage == rhs.RemotePlayersCanDamage;
	}
};

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcUniqueIdData
{
	enum class UniqueIdTypeEnum : uint32_t
	{
		Invalid = 0,
		Deterministic = 1,
		UserSpawned = 2,
	};

	uint64_t DeterministicSeed;
	uint32_t Iteration;
	NMS_GameComponents::GcUniqueIdData::UniqueIdTypeEnum UniqueIdType;
	NMS::NMSString0x40 OnlineID;
	NMS::NMSString0x20 PlatformID;

	friend bool operator==(const GcUniqueIdData& lhs, const GcUniqueIdData& rhs) 
	{
		return lhs.DeterministicSeed == rhs.DeterministicSeed &&
		lhs.Iteration == rhs.Iteration &&
		lhs.UniqueIdType == rhs.UniqueIdType &&
		lhs.OnlineID == rhs.OnlineID &&
		lhs.PlatformID == rhs.PlatformID;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkEntitlementListData
{
	NMS::NMSString0x10 EntitlementId;
	NMS::NMSString0x40 ServiceID;

	friend bool operator==(const TkEntitlementListData& lhs, const TkEntitlementListData& rhs) 
	{
		return lhs.EntitlementId == rhs.EntitlementId &&
		lhs.ServiceID == rhs.ServiceID;
	}
};

//Dependency: TkEntitlementListData
struct TkEntitlementList
{
	std::vector<NMS_Toolkit::TkEntitlementListData> Entitlements;

	friend bool operator==(const TkEntitlementList& lhs, const TkEntitlementList& rhs) 
	{
		return lhs.Entitlements == rhs.Entitlements;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcValueData
{

	friend bool operator==(const GcValueData& lhs, const GcValueData& rhs) 
	{
		return true;
	}
};

//Dependency: GcVehicleType
//Dependency: TkModelResource
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcVehicleComponentData
{
	NMS_Toolkit::TkModelResource WheelModel;
	NMS::VariableSizeString Cockpit;
	NMS::NMSString0x10 VehicleType;
	int32_t BaseHealth;
	NMS_GameComponents::GcVehicleType Class;
	float FoVFixedDistance;
	float MaxHeadPitchDown;
	float MaxHeadPitchUp;
	float MaxHeadTurn;
	float MinTurretAngle;

	friend bool operator==(const GcVehicleComponentData& lhs, const GcVehicleComponentData& rhs) 
	{
		return lhs.WheelModel == rhs.WheelModel &&
		lhs.Cockpit == rhs.Cockpit &&
		lhs.VehicleType == rhs.VehicleType &&
		lhs.BaseHealth == rhs.BaseHealth &&
		lhs.Class == rhs.Class &&
		lhs.FoVFixedDistance == rhs.FoVFixedDistance &&
		lhs.MaxHeadPitchDown == rhs.MaxHeadPitchDown &&
		lhs.MaxHeadPitchUp == rhs.MaxHeadPitchUp &&
		lhs.MaxHeadTurn == rhs.MaxHeadTurn &&
		lhs.MinTurretAngle == rhs.MinTurretAngle;
	}
};

//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x100
//Dependency: NMSString0x20
//Dependency: NMSString0x80
struct GcVehicleData
{
	NMS::Vector3f WheelGrassPushers[10];
	NMS::Vector3f WheelLocs[10];
	NMS::Vector3f CollDimensions;
	NMS::Vector3f CollOffset;
	NMS::Vector3f ExtraCollOffset;
	NMS::Vector3f FirstPersonSeatAdjust;
	NMS::Vector3f InertiaDimensions;
	NMS::Vector3f WheelForwardAngularFactor;
	NMS::Vector3f WheelSideAngularFactor;
	NMS::Vector3f WheelSuspensionAngularFactor;
	NMS::Vector3f WheelTurnAngularFactor;
	NMS::NMSString0x10 SuspensionAnimNames[10];
	NMS::NMSString0x10 Name;
	NMS::NMSString0x10 SideSkidParticle;
	NMS::NMSString0x10 SubSplashParticle;
	NMS::NMSString0x10 WheelSpinParticle;
	NMS::NMSString0x10 WheelSplashParticle;
	float WheelRadiusMultiplier[10];
	float WheelRayFakeWidthFactor[10];
	float AudioImpactSpeedMul;
	float AudioImpactSpeedThreshold;
	float CollRadius;
	float CreatureMassScale;
	float HardStopSpeedThreshold;
	float HeadlightIntensity;
	float InertiaMul;
	int32_t NumGrassPushers;
	int32_t NumWheels;
	float SideSkidParticleMaxRate;
	float SideSkidParticleMaxThresh;
	float SideSkidParticleMinRate;
	float SideSkidParticleMinThresh;
	float SteeringWheelPushRange;
	float SteeringWheelSpringMultiplier;
	float SubSplashParticleMaxThresh;
	float SubSplashParticleMinThresh;
	float TopSpeedForward;
	float TopSpeedReverse;
	float TurningWheelForce;
	float TurningWheelForceDamperVR;
	float TurningWheelFrictionBraking;
	float TurningWheelFrictionNonBraking;
	float TurningWheelFrictionOmega;
	float UnderwaterAlignDir;
	float UnderwaterAlignUp;
	float UnderwaterEngineDirectionBrake;
	float UnderwaterEngineDirectionBrakeVertical;
	float UnderwaterEngineFalloff;
	float UnderwaterEngineMaxSpeed;
	float UnderwaterEngineMaxSpeedVR;
	float UnderwaterEnginePower;
	float UnderwaterEnginePowerVR;
	float VehicleAngularDampingAerial;
	float VehicleAngularDampingGround;
	float VehicleAngularDampingWater;
	float VehicleAudioSideSkidMul;
	float VehicleAudioSideSkidThreshold;
	float VehicleAudioSpeedMul;
	float VehicleAudioSpinSkidMul;
	float VehicleAudioSpinSkidThreshold;
	float VehicleAudioSuspensionScale;
	float VehicleAudioSuspensionThreshold;
	float VehicleAudioTorqueMul;
	float VehicleBoostExtraMaxSpeedAir;
	float VehicleBoostForce;
	float VehicleBoostMaxSpeed;
	float VehicleBoostRechargeTime;
	float VehicleBoostSpeedFalloff;
	float VehicleBoostTime;
	float VehicleComCheat;
	float VehicleGravity;
	float VehicleGravityWater;
	float VehicleJumpAirControlForce;
	float VehicleJumpAirMaxTorque;
	float VehicleJumpAirRotateTimeMax;
	float VehicleJumpAirRotateTimeMin;
	float VehicleJumpAirRotateXAmount;
	float VehicleJumpAirRotateZAmount;
	float VehicleJumpForce;
	float VehicleLinearDampingAerial;
	float VehicleLinearDampingGround;
	float VehicleLinearDampingWater;
	float VehicleUnderwaterRotateTime;
	float VisualPitchAmount;
	float VisualRollAmount;
	float VisualRollOffsetY;
	float WheelDragginess;
	float WheelEndHeight;
	float WheelFrontFrictionDynamic;
	float WheelFrontFrictionDynamicThreshold;
	float WheelFrontFrictionOmega;
	float WheelFrontFrictionStatic;
	float WheelFrontFrictionStaticThreshold;
	float WheelGrassPusherFrequency;
	float WheelGrassPusherStrength;
	float WheelGrassPusherWobble;
	float WheelGuardAdjustUpwards;
	float WheelGuardExtraHeight;
	float WheelGuardExtraRadius;
	float WheelGuardMassScaleMax;
	float WheelGuardMassScaleMin;
	float WheelGuardMassScaleMinClamp;
	float WheelGuardPenetrationScaleMax;
	float WheelGuardPenetrationScaleMin;
	float WheelGuardPenetrationScaleMinClamp;
	float WheelGuardVerticalResponseMax;
	float WheelGuardVerticalResponseMin;
	float WheelMaxAccelForceForward;
	float WheelMaxAccelForceReverse;
	float WheelMaxDecelForceBraking;
	float WheelMaxDecelForceNonBraking;
	float WheelRadius;
	float WheelSideFrictionDynamic;
	float WheelSideFrictionDynamicThreshold;
	float WheelSideFrictionOmega;
	float WheelSideFrictionStatic;
	float WheelSideFrictionStaticThreshold;
	float WheelSpinniness;
	float WheelSpinParticleMaxRate;
	float WheelSpinParticleMaxThresh;
	float WheelSpinParticleMinRate;
	float WheelSpinParticleMinThresh;
	float WheelStartHeight;
	float WheelSuspensionAnimMax;
	float WheelSuspensionAnimMin;
	float WheelSuspensionDamping;
	float WheelSuspensionForce;
	float WheelSuspensionlength;
	NMS::NMSString0x100 CockpitHeadlightNames[2];
	NMS::NMSString0x100 HeadlightNames[2];
	NMS::NMSString0x100 VolumetricHeadlightNames[2];
	NMS::NMSString0x20 WheelNames[10];
	NMS::NMSString0x20 WheelSuspensionNames[10];
	NMS::NMSString0x80 AudioBoostStart;
	NMS::NMSString0x80 AudioBoostStop;
	NMS::NMSString0x80 AudioHornStart;
	NMS::NMSString0x80 AudioHornStop;
	NMS::NMSString0x80 AudioIdleExterior;
	NMS::NMSString0x80 AudioImpacts;
	NMS::NMSString0x80 AudioJump;
	NMS::NMSString0x80 AudioStart;
	NMS::NMSString0x80 AudioStop;
	NMS::NMSString0x80 AudioSuspension;
	bool CustomCollision;
	bool DriveOnTopOfWater;
	bool LockVehicleAxis;
	bool UseBuggySuspensionHack;
	bool UseRoverWheelHack;
	bool VehicleAudioSwapSkidAndSpeed;

	friend bool operator==(const GcVehicleData& lhs, const GcVehicleData& rhs) 
	{
		return std::equal(std::begin(lhs.WheelGrassPushers), std::end(lhs.WheelGrassPushers), std::begin(rhs.WheelGrassPushers)) &&
		std::equal(std::begin(lhs.WheelLocs), std::end(lhs.WheelLocs), std::begin(rhs.WheelLocs)) &&
		lhs.CollDimensions == rhs.CollDimensions &&
		lhs.CollOffset == rhs.CollOffset &&
		lhs.ExtraCollOffset == rhs.ExtraCollOffset &&
		lhs.FirstPersonSeatAdjust == rhs.FirstPersonSeatAdjust &&
		lhs.InertiaDimensions == rhs.InertiaDimensions &&
		lhs.WheelForwardAngularFactor == rhs.WheelForwardAngularFactor &&
		lhs.WheelSideAngularFactor == rhs.WheelSideAngularFactor &&
		lhs.WheelSuspensionAngularFactor == rhs.WheelSuspensionAngularFactor &&
		lhs.WheelTurnAngularFactor == rhs.WheelTurnAngularFactor &&
		std::equal(std::begin(lhs.SuspensionAnimNames), std::end(lhs.SuspensionAnimNames), std::begin(rhs.SuspensionAnimNames)) &&
		lhs.Name == rhs.Name &&
		lhs.SideSkidParticle == rhs.SideSkidParticle &&
		lhs.SubSplashParticle == rhs.SubSplashParticle &&
		lhs.WheelSpinParticle == rhs.WheelSpinParticle &&
		lhs.WheelSplashParticle == rhs.WheelSplashParticle &&
		std::equal(std::begin(lhs.WheelRadiusMultiplier), std::end(lhs.WheelRadiusMultiplier), std::begin(rhs.WheelRadiusMultiplier)) &&
		std::equal(std::begin(lhs.WheelRayFakeWidthFactor), std::end(lhs.WheelRayFakeWidthFactor), std::begin(rhs.WheelRayFakeWidthFactor)) &&
		lhs.AudioImpactSpeedMul == rhs.AudioImpactSpeedMul &&
		lhs.AudioImpactSpeedThreshold == rhs.AudioImpactSpeedThreshold &&
		lhs.CollRadius == rhs.CollRadius &&
		lhs.CreatureMassScale == rhs.CreatureMassScale &&
		lhs.HardStopSpeedThreshold == rhs.HardStopSpeedThreshold &&
		lhs.HeadlightIntensity == rhs.HeadlightIntensity &&
		lhs.InertiaMul == rhs.InertiaMul &&
		lhs.NumGrassPushers == rhs.NumGrassPushers &&
		lhs.NumWheels == rhs.NumWheels &&
		lhs.SideSkidParticleMaxRate == rhs.SideSkidParticleMaxRate &&
		lhs.SideSkidParticleMaxThresh == rhs.SideSkidParticleMaxThresh &&
		lhs.SideSkidParticleMinRate == rhs.SideSkidParticleMinRate &&
		lhs.SideSkidParticleMinThresh == rhs.SideSkidParticleMinThresh &&
		lhs.SteeringWheelPushRange == rhs.SteeringWheelPushRange &&
		lhs.SteeringWheelSpringMultiplier == rhs.SteeringWheelSpringMultiplier &&
		lhs.SubSplashParticleMaxThresh == rhs.SubSplashParticleMaxThresh &&
		lhs.SubSplashParticleMinThresh == rhs.SubSplashParticleMinThresh &&
		lhs.TopSpeedForward == rhs.TopSpeedForward &&
		lhs.TopSpeedReverse == rhs.TopSpeedReverse &&
		lhs.TurningWheelForce == rhs.TurningWheelForce &&
		lhs.TurningWheelForceDamperVR == rhs.TurningWheelForceDamperVR &&
		lhs.TurningWheelFrictionBraking == rhs.TurningWheelFrictionBraking &&
		lhs.TurningWheelFrictionNonBraking == rhs.TurningWheelFrictionNonBraking &&
		lhs.TurningWheelFrictionOmega == rhs.TurningWheelFrictionOmega &&
		lhs.UnderwaterAlignDir == rhs.UnderwaterAlignDir &&
		lhs.UnderwaterAlignUp == rhs.UnderwaterAlignUp &&
		lhs.UnderwaterEngineDirectionBrake == rhs.UnderwaterEngineDirectionBrake &&
		lhs.UnderwaterEngineDirectionBrakeVertical == rhs.UnderwaterEngineDirectionBrakeVertical &&
		lhs.UnderwaterEngineFalloff == rhs.UnderwaterEngineFalloff &&
		lhs.UnderwaterEngineMaxSpeed == rhs.UnderwaterEngineMaxSpeed &&
		lhs.UnderwaterEngineMaxSpeedVR == rhs.UnderwaterEngineMaxSpeedVR &&
		lhs.UnderwaterEnginePower == rhs.UnderwaterEnginePower &&
		lhs.UnderwaterEnginePowerVR == rhs.UnderwaterEnginePowerVR &&
		lhs.VehicleAngularDampingAerial == rhs.VehicleAngularDampingAerial &&
		lhs.VehicleAngularDampingGround == rhs.VehicleAngularDampingGround &&
		lhs.VehicleAngularDampingWater == rhs.VehicleAngularDampingWater &&
		lhs.VehicleAudioSideSkidMul == rhs.VehicleAudioSideSkidMul &&
		lhs.VehicleAudioSideSkidThreshold == rhs.VehicleAudioSideSkidThreshold &&
		lhs.VehicleAudioSpeedMul == rhs.VehicleAudioSpeedMul &&
		lhs.VehicleAudioSpinSkidMul == rhs.VehicleAudioSpinSkidMul &&
		lhs.VehicleAudioSpinSkidThreshold == rhs.VehicleAudioSpinSkidThreshold &&
		lhs.VehicleAudioSuspensionScale == rhs.VehicleAudioSuspensionScale &&
		lhs.VehicleAudioSuspensionThreshold == rhs.VehicleAudioSuspensionThreshold &&
		lhs.VehicleAudioTorqueMul == rhs.VehicleAudioTorqueMul &&
		lhs.VehicleBoostExtraMaxSpeedAir == rhs.VehicleBoostExtraMaxSpeedAir &&
		lhs.VehicleBoostForce == rhs.VehicleBoostForce &&
		lhs.VehicleBoostMaxSpeed == rhs.VehicleBoostMaxSpeed &&
		lhs.VehicleBoostRechargeTime == rhs.VehicleBoostRechargeTime &&
		lhs.VehicleBoostSpeedFalloff == rhs.VehicleBoostSpeedFalloff &&
		lhs.VehicleBoostTime == rhs.VehicleBoostTime &&
		lhs.VehicleComCheat == rhs.VehicleComCheat &&
		lhs.VehicleGravity == rhs.VehicleGravity &&
		lhs.VehicleGravityWater == rhs.VehicleGravityWater &&
		lhs.VehicleJumpAirControlForce == rhs.VehicleJumpAirControlForce &&
		lhs.VehicleJumpAirMaxTorque == rhs.VehicleJumpAirMaxTorque &&
		lhs.VehicleJumpAirRotateTimeMax == rhs.VehicleJumpAirRotateTimeMax &&
		lhs.VehicleJumpAirRotateTimeMin == rhs.VehicleJumpAirRotateTimeMin &&
		lhs.VehicleJumpAirRotateXAmount == rhs.VehicleJumpAirRotateXAmount &&
		lhs.VehicleJumpAirRotateZAmount == rhs.VehicleJumpAirRotateZAmount &&
		lhs.VehicleJumpForce == rhs.VehicleJumpForce &&
		lhs.VehicleLinearDampingAerial == rhs.VehicleLinearDampingAerial &&
		lhs.VehicleLinearDampingGround == rhs.VehicleLinearDampingGround &&
		lhs.VehicleLinearDampingWater == rhs.VehicleLinearDampingWater &&
		lhs.VehicleUnderwaterRotateTime == rhs.VehicleUnderwaterRotateTime &&
		lhs.VisualPitchAmount == rhs.VisualPitchAmount &&
		lhs.VisualRollAmount == rhs.VisualRollAmount &&
		lhs.VisualRollOffsetY == rhs.VisualRollOffsetY &&
		lhs.WheelDragginess == rhs.WheelDragginess &&
		lhs.WheelEndHeight == rhs.WheelEndHeight &&
		lhs.WheelFrontFrictionDynamic == rhs.WheelFrontFrictionDynamic &&
		lhs.WheelFrontFrictionDynamicThreshold == rhs.WheelFrontFrictionDynamicThreshold &&
		lhs.WheelFrontFrictionOmega == rhs.WheelFrontFrictionOmega &&
		lhs.WheelFrontFrictionStatic == rhs.WheelFrontFrictionStatic &&
		lhs.WheelFrontFrictionStaticThreshold == rhs.WheelFrontFrictionStaticThreshold &&
		lhs.WheelGrassPusherFrequency == rhs.WheelGrassPusherFrequency &&
		lhs.WheelGrassPusherStrength == rhs.WheelGrassPusherStrength &&
		lhs.WheelGrassPusherWobble == rhs.WheelGrassPusherWobble &&
		lhs.WheelGuardAdjustUpwards == rhs.WheelGuardAdjustUpwards &&
		lhs.WheelGuardExtraHeight == rhs.WheelGuardExtraHeight &&
		lhs.WheelGuardExtraRadius == rhs.WheelGuardExtraRadius &&
		lhs.WheelGuardMassScaleMax == rhs.WheelGuardMassScaleMax &&
		lhs.WheelGuardMassScaleMin == rhs.WheelGuardMassScaleMin &&
		lhs.WheelGuardMassScaleMinClamp == rhs.WheelGuardMassScaleMinClamp &&
		lhs.WheelGuardPenetrationScaleMax == rhs.WheelGuardPenetrationScaleMax &&
		lhs.WheelGuardPenetrationScaleMin == rhs.WheelGuardPenetrationScaleMin &&
		lhs.WheelGuardPenetrationScaleMinClamp == rhs.WheelGuardPenetrationScaleMinClamp &&
		lhs.WheelGuardVerticalResponseMax == rhs.WheelGuardVerticalResponseMax &&
		lhs.WheelGuardVerticalResponseMin == rhs.WheelGuardVerticalResponseMin &&
		lhs.WheelMaxAccelForceForward == rhs.WheelMaxAccelForceForward &&
		lhs.WheelMaxAccelForceReverse == rhs.WheelMaxAccelForceReverse &&
		lhs.WheelMaxDecelForceBraking == rhs.WheelMaxDecelForceBraking &&
		lhs.WheelMaxDecelForceNonBraking == rhs.WheelMaxDecelForceNonBraking &&
		lhs.WheelRadius == rhs.WheelRadius &&
		lhs.WheelSideFrictionDynamic == rhs.WheelSideFrictionDynamic &&
		lhs.WheelSideFrictionDynamicThreshold == rhs.WheelSideFrictionDynamicThreshold &&
		lhs.WheelSideFrictionOmega == rhs.WheelSideFrictionOmega &&
		lhs.WheelSideFrictionStatic == rhs.WheelSideFrictionStatic &&
		lhs.WheelSideFrictionStaticThreshold == rhs.WheelSideFrictionStaticThreshold &&
		lhs.WheelSpinniness == rhs.WheelSpinniness &&
		lhs.WheelSpinParticleMaxRate == rhs.WheelSpinParticleMaxRate &&
		lhs.WheelSpinParticleMaxThresh == rhs.WheelSpinParticleMaxThresh &&
		lhs.WheelSpinParticleMinRate == rhs.WheelSpinParticleMinRate &&
		lhs.WheelSpinParticleMinThresh == rhs.WheelSpinParticleMinThresh &&
		lhs.WheelStartHeight == rhs.WheelStartHeight &&
		lhs.WheelSuspensionAnimMax == rhs.WheelSuspensionAnimMax &&
		lhs.WheelSuspensionAnimMin == rhs.WheelSuspensionAnimMin &&
		lhs.WheelSuspensionDamping == rhs.WheelSuspensionDamping &&
		lhs.WheelSuspensionForce == rhs.WheelSuspensionForce &&
		lhs.WheelSuspensionlength == rhs.WheelSuspensionlength &&
		std::equal(std::begin(lhs.CockpitHeadlightNames), std::end(lhs.CockpitHeadlightNames), std::begin(rhs.CockpitHeadlightNames)) &&
		std::equal(std::begin(lhs.HeadlightNames), std::end(lhs.HeadlightNames), std::begin(rhs.HeadlightNames)) &&
		std::equal(std::begin(lhs.VolumetricHeadlightNames), std::end(lhs.VolumetricHeadlightNames), std::begin(rhs.VolumetricHeadlightNames)) &&
		std::equal(std::begin(lhs.WheelNames), std::end(lhs.WheelNames), std::begin(rhs.WheelNames)) &&
		std::equal(std::begin(lhs.WheelSuspensionNames), std::end(lhs.WheelSuspensionNames), std::begin(rhs.WheelSuspensionNames)) &&
		lhs.AudioBoostStart == rhs.AudioBoostStart &&
		lhs.AudioBoostStop == rhs.AudioBoostStop &&
		lhs.AudioHornStart == rhs.AudioHornStart &&
		lhs.AudioHornStop == rhs.AudioHornStop &&
		lhs.AudioIdleExterior == rhs.AudioIdleExterior &&
		lhs.AudioImpacts == rhs.AudioImpacts &&
		lhs.AudioJump == rhs.AudioJump &&
		lhs.AudioStart == rhs.AudioStart &&
		lhs.AudioStop == rhs.AudioStop &&
		lhs.AudioSuspension == rhs.AudioSuspension &&
		lhs.CustomCollision == rhs.CustomCollision &&
		lhs.DriveOnTopOfWater == rhs.DriveOnTopOfWater &&
		lhs.LockVehicleAxis == rhs.LockVehicleAxis &&
		lhs.UseBuggySuspensionHack == rhs.UseBuggySuspensionHack &&
		lhs.UseRoverWheelHack == rhs.UseRoverWheelHack &&
		lhs.VehicleAudioSwapSkidAndSpeed == rhs.VehicleAudioSwapSkidAndSpeed;
	}
};

//Dependency: GcVehicleType
struct GcVehicleGarageComponentData
{
	NMS_GameComponents::GcVehicleType Vehicle;

	friend bool operator==(const GcVehicleGarageComponentData& lhs, const GcVehicleGarageComponentData& rhs) 
	{
		return lhs.Vehicle == rhs.Vehicle;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNamedAudioIdArray
struct TkNamedAudioIdArrayTable
{
	std::vector<NMS_Toolkit::TkNamedAudioIdArray> Array;

	friend bool operator==(const TkNamedAudioIdArrayTable& lhs, const TkNamedAudioIdArrayTable& rhs) 
	{
		return lhs.Array == rhs.Array;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcVehicleMuzzleData
{
	NMS::NMSString0x10 MuzzleFlashDataID[5];

	friend bool operator==(const GcVehicleMuzzleData& lhs, const GcVehicleMuzzleData& rhs) 
	{
		return std::equal(std::begin(lhs.MuzzleFlashDataID), std::end(lhs.MuzzleFlashDataID), std::begin(rhs.MuzzleFlashDataID));
	}
};

struct GcVehicleRaceInviteComponentData
{
	float Radius;

	friend bool operator==(const GcVehicleRaceInviteComponentData& lhs, const GcVehicleRaceInviteComponentData& rhs) 
	{
		return lhs.Radius == rhs.Radius;
	}
};

//Dependency: GcVibrationChannelData
struct GcVibrationDataTable
{
	std::vector<NMS_GameComponents::GcVibrationChannelData> Data;

	friend bool operator==(const GcVibrationDataTable& lhs, const GcVibrationDataTable& rhs) 
	{
		return lhs.Data == rhs.Data;
	}
};

struct GcWeightedBuildingSize
{
	float RelativeProbability;
	int32_t SizeX;
	int32_t SizeY;
	int32_t SizeZ;
	bool CreateSymmetricBuilding;

	friend bool operator==(const GcWeightedBuildingSize& lhs, const GcWeightedBuildingSize& rhs) 
	{
		return lhs.RelativeProbability == rhs.RelativeProbability &&
		lhs.SizeX == rhs.SizeX &&
		lhs.SizeY == rhs.SizeY &&
		lhs.SizeZ == rhs.SizeZ &&
		lhs.CreateSymmetricBuilding == rhs.CreateSymmetricBuilding;
	}
};

//Dependency: GcWeightedResource
//Dependency: NMSString0x20
//Dependency: GcWeightedBuildingSize
//Dependency: GcFreighterBaseRoom
//Dependency: GcMinimumUseConstraint
//Dependency: GcModuleOverride
//Dependency: GcBaseBuildingPartStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcWFCBuilding
{
	NMS::VariableSizeString DecorationSet;
	std::vector<int64_t> FallbackSeeds;
	std::vector<NMS::NMSString0x10> GroupsEnabled;
	std::vector<NMS_GameComponents::GcWeightedResource> Layouts;
	std::vector<NMS_GameComponents::GcMinimumUseConstraint> MinimumUseConstraints;
	std::vector<NMS_GameComponents::GcModuleOverride> ModuleOverrides;
	NMS::VariableSizeString ModuleSet;
	std::vector<NMS::NMSString0x10> NPCs;
	std::vector<int64_t> PresetFallbackSeeds;
	std::vector<NMS_GameComponents::GcFreighterBaseRoom> Rooms;
	std::vector<NMS_GameComponents::GcWeightedBuildingSize> Sizes;
	float InitialUnlockProbability;
	int32_t NumberOfPresetsPerPlanet;
	NMS_GameComponents::GcBaseBuildingPartStyle ReplaceMaterials;
	NMS::NMSString0x20 Name;
	bool DontSpawnNearPlayerBases;
	bool ImprovedCoherence;
	bool RemoveUnreachableBlocks;
	bool RequireNoUnreachableRooms;

	friend bool operator==(const GcWFCBuilding& lhs, const GcWFCBuilding& rhs) 
	{
		return lhs.DecorationSet == rhs.DecorationSet &&
		lhs.FallbackSeeds == rhs.FallbackSeeds &&
		lhs.GroupsEnabled == rhs.GroupsEnabled &&
		lhs.Layouts == rhs.Layouts &&
		lhs.MinimumUseConstraints == rhs.MinimumUseConstraints &&
		lhs.ModuleOverrides == rhs.ModuleOverrides &&
		lhs.ModuleSet == rhs.ModuleSet &&
		lhs.NPCs == rhs.NPCs &&
		lhs.PresetFallbackSeeds == rhs.PresetFallbackSeeds &&
		lhs.Rooms == rhs.Rooms &&
		lhs.Sizes == rhs.Sizes &&
		lhs.InitialUnlockProbability == rhs.InitialUnlockProbability &&
		lhs.NumberOfPresetsPerPlanet == rhs.NumberOfPresetsPerPlanet &&
		lhs.ReplaceMaterials == rhs.ReplaceMaterials &&
		lhs.Name == rhs.Name &&
		lhs.DontSpawnNearPlayerBases == rhs.DontSpawnNearPlayerBases &&
		lhs.ImprovedCoherence == rhs.ImprovedCoherence &&
		lhs.RemoveUnreachableBlocks == rhs.RemoveUnreachableBlocks &&
		lhs.RequireNoUnreachableRooms == rhs.RequireNoUnreachableRooms;
	}
};

struct GcWFCDecorationTheme
{
	enum class WFCDecorationThemeEnum : uint32_t
	{
		Default = 0,
		Construction = 1,
		Upgrade1 = 2,
		Upgrade2 = 3,
		Upgrade3 = 4,
	};

	NMS_GameComponents::GcWFCDecorationTheme::WFCDecorationThemeEnum WFCDecorationTheme;

	friend bool operator==(const GcWFCDecorationTheme& lhs, const GcWFCDecorationTheme& rhs) 
	{
		return lhs.WFCDecorationTheme == rhs.WFCDecorationTheme;
	}
};

struct GcWeaponTerminalInteractionData
{
	int32_t RespawnPeriodInSeconds;
	bool UseSentinelWeapon;

	friend bool operator==(const GcWeaponTerminalInteractionData& lhs, const GcWeaponTerminalInteractionData& rhs) 
	{
		return lhs.RespawnPeriodInSeconds == rhs.RespawnPeriodInSeconds &&
		lhs.UseSentinelWeapon == rhs.UseSentinelWeapon;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkLanguages
//Dependency: VariableSizeString
struct TkLanguageFontTableEntry
{
	NMS::VariableSizeString ConsoleFont;
	NMS::VariableSizeString ConsoleFont2;
	NMS::VariableSizeString GameFont;
	NMS::VariableSizeString GameFont2;
	NMS_Toolkit::TkLanguages Language;

	friend bool operator==(const TkLanguageFontTableEntry& lhs, const TkLanguageFontTableEntry& rhs) 
	{
		return lhs.ConsoleFont == rhs.ConsoleFont &&
		lhs.ConsoleFont2 == rhs.ConsoleFont2 &&
		lhs.GameFont == rhs.GameFont &&
		lhs.GameFont2 == rhs.GameFont2 &&
		lhs.Language == rhs.Language;
	}
};

//Dependency: TkLanguageFontTableEntry
struct TkLanguageFontTable
{
	std::vector<NMS_Toolkit::TkLanguageFontTableEntry> Table;

	friend bool operator==(const TkLanguageFontTable& lhs, const TkLanguageFontTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: TkLanguages
struct TkLanguagesAllowedData
{
	std::vector<NMS_Toolkit::TkLanguages> Allowed;
	NMS_Toolkit::TkLanguages Fallback;

	friend bool operator==(const TkLanguagesAllowedData& lhs, const TkLanguagesAllowedData& rhs) 
	{
		return lhs.Allowed == rhs.Allowed &&
		lhs.Fallback == rhs.Fallback;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlanetWeatherColourData
struct GcWeatherColourSettingList
{
	std::vector<NMS_GameComponents::GcPlanetWeatherColourData> Settings;

	friend bool operator==(const GcWeatherColourSettingList& lhs, const GcWeatherColourSettingList& rhs) 
	{
		return lhs.Settings == rhs.Settings;
	}
};

//Dependency: GcWeatherColourSettingList
struct GcWeatherColourSettings
{
	NMS_GameComponents::GcWeatherColourSettingList PerBiomeSettings[17];
	NMS_GameComponents::GcWeatherColourSettingList DarkSettings;
	NMS_GameComponents::GcWeatherColourSettingList GenericSettings;

	friend bool operator==(const GcWeatherColourSettings& lhs, const GcWeatherColourSettings& rhs) 
	{
		return std::equal(std::begin(lhs.PerBiomeSettings), std::end(lhs.PerBiomeSettings), std::begin(rhs.PerBiomeSettings)) &&
		lhs.DarkSettings == rhs.DarkSettings &&
		lhs.GenericSettings == rhs.GenericSettings;
	}
};

struct GcWeatherEffectLightningData
{

	friend bool operator==(const GcWeatherEffectLightningData& lhs, const GcWeatherEffectLightningData& rhs) 
	{
		return true;
	}
};

//Dependency: GcWeatherEffect
struct GcWeatherEffectTable
{
	std::vector<NMS_GameComponents::GcWeatherEffect> Effects;

	friend bool operator==(const GcWeatherEffectTable& lhs, const GcWeatherEffectTable& rhs) 
	{
		return lhs.Effects == rhs.Effects;
	}
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcWeatherHazardMeteorData
{
	NMS_Toolkit::TkModelResource ImpactEffect;
	NMS_Toolkit::TkModelResource ImpactExplode;
	NMS_Toolkit::TkModelResource IndicatorDecal;
	NMS_Toolkit::TkModelResource Meteor;
	NMS_Toolkit::TkModelResource StaticDecal;
	NMS::NMSString0x10 DamageID;
	NMS::NMSString0x10 ImpactParticle;
	NMS::NMSString0x10 ShakeID;
	float DamageRadius;
	float DecalFullGrowthProgress;
	float EarliestImpact;
	float EarliestImpactFirstInstance;
	float FlashStartProgress;
	float FullDamageRadius;
	int32_t MaxMeteors;
	float MaxRadius;
	int32_t MinMeteors;
	float MinRadius;
	float NumFlashes;
	float Speed;
	float StormDuration;

	friend bool operator==(const GcWeatherHazardMeteorData& lhs, const GcWeatherHazardMeteorData& rhs) 
	{
		return lhs.ImpactEffect == rhs.ImpactEffect &&
		lhs.ImpactExplode == rhs.ImpactExplode &&
		lhs.IndicatorDecal == rhs.IndicatorDecal &&
		lhs.Meteor == rhs.Meteor &&
		lhs.StaticDecal == rhs.StaticDecal &&
		lhs.DamageID == rhs.DamageID &&
		lhs.ImpactParticle == rhs.ImpactParticle &&
		lhs.ShakeID == rhs.ShakeID &&
		lhs.DamageRadius == rhs.DamageRadius &&
		lhs.DecalFullGrowthProgress == rhs.DecalFullGrowthProgress &&
		lhs.EarliestImpact == rhs.EarliestImpact &&
		lhs.EarliestImpactFirstInstance == rhs.EarliestImpactFirstInstance &&
		lhs.FlashStartProgress == rhs.FlashStartProgress &&
		lhs.FullDamageRadius == rhs.FullDamageRadius &&
		lhs.MaxMeteors == rhs.MaxMeteors &&
		lhs.MaxRadius == rhs.MaxRadius &&
		lhs.MinMeteors == rhs.MinMeteors &&
		lhs.MinRadius == rhs.MinRadius &&
		lhs.NumFlashes == rhs.NumFlashes &&
		lhs.Speed == rhs.Speed &&
		lhs.StormDuration == rhs.StormDuration;
	}
};

//Dependency: GcDay
//Dependency: NMSString0x80
struct GcWeeklyRecurrence
{
	NMS_GameComponents::GcDay RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;

	friend bool operator==(const GcWeeklyRecurrence& lhs, const GcWeeklyRecurrence& rhs) 
	{
		return lhs.RecurrenceDay == rhs.RecurrenceDay &&
		lhs.RecurrenceHour == rhs.RecurrenceHour &&
		lhs.RecurrenceMinute == rhs.RecurrenceMinute &&
		lhs.DebugText == rhs.DebugText;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkNGuiWindowLayoutData
{
	enum class WindowStateEnum : uint32_t
	{
		Open = 0,
		Minimised = 1,
		Closed = 2,
	};

	int32_t ActiveTabIdx;
	float PositionX;
	float PositionXRelative;
	float PositionY;
	float PositionYRelative;
	float ScrollX;
	float ScrollY;
	float Separator;
	float SizeX;
	float SizeXRelative;
	float SizeY;
	float SizeYRelative;
	NMS::NMSString0x80 Tabs[32];
	NMS::NMSString0x80 Name;
	NMS_Toolkit::TkNGuiWindowLayoutData::WindowStateEnum WindowState;

	friend bool operator==(const TkNGuiWindowLayoutData& lhs, const TkNGuiWindowLayoutData& rhs) 
	{
		return lhs.ActiveTabIdx == rhs.ActiveTabIdx &&
		lhs.PositionX == rhs.PositionX &&
		lhs.PositionXRelative == rhs.PositionXRelative &&
		lhs.PositionY == rhs.PositionY &&
		lhs.PositionYRelative == rhs.PositionYRelative &&
		lhs.ScrollX == rhs.ScrollX &&
		lhs.ScrollY == rhs.ScrollY &&
		lhs.Separator == rhs.Separator &&
		lhs.SizeX == rhs.SizeX &&
		lhs.SizeXRelative == rhs.SizeXRelative &&
		lhs.SizeY == rhs.SizeY &&
		lhs.SizeYRelative == rhs.SizeYRelative &&
		std::equal(std::begin(lhs.Tabs), std::end(lhs.Tabs), std::begin(rhs.Tabs)) &&
		lhs.Name == rhs.Name &&
		lhs.WindowState == rhs.WindowState;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcWeirdCreatureRewardList
{
	NMS::NMSString0x10 Rewards[32];

	friend bool operator==(const GcWeirdCreatureRewardList& lhs, const GcWeirdCreatureRewardList& rhs) 
	{
		return std::equal(std::begin(lhs.Rewards), std::end(lhs.Rewards), std::begin(rhs.Rewards));
	}
};

//Dependency: GcWikiPage
//Dependency: GcActionSetType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWikiTopic
{
	NMS::NMSString0x20A MissionButtonText;
	NMS::NMSString0x20A ShortDescriptionID;
	NMS::NMSString0x20A TopicID;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource NotifyIcon;
	NMS::NMSString0x10 Mission;
	std::vector<NMS_GameComponents::GcWikiPage> Pages;
	NMS_GameComponents::GcActionSetType ActionSet;
	bool Seen;
	bool Unlocked;

	friend bool operator==(const GcWikiTopic& lhs, const GcWikiTopic& rhs) 
	{
		return lhs.MissionButtonText == rhs.MissionButtonText &&
		lhs.ShortDescriptionID == rhs.ShortDescriptionID &&
		lhs.TopicID == rhs.TopicID &&
		lhs.Icon == rhs.Icon &&
		lhs.NotifyIcon == rhs.NotifyIcon &&
		lhs.Mission == rhs.Mission &&
		lhs.Pages == rhs.Pages &&
		lhs.ActionSet == rhs.ActionSet &&
		lhs.Seen == rhs.Seen &&
		lhs.Unlocked == rhs.Unlocked;
	}
};

//Dependency: GcWikiTopic
//Dependency: GcWikiTopicType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWikiCategory
{
	NMS::NMSString0x20A CategoryID;
	NMS::NMSString0x20A CategoryIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS::NMSString0x10> Items;
	std::vector<NMS_GameComponents::GcWikiTopic> Topics;
	NMS_GameComponents::GcWikiTopicType Type;
	int32_t UnlockedCount;
	int32_t UnseenCount;

	friend bool operator==(const GcWikiCategory& lhs, const GcWikiCategory& rhs) 
	{
		return lhs.CategoryID == rhs.CategoryID &&
		lhs.CategoryIDUpper == rhs.CategoryIDUpper &&
		lhs.IconOff == rhs.IconOff &&
		lhs.IconOn == rhs.IconOn &&
		lhs.Items == rhs.Items &&
		lhs.Topics == rhs.Topics &&
		lhs.Type == rhs.Type &&
		lhs.UnlockedCount == rhs.UnlockedCount &&
		lhs.UnseenCount == rhs.UnseenCount;
	}
};

//Dependency: GcWikiCategory
struct GcWiki
{
	std::vector<NMS_GameComponents::GcWikiCategory> Categories;

	friend bool operator==(const GcWiki& lhs, const GcWiki& rhs) 
	{
		return lhs.Categories == rhs.Categories;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
struct TkID256Array
{
	std::vector<NMS::NMSString0x20A> Array;

	friend bool operator==(const TkID256Array& lhs, const TkID256Array& rhs) 
	{
		return lhs.Array == rhs.Array;
	}
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcWiringSocketComponentData
{
	bool Value;

	friend bool operator==(const GcWiringSocketComponentData& lhs, const GcWiringSocketComponentData& rhs) 
	{
		return lhs.Value == rhs.Value;
	}
};

struct GcWonderWeirdBasePartCategory
{
	enum class WonderWeirdBasePartCategoryEnum : uint32_t
	{
		EngineOrb = 0,
		BeamStone = 1,
		BubbleCluster = 2,
		MedGeometric = 3,
		Shard = 4,
		StarJoint = 5,
		BoneGarden = 6,
		ContourPod = 7,
		HydroPod = 8,
		ShellWhite = 9,
		WeirdCube = 10,
	};

	NMS_GameComponents::GcWonderWeirdBasePartCategory::WonderWeirdBasePartCategoryEnum WonderWeirdBasePartCategory;

	friend bool operator==(const GcWonderWeirdBasePartCategory& lhs, const GcWonderWeirdBasePartCategory& rhs) 
	{
		return lhs.WonderWeirdBasePartCategory == rhs.WonderWeirdBasePartCategory;
	}
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimDetailSettingsData
{
	float Distance;
	int32_t NumCulledFrames;
	bool DisableAnim;

	friend bool operator==(const TkAnimDetailSettingsData& lhs, const TkAnimDetailSettingsData& rhs) 
	{
		return lhs.Distance == rhs.Distance &&
		lhs.NumCulledFrames == rhs.NumCulledFrames &&
		lhs.DisableAnim == rhs.DisableAnim;
	}
};

//Dependency: TkAnimDetailSettingsData
struct TkAnimDetailSettings
{
	std::vector<NMS_Toolkit::TkAnimDetailSettingsData> AnimDistanceSettings;
	float AnimLODDistances[3];
	float MaxVisibleAngle;

	friend bool operator==(const TkAnimDetailSettings& lhs, const TkAnimDetailSettings& rhs) 
	{
		return lhs.AnimDistanceSettings == rhs.AnimDistanceSettings &&
		std::equal(std::begin(lhs.AnimLODDistances), std::end(lhs.AnimLODDistances), std::begin(rhs.AnimLODDistances)) &&
		lhs.MaxVisibleAngle == rhs.MaxVisibleAngle;
	}
};

//Dependency: TkAnimDetailSettings
//Dependency: NMSString0x10
struct TkAnimDetailSettingsTable
{
	NMS_Toolkit::TkAnimDetailSettings Table[4];
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkAnimDetailSettingsTable& lhs, const TkAnimDetailSettingsTable& rhs) 
	{
		return std::equal(std::begin(lhs.Table), std::end(lhs.Table), std::begin(rhs.Table)) &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: TkAnimDetailSettingsTable
struct TkAnimDetailSettingsTables
{
	std::vector<NMS_Toolkit::TkAnimDetailSettingsTable> Tables;

	friend bool operator==(const TkAnimDetailSettingsTables& lhs, const TkAnimDetailSettingsTables& rhs) 
	{
		return lhs.Tables == rhs.Tables;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcSpaceshipTravelData
//Dependency: GcPlayerSquadronConfig
//Dependency: GcShipAIPlanetPatrolData
//Dependency: Vector3f
//Dependency: GcAIShipDebugSpawnData
//Dependency: GcProjectileLineData
//Dependency: GcCombatEffectsComponentData
//Dependency: GcShipAIDeathData
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: NMSString0x100
//Dependency: Colour
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcAISpaceshipGlobals
{
	NMS_GameComponents::GcPlayerSquadronConfig PlayerSquadronConfig;
	NMS::Colour AlertLightColour;
	NMS::Colour FreighterDoorColourActive;
	NMS::Colour FreighterDoorColourInactive;
	NMS::Colour FreighterEngineGlowDefaultColour;
	NMS::Vector3f TurretAlertLightOffset;
	NMS::NMSString0x10 ProjectileWeaponMuzzleFlashes[7];
	NMS::NMSString0x10 WarpArriveEffectIDs[7];
	NMS::NMSString0x10 WarpStartEffectIDs[7];
	NMS_GameComponents::GcSpaceshipTravelData AsteroidMiningPositioningTravelData;
	NMS_GameComponents::GcSpaceshipTravelData AsteroidMiningTravelData;
	NMS_GameComponents::GcSpaceshipTravelData FallbackTravelData;
	NMS_GameComponents::GcSpaceshipTravelData OutpostLanding;
	NMS_GameComponents::GcSpaceshipTravelData PlanetLanding;
	NMS_GameComponents::GcSpaceshipTravelData SlowCombatEffectAttackTravel;
	NMS_GameComponents::GcShipAIPlanetPatrolData WingmanPathData;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugShipSpawns;
	NMS::VariableSizeString EnergyShield;
	NMS::NMSString0x10 EnergyShieldDepletedEffect;
	NMS::NMSString0x10 EnergyShieldStartRechargeEffect;
	NMS::NMSString0x10 EnergyShieldStartRechargeFromDepletedEffect;
	NMS::VariableSizeString HangarFilename;
	NMS::VariableSizeString LegacyHangarFilename;
	std::vector<NMS::Vector2f> SpaceBattleGuardsRange;
	std::vector<NMS::Vector2f> SpaceBattlePirateRange;
	std::vector<NMS::Vector2f> SpaceBattleSpawnAngle;
	std::vector<NMS::Vector2f> SpaceBattleSpawnOffset;
	std::vector<NMS::Vector2f> SpaceBattleSpawnPitch;
	std::vector<NMS::Vector2f> SpaceBattleSpawnRange;
	std::vector<NMS::Vector2f> SpaceBattleSunAroundAngle;
	std::vector<NMS::Vector2f> SpaceBattleSunHeightAngle;
	std::vector<NMS::Colour> TradeRouteColours;
	NMS_GameComponents::GcCombatEffectsComponentData CombatEffectsComponentData;
	NMS_GameComponents::GcProjectileLineData ShipBullet;
	NMS_GameComponents::GcShipAIDeathData Death;
	NMS_Toolkit::TkHitCurveData FreighterLightHitCurve;
	NMS::Vector2f ConeSpawnOffsetFactor;
	NMS::Vector2f FreighterMiniSpeeds;
	NMS::Vector2f PirateFreighterAttackRange;
	NMS::Vector2f PoliceSideOffset;
	NMS::Vector2f PoliceUpOffset;
	float AbandonedSystemShipSpawnProbablity;
	float ArrivalStaggerOffset;
	float AsteroidMiningMaxAsteroidRadius;
	float AsteroidMiningMaxMiningTime;
	float AsteroidMiningMaxViewAnglePitch;
	float AsteroidMiningMaxViewAngleYaw;
	float AsteroidMiningMinDistFromPlayer;
	float AsteroidMiningMinMiningAngle;
	float AsteroidMiningMinViewAnglePitch;
	float AsteroidMiningSearchRadius;
	float AsteroidShootAngle;
	float AtmosphereEffectMax;
	float AtmosphereEffectMin;
	float AtmosphereTerminalSpeed;
	float AttackAfterSpawnTime;
	float AttackAimTime;
	float AttackBuildingApproachDistance;
	float AttackBuildingAttackRunDistTolerance;
	float AttackBuildingBugOutDistance;
	float AttackBuildingBugOutSpeedUp;
	float AttackBuildingBugOutTurnUp;
	float AttackBuildingFiringAngleTolerance;
	float AttackBuildingGetThereBoost;
	float AttackBuildingNextRunAngleDeltaMax;
	float AttackBuildingNextRunAngleDeltaMin;
	float AttackBuildingRunAngleMax;
	float AttackBuildingRunAngleMin;
	float AttackBuildingRunStartDistance;
	float AttackBuildingTargetGroundOffsetScaleEnd;
	float AttackBuildingTargetGroundOffsetScaleStart;
	float AttackFreighterAngle;
	float AttackFreighterApproach;
	float AttackFreighterApproachDistance;
	float AttackFreighterAttackRunStartDistance;
	float AttackFreighterBugOutDistance;
	float AttackFreighterButOutSpeedUp;
	float AttackFreighterButOutTurnUp;
	float AttackFreighterGetThereBoost;
	float AttackFreighterRunOffset;
	float AttackFreighterWingmanAlignMinDist;
	float AttackFreighterWingmanAlignRange;
	float AttackFreighterWingmanLock;
	float AttackFreighterWingmanLockAlign;
	float AttackFreighterWingmanMaxForce;
	float AttackFreighterWingmanOffset;
	float AttackFreighterWingmanRadius;
	float AttackFreighterWingmanStart;
	float AttackMinimumTimeBeforeTargetSwitch;
	float AttackRunSlowdown;
	float AttackShipAvoidStartTime;
	float AttackTooCloseMinRelSpeed;
	float BattleSpawnStationMinDistance;
	float BountySpawnAngle;
	float CircleApproachDistance;
	float CollisionRayLengthMax;
	float CollisionRayLengthMin;
	float CollisionReactionTime;
	float ConeSpawnFlattenDown;
	float ConeSpawnFlattenUp;
	float CrashedShipBrokenSlotChance;
	float CrashedShipBrokenTechChance;
	float CrashedShipGeneralCostDiscount;
	int32_t CrashedShipMinNonBrokenSlots;
	float CrashedShipRepairSlotCostIncreaseFactor;
	float CrashedShipTechSlotsCostDiscount;
	float DirectionBrakeThresholdSq;
	float DistanceFlareFlickerAmp;
	float DistanceFlareFlickerFreq;
	float DistanceFlareMaxScale;
	float DistanceFlareMinDistance;
	float DistanceFlareMinScale;
	float DistanceFlareMinSpeed;
	float DistanceFlareRange;
	float DistanceFlareSpeedRange;
	float DockingLandingBounceHeight;
	float DockingLandingBounceTime;
	float DockingLandingTime;
	float DockingLandingTimeDirectional;
	float DockingRotateSpeed;
	float DockingRotateStartTime;
	float DockingSpringTime;
	float DockingWaitDistance;
	float DockWaitMaxTime;
	float DockWaitMinTime;
	float EnergyShieldFadeInRate;
	float EnergyShieldFadeMinOpacityInCombat;
	float EnergyShieldFadeNonPlayerHitOpacity;
	float EnergyShieldFadeOutRate;
	float EnergyShieldFreighterFadeMinOpacityInCombat;
	float EngineFireSize;
	float EngineFlareAccelMax;
	float EngineFlareAccelMin;
	float EngineFlareOffset;
	float EngineFlareSizeMax;
	float EngineFlareSizeMin;
	float EngineFlareVibrateAmp;
	float EngineFlareVibrateFreq;
	float EscapeRoll;
	float EscapeRollPlanet;
	float EscapeRollTime;
	float EscapeRollTimePlanet;
	float FinalDeathExplosionScale;
	float FinalDeathExplosionTime;
	float FinalDeathFadeTime;
	int32_t FlybyCloseOdds;
	float FlybyHeight;
	float FlybyLength;
	float FlybyOffset;
	float FlybyPlanetLandingProbability;
	float FreighterAlertLightCapitalSize;
	float FreighterAlertLightIntensity;
	float FreighterAlertLightTime;
	float FreighterAlertThreshold;
	float FreighterAlertTimeOutMinTime;
	float FreighterAlertTimeOutRate;
	float FreighterAttackAlertThreshold;
	float FreighterAttackDisengageDistance;
	float FreighterImpactScale;
	float FreighterLaunchStartTime;
	float FreighterLaunchTime;
	int32_t FreighterMaxNumLaunchedShips;
	float FreighterRegisterHitCooldown;
	float FreighterScale;
	float FreighterShipLaunchSpeed;
	float FreighterSpawnMargin;
	float FreighterSpawnRadius;
	float FreighterSpawnRate;
	float FreighterSpawnViewAngle;
	float FreighterSpawnVisibleFreightersDistance;
	float FrigateSpawnMargin;
	float GroundCircleHeight;
	float GroundCircleHeightMax;
	float HeightTestSampleDistance;
	float HeightTestSampleTime;
	float LandingDirectionalHoverPointReachedDistance;
	float LandingHoverPointReachedDistance;
	float LandingLongTipAngle;
	float LandingManeuvreAlignTime;
	float LandingManuevreTime;
	float LandingTipAngle;
	float LaserHitOffset;
	float MaxDifficultySpaceCombatSpeedExtra;
	float MaxDifficultySpaceCombatTurnExtra;
	int32_t MaxNumActivePolice;
	float MaxNumActivePoliceRadius;
	float MaxNumActiveTraderRadius;
	int32_t MaxNumActiveTraders;
	int32_t MaxNumFreighters;
	int32_t MaxNumTurretMissiles;
	float MaxTorque;
	int32_t MinAggroDamage;
	float MinimumCircleTimeBeforeLanding;
	float MinimumTimeBetweenOutpostLandings;
	float MinLaserFireTime;
	float MissileLaunchSpeed;
	float MissileRange;
	float MoveAvoidRange;
	float MoveHeightAdjust;
	float MoveHeightCheckTime;
	int32_t MoveHeightNumSamples;
	float MoveHeightSampleSectionSize;
	float OrbitHeight;
	float OutpostDockAIApproachSpeedForce;
	float OutpostDockAIGetToApproachBrakeForce;
	float OutpostDockAIGetToApproachForce;
	float OutpostDockApproachDistance;
	float OutpostDockApproachRenderFlickerOffset;
	float OutpostDockApproachRenderRadius;
	float OutpostDockApproachSpeedForce;
	float OutpostDockApproachSpeedUpDamper;
	float OutpostDockApproachUpAmount;
	float OutpostDockGetToApproachBrakeForce;
	float OutpostDockGetToApproachExtraBrakeForce;
	float OutpostDockGetToApproachForce;
	float OutpostDockMaxApproachSpeed;
	float OutpostDockMaxForce;
	float OutpostDockMaxTipLength;
	float OutpostDockMinTipLength;
	float OutpostDockOverspeedBrake;
	float OutpostDockUpAlignMaxAngle;
	float OutpostDockUpAlignMaxAngleFirstPerson;
	float OutpostLandingNoiseAmp;
	float OutpostLandingNoiseFreq;
	float OutpostLandingNoiseOffset;
	float OutpostToLandingDistance;
	float PirateArriveTime;
	float PirateBattleInterestTime;
	float PirateBattleMaxTime;
	float PirateBattleStartSpeed;
	float PirateExtraDamage;
	float PirateFlybyLength;
	float PirateFreighterBattleDistance;
	float PirateFreighterSpawnAttackAngle;
	float PirateFreighterSpawnAttackOffset;
	float PirateFreighterSpawnAttackSpread;
	float PirateFreighterWarpOffset;
	float PirateInterestTime;
	float PirateMaintainBuildingTargetTime;
	float PiratePlayerAttackRange;
	float PirateSpawnAngle;
	float PirateSpawnSpacing;
	float PirateStartSpeed;
	float PitchFlip;
	float PlanetaryPirateHostileShipPerceptionRange;
	float PlanetaryPirateRaidFocusBuildingsTime;
	int32_t PlanetaryPirateRaidMaxTradersJoinCombat;
	float PlanetaryPirateRaidTradersEngageTime;
	float PlanetUpAlignTime;
	float PoliceAbortRange;
	float PoliceArriveTime;
	float PoliceEntranceCargoAttackWaitTime;
	float PoliceEntranceCargoOpenCommsWaitTime;
	float PoliceEntranceCargoProbingTime;
	float PoliceEntranceCargoScanHailNotificationWaitTime;
	float PoliceEntranceCargoScanStartTime;
	float PoliceEntranceEscalateIncomingTime;
	float PoliceEntranceEscalateProbingTime;
	float PoliceEntranceProbe;
	float PoliceEntranceStartTime;
	float PoliceEscapeMinTime;
	float PoliceEscapeTime;
	float PoliceFreighterLaserActiveTime;
	float PoliceFreighterLaserRandomExtraPauseMax;
	float PoliceFreighterLaserRange;
	float PoliceFreighterLaserShootTime;
	int32_t PoliceFreighterProjectileBurstCount;
	float PoliceFreighterProjectileBurstTime;
	int32_t PoliceFreighterProjectileModulo;
	float PoliceFreighterProjectilePauseTime;
	float PoliceFreighterProjectileRandomExtraPauseMax;
	float PoliceFreighterProjectileRange;
	float PoliceFreighterWarpOutRange;
	float PoliceLaunchDistance;
	float PoliceLaunchSpeed;
	float PoliceLaunchTime;
	int32_t PoliceNumPerTarget;
	float PolicePauseTime;
	float PolicePauseTimeSpaceBattle;
	float PoliceSpawnViewAngle;
	float PoliceStationEngageRange;
	int32_t PoliceStationNumToLaunch;
	float PoliceStationWaveTimer;
	float PoliceWarnBeaconPulseTime;
	float RewardLootAngularSpeed;
	float RewardLootOffset;
	float RewardLootOffsetSpeed;
	float RollAmount;
	float RollMinTurnAngle;
	float SalvageRemovalTime;
	float SalvageTime;
	float SalvageValueMultiplier;
	float ScaleHeightMax;
	float ScaleHeightMin;
	float Scaler;
	float ScalerMaxDist;
	float ScalerMinDist;
	float ScaleTime;
	float SentinelGunBrokenSlotChance;
	float ShieldCollisionRadiusMultiplier;
	float ShipAlertPirateRange;
	float ShipAngularFactor;
	float ShipEscapeTimeBeforeWarpOut;
	float ShipEscortBackForceTime;
	float ShipEscortForwardOffsetScaleMax;
	float ShipEscortForwardOffsetScaleMin;
	float ShipEscortFwdForceTime;
	float ShipEscortLockOnDistance;
	float ShipEscortPerpForceTime;
	float ShipEscortRadialOffsetScaleMax;
	float ShipEscortRadialOffsetScaleMin;
	float ShipEscortVelocityBand;
	float ShipEscortVelocityBandForce;
	float ShipSpawnAnomalyRadius;
	float ShipSpawnStationRadius;
	float SpaceBattleFlybyTime;
	float SpaceBattleGuardOffset;
	float SpaceBattleGuardUpOffset;
	float SpaceBattleInitialPirateOffset;
	float SpaceBattleInitialPirateUpOffset;
	float SpaceBattleObstructionRadius;
	float SpaceStationTraderRequestTime;
	float TakeOffExitHeightOffset;
	float TakeOffExtraAIHeight;
	float TakeOffHoverPointReachedDistance;
	float TraderArriveSpeed;
	float TraderArriveTime;
	float TraderAtTime;
	float TraderAtTimeBack;
	int32_t TraderIgnoreHits;
	int32_t TradeRouteDivisions;
	float TradeRouteFlickerAmp;
	float TradeRouteFlickerFreq;
	float TradeRouteFollowOffset;
	int32_t TradeRouteMaxNum;
	float TradeRouteSeekOutpostRange;
	float TradeRouteSlowRange;
	float TradeRouteSlowSpeed;
	float TradeRouteSpawnDistance;
	float TradeRouteSpeed;
	float TradeRouteStationRadius;
	float TradeRouteTrailDrawDistance;
	float TradeRouteTrailFadeTime;
	float TradeRouteTrailTimeOffset;
	float TraderPerpTime;
	float TraderPostCombatRequestTime;
	float TraderRequestTime;
	float TraderVelocityBand;
	float TraderVelocityBandForce;
	float TraderWantedTime;
	float TradingPostTraderRange;
	float TradingPostTraderRangeSpace;
	float TradingPostTraderRequestTime;
	float TrailLandingFadeTime;
	float TrailScale;
	float TrailScaleFreighterMaxScale;
	float TrailScaleMaxScale;
	float TrailScaleMinDistance;
	float TrailScaleRange;
	float TrailSpeedFadeFalloff;
	float TrailSpeedFadeMinSpeed;
	float TravelMinBoostTime;
	float TurretAlertLightIntensity;
	float TurretOriginOffset;
	float TurretRandomAIShipOffset;
	float TurretRandomOffset;
	float VisibleDistance;
	float WarpFadeInTime;
	float WarpForce;
	float WarpInAudioFXDelay;
	float WarpInDistance;
	float WarpInPlayerLocatorMinOffset;
	float WarpInPlayerLocatorTime;
	float WarpInPostSpeed;
	float WarpInPostSpeedFreighter;
	float WarpInTime;
	float WarpInTimeFreighter;
	float WarpInVariance;
	float WarpOutDistance;
	float WarpSpeed;
	float WingmanAlign;
	float WingmanAtTime;
	float WingmanAtTimeBack;
	float WingmanHeightAdjust;
	float WingmanLockArriveTime;
	float WingmanLockBetweenTime;
	float WingmanLockDistance;
	float WingmanMinHeight;
	float WingmanOffset;
	float WingmanOffsetStart;
	float WingmanPerpTime;
	float WingmanRotate;
	float WingmanSideOffset;
	float WingmanStartTime;
	float WingmanVelocityBand;
	float WingmanVelocityBandForce;
	float WitnessHearingRange;
	float WitnessSightAngle;
	float WitnessSightRange;
	NMS::NMSString0x100 TradeRouteIcon;
	bool PirateAttackableBuildingClasses[60];
	bool AtmosphereEffectEnabled;
	bool AttackRepositionBoost;
	bool AttackShipsFollowLeader;
	bool DisableTradeRoutes;
	bool DisplayShipAttackTypes;
	bool EnableLoot;
	bool EnergyShieldAlwaysVisible;
	bool EnergyShieldsEnabled;
	bool FillUpOutposts;
	bool FreighterAlertLights;
	bool FreighterIgnorePlayer;
	bool FreightersAlwaysAttackPlayer;
	bool FreightersSamePalette;
	bool GroundEffectEnabled;
	bool PoliceSpawnEffect;
	bool ScaleDisabledWhenOnFreighter;
	bool TradersAttackPirates;
	NMS_Toolkit::TkCurveType TrailScaleCurve;
	NMS_Toolkit::TkCurveType WarpInCurve;

	friend bool operator==(const GcAISpaceshipGlobals& lhs, const GcAISpaceshipGlobals& rhs) 
	{
		return lhs.PlayerSquadronConfig == rhs.PlayerSquadronConfig &&
		lhs.AlertLightColour == rhs.AlertLightColour &&
		lhs.FreighterDoorColourActive == rhs.FreighterDoorColourActive &&
		lhs.FreighterDoorColourInactive == rhs.FreighterDoorColourInactive &&
		lhs.FreighterEngineGlowDefaultColour == rhs.FreighterEngineGlowDefaultColour &&
		lhs.TurretAlertLightOffset == rhs.TurretAlertLightOffset &&
		std::equal(std::begin(lhs.ProjectileWeaponMuzzleFlashes), std::end(lhs.ProjectileWeaponMuzzleFlashes), std::begin(rhs.ProjectileWeaponMuzzleFlashes)) &&
		std::equal(std::begin(lhs.WarpArriveEffectIDs), std::end(lhs.WarpArriveEffectIDs), std::begin(rhs.WarpArriveEffectIDs)) &&
		std::equal(std::begin(lhs.WarpStartEffectIDs), std::end(lhs.WarpStartEffectIDs), std::begin(rhs.WarpStartEffectIDs)) &&
		lhs.AsteroidMiningPositioningTravelData == rhs.AsteroidMiningPositioningTravelData &&
		lhs.AsteroidMiningTravelData == rhs.AsteroidMiningTravelData &&
		lhs.FallbackTravelData == rhs.FallbackTravelData &&
		lhs.OutpostLanding == rhs.OutpostLanding &&
		lhs.PlanetLanding == rhs.PlanetLanding &&
		lhs.SlowCombatEffectAttackTravel == rhs.SlowCombatEffectAttackTravel &&
		lhs.WingmanPathData == rhs.WingmanPathData &&
		lhs.DebugShipSpawns == rhs.DebugShipSpawns &&
		lhs.EnergyShield == rhs.EnergyShield &&
		lhs.EnergyShieldDepletedEffect == rhs.EnergyShieldDepletedEffect &&
		lhs.EnergyShieldStartRechargeEffect == rhs.EnergyShieldStartRechargeEffect &&
		lhs.EnergyShieldStartRechargeFromDepletedEffect == rhs.EnergyShieldStartRechargeFromDepletedEffect &&
		lhs.HangarFilename == rhs.HangarFilename &&
		lhs.LegacyHangarFilename == rhs.LegacyHangarFilename &&
		lhs.SpaceBattleGuardsRange == rhs.SpaceBattleGuardsRange &&
		lhs.SpaceBattlePirateRange == rhs.SpaceBattlePirateRange &&
		lhs.SpaceBattleSpawnAngle == rhs.SpaceBattleSpawnAngle &&
		lhs.SpaceBattleSpawnOffset == rhs.SpaceBattleSpawnOffset &&
		lhs.SpaceBattleSpawnPitch == rhs.SpaceBattleSpawnPitch &&
		lhs.SpaceBattleSpawnRange == rhs.SpaceBattleSpawnRange &&
		lhs.SpaceBattleSunAroundAngle == rhs.SpaceBattleSunAroundAngle &&
		lhs.SpaceBattleSunHeightAngle == rhs.SpaceBattleSunHeightAngle &&
		lhs.TradeRouteColours == rhs.TradeRouteColours &&
		lhs.CombatEffectsComponentData == rhs.CombatEffectsComponentData &&
		lhs.ShipBullet == rhs.ShipBullet &&
		lhs.Death == rhs.Death &&
		lhs.FreighterLightHitCurve == rhs.FreighterLightHitCurve &&
		lhs.ConeSpawnOffsetFactor == rhs.ConeSpawnOffsetFactor &&
		lhs.FreighterMiniSpeeds == rhs.FreighterMiniSpeeds &&
		lhs.PirateFreighterAttackRange == rhs.PirateFreighterAttackRange &&
		lhs.PoliceSideOffset == rhs.PoliceSideOffset &&
		lhs.PoliceUpOffset == rhs.PoliceUpOffset &&
		lhs.AbandonedSystemShipSpawnProbablity == rhs.AbandonedSystemShipSpawnProbablity &&
		lhs.ArrivalStaggerOffset == rhs.ArrivalStaggerOffset &&
		lhs.AsteroidMiningMaxAsteroidRadius == rhs.AsteroidMiningMaxAsteroidRadius &&
		lhs.AsteroidMiningMaxMiningTime == rhs.AsteroidMiningMaxMiningTime &&
		lhs.AsteroidMiningMaxViewAnglePitch == rhs.AsteroidMiningMaxViewAnglePitch &&
		lhs.AsteroidMiningMaxViewAngleYaw == rhs.AsteroidMiningMaxViewAngleYaw &&
		lhs.AsteroidMiningMinDistFromPlayer == rhs.AsteroidMiningMinDistFromPlayer &&
		lhs.AsteroidMiningMinMiningAngle == rhs.AsteroidMiningMinMiningAngle &&
		lhs.AsteroidMiningMinViewAnglePitch == rhs.AsteroidMiningMinViewAnglePitch &&
		lhs.AsteroidMiningSearchRadius == rhs.AsteroidMiningSearchRadius &&
		lhs.AsteroidShootAngle == rhs.AsteroidShootAngle &&
		lhs.AtmosphereEffectMax == rhs.AtmosphereEffectMax &&
		lhs.AtmosphereEffectMin == rhs.AtmosphereEffectMin &&
		lhs.AtmosphereTerminalSpeed == rhs.AtmosphereTerminalSpeed &&
		lhs.AttackAfterSpawnTime == rhs.AttackAfterSpawnTime &&
		lhs.AttackAimTime == rhs.AttackAimTime &&
		lhs.AttackBuildingApproachDistance == rhs.AttackBuildingApproachDistance &&
		lhs.AttackBuildingAttackRunDistTolerance == rhs.AttackBuildingAttackRunDistTolerance &&
		lhs.AttackBuildingBugOutDistance == rhs.AttackBuildingBugOutDistance &&
		lhs.AttackBuildingBugOutSpeedUp == rhs.AttackBuildingBugOutSpeedUp &&
		lhs.AttackBuildingBugOutTurnUp == rhs.AttackBuildingBugOutTurnUp &&
		lhs.AttackBuildingFiringAngleTolerance == rhs.AttackBuildingFiringAngleTolerance &&
		lhs.AttackBuildingGetThereBoost == rhs.AttackBuildingGetThereBoost &&
		lhs.AttackBuildingNextRunAngleDeltaMax == rhs.AttackBuildingNextRunAngleDeltaMax &&
		lhs.AttackBuildingNextRunAngleDeltaMin == rhs.AttackBuildingNextRunAngleDeltaMin &&
		lhs.AttackBuildingRunAngleMax == rhs.AttackBuildingRunAngleMax &&
		lhs.AttackBuildingRunAngleMin == rhs.AttackBuildingRunAngleMin &&
		lhs.AttackBuildingRunStartDistance == rhs.AttackBuildingRunStartDistance &&
		lhs.AttackBuildingTargetGroundOffsetScaleEnd == rhs.AttackBuildingTargetGroundOffsetScaleEnd &&
		lhs.AttackBuildingTargetGroundOffsetScaleStart == rhs.AttackBuildingTargetGroundOffsetScaleStart &&
		lhs.AttackFreighterAngle == rhs.AttackFreighterAngle &&
		lhs.AttackFreighterApproach == rhs.AttackFreighterApproach &&
		lhs.AttackFreighterApproachDistance == rhs.AttackFreighterApproachDistance &&
		lhs.AttackFreighterAttackRunStartDistance == rhs.AttackFreighterAttackRunStartDistance &&
		lhs.AttackFreighterBugOutDistance == rhs.AttackFreighterBugOutDistance &&
		lhs.AttackFreighterButOutSpeedUp == rhs.AttackFreighterButOutSpeedUp &&
		lhs.AttackFreighterButOutTurnUp == rhs.AttackFreighterButOutTurnUp &&
		lhs.AttackFreighterGetThereBoost == rhs.AttackFreighterGetThereBoost &&
		lhs.AttackFreighterRunOffset == rhs.AttackFreighterRunOffset &&
		lhs.AttackFreighterWingmanAlignMinDist == rhs.AttackFreighterWingmanAlignMinDist &&
		lhs.AttackFreighterWingmanAlignRange == rhs.AttackFreighterWingmanAlignRange &&
		lhs.AttackFreighterWingmanLock == rhs.AttackFreighterWingmanLock &&
		lhs.AttackFreighterWingmanLockAlign == rhs.AttackFreighterWingmanLockAlign &&
		lhs.AttackFreighterWingmanMaxForce == rhs.AttackFreighterWingmanMaxForce &&
		lhs.AttackFreighterWingmanOffset == rhs.AttackFreighterWingmanOffset &&
		lhs.AttackFreighterWingmanRadius == rhs.AttackFreighterWingmanRadius &&
		lhs.AttackFreighterWingmanStart == rhs.AttackFreighterWingmanStart &&
		lhs.AttackMinimumTimeBeforeTargetSwitch == rhs.AttackMinimumTimeBeforeTargetSwitch &&
		lhs.AttackRunSlowdown == rhs.AttackRunSlowdown &&
		lhs.AttackShipAvoidStartTime == rhs.AttackShipAvoidStartTime &&
		lhs.AttackTooCloseMinRelSpeed == rhs.AttackTooCloseMinRelSpeed &&
		lhs.BattleSpawnStationMinDistance == rhs.BattleSpawnStationMinDistance &&
		lhs.BountySpawnAngle == rhs.BountySpawnAngle &&
		lhs.CircleApproachDistance == rhs.CircleApproachDistance &&
		lhs.CollisionRayLengthMax == rhs.CollisionRayLengthMax &&
		lhs.CollisionRayLengthMin == rhs.CollisionRayLengthMin &&
		lhs.CollisionReactionTime == rhs.CollisionReactionTime &&
		lhs.ConeSpawnFlattenDown == rhs.ConeSpawnFlattenDown &&
		lhs.ConeSpawnFlattenUp == rhs.ConeSpawnFlattenUp &&
		lhs.CrashedShipBrokenSlotChance == rhs.CrashedShipBrokenSlotChance &&
		lhs.CrashedShipBrokenTechChance == rhs.CrashedShipBrokenTechChance &&
		lhs.CrashedShipGeneralCostDiscount == rhs.CrashedShipGeneralCostDiscount &&
		lhs.CrashedShipMinNonBrokenSlots == rhs.CrashedShipMinNonBrokenSlots &&
		lhs.CrashedShipRepairSlotCostIncreaseFactor == rhs.CrashedShipRepairSlotCostIncreaseFactor &&
		lhs.CrashedShipTechSlotsCostDiscount == rhs.CrashedShipTechSlotsCostDiscount &&
		lhs.DirectionBrakeThresholdSq == rhs.DirectionBrakeThresholdSq &&
		lhs.DistanceFlareFlickerAmp == rhs.DistanceFlareFlickerAmp &&
		lhs.DistanceFlareFlickerFreq == rhs.DistanceFlareFlickerFreq &&
		lhs.DistanceFlareMaxScale == rhs.DistanceFlareMaxScale &&
		lhs.DistanceFlareMinDistance == rhs.DistanceFlareMinDistance &&
		lhs.DistanceFlareMinScale == rhs.DistanceFlareMinScale &&
		lhs.DistanceFlareMinSpeed == rhs.DistanceFlareMinSpeed &&
		lhs.DistanceFlareRange == rhs.DistanceFlareRange &&
		lhs.DistanceFlareSpeedRange == rhs.DistanceFlareSpeedRange &&
		lhs.DockingLandingBounceHeight == rhs.DockingLandingBounceHeight &&
		lhs.DockingLandingBounceTime == rhs.DockingLandingBounceTime &&
		lhs.DockingLandingTime == rhs.DockingLandingTime &&
		lhs.DockingLandingTimeDirectional == rhs.DockingLandingTimeDirectional &&
		lhs.DockingRotateSpeed == rhs.DockingRotateSpeed &&
		lhs.DockingRotateStartTime == rhs.DockingRotateStartTime &&
		lhs.DockingSpringTime == rhs.DockingSpringTime &&
		lhs.DockingWaitDistance == rhs.DockingWaitDistance &&
		lhs.DockWaitMaxTime == rhs.DockWaitMaxTime &&
		lhs.DockWaitMinTime == rhs.DockWaitMinTime &&
		lhs.EnergyShieldFadeInRate == rhs.EnergyShieldFadeInRate &&
		lhs.EnergyShieldFadeMinOpacityInCombat == rhs.EnergyShieldFadeMinOpacityInCombat &&
		lhs.EnergyShieldFadeNonPlayerHitOpacity == rhs.EnergyShieldFadeNonPlayerHitOpacity &&
		lhs.EnergyShieldFadeOutRate == rhs.EnergyShieldFadeOutRate &&
		lhs.EnergyShieldFreighterFadeMinOpacityInCombat == rhs.EnergyShieldFreighterFadeMinOpacityInCombat &&
		lhs.EngineFireSize == rhs.EngineFireSize &&
		lhs.EngineFlareAccelMax == rhs.EngineFlareAccelMax &&
		lhs.EngineFlareAccelMin == rhs.EngineFlareAccelMin &&
		lhs.EngineFlareOffset == rhs.EngineFlareOffset &&
		lhs.EngineFlareSizeMax == rhs.EngineFlareSizeMax &&
		lhs.EngineFlareSizeMin == rhs.EngineFlareSizeMin &&
		lhs.EngineFlareVibrateAmp == rhs.EngineFlareVibrateAmp &&
		lhs.EngineFlareVibrateFreq == rhs.EngineFlareVibrateFreq &&
		lhs.EscapeRoll == rhs.EscapeRoll &&
		lhs.EscapeRollPlanet == rhs.EscapeRollPlanet &&
		lhs.EscapeRollTime == rhs.EscapeRollTime &&
		lhs.EscapeRollTimePlanet == rhs.EscapeRollTimePlanet &&
		lhs.FinalDeathExplosionScale == rhs.FinalDeathExplosionScale &&
		lhs.FinalDeathExplosionTime == rhs.FinalDeathExplosionTime &&
		lhs.FinalDeathFadeTime == rhs.FinalDeathFadeTime &&
		lhs.FlybyCloseOdds == rhs.FlybyCloseOdds &&
		lhs.FlybyHeight == rhs.FlybyHeight &&
		lhs.FlybyLength == rhs.FlybyLength &&
		lhs.FlybyOffset == rhs.FlybyOffset &&
		lhs.FlybyPlanetLandingProbability == rhs.FlybyPlanetLandingProbability &&
		lhs.FreighterAlertLightCapitalSize == rhs.FreighterAlertLightCapitalSize &&
		lhs.FreighterAlertLightIntensity == rhs.FreighterAlertLightIntensity &&
		lhs.FreighterAlertLightTime == rhs.FreighterAlertLightTime &&
		lhs.FreighterAlertThreshold == rhs.FreighterAlertThreshold &&
		lhs.FreighterAlertTimeOutMinTime == rhs.FreighterAlertTimeOutMinTime &&
		lhs.FreighterAlertTimeOutRate == rhs.FreighterAlertTimeOutRate &&
		lhs.FreighterAttackAlertThreshold == rhs.FreighterAttackAlertThreshold &&
		lhs.FreighterAttackDisengageDistance == rhs.FreighterAttackDisengageDistance &&
		lhs.FreighterImpactScale == rhs.FreighterImpactScale &&
		lhs.FreighterLaunchStartTime == rhs.FreighterLaunchStartTime &&
		lhs.FreighterLaunchTime == rhs.FreighterLaunchTime &&
		lhs.FreighterMaxNumLaunchedShips == rhs.FreighterMaxNumLaunchedShips &&
		lhs.FreighterRegisterHitCooldown == rhs.FreighterRegisterHitCooldown &&
		lhs.FreighterScale == rhs.FreighterScale &&
		lhs.FreighterShipLaunchSpeed == rhs.FreighterShipLaunchSpeed &&
		lhs.FreighterSpawnMargin == rhs.FreighterSpawnMargin &&
		lhs.FreighterSpawnRadius == rhs.FreighterSpawnRadius &&
		lhs.FreighterSpawnRate == rhs.FreighterSpawnRate &&
		lhs.FreighterSpawnViewAngle == rhs.FreighterSpawnViewAngle &&
		lhs.FreighterSpawnVisibleFreightersDistance == rhs.FreighterSpawnVisibleFreightersDistance &&
		lhs.FrigateSpawnMargin == rhs.FrigateSpawnMargin &&
		lhs.GroundCircleHeight == rhs.GroundCircleHeight &&
		lhs.GroundCircleHeightMax == rhs.GroundCircleHeightMax &&
		lhs.HeightTestSampleDistance == rhs.HeightTestSampleDistance &&
		lhs.HeightTestSampleTime == rhs.HeightTestSampleTime &&
		lhs.LandingDirectionalHoverPointReachedDistance == rhs.LandingDirectionalHoverPointReachedDistance &&
		lhs.LandingHoverPointReachedDistance == rhs.LandingHoverPointReachedDistance &&
		lhs.LandingLongTipAngle == rhs.LandingLongTipAngle &&
		lhs.LandingManeuvreAlignTime == rhs.LandingManeuvreAlignTime &&
		lhs.LandingManuevreTime == rhs.LandingManuevreTime &&
		lhs.LandingTipAngle == rhs.LandingTipAngle &&
		lhs.LaserHitOffset == rhs.LaserHitOffset &&
		lhs.MaxDifficultySpaceCombatSpeedExtra == rhs.MaxDifficultySpaceCombatSpeedExtra &&
		lhs.MaxDifficultySpaceCombatTurnExtra == rhs.MaxDifficultySpaceCombatTurnExtra &&
		lhs.MaxNumActivePolice == rhs.MaxNumActivePolice &&
		lhs.MaxNumActivePoliceRadius == rhs.MaxNumActivePoliceRadius &&
		lhs.MaxNumActiveTraderRadius == rhs.MaxNumActiveTraderRadius &&
		lhs.MaxNumActiveTraders == rhs.MaxNumActiveTraders &&
		lhs.MaxNumFreighters == rhs.MaxNumFreighters &&
		lhs.MaxNumTurretMissiles == rhs.MaxNumTurretMissiles &&
		lhs.MaxTorque == rhs.MaxTorque &&
		lhs.MinAggroDamage == rhs.MinAggroDamage &&
		lhs.MinimumCircleTimeBeforeLanding == rhs.MinimumCircleTimeBeforeLanding &&
		lhs.MinimumTimeBetweenOutpostLandings == rhs.MinimumTimeBetweenOutpostLandings &&
		lhs.MinLaserFireTime == rhs.MinLaserFireTime &&
		lhs.MissileLaunchSpeed == rhs.MissileLaunchSpeed &&
		lhs.MissileRange == rhs.MissileRange &&
		lhs.MoveAvoidRange == rhs.MoveAvoidRange &&
		lhs.MoveHeightAdjust == rhs.MoveHeightAdjust &&
		lhs.MoveHeightCheckTime == rhs.MoveHeightCheckTime &&
		lhs.MoveHeightNumSamples == rhs.MoveHeightNumSamples &&
		lhs.MoveHeightSampleSectionSize == rhs.MoveHeightSampleSectionSize &&
		lhs.OrbitHeight == rhs.OrbitHeight &&
		lhs.OutpostDockAIApproachSpeedForce == rhs.OutpostDockAIApproachSpeedForce &&
		lhs.OutpostDockAIGetToApproachBrakeForce == rhs.OutpostDockAIGetToApproachBrakeForce &&
		lhs.OutpostDockAIGetToApproachForce == rhs.OutpostDockAIGetToApproachForce &&
		lhs.OutpostDockApproachDistance == rhs.OutpostDockApproachDistance &&
		lhs.OutpostDockApproachRenderFlickerOffset == rhs.OutpostDockApproachRenderFlickerOffset &&
		lhs.OutpostDockApproachRenderRadius == rhs.OutpostDockApproachRenderRadius &&
		lhs.OutpostDockApproachSpeedForce == rhs.OutpostDockApproachSpeedForce &&
		lhs.OutpostDockApproachSpeedUpDamper == rhs.OutpostDockApproachSpeedUpDamper &&
		lhs.OutpostDockApproachUpAmount == rhs.OutpostDockApproachUpAmount &&
		lhs.OutpostDockGetToApproachBrakeForce == rhs.OutpostDockGetToApproachBrakeForce &&
		lhs.OutpostDockGetToApproachExtraBrakeForce == rhs.OutpostDockGetToApproachExtraBrakeForce &&
		lhs.OutpostDockGetToApproachForce == rhs.OutpostDockGetToApproachForce &&
		lhs.OutpostDockMaxApproachSpeed == rhs.OutpostDockMaxApproachSpeed &&
		lhs.OutpostDockMaxForce == rhs.OutpostDockMaxForce &&
		lhs.OutpostDockMaxTipLength == rhs.OutpostDockMaxTipLength &&
		lhs.OutpostDockMinTipLength == rhs.OutpostDockMinTipLength &&
		lhs.OutpostDockOverspeedBrake == rhs.OutpostDockOverspeedBrake &&
		lhs.OutpostDockUpAlignMaxAngle == rhs.OutpostDockUpAlignMaxAngle &&
		lhs.OutpostDockUpAlignMaxAngleFirstPerson == rhs.OutpostDockUpAlignMaxAngleFirstPerson &&
		lhs.OutpostLandingNoiseAmp == rhs.OutpostLandingNoiseAmp &&
		lhs.OutpostLandingNoiseFreq == rhs.OutpostLandingNoiseFreq &&
		lhs.OutpostLandingNoiseOffset == rhs.OutpostLandingNoiseOffset &&
		lhs.OutpostToLandingDistance == rhs.OutpostToLandingDistance &&
		lhs.PirateArriveTime == rhs.PirateArriveTime &&
		lhs.PirateBattleInterestTime == rhs.PirateBattleInterestTime &&
		lhs.PirateBattleMaxTime == rhs.PirateBattleMaxTime &&
		lhs.PirateBattleStartSpeed == rhs.PirateBattleStartSpeed &&
		lhs.PirateExtraDamage == rhs.PirateExtraDamage &&
		lhs.PirateFlybyLength == rhs.PirateFlybyLength &&
		lhs.PirateFreighterBattleDistance == rhs.PirateFreighterBattleDistance &&
		lhs.PirateFreighterSpawnAttackAngle == rhs.PirateFreighterSpawnAttackAngle &&
		lhs.PirateFreighterSpawnAttackOffset == rhs.PirateFreighterSpawnAttackOffset &&
		lhs.PirateFreighterSpawnAttackSpread == rhs.PirateFreighterSpawnAttackSpread &&
		lhs.PirateFreighterWarpOffset == rhs.PirateFreighterWarpOffset &&
		lhs.PirateInterestTime == rhs.PirateInterestTime &&
		lhs.PirateMaintainBuildingTargetTime == rhs.PirateMaintainBuildingTargetTime &&
		lhs.PiratePlayerAttackRange == rhs.PiratePlayerAttackRange &&
		lhs.PirateSpawnAngle == rhs.PirateSpawnAngle &&
		lhs.PirateSpawnSpacing == rhs.PirateSpawnSpacing &&
		lhs.PirateStartSpeed == rhs.PirateStartSpeed &&
		lhs.PitchFlip == rhs.PitchFlip &&
		lhs.PlanetaryPirateHostileShipPerceptionRange == rhs.PlanetaryPirateHostileShipPerceptionRange &&
		lhs.PlanetaryPirateRaidFocusBuildingsTime == rhs.PlanetaryPirateRaidFocusBuildingsTime &&
		lhs.PlanetaryPirateRaidMaxTradersJoinCombat == rhs.PlanetaryPirateRaidMaxTradersJoinCombat &&
		lhs.PlanetaryPirateRaidTradersEngageTime == rhs.PlanetaryPirateRaidTradersEngageTime &&
		lhs.PlanetUpAlignTime == rhs.PlanetUpAlignTime &&
		lhs.PoliceAbortRange == rhs.PoliceAbortRange &&
		lhs.PoliceArriveTime == rhs.PoliceArriveTime &&
		lhs.PoliceEntranceCargoAttackWaitTime == rhs.PoliceEntranceCargoAttackWaitTime &&
		lhs.PoliceEntranceCargoOpenCommsWaitTime == rhs.PoliceEntranceCargoOpenCommsWaitTime &&
		lhs.PoliceEntranceCargoProbingTime == rhs.PoliceEntranceCargoProbingTime &&
		lhs.PoliceEntranceCargoScanHailNotificationWaitTime == rhs.PoliceEntranceCargoScanHailNotificationWaitTime &&
		lhs.PoliceEntranceCargoScanStartTime == rhs.PoliceEntranceCargoScanStartTime &&
		lhs.PoliceEntranceEscalateIncomingTime == rhs.PoliceEntranceEscalateIncomingTime &&
		lhs.PoliceEntranceEscalateProbingTime == rhs.PoliceEntranceEscalateProbingTime &&
		lhs.PoliceEntranceProbe == rhs.PoliceEntranceProbe &&
		lhs.PoliceEntranceStartTime == rhs.PoliceEntranceStartTime &&
		lhs.PoliceEscapeMinTime == rhs.PoliceEscapeMinTime &&
		lhs.PoliceEscapeTime == rhs.PoliceEscapeTime &&
		lhs.PoliceFreighterLaserActiveTime == rhs.PoliceFreighterLaserActiveTime &&
		lhs.PoliceFreighterLaserRandomExtraPauseMax == rhs.PoliceFreighterLaserRandomExtraPauseMax &&
		lhs.PoliceFreighterLaserRange == rhs.PoliceFreighterLaserRange &&
		lhs.PoliceFreighterLaserShootTime == rhs.PoliceFreighterLaserShootTime &&
		lhs.PoliceFreighterProjectileBurstCount == rhs.PoliceFreighterProjectileBurstCount &&
		lhs.PoliceFreighterProjectileBurstTime == rhs.PoliceFreighterProjectileBurstTime &&
		lhs.PoliceFreighterProjectileModulo == rhs.PoliceFreighterProjectileModulo &&
		lhs.PoliceFreighterProjectilePauseTime == rhs.PoliceFreighterProjectilePauseTime &&
		lhs.PoliceFreighterProjectileRandomExtraPauseMax == rhs.PoliceFreighterProjectileRandomExtraPauseMax &&
		lhs.PoliceFreighterProjectileRange == rhs.PoliceFreighterProjectileRange &&
		lhs.PoliceFreighterWarpOutRange == rhs.PoliceFreighterWarpOutRange &&
		lhs.PoliceLaunchDistance == rhs.PoliceLaunchDistance &&
		lhs.PoliceLaunchSpeed == rhs.PoliceLaunchSpeed &&
		lhs.PoliceLaunchTime == rhs.PoliceLaunchTime &&
		lhs.PoliceNumPerTarget == rhs.PoliceNumPerTarget &&
		lhs.PolicePauseTime == rhs.PolicePauseTime &&
		lhs.PolicePauseTimeSpaceBattle == rhs.PolicePauseTimeSpaceBattle &&
		lhs.PoliceSpawnViewAngle == rhs.PoliceSpawnViewAngle &&
		lhs.PoliceStationEngageRange == rhs.PoliceStationEngageRange &&
		lhs.PoliceStationNumToLaunch == rhs.PoliceStationNumToLaunch &&
		lhs.PoliceStationWaveTimer == rhs.PoliceStationWaveTimer &&
		lhs.PoliceWarnBeaconPulseTime == rhs.PoliceWarnBeaconPulseTime &&
		lhs.RewardLootAngularSpeed == rhs.RewardLootAngularSpeed &&
		lhs.RewardLootOffset == rhs.RewardLootOffset &&
		lhs.RewardLootOffsetSpeed == rhs.RewardLootOffsetSpeed &&
		lhs.RollAmount == rhs.RollAmount &&
		lhs.RollMinTurnAngle == rhs.RollMinTurnAngle &&
		lhs.SalvageRemovalTime == rhs.SalvageRemovalTime &&
		lhs.SalvageTime == rhs.SalvageTime &&
		lhs.SalvageValueMultiplier == rhs.SalvageValueMultiplier &&
		lhs.ScaleHeightMax == rhs.ScaleHeightMax &&
		lhs.ScaleHeightMin == rhs.ScaleHeightMin &&
		lhs.Scaler == rhs.Scaler &&
		lhs.ScalerMaxDist == rhs.ScalerMaxDist &&
		lhs.ScalerMinDist == rhs.ScalerMinDist &&
		lhs.ScaleTime == rhs.ScaleTime &&
		lhs.SentinelGunBrokenSlotChance == rhs.SentinelGunBrokenSlotChance &&
		lhs.ShieldCollisionRadiusMultiplier == rhs.ShieldCollisionRadiusMultiplier &&
		lhs.ShipAlertPirateRange == rhs.ShipAlertPirateRange &&
		lhs.ShipAngularFactor == rhs.ShipAngularFactor &&
		lhs.ShipEscapeTimeBeforeWarpOut == rhs.ShipEscapeTimeBeforeWarpOut &&
		lhs.ShipEscortBackForceTime == rhs.ShipEscortBackForceTime &&
		lhs.ShipEscortForwardOffsetScaleMax == rhs.ShipEscortForwardOffsetScaleMax &&
		lhs.ShipEscortForwardOffsetScaleMin == rhs.ShipEscortForwardOffsetScaleMin &&
		lhs.ShipEscortFwdForceTime == rhs.ShipEscortFwdForceTime &&
		lhs.ShipEscortLockOnDistance == rhs.ShipEscortLockOnDistance &&
		lhs.ShipEscortPerpForceTime == rhs.ShipEscortPerpForceTime &&
		lhs.ShipEscortRadialOffsetScaleMax == rhs.ShipEscortRadialOffsetScaleMax &&
		lhs.ShipEscortRadialOffsetScaleMin == rhs.ShipEscortRadialOffsetScaleMin &&
		lhs.ShipEscortVelocityBand == rhs.ShipEscortVelocityBand &&
		lhs.ShipEscortVelocityBandForce == rhs.ShipEscortVelocityBandForce &&
		lhs.ShipSpawnAnomalyRadius == rhs.ShipSpawnAnomalyRadius &&
		lhs.ShipSpawnStationRadius == rhs.ShipSpawnStationRadius &&
		lhs.SpaceBattleFlybyTime == rhs.SpaceBattleFlybyTime &&
		lhs.SpaceBattleGuardOffset == rhs.SpaceBattleGuardOffset &&
		lhs.SpaceBattleGuardUpOffset == rhs.SpaceBattleGuardUpOffset &&
		lhs.SpaceBattleInitialPirateOffset == rhs.SpaceBattleInitialPirateOffset &&
		lhs.SpaceBattleInitialPirateUpOffset == rhs.SpaceBattleInitialPirateUpOffset &&
		lhs.SpaceBattleObstructionRadius == rhs.SpaceBattleObstructionRadius &&
		lhs.SpaceStationTraderRequestTime == rhs.SpaceStationTraderRequestTime &&
		lhs.TakeOffExitHeightOffset == rhs.TakeOffExitHeightOffset &&
		lhs.TakeOffExtraAIHeight == rhs.TakeOffExtraAIHeight &&
		lhs.TakeOffHoverPointReachedDistance == rhs.TakeOffHoverPointReachedDistance &&
		lhs.TraderArriveSpeed == rhs.TraderArriveSpeed &&
		lhs.TraderArriveTime == rhs.TraderArriveTime &&
		lhs.TraderAtTime == rhs.TraderAtTime &&
		lhs.TraderAtTimeBack == rhs.TraderAtTimeBack &&
		lhs.TraderIgnoreHits == rhs.TraderIgnoreHits &&
		lhs.TradeRouteDivisions == rhs.TradeRouteDivisions &&
		lhs.TradeRouteFlickerAmp == rhs.TradeRouteFlickerAmp &&
		lhs.TradeRouteFlickerFreq == rhs.TradeRouteFlickerFreq &&
		lhs.TradeRouteFollowOffset == rhs.TradeRouteFollowOffset &&
		lhs.TradeRouteMaxNum == rhs.TradeRouteMaxNum &&
		lhs.TradeRouteSeekOutpostRange == rhs.TradeRouteSeekOutpostRange &&
		lhs.TradeRouteSlowRange == rhs.TradeRouteSlowRange &&
		lhs.TradeRouteSlowSpeed == rhs.TradeRouteSlowSpeed &&
		lhs.TradeRouteSpawnDistance == rhs.TradeRouteSpawnDistance &&
		lhs.TradeRouteSpeed == rhs.TradeRouteSpeed &&
		lhs.TradeRouteStationRadius == rhs.TradeRouteStationRadius &&
		lhs.TradeRouteTrailDrawDistance == rhs.TradeRouteTrailDrawDistance &&
		lhs.TradeRouteTrailFadeTime == rhs.TradeRouteTrailFadeTime &&
		lhs.TradeRouteTrailTimeOffset == rhs.TradeRouteTrailTimeOffset &&
		lhs.TraderPerpTime == rhs.TraderPerpTime &&
		lhs.TraderPostCombatRequestTime == rhs.TraderPostCombatRequestTime &&
		lhs.TraderRequestTime == rhs.TraderRequestTime &&
		lhs.TraderVelocityBand == rhs.TraderVelocityBand &&
		lhs.TraderVelocityBandForce == rhs.TraderVelocityBandForce &&
		lhs.TraderWantedTime == rhs.TraderWantedTime &&
		lhs.TradingPostTraderRange == rhs.TradingPostTraderRange &&
		lhs.TradingPostTraderRangeSpace == rhs.TradingPostTraderRangeSpace &&
		lhs.TradingPostTraderRequestTime == rhs.TradingPostTraderRequestTime &&
		lhs.TrailLandingFadeTime == rhs.TrailLandingFadeTime &&
		lhs.TrailScale == rhs.TrailScale &&
		lhs.TrailScaleFreighterMaxScale == rhs.TrailScaleFreighterMaxScale &&
		lhs.TrailScaleMaxScale == rhs.TrailScaleMaxScale &&
		lhs.TrailScaleMinDistance == rhs.TrailScaleMinDistance &&
		lhs.TrailScaleRange == rhs.TrailScaleRange &&
		lhs.TrailSpeedFadeFalloff == rhs.TrailSpeedFadeFalloff &&
		lhs.TrailSpeedFadeMinSpeed == rhs.TrailSpeedFadeMinSpeed &&
		lhs.TravelMinBoostTime == rhs.TravelMinBoostTime &&
		lhs.TurretAlertLightIntensity == rhs.TurretAlertLightIntensity &&
		lhs.TurretOriginOffset == rhs.TurretOriginOffset &&
		lhs.TurretRandomAIShipOffset == rhs.TurretRandomAIShipOffset &&
		lhs.TurretRandomOffset == rhs.TurretRandomOffset &&
		lhs.VisibleDistance == rhs.VisibleDistance &&
		lhs.WarpFadeInTime == rhs.WarpFadeInTime &&
		lhs.WarpForce == rhs.WarpForce &&
		lhs.WarpInAudioFXDelay == rhs.WarpInAudioFXDelay &&
		lhs.WarpInDistance == rhs.WarpInDistance &&
		lhs.WarpInPlayerLocatorMinOffset == rhs.WarpInPlayerLocatorMinOffset &&
		lhs.WarpInPlayerLocatorTime == rhs.WarpInPlayerLocatorTime &&
		lhs.WarpInPostSpeed == rhs.WarpInPostSpeed &&
		lhs.WarpInPostSpeedFreighter == rhs.WarpInPostSpeedFreighter &&
		lhs.WarpInTime == rhs.WarpInTime &&
		lhs.WarpInTimeFreighter == rhs.WarpInTimeFreighter &&
		lhs.WarpInVariance == rhs.WarpInVariance &&
		lhs.WarpOutDistance == rhs.WarpOutDistance &&
		lhs.WarpSpeed == rhs.WarpSpeed &&
		lhs.WingmanAlign == rhs.WingmanAlign &&
		lhs.WingmanAtTime == rhs.WingmanAtTime &&
		lhs.WingmanAtTimeBack == rhs.WingmanAtTimeBack &&
		lhs.WingmanHeightAdjust == rhs.WingmanHeightAdjust &&
		lhs.WingmanLockArriveTime == rhs.WingmanLockArriveTime &&
		lhs.WingmanLockBetweenTime == rhs.WingmanLockBetweenTime &&
		lhs.WingmanLockDistance == rhs.WingmanLockDistance &&
		lhs.WingmanMinHeight == rhs.WingmanMinHeight &&
		lhs.WingmanOffset == rhs.WingmanOffset &&
		lhs.WingmanOffsetStart == rhs.WingmanOffsetStart &&
		lhs.WingmanPerpTime == rhs.WingmanPerpTime &&
		lhs.WingmanRotate == rhs.WingmanRotate &&
		lhs.WingmanSideOffset == rhs.WingmanSideOffset &&
		lhs.WingmanStartTime == rhs.WingmanStartTime &&
		lhs.WingmanVelocityBand == rhs.WingmanVelocityBand &&
		lhs.WingmanVelocityBandForce == rhs.WingmanVelocityBandForce &&
		lhs.WitnessHearingRange == rhs.WitnessHearingRange &&
		lhs.WitnessSightAngle == rhs.WitnessSightAngle &&
		lhs.WitnessSightRange == rhs.WitnessSightRange &&
		lhs.TradeRouteIcon == rhs.TradeRouteIcon &&
		std::equal(std::begin(lhs.PirateAttackableBuildingClasses), std::end(lhs.PirateAttackableBuildingClasses), std::begin(rhs.PirateAttackableBuildingClasses)) &&
		lhs.AtmosphereEffectEnabled == rhs.AtmosphereEffectEnabled &&
		lhs.AttackRepositionBoost == rhs.AttackRepositionBoost &&
		lhs.AttackShipsFollowLeader == rhs.AttackShipsFollowLeader &&
		lhs.DisableTradeRoutes == rhs.DisableTradeRoutes &&
		lhs.DisplayShipAttackTypes == rhs.DisplayShipAttackTypes &&
		lhs.EnableLoot == rhs.EnableLoot &&
		lhs.EnergyShieldAlwaysVisible == rhs.EnergyShieldAlwaysVisible &&
		lhs.EnergyShieldsEnabled == rhs.EnergyShieldsEnabled &&
		lhs.FillUpOutposts == rhs.FillUpOutposts &&
		lhs.FreighterAlertLights == rhs.FreighterAlertLights &&
		lhs.FreighterIgnorePlayer == rhs.FreighterIgnorePlayer &&
		lhs.FreightersAlwaysAttackPlayer == rhs.FreightersAlwaysAttackPlayer &&
		lhs.FreightersSamePalette == rhs.FreightersSamePalette &&
		lhs.GroundEffectEnabled == rhs.GroundEffectEnabled &&
		lhs.PoliceSpawnEffect == rhs.PoliceSpawnEffect &&
		lhs.ScaleDisabledWhenOnFreighter == rhs.ScaleDisabledWhenOnFreighter &&
		lhs.TradersAttackPirates == rhs.TradersAttackPirates &&
		lhs.TrailScaleCurve == rhs.TrailScaleCurve &&
		lhs.WarpInCurve == rhs.WarpInCurve;
	}
};

//Dependency: GcCameraShakeData
//Dependency: GcScanEffectData
//Dependency: GcSpookFiendSpawnData
//Dependency: GcCreatureFoodList
//Dependency: GcWeirdCreatureRewardList
//Dependency: Vector2f
//Dependency: GcCreatureSubstanceList
//Dependency: GcCreatureAlertData
//Dependency: GcCreatureHarvestSubstanceList
//Dependency: GcFlyingSnakeData
//Dependency: GcPetBehaviours
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcCreatureGlobals
{
	NMS_GameComponents::GcCameraShakeData PainShake;
	NMS_GameComponents::GcScanEffectData PetOffPlanetEffect;
	NMS::Colour AllCreaturesDiscoveredColour;
	NMS::Colour JellyBossBroodIdleColour;
	NMS::Colour JellyBossBroodProximityWarningColour;
	NMS::Colour JellyBossIdleColour;
	NMS::Colour JellyBossProjectileAttackWarningColour;
	NMS::Colour JellyBossSpawnBroodWarningColour;
	NMS::Colour PetInteractionLightColour;
	NMS::Colour PetRadialBadColour;
	NMS::Colour PetRadialBoostColour;
	NMS::Colour PetRadialGoodColour;
	NMS::Colour PetRadialNeutralColour;
	NMS::Colour PetThrowArcColour;
	NMS::Colour SpookFiendAggressiveColour;
	NMS::Colour SpookFiendKamikazeColour;
	NMS::Colour SpookFiendPassiveColour;
	NMS::Colour SpookFiendSpitColour;
	NMS::NMSString0x20A WeirdBiomeDescriptions[32];
	NMS::NMSString0x20A BiomeAirDescriptions[17];
	NMS::NMSString0x20A BiomeDescriptions[17];
	NMS::NMSString0x20A BiomeWaterDescriptions[17];
	NMS::NMSString0x20A DietMeat[17];
	NMS::NMSString0x20A DietVeg[17];
	NMS::NMSString0x20A PetBiomeClimates[17];
	NMS_GameComponents::GcWeirdCreatureRewardList WeirdKillingRewards;
	NMS::NMSString0x20A Temperments[11];
	NMS::NMSString0x20A Diets[4];
	NMS::NMSString0x20A WaterDiets[4];
	NMS::NMSString0x20A CreatureFilter;
	NMS::NMSString0x20A PetCarePuzzleOverrideID;
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	NMS::NMSString0x10 AlienShipQuestCreatureWeapon;
	NMS::NMSString0x10 AlienShipQuestKillingSubstance;
	NMS::NMSString0x10 BasicFeedingProduct;
	std::vector<NMS_GameComponents::GcCreatureFoodList> CarnivoreFeedingProducts;
	NMS::NMSString0x10 CreatureDeathEffectBig;
	NMS::NMSString0x10 CreatureDeathEffectMedium;
	NMS::NMSString0x10 CreatureDeathEffectSmall;
	NMS::NMSString0x10 CreatureHugeRunShake;
	NMS::NMSString0x10 CreatureHugeWalkShake;
	NMS::NMSString0x10 CreatureLargeRunShake;
	NMS::NMSString0x10 CreatureLargeWalkShake;
	NMS::GcSeed CreatureSeed;
	NMS::NMSString0x10 DefaultKillingSubstance;
	NMS::NMSString0x10 FishDeathEffect;
	std::vector<NMS_GameComponents::GcCreatureHarvestSubstanceList> HarvestingProducts;
	std::vector<NMS_GameComponents::GcCreatureFoodList> HerbivoreFeedingProducts;
	NMS::NMSString0x10 HorrorPetFeedingProduct;
	std::vector<NMS_GameComponents::GcCreatureSubstanceList> KillingProducts;
	std::vector<NMS::NMSString0x10> KillingSubstances;
	std::vector<NMS::NMSString0x10> LootItems;
	NMS::VariableSizeString PetEggHatchResourceFile;
	NMS::NMSString0x10 PetEggMaxChangeProduct;
	NMS::VariableSizeString PetEggResourceFile;
	NMS::NMSString0x10 PetEggsplosionEffect;
	NMS::NMSString0x10 PetScan;
	NMS::NMSString0x10 RobotFeedingProduct;
	std::vector<float> RockTransformChanceModifiers;
	std::vector<NMS_GameComponents::GcSpookFiendSpawnData> SpookFiendsSpawnData;
	NMS_GameComponents::GcFlyingSnakeData FlyingSnakeData;
	float SpherePusherOffset[4];
	float SpherePusherRadiusMul[4];
	float SpherePusherWeight[4];
	NMS::Vector2f JellyBossBroodMaxChaseTime;
	NMS::Vector2f SpookFiendsSpawnTimer;
	float AdultBabyKilledNoticeDistance;
	float AdultCorrelationValue;
	float AlertDistance;
	int32_t AllCreaturesDiscoveredBonusMul;
	float AngryRockProportionNormal;
	float AngryRockProportionSurvival;
	float AnimationStickToGroundSpeed;
	float AnimChangeCoolDown;
	float AsteroidCreatureRichSystemSpawnPercent;
	float AsteroidCreatureSpawnPercentOverride;
	float AttackPlayerDistance;
	float AttractedMaxAvoidCreaturesDist;
	float AttractedMaxAvoidCreaturesStrength;
	float AttractedMinAvoidCreaturesDist;
	float AttractedMinAvoidCreaturesStrength;
	float AttractMinDistance;
	float AvoidCreaturesWeight;
	float AvoidImpassableWeight;
	float BadTurnPercent;
	float BadTurnWeight;
	float BaseAndTerrainModImpassableStrength;
	float BrakingForce;
	float BrakingForceY;
	int32_t BugFiendHealth;
	int32_t BugQueenHealth;
	float BugQueenSpitballExplosionRadius;
	float BugQueenSpitballSpeed;
	int32_t BugQueenSpitCount;
	float BugQueenSpitRadius;
	float CreatureBlobRidingHugeMinSize;
	float CreatureBlobRidingLargeMinSize;
	float CreatureBlobRidingMedMinSize;
	float CreatureBrakeForce;
	int32_t CreatureHarvestAmountHuge;
	int32_t CreatureHarvestAmountLarge;
	int32_t CreatureHarvestAmountMed;
	int32_t CreatureHarvestAmountSmall;
	float CreatureHearingRange;
	int32_t CreatureHugeHealth;
	float CreatureHugeMinSize;
	float CreatureHugeRunMaxShakeDist;
	float CreatureHugeWalkMaxShakeDist;
	float CreatureIndoorSpeedMultiplier;
	float CreatureInteractBaseRange;
	float CreatureInteractionRangeBoostHuge;
	float CreatureInteractionRangeBoostLarge;
	float CreatureInteractionRangeBoostMedium;
	float CreatureInteractionRangeBoostRun;
	float CreatureInteractionRangeBoostSmall;
	float CreatureInteractionRangeBoostSprint;
	float CreatureInteractionRangeReducePredator;
	int32_t CreatureKillRewardAmountFiend;
	int32_t CreatureKillRewardAmountHuge;
	int32_t CreatureKillRewardAmountLarge;
	int32_t CreatureKillRewardAmountMed;
	int32_t CreatureKillRewardAmountSmall;
	int32_t CreatureLargeHealth;
	float CreatureLargeMinSize;
	float CreatureLargeRunMaxShakeDist;
	float CreatureLargeWalkMaxShakeDist;
	float CreatureLookBeforeFleeingIfShotTime;
	float CreatureLookBeforeFleeingTime;
	float CreatureLookBeforeGoingTime;
	float CreatureLookPlayerForceLookTime;
	float CreatureLookScaryThingTime;
	int32_t CreatureMedHealth;
	float CreatureMedMinSize;
	float CreatureMinAlignSpeed;
	float CreatureMinAnimMoveSpeed;
	float CreatureMinRunTime;
	float CreatureMoveIdle;
	float CreatureRidingHugeMinSize;
	float CreatureRidingLargeMinSize;
	float CreatureRidingMedMinSize;
	float CreatureScaleMangle;
	float CreatureSightRange;
	int32_t CreatureSmallHealth;
	float CreatureSpeedMultiplier;
	float CreatureTurnMax;
	float CreatureTurnMin;
	float CreatureUpdateRateMultiplier;
	float CreatureWaryTime;
	float DefaultRunMoveSpeed;
	float DefaultTrotMoveSpeed;
	float DefaultWalkMoveSpeed;
	float DelayAfterRespawnBeforeAttackable;
	float DespawnDistFactor;
	float DetailAnimBlendInTime;
	float DetailAnimBlendOutTime;
	float DetailAnimMaxPauseTime;
	float DetailAnimMinPauseTime;
	float DroneExplodeRadius;
	float EdgeClosenessPenalty;
	float ExtraFollowFreq1;
	float ExtraFollowFreq2;
	float ExtraFollowStrength;
	float FadeDistance;
	float FadeScaleMultiplier;
	float FadeScalePower;
	float FastSwimSpeed;
	float FeedingFollowTime;
	float FeedingNoticeDistance;
	float FeedingNoticeTime;
	int32_t FeedingTaskAmount;
	float FiendAggroDecreasePerSpawn;
	float FiendAggroIncreaseDamageEgg;
	float FiendAggroIncreaseDestroyEgg;
	float FiendAggroTime;
	float FiendBeingShotMemoryTime;
	float FiendCritAreaSize;
	float FiendDespawnDistance;
	float FiendDistReduceForBeingShot;
	float FiendDistToConsiderTargetSwtich;
	int32_t FiendEggsToUnlockSpit;
	int32_t FiendHealth;
	float FiendHealthLevelMul;
	int32_t FiendMaxAttackers;
	int32_t FiendMaxEngaged;
	float FiendMaxSpawnTime;
	float FiendMaxVerticalForPounce;
	float FiendMinSpawnTime;
	float FiendPerceptionDistance;
	float FiendPounceDistanceModifier;
	float FiendReplicateEndDistance;
	float FiendReplicateStartDistance;
	float FiendSpawnDistance;
	float FiendZigZagSpeed;
	float FiendZigZagStrength;
	float FishBobAmplitude;
	float FishBobFrequency;
	float FishDesiredDepth;
	float FishFiendBigBoostStrength;
	float FishFiendBigBoostTime;
	int32_t FishFiendBigHealth;
	float FishFiendBigScale;
	float FishFiendSmallBoostStrength;
	float FishFiendSmallBoostTime;
	int32_t FishFiendSmallHealth;
	float FishFiendSmallScale;
	float FishMinHeightAboveSeaBed;
	float FishObstacleAvoidStrength;
	float FishPlayerAttractionAhead;
	float FishPlayerAttractionFrontDist;
	float FishPlayerAttractionMaxDist;
	float FishPlayerAttractionMinDist;
	float FishPlayerAttractionStrength;
	float FishPredatorChargeDist;
	float FishPredatorChargeDistScale;
	float FishSeaBedAvoidStrength;
	float FishWaterSurfaceAnticipate;
	float FishWaterSurfaceAvoidStrength;
	float FloaterObstacleAvoidStrength;
	float FloaterSteeringRayLength;
	float FloaterSteeringRaySphereSize;
	float FloaterSteeringRaySpread;
	float FloaterSurfaceAnticipate;
	float FloaterSurfaceAvoidStrength;
	float FlowFieldWeight;
	float FollowLeaderAlignWeight;
	float FollowLeaderCohereWeight;
	float FollowPlayerDistance;
	float FollowRange;
	float FollowRunPlayerDistance;
	float FollowWeight;
	float FootDustGroundTintStrength;
	float FootParticleTime;
	float FootPlantError;
	float FreighterDespawnDist;
	float FreighterJellyBobAmplitude;
	float FreighterJellyBobFrequency;
	float FreighterSpawnDist;
	int32_t FriendlyCreatureLimit;
	float GroundWormScaleMax;
	float GroundWormScaleMin;
	float GroundWormSpawnChance;
	float GroundWormSpawnerActivateRadius;
	float GroundWormSpawnerDestroyRadiusActive;
	float GroundWormSpawnerDestroyRadiusInactive;
	int32_t GroundWormSpawnMax;
	int32_t GroundWormSpawnMin;
	float GroundWormSpawnRadius;
	float GroundWormSpawnSpacing;
	float GroundWormSpawnTimeOut;
	float GroupBabyHealthMultiplier;
	float GroupBabyProportion;
	float GroupBabyRunProbability;
	float GroupBabyScale;
	float GroupFemaleProportion;
	float GroupLookAtDurationMax;
	float GroupLookAtDurationMin;
	float GroupLookAtProbability;
	float GroupRunDurationMax;
	float GroupRunDurationMin;
	float GroupRunProbability;
	float GroupRunStormProbability;
	float HarvestCooldownMax;
	float HarvestCooldownMin;
	float HeightDiffPenalty;
	float HeightLookAhead;
	float HerdGroupSizeMultiplier;
	float ImpassabilityBrakeTime;
	float ImpassabilityTurnSpeedMultiplier;
	float ImpassabilityUnbrakeTime;
	float IndoorObstacleAvoidStrength;
	float IndoorSteeringRayLength;
	float IndoorSteeringRaySphereSize;
	float IndoorSteeringRaySpread;
	float IndoorTurnTime;
	float InfluenceDeflect;
	float InfluenceForce;
	float InfluenceRadius;
	float InfluenceThreshold;
	float JellyBossBroodColourInterpTime;
	float JellyBossBroodSeparateTime;
	float JellyBossBroodWarningRadius;
	float JellyBossColourInterpTime;
	float JellyBossFastSwimSpeed;
	float JellyBossLandAnticipate;
	float JellyBossLandAvoidStrength;
	float LargeCreatureAvoidPlayerDistance;
	float LargeCreatureFleePlayerDistance;
	float largeCreaturePerceptionDistance;
	float LookMaxPitchWhenMoving;
	float LookMaxYawMoving;
	float LookMaxYawStatic;
	float LookPitchAtMaxYaw;
	float LookRollAtMaxYaw;
	float LookRollWhenMoving;
	float LowPerfFlockReduce;
	int32_t MaxAdditionalEcosystemCreaturesForDiscovery;
	float MaxBirdsProportion;
	float MaxCreatureSize;
	int32_t MaxEcosystemCreaturesLow;
	int32_t MaxEcosystemCreaturesNormal;
	float MaxFade;
	int32_t MaxFiendsToSpawn;
	int32_t MaxFiendsToSpawnCarnage;
	int32_t MaxFishFiends;
	float MaxForce;
	float MaxHeightTime;
	int32_t MaxRagdollsBeforeDespawnOffscreen;
	int32_t MaxRagdollsBeforeDespawnOnscreen;
	float MaxRideLeanCounterRotate;
	float MaxSpeed;
	float MaxTorque;
	float MaxTurnRadius;
	float MinFade;
	float MiniDroneEnergyRecoverRate;
	float MiniDroneEnergyUsePerShot;
	float MiniDroneShotDelay;
	float MiniDroneShotMaxAngle;
	float MiningRandomProbability;
	float MinRideSize;
	float MinScaleForNavMap;
	float MinWaterSpawnDepth;
	float NavMapLookAhead;
	int32_t NumCreaturesRequiredForDiscoveryMission;
	int32_t NumWeirdCreaturesRequiredForDiscoveryMission;
	float PassiveFleePlayerDistance;
	float PathOverestimate;
	float PatrolGradientFactor;
	float PatrolHeightOffset;
	float PatrolMaxDist;
	float PatrolMinDist;
	float PatrolSwitchMinTime;
	int32_t PauseBetweenCreatureSpawnRequests;
	float PelvisIkStrength;
	float PercentagePlayerPredators;
	int32_t PerceptionUpdateRate;
	float PetAccessoryMoodDisplayThreshold;
	float PetAccessoryStateInterval;
	float PetAnimSpeedBoostSmallerThan;
	float PetAnimSpeedBoostStrength;
	float PetAnimSpeedMax;
	float PetAnimSpeedMin;
	float PetChatCooldown;
	float PetChatUseTraitTemplateChance;
	float PetEffectSpawnOffsetHuge;
	float PetEffectSpawnOffsetLarge;
	float PetEffectSpawnOffsetMed;
	float PetEffectSpawnOffsetSmall;
	float PetEggAccessoryChanceModifier;
	float PetEggColourChanceModifier;
	int32_t PetEggFirstEggDelay;
	float PetEggHatchColourChangeChance;
	float PetEggHatchOffset;
	float PetEggHatchScale;
	float PetEggHatchScaleChange;
	float PetEggHatchTraitChange;
	float PetEggLayingDuration;
	int32_t PetEggLayingInterval;
	float PetEggMaxAccessoriesChangeChance;
	float PetEggMaxColourChangeChance;
	float PetEggMaxDistStep;
	float PetEggMaxHungry;
	float PetEggMaxLonely;
	float PetEggMaxOverdosage;
	float PetEggMaxTopDescriptorChangeChance;
	float PetEggMinDistStep;
	float PetEggMinGrowthToLay;
	int32_t PetEggModificationItemLimit;
	int32_t PetEggModificationTime;
	float PetEggOverdosageModifier;
	float PetEggScaleRangeMax;
	float PetEggScaleRangeModifier;
	float PetEggSubstanceModifier;
	float PetEggTraitRangeMax;
	float PetEggTraitRangeModifier;
	float PetFollowRange;
	float PetFollowRunPlayerDistance;
	float PetFootShakeModifier;
	NMS_GameComponents::GcPetBehaviours PetForceBehaviour;
	int32_t PetGrowthTime;
	float PetHeartChangePerLayer;
	float PetHeartMaxSize;
	float PetHeartResponseLoopTime;
	float PetHeartResponseTotalTime;
	float PetHeelDistSwitchTimeMax;
	float PetHeelDistSwitchTimeMin;
	float PetHeelLateralShiftTimeMax;
	float PetHeelLateralShiftTimeMin;
	float PetHeelPosSpringTime;
	int32_t PetIncubationTime;
	float PetInteractBaseRange;
	float PetInteractionLightHeight;
	float PetInteractionLightIntensityMax;
	float PetInteractionLightIntensityMin;
	float PetInteractTurnToFaceMinAngle;
	float PetLastActionReportTime;
	float PetMaxSizeOffPlanet;
	float PetMaxSummonDistance;
	float PetMaxTurnRad;
	float PetMinSummonDistance;
	float PetMinTrust;
	float PetMinTurnRad;
	float PetMoodCurvePower;
	float PetMoodSmoothTime;
	float PetNavRadForMaxTurn;
	float PetNavRadForMinTurn;
	float PetOrderMaxRange;
	float PetOrderMinRange;
	float PetPlayerSpeedSmoothTime;
	float PetRadialCentre;
	float PetRadialPulseMul;
	float PetRadialPulseTime;
	float PetRadialRadius;
	float PetRadialWidth;
	float PetRunAtHeelDistMax;
	float PetRunAtHeelDistMin;
	float PetRunAtHeelLateralShiftMax;
	float PetRunAtHeelLateralShiftMin;
	int32_t PetSlotsUnlockedByDefault;
	float PetStickySideBiasAngle;
	float PetSummonRotation;
	float PetTeleportDistOffPlanet;
	float PetTeleportDistOnPlanet;
	float PetTeleportEffectTime;
	float PetThrowArcRange;
	float PetTickleChatChance;
	float PetTreatChatChance;
	int32_t PetTrustChangeInterval;
	float PetTrustDecreaseStep;
	float PetTrustDecreaseThreshold;
	float PetTrustIncreaseStep;
	float PetTrustIncreaseThreshold;
	float PetTrustOnAdoption;
	float PetTrustOnHatch;
	float PetWalkAtHeelChanceDevoted;
	float PetWalkAtHeelChanceIndependent;
	float PetWalkAtHeelDistMax;
	float PetWalkAtHeelDistMin;
	float PetWalkAtHeelLateralShift;
	float PlayerBirdDistance;
	float PlayerDamageTransferScale;
	float PlayerPredatorBoredomDistance;
	float PlayerPredatorHealthModifier;
	float PlayerPredatorRegainInterestTime;
	float PostRideMoveTime;
	float PredatorApproachTime;
	float PredatorBoredomDistance;
	float PredatorChargeDist;
	float PredatorChargeDistScale;
	float PredatorEnergyRecoverRate;
	float PredatorEnergyUseChasing;
	float PredatorFishPerceptionDistance;
	int32_t PredatorHugeHealth;
	int32_t PredatorLargeHealth;
	int32_t PredatorMedHealth;
	float PredatorNoticePauseTime;
	float PredatorPerceptionDistance;
	float PredatorRegainInterestTime;
	float PredatorRoarProbAfterHit;
	float PredatorRoarProbAfterMiss;
	float PredatorRunAwayDist;
	float PredatorRunAwayHealthPercent;
	float PredatorRunMoveSpeed;
	int32_t PredatorSmallHealth;
	float PredatorSpeedMultiplier;
	float PredatorStealthDist;
	float PredatorTrotMoveSpeed;
	float PredatorWalkMoveSpeed;
	float QueenHealthLevelMul;
	float RagdollConeLimit;
	float RagdollDamping;
	float RagdollMotorFadeEnd;
	float RagdollMotorFadeStart;
	float RagdollTau;
	float RagdollTwistLimit;
	float RecoverHealthTime;
	float RemoteSpawnFadeInDelay;
	float RepelAmount;
	float RepelRange;
	float ResourceSpawnTime;
	float RideIdleTime;
	float RiderLeanTime;
	float RideSpeedChangeTime;
	float RideSpeedFast;
	float RideSpeedSlow;
	float RidingFirstPersonOffsetFwd;
	float RidingFirstPersonOffsetUp;
	float RidingReplicationRangeMultiplier;
	float RidingRollAdjustMaxAngle;
	float RidingRollMaxAngleAt;
	float RidingSteerWeight;
	float RockTransformGlobalChance;
	float RoutineOffset;
	float RoutineSpeed;
	float SandWormChangeDirectionTime;
	float SandWormDespawnDist;
	float SandWormJumpHeight;
	float SandWormJumpTime;
	float SandWormMaxHeightAdjust;
	int32_t SandWormMaxJumps;
	float SandWormMaxSteer;
	float SandWormSpawnChanceInfested;
	float SandWormSpawnChanceMax;
	float SandWormSpawnChanceMin;
	float SandWormSpawnTimer;
	float SandWormSteerAdjustTime;
	float SandWormSubmergeDepth;
	float SandWormSubmergeTime;
	float SandWormSurfaceTime;
	float SceneTerrainSpawnMinDistance;
	int32_t ScuttlerHealth;
	float ScuttlerIdleTimeMax;
	float ScuttlerIdleTimeMin;
	float ScuttlerInitialNoAttackTime;
	float ScuttlerMoveTimeMax;
	float ScuttlerMoveTimeMin;
	float ScuttlerSpitChargeTime;
	float ScuttlerSpitDelay;
	float ScuttlerZigZagStrength;
	float ScuttlerZigZagTimeMax;
	float ScuttlerZigZagTimeMin;
	float SearchItemDistance;
	float SearchItemFrequency;
	float SearchItemGiveUpDistance;
	float SearchItemGiveUpTime;
	float SearchItemNotifyTime;
	float SearchSpawnRandomItemProbability;
	float SharkAlignSpeed;
	float SharkAlongPathSpeed;
	float SharkAttackAccel;
	float SharkAttackSpeed;
	float SharkGetToPathSpeed;
	float SharkPatrolEnd;
	float SharkPatrolRadius;
	float SharkPatrolSpeed;
	float SharkToPathYDamp;
	float ShieldFadeTime;
	float SmallCreatureAvoidPlayerDistance;
	float SmallCreatureFleePlayerDistance;
	float SmallCreaturePerceptionDistance;
	float SoftenAvoidanceRadiusMod;
	float SpawnCameraAngleCos;
	float SpawnDistanceModifierForUnderwater;
	float SpawnDistAtMaxSize;
	float SpawnDistAtMinSize;
	float SpawnMinDistPercentage;
	float SpawnOnscreenDist;
	float SpawnsAvoidBaseMultiplier;
	int32_t SpookBossHealth;
	float SpookFiendColourInterpTime;
	float SpookFiendFastSwimSpeed;
	int32_t SpookSquidHealth;
	float SteeringUpdateRate;
	float StickToGroundCastBegin;
	float StickToGroundCastEnd;
	float StickToGroundSpeed;
	float SwarmBrakingForce;
	float SwarmMoveYFactor;
	float TargetReachedDistance;
	float TargetSearchTimeout;
	float TrailHalfLife;
	float TurnInPlaceIdleTime;
	float TurnInPlaceMaxAngle;
	float TurnInPlaceMaxSpeed;
	float TurnInPlaceMaxSpeedIndoor;
	float TurnInPlaceMinTime;
	float TurnRadiusMultiplier;
	float TurnSlowAreaCos;
	float VelocityAlignSpeed;
	float VelocityAlignStrength;
	float VelocityAlignYFactorMax;
	float VelocityAlignYFactorMin;
	float WaterDepthSizeScalingMaxDepth;
	float WaterDepthSizeScalingMaxScale;
	float WaterDepthSizeScalingMinDepth;
	float WaterDepthSizeScalingMinScale;
	float WaterSpawnOffset;
	float WeaponRepelAmount;
	float WeaponRepelRange;
	NMS::NMSString0x20 TempermentDescriptions[11];
	NMS::NMSString0x20 DietDescriptions[4];
	NMS::NMSString0x20 WaterDietDescriptions[4];
	bool AggressiveSharks;
	bool AllBaitIsBasic;
	bool AllowSleeping;
	bool AllowSpawningOnscreen;
	bool CanAlwaysLayEgg;
	bool CreatureInteractWithoutRaycasts;
	bool CreatureRideDirectControl;
	bool DebugDrawTrails;
	bool DebugSearch;
	bool DetailAnimPlayWhileWalking;
	bool DrawRoutineFollowDebug;
	bool DrawRoutineInfo;
	bool EnableFlyingSnakeTails;
	bool EnableMPCreatureRide;
	bool EnableNewStuff;
	bool EnableTrailIk;
	bool EnableVRCreatureRide;
	bool FiendOnscreenMarkers;
	bool FiendsCanAttack;
	bool ForceShowDebugTrails;
	bool ForceStatic;
	bool InstantCreatureRide;
	bool IsHurtingCreaturesACrime;
	bool PetAnimTest;
	bool PetCanSummonOnFreighter;
	bool PetForceSummonFromEgg;
	bool PetsShowTraitClassesAsWords;
	bool PiedPiper;
	bool ProcessPendingSpawnRequests;
	bool RidingPositionTest;
	bool ScuttlersCanAttack;
	bool ShowScale;
	bool StaticCreatureRide;
	bool UncapSpawningforVideo;
	bool UseCreatureAdoptOSD;
	bool UsePetTeleportEffect;
	NMS_Toolkit::TkCurveType WaterDepthSizeScalingCurve;

	friend bool operator==(const GcCreatureGlobals& lhs, const GcCreatureGlobals& rhs) 
	{
		return lhs.PainShake == rhs.PainShake &&
		lhs.PetOffPlanetEffect == rhs.PetOffPlanetEffect &&
		lhs.AllCreaturesDiscoveredColour == rhs.AllCreaturesDiscoveredColour &&
		lhs.JellyBossBroodIdleColour == rhs.JellyBossBroodIdleColour &&
		lhs.JellyBossBroodProximityWarningColour == rhs.JellyBossBroodProximityWarningColour &&
		lhs.JellyBossIdleColour == rhs.JellyBossIdleColour &&
		lhs.JellyBossProjectileAttackWarningColour == rhs.JellyBossProjectileAttackWarningColour &&
		lhs.JellyBossSpawnBroodWarningColour == rhs.JellyBossSpawnBroodWarningColour &&
		lhs.PetInteractionLightColour == rhs.PetInteractionLightColour &&
		lhs.PetRadialBadColour == rhs.PetRadialBadColour &&
		lhs.PetRadialBoostColour == rhs.PetRadialBoostColour &&
		lhs.PetRadialGoodColour == rhs.PetRadialGoodColour &&
		lhs.PetRadialNeutralColour == rhs.PetRadialNeutralColour &&
		lhs.PetThrowArcColour == rhs.PetThrowArcColour &&
		lhs.SpookFiendAggressiveColour == rhs.SpookFiendAggressiveColour &&
		lhs.SpookFiendKamikazeColour == rhs.SpookFiendKamikazeColour &&
		lhs.SpookFiendPassiveColour == rhs.SpookFiendPassiveColour &&
		lhs.SpookFiendSpitColour == rhs.SpookFiendSpitColour &&
		std::equal(std::begin(lhs.WeirdBiomeDescriptions), std::end(lhs.WeirdBiomeDescriptions), std::begin(rhs.WeirdBiomeDescriptions)) &&
		std::equal(std::begin(lhs.BiomeAirDescriptions), std::end(lhs.BiomeAirDescriptions), std::begin(rhs.BiomeAirDescriptions)) &&
		std::equal(std::begin(lhs.BiomeDescriptions), std::end(lhs.BiomeDescriptions), std::begin(rhs.BiomeDescriptions)) &&
		std::equal(std::begin(lhs.BiomeWaterDescriptions), std::end(lhs.BiomeWaterDescriptions), std::begin(rhs.BiomeWaterDescriptions)) &&
		std::equal(std::begin(lhs.DietMeat), std::end(lhs.DietMeat), std::begin(rhs.DietMeat)) &&
		std::equal(std::begin(lhs.DietVeg), std::end(lhs.DietVeg), std::begin(rhs.DietVeg)) &&
		std::equal(std::begin(lhs.PetBiomeClimates), std::end(lhs.PetBiomeClimates), std::begin(rhs.PetBiomeClimates)) &&
		lhs.WeirdKillingRewards == rhs.WeirdKillingRewards &&
		std::equal(std::begin(lhs.Temperments), std::end(lhs.Temperments), std::begin(rhs.Temperments)) &&
		std::equal(std::begin(lhs.Diets), std::end(lhs.Diets), std::begin(rhs.Diets)) &&
		std::equal(std::begin(lhs.WaterDiets), std::end(lhs.WaterDiets), std::begin(rhs.WaterDiets)) &&
		lhs.CreatureFilter == rhs.CreatureFilter &&
		lhs.PetCarePuzzleOverrideID == rhs.PetCarePuzzleOverrideID &&
		lhs.AlertTable == rhs.AlertTable &&
		lhs.AlienShipQuestCreatureWeapon == rhs.AlienShipQuestCreatureWeapon &&
		lhs.AlienShipQuestKillingSubstance == rhs.AlienShipQuestKillingSubstance &&
		lhs.BasicFeedingProduct == rhs.BasicFeedingProduct &&
		lhs.CarnivoreFeedingProducts == rhs.CarnivoreFeedingProducts &&
		lhs.CreatureDeathEffectBig == rhs.CreatureDeathEffectBig &&
		lhs.CreatureDeathEffectMedium == rhs.CreatureDeathEffectMedium &&
		lhs.CreatureDeathEffectSmall == rhs.CreatureDeathEffectSmall &&
		lhs.CreatureHugeRunShake == rhs.CreatureHugeRunShake &&
		lhs.CreatureHugeWalkShake == rhs.CreatureHugeWalkShake &&
		lhs.CreatureLargeRunShake == rhs.CreatureLargeRunShake &&
		lhs.CreatureLargeWalkShake == rhs.CreatureLargeWalkShake &&
		lhs.CreatureSeed == rhs.CreatureSeed &&
		lhs.DefaultKillingSubstance == rhs.DefaultKillingSubstance &&
		lhs.FishDeathEffect == rhs.FishDeathEffect &&
		lhs.HarvestingProducts == rhs.HarvestingProducts &&
		lhs.HerbivoreFeedingProducts == rhs.HerbivoreFeedingProducts &&
		lhs.HorrorPetFeedingProduct == rhs.HorrorPetFeedingProduct &&
		lhs.KillingProducts == rhs.KillingProducts &&
		lhs.KillingSubstances == rhs.KillingSubstances &&
		lhs.LootItems == rhs.LootItems &&
		lhs.PetEggHatchResourceFile == rhs.PetEggHatchResourceFile &&
		lhs.PetEggMaxChangeProduct == rhs.PetEggMaxChangeProduct &&
		lhs.PetEggResourceFile == rhs.PetEggResourceFile &&
		lhs.PetEggsplosionEffect == rhs.PetEggsplosionEffect &&
		lhs.PetScan == rhs.PetScan &&
		lhs.RobotFeedingProduct == rhs.RobotFeedingProduct &&
		lhs.RockTransformChanceModifiers == rhs.RockTransformChanceModifiers &&
		lhs.SpookFiendsSpawnData == rhs.SpookFiendsSpawnData &&
		lhs.FlyingSnakeData == rhs.FlyingSnakeData &&
		std::equal(std::begin(lhs.SpherePusherOffset), std::end(lhs.SpherePusherOffset), std::begin(rhs.SpherePusherOffset)) &&
		std::equal(std::begin(lhs.SpherePusherRadiusMul), std::end(lhs.SpherePusherRadiusMul), std::begin(rhs.SpherePusherRadiusMul)) &&
		std::equal(std::begin(lhs.SpherePusherWeight), std::end(lhs.SpherePusherWeight), std::begin(rhs.SpherePusherWeight)) &&
		lhs.JellyBossBroodMaxChaseTime == rhs.JellyBossBroodMaxChaseTime &&
		lhs.SpookFiendsSpawnTimer == rhs.SpookFiendsSpawnTimer &&
		lhs.AdultBabyKilledNoticeDistance == rhs.AdultBabyKilledNoticeDistance &&
		lhs.AdultCorrelationValue == rhs.AdultCorrelationValue &&
		lhs.AlertDistance == rhs.AlertDistance &&
		lhs.AllCreaturesDiscoveredBonusMul == rhs.AllCreaturesDiscoveredBonusMul &&
		lhs.AngryRockProportionNormal == rhs.AngryRockProportionNormal &&
		lhs.AngryRockProportionSurvival == rhs.AngryRockProportionSurvival &&
		lhs.AnimationStickToGroundSpeed == rhs.AnimationStickToGroundSpeed &&
		lhs.AnimChangeCoolDown == rhs.AnimChangeCoolDown &&
		lhs.AsteroidCreatureRichSystemSpawnPercent == rhs.AsteroidCreatureRichSystemSpawnPercent &&
		lhs.AsteroidCreatureSpawnPercentOverride == rhs.AsteroidCreatureSpawnPercentOverride &&
		lhs.AttackPlayerDistance == rhs.AttackPlayerDistance &&
		lhs.AttractedMaxAvoidCreaturesDist == rhs.AttractedMaxAvoidCreaturesDist &&
		lhs.AttractedMaxAvoidCreaturesStrength == rhs.AttractedMaxAvoidCreaturesStrength &&
		lhs.AttractedMinAvoidCreaturesDist == rhs.AttractedMinAvoidCreaturesDist &&
		lhs.AttractedMinAvoidCreaturesStrength == rhs.AttractedMinAvoidCreaturesStrength &&
		lhs.AttractMinDistance == rhs.AttractMinDistance &&
		lhs.AvoidCreaturesWeight == rhs.AvoidCreaturesWeight &&
		lhs.AvoidImpassableWeight == rhs.AvoidImpassableWeight &&
		lhs.BadTurnPercent == rhs.BadTurnPercent &&
		lhs.BadTurnWeight == rhs.BadTurnWeight &&
		lhs.BaseAndTerrainModImpassableStrength == rhs.BaseAndTerrainModImpassableStrength &&
		lhs.BrakingForce == rhs.BrakingForce &&
		lhs.BrakingForceY == rhs.BrakingForceY &&
		lhs.BugFiendHealth == rhs.BugFiendHealth &&
		lhs.BugQueenHealth == rhs.BugQueenHealth &&
		lhs.BugQueenSpitballExplosionRadius == rhs.BugQueenSpitballExplosionRadius &&
		lhs.BugQueenSpitballSpeed == rhs.BugQueenSpitballSpeed &&
		lhs.BugQueenSpitCount == rhs.BugQueenSpitCount &&
		lhs.BugQueenSpitRadius == rhs.BugQueenSpitRadius &&
		lhs.CreatureBlobRidingHugeMinSize == rhs.CreatureBlobRidingHugeMinSize &&
		lhs.CreatureBlobRidingLargeMinSize == rhs.CreatureBlobRidingLargeMinSize &&
		lhs.CreatureBlobRidingMedMinSize == rhs.CreatureBlobRidingMedMinSize &&
		lhs.CreatureBrakeForce == rhs.CreatureBrakeForce &&
		lhs.CreatureHarvestAmountHuge == rhs.CreatureHarvestAmountHuge &&
		lhs.CreatureHarvestAmountLarge == rhs.CreatureHarvestAmountLarge &&
		lhs.CreatureHarvestAmountMed == rhs.CreatureHarvestAmountMed &&
		lhs.CreatureHarvestAmountSmall == rhs.CreatureHarvestAmountSmall &&
		lhs.CreatureHearingRange == rhs.CreatureHearingRange &&
		lhs.CreatureHugeHealth == rhs.CreatureHugeHealth &&
		lhs.CreatureHugeMinSize == rhs.CreatureHugeMinSize &&
		lhs.CreatureHugeRunMaxShakeDist == rhs.CreatureHugeRunMaxShakeDist &&
		lhs.CreatureHugeWalkMaxShakeDist == rhs.CreatureHugeWalkMaxShakeDist &&
		lhs.CreatureIndoorSpeedMultiplier == rhs.CreatureIndoorSpeedMultiplier &&
		lhs.CreatureInteractBaseRange == rhs.CreatureInteractBaseRange &&
		lhs.CreatureInteractionRangeBoostHuge == rhs.CreatureInteractionRangeBoostHuge &&
		lhs.CreatureInteractionRangeBoostLarge == rhs.CreatureInteractionRangeBoostLarge &&
		lhs.CreatureInteractionRangeBoostMedium == rhs.CreatureInteractionRangeBoostMedium &&
		lhs.CreatureInteractionRangeBoostRun == rhs.CreatureInteractionRangeBoostRun &&
		lhs.CreatureInteractionRangeBoostSmall == rhs.CreatureInteractionRangeBoostSmall &&
		lhs.CreatureInteractionRangeBoostSprint == rhs.CreatureInteractionRangeBoostSprint &&
		lhs.CreatureInteractionRangeReducePredator == rhs.CreatureInteractionRangeReducePredator &&
		lhs.CreatureKillRewardAmountFiend == rhs.CreatureKillRewardAmountFiend &&
		lhs.CreatureKillRewardAmountHuge == rhs.CreatureKillRewardAmountHuge &&
		lhs.CreatureKillRewardAmountLarge == rhs.CreatureKillRewardAmountLarge &&
		lhs.CreatureKillRewardAmountMed == rhs.CreatureKillRewardAmountMed &&
		lhs.CreatureKillRewardAmountSmall == rhs.CreatureKillRewardAmountSmall &&
		lhs.CreatureLargeHealth == rhs.CreatureLargeHealth &&
		lhs.CreatureLargeMinSize == rhs.CreatureLargeMinSize &&
		lhs.CreatureLargeRunMaxShakeDist == rhs.CreatureLargeRunMaxShakeDist &&
		lhs.CreatureLargeWalkMaxShakeDist == rhs.CreatureLargeWalkMaxShakeDist &&
		lhs.CreatureLookBeforeFleeingIfShotTime == rhs.CreatureLookBeforeFleeingIfShotTime &&
		lhs.CreatureLookBeforeFleeingTime == rhs.CreatureLookBeforeFleeingTime &&
		lhs.CreatureLookBeforeGoingTime == rhs.CreatureLookBeforeGoingTime &&
		lhs.CreatureLookPlayerForceLookTime == rhs.CreatureLookPlayerForceLookTime &&
		lhs.CreatureLookScaryThingTime == rhs.CreatureLookScaryThingTime &&
		lhs.CreatureMedHealth == rhs.CreatureMedHealth &&
		lhs.CreatureMedMinSize == rhs.CreatureMedMinSize &&
		lhs.CreatureMinAlignSpeed == rhs.CreatureMinAlignSpeed &&
		lhs.CreatureMinAnimMoveSpeed == rhs.CreatureMinAnimMoveSpeed &&
		lhs.CreatureMinRunTime == rhs.CreatureMinRunTime &&
		lhs.CreatureMoveIdle == rhs.CreatureMoveIdle &&
		lhs.CreatureRidingHugeMinSize == rhs.CreatureRidingHugeMinSize &&
		lhs.CreatureRidingLargeMinSize == rhs.CreatureRidingLargeMinSize &&
		lhs.CreatureRidingMedMinSize == rhs.CreatureRidingMedMinSize &&
		lhs.CreatureScaleMangle == rhs.CreatureScaleMangle &&
		lhs.CreatureSightRange == rhs.CreatureSightRange &&
		lhs.CreatureSmallHealth == rhs.CreatureSmallHealth &&
		lhs.CreatureSpeedMultiplier == rhs.CreatureSpeedMultiplier &&
		lhs.CreatureTurnMax == rhs.CreatureTurnMax &&
		lhs.CreatureTurnMin == rhs.CreatureTurnMin &&
		lhs.CreatureUpdateRateMultiplier == rhs.CreatureUpdateRateMultiplier &&
		lhs.CreatureWaryTime == rhs.CreatureWaryTime &&
		lhs.DefaultRunMoveSpeed == rhs.DefaultRunMoveSpeed &&
		lhs.DefaultTrotMoveSpeed == rhs.DefaultTrotMoveSpeed &&
		lhs.DefaultWalkMoveSpeed == rhs.DefaultWalkMoveSpeed &&
		lhs.DelayAfterRespawnBeforeAttackable == rhs.DelayAfterRespawnBeforeAttackable &&
		lhs.DespawnDistFactor == rhs.DespawnDistFactor &&
		lhs.DetailAnimBlendInTime == rhs.DetailAnimBlendInTime &&
		lhs.DetailAnimBlendOutTime == rhs.DetailAnimBlendOutTime &&
		lhs.DetailAnimMaxPauseTime == rhs.DetailAnimMaxPauseTime &&
		lhs.DetailAnimMinPauseTime == rhs.DetailAnimMinPauseTime &&
		lhs.DroneExplodeRadius == rhs.DroneExplodeRadius &&
		lhs.EdgeClosenessPenalty == rhs.EdgeClosenessPenalty &&
		lhs.ExtraFollowFreq1 == rhs.ExtraFollowFreq1 &&
		lhs.ExtraFollowFreq2 == rhs.ExtraFollowFreq2 &&
		lhs.ExtraFollowStrength == rhs.ExtraFollowStrength &&
		lhs.FadeDistance == rhs.FadeDistance &&
		lhs.FadeScaleMultiplier == rhs.FadeScaleMultiplier &&
		lhs.FadeScalePower == rhs.FadeScalePower &&
		lhs.FastSwimSpeed == rhs.FastSwimSpeed &&
		lhs.FeedingFollowTime == rhs.FeedingFollowTime &&
		lhs.FeedingNoticeDistance == rhs.FeedingNoticeDistance &&
		lhs.FeedingNoticeTime == rhs.FeedingNoticeTime &&
		lhs.FeedingTaskAmount == rhs.FeedingTaskAmount &&
		lhs.FiendAggroDecreasePerSpawn == rhs.FiendAggroDecreasePerSpawn &&
		lhs.FiendAggroIncreaseDamageEgg == rhs.FiendAggroIncreaseDamageEgg &&
		lhs.FiendAggroIncreaseDestroyEgg == rhs.FiendAggroIncreaseDestroyEgg &&
		lhs.FiendAggroTime == rhs.FiendAggroTime &&
		lhs.FiendBeingShotMemoryTime == rhs.FiendBeingShotMemoryTime &&
		lhs.FiendCritAreaSize == rhs.FiendCritAreaSize &&
		lhs.FiendDespawnDistance == rhs.FiendDespawnDistance &&
		lhs.FiendDistReduceForBeingShot == rhs.FiendDistReduceForBeingShot &&
		lhs.FiendDistToConsiderTargetSwtich == rhs.FiendDistToConsiderTargetSwtich &&
		lhs.FiendEggsToUnlockSpit == rhs.FiendEggsToUnlockSpit &&
		lhs.FiendHealth == rhs.FiendHealth &&
		lhs.FiendHealthLevelMul == rhs.FiendHealthLevelMul &&
		lhs.FiendMaxAttackers == rhs.FiendMaxAttackers &&
		lhs.FiendMaxEngaged == rhs.FiendMaxEngaged &&
		lhs.FiendMaxSpawnTime == rhs.FiendMaxSpawnTime &&
		lhs.FiendMaxVerticalForPounce == rhs.FiendMaxVerticalForPounce &&
		lhs.FiendMinSpawnTime == rhs.FiendMinSpawnTime &&
		lhs.FiendPerceptionDistance == rhs.FiendPerceptionDistance &&
		lhs.FiendPounceDistanceModifier == rhs.FiendPounceDistanceModifier &&
		lhs.FiendReplicateEndDistance == rhs.FiendReplicateEndDistance &&
		lhs.FiendReplicateStartDistance == rhs.FiendReplicateStartDistance &&
		lhs.FiendSpawnDistance == rhs.FiendSpawnDistance &&
		lhs.FiendZigZagSpeed == rhs.FiendZigZagSpeed &&
		lhs.FiendZigZagStrength == rhs.FiendZigZagStrength &&
		lhs.FishBobAmplitude == rhs.FishBobAmplitude &&
		lhs.FishBobFrequency == rhs.FishBobFrequency &&
		lhs.FishDesiredDepth == rhs.FishDesiredDepth &&
		lhs.FishFiendBigBoostStrength == rhs.FishFiendBigBoostStrength &&
		lhs.FishFiendBigBoostTime == rhs.FishFiendBigBoostTime &&
		lhs.FishFiendBigHealth == rhs.FishFiendBigHealth &&
		lhs.FishFiendBigScale == rhs.FishFiendBigScale &&
		lhs.FishFiendSmallBoostStrength == rhs.FishFiendSmallBoostStrength &&
		lhs.FishFiendSmallBoostTime == rhs.FishFiendSmallBoostTime &&
		lhs.FishFiendSmallHealth == rhs.FishFiendSmallHealth &&
		lhs.FishFiendSmallScale == rhs.FishFiendSmallScale &&
		lhs.FishMinHeightAboveSeaBed == rhs.FishMinHeightAboveSeaBed &&
		lhs.FishObstacleAvoidStrength == rhs.FishObstacleAvoidStrength &&
		lhs.FishPlayerAttractionAhead == rhs.FishPlayerAttractionAhead &&
		lhs.FishPlayerAttractionFrontDist == rhs.FishPlayerAttractionFrontDist &&
		lhs.FishPlayerAttractionMaxDist == rhs.FishPlayerAttractionMaxDist &&
		lhs.FishPlayerAttractionMinDist == rhs.FishPlayerAttractionMinDist &&
		lhs.FishPlayerAttractionStrength == rhs.FishPlayerAttractionStrength &&
		lhs.FishPredatorChargeDist == rhs.FishPredatorChargeDist &&
		lhs.FishPredatorChargeDistScale == rhs.FishPredatorChargeDistScale &&
		lhs.FishSeaBedAvoidStrength == rhs.FishSeaBedAvoidStrength &&
		lhs.FishWaterSurfaceAnticipate == rhs.FishWaterSurfaceAnticipate &&
		lhs.FishWaterSurfaceAvoidStrength == rhs.FishWaterSurfaceAvoidStrength &&
		lhs.FloaterObstacleAvoidStrength == rhs.FloaterObstacleAvoidStrength &&
		lhs.FloaterSteeringRayLength == rhs.FloaterSteeringRayLength &&
		lhs.FloaterSteeringRaySphereSize == rhs.FloaterSteeringRaySphereSize &&
		lhs.FloaterSteeringRaySpread == rhs.FloaterSteeringRaySpread &&
		lhs.FloaterSurfaceAnticipate == rhs.FloaterSurfaceAnticipate &&
		lhs.FloaterSurfaceAvoidStrength == rhs.FloaterSurfaceAvoidStrength &&
		lhs.FlowFieldWeight == rhs.FlowFieldWeight &&
		lhs.FollowLeaderAlignWeight == rhs.FollowLeaderAlignWeight &&
		lhs.FollowLeaderCohereWeight == rhs.FollowLeaderCohereWeight &&
		lhs.FollowPlayerDistance == rhs.FollowPlayerDistance &&
		lhs.FollowRange == rhs.FollowRange &&
		lhs.FollowRunPlayerDistance == rhs.FollowRunPlayerDistance &&
		lhs.FollowWeight == rhs.FollowWeight &&
		lhs.FootDustGroundTintStrength == rhs.FootDustGroundTintStrength &&
		lhs.FootParticleTime == rhs.FootParticleTime &&
		lhs.FootPlantError == rhs.FootPlantError &&
		lhs.FreighterDespawnDist == rhs.FreighterDespawnDist &&
		lhs.FreighterJellyBobAmplitude == rhs.FreighterJellyBobAmplitude &&
		lhs.FreighterJellyBobFrequency == rhs.FreighterJellyBobFrequency &&
		lhs.FreighterSpawnDist == rhs.FreighterSpawnDist &&
		lhs.FriendlyCreatureLimit == rhs.FriendlyCreatureLimit &&
		lhs.GroundWormScaleMax == rhs.GroundWormScaleMax &&
		lhs.GroundWormScaleMin == rhs.GroundWormScaleMin &&
		lhs.GroundWormSpawnChance == rhs.GroundWormSpawnChance &&
		lhs.GroundWormSpawnerActivateRadius == rhs.GroundWormSpawnerActivateRadius &&
		lhs.GroundWormSpawnerDestroyRadiusActive == rhs.GroundWormSpawnerDestroyRadiusActive &&
		lhs.GroundWormSpawnerDestroyRadiusInactive == rhs.GroundWormSpawnerDestroyRadiusInactive &&
		lhs.GroundWormSpawnMax == rhs.GroundWormSpawnMax &&
		lhs.GroundWormSpawnMin == rhs.GroundWormSpawnMin &&
		lhs.GroundWormSpawnRadius == rhs.GroundWormSpawnRadius &&
		lhs.GroundWormSpawnSpacing == rhs.GroundWormSpawnSpacing &&
		lhs.GroundWormSpawnTimeOut == rhs.GroundWormSpawnTimeOut &&
		lhs.GroupBabyHealthMultiplier == rhs.GroupBabyHealthMultiplier &&
		lhs.GroupBabyProportion == rhs.GroupBabyProportion &&
		lhs.GroupBabyRunProbability == rhs.GroupBabyRunProbability &&
		lhs.GroupBabyScale == rhs.GroupBabyScale &&
		lhs.GroupFemaleProportion == rhs.GroupFemaleProportion &&
		lhs.GroupLookAtDurationMax == rhs.GroupLookAtDurationMax &&
		lhs.GroupLookAtDurationMin == rhs.GroupLookAtDurationMin &&
		lhs.GroupLookAtProbability == rhs.GroupLookAtProbability &&
		lhs.GroupRunDurationMax == rhs.GroupRunDurationMax &&
		lhs.GroupRunDurationMin == rhs.GroupRunDurationMin &&
		lhs.GroupRunProbability == rhs.GroupRunProbability &&
		lhs.GroupRunStormProbability == rhs.GroupRunStormProbability &&
		lhs.HarvestCooldownMax == rhs.HarvestCooldownMax &&
		lhs.HarvestCooldownMin == rhs.HarvestCooldownMin &&
		lhs.HeightDiffPenalty == rhs.HeightDiffPenalty &&
		lhs.HeightLookAhead == rhs.HeightLookAhead &&
		lhs.HerdGroupSizeMultiplier == rhs.HerdGroupSizeMultiplier &&
		lhs.ImpassabilityBrakeTime == rhs.ImpassabilityBrakeTime &&
		lhs.ImpassabilityTurnSpeedMultiplier == rhs.ImpassabilityTurnSpeedMultiplier &&
		lhs.ImpassabilityUnbrakeTime == rhs.ImpassabilityUnbrakeTime &&
		lhs.IndoorObstacleAvoidStrength == rhs.IndoorObstacleAvoidStrength &&
		lhs.IndoorSteeringRayLength == rhs.IndoorSteeringRayLength &&
		lhs.IndoorSteeringRaySphereSize == rhs.IndoorSteeringRaySphereSize &&
		lhs.IndoorSteeringRaySpread == rhs.IndoorSteeringRaySpread &&
		lhs.IndoorTurnTime == rhs.IndoorTurnTime &&
		lhs.InfluenceDeflect == rhs.InfluenceDeflect &&
		lhs.InfluenceForce == rhs.InfluenceForce &&
		lhs.InfluenceRadius == rhs.InfluenceRadius &&
		lhs.InfluenceThreshold == rhs.InfluenceThreshold &&
		lhs.JellyBossBroodColourInterpTime == rhs.JellyBossBroodColourInterpTime &&
		lhs.JellyBossBroodSeparateTime == rhs.JellyBossBroodSeparateTime &&
		lhs.JellyBossBroodWarningRadius == rhs.JellyBossBroodWarningRadius &&
		lhs.JellyBossColourInterpTime == rhs.JellyBossColourInterpTime &&
		lhs.JellyBossFastSwimSpeed == rhs.JellyBossFastSwimSpeed &&
		lhs.JellyBossLandAnticipate == rhs.JellyBossLandAnticipate &&
		lhs.JellyBossLandAvoidStrength == rhs.JellyBossLandAvoidStrength &&
		lhs.LargeCreatureAvoidPlayerDistance == rhs.LargeCreatureAvoidPlayerDistance &&
		lhs.LargeCreatureFleePlayerDistance == rhs.LargeCreatureFleePlayerDistance &&
		lhs.largeCreaturePerceptionDistance == rhs.largeCreaturePerceptionDistance &&
		lhs.LookMaxPitchWhenMoving == rhs.LookMaxPitchWhenMoving &&
		lhs.LookMaxYawMoving == rhs.LookMaxYawMoving &&
		lhs.LookMaxYawStatic == rhs.LookMaxYawStatic &&
		lhs.LookPitchAtMaxYaw == rhs.LookPitchAtMaxYaw &&
		lhs.LookRollAtMaxYaw == rhs.LookRollAtMaxYaw &&
		lhs.LookRollWhenMoving == rhs.LookRollWhenMoving &&
		lhs.LowPerfFlockReduce == rhs.LowPerfFlockReduce &&
		lhs.MaxAdditionalEcosystemCreaturesForDiscovery == rhs.MaxAdditionalEcosystemCreaturesForDiscovery &&
		lhs.MaxBirdsProportion == rhs.MaxBirdsProportion &&
		lhs.MaxCreatureSize == rhs.MaxCreatureSize &&
		lhs.MaxEcosystemCreaturesLow == rhs.MaxEcosystemCreaturesLow &&
		lhs.MaxEcosystemCreaturesNormal == rhs.MaxEcosystemCreaturesNormal &&
		lhs.MaxFade == rhs.MaxFade &&
		lhs.MaxFiendsToSpawn == rhs.MaxFiendsToSpawn &&
		lhs.MaxFiendsToSpawnCarnage == rhs.MaxFiendsToSpawnCarnage &&
		lhs.MaxFishFiends == rhs.MaxFishFiends &&
		lhs.MaxForce == rhs.MaxForce &&
		lhs.MaxHeightTime == rhs.MaxHeightTime &&
		lhs.MaxRagdollsBeforeDespawnOffscreen == rhs.MaxRagdollsBeforeDespawnOffscreen &&
		lhs.MaxRagdollsBeforeDespawnOnscreen == rhs.MaxRagdollsBeforeDespawnOnscreen &&
		lhs.MaxRideLeanCounterRotate == rhs.MaxRideLeanCounterRotate &&
		lhs.MaxSpeed == rhs.MaxSpeed &&
		lhs.MaxTorque == rhs.MaxTorque &&
		lhs.MaxTurnRadius == rhs.MaxTurnRadius &&
		lhs.MinFade == rhs.MinFade &&
		lhs.MiniDroneEnergyRecoverRate == rhs.MiniDroneEnergyRecoverRate &&
		lhs.MiniDroneEnergyUsePerShot == rhs.MiniDroneEnergyUsePerShot &&
		lhs.MiniDroneShotDelay == rhs.MiniDroneShotDelay &&
		lhs.MiniDroneShotMaxAngle == rhs.MiniDroneShotMaxAngle &&
		lhs.MiningRandomProbability == rhs.MiningRandomProbability &&
		lhs.MinRideSize == rhs.MinRideSize &&
		lhs.MinScaleForNavMap == rhs.MinScaleForNavMap &&
		lhs.MinWaterSpawnDepth == rhs.MinWaterSpawnDepth &&
		lhs.NavMapLookAhead == rhs.NavMapLookAhead &&
		lhs.NumCreaturesRequiredForDiscoveryMission == rhs.NumCreaturesRequiredForDiscoveryMission &&
		lhs.NumWeirdCreaturesRequiredForDiscoveryMission == rhs.NumWeirdCreaturesRequiredForDiscoveryMission &&
		lhs.PassiveFleePlayerDistance == rhs.PassiveFleePlayerDistance &&
		lhs.PathOverestimate == rhs.PathOverestimate &&
		lhs.PatrolGradientFactor == rhs.PatrolGradientFactor &&
		lhs.PatrolHeightOffset == rhs.PatrolHeightOffset &&
		lhs.PatrolMaxDist == rhs.PatrolMaxDist &&
		lhs.PatrolMinDist == rhs.PatrolMinDist &&
		lhs.PatrolSwitchMinTime == rhs.PatrolSwitchMinTime &&
		lhs.PauseBetweenCreatureSpawnRequests == rhs.PauseBetweenCreatureSpawnRequests &&
		lhs.PelvisIkStrength == rhs.PelvisIkStrength &&
		lhs.PercentagePlayerPredators == rhs.PercentagePlayerPredators &&
		lhs.PerceptionUpdateRate == rhs.PerceptionUpdateRate &&
		lhs.PetAccessoryMoodDisplayThreshold == rhs.PetAccessoryMoodDisplayThreshold &&
		lhs.PetAccessoryStateInterval == rhs.PetAccessoryStateInterval &&
		lhs.PetAnimSpeedBoostSmallerThan == rhs.PetAnimSpeedBoostSmallerThan &&
		lhs.PetAnimSpeedBoostStrength == rhs.PetAnimSpeedBoostStrength &&
		lhs.PetAnimSpeedMax == rhs.PetAnimSpeedMax &&
		lhs.PetAnimSpeedMin == rhs.PetAnimSpeedMin &&
		lhs.PetChatCooldown == rhs.PetChatCooldown &&
		lhs.PetChatUseTraitTemplateChance == rhs.PetChatUseTraitTemplateChance &&
		lhs.PetEffectSpawnOffsetHuge == rhs.PetEffectSpawnOffsetHuge &&
		lhs.PetEffectSpawnOffsetLarge == rhs.PetEffectSpawnOffsetLarge &&
		lhs.PetEffectSpawnOffsetMed == rhs.PetEffectSpawnOffsetMed &&
		lhs.PetEffectSpawnOffsetSmall == rhs.PetEffectSpawnOffsetSmall &&
		lhs.PetEggAccessoryChanceModifier == rhs.PetEggAccessoryChanceModifier &&
		lhs.PetEggColourChanceModifier == rhs.PetEggColourChanceModifier &&
		lhs.PetEggFirstEggDelay == rhs.PetEggFirstEggDelay &&
		lhs.PetEggHatchColourChangeChance == rhs.PetEggHatchColourChangeChance &&
		lhs.PetEggHatchOffset == rhs.PetEggHatchOffset &&
		lhs.PetEggHatchScale == rhs.PetEggHatchScale &&
		lhs.PetEggHatchScaleChange == rhs.PetEggHatchScaleChange &&
		lhs.PetEggHatchTraitChange == rhs.PetEggHatchTraitChange &&
		lhs.PetEggLayingDuration == rhs.PetEggLayingDuration &&
		lhs.PetEggLayingInterval == rhs.PetEggLayingInterval &&
		lhs.PetEggMaxAccessoriesChangeChance == rhs.PetEggMaxAccessoriesChangeChance &&
		lhs.PetEggMaxColourChangeChance == rhs.PetEggMaxColourChangeChance &&
		lhs.PetEggMaxDistStep == rhs.PetEggMaxDistStep &&
		lhs.PetEggMaxHungry == rhs.PetEggMaxHungry &&
		lhs.PetEggMaxLonely == rhs.PetEggMaxLonely &&
		lhs.PetEggMaxOverdosage == rhs.PetEggMaxOverdosage &&
		lhs.PetEggMaxTopDescriptorChangeChance == rhs.PetEggMaxTopDescriptorChangeChance &&
		lhs.PetEggMinDistStep == rhs.PetEggMinDistStep &&
		lhs.PetEggMinGrowthToLay == rhs.PetEggMinGrowthToLay &&
		lhs.PetEggModificationItemLimit == rhs.PetEggModificationItemLimit &&
		lhs.PetEggModificationTime == rhs.PetEggModificationTime &&
		lhs.PetEggOverdosageModifier == rhs.PetEggOverdosageModifier &&
		lhs.PetEggScaleRangeMax == rhs.PetEggScaleRangeMax &&
		lhs.PetEggScaleRangeModifier == rhs.PetEggScaleRangeModifier &&
		lhs.PetEggSubstanceModifier == rhs.PetEggSubstanceModifier &&
		lhs.PetEggTraitRangeMax == rhs.PetEggTraitRangeMax &&
		lhs.PetEggTraitRangeModifier == rhs.PetEggTraitRangeModifier &&
		lhs.PetFollowRange == rhs.PetFollowRange &&
		lhs.PetFollowRunPlayerDistance == rhs.PetFollowRunPlayerDistance &&
		lhs.PetFootShakeModifier == rhs.PetFootShakeModifier &&
		lhs.PetForceBehaviour == rhs.PetForceBehaviour &&
		lhs.PetGrowthTime == rhs.PetGrowthTime &&
		lhs.PetHeartChangePerLayer == rhs.PetHeartChangePerLayer &&
		lhs.PetHeartMaxSize == rhs.PetHeartMaxSize &&
		lhs.PetHeartResponseLoopTime == rhs.PetHeartResponseLoopTime &&
		lhs.PetHeartResponseTotalTime == rhs.PetHeartResponseTotalTime &&
		lhs.PetHeelDistSwitchTimeMax == rhs.PetHeelDistSwitchTimeMax &&
		lhs.PetHeelDistSwitchTimeMin == rhs.PetHeelDistSwitchTimeMin &&
		lhs.PetHeelLateralShiftTimeMax == rhs.PetHeelLateralShiftTimeMax &&
		lhs.PetHeelLateralShiftTimeMin == rhs.PetHeelLateralShiftTimeMin &&
		lhs.PetHeelPosSpringTime == rhs.PetHeelPosSpringTime &&
		lhs.PetIncubationTime == rhs.PetIncubationTime &&
		lhs.PetInteractBaseRange == rhs.PetInteractBaseRange &&
		lhs.PetInteractionLightHeight == rhs.PetInteractionLightHeight &&
		lhs.PetInteractionLightIntensityMax == rhs.PetInteractionLightIntensityMax &&
		lhs.PetInteractionLightIntensityMin == rhs.PetInteractionLightIntensityMin &&
		lhs.PetInteractTurnToFaceMinAngle == rhs.PetInteractTurnToFaceMinAngle &&
		lhs.PetLastActionReportTime == rhs.PetLastActionReportTime &&
		lhs.PetMaxSizeOffPlanet == rhs.PetMaxSizeOffPlanet &&
		lhs.PetMaxSummonDistance == rhs.PetMaxSummonDistance &&
		lhs.PetMaxTurnRad == rhs.PetMaxTurnRad &&
		lhs.PetMinSummonDistance == rhs.PetMinSummonDistance &&
		lhs.PetMinTrust == rhs.PetMinTrust &&
		lhs.PetMinTurnRad == rhs.PetMinTurnRad &&
		lhs.PetMoodCurvePower == rhs.PetMoodCurvePower &&
		lhs.PetMoodSmoothTime == rhs.PetMoodSmoothTime &&
		lhs.PetNavRadForMaxTurn == rhs.PetNavRadForMaxTurn &&
		lhs.PetNavRadForMinTurn == rhs.PetNavRadForMinTurn &&
		lhs.PetOrderMaxRange == rhs.PetOrderMaxRange &&
		lhs.PetOrderMinRange == rhs.PetOrderMinRange &&
		lhs.PetPlayerSpeedSmoothTime == rhs.PetPlayerSpeedSmoothTime &&
		lhs.PetRadialCentre == rhs.PetRadialCentre &&
		lhs.PetRadialPulseMul == rhs.PetRadialPulseMul &&
		lhs.PetRadialPulseTime == rhs.PetRadialPulseTime &&
		lhs.PetRadialRadius == rhs.PetRadialRadius &&
		lhs.PetRadialWidth == rhs.PetRadialWidth &&
		lhs.PetRunAtHeelDistMax == rhs.PetRunAtHeelDistMax &&
		lhs.PetRunAtHeelDistMin == rhs.PetRunAtHeelDistMin &&
		lhs.PetRunAtHeelLateralShiftMax == rhs.PetRunAtHeelLateralShiftMax &&
		lhs.PetRunAtHeelLateralShiftMin == rhs.PetRunAtHeelLateralShiftMin &&
		lhs.PetSlotsUnlockedByDefault == rhs.PetSlotsUnlockedByDefault &&
		lhs.PetStickySideBiasAngle == rhs.PetStickySideBiasAngle &&
		lhs.PetSummonRotation == rhs.PetSummonRotation &&
		lhs.PetTeleportDistOffPlanet == rhs.PetTeleportDistOffPlanet &&
		lhs.PetTeleportDistOnPlanet == rhs.PetTeleportDistOnPlanet &&
		lhs.PetTeleportEffectTime == rhs.PetTeleportEffectTime &&
		lhs.PetThrowArcRange == rhs.PetThrowArcRange &&
		lhs.PetTickleChatChance == rhs.PetTickleChatChance &&
		lhs.PetTreatChatChance == rhs.PetTreatChatChance &&
		lhs.PetTrustChangeInterval == rhs.PetTrustChangeInterval &&
		lhs.PetTrustDecreaseStep == rhs.PetTrustDecreaseStep &&
		lhs.PetTrustDecreaseThreshold == rhs.PetTrustDecreaseThreshold &&
		lhs.PetTrustIncreaseStep == rhs.PetTrustIncreaseStep &&
		lhs.PetTrustIncreaseThreshold == rhs.PetTrustIncreaseThreshold &&
		lhs.PetTrustOnAdoption == rhs.PetTrustOnAdoption &&
		lhs.PetTrustOnHatch == rhs.PetTrustOnHatch &&
		lhs.PetWalkAtHeelChanceDevoted == rhs.PetWalkAtHeelChanceDevoted &&
		lhs.PetWalkAtHeelChanceIndependent == rhs.PetWalkAtHeelChanceIndependent &&
		lhs.PetWalkAtHeelDistMax == rhs.PetWalkAtHeelDistMax &&
		lhs.PetWalkAtHeelDistMin == rhs.PetWalkAtHeelDistMin &&
		lhs.PetWalkAtHeelLateralShift == rhs.PetWalkAtHeelLateralShift &&
		lhs.PlayerBirdDistance == rhs.PlayerBirdDistance &&
		lhs.PlayerDamageTransferScale == rhs.PlayerDamageTransferScale &&
		lhs.PlayerPredatorBoredomDistance == rhs.PlayerPredatorBoredomDistance &&
		lhs.PlayerPredatorHealthModifier == rhs.PlayerPredatorHealthModifier &&
		lhs.PlayerPredatorRegainInterestTime == rhs.PlayerPredatorRegainInterestTime &&
		lhs.PostRideMoveTime == rhs.PostRideMoveTime &&
		lhs.PredatorApproachTime == rhs.PredatorApproachTime &&
		lhs.PredatorBoredomDistance == rhs.PredatorBoredomDistance &&
		lhs.PredatorChargeDist == rhs.PredatorChargeDist &&
		lhs.PredatorChargeDistScale == rhs.PredatorChargeDistScale &&
		lhs.PredatorEnergyRecoverRate == rhs.PredatorEnergyRecoverRate &&
		lhs.PredatorEnergyUseChasing == rhs.PredatorEnergyUseChasing &&
		lhs.PredatorFishPerceptionDistance == rhs.PredatorFishPerceptionDistance &&
		lhs.PredatorHugeHealth == rhs.PredatorHugeHealth &&
		lhs.PredatorLargeHealth == rhs.PredatorLargeHealth &&
		lhs.PredatorMedHealth == rhs.PredatorMedHealth &&
		lhs.PredatorNoticePauseTime == rhs.PredatorNoticePauseTime &&
		lhs.PredatorPerceptionDistance == rhs.PredatorPerceptionDistance &&
		lhs.PredatorRegainInterestTime == rhs.PredatorRegainInterestTime &&
		lhs.PredatorRoarProbAfterHit == rhs.PredatorRoarProbAfterHit &&
		lhs.PredatorRoarProbAfterMiss == rhs.PredatorRoarProbAfterMiss &&
		lhs.PredatorRunAwayDist == rhs.PredatorRunAwayDist &&
		lhs.PredatorRunAwayHealthPercent == rhs.PredatorRunAwayHealthPercent &&
		lhs.PredatorRunMoveSpeed == rhs.PredatorRunMoveSpeed &&
		lhs.PredatorSmallHealth == rhs.PredatorSmallHealth &&
		lhs.PredatorSpeedMultiplier == rhs.PredatorSpeedMultiplier &&
		lhs.PredatorStealthDist == rhs.PredatorStealthDist &&
		lhs.PredatorTrotMoveSpeed == rhs.PredatorTrotMoveSpeed &&
		lhs.PredatorWalkMoveSpeed == rhs.PredatorWalkMoveSpeed &&
		lhs.QueenHealthLevelMul == rhs.QueenHealthLevelMul &&
		lhs.RagdollConeLimit == rhs.RagdollConeLimit &&
		lhs.RagdollDamping == rhs.RagdollDamping &&
		lhs.RagdollMotorFadeEnd == rhs.RagdollMotorFadeEnd &&
		lhs.RagdollMotorFadeStart == rhs.RagdollMotorFadeStart &&
		lhs.RagdollTau == rhs.RagdollTau &&
		lhs.RagdollTwistLimit == rhs.RagdollTwistLimit &&
		lhs.RecoverHealthTime == rhs.RecoverHealthTime &&
		lhs.RemoteSpawnFadeInDelay == rhs.RemoteSpawnFadeInDelay &&
		lhs.RepelAmount == rhs.RepelAmount &&
		lhs.RepelRange == rhs.RepelRange &&
		lhs.ResourceSpawnTime == rhs.ResourceSpawnTime &&
		lhs.RideIdleTime == rhs.RideIdleTime &&
		lhs.RiderLeanTime == rhs.RiderLeanTime &&
		lhs.RideSpeedChangeTime == rhs.RideSpeedChangeTime &&
		lhs.RideSpeedFast == rhs.RideSpeedFast &&
		lhs.RideSpeedSlow == rhs.RideSpeedSlow &&
		lhs.RidingFirstPersonOffsetFwd == rhs.RidingFirstPersonOffsetFwd &&
		lhs.RidingFirstPersonOffsetUp == rhs.RidingFirstPersonOffsetUp &&
		lhs.RidingReplicationRangeMultiplier == rhs.RidingReplicationRangeMultiplier &&
		lhs.RidingRollAdjustMaxAngle == rhs.RidingRollAdjustMaxAngle &&
		lhs.RidingRollMaxAngleAt == rhs.RidingRollMaxAngleAt &&
		lhs.RidingSteerWeight == rhs.RidingSteerWeight &&
		lhs.RockTransformGlobalChance == rhs.RockTransformGlobalChance &&
		lhs.RoutineOffset == rhs.RoutineOffset &&
		lhs.RoutineSpeed == rhs.RoutineSpeed &&
		lhs.SandWormChangeDirectionTime == rhs.SandWormChangeDirectionTime &&
		lhs.SandWormDespawnDist == rhs.SandWormDespawnDist &&
		lhs.SandWormJumpHeight == rhs.SandWormJumpHeight &&
		lhs.SandWormJumpTime == rhs.SandWormJumpTime &&
		lhs.SandWormMaxHeightAdjust == rhs.SandWormMaxHeightAdjust &&
		lhs.SandWormMaxJumps == rhs.SandWormMaxJumps &&
		lhs.SandWormMaxSteer == rhs.SandWormMaxSteer &&
		lhs.SandWormSpawnChanceInfested == rhs.SandWormSpawnChanceInfested &&
		lhs.SandWormSpawnChanceMax == rhs.SandWormSpawnChanceMax &&
		lhs.SandWormSpawnChanceMin == rhs.SandWormSpawnChanceMin &&
		lhs.SandWormSpawnTimer == rhs.SandWormSpawnTimer &&
		lhs.SandWormSteerAdjustTime == rhs.SandWormSteerAdjustTime &&
		lhs.SandWormSubmergeDepth == rhs.SandWormSubmergeDepth &&
		lhs.SandWormSubmergeTime == rhs.SandWormSubmergeTime &&
		lhs.SandWormSurfaceTime == rhs.SandWormSurfaceTime &&
		lhs.SceneTerrainSpawnMinDistance == rhs.SceneTerrainSpawnMinDistance &&
		lhs.ScuttlerHealth == rhs.ScuttlerHealth &&
		lhs.ScuttlerIdleTimeMax == rhs.ScuttlerIdleTimeMax &&
		lhs.ScuttlerIdleTimeMin == rhs.ScuttlerIdleTimeMin &&
		lhs.ScuttlerInitialNoAttackTime == rhs.ScuttlerInitialNoAttackTime &&
		lhs.ScuttlerMoveTimeMax == rhs.ScuttlerMoveTimeMax &&
		lhs.ScuttlerMoveTimeMin == rhs.ScuttlerMoveTimeMin &&
		lhs.ScuttlerSpitChargeTime == rhs.ScuttlerSpitChargeTime &&
		lhs.ScuttlerSpitDelay == rhs.ScuttlerSpitDelay &&
		lhs.ScuttlerZigZagStrength == rhs.ScuttlerZigZagStrength &&
		lhs.ScuttlerZigZagTimeMax == rhs.ScuttlerZigZagTimeMax &&
		lhs.ScuttlerZigZagTimeMin == rhs.ScuttlerZigZagTimeMin &&
		lhs.SearchItemDistance == rhs.SearchItemDistance &&
		lhs.SearchItemFrequency == rhs.SearchItemFrequency &&
		lhs.SearchItemGiveUpDistance == rhs.SearchItemGiveUpDistance &&
		lhs.SearchItemGiveUpTime == rhs.SearchItemGiveUpTime &&
		lhs.SearchItemNotifyTime == rhs.SearchItemNotifyTime &&
		lhs.SearchSpawnRandomItemProbability == rhs.SearchSpawnRandomItemProbability &&
		lhs.SharkAlignSpeed == rhs.SharkAlignSpeed &&
		lhs.SharkAlongPathSpeed == rhs.SharkAlongPathSpeed &&
		lhs.SharkAttackAccel == rhs.SharkAttackAccel &&
		lhs.SharkAttackSpeed == rhs.SharkAttackSpeed &&
		lhs.SharkGetToPathSpeed == rhs.SharkGetToPathSpeed &&
		lhs.SharkPatrolEnd == rhs.SharkPatrolEnd &&
		lhs.SharkPatrolRadius == rhs.SharkPatrolRadius &&
		lhs.SharkPatrolSpeed == rhs.SharkPatrolSpeed &&
		lhs.SharkToPathYDamp == rhs.SharkToPathYDamp &&
		lhs.ShieldFadeTime == rhs.ShieldFadeTime &&
		lhs.SmallCreatureAvoidPlayerDistance == rhs.SmallCreatureAvoidPlayerDistance &&
		lhs.SmallCreatureFleePlayerDistance == rhs.SmallCreatureFleePlayerDistance &&
		lhs.SmallCreaturePerceptionDistance == rhs.SmallCreaturePerceptionDistance &&
		lhs.SoftenAvoidanceRadiusMod == rhs.SoftenAvoidanceRadiusMod &&
		lhs.SpawnCameraAngleCos == rhs.SpawnCameraAngleCos &&
		lhs.SpawnDistanceModifierForUnderwater == rhs.SpawnDistanceModifierForUnderwater &&
		lhs.SpawnDistAtMaxSize == rhs.SpawnDistAtMaxSize &&
		lhs.SpawnDistAtMinSize == rhs.SpawnDistAtMinSize &&
		lhs.SpawnMinDistPercentage == rhs.SpawnMinDistPercentage &&
		lhs.SpawnOnscreenDist == rhs.SpawnOnscreenDist &&
		lhs.SpawnsAvoidBaseMultiplier == rhs.SpawnsAvoidBaseMultiplier &&
		lhs.SpookBossHealth == rhs.SpookBossHealth &&
		lhs.SpookFiendColourInterpTime == rhs.SpookFiendColourInterpTime &&
		lhs.SpookFiendFastSwimSpeed == rhs.SpookFiendFastSwimSpeed &&
		lhs.SpookSquidHealth == rhs.SpookSquidHealth &&
		lhs.SteeringUpdateRate == rhs.SteeringUpdateRate &&
		lhs.StickToGroundCastBegin == rhs.StickToGroundCastBegin &&
		lhs.StickToGroundCastEnd == rhs.StickToGroundCastEnd &&
		lhs.StickToGroundSpeed == rhs.StickToGroundSpeed &&
		lhs.SwarmBrakingForce == rhs.SwarmBrakingForce &&
		lhs.SwarmMoveYFactor == rhs.SwarmMoveYFactor &&
		lhs.TargetReachedDistance == rhs.TargetReachedDistance &&
		lhs.TargetSearchTimeout == rhs.TargetSearchTimeout &&
		lhs.TrailHalfLife == rhs.TrailHalfLife &&
		lhs.TurnInPlaceIdleTime == rhs.TurnInPlaceIdleTime &&
		lhs.TurnInPlaceMaxAngle == rhs.TurnInPlaceMaxAngle &&
		lhs.TurnInPlaceMaxSpeed == rhs.TurnInPlaceMaxSpeed &&
		lhs.TurnInPlaceMaxSpeedIndoor == rhs.TurnInPlaceMaxSpeedIndoor &&
		lhs.TurnInPlaceMinTime == rhs.TurnInPlaceMinTime &&
		lhs.TurnRadiusMultiplier == rhs.TurnRadiusMultiplier &&
		lhs.TurnSlowAreaCos == rhs.TurnSlowAreaCos &&
		lhs.VelocityAlignSpeed == rhs.VelocityAlignSpeed &&
		lhs.VelocityAlignStrength == rhs.VelocityAlignStrength &&
		lhs.VelocityAlignYFactorMax == rhs.VelocityAlignYFactorMax &&
		lhs.VelocityAlignYFactorMin == rhs.VelocityAlignYFactorMin &&
		lhs.WaterDepthSizeScalingMaxDepth == rhs.WaterDepthSizeScalingMaxDepth &&
		lhs.WaterDepthSizeScalingMaxScale == rhs.WaterDepthSizeScalingMaxScale &&
		lhs.WaterDepthSizeScalingMinDepth == rhs.WaterDepthSizeScalingMinDepth &&
		lhs.WaterDepthSizeScalingMinScale == rhs.WaterDepthSizeScalingMinScale &&
		lhs.WaterSpawnOffset == rhs.WaterSpawnOffset &&
		lhs.WeaponRepelAmount == rhs.WeaponRepelAmount &&
		lhs.WeaponRepelRange == rhs.WeaponRepelRange &&
		std::equal(std::begin(lhs.TempermentDescriptions), std::end(lhs.TempermentDescriptions), std::begin(rhs.TempermentDescriptions)) &&
		std::equal(std::begin(lhs.DietDescriptions), std::end(lhs.DietDescriptions), std::begin(rhs.DietDescriptions)) &&
		std::equal(std::begin(lhs.WaterDietDescriptions), std::end(lhs.WaterDietDescriptions), std::begin(rhs.WaterDietDescriptions)) &&
		lhs.AggressiveSharks == rhs.AggressiveSharks &&
		lhs.AllBaitIsBasic == rhs.AllBaitIsBasic &&
		lhs.AllowSleeping == rhs.AllowSleeping &&
		lhs.AllowSpawningOnscreen == rhs.AllowSpawningOnscreen &&
		lhs.CanAlwaysLayEgg == rhs.CanAlwaysLayEgg &&
		lhs.CreatureInteractWithoutRaycasts == rhs.CreatureInteractWithoutRaycasts &&
		lhs.CreatureRideDirectControl == rhs.CreatureRideDirectControl &&
		lhs.DebugDrawTrails == rhs.DebugDrawTrails &&
		lhs.DebugSearch == rhs.DebugSearch &&
		lhs.DetailAnimPlayWhileWalking == rhs.DetailAnimPlayWhileWalking &&
		lhs.DrawRoutineFollowDebug == rhs.DrawRoutineFollowDebug &&
		lhs.DrawRoutineInfo == rhs.DrawRoutineInfo &&
		lhs.EnableFlyingSnakeTails == rhs.EnableFlyingSnakeTails &&
		lhs.EnableMPCreatureRide == rhs.EnableMPCreatureRide &&
		lhs.EnableNewStuff == rhs.EnableNewStuff &&
		lhs.EnableTrailIk == rhs.EnableTrailIk &&
		lhs.EnableVRCreatureRide == rhs.EnableVRCreatureRide &&
		lhs.FiendOnscreenMarkers == rhs.FiendOnscreenMarkers &&
		lhs.FiendsCanAttack == rhs.FiendsCanAttack &&
		lhs.ForceShowDebugTrails == rhs.ForceShowDebugTrails &&
		lhs.ForceStatic == rhs.ForceStatic &&
		lhs.InstantCreatureRide == rhs.InstantCreatureRide &&
		lhs.IsHurtingCreaturesACrime == rhs.IsHurtingCreaturesACrime &&
		lhs.PetAnimTest == rhs.PetAnimTest &&
		lhs.PetCanSummonOnFreighter == rhs.PetCanSummonOnFreighter &&
		lhs.PetForceSummonFromEgg == rhs.PetForceSummonFromEgg &&
		lhs.PetsShowTraitClassesAsWords == rhs.PetsShowTraitClassesAsWords &&
		lhs.PiedPiper == rhs.PiedPiper &&
		lhs.ProcessPendingSpawnRequests == rhs.ProcessPendingSpawnRequests &&
		lhs.RidingPositionTest == rhs.RidingPositionTest &&
		lhs.ScuttlersCanAttack == rhs.ScuttlersCanAttack &&
		lhs.ShowScale == rhs.ShowScale &&
		lhs.StaticCreatureRide == rhs.StaticCreatureRide &&
		lhs.UncapSpawningforVideo == rhs.UncapSpawningforVideo &&
		lhs.UseCreatureAdoptOSD == rhs.UseCreatureAdoptOSD &&
		lhs.UsePetTeleportEffect == rhs.UsePetTeleportEffect &&
		lhs.WaterDepthSizeScalingCurve == rhs.WaterDepthSizeScalingCurve;
	}
};

//Dependency: Colour
struct GcDebugEditorGlobals
{
	NMS::Colour AtAxisColour;
	NMS::Colour CentreHandleColour;
	NMS::Colour RightAxisColour;
	NMS::Colour SelectedAxisTint;
	NMS::Colour TransformingAxisTint;
	NMS::Colour UpAxisColour;
	float AxisLength;
	float AxisThickness;
	float CameraDollySpeed;
	float CameraPanSpeed;
	float CameraRotateSpeed;
	float CentrePickingSize;
	float FramingMinOffset;
	float FramingOffsetFactor;
	float LinePickingSize;
	float MaxCameraPivotOffset;
	float MinCameraPivotOffset;
	float PlaneHandleOffset;
	float PlaneHandleSize;
	float ScaleHandleSize;
	float SelectedAxisTintStrength;
	float TransformArrowLength;
	float TransformArrowRadius;
	float TransformingAxisTintStrength;
	float TransformRotationSpeed;

	friend bool operator==(const GcDebugEditorGlobals& lhs, const GcDebugEditorGlobals& rhs) 
	{
		return lhs.AtAxisColour == rhs.AtAxisColour &&
		lhs.CentreHandleColour == rhs.CentreHandleColour &&
		lhs.RightAxisColour == rhs.RightAxisColour &&
		lhs.SelectedAxisTint == rhs.SelectedAxisTint &&
		lhs.TransformingAxisTint == rhs.TransformingAxisTint &&
		lhs.UpAxisColour == rhs.UpAxisColour &&
		lhs.AxisLength == rhs.AxisLength &&
		lhs.AxisThickness == rhs.AxisThickness &&
		lhs.CameraDollySpeed == rhs.CameraDollySpeed &&
		lhs.CameraPanSpeed == rhs.CameraPanSpeed &&
		lhs.CameraRotateSpeed == rhs.CameraRotateSpeed &&
		lhs.CentrePickingSize == rhs.CentrePickingSize &&
		lhs.FramingMinOffset == rhs.FramingMinOffset &&
		lhs.FramingOffsetFactor == rhs.FramingOffsetFactor &&
		lhs.LinePickingSize == rhs.LinePickingSize &&
		lhs.MaxCameraPivotOffset == rhs.MaxCameraPivotOffset &&
		lhs.MinCameraPivotOffset == rhs.MinCameraPivotOffset &&
		lhs.PlaneHandleOffset == rhs.PlaneHandleOffset &&
		lhs.PlaneHandleSize == rhs.PlaneHandleSize &&
		lhs.ScaleHandleSize == rhs.ScaleHandleSize &&
		lhs.SelectedAxisTintStrength == rhs.SelectedAxisTintStrength &&
		lhs.TransformArrowLength == rhs.TransformArrowLength &&
		lhs.TransformArrowRadius == rhs.TransformArrowRadius &&
		lhs.TransformingAxisTintStrength == rhs.TransformingAxisTintStrength &&
		lhs.TransformRotationSpeed == rhs.TransformRotationSpeed;
	}
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkGlobals
{
	enum class TrialStatusEnum : uint32_t
	{
		SystemDefault = 0,
		ForceTrial = 1,
		ForceFullGame = 2,
	};

	enum class GameWindowModeEnum : uint32_t
	{
		Bordered = 0,
		Borderless = 1,
		Fullscreen = 2,
		Maximised = 3,
		Minimised = 4,
	};

	enum class ForceGPUPresetToEnum : uint32_t
	{
		PC_Low = 0,
		PC_Medium = 1,
		PC_High = 2,
		PC_Ultra = 3,
		PS4 = 4,
		PS4VR = 5,
		PS4Pro = 6,
		PS4ProVR = 7,
		XB1 = 8,
		XB1X = 9,
		Oberon = 10,
		MacOS = 11,
		iOS = 12,
	};

	enum class EnabledChannelsEnum : uint32_t
	{
		None = 0,
		Default = 1,
		Note = 2,
		Error = 4,
		Warning = 8,
		Info = 16,
		Alt = 32,
		AltWarn = 64,
	};

	enum class AssertsLevelEnum : uint32_t
	{
		Disabled = 0,
		Ignored = 1,
		Skipped = 2,
		Enabled = 3,
	};

	NMS_Toolkit::TkGlobals::AssertsLevelEnum AssertsLevel;
	NMS_Toolkit::TkGlobals::EnabledChannelsEnum EnabledChannels;
	NMS_Toolkit::TkGlobals::ForceGPUPresetToEnum ForceGPUPresetTo;
	int32_t FrameFlipRateDefault;
	int32_t FrameFlipRateGame;
	int32_t FrameFlipRateLoad;
	NMS_Toolkit::TkGlobals::GameWindowModeEnum GameWindowMode;
	int32_t HighlightPlacementIndex;
	int32_t HmdEyeBufferHeight;
	int32_t HmdEyeBufferWidth;
	float HmdEyeScalePos;
	float HmdHeadScalePos;
	float HmdImmersionFactor;
	int32_t HmdMonitor;
	int32_t HmdPreviewScale;
	int32_t LoadBalanceTimeoutMS;
	int32_t LODOverride;
	float MaxFrameRate;
	int32_t Monitor;
	int32_t OctahedralImpostersViewCount;
	int32_t PSVR2LoadBalanceTimeoutMS;
	float ScratchpadInstanceScale;
	int32_t ScratchpadInstancesCap;
	float ScratchpadInstanceSpacing;
	int32_t ScratchpadInstancesPerSide;
	float ScratchpadInstancesRandomness;
	int32_t ScratchpadModelSeed;
	int32_t ScreenHeight;
	int32_t ScreenWidth;
	int32_t TiledWindowsIndex;
	int32_t TiledWindowsSplitCount;
	float TitlebarMenuOffset;
	float TouchScreenSwipeTime;
	float TouchScreenSwipeTravelThreshold;
	NMS_Toolkit::TkGlobals::TrialStatusEnum TrialStatus;
	float UpdatePeriod;
	float UpdatePeriodSteam;
	float VoiceUpdatePeriod;
	float VoiceUpdatePeriodSteam;
	int32_t VRLoadBalanceTimeoutMS;
	int32_t WindowPositionX;
	int32_t WindowPositionY;
	float WwiseVibrationMultiplierPrimary;
	float WwiseVibrationMultiplierSecondary;
	NMS::NMSString0x100 EditorLayout;
	NMS::NMSString0x100 ExcludeLogFilter;
	NMS::NMSString0x100 IncludeLogFilter;
	NMS::NMSString0x100 ScratchpadModel;
	bool AllowInPlaceNGuiElementRenaming;
	bool AutoTabNewlyOpenedWindows;
	bool ColourLODs;
	bool ColourVertexDensity;
	bool CompressImposterTextures;
	bool CrashOnFailedCriticalAssertion;
	bool DefaultSelectIgnoreAsserts;
	bool DisableMultiplayer;
	bool DisableResScaling;
	bool DisableSwitchingAwayFromPad;
	bool DisableUndergrowthInstanceRendering;
	bool DisableVSync;
	bool EnableGpuBreadcrumbs;
	bool EnableNvidiaAftermath;
	bool EnableRenderdoc;
	bool EnableShaderReload;
	bool EnableVirtualTouchScreen;
	bool EnableZstdSaves;
	bool FavouritesAndUndoEnabledByDefault;
	bool FilterTranslatedTextWhenSearching;
	bool ForceGPUPreset;
	bool FreezeCulling;
	bool HideRenderdocOverlay;
	bool HmdDistortionPassthru;
	bool HmdEnable;
	bool HmdFoveated;
	bool HmdStereoRender;
	bool HmdTracking;
	bool LoadRelativeEditorLayouts;
	bool LogInputChanges;
	bool LogInputSetup;
	bool MakeUnusedUniformsNaN;
	bool MinGPUMode;
	bool OctahedralImpostersDisable;
	bool OctahedralImpostersEnable;
	bool OctahedralImpostersViewFromSpace;
	bool SampleCollisionWithCamera;
	bool ScratchpadInstanced;
	bool ScratchpadWind;
	bool ShowPlayerCollisions;
	bool SimulateDisabledParticleRefractions;
	bool SmokeTestSmokeBotAutoStart;
	bool UseDebugScreenSettings;
	bool UseHeavyAir;

	friend bool operator==(const TkGlobals& lhs, const TkGlobals& rhs) 
	{
		return lhs.AssertsLevel == rhs.AssertsLevel &&
		lhs.EnabledChannels == rhs.EnabledChannels &&
		lhs.ForceGPUPresetTo == rhs.ForceGPUPresetTo &&
		lhs.FrameFlipRateDefault == rhs.FrameFlipRateDefault &&
		lhs.FrameFlipRateGame == rhs.FrameFlipRateGame &&
		lhs.FrameFlipRateLoad == rhs.FrameFlipRateLoad &&
		lhs.GameWindowMode == rhs.GameWindowMode &&
		lhs.HighlightPlacementIndex == rhs.HighlightPlacementIndex &&
		lhs.HmdEyeBufferHeight == rhs.HmdEyeBufferHeight &&
		lhs.HmdEyeBufferWidth == rhs.HmdEyeBufferWidth &&
		lhs.HmdEyeScalePos == rhs.HmdEyeScalePos &&
		lhs.HmdHeadScalePos == rhs.HmdHeadScalePos &&
		lhs.HmdImmersionFactor == rhs.HmdImmersionFactor &&
		lhs.HmdMonitor == rhs.HmdMonitor &&
		lhs.HmdPreviewScale == rhs.HmdPreviewScale &&
		lhs.LoadBalanceTimeoutMS == rhs.LoadBalanceTimeoutMS &&
		lhs.LODOverride == rhs.LODOverride &&
		lhs.MaxFrameRate == rhs.MaxFrameRate &&
		lhs.Monitor == rhs.Monitor &&
		lhs.OctahedralImpostersViewCount == rhs.OctahedralImpostersViewCount &&
		lhs.PSVR2LoadBalanceTimeoutMS == rhs.PSVR2LoadBalanceTimeoutMS &&
		lhs.ScratchpadInstanceScale == rhs.ScratchpadInstanceScale &&
		lhs.ScratchpadInstancesCap == rhs.ScratchpadInstancesCap &&
		lhs.ScratchpadInstanceSpacing == rhs.ScratchpadInstanceSpacing &&
		lhs.ScratchpadInstancesPerSide == rhs.ScratchpadInstancesPerSide &&
		lhs.ScratchpadInstancesRandomness == rhs.ScratchpadInstancesRandomness &&
		lhs.ScratchpadModelSeed == rhs.ScratchpadModelSeed &&
		lhs.ScreenHeight == rhs.ScreenHeight &&
		lhs.ScreenWidth == rhs.ScreenWidth &&
		lhs.TiledWindowsIndex == rhs.TiledWindowsIndex &&
		lhs.TiledWindowsSplitCount == rhs.TiledWindowsSplitCount &&
		lhs.TitlebarMenuOffset == rhs.TitlebarMenuOffset &&
		lhs.TouchScreenSwipeTime == rhs.TouchScreenSwipeTime &&
		lhs.TouchScreenSwipeTravelThreshold == rhs.TouchScreenSwipeTravelThreshold &&
		lhs.TrialStatus == rhs.TrialStatus &&
		lhs.UpdatePeriod == rhs.UpdatePeriod &&
		lhs.UpdatePeriodSteam == rhs.UpdatePeriodSteam &&
		lhs.VoiceUpdatePeriod == rhs.VoiceUpdatePeriod &&
		lhs.VoiceUpdatePeriodSteam == rhs.VoiceUpdatePeriodSteam &&
		lhs.VRLoadBalanceTimeoutMS == rhs.VRLoadBalanceTimeoutMS &&
		lhs.WindowPositionX == rhs.WindowPositionX &&
		lhs.WindowPositionY == rhs.WindowPositionY &&
		lhs.WwiseVibrationMultiplierPrimary == rhs.WwiseVibrationMultiplierPrimary &&
		lhs.WwiseVibrationMultiplierSecondary == rhs.WwiseVibrationMultiplierSecondary &&
		lhs.EditorLayout == rhs.EditorLayout &&
		lhs.ExcludeLogFilter == rhs.ExcludeLogFilter &&
		lhs.IncludeLogFilter == rhs.IncludeLogFilter &&
		lhs.ScratchpadModel == rhs.ScratchpadModel &&
		lhs.AllowInPlaceNGuiElementRenaming == rhs.AllowInPlaceNGuiElementRenaming &&
		lhs.AutoTabNewlyOpenedWindows == rhs.AutoTabNewlyOpenedWindows &&
		lhs.ColourLODs == rhs.ColourLODs &&
		lhs.ColourVertexDensity == rhs.ColourVertexDensity &&
		lhs.CompressImposterTextures == rhs.CompressImposterTextures &&
		lhs.CrashOnFailedCriticalAssertion == rhs.CrashOnFailedCriticalAssertion &&
		lhs.DefaultSelectIgnoreAsserts == rhs.DefaultSelectIgnoreAsserts &&
		lhs.DisableMultiplayer == rhs.DisableMultiplayer &&
		lhs.DisableResScaling == rhs.DisableResScaling &&
		lhs.DisableSwitchingAwayFromPad == rhs.DisableSwitchingAwayFromPad &&
		lhs.DisableUndergrowthInstanceRendering == rhs.DisableUndergrowthInstanceRendering &&
		lhs.DisableVSync == rhs.DisableVSync &&
		lhs.EnableGpuBreadcrumbs == rhs.EnableGpuBreadcrumbs &&
		lhs.EnableNvidiaAftermath == rhs.EnableNvidiaAftermath &&
		lhs.EnableRenderdoc == rhs.EnableRenderdoc &&
		lhs.EnableShaderReload == rhs.EnableShaderReload &&
		lhs.EnableVirtualTouchScreen == rhs.EnableVirtualTouchScreen &&
		lhs.EnableZstdSaves == rhs.EnableZstdSaves &&
		lhs.FavouritesAndUndoEnabledByDefault == rhs.FavouritesAndUndoEnabledByDefault &&
		lhs.FilterTranslatedTextWhenSearching == rhs.FilterTranslatedTextWhenSearching &&
		lhs.ForceGPUPreset == rhs.ForceGPUPreset &&
		lhs.FreezeCulling == rhs.FreezeCulling &&
		lhs.HideRenderdocOverlay == rhs.HideRenderdocOverlay &&
		lhs.HmdDistortionPassthru == rhs.HmdDistortionPassthru &&
		lhs.HmdEnable == rhs.HmdEnable &&
		lhs.HmdFoveated == rhs.HmdFoveated &&
		lhs.HmdStereoRender == rhs.HmdStereoRender &&
		lhs.HmdTracking == rhs.HmdTracking &&
		lhs.LoadRelativeEditorLayouts == rhs.LoadRelativeEditorLayouts &&
		lhs.LogInputChanges == rhs.LogInputChanges &&
		lhs.LogInputSetup == rhs.LogInputSetup &&
		lhs.MakeUnusedUniformsNaN == rhs.MakeUnusedUniformsNaN &&
		lhs.MinGPUMode == rhs.MinGPUMode &&
		lhs.OctahedralImpostersDisable == rhs.OctahedralImpostersDisable &&
		lhs.OctahedralImpostersEnable == rhs.OctahedralImpostersEnable &&
		lhs.OctahedralImpostersViewFromSpace == rhs.OctahedralImpostersViewFromSpace &&
		lhs.SampleCollisionWithCamera == rhs.SampleCollisionWithCamera &&
		lhs.ScratchpadInstanced == rhs.ScratchpadInstanced &&
		lhs.ScratchpadWind == rhs.ScratchpadWind &&
		lhs.ShowPlayerCollisions == rhs.ShowPlayerCollisions &&
		lhs.SimulateDisabledParticleRefractions == rhs.SimulateDisabledParticleRefractions &&
		lhs.SmokeTestSmokeBotAutoStart == rhs.SmokeTestSmokeBotAutoStart &&
		lhs.UseDebugScreenSettings == rhs.UseDebugScreenSettings &&
		lhs.UseHeavyAir == rhs.UseHeavyAir;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcBiomeType
//Dependency: GcBiomeSubType
//Dependency: GcSeasonTransferInventoryConfig
//Dependency: GcBaseBuildingPartStyle
//Dependency: GcGalaxyStarAnomaly
//Dependency: TkGlobals
//Dependency: GcPlanetLife
//Dependency: GcAlienRace
//Dependency: GcAlienPuzzleCategory
//Dependency: NMSString0x20
//Dependency: GcScreenFilters
//Dependency: GcGalaxyStarTypes
//Dependency: GcGameMode
//Dependency: TkLanguages
//Dependency: TkVoxelGeneratorSettingsTypes
//Dependency: VariableSizeString
//Dependency: TkWaterCondition
//Dependency: NMSString0x10
//Dependency: NMSString0x800
//Dependency: NMSString0x400
//Dependency: NMSString0x200
//Dependency: NMSString0x100
//Dependency: NMSString0x80
//Dependency: NMSString0x40
struct GcDebugOptions
{
	enum class UseBanksEnum : uint32_t
	{
		False = 0,
		True = 1,
		Default = 2,
	};

	enum class SolarSystemBootEnum : uint32_t
	{
		FromSettings = 0,
		Generate = 1,
	};

	enum class SmokeTestScenarioEnum : uint32_t
	{
		None = 0,
		TerrainSnapShotFromAltitude = 1,
		BelowCloudLayerSnapShot = 2,
		Flying = 3,
		UltraBiomeSnapShot = 4,
		Walking = 5,
		LeakDetector = 6,
		WalkingSnapshot = 7,
		ModelLoading = 8,
	};

	enum class SmokeTestCycleModeEnum : uint32_t
	{
		None = 0,
		TourPlanet = 1,
		TourSolarSystem = 2,
		TourGalaxy = 3,
		TourUDAs = 4,
		TourShortUDAs = 5,
		TourRandomWarps = 6,
	};

	enum class ShaderPreloadEnum : uint32_t
	{
		Off = 0,
		Full = 1,
	};

	enum class ServerEnvEnum : uint32_t
	{
		Default = 0,
		dev = 1,
		qa = 2,
		prodqa = 3,
		prod = 4,
		custom = 5,
		pentest = 6,
		merged = 7,
		local = 8,
	};

	enum class RecordSettingEnum : uint32_t
	{
		None = 0,
		Record = 1,
		Playback = 2,
	};

	enum class RealityModeEnum : uint32_t
	{
		LoadPreset = 0,
		Generate = 1,
	};

	enum class ProxyTypeEnum : uint32_t
	{
		None = 0,
		ManualURI = 1,
		InetProxy = 2,
	};

	enum class PlayerSpawnLocationOverrideEnum : uint32_t
	{
		None = 0,
		FromSettings = 1,
		Space = 2,
		SpaceStation = 3,
		RandomPlanet = 4,
		GameStartPlanet = 5,
		SpecificLocation = 6,
	};

	enum class GameStateModeEnum : uint32_t
	{
		LoadPreset = 0,
		UserStorage = 1,
		FreshStart = 2,
	};

	enum class BootModeEnum : uint32_t
	{
		MinimalSolarSystem = 0,
		SolarSystem = 1,
		GalaxyMap = 2,
		SmokeTest = 3,
		SmokeTestGalaxyMap = 4,
		Scratchpad = 5,
		UnitTest = 6,
	};

	enum class BootLoadDelayEnum : uint32_t
	{
		LoadAll = 0,
		WaitForPlanet = 1,
		WaitForNothing = 2,
	};

	NMS_GameComponents::GcSeasonTransferInventoryConfig SeasonTransferInventoryConfigOverride;
	NMS::VariableSizeString CrashDumpPath;
	NMS::NMSString0x10 CreateSeasonContextMaskIdOverride;
	NMS::VariableSizeString CursorTexture;
	NMS::VariableSizeString DebugFont;
	NMS::VariableSizeString DebugFontTexture;
	NMS::VariableSizeString DebugScene;
	NMS::NMSString0x10 DefaultAirCreatureTable;
	NMS::NMSString0x10 DefaultCaveCreatureTable;
	NMS::NMSString0x10 DefaultGroundCreatureTable;
	NMS::VariableSizeString DefaultSaveData;
	NMS::NMSString0x10 DefaultWaterCreatureTable;
	NMS::NMSString0x10 ForceBuilderMissionBoardMission;
	std::vector<NMS::NMSString0x20> LocTableList;
	NMS::VariableSizeString PauseTexture;
	NMS::VariableSizeString PipelineFile;
	NMS::VariableSizeString PipelineFileEditor;
	NMS::VariableSizeString PipelineFileFrontend;
	NMS::VariableSizeString PlayTexture;
	NMS::VariableSizeString RealityPresetFile;
	NMS::VariableSizeString RenderToTexture;
	NMS::VariableSizeString SceneSettings;
	NMS::VariableSizeString StepTexture;
	NMS::NMSString0x10 SwitchSeasonContextMaskIdOverride;
	uint64_t ForceTimeToEpoch;
	uint64_t OverrideAbandonedFreighterSeed;
	NMS_Toolkit::TkGlobals ToolkitGlobals;
	float _3dTextDistance;
	float _3dTextMinScale;
	NMS_GameComponents::GcBaseBuildingPartStyle AutomaticPartSpawnStyle;
	float BaseDownloadTimeout;
	uint32_t BasePayloadMultiplier;
	int32_t BootDirectlyIntoSaveSlot;
	NMS_Globals::GcDebugOptions::BootLoadDelayEnum BootLoadDelay;
	float BootLogoFadeRate;
	NMS_Globals::GcDebugOptions::BootModeEnum BootMode;
	NMS_Toolkit::TkLanguages DebugLanguage;
	float DebugMenuAlpha;
	float DebugTextLineHeight;
	float DebugTextSize;
	int32_t DebugTextureSize;
	int32_t DiscoveryAutoSyncIntervalSeconds;
	NMS_GameComponents::GcGalaxyStarAnomaly ForceAnomalyTo;
	int32_t ForceAsteroidSystemIndex;
	NMS_GameComponents::GcBiomeSubType ForceBiomeSubTypeTo;
	NMS_GameComponents::GcBiomeType ForceBiomeTo;
	NMS_GameComponents::GcAlienRace ForceBuildingRaceTo;
	NMS_GameComponents::GcPlanetLife ForceCreatureLifeLevelTo;
	int32_t ForceGrassColourIndex;
	float ForceInitialTimeOfDay;
	int32_t ForceInteractionIndex;
	NMS_GameComponents::GcAlienRace ForceInteractionRaceTo;
	NMS_GameComponents::GcPlanetLife ForceLifeLevelTo;
	NMS_GameComponents::GcAlienPuzzleCategory ForceNPCPuzzleCategory;
	NMS_GameComponents::GcScreenFilters ForceScreenFilterTo;
	float ForceSeaLevel;
	int32_t ForceSkyColourIndex;
	uint32_t ForceSkyColourSeed;
	int32_t ForceSpaceBattleLevel;
	int32_t ForceSpaceSkyColourIndex;
	NMS_GameComponents::GcGalaxyStarTypes ForceStarTypeTo;
	float ForceSunAngle;
	NMS_GameComponents::GcPlanetLife ForceTerrainSettings;
	NMS_Toolkit::TkVoxelGeneratorSettingsTypes ForceTerrainTypeTo;
	float ForceTimeOfDay;
	int32_t ForceWaterColourIndex;
	NMS_Toolkit::TkWaterCondition ForceWaterConditionTo;
	int32_t ForceWaterObjectFileIndex;
	NMS_Globals::GcDebugOptions::GameStateModeEnum GameStateMode;
	float GenerateCostAngle;
	float GenerateCostDistance;
	float GenerateCostLOD;
	float GenerateCostWait;
	int32_t GenerateFarLodBuildingDist;
	int32_t MaxNumDebugMessages;
	int32_t MoveBaseIndex;
	int32_t MultipleFingersSamePressFrameDelta;
	NMS_GameComponents::GcGameMode NewSaveGameMode;
	int32_t OverrideMatchmakingVersion;
	int32_t OverrideServerSeasonEndTime;
	int32_t OverrideServerSeasonNumber;
	float PanDeadzone;
	NMS_Globals::GcDebugOptions::PlayerSpawnLocationOverrideEnum PlayerSpawnLocationOverride;
	int32_t ProceduralModelBatchSize;
	int32_t ProceduralModelFilterMatchretryCount;
	int32_t ProceduralModelsShown;
	int32_t ProceduralModelsThumbnailSize;
	int32_t ProfilerPartIndexPhase;
	int32_t ProfilerPartIndexStride;
	int32_t ProfilerPartIteration;
	NMS_Globals::GcDebugOptions::ProxyTypeEnum ProxyType;
	NMS_Globals::GcDebugOptions::RealityModeEnum RealityMode;
	NMS_Globals::GcDebugOptions::RecordSettingEnum RecordSetting;
	int32_t RecurrenceTimeOffset;
	int32_t ScreenshotForUploadHeight;
	int32_t ScreenshotForUploadWidth;
	NMS_Globals::GcDebugOptions::ServerEnvEnum ServerEnv;
	NMS_Globals::GcDebugOptions::ShaderPreloadEnum ShaderPreload;
	int32_t ShowSpecificGraph;
	int32_t SmokeTestConfigCaptureCycles;
	float SmokeTestConfigCaptureDurationInSeconds;
	int32_t SmokeTestConfigCaptureFolderNameNumberOffset;
	int32_t SmokeTestConfigPlanetPositionCount;
	float SmokeTestConfigScenarioLength;
	float SmokeTestConfigScenarioPreambleLength;
	NMS_Globals::GcDebugOptions::SmokeTestCycleModeEnum SmokeTestCycleMode;
	NMS_Globals::GcDebugOptions::SmokeTestScenarioEnum SmokeTestScenario;
	int32_t SmokeTestSmokeBotTargetWarps;
	NMS_Globals::GcDebugOptions::SolarSystemBootEnum SolarSystemBoot;
	float SunLightScaleGgx;
	int32_t SwipeDetectionMaxFrames;
	float SwipeDetectionNormalizedTravelThreshold;
	int32_t SynergyPort;
	NMS_Globals::GcDebugOptions::UseBanksEnum UseBanks;
	float WeaponScale3P;
	uint16_t RealityGenerationIteration;
	NMS::NMSString0x800 AutoJoinUserNames;
	NMS::NMSString0x400 DebugTwitchRewards;
	NMS::NMSString0x200 LoadToBase;
	NMS::NMSString0x200 SeasonalDataOverrideFile;
	NMS::NMSString0x100 ForceHgAccount;
	NMS::NMSString0x100 ForcePlayerPosition;
	NMS::NMSString0x100 ForceUniverseAddress;
	NMS::NMSString0x100 GOGLogin;
	NMS::NMSString0x100 ShowUniverseAddressOnGalaxyMap;
	NMS::NMSString0x100 WorkingDirectory;
	NMS::NMSString0x80 AuthBaseUrl;
	NMS::NMSString0x80 ProxyURI;
	NMS::NMSString0x40 ForceBaseDownloadUser;
	NMS::NMSString0x40 OverrideSettlementOwnershipOnlineId;
	NMS::NMSString0x40 OverrideSettlementOwnershipUsername;
	NMS::NMSString0x40 ScreenshotForUploadName;
	NMS::NMSString0x20 AllowedLanguagesFile;
	NMS::NMSString0x20 AutomaticPartSpawnID;
	NMS::NMSString0x20 BaseServerPlatform;
	NMS::NMSString0x20 CrashDumpIdentifier;
	NMS::NMSString0x20 OverrideUsernameForDev;
	NMS::NMSString0x20 SaveTestingCommand;
	NMS::NMSString0x20 SmokeTestForcePlanetDetail;
	NMS::NMSString0x20 SmokeTestRunFolder;
	NMS::NMSString0x20 SynergyServer;
	bool ActiveMissionsIgnoreStartCancelConditions;
	bool AllowGalaxyMapRequests;
	bool AllowGlobalPartSnapping;
	bool AllowNGuiVR;
	bool AllowOverrideSettlementOwnership;
	bool AllowPause;
	bool AllowRobotBehaviors;
	bool AllowSavingOnAbandonedFreighters;
	bool AllSeasonMilestonesShowComplete;
	bool AllSettlementsAreCompleted;
	bool AlternateControls;
	bool AlwaysAllowFreighterInventoryAccess;
	bool AlwaysAllowShipOperations;
	bool AlwaysAllowSpookFiends;
	bool AlwaysAllowVehicleOperations;
	bool AlwaysHaveFocus;
	bool AlwaysIncludeLocalPlayerInChatMessage;
	bool AlwaysSaveGameAsClient;
	bool AlwaysShowSaveIds;
	bool AlwaysShowURI;
	bool AlwaysSpaceBattle;
	bool AutoJoinRandomGames;
	bool AutoJoinUserEnabled;
	bool AutomaticPartSpawnInactive;
	bool BaseAdmin;
	bool BlockCommunicatorSignals;
	bool BlockSettlementsNetwork;
	bool BlockSpaceBattle;
	bool BodyTurning;
	bool BootDirectlyIntoLastSave;
	bool BootMusic;
	bool CanLeaveDialogs;
	bool CertificateSecurityBypass;
	bool CheckForMissingLocStrings;
	bool ClothForceAsyncSimulationOff;
	bool ClothForceAsyncSimulationOn;
	bool ClothForcePositionExtrapolationAntiSyncWithFpsLock;
	bool ClothForcePositionExtrapolationBackOn;
	bool ClothForcePositionExtrapolationOff;
	bool ClothForcePositionExtrapolationOn;
	bool ClothForcePositionExtrapolationSyncWithFpsLock;
	bool ClothForcePositionExtrapolationUpdateOrderDependent;
	bool CompressTextures;
	bool CrashDumpFull;
	bool CrashOnF10;
	bool CreatureChatter;
	bool CreatureDrawVocals;
	bool CreatureErrors;
	bool CrossPlatformFeaturedBases;
	bool DChecksEnabled;
	bool DChecksOutputBinary;
	bool DChecksOutputFileLine;
	bool DChecksOutputJson;
	bool DebugBuildingSpawns;
	bool DebugDrawPlayerInteract;
	bool DebugGalaxyMapInQuickMenu;
	bool DebugIBL;
	bool DebugNetworkLocks;
	bool DebugPersistentInteractions;
	bool DebugSpotlights;
	bool DebugTerrainTextures;
	bool DebugThreatLevels;
	bool DeferRegionBodies;
	bool DisableAbandonedFreighterRoomsOptimisation;
	bool DisableBaseBuilding;
	bool DisableBaseBuildingLimits;
	bool DisableBasePowerRequirements;
	bool DisableClouds;
	bool DisableContinuousSaving;
	bool DisableDebugControls;
	bool DisableDiscoveryNaming;
	bool DisableFileWatcher;
	bool DisableHazards;
	bool DisableHeadConstraints;
	bool DisableInvalidSaveVersion;
	bool DisableLeftHand;
	bool DisableLimits;
	bool DisableMissionShop;
	bool DisableMonumentDownloads;
	bool DisableNPCHiddenUntilScanned;
	bool DisableNPCs;
	bool DisableOldMissions;
	bool DisablePartialStories;
	bool DisableProfanityFilter;
	bool DisableSaveSlotSorting;
	bool DisableSaveUploadRateLimits;
	bool DisableSaving;
	bool DisableSettlements;
	bool DisableShadowSwitching;
	bool DisableShipSaveDataRecovery;
	bool DisableSpaceStationSpawnOnJoin;
	bool DisableStorms;
	bool DisableVibration;
	bool DoAlienLanguage;
	bool DrawCreaturesInRoutines;
	bool DumpManifestContents;
	bool EnableAccessibleUI;
	bool EnableBaseBuildingExpandables;
	bool EnableBaseMovingOption;
	bool EnableCloudAnimation;
	bool EnableComputePost;
	bool EnableDayNightCycle;
	bool EnableDebugSceneAutoSave;
	bool EnableEvenOddRender;
	bool EnableFrontendPreload;
	bool EnableGalaxyRecolouring;
	bool EnableGgx;
	bool EnableMemoryPoolAllocPrint;
	bool EnableMomentTransparency;
	bool EnablePhotomodeVR;
	bool EnableSynergy;
	bool EnableTouchScreenDebugging;
	bool EverythingIsFree;
	bool EverythingIsKnown;
	bool EverythingIsStar;
	bool FakeHandsInMultiplayer;
	bool FastAndFrequentFleetInterventions;
	bool FastLoad;
	bool FixedFramerate;
	bool FleetDirectorAutoMode;
	bool ForceAllExhibitsToBeEditable;
	bool ForceBasicLoadScreen;
	bool ForceBinaryStar;
	bool ForceBiome;
	bool ForceBuildersAlwaysKnown;
	bool ForceBuildingRace;
	bool ForceCorruptSentinels;
	bool ForceCreatureLifeLevel;
	bool ForceDefaultCreatureFile;
	bool ForceDisableClothComponent;
	bool ForceDisableNonPlayerRagdollComponents;
	bool ForceDisableRagdollComponent;
	bool ForceDisableSplitIkOptimisation;
	bool ForceDisableSpringComponent;
	bool ForceEnableClothComponent;
	bool ForceEnableRagdollComponent;
	bool ForceEnableSplitIkOptimisation;
	bool ForceEnableSpringComponent;
	bool ForceExtremeSentinels;
	bool ForceExtremeWeather;
	bool ForceFullFeatureMode;
	bool ForceGasGiantSystem;
	bool ForceGiantSystem;
	bool ForceInitialShip;
	bool ForceInitialWeapon;
	bool ForceInteractionToSettings;
	bool ForceLifeLevel;
	bool ForceLoadAllWeather;
	bool ForceNexusInQuickMenu;
	bool ForcePirateSystem;
	bool ForcePlanetsToHaveNoCaves;
	bool ForcePlanetsToHaveNoNoiseLayers;
	bool ForcePlanetsToHaveNoTerrainFeatures;
	bool ForcePlanetsToHaveNoWater;
	bool ForcePlanetsToHaveWater;
	bool ForcePrimeTerrain;
	bool ForcePurpleSystemsToAlwaysBirth;
	bool ForcePurpleSystemsVisibleOnLoad;
	bool ForceRareAsteroidSystem;
	bool ForceScanEventsToGoPrime;
	bool ForceScreenFilter;
	bool ForceSmallLobby;
	bool ForceSpaceSkyColourRare;
	bool ForceStarType;
	bool ForceSunDirectionFromPhotoMode;
	bool ForceTernaryStar;
	bool ForceTerrainType;
	bool ForceTgaDlc;
	bool ForceTinyLobby;
	bool ForceTranslateAllAlienText;
	bool ForceWaterCondition;
	bool FormatDownloadStorageAreaOnBoot;
	bool GodMode;
	bool GraphCommandBuffer;
	bool GraphFPS;
	bool GraphGeneration;
	bool GraphTexStreaming;
	bool HangOnCrash;
	bool HmdFrameShiftEnabled;
	bool HmdUseSolidGuiPointer;
	bool HotReloadModGlobals;
	bool IgnoreFreighterSpawnWarpRequirement;
	bool IgnoreMissionRank;
	bool IgnoreSteamDev;
	bool IgnoreTransactionTimeouts;
	bool InfiniteInteractions;
	bool InfiniteStamina;
	bool InstanceCollision;
	bool InteractionsAllwaysGivesTech;
	bool LimitGlobalBodies;
	bool LimitGlobalInstances;
	bool LimitPerRegionBodies;
	bool LimitPerRegionInstances;
	bool LoadMissions;
	bool LoadShaderSourceIfRenderdocEnabled;
	bool LockAllTitles;
	bool LogMissingLocalisedText;
	bool MapWarpCheckIgnoreDrive;
	bool MapWarpCheckIgnoreFuel;
	bool MaximumFreighterSpawns;
	bool MemCsv;
	bool MissionMessageLoggingEnabled;
	bool MissionNGUIShowsConditionResults;
	bool MissionNGUIShowsTableNames;
	bool MissionSurveyEnabled;
	bool ModifyPlanetsInInitialSystems;
	bool MPMissions;
	bool MPMissionsAlwaysEPIC;
	bool MultiplePlayerFreightersInASystem;
	bool PlaceOnGroundWhenLeavingDebugCamera;
	bool PreloadToolbox;
	bool PrintAvgFrameTimes;
	bool ProceduralModelsDeterministicSequence;
	bool Proto2DevKit;
	bool RecordNetworkStatsOnBoot;
	bool RenderCreatureDetails;
	bool RenderHud;
	bool RenderLowFramerate;
	bool ResetForcedSaveSlotOnLoad;
	bool ResetToSupportedResolution;
	bool RevealAllTitles;
	bool SaveOutModdedMetadata;
	bool ScratchpadPlanetEnvironment;
	bool ScreenshotMode;
	bool ShaderCaching;
	bool ShaderPreloadListExport;
	bool ShaderPreloadListImport;
	bool ShipSalvageGivesAllParts;
	bool ShowDebugMessages;
	bool ShowDynamicResScale;
	bool ShowEditorPlacementPreview;
	bool ShowFireteamMembersUA;
	bool ShowFramerate;
	bool ShowGPUMemory;
	bool ShowGPURenderTime;
	bool ShowGraphs;
	bool ShowHmdHandControllers;
	bool ShowLongestStrings;
	bool ShowMempoolOverlay;
	bool ShowMissionIdInTitle;
	bool ShowMouseSmoothing;
	bool ShowPositionDebug;
	bool ShowRenderStatsDisplay;
	bool ShowTeleportEffectLocally;
	bool SimulateDisabledParticleRefractions;
	bool SimulateNoNetworkConnection;
	bool SkipAbandonedFreighterUnlocking;
	bool SkipIntro;
	bool SkipLogos;
	bool SkipPlanetDiscoverOnBoot;
	bool SkipTutorial;
	bool SkipUITimers;
	bool SmokeTestCameraFly;
	bool SmokeTestConfigRandomizePlanetSeed;
	bool SmokeTestDumpStatsMode;
	bool SmokeTestFastExit;
	bool SmokeTestLegacyOutput;
	bool SmokeTestOutputOnly;
	bool SmokeTestPostBandwidthStats;
	bool SmokeTestPureFlight;
	bool SmokeTestSmokeBotAutoStart;
	bool SmokeTestSmokeBotEnabled;
	bool SpawnPirates;
	bool SpawnPulseEncounters;
	bool SpawnRobots;
	bool SpawnShips;
	bool SpecialsShop;
	bool StartPaused;
	bool StopSwitchingToSecondaryInteractions;
	bool StressTestLongNameDisplay;
	bool SuperKillGuns;
	bool TakeNoDamage;
	bool ThirdPersonIsDefaultCameraForPlayer;
	bool ThirdPersonIsDefaultCameraForShipAndVehicles;
	bool UnlockAllPlatformRewards;
	bool UnlockAllSeasonRewards;
	bool UnlockAllStories;
	bool UnlockAllTitles;
	bool UnlockAllTwitchRewards;
	bool UnlockAllWords;
	bool UseBuildings;
	bool UseClouds;
	bool UseCreatures;
	bool UseElevation;
	bool UseGunImpactEffect;
	bool UseHighlightedOptionStyle;
	bool UseImmediateModeFrontend;
	bool UseInstances;
	bool UseLegacyBuildingTable;
	bool UseLegacyFreighters;
	bool UseMovementStickForRun;
	bool UseObjects;
	bool UseOldTerrainMeshing;
	bool UsePadOnUnfocusedWindow;
	bool UseParticles;
	bool UseProcTextureDebugger;
	bool UseSceneInfoWindow;
	bool UseScreenEffects;
	bool UseSeasonTransferInventoryConfigOverride;
	bool UseTerrain;
	bool UseVolumetrics;
	bool VideoCaptureMode;

	friend bool operator==(const GcDebugOptions& lhs, const GcDebugOptions& rhs) 
	{
		return lhs.SeasonTransferInventoryConfigOverride == rhs.SeasonTransferInventoryConfigOverride &&
		lhs.CrashDumpPath == rhs.CrashDumpPath &&
		lhs.CreateSeasonContextMaskIdOverride == rhs.CreateSeasonContextMaskIdOverride &&
		lhs.CursorTexture == rhs.CursorTexture &&
		lhs.DebugFont == rhs.DebugFont &&
		lhs.DebugFontTexture == rhs.DebugFontTexture &&
		lhs.DebugScene == rhs.DebugScene &&
		lhs.DefaultAirCreatureTable == rhs.DefaultAirCreatureTable &&
		lhs.DefaultCaveCreatureTable == rhs.DefaultCaveCreatureTable &&
		lhs.DefaultGroundCreatureTable == rhs.DefaultGroundCreatureTable &&
		lhs.DefaultSaveData == rhs.DefaultSaveData &&
		lhs.DefaultWaterCreatureTable == rhs.DefaultWaterCreatureTable &&
		lhs.ForceBuilderMissionBoardMission == rhs.ForceBuilderMissionBoardMission &&
		lhs.LocTableList == rhs.LocTableList &&
		lhs.PauseTexture == rhs.PauseTexture &&
		lhs.PipelineFile == rhs.PipelineFile &&
		lhs.PipelineFileEditor == rhs.PipelineFileEditor &&
		lhs.PipelineFileFrontend == rhs.PipelineFileFrontend &&
		lhs.PlayTexture == rhs.PlayTexture &&
		lhs.RealityPresetFile == rhs.RealityPresetFile &&
		lhs.RenderToTexture == rhs.RenderToTexture &&
		lhs.SceneSettings == rhs.SceneSettings &&
		lhs.StepTexture == rhs.StepTexture &&
		lhs.SwitchSeasonContextMaskIdOverride == rhs.SwitchSeasonContextMaskIdOverride &&
		lhs.ForceTimeToEpoch == rhs.ForceTimeToEpoch &&
		lhs.OverrideAbandonedFreighterSeed == rhs.OverrideAbandonedFreighterSeed &&
		lhs.ToolkitGlobals == rhs.ToolkitGlobals &&
		lhs._3dTextDistance == rhs._3dTextDistance &&
		lhs._3dTextMinScale == rhs._3dTextMinScale &&
		lhs.AutomaticPartSpawnStyle == rhs.AutomaticPartSpawnStyle &&
		lhs.BaseDownloadTimeout == rhs.BaseDownloadTimeout &&
		lhs.BasePayloadMultiplier == rhs.BasePayloadMultiplier &&
		lhs.BootDirectlyIntoSaveSlot == rhs.BootDirectlyIntoSaveSlot &&
		lhs.BootLoadDelay == rhs.BootLoadDelay &&
		lhs.BootLogoFadeRate == rhs.BootLogoFadeRate &&
		lhs.BootMode == rhs.BootMode &&
		lhs.DebugLanguage == rhs.DebugLanguage &&
		lhs.DebugMenuAlpha == rhs.DebugMenuAlpha &&
		lhs.DebugTextLineHeight == rhs.DebugTextLineHeight &&
		lhs.DebugTextSize == rhs.DebugTextSize &&
		lhs.DebugTextureSize == rhs.DebugTextureSize &&
		lhs.DiscoveryAutoSyncIntervalSeconds == rhs.DiscoveryAutoSyncIntervalSeconds &&
		lhs.ForceAnomalyTo == rhs.ForceAnomalyTo &&
		lhs.ForceAsteroidSystemIndex == rhs.ForceAsteroidSystemIndex &&
		lhs.ForceBiomeSubTypeTo == rhs.ForceBiomeSubTypeTo &&
		lhs.ForceBiomeTo == rhs.ForceBiomeTo &&
		lhs.ForceBuildingRaceTo == rhs.ForceBuildingRaceTo &&
		lhs.ForceCreatureLifeLevelTo == rhs.ForceCreatureLifeLevelTo &&
		lhs.ForceGrassColourIndex == rhs.ForceGrassColourIndex &&
		lhs.ForceInitialTimeOfDay == rhs.ForceInitialTimeOfDay &&
		lhs.ForceInteractionIndex == rhs.ForceInteractionIndex &&
		lhs.ForceInteractionRaceTo == rhs.ForceInteractionRaceTo &&
		lhs.ForceLifeLevelTo == rhs.ForceLifeLevelTo &&
		lhs.ForceNPCPuzzleCategory == rhs.ForceNPCPuzzleCategory &&
		lhs.ForceScreenFilterTo == rhs.ForceScreenFilterTo &&
		lhs.ForceSeaLevel == rhs.ForceSeaLevel &&
		lhs.ForceSkyColourIndex == rhs.ForceSkyColourIndex &&
		lhs.ForceSkyColourSeed == rhs.ForceSkyColourSeed &&
		lhs.ForceSpaceBattleLevel == rhs.ForceSpaceBattleLevel &&
		lhs.ForceSpaceSkyColourIndex == rhs.ForceSpaceSkyColourIndex &&
		lhs.ForceStarTypeTo == rhs.ForceStarTypeTo &&
		lhs.ForceSunAngle == rhs.ForceSunAngle &&
		lhs.ForceTerrainSettings == rhs.ForceTerrainSettings &&
		lhs.ForceTerrainTypeTo == rhs.ForceTerrainTypeTo &&
		lhs.ForceTimeOfDay == rhs.ForceTimeOfDay &&
		lhs.ForceWaterColourIndex == rhs.ForceWaterColourIndex &&
		lhs.ForceWaterConditionTo == rhs.ForceWaterConditionTo &&
		lhs.ForceWaterObjectFileIndex == rhs.ForceWaterObjectFileIndex &&
		lhs.GameStateMode == rhs.GameStateMode &&
		lhs.GenerateCostAngle == rhs.GenerateCostAngle &&
		lhs.GenerateCostDistance == rhs.GenerateCostDistance &&
		lhs.GenerateCostLOD == rhs.GenerateCostLOD &&
		lhs.GenerateCostWait == rhs.GenerateCostWait &&
		lhs.GenerateFarLodBuildingDist == rhs.GenerateFarLodBuildingDist &&
		lhs.MaxNumDebugMessages == rhs.MaxNumDebugMessages &&
		lhs.MoveBaseIndex == rhs.MoveBaseIndex &&
		lhs.MultipleFingersSamePressFrameDelta == rhs.MultipleFingersSamePressFrameDelta &&
		lhs.NewSaveGameMode == rhs.NewSaveGameMode &&
		lhs.OverrideMatchmakingVersion == rhs.OverrideMatchmakingVersion &&
		lhs.OverrideServerSeasonEndTime == rhs.OverrideServerSeasonEndTime &&
		lhs.OverrideServerSeasonNumber == rhs.OverrideServerSeasonNumber &&
		lhs.PanDeadzone == rhs.PanDeadzone &&
		lhs.PlayerSpawnLocationOverride == rhs.PlayerSpawnLocationOverride &&
		lhs.ProceduralModelBatchSize == rhs.ProceduralModelBatchSize &&
		lhs.ProceduralModelFilterMatchretryCount == rhs.ProceduralModelFilterMatchretryCount &&
		lhs.ProceduralModelsShown == rhs.ProceduralModelsShown &&
		lhs.ProceduralModelsThumbnailSize == rhs.ProceduralModelsThumbnailSize &&
		lhs.ProfilerPartIndexPhase == rhs.ProfilerPartIndexPhase &&
		lhs.ProfilerPartIndexStride == rhs.ProfilerPartIndexStride &&
		lhs.ProfilerPartIteration == rhs.ProfilerPartIteration &&
		lhs.ProxyType == rhs.ProxyType &&
		lhs.RealityMode == rhs.RealityMode &&
		lhs.RecordSetting == rhs.RecordSetting &&
		lhs.RecurrenceTimeOffset == rhs.RecurrenceTimeOffset &&
		lhs.ScreenshotForUploadHeight == rhs.ScreenshotForUploadHeight &&
		lhs.ScreenshotForUploadWidth == rhs.ScreenshotForUploadWidth &&
		lhs.ServerEnv == rhs.ServerEnv &&
		lhs.ShaderPreload == rhs.ShaderPreload &&
		lhs.ShowSpecificGraph == rhs.ShowSpecificGraph &&
		lhs.SmokeTestConfigCaptureCycles == rhs.SmokeTestConfigCaptureCycles &&
		lhs.SmokeTestConfigCaptureDurationInSeconds == rhs.SmokeTestConfigCaptureDurationInSeconds &&
		lhs.SmokeTestConfigCaptureFolderNameNumberOffset == rhs.SmokeTestConfigCaptureFolderNameNumberOffset &&
		lhs.SmokeTestConfigPlanetPositionCount == rhs.SmokeTestConfigPlanetPositionCount &&
		lhs.SmokeTestConfigScenarioLength == rhs.SmokeTestConfigScenarioLength &&
		lhs.SmokeTestConfigScenarioPreambleLength == rhs.SmokeTestConfigScenarioPreambleLength &&
		lhs.SmokeTestCycleMode == rhs.SmokeTestCycleMode &&
		lhs.SmokeTestScenario == rhs.SmokeTestScenario &&
		lhs.SmokeTestSmokeBotTargetWarps == rhs.SmokeTestSmokeBotTargetWarps &&
		lhs.SolarSystemBoot == rhs.SolarSystemBoot &&
		lhs.SunLightScaleGgx == rhs.SunLightScaleGgx &&
		lhs.SwipeDetectionMaxFrames == rhs.SwipeDetectionMaxFrames &&
		lhs.SwipeDetectionNormalizedTravelThreshold == rhs.SwipeDetectionNormalizedTravelThreshold &&
		lhs.SynergyPort == rhs.SynergyPort &&
		lhs.UseBanks == rhs.UseBanks &&
		lhs.WeaponScale3P == rhs.WeaponScale3P &&
		lhs.RealityGenerationIteration == rhs.RealityGenerationIteration &&
		lhs.AutoJoinUserNames == rhs.AutoJoinUserNames &&
		lhs.DebugTwitchRewards == rhs.DebugTwitchRewards &&
		lhs.LoadToBase == rhs.LoadToBase &&
		lhs.SeasonalDataOverrideFile == rhs.SeasonalDataOverrideFile &&
		lhs.ForceHgAccount == rhs.ForceHgAccount &&
		lhs.ForcePlayerPosition == rhs.ForcePlayerPosition &&
		lhs.ForceUniverseAddress == rhs.ForceUniverseAddress &&
		lhs.GOGLogin == rhs.GOGLogin &&
		lhs.ShowUniverseAddressOnGalaxyMap == rhs.ShowUniverseAddressOnGalaxyMap &&
		lhs.WorkingDirectory == rhs.WorkingDirectory &&
		lhs.AuthBaseUrl == rhs.AuthBaseUrl &&
		lhs.ProxyURI == rhs.ProxyURI &&
		lhs.ForceBaseDownloadUser == rhs.ForceBaseDownloadUser &&
		lhs.OverrideSettlementOwnershipOnlineId == rhs.OverrideSettlementOwnershipOnlineId &&
		lhs.OverrideSettlementOwnershipUsername == rhs.OverrideSettlementOwnershipUsername &&
		lhs.ScreenshotForUploadName == rhs.ScreenshotForUploadName &&
		lhs.AllowedLanguagesFile == rhs.AllowedLanguagesFile &&
		lhs.AutomaticPartSpawnID == rhs.AutomaticPartSpawnID &&
		lhs.BaseServerPlatform == rhs.BaseServerPlatform &&
		lhs.CrashDumpIdentifier == rhs.CrashDumpIdentifier &&
		lhs.OverrideUsernameForDev == rhs.OverrideUsernameForDev &&
		lhs.SaveTestingCommand == rhs.SaveTestingCommand &&
		lhs.SmokeTestForcePlanetDetail == rhs.SmokeTestForcePlanetDetail &&
		lhs.SmokeTestRunFolder == rhs.SmokeTestRunFolder &&
		lhs.SynergyServer == rhs.SynergyServer &&
		lhs.ActiveMissionsIgnoreStartCancelConditions == rhs.ActiveMissionsIgnoreStartCancelConditions &&
		lhs.AllowGalaxyMapRequests == rhs.AllowGalaxyMapRequests &&
		lhs.AllowGlobalPartSnapping == rhs.AllowGlobalPartSnapping &&
		lhs.AllowNGuiVR == rhs.AllowNGuiVR &&
		lhs.AllowOverrideSettlementOwnership == rhs.AllowOverrideSettlementOwnership &&
		lhs.AllowPause == rhs.AllowPause &&
		lhs.AllowRobotBehaviors == rhs.AllowRobotBehaviors &&
		lhs.AllowSavingOnAbandonedFreighters == rhs.AllowSavingOnAbandonedFreighters &&
		lhs.AllSeasonMilestonesShowComplete == rhs.AllSeasonMilestonesShowComplete &&
		lhs.AllSettlementsAreCompleted == rhs.AllSettlementsAreCompleted &&
		lhs.AlternateControls == rhs.AlternateControls &&
		lhs.AlwaysAllowFreighterInventoryAccess == rhs.AlwaysAllowFreighterInventoryAccess &&
		lhs.AlwaysAllowShipOperations == rhs.AlwaysAllowShipOperations &&
		lhs.AlwaysAllowSpookFiends == rhs.AlwaysAllowSpookFiends &&
		lhs.AlwaysAllowVehicleOperations == rhs.AlwaysAllowVehicleOperations &&
		lhs.AlwaysHaveFocus == rhs.AlwaysHaveFocus &&
		lhs.AlwaysIncludeLocalPlayerInChatMessage == rhs.AlwaysIncludeLocalPlayerInChatMessage &&
		lhs.AlwaysSaveGameAsClient == rhs.AlwaysSaveGameAsClient &&
		lhs.AlwaysShowSaveIds == rhs.AlwaysShowSaveIds &&
		lhs.AlwaysShowURI == rhs.AlwaysShowURI &&
		lhs.AlwaysSpaceBattle == rhs.AlwaysSpaceBattle &&
		lhs.AutoJoinRandomGames == rhs.AutoJoinRandomGames &&
		lhs.AutoJoinUserEnabled == rhs.AutoJoinUserEnabled &&
		lhs.AutomaticPartSpawnInactive == rhs.AutomaticPartSpawnInactive &&
		lhs.BaseAdmin == rhs.BaseAdmin &&
		lhs.BlockCommunicatorSignals == rhs.BlockCommunicatorSignals &&
		lhs.BlockSettlementsNetwork == rhs.BlockSettlementsNetwork &&
		lhs.BlockSpaceBattle == rhs.BlockSpaceBattle &&
		lhs.BodyTurning == rhs.BodyTurning &&
		lhs.BootDirectlyIntoLastSave == rhs.BootDirectlyIntoLastSave &&
		lhs.BootMusic == rhs.BootMusic &&
		lhs.CanLeaveDialogs == rhs.CanLeaveDialogs &&
		lhs.CertificateSecurityBypass == rhs.CertificateSecurityBypass &&
		lhs.CheckForMissingLocStrings == rhs.CheckForMissingLocStrings &&
		lhs.ClothForceAsyncSimulationOff == rhs.ClothForceAsyncSimulationOff &&
		lhs.ClothForceAsyncSimulationOn == rhs.ClothForceAsyncSimulationOn &&
		lhs.ClothForcePositionExtrapolationAntiSyncWithFpsLock == rhs.ClothForcePositionExtrapolationAntiSyncWithFpsLock &&
		lhs.ClothForcePositionExtrapolationBackOn == rhs.ClothForcePositionExtrapolationBackOn &&
		lhs.ClothForcePositionExtrapolationOff == rhs.ClothForcePositionExtrapolationOff &&
		lhs.ClothForcePositionExtrapolationOn == rhs.ClothForcePositionExtrapolationOn &&
		lhs.ClothForcePositionExtrapolationSyncWithFpsLock == rhs.ClothForcePositionExtrapolationSyncWithFpsLock &&
		lhs.ClothForcePositionExtrapolationUpdateOrderDependent == rhs.ClothForcePositionExtrapolationUpdateOrderDependent &&
		lhs.CompressTextures == rhs.CompressTextures &&
		lhs.CrashDumpFull == rhs.CrashDumpFull &&
		lhs.CrashOnF10 == rhs.CrashOnF10 &&
		lhs.CreatureChatter == rhs.CreatureChatter &&
		lhs.CreatureDrawVocals == rhs.CreatureDrawVocals &&
		lhs.CreatureErrors == rhs.CreatureErrors &&
		lhs.CrossPlatformFeaturedBases == rhs.CrossPlatformFeaturedBases &&
		lhs.DChecksEnabled == rhs.DChecksEnabled &&
		lhs.DChecksOutputBinary == rhs.DChecksOutputBinary &&
		lhs.DChecksOutputFileLine == rhs.DChecksOutputFileLine &&
		lhs.DChecksOutputJson == rhs.DChecksOutputJson &&
		lhs.DebugBuildingSpawns == rhs.DebugBuildingSpawns &&
		lhs.DebugDrawPlayerInteract == rhs.DebugDrawPlayerInteract &&
		lhs.DebugGalaxyMapInQuickMenu == rhs.DebugGalaxyMapInQuickMenu &&
		lhs.DebugIBL == rhs.DebugIBL &&
		lhs.DebugNetworkLocks == rhs.DebugNetworkLocks &&
		lhs.DebugPersistentInteractions == rhs.DebugPersistentInteractions &&
		lhs.DebugSpotlights == rhs.DebugSpotlights &&
		lhs.DebugTerrainTextures == rhs.DebugTerrainTextures &&
		lhs.DebugThreatLevels == rhs.DebugThreatLevels &&
		lhs.DeferRegionBodies == rhs.DeferRegionBodies &&
		lhs.DisableAbandonedFreighterRoomsOptimisation == rhs.DisableAbandonedFreighterRoomsOptimisation &&
		lhs.DisableBaseBuilding == rhs.DisableBaseBuilding &&
		lhs.DisableBaseBuildingLimits == rhs.DisableBaseBuildingLimits &&
		lhs.DisableBasePowerRequirements == rhs.DisableBasePowerRequirements &&
		lhs.DisableClouds == rhs.DisableClouds &&
		lhs.DisableContinuousSaving == rhs.DisableContinuousSaving &&
		lhs.DisableDebugControls == rhs.DisableDebugControls &&
		lhs.DisableDiscoveryNaming == rhs.DisableDiscoveryNaming &&
		lhs.DisableFileWatcher == rhs.DisableFileWatcher &&
		lhs.DisableHazards == rhs.DisableHazards &&
		lhs.DisableHeadConstraints == rhs.DisableHeadConstraints &&
		lhs.DisableInvalidSaveVersion == rhs.DisableInvalidSaveVersion &&
		lhs.DisableLeftHand == rhs.DisableLeftHand &&
		lhs.DisableLimits == rhs.DisableLimits &&
		lhs.DisableMissionShop == rhs.DisableMissionShop &&
		lhs.DisableMonumentDownloads == rhs.DisableMonumentDownloads &&
		lhs.DisableNPCHiddenUntilScanned == rhs.DisableNPCHiddenUntilScanned &&
		lhs.DisableNPCs == rhs.DisableNPCs &&
		lhs.DisableOldMissions == rhs.DisableOldMissions &&
		lhs.DisablePartialStories == rhs.DisablePartialStories &&
		lhs.DisableProfanityFilter == rhs.DisableProfanityFilter &&
		lhs.DisableSaveSlotSorting == rhs.DisableSaveSlotSorting &&
		lhs.DisableSaveUploadRateLimits == rhs.DisableSaveUploadRateLimits &&
		lhs.DisableSaving == rhs.DisableSaving &&
		lhs.DisableSettlements == rhs.DisableSettlements &&
		lhs.DisableShadowSwitching == rhs.DisableShadowSwitching &&
		lhs.DisableShipSaveDataRecovery == rhs.DisableShipSaveDataRecovery &&
		lhs.DisableSpaceStationSpawnOnJoin == rhs.DisableSpaceStationSpawnOnJoin &&
		lhs.DisableStorms == rhs.DisableStorms &&
		lhs.DisableVibration == rhs.DisableVibration &&
		lhs.DoAlienLanguage == rhs.DoAlienLanguage &&
		lhs.DrawCreaturesInRoutines == rhs.DrawCreaturesInRoutines &&
		lhs.DumpManifestContents == rhs.DumpManifestContents &&
		lhs.EnableAccessibleUI == rhs.EnableAccessibleUI &&
		lhs.EnableBaseBuildingExpandables == rhs.EnableBaseBuildingExpandables &&
		lhs.EnableBaseMovingOption == rhs.EnableBaseMovingOption &&
		lhs.EnableCloudAnimation == rhs.EnableCloudAnimation &&
		lhs.EnableComputePost == rhs.EnableComputePost &&
		lhs.EnableDayNightCycle == rhs.EnableDayNightCycle &&
		lhs.EnableDebugSceneAutoSave == rhs.EnableDebugSceneAutoSave &&
		lhs.EnableEvenOddRender == rhs.EnableEvenOddRender &&
		lhs.EnableFrontendPreload == rhs.EnableFrontendPreload &&
		lhs.EnableGalaxyRecolouring == rhs.EnableGalaxyRecolouring &&
		lhs.EnableGgx == rhs.EnableGgx &&
		lhs.EnableMemoryPoolAllocPrint == rhs.EnableMemoryPoolAllocPrint &&
		lhs.EnableMomentTransparency == rhs.EnableMomentTransparency &&
		lhs.EnablePhotomodeVR == rhs.EnablePhotomodeVR &&
		lhs.EnableSynergy == rhs.EnableSynergy &&
		lhs.EnableTouchScreenDebugging == rhs.EnableTouchScreenDebugging &&
		lhs.EverythingIsFree == rhs.EverythingIsFree &&
		lhs.EverythingIsKnown == rhs.EverythingIsKnown &&
		lhs.EverythingIsStar == rhs.EverythingIsStar &&
		lhs.FakeHandsInMultiplayer == rhs.FakeHandsInMultiplayer &&
		lhs.FastAndFrequentFleetInterventions == rhs.FastAndFrequentFleetInterventions &&
		lhs.FastLoad == rhs.FastLoad &&
		lhs.FixedFramerate == rhs.FixedFramerate &&
		lhs.FleetDirectorAutoMode == rhs.FleetDirectorAutoMode &&
		lhs.ForceAllExhibitsToBeEditable == rhs.ForceAllExhibitsToBeEditable &&
		lhs.ForceBasicLoadScreen == rhs.ForceBasicLoadScreen &&
		lhs.ForceBinaryStar == rhs.ForceBinaryStar &&
		lhs.ForceBiome == rhs.ForceBiome &&
		lhs.ForceBuildersAlwaysKnown == rhs.ForceBuildersAlwaysKnown &&
		lhs.ForceBuildingRace == rhs.ForceBuildingRace &&
		lhs.ForceCorruptSentinels == rhs.ForceCorruptSentinels &&
		lhs.ForceCreatureLifeLevel == rhs.ForceCreatureLifeLevel &&
		lhs.ForceDefaultCreatureFile == rhs.ForceDefaultCreatureFile &&
		lhs.ForceDisableClothComponent == rhs.ForceDisableClothComponent &&
		lhs.ForceDisableNonPlayerRagdollComponents == rhs.ForceDisableNonPlayerRagdollComponents &&
		lhs.ForceDisableRagdollComponent == rhs.ForceDisableRagdollComponent &&
		lhs.ForceDisableSplitIkOptimisation == rhs.ForceDisableSplitIkOptimisation &&
		lhs.ForceDisableSpringComponent == rhs.ForceDisableSpringComponent &&
		lhs.ForceEnableClothComponent == rhs.ForceEnableClothComponent &&
		lhs.ForceEnableRagdollComponent == rhs.ForceEnableRagdollComponent &&
		lhs.ForceEnableSplitIkOptimisation == rhs.ForceEnableSplitIkOptimisation &&
		lhs.ForceEnableSpringComponent == rhs.ForceEnableSpringComponent &&
		lhs.ForceExtremeSentinels == rhs.ForceExtremeSentinels &&
		lhs.ForceExtremeWeather == rhs.ForceExtremeWeather &&
		lhs.ForceFullFeatureMode == rhs.ForceFullFeatureMode &&
		lhs.ForceGasGiantSystem == rhs.ForceGasGiantSystem &&
		lhs.ForceGiantSystem == rhs.ForceGiantSystem &&
		lhs.ForceInitialShip == rhs.ForceInitialShip &&
		lhs.ForceInitialWeapon == rhs.ForceInitialWeapon &&
		lhs.ForceInteractionToSettings == rhs.ForceInteractionToSettings &&
		lhs.ForceLifeLevel == rhs.ForceLifeLevel &&
		lhs.ForceLoadAllWeather == rhs.ForceLoadAllWeather &&
		lhs.ForceNexusInQuickMenu == rhs.ForceNexusInQuickMenu &&
		lhs.ForcePirateSystem == rhs.ForcePirateSystem &&
		lhs.ForcePlanetsToHaveNoCaves == rhs.ForcePlanetsToHaveNoCaves &&
		lhs.ForcePlanetsToHaveNoNoiseLayers == rhs.ForcePlanetsToHaveNoNoiseLayers &&
		lhs.ForcePlanetsToHaveNoTerrainFeatures == rhs.ForcePlanetsToHaveNoTerrainFeatures &&
		lhs.ForcePlanetsToHaveNoWater == rhs.ForcePlanetsToHaveNoWater &&
		lhs.ForcePlanetsToHaveWater == rhs.ForcePlanetsToHaveWater &&
		lhs.ForcePrimeTerrain == rhs.ForcePrimeTerrain &&
		lhs.ForcePurpleSystemsToAlwaysBirth == rhs.ForcePurpleSystemsToAlwaysBirth &&
		lhs.ForcePurpleSystemsVisibleOnLoad == rhs.ForcePurpleSystemsVisibleOnLoad &&
		lhs.ForceRareAsteroidSystem == rhs.ForceRareAsteroidSystem &&
		lhs.ForceScanEventsToGoPrime == rhs.ForceScanEventsToGoPrime &&
		lhs.ForceScreenFilter == rhs.ForceScreenFilter &&
		lhs.ForceSmallLobby == rhs.ForceSmallLobby &&
		lhs.ForceSpaceSkyColourRare == rhs.ForceSpaceSkyColourRare &&
		lhs.ForceStarType == rhs.ForceStarType &&
		lhs.ForceSunDirectionFromPhotoMode == rhs.ForceSunDirectionFromPhotoMode &&
		lhs.ForceTernaryStar == rhs.ForceTernaryStar &&
		lhs.ForceTerrainType == rhs.ForceTerrainType &&
		lhs.ForceTgaDlc == rhs.ForceTgaDlc &&
		lhs.ForceTinyLobby == rhs.ForceTinyLobby &&
		lhs.ForceTranslateAllAlienText == rhs.ForceTranslateAllAlienText &&
		lhs.ForceWaterCondition == rhs.ForceWaterCondition &&
		lhs.FormatDownloadStorageAreaOnBoot == rhs.FormatDownloadStorageAreaOnBoot &&
		lhs.GodMode == rhs.GodMode &&
		lhs.GraphCommandBuffer == rhs.GraphCommandBuffer &&
		lhs.GraphFPS == rhs.GraphFPS &&
		lhs.GraphGeneration == rhs.GraphGeneration &&
		lhs.GraphTexStreaming == rhs.GraphTexStreaming &&
		lhs.HangOnCrash == rhs.HangOnCrash &&
		lhs.HmdFrameShiftEnabled == rhs.HmdFrameShiftEnabled &&
		lhs.HmdUseSolidGuiPointer == rhs.HmdUseSolidGuiPointer &&
		lhs.HotReloadModGlobals == rhs.HotReloadModGlobals &&
		lhs.IgnoreFreighterSpawnWarpRequirement == rhs.IgnoreFreighterSpawnWarpRequirement &&
		lhs.IgnoreMissionRank == rhs.IgnoreMissionRank &&
		lhs.IgnoreSteamDev == rhs.IgnoreSteamDev &&
		lhs.IgnoreTransactionTimeouts == rhs.IgnoreTransactionTimeouts &&
		lhs.InfiniteInteractions == rhs.InfiniteInteractions &&
		lhs.InfiniteStamina == rhs.InfiniteStamina &&
		lhs.InstanceCollision == rhs.InstanceCollision &&
		lhs.InteractionsAllwaysGivesTech == rhs.InteractionsAllwaysGivesTech &&
		lhs.LimitGlobalBodies == rhs.LimitGlobalBodies &&
		lhs.LimitGlobalInstances == rhs.LimitGlobalInstances &&
		lhs.LimitPerRegionBodies == rhs.LimitPerRegionBodies &&
		lhs.LimitPerRegionInstances == rhs.LimitPerRegionInstances &&
		lhs.LoadMissions == rhs.LoadMissions &&
		lhs.LoadShaderSourceIfRenderdocEnabled == rhs.LoadShaderSourceIfRenderdocEnabled &&
		lhs.LockAllTitles == rhs.LockAllTitles &&
		lhs.LogMissingLocalisedText == rhs.LogMissingLocalisedText &&
		lhs.MapWarpCheckIgnoreDrive == rhs.MapWarpCheckIgnoreDrive &&
		lhs.MapWarpCheckIgnoreFuel == rhs.MapWarpCheckIgnoreFuel &&
		lhs.MaximumFreighterSpawns == rhs.MaximumFreighterSpawns &&
		lhs.MemCsv == rhs.MemCsv &&
		lhs.MissionMessageLoggingEnabled == rhs.MissionMessageLoggingEnabled &&
		lhs.MissionNGUIShowsConditionResults == rhs.MissionNGUIShowsConditionResults &&
		lhs.MissionNGUIShowsTableNames == rhs.MissionNGUIShowsTableNames &&
		lhs.MissionSurveyEnabled == rhs.MissionSurveyEnabled &&
		lhs.ModifyPlanetsInInitialSystems == rhs.ModifyPlanetsInInitialSystems &&
		lhs.MPMissions == rhs.MPMissions &&
		lhs.MPMissionsAlwaysEPIC == rhs.MPMissionsAlwaysEPIC &&
		lhs.MultiplePlayerFreightersInASystem == rhs.MultiplePlayerFreightersInASystem &&
		lhs.PlaceOnGroundWhenLeavingDebugCamera == rhs.PlaceOnGroundWhenLeavingDebugCamera &&
		lhs.PreloadToolbox == rhs.PreloadToolbox &&
		lhs.PrintAvgFrameTimes == rhs.PrintAvgFrameTimes &&
		lhs.ProceduralModelsDeterministicSequence == rhs.ProceduralModelsDeterministicSequence &&
		lhs.Proto2DevKit == rhs.Proto2DevKit &&
		lhs.RecordNetworkStatsOnBoot == rhs.RecordNetworkStatsOnBoot &&
		lhs.RenderCreatureDetails == rhs.RenderCreatureDetails &&
		lhs.RenderHud == rhs.RenderHud &&
		lhs.RenderLowFramerate == rhs.RenderLowFramerate &&
		lhs.ResetForcedSaveSlotOnLoad == rhs.ResetForcedSaveSlotOnLoad &&
		lhs.ResetToSupportedResolution == rhs.ResetToSupportedResolution &&
		lhs.RevealAllTitles == rhs.RevealAllTitles &&
		lhs.SaveOutModdedMetadata == rhs.SaveOutModdedMetadata &&
		lhs.ScratchpadPlanetEnvironment == rhs.ScratchpadPlanetEnvironment &&
		lhs.ScreenshotMode == rhs.ScreenshotMode &&
		lhs.ShaderCaching == rhs.ShaderCaching &&
		lhs.ShaderPreloadListExport == rhs.ShaderPreloadListExport &&
		lhs.ShaderPreloadListImport == rhs.ShaderPreloadListImport &&
		lhs.ShipSalvageGivesAllParts == rhs.ShipSalvageGivesAllParts &&
		lhs.ShowDebugMessages == rhs.ShowDebugMessages &&
		lhs.ShowDynamicResScale == rhs.ShowDynamicResScale &&
		lhs.ShowEditorPlacementPreview == rhs.ShowEditorPlacementPreview &&
		lhs.ShowFireteamMembersUA == rhs.ShowFireteamMembersUA &&
		lhs.ShowFramerate == rhs.ShowFramerate &&
		lhs.ShowGPUMemory == rhs.ShowGPUMemory &&
		lhs.ShowGPURenderTime == rhs.ShowGPURenderTime &&
		lhs.ShowGraphs == rhs.ShowGraphs &&
		lhs.ShowHmdHandControllers == rhs.ShowHmdHandControllers &&
		lhs.ShowLongestStrings == rhs.ShowLongestStrings &&
		lhs.ShowMempoolOverlay == rhs.ShowMempoolOverlay &&
		lhs.ShowMissionIdInTitle == rhs.ShowMissionIdInTitle &&
		lhs.ShowMouseSmoothing == rhs.ShowMouseSmoothing &&
		lhs.ShowPositionDebug == rhs.ShowPositionDebug &&
		lhs.ShowRenderStatsDisplay == rhs.ShowRenderStatsDisplay &&
		lhs.ShowTeleportEffectLocally == rhs.ShowTeleportEffectLocally &&
		lhs.SimulateDisabledParticleRefractions == rhs.SimulateDisabledParticleRefractions &&
		lhs.SimulateNoNetworkConnection == rhs.SimulateNoNetworkConnection &&
		lhs.SkipAbandonedFreighterUnlocking == rhs.SkipAbandonedFreighterUnlocking &&
		lhs.SkipIntro == rhs.SkipIntro &&
		lhs.SkipLogos == rhs.SkipLogos &&
		lhs.SkipPlanetDiscoverOnBoot == rhs.SkipPlanetDiscoverOnBoot &&
		lhs.SkipTutorial == rhs.SkipTutorial &&
		lhs.SkipUITimers == rhs.SkipUITimers &&
		lhs.SmokeTestCameraFly == rhs.SmokeTestCameraFly &&
		lhs.SmokeTestConfigRandomizePlanetSeed == rhs.SmokeTestConfigRandomizePlanetSeed &&
		lhs.SmokeTestDumpStatsMode == rhs.SmokeTestDumpStatsMode &&
		lhs.SmokeTestFastExit == rhs.SmokeTestFastExit &&
		lhs.SmokeTestLegacyOutput == rhs.SmokeTestLegacyOutput &&
		lhs.SmokeTestOutputOnly == rhs.SmokeTestOutputOnly &&
		lhs.SmokeTestPostBandwidthStats == rhs.SmokeTestPostBandwidthStats &&
		lhs.SmokeTestPureFlight == rhs.SmokeTestPureFlight &&
		lhs.SmokeTestSmokeBotAutoStart == rhs.SmokeTestSmokeBotAutoStart &&
		lhs.SmokeTestSmokeBotEnabled == rhs.SmokeTestSmokeBotEnabled &&
		lhs.SpawnPirates == rhs.SpawnPirates &&
		lhs.SpawnPulseEncounters == rhs.SpawnPulseEncounters &&
		lhs.SpawnRobots == rhs.SpawnRobots &&
		lhs.SpawnShips == rhs.SpawnShips &&
		lhs.SpecialsShop == rhs.SpecialsShop &&
		lhs.StartPaused == rhs.StartPaused &&
		lhs.StopSwitchingToSecondaryInteractions == rhs.StopSwitchingToSecondaryInteractions &&
		lhs.StressTestLongNameDisplay == rhs.StressTestLongNameDisplay &&
		lhs.SuperKillGuns == rhs.SuperKillGuns &&
		lhs.TakeNoDamage == rhs.TakeNoDamage &&
		lhs.ThirdPersonIsDefaultCameraForPlayer == rhs.ThirdPersonIsDefaultCameraForPlayer &&
		lhs.ThirdPersonIsDefaultCameraForShipAndVehicles == rhs.ThirdPersonIsDefaultCameraForShipAndVehicles &&
		lhs.UnlockAllPlatformRewards == rhs.UnlockAllPlatformRewards &&
		lhs.UnlockAllSeasonRewards == rhs.UnlockAllSeasonRewards &&
		lhs.UnlockAllStories == rhs.UnlockAllStories &&
		lhs.UnlockAllTitles == rhs.UnlockAllTitles &&
		lhs.UnlockAllTwitchRewards == rhs.UnlockAllTwitchRewards &&
		lhs.UnlockAllWords == rhs.UnlockAllWords &&
		lhs.UseBuildings == rhs.UseBuildings &&
		lhs.UseClouds == rhs.UseClouds &&
		lhs.UseCreatures == rhs.UseCreatures &&
		lhs.UseElevation == rhs.UseElevation &&
		lhs.UseGunImpactEffect == rhs.UseGunImpactEffect &&
		lhs.UseHighlightedOptionStyle == rhs.UseHighlightedOptionStyle &&
		lhs.UseImmediateModeFrontend == rhs.UseImmediateModeFrontend &&
		lhs.UseInstances == rhs.UseInstances &&
		lhs.UseLegacyBuildingTable == rhs.UseLegacyBuildingTable &&
		lhs.UseLegacyFreighters == rhs.UseLegacyFreighters &&
		lhs.UseMovementStickForRun == rhs.UseMovementStickForRun &&
		lhs.UseObjects == rhs.UseObjects &&
		lhs.UseOldTerrainMeshing == rhs.UseOldTerrainMeshing &&
		lhs.UsePadOnUnfocusedWindow == rhs.UsePadOnUnfocusedWindow &&
		lhs.UseParticles == rhs.UseParticles &&
		lhs.UseProcTextureDebugger == rhs.UseProcTextureDebugger &&
		lhs.UseSceneInfoWindow == rhs.UseSceneInfoWindow &&
		lhs.UseScreenEffects == rhs.UseScreenEffects &&
		lhs.UseSeasonTransferInventoryConfigOverride == rhs.UseSeasonTransferInventoryConfigOverride &&
		lhs.UseTerrain == rhs.UseTerrain &&
		lhs.UseVolumetrics == rhs.UseVolumetrics &&
		lhs.VideoCaptureMode == rhs.VideoCaptureMode;
	}
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: TkShearWindOctaveData
//Dependency: NMSString0x10
struct TkShearWindData
{
	NMS::NMSString0x10 Name;
	NMS_Toolkit::TkShearWindOctaveData Octave0;
	NMS_Toolkit::TkShearWindOctaveData Octave1;
	NMS_Toolkit::TkShearWindOctaveData Octave2;
	NMS_Toolkit::TkShearWindOctaveData Octave3;
	float LdsWindSpeed;
	float LdsWindStrength;
	float OverallWindStrength;
	float ShearWindSpeed;
	float WindShearGradientStrength;
	float WindShearToDotLdsFactor;
	float WindShearVertpushStrength;
	float WindStrengthToVertpush;

	friend bool operator==(const TkShearWindData& lhs, const TkShearWindData& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Octave0 == rhs.Octave0 &&
		lhs.Octave1 == rhs.Octave1 &&
		lhs.Octave2 == rhs.Octave2 &&
		lhs.Octave3 == rhs.Octave3 &&
		lhs.LdsWindSpeed == rhs.LdsWindSpeed &&
		lhs.LdsWindStrength == rhs.LdsWindStrength &&
		lhs.OverallWindStrength == rhs.OverallWindStrength &&
		lhs.ShearWindSpeed == rhs.ShearWindSpeed &&
		lhs.WindShearGradientStrength == rhs.WindShearGradientStrength &&
		lhs.WindShearToDotLdsFactor == rhs.WindShearToDotLdsFactor &&
		lhs.WindShearVertpushStrength == rhs.WindShearVertpushStrength &&
		lhs.WindStrengthToVertpush == rhs.WindStrengthToVertpush;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcCloudProperties
//Dependency: GcEnvironmentProperties
//Dependency: Colour
//Dependency: TkShearWindData
//Dependency: TkDynamicTreeWindFrequency
//Dependency: TkLODSettingsData
//Dependency: Vector2f
struct GcEnvironmentGlobals
{
	enum class SwitchTypeEnum : uint32_t
	{
		None = 0,
		Debug = 1,
		Enabled = 2,
	};

	NMS_GameComponents::GcCloudProperties CloudProperties;
	NMS::Colour IndoorAmbientColour;
	std::vector<float> FarBlendHeight;
	std::vector<NMS_Toolkit::TkShearWindData> ShearWindSettings;
	std::vector<float> SkyAtmosphereBlendLength;
	std::vector<float> SkyBlendLength;
	std::vector<float> SpacePlanetFogStrength;
	NMS_Toolkit::TkLODSettingsData LODSettings[4];
	NMS_GameComponents::GcEnvironmentProperties EnvironmentGasGiantProperties;
	NMS_GameComponents::GcEnvironmentProperties EnvironmentPrimeProperties;
	NMS_GameComponents::GcEnvironmentProperties EnvironmentProperties;
	NMS_Toolkit::TkDynamicTreeWindFrequency DynamicTreeWindFrequency;
	NMS::Vector2f ExposureHeightBracket;
	NMS::Vector2f SpaceBuildingTemperature;
	float AbandonedFreighterMaxTemperature;
	float AbandonedFreighterMinTemperature;
	float AsteroidFadeHeightMax;
	float AsteroidFadeHeightMin;
	float AsteroidFieldStableEnterTime;
	float AsteroidFieldStableLeaveTime;
	float AsteroidMaxRotate;
	float AsteroidMinRotate;
	float AsteroidScale;
	float AtmosphereSpaceRadius;
	float CameraLocationStableTime;
	float CreatureFadeTime;
	float DailyTempChangePercent;
	float DeepWaterDepthTransitionMax;
	float DeepWaterDepthTransitionMin;
	float DeepWaterOxygenMultiplier;
	float DistortionStep;
	float DoFHeightMax;
	float DoFHeightMin;
	float DuplicateColourThreshold;
	float ExposureGroundFactorAddMul;
	float ExposureSurfaceContrib;
	float ExposureSurfaceDistMax;
	float FarBlendLength;
	float FloraFadeTimeMax;
	float FloraFadeTimeMin;
	float GrassNormalMap;
	float GrassNormalOffset;
	float GrassNormalSpherify;
	float GrassNormalUpright;
	float HDeform;
	float HeavyAirFadeDistance;
	float HeavyAirFadeInTime;
	float HeavyAirFadeOutTime;
	float HeightFogHeightMin;
	int32_t HotspotsLOD;
	float IblUndergroundFadeSpeed;
	float IblUndergroundLightDirectionHorizonBias;
	float IblUndergroundLightIntensity;
	float IndoorColourBlendTime;
	float IndoorsLightingAbandonedFreighterMax;
	float IndoorsLightingFreighterMax;
	float IndoorsLightingNexusMax;
	float IndoorsLightingPlanetMax;
	float IndoorsLightingSpaceStationAbandonedMax;
	float IndoorsLightingSpaceStationMax;
	float IndoorsLightingSpaceStationPirateMax;
	float IndoorsLightingThreshold;
	float IndoorsLightingTransitionTime;
	float IndoorsLightingWeightAround;
	float IndoorsLightingWeightGround;
	float IndoorsLightingWeightOverhead;
	float IndoorsLightingWeightTowardsSun;
	float InteractionRadius;
	float InterestStableTime;
	float LightColourBlend;
	float LightColourHeight;
	float LightDirectionBlend;
	float LightDirectionHeight;
	float LocationStableTime;
	float MaxElevation;
	float MaxHotspotFalloffDistance;
	float MaxHotspotOffsetDistance;
	float MaxMurkVarianceOverTime;
	float MaxPlacementBlendValuePatch;
	float MinHotspotFalloffDistance;
	float MinPlacementBlendValue;
	float MinPlacementBlendValuePatch;
	float MinPlacementObjectScale;
	float MinWaterReflections;
	float ObjectSpawnDetailRadius;
	float ObjectSpawnFirstDotCheck;
	float ObjectSpawnFirstRadius;
	float PlanetEffectEndDistance;
	float PlanetFlipDistance;
	float PlanetUnwrapMax;
	float PlanetUnwrapMin;
	float ProbeBlendRadiusEdge;
	float RegionHotspotProbability;
	float SDeform;
	float SenseProbingValueSmoothingTime;
	float SenseProbingValueSmoothingTimeMed;
	float SenseProbingValueSmoothingTimeSlow;
	float ShipRadiation;
	float ShipSpookLevel;
	float ShipTemperature;
	float ShipToxicity;
	float SkyAtmospherePower;
	float SmallAsteroidScale;
	float SpaceRadiation;
	float SpaceSpookLevel;
	float SpaceStationStateBoundingBoxScaler;
	float SpaceTemperature;
	float SpaceToxicity;
	float SpawnLowerAtmosphereRadiusMultiplier;
	float SphereLodTextureScale;
	float StandardNearProbeRadius;
	float SunClampHeightMax;
	float SunClampHeightMin;
	float SunFactorMin;
	NMS_Globals::GcEnvironmentGlobals::SwitchTypeEnum SwitchType;
	float TemperatureSmoothTime;
	float TerrainFadeTime;
	float TerrainFadeTimeInShip;
	float TerrainFlattenMax;
	float TerrainFlattenMin;
	float UndergroundFakeSkyFactor;
	float UndergroundNearProbeRadius;
	float VDeform;
	float WaterAlphaHeightMax;
	float WaterAlphaHeightMin;
	int32_t WaterChangeTime;
	float WaterConditionTransitionTime;
	float WaterFogHeightMax;
	float WaterMurkMaxPlayerDepth;
	float WaterMurkMinPlayerDepth;
	float WaterMurkVariancePeriod;
	bool EnableWind;
	bool ForceAddCaveProps;
	bool ForceAddUnderwaterProps;
	bool MatchPlantPalettes;

	friend bool operator==(const GcEnvironmentGlobals& lhs, const GcEnvironmentGlobals& rhs) 
	{
		return lhs.CloudProperties == rhs.CloudProperties &&
		lhs.IndoorAmbientColour == rhs.IndoorAmbientColour &&
		lhs.FarBlendHeight == rhs.FarBlendHeight &&
		lhs.ShearWindSettings == rhs.ShearWindSettings &&
		lhs.SkyAtmosphereBlendLength == rhs.SkyAtmosphereBlendLength &&
		lhs.SkyBlendLength == rhs.SkyBlendLength &&
		lhs.SpacePlanetFogStrength == rhs.SpacePlanetFogStrength &&
		std::equal(std::begin(lhs.LODSettings), std::end(lhs.LODSettings), std::begin(rhs.LODSettings)) &&
		lhs.EnvironmentGasGiantProperties == rhs.EnvironmentGasGiantProperties &&
		lhs.EnvironmentPrimeProperties == rhs.EnvironmentPrimeProperties &&
		lhs.EnvironmentProperties == rhs.EnvironmentProperties &&
		lhs.DynamicTreeWindFrequency == rhs.DynamicTreeWindFrequency &&
		lhs.ExposureHeightBracket == rhs.ExposureHeightBracket &&
		lhs.SpaceBuildingTemperature == rhs.SpaceBuildingTemperature &&
		lhs.AbandonedFreighterMaxTemperature == rhs.AbandonedFreighterMaxTemperature &&
		lhs.AbandonedFreighterMinTemperature == rhs.AbandonedFreighterMinTemperature &&
		lhs.AsteroidFadeHeightMax == rhs.AsteroidFadeHeightMax &&
		lhs.AsteroidFadeHeightMin == rhs.AsteroidFadeHeightMin &&
		lhs.AsteroidFieldStableEnterTime == rhs.AsteroidFieldStableEnterTime &&
		lhs.AsteroidFieldStableLeaveTime == rhs.AsteroidFieldStableLeaveTime &&
		lhs.AsteroidMaxRotate == rhs.AsteroidMaxRotate &&
		lhs.AsteroidMinRotate == rhs.AsteroidMinRotate &&
		lhs.AsteroidScale == rhs.AsteroidScale &&
		lhs.AtmosphereSpaceRadius == rhs.AtmosphereSpaceRadius &&
		lhs.CameraLocationStableTime == rhs.CameraLocationStableTime &&
		lhs.CreatureFadeTime == rhs.CreatureFadeTime &&
		lhs.DailyTempChangePercent == rhs.DailyTempChangePercent &&
		lhs.DeepWaterDepthTransitionMax == rhs.DeepWaterDepthTransitionMax &&
		lhs.DeepWaterDepthTransitionMin == rhs.DeepWaterDepthTransitionMin &&
		lhs.DeepWaterOxygenMultiplier == rhs.DeepWaterOxygenMultiplier &&
		lhs.DistortionStep == rhs.DistortionStep &&
		lhs.DoFHeightMax == rhs.DoFHeightMax &&
		lhs.DoFHeightMin == rhs.DoFHeightMin &&
		lhs.DuplicateColourThreshold == rhs.DuplicateColourThreshold &&
		lhs.ExposureGroundFactorAddMul == rhs.ExposureGroundFactorAddMul &&
		lhs.ExposureSurfaceContrib == rhs.ExposureSurfaceContrib &&
		lhs.ExposureSurfaceDistMax == rhs.ExposureSurfaceDistMax &&
		lhs.FarBlendLength == rhs.FarBlendLength &&
		lhs.FloraFadeTimeMax == rhs.FloraFadeTimeMax &&
		lhs.FloraFadeTimeMin == rhs.FloraFadeTimeMin &&
		lhs.GrassNormalMap == rhs.GrassNormalMap &&
		lhs.GrassNormalOffset == rhs.GrassNormalOffset &&
		lhs.GrassNormalSpherify == rhs.GrassNormalSpherify &&
		lhs.GrassNormalUpright == rhs.GrassNormalUpright &&
		lhs.HDeform == rhs.HDeform &&
		lhs.HeavyAirFadeDistance == rhs.HeavyAirFadeDistance &&
		lhs.HeavyAirFadeInTime == rhs.HeavyAirFadeInTime &&
		lhs.HeavyAirFadeOutTime == rhs.HeavyAirFadeOutTime &&
		lhs.HeightFogHeightMin == rhs.HeightFogHeightMin &&
		lhs.HotspotsLOD == rhs.HotspotsLOD &&
		lhs.IblUndergroundFadeSpeed == rhs.IblUndergroundFadeSpeed &&
		lhs.IblUndergroundLightDirectionHorizonBias == rhs.IblUndergroundLightDirectionHorizonBias &&
		lhs.IblUndergroundLightIntensity == rhs.IblUndergroundLightIntensity &&
		lhs.IndoorColourBlendTime == rhs.IndoorColourBlendTime &&
		lhs.IndoorsLightingAbandonedFreighterMax == rhs.IndoorsLightingAbandonedFreighterMax &&
		lhs.IndoorsLightingFreighterMax == rhs.IndoorsLightingFreighterMax &&
		lhs.IndoorsLightingNexusMax == rhs.IndoorsLightingNexusMax &&
		lhs.IndoorsLightingPlanetMax == rhs.IndoorsLightingPlanetMax &&
		lhs.IndoorsLightingSpaceStationAbandonedMax == rhs.IndoorsLightingSpaceStationAbandonedMax &&
		lhs.IndoorsLightingSpaceStationMax == rhs.IndoorsLightingSpaceStationMax &&
		lhs.IndoorsLightingSpaceStationPirateMax == rhs.IndoorsLightingSpaceStationPirateMax &&
		lhs.IndoorsLightingThreshold == rhs.IndoorsLightingThreshold &&
		lhs.IndoorsLightingTransitionTime == rhs.IndoorsLightingTransitionTime &&
		lhs.IndoorsLightingWeightAround == rhs.IndoorsLightingWeightAround &&
		lhs.IndoorsLightingWeightGround == rhs.IndoorsLightingWeightGround &&
		lhs.IndoorsLightingWeightOverhead == rhs.IndoorsLightingWeightOverhead &&
		lhs.IndoorsLightingWeightTowardsSun == rhs.IndoorsLightingWeightTowardsSun &&
		lhs.InteractionRadius == rhs.InteractionRadius &&
		lhs.InterestStableTime == rhs.InterestStableTime &&
		lhs.LightColourBlend == rhs.LightColourBlend &&
		lhs.LightColourHeight == rhs.LightColourHeight &&
		lhs.LightDirectionBlend == rhs.LightDirectionBlend &&
		lhs.LightDirectionHeight == rhs.LightDirectionHeight &&
		lhs.LocationStableTime == rhs.LocationStableTime &&
		lhs.MaxElevation == rhs.MaxElevation &&
		lhs.MaxHotspotFalloffDistance == rhs.MaxHotspotFalloffDistance &&
		lhs.MaxHotspotOffsetDistance == rhs.MaxHotspotOffsetDistance &&
		lhs.MaxMurkVarianceOverTime == rhs.MaxMurkVarianceOverTime &&
		lhs.MaxPlacementBlendValuePatch == rhs.MaxPlacementBlendValuePatch &&
		lhs.MinHotspotFalloffDistance == rhs.MinHotspotFalloffDistance &&
		lhs.MinPlacementBlendValue == rhs.MinPlacementBlendValue &&
		lhs.MinPlacementBlendValuePatch == rhs.MinPlacementBlendValuePatch &&
		lhs.MinPlacementObjectScale == rhs.MinPlacementObjectScale &&
		lhs.MinWaterReflections == rhs.MinWaterReflections &&
		lhs.ObjectSpawnDetailRadius == rhs.ObjectSpawnDetailRadius &&
		lhs.ObjectSpawnFirstDotCheck == rhs.ObjectSpawnFirstDotCheck &&
		lhs.ObjectSpawnFirstRadius == rhs.ObjectSpawnFirstRadius &&
		lhs.PlanetEffectEndDistance == rhs.PlanetEffectEndDistance &&
		lhs.PlanetFlipDistance == rhs.PlanetFlipDistance &&
		lhs.PlanetUnwrapMax == rhs.PlanetUnwrapMax &&
		lhs.PlanetUnwrapMin == rhs.PlanetUnwrapMin &&
		lhs.ProbeBlendRadiusEdge == rhs.ProbeBlendRadiusEdge &&
		lhs.RegionHotspotProbability == rhs.RegionHotspotProbability &&
		lhs.SDeform == rhs.SDeform &&
		lhs.SenseProbingValueSmoothingTime == rhs.SenseProbingValueSmoothingTime &&
		lhs.SenseProbingValueSmoothingTimeMed == rhs.SenseProbingValueSmoothingTimeMed &&
		lhs.SenseProbingValueSmoothingTimeSlow == rhs.SenseProbingValueSmoothingTimeSlow &&
		lhs.ShipRadiation == rhs.ShipRadiation &&
		lhs.ShipSpookLevel == rhs.ShipSpookLevel &&
		lhs.ShipTemperature == rhs.ShipTemperature &&
		lhs.ShipToxicity == rhs.ShipToxicity &&
		lhs.SkyAtmospherePower == rhs.SkyAtmospherePower &&
		lhs.SmallAsteroidScale == rhs.SmallAsteroidScale &&
		lhs.SpaceRadiation == rhs.SpaceRadiation &&
		lhs.SpaceSpookLevel == rhs.SpaceSpookLevel &&
		lhs.SpaceStationStateBoundingBoxScaler == rhs.SpaceStationStateBoundingBoxScaler &&
		lhs.SpaceTemperature == rhs.SpaceTemperature &&
		lhs.SpaceToxicity == rhs.SpaceToxicity &&
		lhs.SpawnLowerAtmosphereRadiusMultiplier == rhs.SpawnLowerAtmosphereRadiusMultiplier &&
		lhs.SphereLodTextureScale == rhs.SphereLodTextureScale &&
		lhs.StandardNearProbeRadius == rhs.StandardNearProbeRadius &&
		lhs.SunClampHeightMax == rhs.SunClampHeightMax &&
		lhs.SunClampHeightMin == rhs.SunClampHeightMin &&
		lhs.SunFactorMin == rhs.SunFactorMin &&
		lhs.SwitchType == rhs.SwitchType &&
		lhs.TemperatureSmoothTime == rhs.TemperatureSmoothTime &&
		lhs.TerrainFadeTime == rhs.TerrainFadeTime &&
		lhs.TerrainFadeTimeInShip == rhs.TerrainFadeTimeInShip &&
		lhs.TerrainFlattenMax == rhs.TerrainFlattenMax &&
		lhs.TerrainFlattenMin == rhs.TerrainFlattenMin &&
		lhs.UndergroundFakeSkyFactor == rhs.UndergroundFakeSkyFactor &&
		lhs.UndergroundNearProbeRadius == rhs.UndergroundNearProbeRadius &&
		lhs.VDeform == rhs.VDeform &&
		lhs.WaterAlphaHeightMax == rhs.WaterAlphaHeightMax &&
		lhs.WaterAlphaHeightMin == rhs.WaterAlphaHeightMin &&
		lhs.WaterChangeTime == rhs.WaterChangeTime &&
		lhs.WaterConditionTransitionTime == rhs.WaterConditionTransitionTime &&
		lhs.WaterFogHeightMax == rhs.WaterFogHeightMax &&
		lhs.WaterMurkMaxPlayerDepth == rhs.WaterMurkMaxPlayerDepth &&
		lhs.WaterMurkMinPlayerDepth == rhs.WaterMurkMinPlayerDepth &&
		lhs.WaterMurkVariancePeriod == rhs.WaterMurkVariancePeriod &&
		lhs.EnableWind == rhs.EnableWind &&
		lhs.ForceAddCaveProps == rhs.ForceAddCaveProps &&
		lhs.ForceAddUnderwaterProps == rhs.ForceAddUnderwaterProps &&
		lhs.MatchPlantPalettes == rhs.MatchPlantPalettes;
	}
};

//Dependency: GcCompositeCurveData
//Dependency: GcFishSizeProbabilityBiomeOverride
//Dependency: Colour
//Dependency: GcFishSizeProbability
//Dependency: GcGaussianCurveData
//Dependency: TkCurveType
//Dependency: Vector3f
struct GcFishingGlobals
{
	NMS::Vector3f CastLaunchOffset;
	NMS::Colour LineColourBite;
	NMS::Colour LineColourChase;
	NMS::Colour LineColourDefault;
	NMS::Colour LineColourFail;
	NMS::Colour LineColourLand;
	NMS::Colour LineColourNibble;
	NMS::Vector3f RodFirstPersonOffset;
	NMS::Vector3f RodFirstPersonOffsetReelIn;
	NMS::Vector3f VRRodOffset;
	NMS::Vector3f VRRodRotation;
	NMS_GameComponents::GcCompositeCurveData BaitFlickBobCurve;
	NMS_GameComponents::GcCompositeCurveData BaitFlickLineCurve;
	std::vector<NMS_GameComponents::GcFishSizeProbabilityBiomeOverride> SizeWeightsBiomeOverrides;
	NMS_GameComponents::GcFishSizeProbability SizeWeights[4];
	NMS_GameComponents::GcGaussianCurveData FishMass[4];
	float BaitRarityBoostTotalScoreQualityScaling[5];
	int32_t MaxSeaHarvesterCaughtFish[5];
	int32_t QualityWeights[5];
	float BaitSizeBoostTotalScoreQualityScaling[4];
	float ChaseTimes[4];
	float MysteryFishScales[4];
	float BaitCookingValueMin;
	float BaitFlickBobHeight;
	float BaitFlickBobHeightLean;
	float BaitFlickBobTime;
	float BaitFlickBobTimeLean;
	float BaitFlickBobTimeOffset;
	float BaitFlickEffectTime;
	float BaitRandScoreCookingValueFactor;
	float BaitRarityBoostTotalScoreMax;
	float BaitRarityBoostTotalScoreMin;
	float BaitSizeBoostTotalScoreMax;
	float BaitSizeBoostTotalScoreMin;
	float BaitWeatherBoostScoreThresholdForNotes;
	float CastGravity;
	float CastLaunchAngle;
	float CastLaunchDelayTime;
	float CastVelocityBlendFactor;
	float DebugSceneCastDist;
	float DebugSceneFlicktimeMax;
	float DebugSceneFlicktimeMin;
	float FirstPersonMaxTurnAngle;
	float FirstPersonPitchMaxSpeedScaling;
	float FirstPersonPitchMaxSpeedYawAngle;
	float FirstPersonPitchMinSpeedScaling;
	float FirstPersonPitchMinSpeedYawAngle;
	float FirstPersonPullBackAngle;
	float FirstPersonPullBackSpeedScaling;
	float FirstPersonTurnSpeedBaseScaling;
	float FishCatchAfterBiteTime;
	float FishingRange;
	float FishingRangeVRMultiplier;
	float FishMouthOffset;
	float FishNibbleOffset;
	float FishWaterDisplacementSmoothTime;
	float FloatTiltAmount;
	float FloatTiltIntoTime;
	float FloatTiltOutOfTime;
	float FloatTiltThreshold;
	float LandTimeBegin;
	float LandTimeEnd;
	float LeanCausesBobThreshold;
	float LineAttachmentOffset;
	float LineBiteSag;
	float LineBrightness;
	float LineColourChangeRate;
	float LineColourChangeRateBite;
	float LineColourChangeRateNibble;
	float LineFlickSag;
	float LineNibbleSag;
	float LineWaitSag;
	float LineWidth;
	float MaxWaitTime;
	float MinVelocityToCast;
	float MinWaitTime;
	float ReelHoldTime;
	float RequiredBackCastAngleDegrees;
	float RequiredCastAngleDegrees;
	float SeaHarvesterAverageCatchTimeSeconds;
	float StormThreshold;
	float ThirdPersonLeanMaxAngle;
	float ThirdPersonLeanMidpointAngle;
	float ThirdPersonLeanTime;
	float VRCastStrength;
	float WaveStrengthBite;
	float WaveStrengthBob;
	float WaveStrengthLand;
	bool EnableFirstPersonPitchSpeedScaling;
	bool EnableFirstPersonYawPullback;
	bool EnableFirstPersonYawTurnSpeedScaling;
	NMS_Toolkit::TkCurveType FirstPersonPitchSpeedCurve;
	NMS_Toolkit::TkCurveType FirstPersonPullBackSpeedCurve;
	NMS_Toolkit::TkCurveType FirstPersonTurnSpeedCurve;
	NMS_Toolkit::TkCurveType LineSagCurve;
	bool LineUsesLineRenderer;

	friend bool operator==(const GcFishingGlobals& lhs, const GcFishingGlobals& rhs) 
	{
		return lhs.CastLaunchOffset == rhs.CastLaunchOffset &&
		lhs.LineColourBite == rhs.LineColourBite &&
		lhs.LineColourChase == rhs.LineColourChase &&
		lhs.LineColourDefault == rhs.LineColourDefault &&
		lhs.LineColourFail == rhs.LineColourFail &&
		lhs.LineColourLand == rhs.LineColourLand &&
		lhs.LineColourNibble == rhs.LineColourNibble &&
		lhs.RodFirstPersonOffset == rhs.RodFirstPersonOffset &&
		lhs.RodFirstPersonOffsetReelIn == rhs.RodFirstPersonOffsetReelIn &&
		lhs.VRRodOffset == rhs.VRRodOffset &&
		lhs.VRRodRotation == rhs.VRRodRotation &&
		lhs.BaitFlickBobCurve == rhs.BaitFlickBobCurve &&
		lhs.BaitFlickLineCurve == rhs.BaitFlickLineCurve &&
		lhs.SizeWeightsBiomeOverrides == rhs.SizeWeightsBiomeOverrides &&
		std::equal(std::begin(lhs.SizeWeights), std::end(lhs.SizeWeights), std::begin(rhs.SizeWeights)) &&
		std::equal(std::begin(lhs.FishMass), std::end(lhs.FishMass), std::begin(rhs.FishMass)) &&
		std::equal(std::begin(lhs.BaitRarityBoostTotalScoreQualityScaling), std::end(lhs.BaitRarityBoostTotalScoreQualityScaling), std::begin(rhs.BaitRarityBoostTotalScoreQualityScaling)) &&
		std::equal(std::begin(lhs.MaxSeaHarvesterCaughtFish), std::end(lhs.MaxSeaHarvesterCaughtFish), std::begin(rhs.MaxSeaHarvesterCaughtFish)) &&
		std::equal(std::begin(lhs.QualityWeights), std::end(lhs.QualityWeights), std::begin(rhs.QualityWeights)) &&
		std::equal(std::begin(lhs.BaitSizeBoostTotalScoreQualityScaling), std::end(lhs.BaitSizeBoostTotalScoreQualityScaling), std::begin(rhs.BaitSizeBoostTotalScoreQualityScaling)) &&
		std::equal(std::begin(lhs.ChaseTimes), std::end(lhs.ChaseTimes), std::begin(rhs.ChaseTimes)) &&
		std::equal(std::begin(lhs.MysteryFishScales), std::end(lhs.MysteryFishScales), std::begin(rhs.MysteryFishScales)) &&
		lhs.BaitCookingValueMin == rhs.BaitCookingValueMin &&
		lhs.BaitFlickBobHeight == rhs.BaitFlickBobHeight &&
		lhs.BaitFlickBobHeightLean == rhs.BaitFlickBobHeightLean &&
		lhs.BaitFlickBobTime == rhs.BaitFlickBobTime &&
		lhs.BaitFlickBobTimeLean == rhs.BaitFlickBobTimeLean &&
		lhs.BaitFlickBobTimeOffset == rhs.BaitFlickBobTimeOffset &&
		lhs.BaitFlickEffectTime == rhs.BaitFlickEffectTime &&
		lhs.BaitRandScoreCookingValueFactor == rhs.BaitRandScoreCookingValueFactor &&
		lhs.BaitRarityBoostTotalScoreMax == rhs.BaitRarityBoostTotalScoreMax &&
		lhs.BaitRarityBoostTotalScoreMin == rhs.BaitRarityBoostTotalScoreMin &&
		lhs.BaitSizeBoostTotalScoreMax == rhs.BaitSizeBoostTotalScoreMax &&
		lhs.BaitSizeBoostTotalScoreMin == rhs.BaitSizeBoostTotalScoreMin &&
		lhs.BaitWeatherBoostScoreThresholdForNotes == rhs.BaitWeatherBoostScoreThresholdForNotes &&
		lhs.CastGravity == rhs.CastGravity &&
		lhs.CastLaunchAngle == rhs.CastLaunchAngle &&
		lhs.CastLaunchDelayTime == rhs.CastLaunchDelayTime &&
		lhs.CastVelocityBlendFactor == rhs.CastVelocityBlendFactor &&
		lhs.DebugSceneCastDist == rhs.DebugSceneCastDist &&
		lhs.DebugSceneFlicktimeMax == rhs.DebugSceneFlicktimeMax &&
		lhs.DebugSceneFlicktimeMin == rhs.DebugSceneFlicktimeMin &&
		lhs.FirstPersonMaxTurnAngle == rhs.FirstPersonMaxTurnAngle &&
		lhs.FirstPersonPitchMaxSpeedScaling == rhs.FirstPersonPitchMaxSpeedScaling &&
		lhs.FirstPersonPitchMaxSpeedYawAngle == rhs.FirstPersonPitchMaxSpeedYawAngle &&
		lhs.FirstPersonPitchMinSpeedScaling == rhs.FirstPersonPitchMinSpeedScaling &&
		lhs.FirstPersonPitchMinSpeedYawAngle == rhs.FirstPersonPitchMinSpeedYawAngle &&
		lhs.FirstPersonPullBackAngle == rhs.FirstPersonPullBackAngle &&
		lhs.FirstPersonPullBackSpeedScaling == rhs.FirstPersonPullBackSpeedScaling &&
		lhs.FirstPersonTurnSpeedBaseScaling == rhs.FirstPersonTurnSpeedBaseScaling &&
		lhs.FishCatchAfterBiteTime == rhs.FishCatchAfterBiteTime &&
		lhs.FishingRange == rhs.FishingRange &&
		lhs.FishingRangeVRMultiplier == rhs.FishingRangeVRMultiplier &&
		lhs.FishMouthOffset == rhs.FishMouthOffset &&
		lhs.FishNibbleOffset == rhs.FishNibbleOffset &&
		lhs.FishWaterDisplacementSmoothTime == rhs.FishWaterDisplacementSmoothTime &&
		lhs.FloatTiltAmount == rhs.FloatTiltAmount &&
		lhs.FloatTiltIntoTime == rhs.FloatTiltIntoTime &&
		lhs.FloatTiltOutOfTime == rhs.FloatTiltOutOfTime &&
		lhs.FloatTiltThreshold == rhs.FloatTiltThreshold &&
		lhs.LandTimeBegin == rhs.LandTimeBegin &&
		lhs.LandTimeEnd == rhs.LandTimeEnd &&
		lhs.LeanCausesBobThreshold == rhs.LeanCausesBobThreshold &&
		lhs.LineAttachmentOffset == rhs.LineAttachmentOffset &&
		lhs.LineBiteSag == rhs.LineBiteSag &&
		lhs.LineBrightness == rhs.LineBrightness &&
		lhs.LineColourChangeRate == rhs.LineColourChangeRate &&
		lhs.LineColourChangeRateBite == rhs.LineColourChangeRateBite &&
		lhs.LineColourChangeRateNibble == rhs.LineColourChangeRateNibble &&
		lhs.LineFlickSag == rhs.LineFlickSag &&
		lhs.LineNibbleSag == rhs.LineNibbleSag &&
		lhs.LineWaitSag == rhs.LineWaitSag &&
		lhs.LineWidth == rhs.LineWidth &&
		lhs.MaxWaitTime == rhs.MaxWaitTime &&
		lhs.MinVelocityToCast == rhs.MinVelocityToCast &&
		lhs.MinWaitTime == rhs.MinWaitTime &&
		lhs.ReelHoldTime == rhs.ReelHoldTime &&
		lhs.RequiredBackCastAngleDegrees == rhs.RequiredBackCastAngleDegrees &&
		lhs.RequiredCastAngleDegrees == rhs.RequiredCastAngleDegrees &&
		lhs.SeaHarvesterAverageCatchTimeSeconds == rhs.SeaHarvesterAverageCatchTimeSeconds &&
		lhs.StormThreshold == rhs.StormThreshold &&
		lhs.ThirdPersonLeanMaxAngle == rhs.ThirdPersonLeanMaxAngle &&
		lhs.ThirdPersonLeanMidpointAngle == rhs.ThirdPersonLeanMidpointAngle &&
		lhs.ThirdPersonLeanTime == rhs.ThirdPersonLeanTime &&
		lhs.VRCastStrength == rhs.VRCastStrength &&
		lhs.WaveStrengthBite == rhs.WaveStrengthBite &&
		lhs.WaveStrengthBob == rhs.WaveStrengthBob &&
		lhs.WaveStrengthLand == rhs.WaveStrengthLand &&
		lhs.EnableFirstPersonPitchSpeedScaling == rhs.EnableFirstPersonPitchSpeedScaling &&
		lhs.EnableFirstPersonYawPullback == rhs.EnableFirstPersonYawPullback &&
		lhs.EnableFirstPersonYawTurnSpeedScaling == rhs.EnableFirstPersonYawTurnSpeedScaling &&
		lhs.FirstPersonPitchSpeedCurve == rhs.FirstPersonPitchSpeedCurve &&
		lhs.FirstPersonPullBackSpeedCurve == rhs.FirstPersonPullBackSpeedCurve &&
		lhs.FirstPersonTurnSpeedCurve == rhs.FirstPersonTurnSpeedCurve &&
		lhs.LineSagCurve == rhs.LineSagCurve &&
		lhs.LineUsesLineRenderer == rhs.LineUsesLineRenderer;
	}
};

//Dependency: GcFreighterNPCSpawnPriority
//Dependency: GcFreighterRoomNPCData
//Dependency: GcNPCNavSubgraphNodeTypeConnectivity
struct GcFreighterBaseGlobals
{
	NMS_GameComponents::GcFreighterNPCSpawnPriority NPCTypeSpawnPriorities[5];
	std::vector<NMS_GameComponents::GcFreighterRoomNPCData> FreighterRoomNPCData;
	int32_t MaxTotalCapacityOfNPCTypes[5];
	NMS_GameComponents::GcNPCNavSubgraphNodeTypeConnectivity NPCNavNodeConnectivity;
	int32_t MaxTotalNPCCount;
	float MinTotalRoomsRequiredPerNPC;
	float NPCSpawnIntervalTime;
	float NPCStartSpawnDelayTime;

	friend bool operator==(const GcFreighterBaseGlobals& lhs, const GcFreighterBaseGlobals& rhs) 
	{
		return std::equal(std::begin(lhs.NPCTypeSpawnPriorities), std::end(lhs.NPCTypeSpawnPriorities), std::begin(rhs.NPCTypeSpawnPriorities)) &&
		lhs.FreighterRoomNPCData == rhs.FreighterRoomNPCData &&
		std::equal(std::begin(lhs.MaxTotalCapacityOfNPCTypes), std::end(lhs.MaxTotalCapacityOfNPCTypes), std::begin(rhs.MaxTotalCapacityOfNPCTypes)) &&
		lhs.NPCNavNodeConnectivity == rhs.NPCNavNodeConnectivity &&
		lhs.MaxTotalNPCCount == rhs.MaxTotalNPCCount &&
		lhs.MinTotalRoomsRequiredPerNPC == rhs.MinTotalRoomsRequiredPerNPC &&
		lhs.NPCSpawnIntervalTime == rhs.NPCSpawnIntervalTime &&
		lhs.NPCStartSpawnDelayTime == rhs.NPCStartSpawnDelayTime;
	}
};

//Dependency: GcGalaxyCameraData
//Dependency: GcGalaxyStarColours
//Dependency: GcGalaxyMarkerSettings
//Dependency: GcGalaxyRenderSetupData
//Dependency: GcInWorldUIScreenData
//Dependency: GcGalaxyGenerationSetupData
//Dependency: GcGalaxyRenderAnostreakData
//Dependency: GcGalaxySolarSystemParams
//Dependency: GcGalaxyAudioSetupData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcGalaxyGlobals
{
	NMS_GameComponents::GcGalaxyMarkerSettings MarkerSettings[16];
	NMS_GameComponents::GcGalaxyRenderSetupData DefaultRenderSetup;
	NMS_GameComponents::GcGalaxyRenderSetupData FinalAnimationRenderSetup;
	NMS_GameComponents::GcGalaxyGenerationSetupData DefaultGeneration;
	NMS_GameComponents::GcGalaxyGenerationSetupData FinalAnimationGeneration;
	NMS::Colour RaceFilterDefaultColours[9];
	NMS::Colour RaceFilterDeuteranopiaColours[9];
	NMS::Colour RaceFilterProtanopiaColours[9];
	NMS::Colour RaceFilterTritanopiaColours[9];
	NMS::Colour EconomyFilterDefaultColours[7];
	NMS::Colour EconomyFilterDeuteranopiaColours[7];
	NMS::Colour EconomyFilterProtanopiaColours[7];
	NMS::Colour EconomyFilterTritanopiaColours[7];
	NMS::Colour GalacticWaypointDefaultColours[7];
	NMS::Colour GalacticWaypointDeuteranopiaColours[7];
	NMS::Colour GalacticWaypointProtanopiaColours[7];
	NMS::Colour GalacticWaypointTritanopiaColours[7];
	NMS_GameComponents::GcGalaxyStarColours BaseStarDefaultColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarDeuteranopiaColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarProtanopiaColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarTritanopiaColours;
	NMS::Colour ConflictFilterDefaultColours[4];
	NMS::Colour ConflictFilterDeuteranopiaColours[4];
	NMS::Colour ConflictFilterProtanopiaColours[4];
	NMS::Colour ConflictFilterTritanopiaColours[4];
	NMS_GameComponents::GcGalaxyRenderAnostreakData AnostreakAway;
	NMS_GameComponents::GcGalaxyRenderAnostreakData AnostreakFacing;
	NMS_GameComponents::GcInWorldUIScreenData HandMenuOffset;
	NMS::Colour HandGizmoColourAt;
	NMS::Colour HandGizmoColourInner;
	NMS::Colour HandGizmoColourRight;
	NMS::Colour HandGizmoColourUp;
	NMS::Vector3f HandGizmoHeadOffset;
	NMS::Colour SelectionTreeColour;
	NMS::VariableSizeString MarkerDefaultHex;
	NMS_GameComponents::GcGalaxyCameraData Camera;
	NMS_GameComponents::GcGalaxySolarSystemParams SolarSystemParameters;
	NMS_GameComponents::GcGalaxyAudioSetupData Audio;
	NMS::Vector2f ClickToSelectIconOffset;
	NMS::Vector2f GoalDistanceRange;
	NMS::Vector2f SolarInfoPanelAlignment;
	NMS::Vector2f SolarInfoPanelLineOffset;
	NMS::Vector2f SolarInfoPanelOffset;
	NMS::Vector2f SolarInfoPanelOffsetVR;
	NMS::Vector2f SolarMarkerAlignmentVR;
	NMS::Vector2f SolarMarkerOriginOffsetVR;
	NMS::Vector2f SolarMarkerOriginOffsetVRPS4;
	NMS::Vector2f SolarMarkerSizeVR;
	NMS::Vector2f SolarMarkerSizeVRPS4;
	float AnostreakAlpha;
	float ClickToSelectIconScale;
	float DistanceComputerScale;
	float EarlyStageMultiplier;
	float FadeGameInTime;
	float FadeGameOutTime;
	float FadeMapInTime;
	float FadeMapOutTime;
	float FadeGameOutTimeCentreJourney;
	float FadeMapInTimeCentreJourney;
	float FinalFadedTime;
	float FinalFadeInRate;
	float FinalFadeOutRate;
	float FinalHoldTime;
	float FinalHoldTowardsCenterTime;
	float FinalTransitionAcceleration;
	float FinalTransitionInterpolationValue;
	float FinalTransitionMaxSpeed;
	float GalacticPathMaximumJumpDistanceLightyears;
	float GalacticPathPreferGuideStarsTillJump;
	float HandControlDefaultOffset;
	float HandControlFreeMoveAngleOffset;
	float HandControlFreeMoveMaxOffset;
	float HandControlGizmoScale;
	float HandControlMaxLockDistance;
	float HandControlMaxOffset;
	float HandControlMinLockDistance;
	float HandControlMoveBlendRate;
	float HandControlMoveSpeed;
	float HandControlMoveSpeedTurbo;
	float HandControlPitchSpeed;
	float HandControlPointerLength;
	float HandControlPointerLengthMini;
	float HandControlRotateBlendRate;
	float HandControlRotateSpeed;
	float HandControlWarpSelectAngle;
	float HandControlZoomSpeed;
	float HandGizmoInnerRadius;
	float HandGizmoInnerThickness;
	float HandGizmoLineThickness;
	float HandGizmoMinAlpha;
	float HandGizmoRadius;
	float HandPitchFactorMin;
	float HandPitchFactorRange;
	float HandPitchMaxDistance;
	float HandTurnFactorMin;
	float HandTurnFactorRange;
	float HandZoomFactorMin;
	float HandZoomFactorRange;
	float HexMarkerOuterWidth;
	float HexMarkerRadius;
	float HexMarkerRotation;
	float HexMarkerWidth;
	float HexStackOffsetX;
	float HexStackOffsetXOdd;
	float HexStackOffsetY;
	float IntroCameraLookSmoothRate;
	float IntroFadeInRate;
	float IntroFadeOutRate;
	float IntroTitleFadeTrigger;
	float IntroTitleHoldTime;
	float IntroTitleTextureScale;
	float LargeAreaColourScale;
	float LastSelectedPathAlphaMul;
	float MarkerDropShadowMult;
	float MarkerDropShadowSize;
	float MenuCursorRadiusHmd;
	float MenuOffsetHmd;
	float MenuRotateHmd;
	float MenuScaleHmd;
	float MenuSideOffsetHmd;
	float OffWorldDistance;
	float PathRenderingSelectedEndAlpha;
	float PathRenderingSelectedStartAlpha;
	float PathRenderingSelectedStepAlpha;
	float PathRenderingUnselectedEndAlpha;
	float PathRenderingUnselectedStartAlpha;
	float PathRenderingUnselectedStepAlpha;
	float PathToTargetIndicatorTimeFactor;
	float PathToTargetLineTimeFactor;
	float PathUIAlpha;
	float PathUIConfirmSelectionMultiplier;
	float PathUIDotLength;
	float PathUIGapLength;
	float PathUIHeight;
	float PathUISelectionGenerosity;
	float PathUISelectionHandInvalidLength;
	float PathUISelectionHandLineSelectAngle;
	float PathUISelectionHandSystemSelectAngle;
	float PathUISelectionMouseDeadZone;
	float PathUISelectionMouseSmoothRate;
	float PathUISelectionMultiplierMouse;
	float PathUISelectionMultiplierPad;
	float PathUISelectionMultiplierPushing;
	float PathUISlotRadiusInner;
	float PathUISlotRadiusOuter;
	float PathUISlotRadiusRing;
	float PathUISlotSpacing;
	float PathUISlotWidthRing;
	float PathUIWidth;
	float PathUIXOffset;
	float PathUIYOffset;
	float PlanetUIIconLargeScale;
	float PlanetUIIconMediumScale;
	float PlanetUIIconSmallScale;
	float PurpleRevealFixedZoom;
	float PurpleStarRevealAnimTime;
	float SelectionTreeAlpha;
	float ShowPopupAtCameraMinDistance;
	float ShowUIHelpDuration;
	int32_t SolarInfoPanelHeight;
	float SolarInfoPanelScaleVR;
	int32_t SolarInfoPanelWidth;
	float SolarLabelScaleDistanceVR;
	float SolarMarkerPanelScaleVR;
	float StarBlurIntroMultiplier;
	float StarBlurLineWidth;
	float StarBlurMaxBlurLength;
	float StarBlurMaxDistanceFromCamera;
	float StarBlurSizeMultiplier;
	float StarPathUIWidth;
	float SystemInfoPanelGeneralAlpha;
	float TimeForGalmapAutoNavModeSelectionInSeconds;
	float TransitionTime;
	NMS_Toolkit::TkCurveType AnostreakAlphaCurve;
	NMS_Toolkit::TkCurveType AnostreakValueCurve;
	bool GizmoOnHand;
	NMS_Toolkit::TkCurveType MarkerPulseEndCurve;
	NMS_Toolkit::TkCurveType MarkerPulseStartCurve;
	bool NewStyleLookAtCamera;
	NMS_Toolkit::TkCurveType TransitionOutCurve;

	friend bool operator==(const GcGalaxyGlobals& lhs, const GcGalaxyGlobals& rhs) 
	{
		return std::equal(std::begin(lhs.MarkerSettings), std::end(lhs.MarkerSettings), std::begin(rhs.MarkerSettings)) &&
		lhs.DefaultRenderSetup == rhs.DefaultRenderSetup &&
		lhs.FinalAnimationRenderSetup == rhs.FinalAnimationRenderSetup &&
		lhs.DefaultGeneration == rhs.DefaultGeneration &&
		lhs.FinalAnimationGeneration == rhs.FinalAnimationGeneration &&
		std::equal(std::begin(lhs.RaceFilterDefaultColours), std::end(lhs.RaceFilterDefaultColours), std::begin(rhs.RaceFilterDefaultColours)) &&
		std::equal(std::begin(lhs.RaceFilterDeuteranopiaColours), std::end(lhs.RaceFilterDeuteranopiaColours), std::begin(rhs.RaceFilterDeuteranopiaColours)) &&
		std::equal(std::begin(lhs.RaceFilterProtanopiaColours), std::end(lhs.RaceFilterProtanopiaColours), std::begin(rhs.RaceFilterProtanopiaColours)) &&
		std::equal(std::begin(lhs.RaceFilterTritanopiaColours), std::end(lhs.RaceFilterTritanopiaColours), std::begin(rhs.RaceFilterTritanopiaColours)) &&
		std::equal(std::begin(lhs.EconomyFilterDefaultColours), std::end(lhs.EconomyFilterDefaultColours), std::begin(rhs.EconomyFilterDefaultColours)) &&
		std::equal(std::begin(lhs.EconomyFilterDeuteranopiaColours), std::end(lhs.EconomyFilterDeuteranopiaColours), std::begin(rhs.EconomyFilterDeuteranopiaColours)) &&
		std::equal(std::begin(lhs.EconomyFilterProtanopiaColours), std::end(lhs.EconomyFilterProtanopiaColours), std::begin(rhs.EconomyFilterProtanopiaColours)) &&
		std::equal(std::begin(lhs.EconomyFilterTritanopiaColours), std::end(lhs.EconomyFilterTritanopiaColours), std::begin(rhs.EconomyFilterTritanopiaColours)) &&
		std::equal(std::begin(lhs.GalacticWaypointDefaultColours), std::end(lhs.GalacticWaypointDefaultColours), std::begin(rhs.GalacticWaypointDefaultColours)) &&
		std::equal(std::begin(lhs.GalacticWaypointDeuteranopiaColours), std::end(lhs.GalacticWaypointDeuteranopiaColours), std::begin(rhs.GalacticWaypointDeuteranopiaColours)) &&
		std::equal(std::begin(lhs.GalacticWaypointProtanopiaColours), std::end(lhs.GalacticWaypointProtanopiaColours), std::begin(rhs.GalacticWaypointProtanopiaColours)) &&
		std::equal(std::begin(lhs.GalacticWaypointTritanopiaColours), std::end(lhs.GalacticWaypointTritanopiaColours), std::begin(rhs.GalacticWaypointTritanopiaColours)) &&
		lhs.BaseStarDefaultColours == rhs.BaseStarDefaultColours &&
		lhs.BaseStarDeuteranopiaColours == rhs.BaseStarDeuteranopiaColours &&
		lhs.BaseStarProtanopiaColours == rhs.BaseStarProtanopiaColours &&
		lhs.BaseStarTritanopiaColours == rhs.BaseStarTritanopiaColours &&
		std::equal(std::begin(lhs.ConflictFilterDefaultColours), std::end(lhs.ConflictFilterDefaultColours), std::begin(rhs.ConflictFilterDefaultColours)) &&
		std::equal(std::begin(lhs.ConflictFilterDeuteranopiaColours), std::end(lhs.ConflictFilterDeuteranopiaColours), std::begin(rhs.ConflictFilterDeuteranopiaColours)) &&
		std::equal(std::begin(lhs.ConflictFilterProtanopiaColours), std::end(lhs.ConflictFilterProtanopiaColours), std::begin(rhs.ConflictFilterProtanopiaColours)) &&
		std::equal(std::begin(lhs.ConflictFilterTritanopiaColours), std::end(lhs.ConflictFilterTritanopiaColours), std::begin(rhs.ConflictFilterTritanopiaColours)) &&
		lhs.AnostreakAway == rhs.AnostreakAway &&
		lhs.AnostreakFacing == rhs.AnostreakFacing &&
		lhs.HandMenuOffset == rhs.HandMenuOffset &&
		lhs.HandGizmoColourAt == rhs.HandGizmoColourAt &&
		lhs.HandGizmoColourInner == rhs.HandGizmoColourInner &&
		lhs.HandGizmoColourRight == rhs.HandGizmoColourRight &&
		lhs.HandGizmoColourUp == rhs.HandGizmoColourUp &&
		lhs.HandGizmoHeadOffset == rhs.HandGizmoHeadOffset &&
		lhs.SelectionTreeColour == rhs.SelectionTreeColour &&
		lhs.MarkerDefaultHex == rhs.MarkerDefaultHex &&
		lhs.Camera == rhs.Camera &&
		lhs.SolarSystemParameters == rhs.SolarSystemParameters &&
		lhs.Audio == rhs.Audio &&
		lhs.ClickToSelectIconOffset == rhs.ClickToSelectIconOffset &&
		lhs.GoalDistanceRange == rhs.GoalDistanceRange &&
		lhs.SolarInfoPanelAlignment == rhs.SolarInfoPanelAlignment &&
		lhs.SolarInfoPanelLineOffset == rhs.SolarInfoPanelLineOffset &&
		lhs.SolarInfoPanelOffset == rhs.SolarInfoPanelOffset &&
		lhs.SolarInfoPanelOffsetVR == rhs.SolarInfoPanelOffsetVR &&
		lhs.SolarMarkerAlignmentVR == rhs.SolarMarkerAlignmentVR &&
		lhs.SolarMarkerOriginOffsetVR == rhs.SolarMarkerOriginOffsetVR &&
		lhs.SolarMarkerOriginOffsetVRPS4 == rhs.SolarMarkerOriginOffsetVRPS4 &&
		lhs.SolarMarkerSizeVR == rhs.SolarMarkerSizeVR &&
		lhs.SolarMarkerSizeVRPS4 == rhs.SolarMarkerSizeVRPS4 &&
		lhs.AnostreakAlpha == rhs.AnostreakAlpha &&
		lhs.ClickToSelectIconScale == rhs.ClickToSelectIconScale &&
		lhs.DistanceComputerScale == rhs.DistanceComputerScale &&
		lhs.EarlyStageMultiplier == rhs.EarlyStageMultiplier &&
		lhs.FadeGameInTime == rhs.FadeGameInTime &&
		lhs.FadeGameOutTime == rhs.FadeGameOutTime &&
		lhs.FadeMapInTime == rhs.FadeMapInTime &&
		lhs.FadeMapOutTime == rhs.FadeMapOutTime &&
		lhs.FadeGameOutTimeCentreJourney == rhs.FadeGameOutTimeCentreJourney &&
		lhs.FadeMapInTimeCentreJourney == rhs.FadeMapInTimeCentreJourney &&
		lhs.FinalFadedTime == rhs.FinalFadedTime &&
		lhs.FinalFadeInRate == rhs.FinalFadeInRate &&
		lhs.FinalFadeOutRate == rhs.FinalFadeOutRate &&
		lhs.FinalHoldTime == rhs.FinalHoldTime &&
		lhs.FinalHoldTowardsCenterTime == rhs.FinalHoldTowardsCenterTime &&
		lhs.FinalTransitionAcceleration == rhs.FinalTransitionAcceleration &&
		lhs.FinalTransitionInterpolationValue == rhs.FinalTransitionInterpolationValue &&
		lhs.FinalTransitionMaxSpeed == rhs.FinalTransitionMaxSpeed &&
		lhs.GalacticPathMaximumJumpDistanceLightyears == rhs.GalacticPathMaximumJumpDistanceLightyears &&
		lhs.GalacticPathPreferGuideStarsTillJump == rhs.GalacticPathPreferGuideStarsTillJump &&
		lhs.HandControlDefaultOffset == rhs.HandControlDefaultOffset &&
		lhs.HandControlFreeMoveAngleOffset == rhs.HandControlFreeMoveAngleOffset &&
		lhs.HandControlFreeMoveMaxOffset == rhs.HandControlFreeMoveMaxOffset &&
		lhs.HandControlGizmoScale == rhs.HandControlGizmoScale &&
		lhs.HandControlMaxLockDistance == rhs.HandControlMaxLockDistance &&
		lhs.HandControlMaxOffset == rhs.HandControlMaxOffset &&
		lhs.HandControlMinLockDistance == rhs.HandControlMinLockDistance &&
		lhs.HandControlMoveBlendRate == rhs.HandControlMoveBlendRate &&
		lhs.HandControlMoveSpeed == rhs.HandControlMoveSpeed &&
		lhs.HandControlMoveSpeedTurbo == rhs.HandControlMoveSpeedTurbo &&
		lhs.HandControlPitchSpeed == rhs.HandControlPitchSpeed &&
		lhs.HandControlPointerLength == rhs.HandControlPointerLength &&
		lhs.HandControlPointerLengthMini == rhs.HandControlPointerLengthMini &&
		lhs.HandControlRotateBlendRate == rhs.HandControlRotateBlendRate &&
		lhs.HandControlRotateSpeed == rhs.HandControlRotateSpeed &&
		lhs.HandControlWarpSelectAngle == rhs.HandControlWarpSelectAngle &&
		lhs.HandControlZoomSpeed == rhs.HandControlZoomSpeed &&
		lhs.HandGizmoInnerRadius == rhs.HandGizmoInnerRadius &&
		lhs.HandGizmoInnerThickness == rhs.HandGizmoInnerThickness &&
		lhs.HandGizmoLineThickness == rhs.HandGizmoLineThickness &&
		lhs.HandGizmoMinAlpha == rhs.HandGizmoMinAlpha &&
		lhs.HandGizmoRadius == rhs.HandGizmoRadius &&
		lhs.HandPitchFactorMin == rhs.HandPitchFactorMin &&
		lhs.HandPitchFactorRange == rhs.HandPitchFactorRange &&
		lhs.HandPitchMaxDistance == rhs.HandPitchMaxDistance &&
		lhs.HandTurnFactorMin == rhs.HandTurnFactorMin &&
		lhs.HandTurnFactorRange == rhs.HandTurnFactorRange &&
		lhs.HandZoomFactorMin == rhs.HandZoomFactorMin &&
		lhs.HandZoomFactorRange == rhs.HandZoomFactorRange &&
		lhs.HexMarkerOuterWidth == rhs.HexMarkerOuterWidth &&
		lhs.HexMarkerRadius == rhs.HexMarkerRadius &&
		lhs.HexMarkerRotation == rhs.HexMarkerRotation &&
		lhs.HexMarkerWidth == rhs.HexMarkerWidth &&
		lhs.HexStackOffsetX == rhs.HexStackOffsetX &&
		lhs.HexStackOffsetXOdd == rhs.HexStackOffsetXOdd &&
		lhs.HexStackOffsetY == rhs.HexStackOffsetY &&
		lhs.IntroCameraLookSmoothRate == rhs.IntroCameraLookSmoothRate &&
		lhs.IntroFadeInRate == rhs.IntroFadeInRate &&
		lhs.IntroFadeOutRate == rhs.IntroFadeOutRate &&
		lhs.IntroTitleFadeTrigger == rhs.IntroTitleFadeTrigger &&
		lhs.IntroTitleHoldTime == rhs.IntroTitleHoldTime &&
		lhs.IntroTitleTextureScale == rhs.IntroTitleTextureScale &&
		lhs.LargeAreaColourScale == rhs.LargeAreaColourScale &&
		lhs.LastSelectedPathAlphaMul == rhs.LastSelectedPathAlphaMul &&
		lhs.MarkerDropShadowMult == rhs.MarkerDropShadowMult &&
		lhs.MarkerDropShadowSize == rhs.MarkerDropShadowSize &&
		lhs.MenuCursorRadiusHmd == rhs.MenuCursorRadiusHmd &&
		lhs.MenuOffsetHmd == rhs.MenuOffsetHmd &&
		lhs.MenuRotateHmd == rhs.MenuRotateHmd &&
		lhs.MenuScaleHmd == rhs.MenuScaleHmd &&
		lhs.MenuSideOffsetHmd == rhs.MenuSideOffsetHmd &&
		lhs.OffWorldDistance == rhs.OffWorldDistance &&
		lhs.PathRenderingSelectedEndAlpha == rhs.PathRenderingSelectedEndAlpha &&
		lhs.PathRenderingSelectedStartAlpha == rhs.PathRenderingSelectedStartAlpha &&
		lhs.PathRenderingSelectedStepAlpha == rhs.PathRenderingSelectedStepAlpha &&
		lhs.PathRenderingUnselectedEndAlpha == rhs.PathRenderingUnselectedEndAlpha &&
		lhs.PathRenderingUnselectedStartAlpha == rhs.PathRenderingUnselectedStartAlpha &&
		lhs.PathRenderingUnselectedStepAlpha == rhs.PathRenderingUnselectedStepAlpha &&
		lhs.PathToTargetIndicatorTimeFactor == rhs.PathToTargetIndicatorTimeFactor &&
		lhs.PathToTargetLineTimeFactor == rhs.PathToTargetLineTimeFactor &&
		lhs.PathUIAlpha == rhs.PathUIAlpha &&
		lhs.PathUIConfirmSelectionMultiplier == rhs.PathUIConfirmSelectionMultiplier &&
		lhs.PathUIDotLength == rhs.PathUIDotLength &&
		lhs.PathUIGapLength == rhs.PathUIGapLength &&
		lhs.PathUIHeight == rhs.PathUIHeight &&
		lhs.PathUISelectionGenerosity == rhs.PathUISelectionGenerosity &&
		lhs.PathUISelectionHandInvalidLength == rhs.PathUISelectionHandInvalidLength &&
		lhs.PathUISelectionHandLineSelectAngle == rhs.PathUISelectionHandLineSelectAngle &&
		lhs.PathUISelectionHandSystemSelectAngle == rhs.PathUISelectionHandSystemSelectAngle &&
		lhs.PathUISelectionMouseDeadZone == rhs.PathUISelectionMouseDeadZone &&
		lhs.PathUISelectionMouseSmoothRate == rhs.PathUISelectionMouseSmoothRate &&
		lhs.PathUISelectionMultiplierMouse == rhs.PathUISelectionMultiplierMouse &&
		lhs.PathUISelectionMultiplierPad == rhs.PathUISelectionMultiplierPad &&
		lhs.PathUISelectionMultiplierPushing == rhs.PathUISelectionMultiplierPushing &&
		lhs.PathUISlotRadiusInner == rhs.PathUISlotRadiusInner &&
		lhs.PathUISlotRadiusOuter == rhs.PathUISlotRadiusOuter &&
		lhs.PathUISlotRadiusRing == rhs.PathUISlotRadiusRing &&
		lhs.PathUISlotSpacing == rhs.PathUISlotSpacing &&
		lhs.PathUISlotWidthRing == rhs.PathUISlotWidthRing &&
		lhs.PathUIWidth == rhs.PathUIWidth &&
		lhs.PathUIXOffset == rhs.PathUIXOffset &&
		lhs.PathUIYOffset == rhs.PathUIYOffset &&
		lhs.PlanetUIIconLargeScale == rhs.PlanetUIIconLargeScale &&
		lhs.PlanetUIIconMediumScale == rhs.PlanetUIIconMediumScale &&
		lhs.PlanetUIIconSmallScale == rhs.PlanetUIIconSmallScale &&
		lhs.PurpleRevealFixedZoom == rhs.PurpleRevealFixedZoom &&
		lhs.PurpleStarRevealAnimTime == rhs.PurpleStarRevealAnimTime &&
		lhs.SelectionTreeAlpha == rhs.SelectionTreeAlpha &&
		lhs.ShowPopupAtCameraMinDistance == rhs.ShowPopupAtCameraMinDistance &&
		lhs.ShowUIHelpDuration == rhs.ShowUIHelpDuration &&
		lhs.SolarInfoPanelHeight == rhs.SolarInfoPanelHeight &&
		lhs.SolarInfoPanelScaleVR == rhs.SolarInfoPanelScaleVR &&
		lhs.SolarInfoPanelWidth == rhs.SolarInfoPanelWidth &&
		lhs.SolarLabelScaleDistanceVR == rhs.SolarLabelScaleDistanceVR &&
		lhs.SolarMarkerPanelScaleVR == rhs.SolarMarkerPanelScaleVR &&
		lhs.StarBlurIntroMultiplier == rhs.StarBlurIntroMultiplier &&
		lhs.StarBlurLineWidth == rhs.StarBlurLineWidth &&
		lhs.StarBlurMaxBlurLength == rhs.StarBlurMaxBlurLength &&
		lhs.StarBlurMaxDistanceFromCamera == rhs.StarBlurMaxDistanceFromCamera &&
		lhs.StarBlurSizeMultiplier == rhs.StarBlurSizeMultiplier &&
		lhs.StarPathUIWidth == rhs.StarPathUIWidth &&
		lhs.SystemInfoPanelGeneralAlpha == rhs.SystemInfoPanelGeneralAlpha &&
		lhs.TimeForGalmapAutoNavModeSelectionInSeconds == rhs.TimeForGalmapAutoNavModeSelectionInSeconds &&
		lhs.TransitionTime == rhs.TransitionTime &&
		lhs.AnostreakAlphaCurve == rhs.AnostreakAlphaCurve &&
		lhs.AnostreakValueCurve == rhs.AnostreakValueCurve &&
		lhs.GizmoOnHand == rhs.GizmoOnHand &&
		lhs.MarkerPulseEndCurve == rhs.MarkerPulseEndCurve &&
		lhs.MarkerPulseStartCurve == rhs.MarkerPulseStartCurve &&
		lhs.NewStyleLookAtCamera == rhs.NewStyleLookAtCamera &&
		lhs.TransitionOutCurve == rhs.TransitionOutCurve;
	}
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimNodeData
{
	int32_t RotIndex;
	int32_t ScaleIndex;
	int32_t TransIndex;
	NMS::NMSString0x40 Node;

	friend bool operator==(const TkAnimNodeData& lhs, const TkAnimNodeData& rhs) 
	{
		return lhs.RotIndex == rhs.RotIndex &&
		lhs.ScaleIndex == rhs.ScaleIndex &&
		lhs.TransIndex == rhs.TransIndex &&
		lhs.Node == rhs.Node;
	}
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcLightShaftProperties
//Dependency: Vector2f
//Dependency: TkImGuiSettings
//Dependency: TkGraphicsDetailPreset
//Dependency: Vector4f
//Dependency: Colour
struct GcGraphicsGlobals
{
	NMS_Toolkit::TkImGuiSettings ImGui;
	NMS::Vector4f ShellsSettings[4];
	NMS::Vector4f TessSettings[4];
	NMS_GameComponents::GcLightShaftProperties LightShaftProperties;
	NMS_GameComponents::GcLightShaftProperties StormLightShaftProperties;
	NMS::Vector4f LensParams;
	NMS::Vector4f MipLevelDebug;
	NMS::Colour ScanColour;
	NMS::Vector4f ShadowBias;
	NMS::Vector4f ShadowSplit;
	NMS::Vector4f ShadowSplitCameraView;
	NMS::Vector4f ShadowSplitShip;
	NMS::Vector4f ShadowSplitSpace;
	NMS::Vector4f ShadowSplitStation;
	NMS::Vector4f TaaSettings;
	NMS::Vector4f TerrainMipDistanceHigh;
	NMS::Vector4f TerrainMipDistanceLow;
	NMS::Vector4f TerrainMipDistanceMed;
	NMS::Vector4f TerrainMipDistanceUlt;
	NMS::Colour UIColour;
	NMS::Colour UIShipColour;
	NMS::Colour VerticalColourBottom;
	NMS::Colour VerticalColourTop;
	NMS::Vector4f VerticalGradient;
	std::vector<int32_t> CascadeRenderSequence;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetsPC[4];
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetiOS;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetMacOS;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetNX64Handheld;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetOberon;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4Pro;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4ProVR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4VR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS5;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS5VR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetSwitch2Handheld;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetTrinity;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetTrinityVR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetXB1;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetXB1X;
	float VariableUpdatePeriodModifers[4];
	NMS::Vector2f WindDir1;
	NMS::Vector2f WindDir2;
	float AlphaCutoutMax;
	float AlphaCutoutMin;
	float AtmosphereSize;
	float Brightness;
	float Contrast;
	float DirectionLightFOV;
	float DirectionLightRadius;
	float DirectionLightShadowBias;
	float DOFAmountManual;
	float DOFAmountManualFull;
	float DOFAmountManualFullIndoor;
	float DOFAmountManualLight;
	float DOFAmountManualLightIndoor;
	float DOFAutoFarAmount;
	float DOFAutoFarFarPlane;
	float DOFAutoFarFarPlaneFade;
	float DOFAutoFarNearPlane;
	float DOFFarFadeDistance;
	float DOFFarFadeDistanceCave;
	float DOFFarFadeDistanceInteraction;
	float DOFFarFadeDistanceManual;
	float DOFFarFadeDistanceManualIndoor;
	float DOFFarFadeDistanceSpace;
	float DOFFarFadeDistanceWater;
	float DOFFarPlane;
	float DOFFarPlaneCave;
	float DOFFarPlaneInteraction;
	float DOFFarPlaneManual;
	float DOFFarPlaneSpace;
	float DOFFarPlaneWater;
	float DOFFarStrengthWater;
	float DOFNearAdjustInteraction;
	float DOFNearFadeDistance;
	float DOFNearFadeDistanceManual;
	float DOFNearMinInteraction;
	float DOFNearPlane;
	float FarClipDistance;
	float FoliageSaturationMax;
	float FoliageSaturationMin;
	float FoliageValueMax;
	float FoliageValueMin;
	float FrustumJitterAmount;
	float FrustumJitterAmountDLSS;
	float GrassSaturationMax;
	float GrassSaturationMin;
	float GrassValueMax;
	float GrassValueMin;
	float HBAOBias;
	float HBAOIntensity;
	float HBAORadius;
	float HDRExposure;
	float HDRExposureCave;
	float HDRGamma;
	float HDRLutExposure;
	float HDRLutGamma;
	float HDRLutToe;
	float HDROffset;
	float HDROffsetCave;
	float HDRThreshold;
	float HDRThresholdCave;
	float HUDDistance;
	float HUDMotionPos;
	float HUDMotionPosSpring;
	float HUDMotionX;
	float HUDMotionXSpring;
	float HUDMotionY;
	float HUDMotionYSpring;
	float HueVariance;
	float LensDirt;
	float LensDirtCave;
	float LensOffset;
	float LensOffsetCave;
	float LensScale;
	float LensScaleCave;
	float LensThreshold;
	float LensThresholdCave;
	float LowHealthDesaturationIntensityMax;
	float LowHealthDesaturationIntensityMin;
	float LowHealthDesaturationIntensityTimeSinceHit;
	float LowHealthFadeInTime;
	float LowHealthFadeOutTime;
	float LowHealthOverlayIntensity;
	float LowHealthPulseRateFullShield;
	float LowHealthPulseRateLowShield;
	float LowHealthStrengthFullShield;
	float LowHealthStrengthLowShield;
	float LowHealthVignetteEnd;
	float LowHealthVignetteStart;
	float LUTDistanceFlightMultiplier;
	float MaxParticleRenderRange;
	float MaxParticleRenderRangeSpace;
	float MaxSpaceFogStrength;
	float MinPixelSizeOfObjectsInShadowsCockpitOnPlanet;
	float MinPixelSizeOfObjectsInShadowsPlanet;
	float MinPixelSizeOfObjectsInShadowsSpace;
	float ModelRendererLightIntensity;
	float MotionBlurShutterAngle;
	float MotionBlurShutterSpeed;
	float MotionBlurThresholdDefault;
	float MotionBlurThresholdInVehicle;
	float MotionBlurThresholdOnFoot;
	float MotionBlurThresholdSpace;
	float NearClipDistance;
	float New_BounceLightIntensity;
	float New_BounceLightPower;
	float New_BounceLightWarp;
	float New_SideRimColourMixer;
	float New_SideRimWarp;
	float New_SkyLightIntensity;
	float New_SkyLightPower;
	float New_SkyLightWarp;
	float New_TopRimColourMixer;
	float New_TopRimIntensity;
	float New_TopRimPower;
	float New_TopRimWarp;
	float NoFocusMaxFPS;
	float Old_BounceLightIntensity;
	float Old_BounceLightPower;
	float Old_BounceLightWarp;
	float Old_SideRimColourMixer;
	float Old_SideRimWarp;
	float Old_SkyLightIntensity;
	float Old_SkyLightPower;
	float Old_SkyLightWarp;
	float Old_TopRimColourMixer;
	float Old_TopRimIntensity;
	float Old_TopRimPower;
	float Old_TopRimWarp;
	float PetModelRendererLightIntensity;
	float PhotoModeBloomGainMax;
	float PhotoModeBloomGainMedium;
	float PhotoModeBloomGainMin;
	float PhotoModeBloomThresholdMax;
	float PhotoModeBloomThresholdMedium;
	float PhotoModeBloomThresholdMin;
	float PhotoModeDefaultBloomValue;
	float PhotoModeMediumValue;
	float QuantizeTime;
	float QuantizeTimeCameraView;
	float QuantizeTimeShip;
	float QuantizeTimeSpace;
	float Redo_BounceIntensity;
	float Redo_LightIntensity;
	float Redo_SkyIntensity;
	float ReflectionStrength;
	float RingAvoidanceSphereInterpTime;
	float RingRadius;
	float RingSize;
	float Saturation;
	float SaturationVariance;
	float ScanAlpha;
	float ScanBandWidth;
	float ScanClamp;
	float ScanDistance;
	float ScanEffectSpeed;
	float ScanFadeInTime;
	float ScanFadeOutTime;
	float ScanFresnel;
	float ScanHeightScale;
	float ScanHorizontalScale;
	float ScanObjectFade;
	float ShadowBillboardOffset;
	float ShadowLength;
	float ShadowLengthCameraView;
	float ShadowLengthFreighter;
	float ShadowLengthFreighterAbandoned;
	float ShadowLengthShip;
	float ShadowLengthSpace;
	float ShadowLengthStation;
	int32_t ShadowMapSize;
	float SharpenFilterAmount;
	float SharpenFilterDepthFactorEnd;
	float SharpenFilterDepthFactorStart;
	float ShieldDownScanlineTime;
	float Single1ScanBandWidth;
	float Single1ScanEffectSpeed;
	float Single1ScanHeightScale;
	float Single1ScanHorizontalScale;
	float Single1ScanObjectFade;
	float Single1ScanTime;
	float Single2ScanBandWidth;
	float Single2ScanEffectSpeed;
	float Single2ScanHeightScale;
	float Single2ScanHorizontalScale;
	float Single2ScanObjectFade;
	float Single2ScanTime;
	float SkySaturationMax;
	float SkySaturationMin;
	float SkyValueMax;
	float SkyValueMin;
	float SpaceIBLBlendDistance;
	float SpaceIBLBlendStart;
	float SpaceMieFactor;
	float SpaceScale;
	float SpaceSunFactor;
	float SunLightBlendTime;
	float SunLightIntensity;
	float SunRayDecay;
	float SunRayDensity;
	float SunRayExposure;
	float SunRayWeight;
	int32_t SupersamplingLevel;
	float TaaAccumDelay;
	float TaaHighFreqConstant;
	float TaaLowFreqConstant;
	int32_t TargetTextureMemUsageMB;
	float TeleportFlashTime;
	int32_t TerrainAnisoHi;
	int32_t TerrainAnisoLow;
	int32_t TerrainAnisoMed;
	int32_t TerrainAnisoUlt;
	int32_t TerrainBlocksPerFrameHi;
	int32_t TerrainBlocksPerFrameLow;
	int32_t TerrainBlocksPerFrameMed;
	int32_t TerrainBlocksPerFrameOberon;
	int32_t TerrainBlocksPerFramePs430;
	int32_t TerrainBlocksPerFramePs460;
	int32_t TerrainBlocksPerFrameUlt;
	int32_t TerrainBlocksPerFrameXb130;
	int32_t TerrainBlocksPerFrameXb160;
	int32_t TerrainDroppedMipsLow;
	int32_t TerrainDroppedMipsMed;
	float TerrainMipBiasLow;
	float TerrainMipBiasMed;
	float ToneMapExposure;
	float ToneMapExposureCave;
	float ValueVariance;
	float VignetteEnd;
	float VignetteEndMoveVR;
	float VignetteEndMoveVRShip;
	float VignetteEndRidingVR;
	float VignetteEndTurnRidingVR;
	float VignetteEndTurnVR;
	float VignetteEndTurnVRShip;
	float VignetteStart;
	float VignetteStartMoveVR;
	float VignetteStartMoveVRShip;
	float VignetteStartRidingVR;
	float VignetteStartTurnRidingVR;
	float VignetteStartTurnVR;
	float VignetteStartTurnVRShip;
	float VignetteVRMoveInterpTime;
	float VignetteVRMoveInterpTimeShip;
	float VignetteVRRidingInterpTime;
	float VignetteVRTurnInterpTime;
	float VignetteVRTurnInterpTimeShip;
	float VignetteVRTurnRidingInterpTime;
	float WarpK;
	float WarpKCube;
	float WarpKDispersion;
	float WarpScale;
	float WaterHueShift;
	float WaterSaturation;
	float WaterValue;
	float WonderModelRendererLightIntensity;
	bool AllowPartialCascadeRender;
	bool ApplyTaaTest;
	bool CenterRenderSpaceOffset;
	bool DebugLinesDepthTest;
	bool DOFEnableBokeh;
	bool DOFEnableNewBokehShader;
	bool DOFEnablePhysCamera;
	bool EnableCrossPipeSharing;
	bool EnableSSR;
	bool EnableTerrainCachePs4Base;
	bool EnableTerrainCachePs4Pro;
	bool EnableTerrainCacheXb1Base;
	bool EnableTerrainCacheXb1X;
	bool EnableTextureStreaming;
	bool EnableVariableUpdate;
	bool ForceCachedTerrain;
	bool ForceEvictAllTextures;
	bool ForceStreamAllTextures;
	bool ForceUncachedTerrain;
	bool FullscreenScanEffect;
	bool IBLReflections;
	bool Redo_On;
	bool ShadowQuantized;
	bool ShowReflectionProbes;
	bool ShowTaaBuf;
	bool ShowTaaCVarianceBuf;
	bool ShowTaaNVarianceBuf;
	bool ShowTaaVarianceBuf;
	bool TonemapInLuminance;
	bool UseImposters;
	bool UseTaaResolve;

	friend bool operator==(const GcGraphicsGlobals& lhs, const GcGraphicsGlobals& rhs) 
	{
		return lhs.ImGui == rhs.ImGui &&
		std::equal(std::begin(lhs.ShellsSettings), std::end(lhs.ShellsSettings), std::begin(rhs.ShellsSettings)) &&
		std::equal(std::begin(lhs.TessSettings), std::end(lhs.TessSettings), std::begin(rhs.TessSettings)) &&
		lhs.LightShaftProperties == rhs.LightShaftProperties &&
		lhs.StormLightShaftProperties == rhs.StormLightShaftProperties &&
		lhs.LensParams == rhs.LensParams &&
		lhs.MipLevelDebug == rhs.MipLevelDebug &&
		lhs.ScanColour == rhs.ScanColour &&
		lhs.ShadowBias == rhs.ShadowBias &&
		lhs.ShadowSplit == rhs.ShadowSplit &&
		lhs.ShadowSplitCameraView == rhs.ShadowSplitCameraView &&
		lhs.ShadowSplitShip == rhs.ShadowSplitShip &&
		lhs.ShadowSplitSpace == rhs.ShadowSplitSpace &&
		lhs.ShadowSplitStation == rhs.ShadowSplitStation &&
		lhs.TaaSettings == rhs.TaaSettings &&
		lhs.TerrainMipDistanceHigh == rhs.TerrainMipDistanceHigh &&
		lhs.TerrainMipDistanceLow == rhs.TerrainMipDistanceLow &&
		lhs.TerrainMipDistanceMed == rhs.TerrainMipDistanceMed &&
		lhs.TerrainMipDistanceUlt == rhs.TerrainMipDistanceUlt &&
		lhs.UIColour == rhs.UIColour &&
		lhs.UIShipColour == rhs.UIShipColour &&
		lhs.VerticalColourBottom == rhs.VerticalColourBottom &&
		lhs.VerticalColourTop == rhs.VerticalColourTop &&
		lhs.VerticalGradient == rhs.VerticalGradient &&
		lhs.CascadeRenderSequence == rhs.CascadeRenderSequence &&
		std::equal(std::begin(lhs.GraphicsDetailPresetsPC), std::end(lhs.GraphicsDetailPresetsPC), std::begin(rhs.GraphicsDetailPresetsPC)) &&
		lhs.GraphicsDetailPresetiOS == rhs.GraphicsDetailPresetiOS &&
		lhs.GraphicsDetailPresetMacOS == rhs.GraphicsDetailPresetMacOS &&
		lhs.GraphicsDetailPresetNX64Handheld == rhs.GraphicsDetailPresetNX64Handheld &&
		lhs.GraphicsDetailPresetOberon == rhs.GraphicsDetailPresetOberon &&
		lhs.GraphicsDetailPresetPS4 == rhs.GraphicsDetailPresetPS4 &&
		lhs.GraphicsDetailPresetPS4Pro == rhs.GraphicsDetailPresetPS4Pro &&
		lhs.GraphicsDetailPresetPS4ProVR == rhs.GraphicsDetailPresetPS4ProVR &&
		lhs.GraphicsDetailPresetPS4VR == rhs.GraphicsDetailPresetPS4VR &&
		lhs.GraphicsDetailPresetPS5 == rhs.GraphicsDetailPresetPS5 &&
		lhs.GraphicsDetailPresetPS5VR == rhs.GraphicsDetailPresetPS5VR &&
		lhs.GraphicsDetailPresetSwitch2Handheld == rhs.GraphicsDetailPresetSwitch2Handheld &&
		lhs.GraphicsDetailPresetTrinity == rhs.GraphicsDetailPresetTrinity &&
		lhs.GraphicsDetailPresetTrinityVR == rhs.GraphicsDetailPresetTrinityVR &&
		lhs.GraphicsDetailPresetXB1 == rhs.GraphicsDetailPresetXB1 &&
		lhs.GraphicsDetailPresetXB1X == rhs.GraphicsDetailPresetXB1X &&
		std::equal(std::begin(lhs.VariableUpdatePeriodModifers), std::end(lhs.VariableUpdatePeriodModifers), std::begin(rhs.VariableUpdatePeriodModifers)) &&
		lhs.WindDir1 == rhs.WindDir1 &&
		lhs.WindDir2 == rhs.WindDir2 &&
		lhs.AlphaCutoutMax == rhs.AlphaCutoutMax &&
		lhs.AlphaCutoutMin == rhs.AlphaCutoutMin &&
		lhs.AtmosphereSize == rhs.AtmosphereSize &&
		lhs.Brightness == rhs.Brightness &&
		lhs.Contrast == rhs.Contrast &&
		lhs.DirectionLightFOV == rhs.DirectionLightFOV &&
		lhs.DirectionLightRadius == rhs.DirectionLightRadius &&
		lhs.DirectionLightShadowBias == rhs.DirectionLightShadowBias &&
		lhs.DOFAmountManual == rhs.DOFAmountManual &&
		lhs.DOFAmountManualFull == rhs.DOFAmountManualFull &&
		lhs.DOFAmountManualFullIndoor == rhs.DOFAmountManualFullIndoor &&
		lhs.DOFAmountManualLight == rhs.DOFAmountManualLight &&
		lhs.DOFAmountManualLightIndoor == rhs.DOFAmountManualLightIndoor &&
		lhs.DOFAutoFarAmount == rhs.DOFAutoFarAmount &&
		lhs.DOFAutoFarFarPlane == rhs.DOFAutoFarFarPlane &&
		lhs.DOFAutoFarFarPlaneFade == rhs.DOFAutoFarFarPlaneFade &&
		lhs.DOFAutoFarNearPlane == rhs.DOFAutoFarNearPlane &&
		lhs.DOFFarFadeDistance == rhs.DOFFarFadeDistance &&
		lhs.DOFFarFadeDistanceCave == rhs.DOFFarFadeDistanceCave &&
		lhs.DOFFarFadeDistanceInteraction == rhs.DOFFarFadeDistanceInteraction &&
		lhs.DOFFarFadeDistanceManual == rhs.DOFFarFadeDistanceManual &&
		lhs.DOFFarFadeDistanceManualIndoor == rhs.DOFFarFadeDistanceManualIndoor &&
		lhs.DOFFarFadeDistanceSpace == rhs.DOFFarFadeDistanceSpace &&
		lhs.DOFFarFadeDistanceWater == rhs.DOFFarFadeDistanceWater &&
		lhs.DOFFarPlane == rhs.DOFFarPlane &&
		lhs.DOFFarPlaneCave == rhs.DOFFarPlaneCave &&
		lhs.DOFFarPlaneInteraction == rhs.DOFFarPlaneInteraction &&
		lhs.DOFFarPlaneManual == rhs.DOFFarPlaneManual &&
		lhs.DOFFarPlaneSpace == rhs.DOFFarPlaneSpace &&
		lhs.DOFFarPlaneWater == rhs.DOFFarPlaneWater &&
		lhs.DOFFarStrengthWater == rhs.DOFFarStrengthWater &&
		lhs.DOFNearAdjustInteraction == rhs.DOFNearAdjustInteraction &&
		lhs.DOFNearFadeDistance == rhs.DOFNearFadeDistance &&
		lhs.DOFNearFadeDistanceManual == rhs.DOFNearFadeDistanceManual &&
		lhs.DOFNearMinInteraction == rhs.DOFNearMinInteraction &&
		lhs.DOFNearPlane == rhs.DOFNearPlane &&
		lhs.FarClipDistance == rhs.FarClipDistance &&
		lhs.FoliageSaturationMax == rhs.FoliageSaturationMax &&
		lhs.FoliageSaturationMin == rhs.FoliageSaturationMin &&
		lhs.FoliageValueMax == rhs.FoliageValueMax &&
		lhs.FoliageValueMin == rhs.FoliageValueMin &&
		lhs.FrustumJitterAmount == rhs.FrustumJitterAmount &&
		lhs.FrustumJitterAmountDLSS == rhs.FrustumJitterAmountDLSS &&
		lhs.GrassSaturationMax == rhs.GrassSaturationMax &&
		lhs.GrassSaturationMin == rhs.GrassSaturationMin &&
		lhs.GrassValueMax == rhs.GrassValueMax &&
		lhs.GrassValueMin == rhs.GrassValueMin &&
		lhs.HBAOBias == rhs.HBAOBias &&
		lhs.HBAOIntensity == rhs.HBAOIntensity &&
		lhs.HBAORadius == rhs.HBAORadius &&
		lhs.HDRExposure == rhs.HDRExposure &&
		lhs.HDRExposureCave == rhs.HDRExposureCave &&
		lhs.HDRGamma == rhs.HDRGamma &&
		lhs.HDRLutExposure == rhs.HDRLutExposure &&
		lhs.HDRLutGamma == rhs.HDRLutGamma &&
		lhs.HDRLutToe == rhs.HDRLutToe &&
		lhs.HDROffset == rhs.HDROffset &&
		lhs.HDROffsetCave == rhs.HDROffsetCave &&
		lhs.HDRThreshold == rhs.HDRThreshold &&
		lhs.HDRThresholdCave == rhs.HDRThresholdCave &&
		lhs.HUDDistance == rhs.HUDDistance &&
		lhs.HUDMotionPos == rhs.HUDMotionPos &&
		lhs.HUDMotionPosSpring == rhs.HUDMotionPosSpring &&
		lhs.HUDMotionX == rhs.HUDMotionX &&
		lhs.HUDMotionXSpring == rhs.HUDMotionXSpring &&
		lhs.HUDMotionY == rhs.HUDMotionY &&
		lhs.HUDMotionYSpring == rhs.HUDMotionYSpring &&
		lhs.HueVariance == rhs.HueVariance &&
		lhs.LensDirt == rhs.LensDirt &&
		lhs.LensDirtCave == rhs.LensDirtCave &&
		lhs.LensOffset == rhs.LensOffset &&
		lhs.LensOffsetCave == rhs.LensOffsetCave &&
		lhs.LensScale == rhs.LensScale &&
		lhs.LensScaleCave == rhs.LensScaleCave &&
		lhs.LensThreshold == rhs.LensThreshold &&
		lhs.LensThresholdCave == rhs.LensThresholdCave &&
		lhs.LowHealthDesaturationIntensityMax == rhs.LowHealthDesaturationIntensityMax &&
		lhs.LowHealthDesaturationIntensityMin == rhs.LowHealthDesaturationIntensityMin &&
		lhs.LowHealthDesaturationIntensityTimeSinceHit == rhs.LowHealthDesaturationIntensityTimeSinceHit &&
		lhs.LowHealthFadeInTime == rhs.LowHealthFadeInTime &&
		lhs.LowHealthFadeOutTime == rhs.LowHealthFadeOutTime &&
		lhs.LowHealthOverlayIntensity == rhs.LowHealthOverlayIntensity &&
		lhs.LowHealthPulseRateFullShield == rhs.LowHealthPulseRateFullShield &&
		lhs.LowHealthPulseRateLowShield == rhs.LowHealthPulseRateLowShield &&
		lhs.LowHealthStrengthFullShield == rhs.LowHealthStrengthFullShield &&
		lhs.LowHealthStrengthLowShield == rhs.LowHealthStrengthLowShield &&
		lhs.LowHealthVignetteEnd == rhs.LowHealthVignetteEnd &&
		lhs.LowHealthVignetteStart == rhs.LowHealthVignetteStart &&
		lhs.LUTDistanceFlightMultiplier == rhs.LUTDistanceFlightMultiplier &&
		lhs.MaxParticleRenderRange == rhs.MaxParticleRenderRange &&
		lhs.MaxParticleRenderRangeSpace == rhs.MaxParticleRenderRangeSpace &&
		lhs.MaxSpaceFogStrength == rhs.MaxSpaceFogStrength &&
		lhs.MinPixelSizeOfObjectsInShadowsCockpitOnPlanet == rhs.MinPixelSizeOfObjectsInShadowsCockpitOnPlanet &&
		lhs.MinPixelSizeOfObjectsInShadowsPlanet == rhs.MinPixelSizeOfObjectsInShadowsPlanet &&
		lhs.MinPixelSizeOfObjectsInShadowsSpace == rhs.MinPixelSizeOfObjectsInShadowsSpace &&
		lhs.ModelRendererLightIntensity == rhs.ModelRendererLightIntensity &&
		lhs.MotionBlurShutterAngle == rhs.MotionBlurShutterAngle &&
		lhs.MotionBlurShutterSpeed == rhs.MotionBlurShutterSpeed &&
		lhs.MotionBlurThresholdDefault == rhs.MotionBlurThresholdDefault &&
		lhs.MotionBlurThresholdInVehicle == rhs.MotionBlurThresholdInVehicle &&
		lhs.MotionBlurThresholdOnFoot == rhs.MotionBlurThresholdOnFoot &&
		lhs.MotionBlurThresholdSpace == rhs.MotionBlurThresholdSpace &&
		lhs.NearClipDistance == rhs.NearClipDistance &&
		lhs.New_BounceLightIntensity == rhs.New_BounceLightIntensity &&
		lhs.New_BounceLightPower == rhs.New_BounceLightPower &&
		lhs.New_BounceLightWarp == rhs.New_BounceLightWarp &&
		lhs.New_SideRimColourMixer == rhs.New_SideRimColourMixer &&
		lhs.New_SideRimWarp == rhs.New_SideRimWarp &&
		lhs.New_SkyLightIntensity == rhs.New_SkyLightIntensity &&
		lhs.New_SkyLightPower == rhs.New_SkyLightPower &&
		lhs.New_SkyLightWarp == rhs.New_SkyLightWarp &&
		lhs.New_TopRimColourMixer == rhs.New_TopRimColourMixer &&
		lhs.New_TopRimIntensity == rhs.New_TopRimIntensity &&
		lhs.New_TopRimPower == rhs.New_TopRimPower &&
		lhs.New_TopRimWarp == rhs.New_TopRimWarp &&
		lhs.NoFocusMaxFPS == rhs.NoFocusMaxFPS &&
		lhs.Old_BounceLightIntensity == rhs.Old_BounceLightIntensity &&
		lhs.Old_BounceLightPower == rhs.Old_BounceLightPower &&
		lhs.Old_BounceLightWarp == rhs.Old_BounceLightWarp &&
		lhs.Old_SideRimColourMixer == rhs.Old_SideRimColourMixer &&
		lhs.Old_SideRimWarp == rhs.Old_SideRimWarp &&
		lhs.Old_SkyLightIntensity == rhs.Old_SkyLightIntensity &&
		lhs.Old_SkyLightPower == rhs.Old_SkyLightPower &&
		lhs.Old_SkyLightWarp == rhs.Old_SkyLightWarp &&
		lhs.Old_TopRimColourMixer == rhs.Old_TopRimColourMixer &&
		lhs.Old_TopRimIntensity == rhs.Old_TopRimIntensity &&
		lhs.Old_TopRimPower == rhs.Old_TopRimPower &&
		lhs.Old_TopRimWarp == rhs.Old_TopRimWarp &&
		lhs.PetModelRendererLightIntensity == rhs.PetModelRendererLightIntensity &&
		lhs.PhotoModeBloomGainMax == rhs.PhotoModeBloomGainMax &&
		lhs.PhotoModeBloomGainMedium == rhs.PhotoModeBloomGainMedium &&
		lhs.PhotoModeBloomGainMin == rhs.PhotoModeBloomGainMin &&
		lhs.PhotoModeBloomThresholdMax == rhs.PhotoModeBloomThresholdMax &&
		lhs.PhotoModeBloomThresholdMedium == rhs.PhotoModeBloomThresholdMedium &&
		lhs.PhotoModeBloomThresholdMin == rhs.PhotoModeBloomThresholdMin &&
		lhs.PhotoModeDefaultBloomValue == rhs.PhotoModeDefaultBloomValue &&
		lhs.PhotoModeMediumValue == rhs.PhotoModeMediumValue &&
		lhs.QuantizeTime == rhs.QuantizeTime &&
		lhs.QuantizeTimeCameraView == rhs.QuantizeTimeCameraView &&
		lhs.QuantizeTimeShip == rhs.QuantizeTimeShip &&
		lhs.QuantizeTimeSpace == rhs.QuantizeTimeSpace &&
		lhs.Redo_BounceIntensity == rhs.Redo_BounceIntensity &&
		lhs.Redo_LightIntensity == rhs.Redo_LightIntensity &&
		lhs.Redo_SkyIntensity == rhs.Redo_SkyIntensity &&
		lhs.ReflectionStrength == rhs.ReflectionStrength &&
		lhs.RingAvoidanceSphereInterpTime == rhs.RingAvoidanceSphereInterpTime &&
		lhs.RingRadius == rhs.RingRadius &&
		lhs.RingSize == rhs.RingSize &&
		lhs.Saturation == rhs.Saturation &&
		lhs.SaturationVariance == rhs.SaturationVariance &&
		lhs.ScanAlpha == rhs.ScanAlpha &&
		lhs.ScanBandWidth == rhs.ScanBandWidth &&
		lhs.ScanClamp == rhs.ScanClamp &&
		lhs.ScanDistance == rhs.ScanDistance &&
		lhs.ScanEffectSpeed == rhs.ScanEffectSpeed &&
		lhs.ScanFadeInTime == rhs.ScanFadeInTime &&
		lhs.ScanFadeOutTime == rhs.ScanFadeOutTime &&
		lhs.ScanFresnel == rhs.ScanFresnel &&
		lhs.ScanHeightScale == rhs.ScanHeightScale &&
		lhs.ScanHorizontalScale == rhs.ScanHorizontalScale &&
		lhs.ScanObjectFade == rhs.ScanObjectFade &&
		lhs.ShadowBillboardOffset == rhs.ShadowBillboardOffset &&
		lhs.ShadowLength == rhs.ShadowLength &&
		lhs.ShadowLengthCameraView == rhs.ShadowLengthCameraView &&
		lhs.ShadowLengthFreighter == rhs.ShadowLengthFreighter &&
		lhs.ShadowLengthFreighterAbandoned == rhs.ShadowLengthFreighterAbandoned &&
		lhs.ShadowLengthShip == rhs.ShadowLengthShip &&
		lhs.ShadowLengthSpace == rhs.ShadowLengthSpace &&
		lhs.ShadowLengthStation == rhs.ShadowLengthStation &&
		lhs.ShadowMapSize == rhs.ShadowMapSize &&
		lhs.SharpenFilterAmount == rhs.SharpenFilterAmount &&
		lhs.SharpenFilterDepthFactorEnd == rhs.SharpenFilterDepthFactorEnd &&
		lhs.SharpenFilterDepthFactorStart == rhs.SharpenFilterDepthFactorStart &&
		lhs.ShieldDownScanlineTime == rhs.ShieldDownScanlineTime &&
		lhs.Single1ScanBandWidth == rhs.Single1ScanBandWidth &&
		lhs.Single1ScanEffectSpeed == rhs.Single1ScanEffectSpeed &&
		lhs.Single1ScanHeightScale == rhs.Single1ScanHeightScale &&
		lhs.Single1ScanHorizontalScale == rhs.Single1ScanHorizontalScale &&
		lhs.Single1ScanObjectFade == rhs.Single1ScanObjectFade &&
		lhs.Single1ScanTime == rhs.Single1ScanTime &&
		lhs.Single2ScanBandWidth == rhs.Single2ScanBandWidth &&
		lhs.Single2ScanEffectSpeed == rhs.Single2ScanEffectSpeed &&
		lhs.Single2ScanHeightScale == rhs.Single2ScanHeightScale &&
		lhs.Single2ScanHorizontalScale == rhs.Single2ScanHorizontalScale &&
		lhs.Single2ScanObjectFade == rhs.Single2ScanObjectFade &&
		lhs.Single2ScanTime == rhs.Single2ScanTime &&
		lhs.SkySaturationMax == rhs.SkySaturationMax &&
		lhs.SkySaturationMin == rhs.SkySaturationMin &&
		lhs.SkyValueMax == rhs.SkyValueMax &&
		lhs.SkyValueMin == rhs.SkyValueMin &&
		lhs.SpaceIBLBlendDistance == rhs.SpaceIBLBlendDistance &&
		lhs.SpaceIBLBlendStart == rhs.SpaceIBLBlendStart &&
		lhs.SpaceMieFactor == rhs.SpaceMieFactor &&
		lhs.SpaceScale == rhs.SpaceScale &&
		lhs.SpaceSunFactor == rhs.SpaceSunFactor &&
		lhs.SunLightBlendTime == rhs.SunLightBlendTime &&
		lhs.SunLightIntensity == rhs.SunLightIntensity &&
		lhs.SunRayDecay == rhs.SunRayDecay &&
		lhs.SunRayDensity == rhs.SunRayDensity &&
		lhs.SunRayExposure == rhs.SunRayExposure &&
		lhs.SunRayWeight == rhs.SunRayWeight &&
		lhs.SupersamplingLevel == rhs.SupersamplingLevel &&
		lhs.TaaAccumDelay == rhs.TaaAccumDelay &&
		lhs.TaaHighFreqConstant == rhs.TaaHighFreqConstant &&
		lhs.TaaLowFreqConstant == rhs.TaaLowFreqConstant &&
		lhs.TargetTextureMemUsageMB == rhs.TargetTextureMemUsageMB &&
		lhs.TeleportFlashTime == rhs.TeleportFlashTime &&
		lhs.TerrainAnisoHi == rhs.TerrainAnisoHi &&
		lhs.TerrainAnisoLow == rhs.TerrainAnisoLow &&
		lhs.TerrainAnisoMed == rhs.TerrainAnisoMed &&
		lhs.TerrainAnisoUlt == rhs.TerrainAnisoUlt &&
		lhs.TerrainBlocksPerFrameHi == rhs.TerrainBlocksPerFrameHi &&
		lhs.TerrainBlocksPerFrameLow == rhs.TerrainBlocksPerFrameLow &&
		lhs.TerrainBlocksPerFrameMed == rhs.TerrainBlocksPerFrameMed &&
		lhs.TerrainBlocksPerFrameOberon == rhs.TerrainBlocksPerFrameOberon &&
		lhs.TerrainBlocksPerFramePs430 == rhs.TerrainBlocksPerFramePs430 &&
		lhs.TerrainBlocksPerFramePs460 == rhs.TerrainBlocksPerFramePs460 &&
		lhs.TerrainBlocksPerFrameUlt == rhs.TerrainBlocksPerFrameUlt &&
		lhs.TerrainBlocksPerFrameXb130 == rhs.TerrainBlocksPerFrameXb130 &&
		lhs.TerrainBlocksPerFrameXb160 == rhs.TerrainBlocksPerFrameXb160 &&
		lhs.TerrainDroppedMipsLow == rhs.TerrainDroppedMipsLow &&
		lhs.TerrainDroppedMipsMed == rhs.TerrainDroppedMipsMed &&
		lhs.TerrainMipBiasLow == rhs.TerrainMipBiasLow &&
		lhs.TerrainMipBiasMed == rhs.TerrainMipBiasMed &&
		lhs.ToneMapExposure == rhs.ToneMapExposure &&
		lhs.ToneMapExposureCave == rhs.ToneMapExposureCave &&
		lhs.ValueVariance == rhs.ValueVariance &&
		lhs.VignetteEnd == rhs.VignetteEnd &&
		lhs.VignetteEndMoveVR == rhs.VignetteEndMoveVR &&
		lhs.VignetteEndMoveVRShip == rhs.VignetteEndMoveVRShip &&
		lhs.VignetteEndRidingVR == rhs.VignetteEndRidingVR &&
		lhs.VignetteEndTurnRidingVR == rhs.VignetteEndTurnRidingVR &&
		lhs.VignetteEndTurnVR == rhs.VignetteEndTurnVR &&
		lhs.VignetteEndTurnVRShip == rhs.VignetteEndTurnVRShip &&
		lhs.VignetteStart == rhs.VignetteStart &&
		lhs.VignetteStartMoveVR == rhs.VignetteStartMoveVR &&
		lhs.VignetteStartMoveVRShip == rhs.VignetteStartMoveVRShip &&
		lhs.VignetteStartRidingVR == rhs.VignetteStartRidingVR &&
		lhs.VignetteStartTurnRidingVR == rhs.VignetteStartTurnRidingVR &&
		lhs.VignetteStartTurnVR == rhs.VignetteStartTurnVR &&
		lhs.VignetteStartTurnVRShip == rhs.VignetteStartTurnVRShip &&
		lhs.VignetteVRMoveInterpTime == rhs.VignetteVRMoveInterpTime &&
		lhs.VignetteVRMoveInterpTimeShip == rhs.VignetteVRMoveInterpTimeShip &&
		lhs.VignetteVRRidingInterpTime == rhs.VignetteVRRidingInterpTime &&
		lhs.VignetteVRTurnInterpTime == rhs.VignetteVRTurnInterpTime &&
		lhs.VignetteVRTurnInterpTimeShip == rhs.VignetteVRTurnInterpTimeShip &&
		lhs.VignetteVRTurnRidingInterpTime == rhs.VignetteVRTurnRidingInterpTime &&
		lhs.WarpK == rhs.WarpK &&
		lhs.WarpKCube == rhs.WarpKCube &&
		lhs.WarpKDispersion == rhs.WarpKDispersion &&
		lhs.WarpScale == rhs.WarpScale &&
		lhs.WaterHueShift == rhs.WaterHueShift &&
		lhs.WaterSaturation == rhs.WaterSaturation &&
		lhs.WaterValue == rhs.WaterValue &&
		lhs.WonderModelRendererLightIntensity == rhs.WonderModelRendererLightIntensity &&
		lhs.AllowPartialCascadeRender == rhs.AllowPartialCascadeRender &&
		lhs.ApplyTaaTest == rhs.ApplyTaaTest &&
		lhs.CenterRenderSpaceOffset == rhs.CenterRenderSpaceOffset &&
		lhs.DebugLinesDepthTest == rhs.DebugLinesDepthTest &&
		lhs.DOFEnableBokeh == rhs.DOFEnableBokeh &&
		lhs.DOFEnableNewBokehShader == rhs.DOFEnableNewBokehShader &&
		lhs.DOFEnablePhysCamera == rhs.DOFEnablePhysCamera &&
		lhs.EnableCrossPipeSharing == rhs.EnableCrossPipeSharing &&
		lhs.EnableSSR == rhs.EnableSSR &&
		lhs.EnableTerrainCachePs4Base == rhs.EnableTerrainCachePs4Base &&
		lhs.EnableTerrainCachePs4Pro == rhs.EnableTerrainCachePs4Pro &&
		lhs.EnableTerrainCacheXb1Base == rhs.EnableTerrainCacheXb1Base &&
		lhs.EnableTerrainCacheXb1X == rhs.EnableTerrainCacheXb1X &&
		lhs.EnableTextureStreaming == rhs.EnableTextureStreaming &&
		lhs.EnableVariableUpdate == rhs.EnableVariableUpdate &&
		lhs.ForceCachedTerrain == rhs.ForceCachedTerrain &&
		lhs.ForceEvictAllTextures == rhs.ForceEvictAllTextures &&
		lhs.ForceStreamAllTextures == rhs.ForceStreamAllTextures &&
		lhs.ForceUncachedTerrain == rhs.ForceUncachedTerrain &&
		lhs.FullscreenScanEffect == rhs.FullscreenScanEffect &&
		lhs.IBLReflections == rhs.IBLReflections &&
		lhs.Redo_On == rhs.Redo_On &&
		lhs.ShadowQuantized == rhs.ShadowQuantized &&
		lhs.ShowReflectionProbes == rhs.ShowReflectionProbes &&
		lhs.ShowTaaBuf == rhs.ShowTaaBuf &&
		lhs.ShowTaaCVarianceBuf == rhs.ShowTaaCVarianceBuf &&
		lhs.ShowTaaNVarianceBuf == rhs.ShowTaaNVarianceBuf &&
		lhs.ShowTaaVarianceBuf == rhs.ShowTaaVarianceBuf &&
		lhs.TonemapInLuminance == rhs.TonemapInLuminance &&
		lhs.UseImposters == rhs.UseImposters &&
		lhs.UseTaaResolve == rhs.UseTaaResolve;
	}
};

struct GcPlacementGlobals
{
	float LodDistancesDetail[5];
	float LodDistancesDistant[5];
	float LodDistancesLandmark[5];
	float LodDistancesObject[5];
	float AddToLodDistance;
	float HighInterpValue;
	float InterpValueVariance;
	float LowInterpValue;
	float MaxDensity;
	float MaxFrequency;
	float MaxPatchSize;
	int32_t MaxPatchVariance;
	float MidInterpValue;
	float MinDensity;
	float MinFrequency;
	float MinPatchSize;
	int32_t MinPatchVariance;
	float MultiplyLodDistance;

	friend bool operator==(const GcPlacementGlobals& lhs, const GcPlacementGlobals& rhs) 
	{
		return std::equal(std::begin(lhs.LodDistancesDetail), std::end(lhs.LodDistancesDetail), std::begin(rhs.LodDistancesDetail)) &&
		std::equal(std::begin(lhs.LodDistancesDistant), std::end(lhs.LodDistancesDistant), std::begin(rhs.LodDistancesDistant)) &&
		std::equal(std::begin(lhs.LodDistancesLandmark), std::end(lhs.LodDistancesLandmark), std::begin(rhs.LodDistancesLandmark)) &&
		std::equal(std::begin(lhs.LodDistancesObject), std::end(lhs.LodDistancesObject), std::begin(rhs.LodDistancesObject)) &&
		lhs.AddToLodDistance == rhs.AddToLodDistance &&
		lhs.HighInterpValue == rhs.HighInterpValue &&
		lhs.InterpValueVariance == rhs.InterpValueVariance &&
		lhs.LowInterpValue == rhs.LowInterpValue &&
		lhs.MaxDensity == rhs.MaxDensity &&
		lhs.MaxFrequency == rhs.MaxFrequency &&
		lhs.MaxPatchSize == rhs.MaxPatchSize &&
		lhs.MaxPatchVariance == rhs.MaxPatchVariance &&
		lhs.MidInterpValue == rhs.MidInterpValue &&
		lhs.MinDensity == rhs.MinDensity &&
		lhs.MinFrequency == rhs.MinFrequency &&
		lhs.MinPatchSize == rhs.MinPatchSize &&
		lhs.MinPatchVariance == rhs.MinPatchVariance &&
		lhs.MultiplyLodDistance == rhs.MultiplyLodDistance;
	}
};

//Dependency: GcInWorldUIScreenData
//Dependency: GcProjectorOffsetData
//Dependency: GcShipDialogue
//Dependency: GcScanEffectData
//Dependency: GcCameraAnomalySetupData
//Dependency: GcCreatureAlertData
//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcCameraSpawnSetupData
//Dependency: GcResourceCollectEffect
//Dependency: GcBoidData
//Dependency: GcProjectileLineData
//Dependency: GcPlayerStickData
//Dependency: GcInventoryValueData
//Dependency: GcJourneyMedalTiers
//Dependency: VariableSizeString
//Dependency: GcShipDialogueTreeEnum
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: Vector2f
struct GcPlayerGlobals
{
	enum class MouseSmoothModeEnum : uint32_t
	{
		Off = 0,
		Sprung = 1,
	};

	enum class ControlModesEnum : uint32_t
	{
		Normal = 0,
		FlightStick = 1,
		Inverted = 2,
	};

	NMS_GameComponents::GcProjectorOffsetData LargeWeaponMenuTransforms;
	NMS_GameComponents::GcProjectorOffsetData QuickMenuLauncherTransforms;
	NMS_GameComponents::GcProjectorOffsetData QuickMenuLauncherTransformsNoBuildMenu;
	NMS_GameComponents::GcProjectorOffsetData WeaponMenuTransforms;
	NMS_GameComponents::GcScanEffectData ArmourHighlightScanEffect;
	NMS_GameComponents::GcScanEffectData HolsterHighlightEffect;
	NMS_GameComponents::GcScanEffectData InteractHighlightEffect;
	NMS_GameComponents::GcScanEffectData MeleeHitEffect;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyAtlasStationSpawnData;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyBlachHoleSpawnData;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyMiniStationSpawnData;
	NMS_GameComponents::GcInWorldUIScreenData BinocularInfoScreenOffset;
	NMS_GameComponents::GcInWorldUIScreenData BinocularInfoScreenOffsetGun;
	NMS_GameComponents::GcInWorldUIScreenData DefaultLeftHandTransform;
	NMS_GameComponents::GcInWorldUIScreenData DefaultLeftHandTransformVehicle;
	NMS_GameComponents::GcInWorldUIScreenData FrontendBaseScreenshotVROffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendMessagesOffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendOffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendOffsetV2;
	NMS_GameComponents::GcInWorldUIScreenData FrontendPhotoModeVROffset;
	NMS_GameComponents::GcInWorldUIScreenData InventoryOffset;
	NMS_GameComponents::GcInWorldUIScreenData InventoryOffsetV2;
	NMS_GameComponents::GcInWorldUIScreenData InWorldCompass;
	NMS_GameComponents::GcInWorldUIScreenData QuickMenuOffset;
	NMS_GameComponents::GcInWorldUIScreenData QuickMenuOffsetV2;
	NMS::Vector3f BinocularScopeOffset;
	NMS::Colour DefaultMuzzleColour;
	NMS::Colour DefaultMuzzleLaserColour;
	NMS::Vector3f HandScreenRoboOnScreenOffset;
	NMS::Vector3f HolsterHeadOffset;
	NMS::Colour InteractionLineActiveColour;
	NMS::Colour InteractionLineBaseColour;
	NMS::Vector3f LeftHandModeFishingRodAttachSocketCorrection;
	NMS::Vector3f LeftHandModeWeaponAttachSocketCorrection;
	NMS::Vector3f PointingWristAngles;
	NMS::Colour SearchGroupIconColour;
	NMS::Colour StarFieldColour;
	NMS::Colour TerrainEditorMuzzleColourAdd;
	NMS::Colour TerrainEditorMuzzleColourFlatten;
	NMS::Colour TerrainEditorMuzzleColourSubtract;
	NMS::Colour TerrainEditorMuzzleColourUndo;
	NMS::Vector3f TraderStayCloseLockBaseOffset;
	NMS::Vector3f WeaponBarrelOffset;
	NMS::Vector3f WeaponOffset;
	NMS_GameComponents::GcShipDialogue TraderHailMessages;
	NMS_GameComponents::GcPlayerCommunicatorMessage PirateHailMessage;
	NMS_GameComponents::GcPlayerCommunicatorMessage PoliceScanHailMessage;
	NMS::NMSString0x20A TraderHailReceiveOSDLoc;
	NMS::NMSString0x20A TraderHailRefusedOSDLoc;
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	NMS::NMSString0x10 DebugSearchGroup;
	NMS::VariableSizeString DefaultShipFilename;
	NMS::GcSeed DefaultShipSeed;
	NMS::NMSString0x10 ExosuitUpgradeProduct;
	NMS::NMSString0x10 ExperienceDefeatBugQueenRewardID;
	NMS::NMSString0x10 ExperienceDefeatBugQueenRewardIDProduct;
	NMS::NMSString0x10 ExperienceDefeatJellyBossRewardID;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsCorrupt;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsNearHiveReward;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsReward;
	NMS::NMSString0x10 ExperienceDefeatLevel5SpaceSentinelsReward;
	std::vector<NMS_GameComponents::GcCameraSpawnSetupData> FirstSpawnDataTable;
	NMS::NMSString0x10 FootDustEffect;
	NMS::VariableSizeString Gun;
	NMS::VariableSizeString NoShadowMaterial;
	NMS::NMSString0x10 PulseEncounterSpaceEggID;
	std::vector<float> TechLearningProbabilities;
	std::vector<float> TechRarityData;
	std::vector<float> WantedEscalateTime;
	std::vector<float> WantedExtremeEscalateTime;
	std::vector<float> WantedTimeout;
	uint64_t AutoSaveMaxTime;
	uint64_t AutoSaveMinTime;
	uint64_t PointingWristAdjustmentTimeMilliseconds;
	NMS_GameComponents::GcResourceCollectEffect CrystalResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect FishingResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect ShardResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceMeleeCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceMiniCollect;
	NMS_GameComponents::GcBoidData MissileSwarm;
	NMS_GameComponents::GcProjectileLineData PlayerBullet;
	NMS_GameComponents::GcProjectileLineData RobotBullet;
	NMS_GameComponents::GcProjectileLineData ShipBullet;
	NMS_GameComponents::GcPlayerStickData AmbientModeLookStickData;
	NMS_GameComponents::GcInventoryValueData FreighterValueData;
	NMS_GameComponents::GcPlayerStickData LookStickData;
	NMS_GameComponents::GcInventoryValueData ShipValueData;
	NMS_GameComponents::GcPlayerStickData StickData;
	NMS_GameComponents::GcInventoryValueData WeaponValueData;
	NMS_GameComponents::GcJourneyMedalTiers MedalTiers;
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailReceiveRegular[4];
	NMS::Vector2f ExperienceFlybyStartAngle;
	NMS::Vector2f FingerButtonQuickMenuButtonSize;
	NMS::Vector2f MouseSpringStrength;
	NMS::Vector2f MouseSpringStrengthMaxDelta;
	NMS::Vector2f MouseSpringStrengthMinDelta;
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailReceiveFight[2];
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailSend[2];
	float AbandonedFreighterRechargeMod;
	float AbandonedFreighterStaminaRate;
	float AbandonedFreighterStaminaRecoveryMod;
	float AimDecay;
	float AimDisperseCooldownFactor;
	float AimDisperseCooldownTime;
	float AimDisperseMinTime;
	float AimDisperseTime;
	float AimDistanceShip;
	float AimMinWeight;
	float AimOffset;
	float AimShootableTargetAngle;
	float AimSpeed;
	float AimWeightAdd;
	float AlienPodAggroDecay;
	float AlienPodAggroSpring;
	float AnimRunBlendPoint;
	float AnimRunSpeed;
	float AnimWalkBlendPoint;
	float AnimWalkSpeed;
	float AnimWalkToRunSpeed;
	float AtmosphereEffectOffset;
	float AtmosphereEffectTime;
	float AutoAimFixedInterceptSpeed;
	float AutoAimMaxAccelFactor;
	float AutoAimMaxAngle;
	float AutoAimMinScreenDistance;
	float AutoAimRadiusExtra;
	float AutoAimStickyMax;
	float AutoAimStickyMin;
	float AutoAimStickyRailgun;
	float AutoAimTimeOut;
	float AutoLandRange;
	float AutoLandTime;
	float AutoSaveRangeInSpace;
	float AutoSaveRangeInVehicle;
	float AutoSaveRangeOnFoot;
	float BalanceSpeed;
	float BalanceStrength;
	float BaseUnderwaterDepth;
	float BeaconActivateRange;
	float BeamRecoil;
	int32_t BestGuildRank;
	float BincoularRayThickness;
	float BinocularAimOffset;
	float BinocularCreatureCastSphereSize;
	float BinocularRangePlanet;
	float BinocularRangeSpace;
	float BinocularRayThicknessVR;
	float BinocularScopeScale;
	float BinocularScopeSmoothing;
	float BinocularsHUDDistanceVR;
	float BinocularsHUDScaleVR;
	float BlastRecoilSpring;
	float BodyRealignmentDelay;
	float BulletBend;
	int32_t BulletClipMultiplier;
	int32_t BulletCostReducer;
	float CannonRecoilSpring;
	int32_t ChanceHighGradeIllegal;
	float ChargedEnergyBallSpeed;
	float ChargeMeleeCooldown;
	float ChargeTime;
	float ClimbableStickinessAngle;
	float ClingAngleThreshold;
	float ClingBrakeMultiplier;
	float ClingSpeedThreshold;
	float CockpitEjectFirstPersonOffset;
	float CockpitEjectFirstPersonOffsetTime;
	float CockpitEjectSideTestRange;
	float CockpitEjectTestEndHeightOffset;
	float CockpitEjectTestRadius;
	float CockpitEjectTestSphereRadius;
	float CockpitEjectTestSphereRange;
	float CockpitEjectTestStartHeightOffset;
	float CombatEscalateTime;
	float CombatEscapeRadius;
	float CombatEscapeTime;
	float CombatSpawnMinWantedTime;
	float CommunicatorSpeed;
	NMS_Globals::GcPlayerGlobals::ControlModesEnum ControlModes;
	float CreativeModeDeathFadeInTime;
	float CreativeModeDeathFadeOutTime;
	float CreatureRideFadeInTime;
	float CreatureRideFadeOutTime;
	float CriticalHitDesatFreq;
	float CriticalHitDesatTime;
	float CriticalHitTime;
	float CrosshairTime;
	float CrouchHeightToDisableLegBlendingVR;
	float DamageRateWhenUnderNoGravity;
	float DamageRepairFactor;
	float DeathDamageDrainChargeFactor;
	int32_t DeathDamageTechBrokenPercent;
	float DeathScreenFadeInThirdPerson;
	float DeathScreenFadeInTime;
	float DeathScreenFadeInUnderwaterThirdPerson;
	float DeathScreenFadeOutTime;
	float DeathScreenMaxRegenWaitTime;
	float DeathScreenMinRegenWaitTime;
	float DeathScreenPauseTime;
	float DeathScreenShipFadeInTime;
	float DeepWaterDepth;
	int32_t DefaultHealthPips;
	int32_t DefaultHitPoints;
	int32_t DefaultShipHealthPips;
	float DestroyEffectFinalDelay;
	float DroneProbeScanTime;
	float DroneScanTimeToForget;
	float DroneSpawnAccelerator;
	float DroneStartLocationRadius;
	float EarlyHazardTimeMultiplier;
	float EnergyBallSpeed;
	float EnergyDamageMinTime;
	float EnergyDischargeRateDeepWater;
	float EnergyDischargeRateFloatingInSpace;
	float EnergyDischargeRateHigh;
	float EnergyDischargeRateLow;
	float EnergyDischargeRateMedium;
	float EnergyPainRate;
	float ExertionFromPainTime;
	float ExertionSmoothTime;
	float ExperienceAlertRange;
	float ExperienceAlertSightAngle;
	float ExperienceAlertSightRange;
	float ExperienceDefeatBugQueenFiendSplatDelay;
	float ExperienceDefeatBugQueenRewardChance;
	float ExperienceDefeatBugQueenRewardDelay;
	float ExperienceDefeatLevel5SentinelsDisableWantedTime;
	float ExperienceDefeatLevel5SentinelsRewardDelay;
	float ExperienceDefeatLevel5SpaceSentinelsMessageDelay;
	float ExperienceDefeatLevel5SpaceSentinelsRewardDelay;
	float ExperienceDefeatLevel5SpaceSentinelsWarpDelay;
	float ExperienceDroneSpawnAngle;
	float ExperienceDroneSpawnOffset;
	float ExperienceDroneTimeMax;
	float ExperienceDroneTimeMin;
	float ExperienceFlybyScareRadius;
	float ExperienceFlybyScareTime;
	float ExperienceHardPiratesDamageMaxOdds;
	float ExperienceInterestingDroneDistance;
	float ExperienceInterestingFreighterDistance;
	float ExperienceInterestingPoliceDistance;
	float ExperienceInterestingShipDistance;
	int32_t ExperienceMaxCivilianShipSpawnsInSpace;
	int32_t ExperienceMaxCivilianShipSpawnsOnPlanet;
	float ExperienceMediumPiratesDamageMaxOdds;
	float ExperienceMessageBroadcastNearbyDistance;
	int32_t ExperiencePirateCloseAttackPercentage;
	float ExperiencePirateFreighterAttackRange;
	float ExperiencePiratesDifficultyVariance;
	float ExperiencePirateTimeMax;
	float ExperiencePirateTimeMin;
	float ExperienceShipTimeMax;
	float ExperienceShipTimeMin;
	float ExperienceWalkerSize;
	float ExplodeShakeMaxDist;
	float ExplodeShakeMaxDistSpace;
	float ExplodeShakeStrength;
	float ExplosionBoundingInset;
	float ExplosionBoundingInsetRange;
	float ExplosionScaleVariance;
	float ExplosionTimePerEffect;
	float ExplosionTimeVariance;
	float FingerButtonClickSize;
	float FingerButtonClickTime;
	float FingerButtonQuickMenuOffset;
	float FingerButtonRadiusOffset;
	float FingerTipOffset;
	float FistClenchBlendInTime;
	float FistClenchBlendOutTime;
	float FlamethrowerDispersion;
	float FlashGrow;
	float FlashPosX;
	float FlashPosY;
	float FlashPosZ;
	float FlashPulse;
	float FlashSize;
	float FlashSpeed;
	float FoodValueThresholdAverage;
	float FoodValueThresholdBad;
	float FoodValueThresholdBest;
	float FoodValueThresholdGood;
	float FoodValueThresholdWorst;
	float FootDustScale;
	float FootOffset;
	float FreeJetpackRange;
	float FreeJetpackRangeNonTerrain;
	float FreeJetpackRangePrime;
	float FreeJetpackSlopeAngle;
	float FreeJetpackSlopeAnglePrime;
	float FreighterAbandonedHazardTimeMultiplier;
	float FreighterCoolFactor;
	float FreighterPriceExp2;
	float FreighterProbeScanTime;
	float FreighterSpawnedOnYouFadeInTime;
	float FrigateFlybyMarkerAlwaysHideDistance;
	float FrigateFlybyMarkerAlwaysShowDistance;
	float FrontShieldOffsetOff;
	float FrontShieldOffsetOffVR;
	float FrontShieldOffsetOn;
	float FrontShieldOffsetOnVR;
	float FrontShieldScaleVR;
	float FrontShieldSlerpTime;
	float FrontShieldSlerpTimeVR;
	float FrontShieldSpeedSlowdown;
	float FrontShieldUpOffsetVR;
	float FullClipReloadSpeedMultiplier;
	float GhostbusterAmp1;
	float GhostbusterAmp2;
	float GhostbusterAmp3;
	float GhostbusterFreq1;
	float GhostbusterFreq2;
	float GhostbusterFreq3;
	float GhostbusterSpeed1;
	float GhostbusterSpeed2;
	float GhostbusterSpeed3;
	float GhostbusterStart1;
	float GhostbusterStart2;
	float GhostbusterStart3;
	float GhostbusterStartLength;
	float GrassPushDistance;
	float GrassPushDistanceFeet;
	int32_t GrenadeBaseClipSize;
	float GrenadeBounceDamping;
	float GrenadeBounceMaxSpeed;
	float GrenadeCarveRadius;
	float GrenadeRecoil;
	float GrenadeStopExplodeTime;
	float GrenadeTerrainDeformRadius;
	float GroundRunSpeed;
	float GroundRunSpeedLowG;
	float GroundWalkBrake;
	float GroundWalkBrakeWhileMoving;
	float GroundWalkForceMultiplier;
	float GroundWalkRecoverySpeedDamper;
	float GroundWalkSpeed;
	float GroundWalkSpeedLowG;
	float GroundWalkSpeedTeleportHmd;
	int32_t GunBaseClipSize;
	float GunRecoil;
	float GunRecoilMax;
	float GunRecoilMin;
	float GunRecoilSettleSpring;
	float GunRecoilSpring;
	float GunRightOffset;
	float GunUpOffset;
	float HandHoldInteractAngleRate;
	float HandHoldInteractDistanceRate;
	float HandInteractionFresnel;
	float HandInteractionFresnelMax;
	float HandInteractionLightIntensity;
	float HandInteractionLightIntensityMax;
	float HandInteractionLightOffset;
	float HandInteractionLightOffsetAt;
	float HandInteractionLightTime;
	float HandScreenActivationAngle;
	float HandScreenActivationAngleDown;
	float HandScreenActivationAngleOffset;
	float HandScreenActivationRange;
	float HandScreenAngleRange;
	float HandScreenLookActiveAngle;
	float HandScreenMinAngle;
	float HandScreenMinAngleWithPoint;
	float HandScreenPenetration;
	float HandScreenRestingTurnAngle;
	float HandSmoothAngleRange;
	float HandSmoothMinAngle;
	float HandSwimDecayTime;
	float HandSwimForce;
	float HandSwimMax;
	float HandSwimMaxForce;
	float HandSwimMin;
	float HardLandMax;
	float HardLandMin;
	float HardLandPainTime;
	float HardLandTime;
	float HardModeHazardDamageRateMultiplier;
	float HardModeHazardDamageWoundRateMultiplier;
	float HardModeHazardRechargeUnderground;
	float HardModeHazardTimeMultiplier;
	float HazardDamageMinTime;
	float HeadBinocularsOffset;
	float HeadBinocularsRadius;
	float HealthPipRechargeRate;
	float HealthRechargeMinTimeSinceDamage;
	float HeatShieldTime;
	float HelmetBob;
	float HelmetLag;
	float HelmetMaxLag;
	int32_t HighGuildRank;
	float HitReactBlendOutSpeedMax;
	float HitReactBlendOutSpeedMin;
	float HitReactNoiseAmount;
	float HmdResetButtonTime;
	float HMDResetFlashTime;
	float HmdTurnAngle;
	float HmdTurnAnglePad;
	float HmdTurnSpeed;
	float HmdTurnSpeedPad;
	float HmdTurnThreshold;
	float HoldActionDistX;
	float HoldActionDistY;
	float HoldActionDistZ;
	float HoldDistX;
	float HoldDistY;
	float HoldDistZ;
	float HoldForce;
	float HoldMaxForce;
	float HoldRotate;
	float HoldTime;
	float HolsterGrabFrontOffset;
	float HolsterGrabRadius;
	int32_t HUDHeightPosX;
	int32_t HUDHeightPosY;
	float InteractionAimOffset;
	float InteractionButtonRange;
	float InteractionButtonRangeVehicle;
	float InteractionFocusIncrease;
	float InteractionFocusIncreaseCreature;
	float InteractionFocusIncreasePet;
	float InteractionFocusTime;
	float InteractionFocusTimeCreature;
	float InteractionFocusTimePet;
	float InteractionFocusTimeShootable;
	float InteractionLineCircleOffsetMax;
	float InteractionLineCircleOffsetMin;
	float InteractionLineCircleRadius;
	float InteractionLineCircleSpeed;
	float InteractionLineCircleThickness;
	float InteractionLineNumCirclesPerMetre;
	float InteractionLineSplineMinDistance;
	float InteractionLineSplineOffset;
	float InteractionLineSplineOffsetMin;
	float InteractionLineSplineOffsetRange;
	float InteractionScanRange;
	float InteractionSubstanceRange;
	float InteractNearbyRadius;
	float JetpackBrake;
	float JetpackDrainHorizontalFactor;
	float JetpackFillRate;
	float JetpackFillRateFleetMultiplier;
	float JetpackFillRateMidair;
	float JetpackFillRateNexusMultiplier;
	float JetpackFillRateSpaceStationMultiplier;
	float JetpackForce;
	float JetpackForceDeadPlanetExtra;
	float JetpackHelmetBob;
	float JetpackIgnitionForce;
	float JetpackIgnitionForceDeadPlanetExtra;
	float JetpackIgnitionTime;
	float JetpackJetAnimateInTime;
	float JetpackJetAnimateOutTime;
	float JetpackMaxSpeed;
	float JetpackMaxUpSpeed;
	float JetpackMinIgnitionTime;
	float JetpackMinLevel;
	float JetpackUnderwaterDrainRate;
	float JetpackUnderwaterFillRate;
	float JetpackUpForce;
	float JetpackUpForceDeadPlanetExtra;
	float JoystickOrientationTrimAltOc;
	float JoystickOrientationTrimAltOp;
	float LabelOffset;
	float LabelSpringTime;
	float LaserBeamAmmoUseTime;
	float LaserBeamCore;
	float LaserBeamFlickerAmp;
	float LaserBeamFlickerFreq;
	float LaserBeamMineRate;
	float LaserBeamTerrainDeformRadius;
	float LaserBeamTerrainDeformVariance;
	float LaserEndOffset;
	float LaserMiningDamageMultiplier;
	float LaserPlayerOffset;
	float LaserRecoil;
	float LaserShakeMax;
	float LaserShakeMin;
	float LaserShipRange;
	float LaserWeaponRange;
	float LeanAmount;
	float LeanAmountFwd;
	float LeanBackMaxAngle;
	float LeanFwdMaxAngle;
	float LeanLeftMaxAngle;
	float LeanRightMaxAngle;
	float LookRayRadius;
	float LootForceMultiplier;
	int32_t LowGuildRank;
	int32_t LowHealthEffectPips;
	int32_t LowHealthEffectShield;
	float MaxArmExtension;
	int32_t MaxBuildHeight;
	float MaxClingableSlopeAngle;
	float MaxFallSpeed;
	int32_t MaxHealthPips;
	float MaximumCrouchVR;
	float MaximumHeadHeightIncreaseVR;
	float MaximumHorizontalOffsetVR;
	int32_t MaxNumDestroyEffects;
	int32_t MaxNumShipsAttackingPlayer;
	float MaxProjectileRadiusMultiplier;
	float MaxResource;
	float MaxSlopeAngle;
	float MaxSpidermanSlopeAngle;
	float MaxTimeAfterMeleeBeforeBoost;
	float MaxTimeInMeleeBoost;
	float MaxWalkableSlopeAngle;
	int32_t MaxWordCategoriesToSayPerNPC;
	int32_t MedGuildRank;
	float MeleeBoostAirForce;
	float MeleeCooldown;
	float MeleeCooldownAlt;
	float MeleeDamageScale;
	float MeleeDistance;
	float MeleeDistance3P;
	float MeleeDistanceAlt;
	float MeleeForcePush;
	float MeleeHitTime;
	float MeleeOffset;
	float MeleePosDelta;
	float MeleeRadius;
	float MeleeRadiusAlt;
	float MeleeRange;
	float MeleeSpeedBoost;
	float MeleeSpeedBoostRangeMultiplier;
	float MeleeSpeedDamageBoost;
	float MeleeStaminaDrain;
	float MeleeTime;
	float MeleeToAirBoostInitialImpulse;
	float MinArmExtension;
	float MinBinocActiveTime;
	float MinDistanceToCommunicatorTarget;
	float MinEnergyPercentOnRespawn;
	float MinimumPushOffForceToSlide;
	float MiniportalAppearEffectTime;
	float MiniportalDisappearEffectTime;
	int32_t MinNumDestroyEffects;
	float MinRespawnCharge;
	float MinSlideTime;
	float MinSpidermanSlopeAngle;
	float MinTimeAfterMeleeBeforeBoost;
	float MinTimeToHoldSpidermanPose;
	float MinUpAmount;
	float MouseAimZone;
	float MouseCrosshairAlphaFade;
	float MouseCrosshairAlphaFadeSpeed;
	float MouseCrosshairLineAlpha;
	float MouseCrosshairLineWidth;
	float MouseCrosshairMaxAlpha;
	float MouseCrosshairMultiplier;
	float MouseCrosshairShipStrength;
	float MouseCrosshairShipStrengthOld;
	float MouseDeadZone;
	float MouseDeadZoneOld;
	float MouseDeadZoneVehicle;
	float MouseFlightCorrectionBrakeMultiplier;
	float MouseFlightCorrectionMultiplier;
	float MouseMaxLength;
	float MouseMaxLengthOld;
	float MouseMaxLengthVehicle;
	NMS_Globals::GcPlayerGlobals::MouseSmoothModeEnum MouseSmoothMode;
	float MoveStickHighRangeLimit;
	float MoveStickRunLimit;
	float MultiplayerMinWanteEscalationTime;
	float MuzzleFlashMulThirdPerson;
	float NormalModeHazardDamageRateMultiplier;
	float NormalModeHazardDamageWoundRateMultiplier;
	float NormalModeHazardRechargeUnderground;
	float NormalModeHazardTimeMultiplier;
	float NoStickTeleportDirectionChangeDeadzoneAngle;
	int32_t NumberOfWarpsRequiredForFreightersToSpawn;
	int32_t NumTechShopSlots;
	float ObjectScanTime;
	float OtherPlayerTrackArrowRange;
	float PainColourSeperateAmount;
	float PainFlickerAmount;
	float PainTime;
	float PassiveWeaponZoomFOV;
	float PassiveWeaponZoomFOVThirdPerson;
	float PickRange;
	float PirateBattleMarkerRange;
	float PirateBattleMarkerTime;
	float PirateBattleMaxTime;
	float PirateBattleWarnTime;
	float PirateBountyInitTime;
	float PirateBountyMaxDistance;
	float PirateBountyTimeoutTime;
	float PirateFlybyAttackDistancePastPlayer;
	float PirateFlybyAttackMaxTime;
	float PirateFlybyAttackMinTime;
	float PirateFlybyAttackProbability;
	int32_t PirateHailPercent;
	float PirateProbeAttackWaitTime;
	float PirateProbeAttackWarnTime;
	float PirateProbeHailPause;
	float PirateProbeInitTime;
	float PirateProbeScanTime;
	float PirateProbeScanTotalTime;
	float PirateRaidMaxTime;
	float PirateRaidMinTime;
	float PlayerSpaceTransferRange;
	float PlayerTransferRange;
	float PlayerViewTargetRange;
	float PointDownToMoveAngle;
	float PointDownToMoveBackAngle;
	float ProjectileDamageFalloff;
	float ProjectileEndTime;
	float PulseEncounterMarkerAlwaysHideDistance;
	float PulseEncounterMarkerAlwaysShowDistance;
	float PulseEncounterMarkerShowAngle;
	float PulseEncounterMinTimeInPulse;
	float PulseEncounterProbeTime;
	float PulseEncounterProbeTimeRare;
	float PulseRecoilSpring;
	float PushForceAirFactor;
	float PushForceDecay;
	float QuadAutoAimOffset;
	float RailRecoilSpring;
	float ReloadButtonHoldTimeToHolster;
	float ReloadTapButtonSpeedIncrease;
	float ResourceBlobFinalScaleDistance;
	float RespawnOnPadRadius;
	int32_t RobotMultiplierWithFriends;
	float RocketBootsActivationWindow;
	float RocketBootsBoostForce;
	float RocketBootsBoostOffTime;
	float RocketBootsBoostOnTime;
	float RocketBootsBoostTankDrainSpeed;
	float RocketBootsDoubleTapTime;
	float RocketBootsDriftBraking;
	float RocketBootsDriftDownwardForce;
	float RocketBootsDriftEndTime;
	float RocketBootsDriftForce;
	float RocketBootsDriftTankDrainSpeed;
	float RocketBootsForceDuration;
	float RocketBootsForceStartTime;
	float RocketBootsHeightAdjustDownStrength;
	float RocketBootsHeightAdjustTime;
	float RocketBootsHeightAdjustUpStrength;
	float RocketBootsImpulse;
	float RocketBootsJetpackMinLevel;
	float RocketBootsMaxDesiredHeight;
	float RocketBootsMaxSpeed;
	float RocketBootsMinDesiredHeight;
	float RocketBootsWindUpBraking;
	float RocketBootsZigZagForceDuration;
	float RocketBootsZigZagStrength;
	float ScanBeamMainWidth;
	float ScanBeamWidth;
	float ScanFadeInTime;
	float ScanFadeOutTime;
	float ScanLabelTime;
	float ScanRotate;
	float ScanRotateBeamWdith;
	float ScanRotateDist;
	float ScanRotateWobbleAmp;
	float ScanWobbleAmp;
	float ScanWobbleAmp2;
	float ScanWobbleFreq;
	float ScanWobbleFreq2;
	int32_t ShieldMaximum;
	float ShieldRechargeMinTimeSinceDamage;
	float ShieldRechargeRate;
	float ShieldRestoreDelay;
	float ShieldRestoreSpeed;
	float ShipCameraLag;
	float ShipCoolFactor;
	float ShipPriceExp2;
	float ShipSummonLastSafeMargin;
	float ShootOffset;
	float ShootPrepTime;
	float ShootSizeBase;
	float ShootSizeMaxXY;
	float ShootSizeMaxZ;
	float ShootSizeMinXY;
	float ShootSizeMinZ;
	float ShootSizeTime;
	float ShotgunDispersion;
	float SleepFadeTime;
	float SlopeSlideBrake;
	float SlopeSlidingSpeed;
	float SolarRegenFactor;
	float SpaceJetpackDrainRate;
	float SpaceJetpackForce;
	float SpaceJetpackIgnitionForce;
	float SpaceJetpackMaxSpeed;
	float SpaceJetpackUpForce;
	float SpaceMaxGravityDist;
	float SpaceMinGravityDist;
	float SpawningDistanceBetweenPlayersAfterWarp;
	float SpawningSpaceBattleLookOffset;
	float SpawningSpaceBattleLookOffsetUp;
	float SpeedLinesLength;
	float SpeedLinesMaxAlpha;
	float SpeedLinesMinAlpha;
	float SpeedLinesOffset;
	float SpeedLinesRadiusIncrement;
	float SpeedLinesRadiusStartMax;
	float SpeedLinesRadiusStartMin;
	float SpeedLinesSpeedMax;
	float SpeedLinesSpeedMin;
	float SpeedLinesStartFade;
	float SpeedLinesTotalLength;
	float SpeedLinesWidthMax;
	float SpeedLinesWidthMin;
	float StaminaRate;
	float StaminaRecoveredFactor;
	float StaminaRecoveryRate;
	float StarFieldDensity;
	float StarFieldRadius;
	float StarFieldStarSize;
	float StartHazardTimeMultiplier;
	float StartSpookTimeMultiplier;
	int32_t StealthBaseCharge;
	float StealthDrainRate;
	float StealthMinLevel;
	float StealthRechargeRate;
	float StickDeadZoneMax;
	float StickDeadZoneMin;
	float StickYDampingThreshold;
	int32_t SuitInventoryStartSeed;
	float SummonArcRange;
	float SummonShipDirectionChangeDeadZoneAngle;
	float SurfaceSwimForce;
	float SurfaceSwimMaxSpeed;
	float TakeDamageImpulse;
	float TargetDistance;
	float TargetRadius;
	float TeleportAppearEffectSpeed;
	float TeleportArcLengthMultiplier;
	float TeleportArcRadius;
	float TeleportArcRadiusInner;
	float TeleportBallCompletionFactorFadeout;
	float TeleportBallDistanceFadeAlpha;
	float TeleportBallFadeMinDistance;
	float TeleportBallFadeRange;
	float TeleportBallRadius;
	float TeleportBeamAnimHeight;
	float TeleportBeamAnimSpeed;
	float TeleportBeamGravity;
	float TeleportBeamGravityMax;
	float TeleportChargeFadeInTime;
	float TeleportChargeMaxDistance;
	float TeleportChargeMinDistance;
	float TeleportChargeMinTime;
	float TeleportChargeMoveSpeed;
	float TeleportDirectionAltHandRange;
	float TeleportDisappearEffectSpeed;
	float TeleportHmdMaxFade;
	float TeleportHmdMinFade;
	float TeleportHmdOutFactor;
	float TeleportInitiateThreshold;
	float TeleportInstantTravelDistance;
	float TeleportLastKnownThreshold;
	float TeleportLineBezierDistanceFactor;
	float TeleportLineBezierOffset;
	float TeleportLineEndFadeEnd;
	float TeleportLineEndFadeStart;
	float TeleportLineFadeRange;
	float TeleportLineFadeStart;
	float TeleportMaxTravelDistance;
	float TeleportMaxTravelDistanceVertical;
	float TeleportMotionOffsetAmount;
	float TeleportMotionOffsetUp;
	float TeleportStrafeDistance;
	float TeleportTotalTime;
	float TeleportTravelSurfaceAngle;
	float TemperatureDisplaySampleTime;
	float TerrainLaserRange;
	float ThirdPersonRecoilMultiplier;
	float ThirdPersonWeaponAttachRotationCorrectionAngle;
	float ThirdPersonWeaponXOffset;
	float TimeHoldDownAccelerateToLaunchFromOutpost;
	float TrackArrowStaticTargetOffsetMultiplier;
	float TraderApproachDistance;
	float TraderApproachTime;
	int32_t TraderCommunicationBanMaxTime;
	int32_t TraderCommunicationBanMinTime;
	float TraderHailDistance;
	float TraderHailTime;
	float TraderHealthFightThreshold;
	float TraderSpamTimeWait;
	float TraderStayCloseLockOffset;
	float TraderStayCloseLockSin1Coeff;
	float TraderStayCloseLockSin1Offset;
	float TraderStayCloseLockSin2Coeff;
	float TraderStayCloseLockSin2Offset;
	float TraderStayCloseLockSinsAdd;
	float TraderStayCloseLockSpread;
	float TraderStayCloseLockSpreadAdd;
	float TraderStayCloseLockSpreadTime;
	float UnderwaterBrake;
	float UnderwaterCurrentStrengthHorizontalMax;
	float UnderwaterCurrentStrengthHorizontalMin;
	float UnderwaterCurrentStrengthVertical;
	float UnderwaterFloatRange;
	float UnderwaterFluidDensity;
	float UnderwaterForce;
	float UnderwaterImpact;
	float UnderwaterJetpackEscapeForce;
	float UnderwaterJetpackForce;
	float UnderwaterMargin;
	float UnderwaterMaxJetpackEscapeSpeed;
	float UnderwaterMaxJetpackSpeed;
	float UnderwaterMaxSpeedTotal;
	float UnderwaterMaxSpeedTotalJetpacking;
	float UnderwaterMinDepth;
	float UnderwaterPlayerMass;
	float UnderwaterPlayerSphereDepthOffsetFirstPerson;
	float UnderwaterPlayerSphereDepthOffsetMax;
	float UnderwaterPlayerSphereDepthOffsetMin;
	float UnderwaterPlayerSphereDepthOffsetPitchedExtra;
	float UnderwaterPlayerSphereOffsetMaxPitch;
	float UnderwaterPlayerSphereOffsetMinPitch;
	float UnderwaterPlayerSphereRadius;
	float UnderwaterSurfaceForceFlattenAngleMin;
	float UnderwaterSurfaceForceFlattenAngleRange;
	float UnderwaterSwimMaxSpeed;
	float UtilityWeaponRange;
	float VehicleHazardDampingModifier;
	float VehicleLaserRange;
	float VehicleRaceResultsHintTime;
	float VRModeHazardTimeMultiplier;
	float VRStartHazardTimeMultiplier;
	float WalkerAlertRange;
	float WalkerSightAngle;
	float WalkerSightRange;
	float WantedDroneEventRadius;
	float WantedEnemyAttackAmount;
	float WantedLevelDelay;
	float WantedLevelPlayerRange;
	float WantedLevelPlayerRangeSpace;
	float WantedMinorCrimeAmount;
	float WantedMinPlanetTime;
	float WantedMinSpaceTime;
	float WantedTimeoutAggressive;
	float WantedWitnessFuzzyTime;
	float WantedWitnessTimer;
	float WeaponBobBlendTime;
	float WeaponBobFactorRun;
	float WeaponBobFactorWalk;
	float WeaponBobFactorWalkDeadZone;
	float WeaponCannonMinUnchargedShotThreshold;
	float WeaponCannonMinUnchargedShotTime;
	float WeaponCannonMinWeaponTimer;
	float WeaponChangeModeTime;
	float WeaponCoolFactor;
	float WeaponGrenadeTime;
	float WeaponGunTime;
	float WeaponHolsterDelay;
	float WeaponLag;
	float WeaponLowerDelay;
	float WeaponPriceExp2;
	float WeaponRailFireTime;
	float WeaponRailRechargeTime;
	float WeaponShotgunSlowdown;
	float WeaponZoomFOV;
	float WeaponZoomHorzRotation;
	float WeaponZoomRecoilMultiplier;
	float WeaponZoomVertRotation;
	float WitnessAIDamageAngle;
	float WitnessAIDamageDistance;
	float WitnessSenseEnhancement;
	float WitnessSenseEnhancementTime;
	int32_t WordCategoriesRequiredToConverse;
	float WoundDamageDecayTime;
	float WoundDamageLimit;
	float WoundDamageLimitShip;
	float WoundTimeMinimum;
	NMS_Toolkit::TkCurveType AimDisperseCurve;
	bool AutoAim;
	NMS_Toolkit::TkCurveType AutoAimCentreOffsetCurve;
	NMS_Toolkit::TkCurveType AutoAimDotCurve;
	bool BoltcasterHasTracer;
	bool ClampPitch;
	bool CreatureRideFade;
	bool DoPlayerAppearInVehicleEffect;
	bool EnableHeadMovements;
	bool EnableLeaning;
	bool EnablePointDownToSmoothMove;
	bool FireButtonReloadsWeapon;
	bool ForceFreighterProcTechRandom;
	bool FrontShieldEnabled;
	bool HandSwimEnabled;
	bool HideHazardPanel;
	bool HmdSmoothTurnAlways;
	bool InteractNearbyRadiusEnabled;
	bool InventoryDamage;
	bool LuckyWithTech;
	bool MouseCrosshairVisible;
	NMS_Toolkit::TkCurveType MouseFlightCurve;
	bool MultiplayerShareWanted;
	bool NeverPreyedOn;
	bool PassiveLook;
	bool PermanantAltFire;
	bool PermanantFire;
	bool RecenterViewWhenEnteringShip;
	bool ReportAllProjectileDamage;
	bool RequireHandsOnShipControls;
	bool RocketBootsEnabled;
	bool RocketBootsUseCustomCamera;
	bool ShowFirstPersonCharacterShadowPCVR;
	bool ShowFirstPersonCharacterShadowPSVR;
	bool ShowLowAmmoWarning;
	NMS_Toolkit::TkCurveType StickCurve;
	bool TeleportRecentre;
	NMS_Toolkit::TkCurveType UnderwaterBuoyancyDepthCurve;
	bool UpgradeExosuitWithProduct;
	bool UseEnergy;
	bool UseHazardProtection;
	bool UseLargeHealthBar;
	NMS_Toolkit::TkCurveType WeaponBobBlendCurve;
	bool WeaponZoomEnabled;

	friend bool operator==(const GcPlayerGlobals& lhs, const GcPlayerGlobals& rhs) 
	{
		return lhs.LargeWeaponMenuTransforms == rhs.LargeWeaponMenuTransforms &&
		lhs.QuickMenuLauncherTransforms == rhs.QuickMenuLauncherTransforms &&
		lhs.QuickMenuLauncherTransformsNoBuildMenu == rhs.QuickMenuLauncherTransformsNoBuildMenu &&
		lhs.WeaponMenuTransforms == rhs.WeaponMenuTransforms &&
		lhs.ArmourHighlightScanEffect == rhs.ArmourHighlightScanEffect &&
		lhs.HolsterHighlightEffect == rhs.HolsterHighlightEffect &&
		lhs.InteractHighlightEffect == rhs.InteractHighlightEffect &&
		lhs.MeleeHitEffect == rhs.MeleeHitEffect &&
		lhs.AnomalyAtlasStationSpawnData == rhs.AnomalyAtlasStationSpawnData &&
		lhs.AnomalyBlachHoleSpawnData == rhs.AnomalyBlachHoleSpawnData &&
		lhs.AnomalyMiniStationSpawnData == rhs.AnomalyMiniStationSpawnData &&
		lhs.BinocularInfoScreenOffset == rhs.BinocularInfoScreenOffset &&
		lhs.BinocularInfoScreenOffsetGun == rhs.BinocularInfoScreenOffsetGun &&
		lhs.DefaultLeftHandTransform == rhs.DefaultLeftHandTransform &&
		lhs.DefaultLeftHandTransformVehicle == rhs.DefaultLeftHandTransformVehicle &&
		lhs.FrontendBaseScreenshotVROffset == rhs.FrontendBaseScreenshotVROffset &&
		lhs.FrontendMessagesOffset == rhs.FrontendMessagesOffset &&
		lhs.FrontendOffset == rhs.FrontendOffset &&
		lhs.FrontendOffsetV2 == rhs.FrontendOffsetV2 &&
		lhs.FrontendPhotoModeVROffset == rhs.FrontendPhotoModeVROffset &&
		lhs.InventoryOffset == rhs.InventoryOffset &&
		lhs.InventoryOffsetV2 == rhs.InventoryOffsetV2 &&
		lhs.InWorldCompass == rhs.InWorldCompass &&
		lhs.QuickMenuOffset == rhs.QuickMenuOffset &&
		lhs.QuickMenuOffsetV2 == rhs.QuickMenuOffsetV2 &&
		lhs.BinocularScopeOffset == rhs.BinocularScopeOffset &&
		lhs.DefaultMuzzleColour == rhs.DefaultMuzzleColour &&
		lhs.DefaultMuzzleLaserColour == rhs.DefaultMuzzleLaserColour &&
		lhs.HandScreenRoboOnScreenOffset == rhs.HandScreenRoboOnScreenOffset &&
		lhs.HolsterHeadOffset == rhs.HolsterHeadOffset &&
		lhs.InteractionLineActiveColour == rhs.InteractionLineActiveColour &&
		lhs.InteractionLineBaseColour == rhs.InteractionLineBaseColour &&
		lhs.LeftHandModeFishingRodAttachSocketCorrection == rhs.LeftHandModeFishingRodAttachSocketCorrection &&
		lhs.LeftHandModeWeaponAttachSocketCorrection == rhs.LeftHandModeWeaponAttachSocketCorrection &&
		lhs.PointingWristAngles == rhs.PointingWristAngles &&
		lhs.SearchGroupIconColour == rhs.SearchGroupIconColour &&
		lhs.StarFieldColour == rhs.StarFieldColour &&
		lhs.TerrainEditorMuzzleColourAdd == rhs.TerrainEditorMuzzleColourAdd &&
		lhs.TerrainEditorMuzzleColourFlatten == rhs.TerrainEditorMuzzleColourFlatten &&
		lhs.TerrainEditorMuzzleColourSubtract == rhs.TerrainEditorMuzzleColourSubtract &&
		lhs.TerrainEditorMuzzleColourUndo == rhs.TerrainEditorMuzzleColourUndo &&
		lhs.TraderStayCloseLockBaseOffset == rhs.TraderStayCloseLockBaseOffset &&
		lhs.WeaponBarrelOffset == rhs.WeaponBarrelOffset &&
		lhs.WeaponOffset == rhs.WeaponOffset &&
		lhs.TraderHailMessages == rhs.TraderHailMessages &&
		lhs.PirateHailMessage == rhs.PirateHailMessage &&
		lhs.PoliceScanHailMessage == rhs.PoliceScanHailMessage &&
		lhs.TraderHailReceiveOSDLoc == rhs.TraderHailReceiveOSDLoc &&
		lhs.TraderHailRefusedOSDLoc == rhs.TraderHailRefusedOSDLoc &&
		lhs.AlertTable == rhs.AlertTable &&
		lhs.DebugSearchGroup == rhs.DebugSearchGroup &&
		lhs.DefaultShipFilename == rhs.DefaultShipFilename &&
		lhs.DefaultShipSeed == rhs.DefaultShipSeed &&
		lhs.ExosuitUpgradeProduct == rhs.ExosuitUpgradeProduct &&
		lhs.ExperienceDefeatBugQueenRewardID == rhs.ExperienceDefeatBugQueenRewardID &&
		lhs.ExperienceDefeatBugQueenRewardIDProduct == rhs.ExperienceDefeatBugQueenRewardIDProduct &&
		lhs.ExperienceDefeatJellyBossRewardID == rhs.ExperienceDefeatJellyBossRewardID &&
		lhs.ExperienceDefeatLevel5SentinelsCorrupt == rhs.ExperienceDefeatLevel5SentinelsCorrupt &&
		lhs.ExperienceDefeatLevel5SentinelsNearHiveReward == rhs.ExperienceDefeatLevel5SentinelsNearHiveReward &&
		lhs.ExperienceDefeatLevel5SentinelsReward == rhs.ExperienceDefeatLevel5SentinelsReward &&
		lhs.ExperienceDefeatLevel5SpaceSentinelsReward == rhs.ExperienceDefeatLevel5SpaceSentinelsReward &&
		lhs.FirstSpawnDataTable == rhs.FirstSpawnDataTable &&
		lhs.FootDustEffect == rhs.FootDustEffect &&
		lhs.Gun == rhs.Gun &&
		lhs.NoShadowMaterial == rhs.NoShadowMaterial &&
		lhs.PulseEncounterSpaceEggID == rhs.PulseEncounterSpaceEggID &&
		lhs.TechLearningProbabilities == rhs.TechLearningProbabilities &&
		lhs.TechRarityData == rhs.TechRarityData &&
		lhs.WantedEscalateTime == rhs.WantedEscalateTime &&
		lhs.WantedExtremeEscalateTime == rhs.WantedExtremeEscalateTime &&
		lhs.WantedTimeout == rhs.WantedTimeout &&
		lhs.AutoSaveMaxTime == rhs.AutoSaveMaxTime &&
		lhs.AutoSaveMinTime == rhs.AutoSaveMinTime &&
		lhs.PointingWristAdjustmentTimeMilliseconds == rhs.PointingWristAdjustmentTimeMilliseconds &&
		lhs.CrystalResourceCollect == rhs.CrystalResourceCollect &&
		lhs.FishingResourceCollect == rhs.FishingResourceCollect &&
		lhs.ShardResourceCollect == rhs.ShardResourceCollect &&
		lhs.TerrainResourceCollect == rhs.TerrainResourceCollect &&
		lhs.TerrainResourceMeleeCollect == rhs.TerrainResourceMeleeCollect &&
		lhs.TerrainResourceMiniCollect == rhs.TerrainResourceMiniCollect &&
		lhs.MissileSwarm == rhs.MissileSwarm &&
		lhs.PlayerBullet == rhs.PlayerBullet &&
		lhs.RobotBullet == rhs.RobotBullet &&
		lhs.ShipBullet == rhs.ShipBullet &&
		lhs.AmbientModeLookStickData == rhs.AmbientModeLookStickData &&
		lhs.FreighterValueData == rhs.FreighterValueData &&
		lhs.LookStickData == rhs.LookStickData &&
		lhs.ShipValueData == rhs.ShipValueData &&
		lhs.StickData == rhs.StickData &&
		lhs.WeaponValueData == rhs.WeaponValueData &&
		lhs.MedalTiers == rhs.MedalTiers &&
		std::equal(std::begin(lhs.TraderHailReceiveRegular), std::end(lhs.TraderHailReceiveRegular), std::begin(rhs.TraderHailReceiveRegular)) &&
		lhs.ExperienceFlybyStartAngle == rhs.ExperienceFlybyStartAngle &&
		lhs.FingerButtonQuickMenuButtonSize == rhs.FingerButtonQuickMenuButtonSize &&
		lhs.MouseSpringStrength == rhs.MouseSpringStrength &&
		lhs.MouseSpringStrengthMaxDelta == rhs.MouseSpringStrengthMaxDelta &&
		lhs.MouseSpringStrengthMinDelta == rhs.MouseSpringStrengthMinDelta &&
		std::equal(std::begin(lhs.TraderHailReceiveFight), std::end(lhs.TraderHailReceiveFight), std::begin(rhs.TraderHailReceiveFight)) &&
		std::equal(std::begin(lhs.TraderHailSend), std::end(lhs.TraderHailSend), std::begin(rhs.TraderHailSend)) &&
		lhs.AbandonedFreighterRechargeMod == rhs.AbandonedFreighterRechargeMod &&
		lhs.AbandonedFreighterStaminaRate == rhs.AbandonedFreighterStaminaRate &&
		lhs.AbandonedFreighterStaminaRecoveryMod == rhs.AbandonedFreighterStaminaRecoveryMod &&
		lhs.AimDecay == rhs.AimDecay &&
		lhs.AimDisperseCooldownFactor == rhs.AimDisperseCooldownFactor &&
		lhs.AimDisperseCooldownTime == rhs.AimDisperseCooldownTime &&
		lhs.AimDisperseMinTime == rhs.AimDisperseMinTime &&
		lhs.AimDisperseTime == rhs.AimDisperseTime &&
		lhs.AimDistanceShip == rhs.AimDistanceShip &&
		lhs.AimMinWeight == rhs.AimMinWeight &&
		lhs.AimOffset == rhs.AimOffset &&
		lhs.AimShootableTargetAngle == rhs.AimShootableTargetAngle &&
		lhs.AimSpeed == rhs.AimSpeed &&
		lhs.AimWeightAdd == rhs.AimWeightAdd &&
		lhs.AlienPodAggroDecay == rhs.AlienPodAggroDecay &&
		lhs.AlienPodAggroSpring == rhs.AlienPodAggroSpring &&
		lhs.AnimRunBlendPoint == rhs.AnimRunBlendPoint &&
		lhs.AnimRunSpeed == rhs.AnimRunSpeed &&
		lhs.AnimWalkBlendPoint == rhs.AnimWalkBlendPoint &&
		lhs.AnimWalkSpeed == rhs.AnimWalkSpeed &&
		lhs.AnimWalkToRunSpeed == rhs.AnimWalkToRunSpeed &&
		lhs.AtmosphereEffectOffset == rhs.AtmosphereEffectOffset &&
		lhs.AtmosphereEffectTime == rhs.AtmosphereEffectTime &&
		lhs.AutoAimFixedInterceptSpeed == rhs.AutoAimFixedInterceptSpeed &&
		lhs.AutoAimMaxAccelFactor == rhs.AutoAimMaxAccelFactor &&
		lhs.AutoAimMaxAngle == rhs.AutoAimMaxAngle &&
		lhs.AutoAimMinScreenDistance == rhs.AutoAimMinScreenDistance &&
		lhs.AutoAimRadiusExtra == rhs.AutoAimRadiusExtra &&
		lhs.AutoAimStickyMax == rhs.AutoAimStickyMax &&
		lhs.AutoAimStickyMin == rhs.AutoAimStickyMin &&
		lhs.AutoAimStickyRailgun == rhs.AutoAimStickyRailgun &&
		lhs.AutoAimTimeOut == rhs.AutoAimTimeOut &&
		lhs.AutoLandRange == rhs.AutoLandRange &&
		lhs.AutoLandTime == rhs.AutoLandTime &&
		lhs.AutoSaveRangeInSpace == rhs.AutoSaveRangeInSpace &&
		lhs.AutoSaveRangeInVehicle == rhs.AutoSaveRangeInVehicle &&
		lhs.AutoSaveRangeOnFoot == rhs.AutoSaveRangeOnFoot &&
		lhs.BalanceSpeed == rhs.BalanceSpeed &&
		lhs.BalanceStrength == rhs.BalanceStrength &&
		lhs.BaseUnderwaterDepth == rhs.BaseUnderwaterDepth &&
		lhs.BeaconActivateRange == rhs.BeaconActivateRange &&
		lhs.BeamRecoil == rhs.BeamRecoil &&
		lhs.BestGuildRank == rhs.BestGuildRank &&
		lhs.BincoularRayThickness == rhs.BincoularRayThickness &&
		lhs.BinocularAimOffset == rhs.BinocularAimOffset &&
		lhs.BinocularCreatureCastSphereSize == rhs.BinocularCreatureCastSphereSize &&
		lhs.BinocularRangePlanet == rhs.BinocularRangePlanet &&
		lhs.BinocularRangeSpace == rhs.BinocularRangeSpace &&
		lhs.BinocularRayThicknessVR == rhs.BinocularRayThicknessVR &&
		lhs.BinocularScopeScale == rhs.BinocularScopeScale &&
		lhs.BinocularScopeSmoothing == rhs.BinocularScopeSmoothing &&
		lhs.BinocularsHUDDistanceVR == rhs.BinocularsHUDDistanceVR &&
		lhs.BinocularsHUDScaleVR == rhs.BinocularsHUDScaleVR &&
		lhs.BlastRecoilSpring == rhs.BlastRecoilSpring &&
		lhs.BodyRealignmentDelay == rhs.BodyRealignmentDelay &&
		lhs.BulletBend == rhs.BulletBend &&
		lhs.BulletClipMultiplier == rhs.BulletClipMultiplier &&
		lhs.BulletCostReducer == rhs.BulletCostReducer &&
		lhs.CannonRecoilSpring == rhs.CannonRecoilSpring &&
		lhs.ChanceHighGradeIllegal == rhs.ChanceHighGradeIllegal &&
		lhs.ChargedEnergyBallSpeed == rhs.ChargedEnergyBallSpeed &&
		lhs.ChargeMeleeCooldown == rhs.ChargeMeleeCooldown &&
		lhs.ChargeTime == rhs.ChargeTime &&
		lhs.ClimbableStickinessAngle == rhs.ClimbableStickinessAngle &&
		lhs.ClingAngleThreshold == rhs.ClingAngleThreshold &&
		lhs.ClingBrakeMultiplier == rhs.ClingBrakeMultiplier &&
		lhs.ClingSpeedThreshold == rhs.ClingSpeedThreshold &&
		lhs.CockpitEjectFirstPersonOffset == rhs.CockpitEjectFirstPersonOffset &&
		lhs.CockpitEjectFirstPersonOffsetTime == rhs.CockpitEjectFirstPersonOffsetTime &&
		lhs.CockpitEjectSideTestRange == rhs.CockpitEjectSideTestRange &&
		lhs.CockpitEjectTestEndHeightOffset == rhs.CockpitEjectTestEndHeightOffset &&
		lhs.CockpitEjectTestRadius == rhs.CockpitEjectTestRadius &&
		lhs.CockpitEjectTestSphereRadius == rhs.CockpitEjectTestSphereRadius &&
		lhs.CockpitEjectTestSphereRange == rhs.CockpitEjectTestSphereRange &&
		lhs.CockpitEjectTestStartHeightOffset == rhs.CockpitEjectTestStartHeightOffset &&
		lhs.CombatEscalateTime == rhs.CombatEscalateTime &&
		lhs.CombatEscapeRadius == rhs.CombatEscapeRadius &&
		lhs.CombatEscapeTime == rhs.CombatEscapeTime &&
		lhs.CombatSpawnMinWantedTime == rhs.CombatSpawnMinWantedTime &&
		lhs.CommunicatorSpeed == rhs.CommunicatorSpeed &&
		lhs.ControlModes == rhs.ControlModes &&
		lhs.CreativeModeDeathFadeInTime == rhs.CreativeModeDeathFadeInTime &&
		lhs.CreativeModeDeathFadeOutTime == rhs.CreativeModeDeathFadeOutTime &&
		lhs.CreatureRideFadeInTime == rhs.CreatureRideFadeInTime &&
		lhs.CreatureRideFadeOutTime == rhs.CreatureRideFadeOutTime &&
		lhs.CriticalHitDesatFreq == rhs.CriticalHitDesatFreq &&
		lhs.CriticalHitDesatTime == rhs.CriticalHitDesatTime &&
		lhs.CriticalHitTime == rhs.CriticalHitTime &&
		lhs.CrosshairTime == rhs.CrosshairTime &&
		lhs.CrouchHeightToDisableLegBlendingVR == rhs.CrouchHeightToDisableLegBlendingVR &&
		lhs.DamageRateWhenUnderNoGravity == rhs.DamageRateWhenUnderNoGravity &&
		lhs.DamageRepairFactor == rhs.DamageRepairFactor &&
		lhs.DeathDamageDrainChargeFactor == rhs.DeathDamageDrainChargeFactor &&
		lhs.DeathDamageTechBrokenPercent == rhs.DeathDamageTechBrokenPercent &&
		lhs.DeathScreenFadeInThirdPerson == rhs.DeathScreenFadeInThirdPerson &&
		lhs.DeathScreenFadeInTime == rhs.DeathScreenFadeInTime &&
		lhs.DeathScreenFadeInUnderwaterThirdPerson == rhs.DeathScreenFadeInUnderwaterThirdPerson &&
		lhs.DeathScreenFadeOutTime == rhs.DeathScreenFadeOutTime &&
		lhs.DeathScreenMaxRegenWaitTime == rhs.DeathScreenMaxRegenWaitTime &&
		lhs.DeathScreenMinRegenWaitTime == rhs.DeathScreenMinRegenWaitTime &&
		lhs.DeathScreenPauseTime == rhs.DeathScreenPauseTime &&
		lhs.DeathScreenShipFadeInTime == rhs.DeathScreenShipFadeInTime &&
		lhs.DeepWaterDepth == rhs.DeepWaterDepth &&
		lhs.DefaultHealthPips == rhs.DefaultHealthPips &&
		lhs.DefaultHitPoints == rhs.DefaultHitPoints &&
		lhs.DefaultShipHealthPips == rhs.DefaultShipHealthPips &&
		lhs.DestroyEffectFinalDelay == rhs.DestroyEffectFinalDelay &&
		lhs.DroneProbeScanTime == rhs.DroneProbeScanTime &&
		lhs.DroneScanTimeToForget == rhs.DroneScanTimeToForget &&
		lhs.DroneSpawnAccelerator == rhs.DroneSpawnAccelerator &&
		lhs.DroneStartLocationRadius == rhs.DroneStartLocationRadius &&
		lhs.EarlyHazardTimeMultiplier == rhs.EarlyHazardTimeMultiplier &&
		lhs.EnergyBallSpeed == rhs.EnergyBallSpeed &&
		lhs.EnergyDamageMinTime == rhs.EnergyDamageMinTime &&
		lhs.EnergyDischargeRateDeepWater == rhs.EnergyDischargeRateDeepWater &&
		lhs.EnergyDischargeRateFloatingInSpace == rhs.EnergyDischargeRateFloatingInSpace &&
		lhs.EnergyDischargeRateHigh == rhs.EnergyDischargeRateHigh &&
		lhs.EnergyDischargeRateLow == rhs.EnergyDischargeRateLow &&
		lhs.EnergyDischargeRateMedium == rhs.EnergyDischargeRateMedium &&
		lhs.EnergyPainRate == rhs.EnergyPainRate &&
		lhs.ExertionFromPainTime == rhs.ExertionFromPainTime &&
		lhs.ExertionSmoothTime == rhs.ExertionSmoothTime &&
		lhs.ExperienceAlertRange == rhs.ExperienceAlertRange &&
		lhs.ExperienceAlertSightAngle == rhs.ExperienceAlertSightAngle &&
		lhs.ExperienceAlertSightRange == rhs.ExperienceAlertSightRange &&
		lhs.ExperienceDefeatBugQueenFiendSplatDelay == rhs.ExperienceDefeatBugQueenFiendSplatDelay &&
		lhs.ExperienceDefeatBugQueenRewardChance == rhs.ExperienceDefeatBugQueenRewardChance &&
		lhs.ExperienceDefeatBugQueenRewardDelay == rhs.ExperienceDefeatBugQueenRewardDelay &&
		lhs.ExperienceDefeatLevel5SentinelsDisableWantedTime == rhs.ExperienceDefeatLevel5SentinelsDisableWantedTime &&
		lhs.ExperienceDefeatLevel5SentinelsRewardDelay == rhs.ExperienceDefeatLevel5SentinelsRewardDelay &&
		lhs.ExperienceDefeatLevel5SpaceSentinelsMessageDelay == rhs.ExperienceDefeatLevel5SpaceSentinelsMessageDelay &&
		lhs.ExperienceDefeatLevel5SpaceSentinelsRewardDelay == rhs.ExperienceDefeatLevel5SpaceSentinelsRewardDelay &&
		lhs.ExperienceDefeatLevel5SpaceSentinelsWarpDelay == rhs.ExperienceDefeatLevel5SpaceSentinelsWarpDelay &&
		lhs.ExperienceDroneSpawnAngle == rhs.ExperienceDroneSpawnAngle &&
		lhs.ExperienceDroneSpawnOffset == rhs.ExperienceDroneSpawnOffset &&
		lhs.ExperienceDroneTimeMax == rhs.ExperienceDroneTimeMax &&
		lhs.ExperienceDroneTimeMin == rhs.ExperienceDroneTimeMin &&
		lhs.ExperienceFlybyScareRadius == rhs.ExperienceFlybyScareRadius &&
		lhs.ExperienceFlybyScareTime == rhs.ExperienceFlybyScareTime &&
		lhs.ExperienceHardPiratesDamageMaxOdds == rhs.ExperienceHardPiratesDamageMaxOdds &&
		lhs.ExperienceInterestingDroneDistance == rhs.ExperienceInterestingDroneDistance &&
		lhs.ExperienceInterestingFreighterDistance == rhs.ExperienceInterestingFreighterDistance &&
		lhs.ExperienceInterestingPoliceDistance == rhs.ExperienceInterestingPoliceDistance &&
		lhs.ExperienceInterestingShipDistance == rhs.ExperienceInterestingShipDistance &&
		lhs.ExperienceMaxCivilianShipSpawnsInSpace == rhs.ExperienceMaxCivilianShipSpawnsInSpace &&
		lhs.ExperienceMaxCivilianShipSpawnsOnPlanet == rhs.ExperienceMaxCivilianShipSpawnsOnPlanet &&
		lhs.ExperienceMediumPiratesDamageMaxOdds == rhs.ExperienceMediumPiratesDamageMaxOdds &&
		lhs.ExperienceMessageBroadcastNearbyDistance == rhs.ExperienceMessageBroadcastNearbyDistance &&
		lhs.ExperiencePirateCloseAttackPercentage == rhs.ExperiencePirateCloseAttackPercentage &&
		lhs.ExperiencePirateFreighterAttackRange == rhs.ExperiencePirateFreighterAttackRange &&
		lhs.ExperiencePiratesDifficultyVariance == rhs.ExperiencePiratesDifficultyVariance &&
		lhs.ExperiencePirateTimeMax == rhs.ExperiencePirateTimeMax &&
		lhs.ExperiencePirateTimeMin == rhs.ExperiencePirateTimeMin &&
		lhs.ExperienceShipTimeMax == rhs.ExperienceShipTimeMax &&
		lhs.ExperienceShipTimeMin == rhs.ExperienceShipTimeMin &&
		lhs.ExperienceWalkerSize == rhs.ExperienceWalkerSize &&
		lhs.ExplodeShakeMaxDist == rhs.ExplodeShakeMaxDist &&
		lhs.ExplodeShakeMaxDistSpace == rhs.ExplodeShakeMaxDistSpace &&
		lhs.ExplodeShakeStrength == rhs.ExplodeShakeStrength &&
		lhs.ExplosionBoundingInset == rhs.ExplosionBoundingInset &&
		lhs.ExplosionBoundingInsetRange == rhs.ExplosionBoundingInsetRange &&
		lhs.ExplosionScaleVariance == rhs.ExplosionScaleVariance &&
		lhs.ExplosionTimePerEffect == rhs.ExplosionTimePerEffect &&
		lhs.ExplosionTimeVariance == rhs.ExplosionTimeVariance &&
		lhs.FingerButtonClickSize == rhs.FingerButtonClickSize &&
		lhs.FingerButtonClickTime == rhs.FingerButtonClickTime &&
		lhs.FingerButtonQuickMenuOffset == rhs.FingerButtonQuickMenuOffset &&
		lhs.FingerButtonRadiusOffset == rhs.FingerButtonRadiusOffset &&
		lhs.FingerTipOffset == rhs.FingerTipOffset &&
		lhs.FistClenchBlendInTime == rhs.FistClenchBlendInTime &&
		lhs.FistClenchBlendOutTime == rhs.FistClenchBlendOutTime &&
		lhs.FlamethrowerDispersion == rhs.FlamethrowerDispersion &&
		lhs.FlashGrow == rhs.FlashGrow &&
		lhs.FlashPosX == rhs.FlashPosX &&
		lhs.FlashPosY == rhs.FlashPosY &&
		lhs.FlashPosZ == rhs.FlashPosZ &&
		lhs.FlashPulse == rhs.FlashPulse &&
		lhs.FlashSize == rhs.FlashSize &&
		lhs.FlashSpeed == rhs.FlashSpeed &&
		lhs.FoodValueThresholdAverage == rhs.FoodValueThresholdAverage &&
		lhs.FoodValueThresholdBad == rhs.FoodValueThresholdBad &&
		lhs.FoodValueThresholdBest == rhs.FoodValueThresholdBest &&
		lhs.FoodValueThresholdGood == rhs.FoodValueThresholdGood &&
		lhs.FoodValueThresholdWorst == rhs.FoodValueThresholdWorst &&
		lhs.FootDustScale == rhs.FootDustScale &&
		lhs.FootOffset == rhs.FootOffset &&
		lhs.FreeJetpackRange == rhs.FreeJetpackRange &&
		lhs.FreeJetpackRangeNonTerrain == rhs.FreeJetpackRangeNonTerrain &&
		lhs.FreeJetpackRangePrime == rhs.FreeJetpackRangePrime &&
		lhs.FreeJetpackSlopeAngle == rhs.FreeJetpackSlopeAngle &&
		lhs.FreeJetpackSlopeAnglePrime == rhs.FreeJetpackSlopeAnglePrime &&
		lhs.FreighterAbandonedHazardTimeMultiplier == rhs.FreighterAbandonedHazardTimeMultiplier &&
		lhs.FreighterCoolFactor == rhs.FreighterCoolFactor &&
		lhs.FreighterPriceExp2 == rhs.FreighterPriceExp2 &&
		lhs.FreighterProbeScanTime == rhs.FreighterProbeScanTime &&
		lhs.FreighterSpawnedOnYouFadeInTime == rhs.FreighterSpawnedOnYouFadeInTime &&
		lhs.FrigateFlybyMarkerAlwaysHideDistance == rhs.FrigateFlybyMarkerAlwaysHideDistance &&
		lhs.FrigateFlybyMarkerAlwaysShowDistance == rhs.FrigateFlybyMarkerAlwaysShowDistance &&
		lhs.FrontShieldOffsetOff == rhs.FrontShieldOffsetOff &&
		lhs.FrontShieldOffsetOffVR == rhs.FrontShieldOffsetOffVR &&
		lhs.FrontShieldOffsetOn == rhs.FrontShieldOffsetOn &&
		lhs.FrontShieldOffsetOnVR == rhs.FrontShieldOffsetOnVR &&
		lhs.FrontShieldScaleVR == rhs.FrontShieldScaleVR &&
		lhs.FrontShieldSlerpTime == rhs.FrontShieldSlerpTime &&
		lhs.FrontShieldSlerpTimeVR == rhs.FrontShieldSlerpTimeVR &&
		lhs.FrontShieldSpeedSlowdown == rhs.FrontShieldSpeedSlowdown &&
		lhs.FrontShieldUpOffsetVR == rhs.FrontShieldUpOffsetVR &&
		lhs.FullClipReloadSpeedMultiplier == rhs.FullClipReloadSpeedMultiplier &&
		lhs.GhostbusterAmp1 == rhs.GhostbusterAmp1 &&
		lhs.GhostbusterAmp2 == rhs.GhostbusterAmp2 &&
		lhs.GhostbusterAmp3 == rhs.GhostbusterAmp3 &&
		lhs.GhostbusterFreq1 == rhs.GhostbusterFreq1 &&
		lhs.GhostbusterFreq2 == rhs.GhostbusterFreq2 &&
		lhs.GhostbusterFreq3 == rhs.GhostbusterFreq3 &&
		lhs.GhostbusterSpeed1 == rhs.GhostbusterSpeed1 &&
		lhs.GhostbusterSpeed2 == rhs.GhostbusterSpeed2 &&
		lhs.GhostbusterSpeed3 == rhs.GhostbusterSpeed3 &&
		lhs.GhostbusterStart1 == rhs.GhostbusterStart1 &&
		lhs.GhostbusterStart2 == rhs.GhostbusterStart2 &&
		lhs.GhostbusterStart3 == rhs.GhostbusterStart3 &&
		lhs.GhostbusterStartLength == rhs.GhostbusterStartLength &&
		lhs.GrassPushDistance == rhs.GrassPushDistance &&
		lhs.GrassPushDistanceFeet == rhs.GrassPushDistanceFeet &&
		lhs.GrenadeBaseClipSize == rhs.GrenadeBaseClipSize &&
		lhs.GrenadeBounceDamping == rhs.GrenadeBounceDamping &&
		lhs.GrenadeBounceMaxSpeed == rhs.GrenadeBounceMaxSpeed &&
		lhs.GrenadeCarveRadius == rhs.GrenadeCarveRadius &&
		lhs.GrenadeRecoil == rhs.GrenadeRecoil &&
		lhs.GrenadeStopExplodeTime == rhs.GrenadeStopExplodeTime &&
		lhs.GrenadeTerrainDeformRadius == rhs.GrenadeTerrainDeformRadius &&
		lhs.GroundRunSpeed == rhs.GroundRunSpeed &&
		lhs.GroundRunSpeedLowG == rhs.GroundRunSpeedLowG &&
		lhs.GroundWalkBrake == rhs.GroundWalkBrake &&
		lhs.GroundWalkBrakeWhileMoving == rhs.GroundWalkBrakeWhileMoving &&
		lhs.GroundWalkForceMultiplier == rhs.GroundWalkForceMultiplier &&
		lhs.GroundWalkRecoverySpeedDamper == rhs.GroundWalkRecoverySpeedDamper &&
		lhs.GroundWalkSpeed == rhs.GroundWalkSpeed &&
		lhs.GroundWalkSpeedLowG == rhs.GroundWalkSpeedLowG &&
		lhs.GroundWalkSpeedTeleportHmd == rhs.GroundWalkSpeedTeleportHmd &&
		lhs.GunBaseClipSize == rhs.GunBaseClipSize &&
		lhs.GunRecoil == rhs.GunRecoil &&
		lhs.GunRecoilMax == rhs.GunRecoilMax &&
		lhs.GunRecoilMin == rhs.GunRecoilMin &&
		lhs.GunRecoilSettleSpring == rhs.GunRecoilSettleSpring &&
		lhs.GunRecoilSpring == rhs.GunRecoilSpring &&
		lhs.GunRightOffset == rhs.GunRightOffset &&
		lhs.GunUpOffset == rhs.GunUpOffset &&
		lhs.HandHoldInteractAngleRate == rhs.HandHoldInteractAngleRate &&
		lhs.HandHoldInteractDistanceRate == rhs.HandHoldInteractDistanceRate &&
		lhs.HandInteractionFresnel == rhs.HandInteractionFresnel &&
		lhs.HandInteractionFresnelMax == rhs.HandInteractionFresnelMax &&
		lhs.HandInteractionLightIntensity == rhs.HandInteractionLightIntensity &&
		lhs.HandInteractionLightIntensityMax == rhs.HandInteractionLightIntensityMax &&
		lhs.HandInteractionLightOffset == rhs.HandInteractionLightOffset &&
		lhs.HandInteractionLightOffsetAt == rhs.HandInteractionLightOffsetAt &&
		lhs.HandInteractionLightTime == rhs.HandInteractionLightTime &&
		lhs.HandScreenActivationAngle == rhs.HandScreenActivationAngle &&
		lhs.HandScreenActivationAngleDown == rhs.HandScreenActivationAngleDown &&
		lhs.HandScreenActivationAngleOffset == rhs.HandScreenActivationAngleOffset &&
		lhs.HandScreenActivationRange == rhs.HandScreenActivationRange &&
		lhs.HandScreenAngleRange == rhs.HandScreenAngleRange &&
		lhs.HandScreenLookActiveAngle == rhs.HandScreenLookActiveAngle &&
		lhs.HandScreenMinAngle == rhs.HandScreenMinAngle &&
		lhs.HandScreenMinAngleWithPoint == rhs.HandScreenMinAngleWithPoint &&
		lhs.HandScreenPenetration == rhs.HandScreenPenetration &&
		lhs.HandScreenRestingTurnAngle == rhs.HandScreenRestingTurnAngle &&
		lhs.HandSmoothAngleRange == rhs.HandSmoothAngleRange &&
		lhs.HandSmoothMinAngle == rhs.HandSmoothMinAngle &&
		lhs.HandSwimDecayTime == rhs.HandSwimDecayTime &&
		lhs.HandSwimForce == rhs.HandSwimForce &&
		lhs.HandSwimMax == rhs.HandSwimMax &&
		lhs.HandSwimMaxForce == rhs.HandSwimMaxForce &&
		lhs.HandSwimMin == rhs.HandSwimMin &&
		lhs.HardLandMax == rhs.HardLandMax &&
		lhs.HardLandMin == rhs.HardLandMin &&
		lhs.HardLandPainTime == rhs.HardLandPainTime &&
		lhs.HardLandTime == rhs.HardLandTime &&
		lhs.HardModeHazardDamageRateMultiplier == rhs.HardModeHazardDamageRateMultiplier &&
		lhs.HardModeHazardDamageWoundRateMultiplier == rhs.HardModeHazardDamageWoundRateMultiplier &&
		lhs.HardModeHazardRechargeUnderground == rhs.HardModeHazardRechargeUnderground &&
		lhs.HardModeHazardTimeMultiplier == rhs.HardModeHazardTimeMultiplier &&
		lhs.HazardDamageMinTime == rhs.HazardDamageMinTime &&
		lhs.HeadBinocularsOffset == rhs.HeadBinocularsOffset &&
		lhs.HeadBinocularsRadius == rhs.HeadBinocularsRadius &&
		lhs.HealthPipRechargeRate == rhs.HealthPipRechargeRate &&
		lhs.HealthRechargeMinTimeSinceDamage == rhs.HealthRechargeMinTimeSinceDamage &&
		lhs.HeatShieldTime == rhs.HeatShieldTime &&
		lhs.HelmetBob == rhs.HelmetBob &&
		lhs.HelmetLag == rhs.HelmetLag &&
		lhs.HelmetMaxLag == rhs.HelmetMaxLag &&
		lhs.HighGuildRank == rhs.HighGuildRank &&
		lhs.HitReactBlendOutSpeedMax == rhs.HitReactBlendOutSpeedMax &&
		lhs.HitReactBlendOutSpeedMin == rhs.HitReactBlendOutSpeedMin &&
		lhs.HitReactNoiseAmount == rhs.HitReactNoiseAmount &&
		lhs.HmdResetButtonTime == rhs.HmdResetButtonTime &&
		lhs.HMDResetFlashTime == rhs.HMDResetFlashTime &&
		lhs.HmdTurnAngle == rhs.HmdTurnAngle &&
		lhs.HmdTurnAnglePad == rhs.HmdTurnAnglePad &&
		lhs.HmdTurnSpeed == rhs.HmdTurnSpeed &&
		lhs.HmdTurnSpeedPad == rhs.HmdTurnSpeedPad &&
		lhs.HmdTurnThreshold == rhs.HmdTurnThreshold &&
		lhs.HoldActionDistX == rhs.HoldActionDistX &&
		lhs.HoldActionDistY == rhs.HoldActionDistY &&
		lhs.HoldActionDistZ == rhs.HoldActionDistZ &&
		lhs.HoldDistX == rhs.HoldDistX &&
		lhs.HoldDistY == rhs.HoldDistY &&
		lhs.HoldDistZ == rhs.HoldDistZ &&
		lhs.HoldForce == rhs.HoldForce &&
		lhs.HoldMaxForce == rhs.HoldMaxForce &&
		lhs.HoldRotate == rhs.HoldRotate &&
		lhs.HoldTime == rhs.HoldTime &&
		lhs.HolsterGrabFrontOffset == rhs.HolsterGrabFrontOffset &&
		lhs.HolsterGrabRadius == rhs.HolsterGrabRadius &&
		lhs.HUDHeightPosX == rhs.HUDHeightPosX &&
		lhs.HUDHeightPosY == rhs.HUDHeightPosY &&
		lhs.InteractionAimOffset == rhs.InteractionAimOffset &&
		lhs.InteractionButtonRange == rhs.InteractionButtonRange &&
		lhs.InteractionButtonRangeVehicle == rhs.InteractionButtonRangeVehicle &&
		lhs.InteractionFocusIncrease == rhs.InteractionFocusIncrease &&
		lhs.InteractionFocusIncreaseCreature == rhs.InteractionFocusIncreaseCreature &&
		lhs.InteractionFocusIncreasePet == rhs.InteractionFocusIncreasePet &&
		lhs.InteractionFocusTime == rhs.InteractionFocusTime &&
		lhs.InteractionFocusTimeCreature == rhs.InteractionFocusTimeCreature &&
		lhs.InteractionFocusTimePet == rhs.InteractionFocusTimePet &&
		lhs.InteractionFocusTimeShootable == rhs.InteractionFocusTimeShootable &&
		lhs.InteractionLineCircleOffsetMax == rhs.InteractionLineCircleOffsetMax &&
		lhs.InteractionLineCircleOffsetMin == rhs.InteractionLineCircleOffsetMin &&
		lhs.InteractionLineCircleRadius == rhs.InteractionLineCircleRadius &&
		lhs.InteractionLineCircleSpeed == rhs.InteractionLineCircleSpeed &&
		lhs.InteractionLineCircleThickness == rhs.InteractionLineCircleThickness &&
		lhs.InteractionLineNumCirclesPerMetre == rhs.InteractionLineNumCirclesPerMetre &&
		lhs.InteractionLineSplineMinDistance == rhs.InteractionLineSplineMinDistance &&
		lhs.InteractionLineSplineOffset == rhs.InteractionLineSplineOffset &&
		lhs.InteractionLineSplineOffsetMin == rhs.InteractionLineSplineOffsetMin &&
		lhs.InteractionLineSplineOffsetRange == rhs.InteractionLineSplineOffsetRange &&
		lhs.InteractionScanRange == rhs.InteractionScanRange &&
		lhs.InteractionSubstanceRange == rhs.InteractionSubstanceRange &&
		lhs.InteractNearbyRadius == rhs.InteractNearbyRadius &&
		lhs.JetpackBrake == rhs.JetpackBrake &&
		lhs.JetpackDrainHorizontalFactor == rhs.JetpackDrainHorizontalFactor &&
		lhs.JetpackFillRate == rhs.JetpackFillRate &&
		lhs.JetpackFillRateFleetMultiplier == rhs.JetpackFillRateFleetMultiplier &&
		lhs.JetpackFillRateMidair == rhs.JetpackFillRateMidair &&
		lhs.JetpackFillRateNexusMultiplier == rhs.JetpackFillRateNexusMultiplier &&
		lhs.JetpackFillRateSpaceStationMultiplier == rhs.JetpackFillRateSpaceStationMultiplier &&
		lhs.JetpackForce == rhs.JetpackForce &&
		lhs.JetpackForceDeadPlanetExtra == rhs.JetpackForceDeadPlanetExtra &&
		lhs.JetpackHelmetBob == rhs.JetpackHelmetBob &&
		lhs.JetpackIgnitionForce == rhs.JetpackIgnitionForce &&
		lhs.JetpackIgnitionForceDeadPlanetExtra == rhs.JetpackIgnitionForceDeadPlanetExtra &&
		lhs.JetpackIgnitionTime == rhs.JetpackIgnitionTime &&
		lhs.JetpackJetAnimateInTime == rhs.JetpackJetAnimateInTime &&
		lhs.JetpackJetAnimateOutTime == rhs.JetpackJetAnimateOutTime &&
		lhs.JetpackMaxSpeed == rhs.JetpackMaxSpeed &&
		lhs.JetpackMaxUpSpeed == rhs.JetpackMaxUpSpeed &&
		lhs.JetpackMinIgnitionTime == rhs.JetpackMinIgnitionTime &&
		lhs.JetpackMinLevel == rhs.JetpackMinLevel &&
		lhs.JetpackUnderwaterDrainRate == rhs.JetpackUnderwaterDrainRate &&
		lhs.JetpackUnderwaterFillRate == rhs.JetpackUnderwaterFillRate &&
		lhs.JetpackUpForce == rhs.JetpackUpForce &&
		lhs.JetpackUpForceDeadPlanetExtra == rhs.JetpackUpForceDeadPlanetExtra &&
		lhs.JoystickOrientationTrimAltOc == rhs.JoystickOrientationTrimAltOc &&
		lhs.JoystickOrientationTrimAltOp == rhs.JoystickOrientationTrimAltOp &&
		lhs.LabelOffset == rhs.LabelOffset &&
		lhs.LabelSpringTime == rhs.LabelSpringTime &&
		lhs.LaserBeamAmmoUseTime == rhs.LaserBeamAmmoUseTime &&
		lhs.LaserBeamCore == rhs.LaserBeamCore &&
		lhs.LaserBeamFlickerAmp == rhs.LaserBeamFlickerAmp &&
		lhs.LaserBeamFlickerFreq == rhs.LaserBeamFlickerFreq &&
		lhs.LaserBeamMineRate == rhs.LaserBeamMineRate &&
		lhs.LaserBeamTerrainDeformRadius == rhs.LaserBeamTerrainDeformRadius &&
		lhs.LaserBeamTerrainDeformVariance == rhs.LaserBeamTerrainDeformVariance &&
		lhs.LaserEndOffset == rhs.LaserEndOffset &&
		lhs.LaserMiningDamageMultiplier == rhs.LaserMiningDamageMultiplier &&
		lhs.LaserPlayerOffset == rhs.LaserPlayerOffset &&
		lhs.LaserRecoil == rhs.LaserRecoil &&
		lhs.LaserShakeMax == rhs.LaserShakeMax &&
		lhs.LaserShakeMin == rhs.LaserShakeMin &&
		lhs.LaserShipRange == rhs.LaserShipRange &&
		lhs.LaserWeaponRange == rhs.LaserWeaponRange &&
		lhs.LeanAmount == rhs.LeanAmount &&
		lhs.LeanAmountFwd == rhs.LeanAmountFwd &&
		lhs.LeanBackMaxAngle == rhs.LeanBackMaxAngle &&
		lhs.LeanFwdMaxAngle == rhs.LeanFwdMaxAngle &&
		lhs.LeanLeftMaxAngle == rhs.LeanLeftMaxAngle &&
		lhs.LeanRightMaxAngle == rhs.LeanRightMaxAngle &&
		lhs.LookRayRadius == rhs.LookRayRadius &&
		lhs.LootForceMultiplier == rhs.LootForceMultiplier &&
		lhs.LowGuildRank == rhs.LowGuildRank &&
		lhs.LowHealthEffectPips == rhs.LowHealthEffectPips &&
		lhs.LowHealthEffectShield == rhs.LowHealthEffectShield &&
		lhs.MaxArmExtension == rhs.MaxArmExtension &&
		lhs.MaxBuildHeight == rhs.MaxBuildHeight &&
		lhs.MaxClingableSlopeAngle == rhs.MaxClingableSlopeAngle &&
		lhs.MaxFallSpeed == rhs.MaxFallSpeed &&
		lhs.MaxHealthPips == rhs.MaxHealthPips &&
		lhs.MaximumCrouchVR == rhs.MaximumCrouchVR &&
		lhs.MaximumHeadHeightIncreaseVR == rhs.MaximumHeadHeightIncreaseVR &&
		lhs.MaximumHorizontalOffsetVR == rhs.MaximumHorizontalOffsetVR &&
		lhs.MaxNumDestroyEffects == rhs.MaxNumDestroyEffects &&
		lhs.MaxNumShipsAttackingPlayer == rhs.MaxNumShipsAttackingPlayer &&
		lhs.MaxProjectileRadiusMultiplier == rhs.MaxProjectileRadiusMultiplier &&
		lhs.MaxResource == rhs.MaxResource &&
		lhs.MaxSlopeAngle == rhs.MaxSlopeAngle &&
		lhs.MaxSpidermanSlopeAngle == rhs.MaxSpidermanSlopeAngle &&
		lhs.MaxTimeAfterMeleeBeforeBoost == rhs.MaxTimeAfterMeleeBeforeBoost &&
		lhs.MaxTimeInMeleeBoost == rhs.MaxTimeInMeleeBoost &&
		lhs.MaxWalkableSlopeAngle == rhs.MaxWalkableSlopeAngle &&
		lhs.MaxWordCategoriesToSayPerNPC == rhs.MaxWordCategoriesToSayPerNPC &&
		lhs.MedGuildRank == rhs.MedGuildRank &&
		lhs.MeleeBoostAirForce == rhs.MeleeBoostAirForce &&
		lhs.MeleeCooldown == rhs.MeleeCooldown &&
		lhs.MeleeCooldownAlt == rhs.MeleeCooldownAlt &&
		lhs.MeleeDamageScale == rhs.MeleeDamageScale &&
		lhs.MeleeDistance == rhs.MeleeDistance &&
		lhs.MeleeDistance3P == rhs.MeleeDistance3P &&
		lhs.MeleeDistanceAlt == rhs.MeleeDistanceAlt &&
		lhs.MeleeForcePush == rhs.MeleeForcePush &&
		lhs.MeleeHitTime == rhs.MeleeHitTime &&
		lhs.MeleeOffset == rhs.MeleeOffset &&
		lhs.MeleePosDelta == rhs.MeleePosDelta &&
		lhs.MeleeRadius == rhs.MeleeRadius &&
		lhs.MeleeRadiusAlt == rhs.MeleeRadiusAlt &&
		lhs.MeleeRange == rhs.MeleeRange &&
		lhs.MeleeSpeedBoost == rhs.MeleeSpeedBoost &&
		lhs.MeleeSpeedBoostRangeMultiplier == rhs.MeleeSpeedBoostRangeMultiplier &&
		lhs.MeleeSpeedDamageBoost == rhs.MeleeSpeedDamageBoost &&
		lhs.MeleeStaminaDrain == rhs.MeleeStaminaDrain &&
		lhs.MeleeTime == rhs.MeleeTime &&
		lhs.MeleeToAirBoostInitialImpulse == rhs.MeleeToAirBoostInitialImpulse &&
		lhs.MinArmExtension == rhs.MinArmExtension &&
		lhs.MinBinocActiveTime == rhs.MinBinocActiveTime &&
		lhs.MinDistanceToCommunicatorTarget == rhs.MinDistanceToCommunicatorTarget &&
		lhs.MinEnergyPercentOnRespawn == rhs.MinEnergyPercentOnRespawn &&
		lhs.MinimumPushOffForceToSlide == rhs.MinimumPushOffForceToSlide &&
		lhs.MiniportalAppearEffectTime == rhs.MiniportalAppearEffectTime &&
		lhs.MiniportalDisappearEffectTime == rhs.MiniportalDisappearEffectTime &&
		lhs.MinNumDestroyEffects == rhs.MinNumDestroyEffects &&
		lhs.MinRespawnCharge == rhs.MinRespawnCharge &&
		lhs.MinSlideTime == rhs.MinSlideTime &&
		lhs.MinSpidermanSlopeAngle == rhs.MinSpidermanSlopeAngle &&
		lhs.MinTimeAfterMeleeBeforeBoost == rhs.MinTimeAfterMeleeBeforeBoost &&
		lhs.MinTimeToHoldSpidermanPose == rhs.MinTimeToHoldSpidermanPose &&
		lhs.MinUpAmount == rhs.MinUpAmount &&
		lhs.MouseAimZone == rhs.MouseAimZone &&
		lhs.MouseCrosshairAlphaFade == rhs.MouseCrosshairAlphaFade &&
		lhs.MouseCrosshairAlphaFadeSpeed == rhs.MouseCrosshairAlphaFadeSpeed &&
		lhs.MouseCrosshairLineAlpha == rhs.MouseCrosshairLineAlpha &&
		lhs.MouseCrosshairLineWidth == rhs.MouseCrosshairLineWidth &&
		lhs.MouseCrosshairMaxAlpha == rhs.MouseCrosshairMaxAlpha &&
		lhs.MouseCrosshairMultiplier == rhs.MouseCrosshairMultiplier &&
		lhs.MouseCrosshairShipStrength == rhs.MouseCrosshairShipStrength &&
		lhs.MouseCrosshairShipStrengthOld == rhs.MouseCrosshairShipStrengthOld &&
		lhs.MouseDeadZone == rhs.MouseDeadZone &&
		lhs.MouseDeadZoneOld == rhs.MouseDeadZoneOld &&
		lhs.MouseDeadZoneVehicle == rhs.MouseDeadZoneVehicle &&
		lhs.MouseFlightCorrectionBrakeMultiplier == rhs.MouseFlightCorrectionBrakeMultiplier &&
		lhs.MouseFlightCorrectionMultiplier == rhs.MouseFlightCorrectionMultiplier &&
		lhs.MouseMaxLength == rhs.MouseMaxLength &&
		lhs.MouseMaxLengthOld == rhs.MouseMaxLengthOld &&
		lhs.MouseMaxLengthVehicle == rhs.MouseMaxLengthVehicle &&
		lhs.MouseSmoothMode == rhs.MouseSmoothMode &&
		lhs.MoveStickHighRangeLimit == rhs.MoveStickHighRangeLimit &&
		lhs.MoveStickRunLimit == rhs.MoveStickRunLimit &&
		lhs.MultiplayerMinWanteEscalationTime == rhs.MultiplayerMinWanteEscalationTime &&
		lhs.MuzzleFlashMulThirdPerson == rhs.MuzzleFlashMulThirdPerson &&
		lhs.NormalModeHazardDamageRateMultiplier == rhs.NormalModeHazardDamageRateMultiplier &&
		lhs.NormalModeHazardDamageWoundRateMultiplier == rhs.NormalModeHazardDamageWoundRateMultiplier &&
		lhs.NormalModeHazardRechargeUnderground == rhs.NormalModeHazardRechargeUnderground &&
		lhs.NormalModeHazardTimeMultiplier == rhs.NormalModeHazardTimeMultiplier &&
		lhs.NoStickTeleportDirectionChangeDeadzoneAngle == rhs.NoStickTeleportDirectionChangeDeadzoneAngle &&
		lhs.NumberOfWarpsRequiredForFreightersToSpawn == rhs.NumberOfWarpsRequiredForFreightersToSpawn &&
		lhs.NumTechShopSlots == rhs.NumTechShopSlots &&
		lhs.ObjectScanTime == rhs.ObjectScanTime &&
		lhs.OtherPlayerTrackArrowRange == rhs.OtherPlayerTrackArrowRange &&
		lhs.PainColourSeperateAmount == rhs.PainColourSeperateAmount &&
		lhs.PainFlickerAmount == rhs.PainFlickerAmount &&
		lhs.PainTime == rhs.PainTime &&
		lhs.PassiveWeaponZoomFOV == rhs.PassiveWeaponZoomFOV &&
		lhs.PassiveWeaponZoomFOVThirdPerson == rhs.PassiveWeaponZoomFOVThirdPerson &&
		lhs.PickRange == rhs.PickRange &&
		lhs.PirateBattleMarkerRange == rhs.PirateBattleMarkerRange &&
		lhs.PirateBattleMarkerTime == rhs.PirateBattleMarkerTime &&
		lhs.PirateBattleMaxTime == rhs.PirateBattleMaxTime &&
		lhs.PirateBattleWarnTime == rhs.PirateBattleWarnTime &&
		lhs.PirateBountyInitTime == rhs.PirateBountyInitTime &&
		lhs.PirateBountyMaxDistance == rhs.PirateBountyMaxDistance &&
		lhs.PirateBountyTimeoutTime == rhs.PirateBountyTimeoutTime &&
		lhs.PirateFlybyAttackDistancePastPlayer == rhs.PirateFlybyAttackDistancePastPlayer &&
		lhs.PirateFlybyAttackMaxTime == rhs.PirateFlybyAttackMaxTime &&
		lhs.PirateFlybyAttackMinTime == rhs.PirateFlybyAttackMinTime &&
		lhs.PirateFlybyAttackProbability == rhs.PirateFlybyAttackProbability &&
		lhs.PirateHailPercent == rhs.PirateHailPercent &&
		lhs.PirateProbeAttackWaitTime == rhs.PirateProbeAttackWaitTime &&
		lhs.PirateProbeAttackWarnTime == rhs.PirateProbeAttackWarnTime &&
		lhs.PirateProbeHailPause == rhs.PirateProbeHailPause &&
		lhs.PirateProbeInitTime == rhs.PirateProbeInitTime &&
		lhs.PirateProbeScanTime == rhs.PirateProbeScanTime &&
		lhs.PirateProbeScanTotalTime == rhs.PirateProbeScanTotalTime &&
		lhs.PirateRaidMaxTime == rhs.PirateRaidMaxTime &&
		lhs.PirateRaidMinTime == rhs.PirateRaidMinTime &&
		lhs.PlayerSpaceTransferRange == rhs.PlayerSpaceTransferRange &&
		lhs.PlayerTransferRange == rhs.PlayerTransferRange &&
		lhs.PlayerViewTargetRange == rhs.PlayerViewTargetRange &&
		lhs.PointDownToMoveAngle == rhs.PointDownToMoveAngle &&
		lhs.PointDownToMoveBackAngle == rhs.PointDownToMoveBackAngle &&
		lhs.ProjectileDamageFalloff == rhs.ProjectileDamageFalloff &&
		lhs.ProjectileEndTime == rhs.ProjectileEndTime &&
		lhs.PulseEncounterMarkerAlwaysHideDistance == rhs.PulseEncounterMarkerAlwaysHideDistance &&
		lhs.PulseEncounterMarkerAlwaysShowDistance == rhs.PulseEncounterMarkerAlwaysShowDistance &&
		lhs.PulseEncounterMarkerShowAngle == rhs.PulseEncounterMarkerShowAngle &&
		lhs.PulseEncounterMinTimeInPulse == rhs.PulseEncounterMinTimeInPulse &&
		lhs.PulseEncounterProbeTime == rhs.PulseEncounterProbeTime &&
		lhs.PulseEncounterProbeTimeRare == rhs.PulseEncounterProbeTimeRare &&
		lhs.PulseRecoilSpring == rhs.PulseRecoilSpring &&
		lhs.PushForceAirFactor == rhs.PushForceAirFactor &&
		lhs.PushForceDecay == rhs.PushForceDecay &&
		lhs.QuadAutoAimOffset == rhs.QuadAutoAimOffset &&
		lhs.RailRecoilSpring == rhs.RailRecoilSpring &&
		lhs.ReloadButtonHoldTimeToHolster == rhs.ReloadButtonHoldTimeToHolster &&
		lhs.ReloadTapButtonSpeedIncrease == rhs.ReloadTapButtonSpeedIncrease &&
		lhs.ResourceBlobFinalScaleDistance == rhs.ResourceBlobFinalScaleDistance &&
		lhs.RespawnOnPadRadius == rhs.RespawnOnPadRadius &&
		lhs.RobotMultiplierWithFriends == rhs.RobotMultiplierWithFriends &&
		lhs.RocketBootsActivationWindow == rhs.RocketBootsActivationWindow &&
		lhs.RocketBootsBoostForce == rhs.RocketBootsBoostForce &&
		lhs.RocketBootsBoostOffTime == rhs.RocketBootsBoostOffTime &&
		lhs.RocketBootsBoostOnTime == rhs.RocketBootsBoostOnTime &&
		lhs.RocketBootsBoostTankDrainSpeed == rhs.RocketBootsBoostTankDrainSpeed &&
		lhs.RocketBootsDoubleTapTime == rhs.RocketBootsDoubleTapTime &&
		lhs.RocketBootsDriftBraking == rhs.RocketBootsDriftBraking &&
		lhs.RocketBootsDriftDownwardForce == rhs.RocketBootsDriftDownwardForce &&
		lhs.RocketBootsDriftEndTime == rhs.RocketBootsDriftEndTime &&
		lhs.RocketBootsDriftForce == rhs.RocketBootsDriftForce &&
		lhs.RocketBootsDriftTankDrainSpeed == rhs.RocketBootsDriftTankDrainSpeed &&
		lhs.RocketBootsForceDuration == rhs.RocketBootsForceDuration &&
		lhs.RocketBootsForceStartTime == rhs.RocketBootsForceStartTime &&
		lhs.RocketBootsHeightAdjustDownStrength == rhs.RocketBootsHeightAdjustDownStrength &&
		lhs.RocketBootsHeightAdjustTime == rhs.RocketBootsHeightAdjustTime &&
		lhs.RocketBootsHeightAdjustUpStrength == rhs.RocketBootsHeightAdjustUpStrength &&
		lhs.RocketBootsImpulse == rhs.RocketBootsImpulse &&
		lhs.RocketBootsJetpackMinLevel == rhs.RocketBootsJetpackMinLevel &&
		lhs.RocketBootsMaxDesiredHeight == rhs.RocketBootsMaxDesiredHeight &&
		lhs.RocketBootsMaxSpeed == rhs.RocketBootsMaxSpeed &&
		lhs.RocketBootsMinDesiredHeight == rhs.RocketBootsMinDesiredHeight &&
		lhs.RocketBootsWindUpBraking == rhs.RocketBootsWindUpBraking &&
		lhs.RocketBootsZigZagForceDuration == rhs.RocketBootsZigZagForceDuration &&
		lhs.RocketBootsZigZagStrength == rhs.RocketBootsZigZagStrength &&
		lhs.ScanBeamMainWidth == rhs.ScanBeamMainWidth &&
		lhs.ScanBeamWidth == rhs.ScanBeamWidth &&
		lhs.ScanFadeInTime == rhs.ScanFadeInTime &&
		lhs.ScanFadeOutTime == rhs.ScanFadeOutTime &&
		lhs.ScanLabelTime == rhs.ScanLabelTime &&
		lhs.ScanRotate == rhs.ScanRotate &&
		lhs.ScanRotateBeamWdith == rhs.ScanRotateBeamWdith &&
		lhs.ScanRotateDist == rhs.ScanRotateDist &&
		lhs.ScanRotateWobbleAmp == rhs.ScanRotateWobbleAmp &&
		lhs.ScanWobbleAmp == rhs.ScanWobbleAmp &&
		lhs.ScanWobbleAmp2 == rhs.ScanWobbleAmp2 &&
		lhs.ScanWobbleFreq == rhs.ScanWobbleFreq &&
		lhs.ScanWobbleFreq2 == rhs.ScanWobbleFreq2 &&
		lhs.ShieldMaximum == rhs.ShieldMaximum &&
		lhs.ShieldRechargeMinTimeSinceDamage == rhs.ShieldRechargeMinTimeSinceDamage &&
		lhs.ShieldRechargeRate == rhs.ShieldRechargeRate &&
		lhs.ShieldRestoreDelay == rhs.ShieldRestoreDelay &&
		lhs.ShieldRestoreSpeed == rhs.ShieldRestoreSpeed &&
		lhs.ShipCameraLag == rhs.ShipCameraLag &&
		lhs.ShipCoolFactor == rhs.ShipCoolFactor &&
		lhs.ShipPriceExp2 == rhs.ShipPriceExp2 &&
		lhs.ShipSummonLastSafeMargin == rhs.ShipSummonLastSafeMargin &&
		lhs.ShootOffset == rhs.ShootOffset &&
		lhs.ShootPrepTime == rhs.ShootPrepTime &&
		lhs.ShootSizeBase == rhs.ShootSizeBase &&
		lhs.ShootSizeMaxXY == rhs.ShootSizeMaxXY &&
		lhs.ShootSizeMaxZ == rhs.ShootSizeMaxZ &&
		lhs.ShootSizeMinXY == rhs.ShootSizeMinXY &&
		lhs.ShootSizeMinZ == rhs.ShootSizeMinZ &&
		lhs.ShootSizeTime == rhs.ShootSizeTime &&
		lhs.ShotgunDispersion == rhs.ShotgunDispersion &&
		lhs.SleepFadeTime == rhs.SleepFadeTime &&
		lhs.SlopeSlideBrake == rhs.SlopeSlideBrake &&
		lhs.SlopeSlidingSpeed == rhs.SlopeSlidingSpeed &&
		lhs.SolarRegenFactor == rhs.SolarRegenFactor &&
		lhs.SpaceJetpackDrainRate == rhs.SpaceJetpackDrainRate &&
		lhs.SpaceJetpackForce == rhs.SpaceJetpackForce &&
		lhs.SpaceJetpackIgnitionForce == rhs.SpaceJetpackIgnitionForce &&
		lhs.SpaceJetpackMaxSpeed == rhs.SpaceJetpackMaxSpeed &&
		lhs.SpaceJetpackUpForce == rhs.SpaceJetpackUpForce &&
		lhs.SpaceMaxGravityDist == rhs.SpaceMaxGravityDist &&
		lhs.SpaceMinGravityDist == rhs.SpaceMinGravityDist &&
		lhs.SpawningDistanceBetweenPlayersAfterWarp == rhs.SpawningDistanceBetweenPlayersAfterWarp &&
		lhs.SpawningSpaceBattleLookOffset == rhs.SpawningSpaceBattleLookOffset &&
		lhs.SpawningSpaceBattleLookOffsetUp == rhs.SpawningSpaceBattleLookOffsetUp &&
		lhs.SpeedLinesLength == rhs.SpeedLinesLength &&
		lhs.SpeedLinesMaxAlpha == rhs.SpeedLinesMaxAlpha &&
		lhs.SpeedLinesMinAlpha == rhs.SpeedLinesMinAlpha &&
		lhs.SpeedLinesOffset == rhs.SpeedLinesOffset &&
		lhs.SpeedLinesRadiusIncrement == rhs.SpeedLinesRadiusIncrement &&
		lhs.SpeedLinesRadiusStartMax == rhs.SpeedLinesRadiusStartMax &&
		lhs.SpeedLinesRadiusStartMin == rhs.SpeedLinesRadiusStartMin &&
		lhs.SpeedLinesSpeedMax == rhs.SpeedLinesSpeedMax &&
		lhs.SpeedLinesSpeedMin == rhs.SpeedLinesSpeedMin &&
		lhs.SpeedLinesStartFade == rhs.SpeedLinesStartFade &&
		lhs.SpeedLinesTotalLength == rhs.SpeedLinesTotalLength &&
		lhs.SpeedLinesWidthMax == rhs.SpeedLinesWidthMax &&
		lhs.SpeedLinesWidthMin == rhs.SpeedLinesWidthMin &&
		lhs.StaminaRate == rhs.StaminaRate &&
		lhs.StaminaRecoveredFactor == rhs.StaminaRecoveredFactor &&
		lhs.StaminaRecoveryRate == rhs.StaminaRecoveryRate &&
		lhs.StarFieldDensity == rhs.StarFieldDensity &&
		lhs.StarFieldRadius == rhs.StarFieldRadius &&
		lhs.StarFieldStarSize == rhs.StarFieldStarSize &&
		lhs.StartHazardTimeMultiplier == rhs.StartHazardTimeMultiplier &&
		lhs.StartSpookTimeMultiplier == rhs.StartSpookTimeMultiplier &&
		lhs.StealthBaseCharge == rhs.StealthBaseCharge &&
		lhs.StealthDrainRate == rhs.StealthDrainRate &&
		lhs.StealthMinLevel == rhs.StealthMinLevel &&
		lhs.StealthRechargeRate == rhs.StealthRechargeRate &&
		lhs.StickDeadZoneMax == rhs.StickDeadZoneMax &&
		lhs.StickDeadZoneMin == rhs.StickDeadZoneMin &&
		lhs.StickYDampingThreshold == rhs.StickYDampingThreshold &&
		lhs.SuitInventoryStartSeed == rhs.SuitInventoryStartSeed &&
		lhs.SummonArcRange == rhs.SummonArcRange &&
		lhs.SummonShipDirectionChangeDeadZoneAngle == rhs.SummonShipDirectionChangeDeadZoneAngle &&
		lhs.SurfaceSwimForce == rhs.SurfaceSwimForce &&
		lhs.SurfaceSwimMaxSpeed == rhs.SurfaceSwimMaxSpeed &&
		lhs.TakeDamageImpulse == rhs.TakeDamageImpulse &&
		lhs.TargetDistance == rhs.TargetDistance &&
		lhs.TargetRadius == rhs.TargetRadius &&
		lhs.TeleportAppearEffectSpeed == rhs.TeleportAppearEffectSpeed &&
		lhs.TeleportArcLengthMultiplier == rhs.TeleportArcLengthMultiplier &&
		lhs.TeleportArcRadius == rhs.TeleportArcRadius &&
		lhs.TeleportArcRadiusInner == rhs.TeleportArcRadiusInner &&
		lhs.TeleportBallCompletionFactorFadeout == rhs.TeleportBallCompletionFactorFadeout &&
		lhs.TeleportBallDistanceFadeAlpha == rhs.TeleportBallDistanceFadeAlpha &&
		lhs.TeleportBallFadeMinDistance == rhs.TeleportBallFadeMinDistance &&
		lhs.TeleportBallFadeRange == rhs.TeleportBallFadeRange &&
		lhs.TeleportBallRadius == rhs.TeleportBallRadius &&
		lhs.TeleportBeamAnimHeight == rhs.TeleportBeamAnimHeight &&
		lhs.TeleportBeamAnimSpeed == rhs.TeleportBeamAnimSpeed &&
		lhs.TeleportBeamGravity == rhs.TeleportBeamGravity &&
		lhs.TeleportBeamGravityMax == rhs.TeleportBeamGravityMax &&
		lhs.TeleportChargeFadeInTime == rhs.TeleportChargeFadeInTime &&
		lhs.TeleportChargeMaxDistance == rhs.TeleportChargeMaxDistance &&
		lhs.TeleportChargeMinDistance == rhs.TeleportChargeMinDistance &&
		lhs.TeleportChargeMinTime == rhs.TeleportChargeMinTime &&
		lhs.TeleportChargeMoveSpeed == rhs.TeleportChargeMoveSpeed &&
		lhs.TeleportDirectionAltHandRange == rhs.TeleportDirectionAltHandRange &&
		lhs.TeleportDisappearEffectSpeed == rhs.TeleportDisappearEffectSpeed &&
		lhs.TeleportHmdMaxFade == rhs.TeleportHmdMaxFade &&
		lhs.TeleportHmdMinFade == rhs.TeleportHmdMinFade &&
		lhs.TeleportHmdOutFactor == rhs.TeleportHmdOutFactor &&
		lhs.TeleportInitiateThreshold == rhs.TeleportInitiateThreshold &&
		lhs.TeleportInstantTravelDistance == rhs.TeleportInstantTravelDistance &&
		lhs.TeleportLastKnownThreshold == rhs.TeleportLastKnownThreshold &&
		lhs.TeleportLineBezierDistanceFactor == rhs.TeleportLineBezierDistanceFactor &&
		lhs.TeleportLineBezierOffset == rhs.TeleportLineBezierOffset &&
		lhs.TeleportLineEndFadeEnd == rhs.TeleportLineEndFadeEnd &&
		lhs.TeleportLineEndFadeStart == rhs.TeleportLineEndFadeStart &&
		lhs.TeleportLineFadeRange == rhs.TeleportLineFadeRange &&
		lhs.TeleportLineFadeStart == rhs.TeleportLineFadeStart &&
		lhs.TeleportMaxTravelDistance == rhs.TeleportMaxTravelDistance &&
		lhs.TeleportMaxTravelDistanceVertical == rhs.TeleportMaxTravelDistanceVertical &&
		lhs.TeleportMotionOffsetAmount == rhs.TeleportMotionOffsetAmount &&
		lhs.TeleportMotionOffsetUp == rhs.TeleportMotionOffsetUp &&
		lhs.TeleportStrafeDistance == rhs.TeleportStrafeDistance &&
		lhs.TeleportTotalTime == rhs.TeleportTotalTime &&
		lhs.TeleportTravelSurfaceAngle == rhs.TeleportTravelSurfaceAngle &&
		lhs.TemperatureDisplaySampleTime == rhs.TemperatureDisplaySampleTime &&
		lhs.TerrainLaserRange == rhs.TerrainLaserRange &&
		lhs.ThirdPersonRecoilMultiplier == rhs.ThirdPersonRecoilMultiplier &&
		lhs.ThirdPersonWeaponAttachRotationCorrectionAngle == rhs.ThirdPersonWeaponAttachRotationCorrectionAngle &&
		lhs.ThirdPersonWeaponXOffset == rhs.ThirdPersonWeaponXOffset &&
		lhs.TimeHoldDownAccelerateToLaunchFromOutpost == rhs.TimeHoldDownAccelerateToLaunchFromOutpost &&
		lhs.TrackArrowStaticTargetOffsetMultiplier == rhs.TrackArrowStaticTargetOffsetMultiplier &&
		lhs.TraderApproachDistance == rhs.TraderApproachDistance &&
		lhs.TraderApproachTime == rhs.TraderApproachTime &&
		lhs.TraderCommunicationBanMaxTime == rhs.TraderCommunicationBanMaxTime &&
		lhs.TraderCommunicationBanMinTime == rhs.TraderCommunicationBanMinTime &&
		lhs.TraderHailDistance == rhs.TraderHailDistance &&
		lhs.TraderHailTime == rhs.TraderHailTime &&
		lhs.TraderHealthFightThreshold == rhs.TraderHealthFightThreshold &&
		lhs.TraderSpamTimeWait == rhs.TraderSpamTimeWait &&
		lhs.TraderStayCloseLockOffset == rhs.TraderStayCloseLockOffset &&
		lhs.TraderStayCloseLockSin1Coeff == rhs.TraderStayCloseLockSin1Coeff &&
		lhs.TraderStayCloseLockSin1Offset == rhs.TraderStayCloseLockSin1Offset &&
		lhs.TraderStayCloseLockSin2Coeff == rhs.TraderStayCloseLockSin2Coeff &&
		lhs.TraderStayCloseLockSin2Offset == rhs.TraderStayCloseLockSin2Offset &&
		lhs.TraderStayCloseLockSinsAdd == rhs.TraderStayCloseLockSinsAdd &&
		lhs.TraderStayCloseLockSpread == rhs.TraderStayCloseLockSpread &&
		lhs.TraderStayCloseLockSpreadAdd == rhs.TraderStayCloseLockSpreadAdd &&
		lhs.TraderStayCloseLockSpreadTime == rhs.TraderStayCloseLockSpreadTime &&
		lhs.UnderwaterBrake == rhs.UnderwaterBrake &&
		lhs.UnderwaterCurrentStrengthHorizontalMax == rhs.UnderwaterCurrentStrengthHorizontalMax &&
		lhs.UnderwaterCurrentStrengthHorizontalMin == rhs.UnderwaterCurrentStrengthHorizontalMin &&
		lhs.UnderwaterCurrentStrengthVertical == rhs.UnderwaterCurrentStrengthVertical &&
		lhs.UnderwaterFloatRange == rhs.UnderwaterFloatRange &&
		lhs.UnderwaterFluidDensity == rhs.UnderwaterFluidDensity &&
		lhs.UnderwaterForce == rhs.UnderwaterForce &&
		lhs.UnderwaterImpact == rhs.UnderwaterImpact &&
		lhs.UnderwaterJetpackEscapeForce == rhs.UnderwaterJetpackEscapeForce &&
		lhs.UnderwaterJetpackForce == rhs.UnderwaterJetpackForce &&
		lhs.UnderwaterMargin == rhs.UnderwaterMargin &&
		lhs.UnderwaterMaxJetpackEscapeSpeed == rhs.UnderwaterMaxJetpackEscapeSpeed &&
		lhs.UnderwaterMaxJetpackSpeed == rhs.UnderwaterMaxJetpackSpeed &&
		lhs.UnderwaterMaxSpeedTotal == rhs.UnderwaterMaxSpeedTotal &&
		lhs.UnderwaterMaxSpeedTotalJetpacking == rhs.UnderwaterMaxSpeedTotalJetpacking &&
		lhs.UnderwaterMinDepth == rhs.UnderwaterMinDepth &&
		lhs.UnderwaterPlayerMass == rhs.UnderwaterPlayerMass &&
		lhs.UnderwaterPlayerSphereDepthOffsetFirstPerson == rhs.UnderwaterPlayerSphereDepthOffsetFirstPerson &&
		lhs.UnderwaterPlayerSphereDepthOffsetMax == rhs.UnderwaterPlayerSphereDepthOffsetMax &&
		lhs.UnderwaterPlayerSphereDepthOffsetMin == rhs.UnderwaterPlayerSphereDepthOffsetMin &&
		lhs.UnderwaterPlayerSphereDepthOffsetPitchedExtra == rhs.UnderwaterPlayerSphereDepthOffsetPitchedExtra &&
		lhs.UnderwaterPlayerSphereOffsetMaxPitch == rhs.UnderwaterPlayerSphereOffsetMaxPitch &&
		lhs.UnderwaterPlayerSphereOffsetMinPitch == rhs.UnderwaterPlayerSphereOffsetMinPitch &&
		lhs.UnderwaterPlayerSphereRadius == rhs.UnderwaterPlayerSphereRadius &&
		lhs.UnderwaterSurfaceForceFlattenAngleMin == rhs.UnderwaterSurfaceForceFlattenAngleMin &&
		lhs.UnderwaterSurfaceForceFlattenAngleRange == rhs.UnderwaterSurfaceForceFlattenAngleRange &&
		lhs.UnderwaterSwimMaxSpeed == rhs.UnderwaterSwimMaxSpeed &&
		lhs.UtilityWeaponRange == rhs.UtilityWeaponRange &&
		lhs.VehicleHazardDampingModifier == rhs.VehicleHazardDampingModifier &&
		lhs.VehicleLaserRange == rhs.VehicleLaserRange &&
		lhs.VehicleRaceResultsHintTime == rhs.VehicleRaceResultsHintTime &&
		lhs.VRModeHazardTimeMultiplier == rhs.VRModeHazardTimeMultiplier &&
		lhs.VRStartHazardTimeMultiplier == rhs.VRStartHazardTimeMultiplier &&
		lhs.WalkerAlertRange == rhs.WalkerAlertRange &&
		lhs.WalkerSightAngle == rhs.WalkerSightAngle &&
		lhs.WalkerSightRange == rhs.WalkerSightRange &&
		lhs.WantedDroneEventRadius == rhs.WantedDroneEventRadius &&
		lhs.WantedEnemyAttackAmount == rhs.WantedEnemyAttackAmount &&
		lhs.WantedLevelDelay == rhs.WantedLevelDelay &&
		lhs.WantedLevelPlayerRange == rhs.WantedLevelPlayerRange &&
		lhs.WantedLevelPlayerRangeSpace == rhs.WantedLevelPlayerRangeSpace &&
		lhs.WantedMinorCrimeAmount == rhs.WantedMinorCrimeAmount &&
		lhs.WantedMinPlanetTime == rhs.WantedMinPlanetTime &&
		lhs.WantedMinSpaceTime == rhs.WantedMinSpaceTime &&
		lhs.WantedTimeoutAggressive == rhs.WantedTimeoutAggressive &&
		lhs.WantedWitnessFuzzyTime == rhs.WantedWitnessFuzzyTime &&
		lhs.WantedWitnessTimer == rhs.WantedWitnessTimer &&
		lhs.WeaponBobBlendTime == rhs.WeaponBobBlendTime &&
		lhs.WeaponBobFactorRun == rhs.WeaponBobFactorRun &&
		lhs.WeaponBobFactorWalk == rhs.WeaponBobFactorWalk &&
		lhs.WeaponBobFactorWalkDeadZone == rhs.WeaponBobFactorWalkDeadZone &&
		lhs.WeaponCannonMinUnchargedShotThreshold == rhs.WeaponCannonMinUnchargedShotThreshold &&
		lhs.WeaponCannonMinUnchargedShotTime == rhs.WeaponCannonMinUnchargedShotTime &&
		lhs.WeaponCannonMinWeaponTimer == rhs.WeaponCannonMinWeaponTimer &&
		lhs.WeaponChangeModeTime == rhs.WeaponChangeModeTime &&
		lhs.WeaponCoolFactor == rhs.WeaponCoolFactor &&
		lhs.WeaponGrenadeTime == rhs.WeaponGrenadeTime &&
		lhs.WeaponGunTime == rhs.WeaponGunTime &&
		lhs.WeaponHolsterDelay == rhs.WeaponHolsterDelay &&
		lhs.WeaponLag == rhs.WeaponLag &&
		lhs.WeaponLowerDelay == rhs.WeaponLowerDelay &&
		lhs.WeaponPriceExp2 == rhs.WeaponPriceExp2 &&
		lhs.WeaponRailFireTime == rhs.WeaponRailFireTime &&
		lhs.WeaponRailRechargeTime == rhs.WeaponRailRechargeTime &&
		lhs.WeaponShotgunSlowdown == rhs.WeaponShotgunSlowdown &&
		lhs.WeaponZoomFOV == rhs.WeaponZoomFOV &&
		lhs.WeaponZoomHorzRotation == rhs.WeaponZoomHorzRotation &&
		lhs.WeaponZoomRecoilMultiplier == rhs.WeaponZoomRecoilMultiplier &&
		lhs.WeaponZoomVertRotation == rhs.WeaponZoomVertRotation &&
		lhs.WitnessAIDamageAngle == rhs.WitnessAIDamageAngle &&
		lhs.WitnessAIDamageDistance == rhs.WitnessAIDamageDistance &&
		lhs.WitnessSenseEnhancement == rhs.WitnessSenseEnhancement &&
		lhs.WitnessSenseEnhancementTime == rhs.WitnessSenseEnhancementTime &&
		lhs.WordCategoriesRequiredToConverse == rhs.WordCategoriesRequiredToConverse &&
		lhs.WoundDamageDecayTime == rhs.WoundDamageDecayTime &&
		lhs.WoundDamageLimit == rhs.WoundDamageLimit &&
		lhs.WoundDamageLimitShip == rhs.WoundDamageLimitShip &&
		lhs.WoundTimeMinimum == rhs.WoundTimeMinimum &&
		lhs.AimDisperseCurve == rhs.AimDisperseCurve &&
		lhs.AutoAim == rhs.AutoAim &&
		lhs.AutoAimCentreOffsetCurve == rhs.AutoAimCentreOffsetCurve &&
		lhs.AutoAimDotCurve == rhs.AutoAimDotCurve &&
		lhs.BoltcasterHasTracer == rhs.BoltcasterHasTracer &&
		lhs.ClampPitch == rhs.ClampPitch &&
		lhs.CreatureRideFade == rhs.CreatureRideFade &&
		lhs.DoPlayerAppearInVehicleEffect == rhs.DoPlayerAppearInVehicleEffect &&
		lhs.EnableHeadMovements == rhs.EnableHeadMovements &&
		lhs.EnableLeaning == rhs.EnableLeaning &&
		lhs.EnablePointDownToSmoothMove == rhs.EnablePointDownToSmoothMove &&
		lhs.FireButtonReloadsWeapon == rhs.FireButtonReloadsWeapon &&
		lhs.ForceFreighterProcTechRandom == rhs.ForceFreighterProcTechRandom &&
		lhs.FrontShieldEnabled == rhs.FrontShieldEnabled &&
		lhs.HandSwimEnabled == rhs.HandSwimEnabled &&
		lhs.HideHazardPanel == rhs.HideHazardPanel &&
		lhs.HmdSmoothTurnAlways == rhs.HmdSmoothTurnAlways &&
		lhs.InteractNearbyRadiusEnabled == rhs.InteractNearbyRadiusEnabled &&
		lhs.InventoryDamage == rhs.InventoryDamage &&
		lhs.LuckyWithTech == rhs.LuckyWithTech &&
		lhs.MouseCrosshairVisible == rhs.MouseCrosshairVisible &&
		lhs.MouseFlightCurve == rhs.MouseFlightCurve &&
		lhs.MultiplayerShareWanted == rhs.MultiplayerShareWanted &&
		lhs.NeverPreyedOn == rhs.NeverPreyedOn &&
		lhs.PassiveLook == rhs.PassiveLook &&
		lhs.PermanantAltFire == rhs.PermanantAltFire &&
		lhs.PermanantFire == rhs.PermanantFire &&
		lhs.RecenterViewWhenEnteringShip == rhs.RecenterViewWhenEnteringShip &&
		lhs.ReportAllProjectileDamage == rhs.ReportAllProjectileDamage &&
		lhs.RequireHandsOnShipControls == rhs.RequireHandsOnShipControls &&
		lhs.RocketBootsEnabled == rhs.RocketBootsEnabled &&
		lhs.RocketBootsUseCustomCamera == rhs.RocketBootsUseCustomCamera &&
		lhs.ShowFirstPersonCharacterShadowPCVR == rhs.ShowFirstPersonCharacterShadowPCVR &&
		lhs.ShowFirstPersonCharacterShadowPSVR == rhs.ShowFirstPersonCharacterShadowPSVR &&
		lhs.ShowLowAmmoWarning == rhs.ShowLowAmmoWarning &&
		lhs.StickCurve == rhs.StickCurve &&
		lhs.TeleportRecentre == rhs.TeleportRecentre &&
		lhs.UnderwaterBuoyancyDepthCurve == rhs.UnderwaterBuoyancyDepthCurve &&
		lhs.UpgradeExosuitWithProduct == rhs.UpgradeExosuitWithProduct &&
		lhs.UseEnergy == rhs.UseEnergy &&
		lhs.UseHazardProtection == rhs.UseHazardProtection &&
		lhs.UseLargeHealthBar == rhs.UseLargeHealthBar &&
		lhs.WeaponBobBlendCurve == rhs.WeaponBobBlendCurve &&
		lhs.WeaponZoomEnabled == rhs.WeaponZoomEnabled;
	}
};

struct GcRichPresenceGlobals
{
	float EvaluationPeriod;
	int32_t GameModePriority;
	float IdleThreshold;
	int32_t PlanetLocationPriority;
	float PublishPeriod;
	int32_t SpaceCombatPriority;
	int32_t SpaceLocationPriority;
	int32_t StormLocationPriority;
	bool ShowOnScreen;

	friend bool operator==(const GcRichPresenceGlobals& lhs, const GcRichPresenceGlobals& rhs) 
	{
		return lhs.EvaluationPeriod == rhs.EvaluationPeriod &&
		lhs.GameModePriority == rhs.GameModePriority &&
		lhs.IdleThreshold == rhs.IdleThreshold &&
		lhs.PlanetLocationPriority == rhs.PlanetLocationPriority &&
		lhs.PublishPeriod == rhs.PublishPeriod &&
		lhs.SpaceCombatPriority == rhs.SpaceCombatPriority &&
		lhs.SpaceLocationPriority == rhs.SpaceLocationPriority &&
		lhs.StormLocationPriority == rhs.StormLocationPriority &&
		lhs.ShowOnScreen == rhs.ShowOnScreen;
	}
};

//Dependency: GcDroneWeaponData
//Dependency: GcCamouflageData
//Dependency: GcScanEffectData
//Dependency: GcRobotLaserData
//Dependency: GcSentinelDamagedData
//Dependency: GcSentinelQuadWeaponData
//Dependency: GcSentinelResource
//Dependency: GcSentinelPounceBalance
//Dependency: GcDroneDataWithId
//Dependency: GcSentinelMechWeaponData
//Dependency: GcMechTargetSelectionWeightingSettings
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: Vector2f
struct GcRobotGlobals
{
	NMS_GameComponents::GcScanEffectData DroneScanEffect;
	NMS_GameComponents::GcRobotLaserData QuadLaser;
	NMS_GameComponents::GcRobotLaserData WalkerLaser;
	NMS::Vector3f DroneCriticalOffset;
	NMS::Vector3f DroneRepairOffset;
	NMS::Vector3f QuadCriticalOffset;
	NMS::Vector3f WalkerGunOffset1;
	NMS::Vector3f WalkerGunOffset2;
	NMS::Vector3f WalkerHeadEyeOffset;
	NMS_GameComponents::GcSentinelDamagedData DamageData[13];
	NMS_GameComponents::GcSentinelQuadWeaponData QuadWeapons[4];
	NMS_GameComponents::GcSentinelResource SentinelResources[13];
	NMS_GameComponents::GcCamouflageData RobotCamoData;
	NMS::NMSString0x10 AttackScan;
	std::vector<NMS_GameComponents::GcDroneDataWithId> DroneControlData;
	std::vector<NMS_GameComponents::GcDroneWeaponData> DroneWeapons;
	NMS::NMSString0x10 ForceDroneWeapon;
	NMS::NMSString0x10 RepairEffect;
	std::vector<NMS::NMSString0x10> SentinelMechAvailableWeapons;
	std::vector<NMS_GameComponents::GcSentinelMechWeaponData> SentinelMechWeaponData;
	std::vector<NMS::NMSString0x10> StoneMechAvailableWeapons;
	NMS::NMSString0x10 SummonerDroneBuildupEffect;
	NMS::NMSString0x10 SummonerDroneSpawnEffect;
	std::vector<NMS::NMSString0x20> WalkerLeftLegArmourNodes;
	std::vector<NMS::NMSString0x20> WalkerRightLegArmourNodes;
	NMS::NMSString0x10 WalkerTitanFallEffect;
	NMS::NMSString0x10 WalkerTitanFallShake;
	NMS_GameComponents::GcSentinelPounceBalance PounceData[13];
	float FireRateModifierScores[13];
	int32_t SentinelSpawnLimits[13];
	NMS_GameComponents::GcMechTargetSelectionWeightingSettings MechTargetSelectionWeightingSettings;
	NMS::Vector2f MechPatrolPauseTime;
	NMS::Vector2f QuadAttackTurnSpeeds;
	NMS::Vector2f QuadLookTurnSpeeds;
	NMS::Vector2f QuadPatrolPauseTime;
	float AttackMoveArrivalDistance;
	float AttackMoveMaxTime;
	int32_t AttackSentinelWantedValue;
	float CollisionDistance;
	float CombatSpawnSquadRadiusDrones;
	float CombatSpawnSquadRadiusRobots;
	float CombatWaveSpawnTime;
	float CorruptedDroneRepairInteruptCooldownTime;
	float CriticalHitSizeDrone;
	float CriticalHitSizeMech;
	float CriticalHitSizeQuad;
	float CriticalHitSizeWalker;
	float DroneAggressiveInvestigateAttackTime;
	int32_t DroneAggroDamage;
	float DroneAttackGetInRangeBoost;
	float DroneAttackMaxAngleDownFromPlayer;
	float DroneAttackPlayerHeightOffset;
	float DroneCombatSpawnAngle;
	float DroneCrimeCooldown;
	float DroneCrimeCooldownWaitTime;
	float DroneCrimeCooldownWaitTimeAtMax;
	float DroneCrimePostInvestigateWaitTime;
	float DroneCrimeWitnessInvestigateDistance;
	float DroneCriminalScanTime;
	float DroneDecisionTime;
	float DroneHeightAngle;
	float DroneHitImpulseCooldown;
	float DroneHitImpulseFlipForceDownBound;
	float DroneHitImpulseLaserMultiplier;
	float DroneHitImpulseMinVerticalComponentScale;
	float DroneHitImpulseMultiplier;
	float DroneInvestigateMaxPositionAngle;
	float DroneInvestigateMinChaseRange;
	float DroneInvestigateMinCrimeInterval;
	float DroneInvestigateMinPositionAngle;
	float DroneInvestigateMinScanTime;
	float DroneInvestigateMinWitnessRange;
	float DroneInvestigateMinWitnessRangeCantSee;
	float DroneInvestigateMinWitnessTime;
	float DroneInvestigateRepositionTime;
	float DroneInvestigateSpeedBoost;
	float DroneInvestigateSpeedBoostRange;
	float DroneInvestigateSpeedBoostStartDistance;
	float DroneMaxScanAngle;
	float DroneMaxScanLength;
	float DroneMoveDistancePlayerMechMultiplier;
	float DronePatrolAttackSightTime;
	float DronePatrolInvestigateSpeedBoost;
	float DronePatrolSearchTime;
	float DronePerceptionMinHearingSpeed;
	float DronePerceptionRange;
	float DronePerceptionRangeHostile;
	float DronePerceptionSightAngle;
	float DronePerceptionSightRange;
	float DronePerceptionSightRangeHostile;
	float DronePushLaserForce;
	float DronePushMaxSpeed;
	float DronePushMaxTurn;
	float DroneRadius;
	float DroneReAttackTime;
	float DroneScale;
	float DroneScanMinPerpSpeed;
	float DroneScanRadius;
	float DroneScanWaitTime;
	float DroneSearchLookDistance;
	float DroneSearchLookSpeed;
	float DroneSearchPickNearbyAngleMax;
	float DroneSearchPickNearbyAngleMin;
	float DroneSearchPickNearbyTime;
	float DroneSpawnFadeTime;
	float DroneSpawnHeight;
	float DroneSpawnTime;
	float DroneSquadSpawnRadius;
	float DroneUpdateDistForMax;
	float DroneUpdateDistForMin;
	float DroneUpdateFPSMax;
	float DroneUpdateFPSMin;
	float EncounterRangeToAllowPulledIntoFight;
	float EncounterRangeToBlockWantedSpawns;
	float EnergyExplodeTime;
	float ExoMechJumpCooldownTimeInCombat;
	float ExoMechJumpCooldownTimeOutOfCombat;
	float FakeQuadGuard;
	float FireRateLastHitBypassTime;
	float FireRateModifierMax;
	float FireRateModifierMin;
	float FollowRoutineArriveRadius;
	float FriendlyDroneBeepReplaceChatChance;
	float FriendlyDroneChatChanceBecomeWanted;
	float FriendlyDroneChatChanceIdle;
	float FriendlyDroneChatChanceLoseWanted;
	float FriendlyDroneChatChanceSummoned;
	float FriendlyDroneChatChanceUnsummoned;
	float FriendlyDroneChatCooldown;
	float FriendlyDroneDissolveTime;
	float GrenadeLaunchFlightTime;
	float HeightTestSampleDistance;
	float HeightTestSampleTime;
	int32_t HitsToCancelStealth;
	int32_t HitsToCancelStealthSmall;
	float LabelOffsetDrone;
	float LabelOffsetMech;
	float LabelOffsetQuad;
	float LabelOffsetSpiderQuad;
	float LabelOffsetWalker;
	float LaserFadeTime;
	float LaserFadeTime2;
	float LineOfSightReturnCheckMinDistance;
	float LineOfSightReturnCheckRadius;
	float LineOfSightReturnRange;
	int32_t MaxNumInvestigatingDrones;
	int32_t MaxNumPatrolDrones;
	float MechAlertRange;
	float MechAttackMoveAngleToleranceDeg;
	float MechAttackMoveFacingAngleTolerance;
	float MechAttackMoveHoldPositionTime;
	float MechAttackMoveMaxOffsetRotation;
	float MechAttackMoveMinOffsetRotation;
	float MechAttackRange;
	float MechAttackRate;
	float MechEndJumpMinDistanceInCombat;
	float MechEndJumpMinDistanceOutOfCombat;
	float MechFadeInDistance;
	float MechFadeInTime;
	float MechFadeOutTime;
	float MechHearingRange;
	float MechMinMaintainFireTargetTime;
	float MechMinMaintainTargetTime;
	float MechMinTurretAngle;
	float MechPatrolRadius;
	float MechSightAngle;
	float MechSightRange;
	float MechStartJumpMinDistanceInCombat;
	float MechStartJumpMinDistanceOutOfCombat;
	float MedicDroneMinHealTime;
	float MinInvestigateMessageTime;
	int32_t MinRobotKillsForHint;
	float QuadAlertRange;
	float QuadAttackMinMoveTime;
	float QuadAttackMoveMinDist;
	float QuadAttackMoveMinRange;
	float QuadAttackMoveRange;
	float QuadAttackRate;
	float QuadAttackTurnAngleMax;
	float QuadAttackTurnAngleMin;
	float QuadCannotSeeTargetRepositionTime;
	int32_t QuadDamageMoveThreshold;
	float QuadEvadeCooldown;
	float QuadEvadeFacingAngle;
	float QuadHearingRange;
	float QuadHeight;
	float QuadJumpBackCheckRange;
	float QuadJumpBackDoFlipDistance;
	float QuadJumpBackFacingAngle;
	float QuadJumpBackHeightRange;
	float QuadJumpBackJumpDistance;
	float QuadJumpBackJumpMinLength;
	float QuadJumpBackMinTime;
	float QuadJumpBackRange;
	float QuadJumpBackRecoveryTime;
	float QuadJumpBackTestHeightOffset;
	float QuadJumpBackTestRadius;
	float QuadLaserSpringMax;
	float QuadLaserSpringMin;
	float QuadLookAngleMax;
	float QuadLookAngleMin;
	float QuadMinStationaryTime;
	float QuadNavRadius;
	float QuadObstacleSize;
	float QuadPatrolRadius;
	float QuadPounceDamageRadius;
	float QuadPounceOffset;
	float QuadRepositionHealthThresholdPercent;
	float QuadRepositionMaxTimeSinceHit;
	float QuadRepositionMinMoveDist;
	float QuadRepositionMinTargetDist;
	float QuadRepositionTargetDist;
	float QuadRepositionTimeout;
	float QuadSightAngle;
	float QuadSightRange;
	float QuadStealthCooldown;
	float QuadStealthRepositionHealthThresholdPercent;
	float QuadStealthRepositionHealthThresholdPercentSmall;
	float QuadStealthRepositionMaxTimeSinceHit;
	float QuadTurnBlendTime;
	float RepairChargeTime;
	float RepairCheckForTargetCooldownTime;
	float RepairEffectScaleDrone;
	float RepairEffectScaleQuad;
	float RepairOffset;
	float RepairOffsetChangeTime;
	float RepairRate;
	float RepairScanArriveDistance;
	float RepairScanRadius;
	float RobotHUDMarkerFalloff;
	float RobotHUDMarkerRange;
	float RobotMapScale;
	float RobotSightAngle;
	float RobotSightTimer;
	float RobotSteeringAvoidCreaturesWeight;
	float RobotSteeringAvoidDangerWeight;
	float RobotSteeringAvoidTurnWeight;
	float RobotSteeringFollowWeight;
	int32_t ScoreForMaxFireRateModifier;
	int32_t ScoreForMinFireRateModifier;
	float SentinelMechJumpCooldownTimeInCombat;
	float SentinelMechJumpCooldownTimeOutOfCombat;
	float SpiderPounceAngle;
	float SpiderPounceMinRange;
	float SpiderPounceRange;
	float SpiderQuadHeadTrackSmoothTime;
	float SpiderQuadHeight;
	float SpiderQuadMiniHeight;
	float SpiderQuadMiniNavRadius;
	float SpiderQuadMiniObstacleSize;
	float SpiderQuadNavRadius;
	float StoneEnemyTrackArrowOffsetMultiplier;
	float SummonerDroneBeginTime;
	float SummonerDroneBuildupTime;
	float SummonerDroneCooldown;
	float SummonerDroneCooldownOffset;
	int32_t SummonerDroneResummonThreshold;
	float SummonPreviewInterpSpeedMax;
	float SummonPreviewInterpSpeedMin;
	float SummonRadius;
	float SummonVerticalOffset;
	float TrackArrowOffsetMultiplier;
	float UnderwaterPerceptionMargin;
	float WalkerAttackAngle;
	float WalkerAttackRange;
	float WalkerAttackRate;
	float WalkerClosingRange;
	float WalkerEnergyLength;
	float WalkerEnergyMaxAlpha;
	float WalkerEnergyMinAlpha;
	float WalkerEnergyRadiusStartMax;
	float WalkerEnergyRadiusStartMin;
	float WalkerEnergySpeedMax;
	float WalkerEnergySpeedMin;
	float WalkerFastMoveFactor;
	float WalkerGuardAlertRange;
	float WalkerGunChargeTime;
	float WalkerGunRate;
	float WalkerGunShootTime;
	float WalkerHeadMaxPitch;
	float WalkerHeadMaxYaw;
	float WalkerHeadMoveTimeActive;
	float WalkerHeadMoveTimeIdle;
	float WalkerHeight;
	float WalkerLaserBodyOffset;
	float WalkerLaserOvershootEnd;
	float WalkerLaserOvershootStart;
	float WalkerLaserOvershootVehicleReducer;
	float WalkerLegShotDefendTime;
	float WalkerLegShotEnrageShotInterval;
	int32_t WalkerLegShotEnrageShotsPerVolley;
	float WalkerLegShotEnrageShotSpreadMax;
	float WalkerLegShotEnrageShotSpreadMin;
	float WalkerLegShotEnrageVolleyInterval;
	float WalkerMoveSpeed;
	float WalkerNavRadius;
	float WalkerObstacleSize;
	float WalkerPauseTime;
	float WalkerPushRadius;
	float WalkerPushTime;
	float WalkerTitanFallEffectScale;
	float WalkerTitanFallHeight;
	float WalkerTitanFallSpeed;
	bool DisableDronePerception;
	bool DroneChatter;
	bool DroneClickToMove;
	bool DroneEnableVariableUpdate;
	bool DroneHitImpulseEnabled;
	bool DronePatrolScanPlayer;
	bool DronesUseEscalationTimer;
	bool ForceShowDebugMoveTrail;
	bool SpawnFriendlyDrone;
	bool SummonerTestSummonEffects;
	bool WalkerLegShotDefendEnabled;
	bool WalkerLegShotEnrageEnabled;

	friend bool operator==(const GcRobotGlobals& lhs, const GcRobotGlobals& rhs) 
	{
		return lhs.DroneScanEffect == rhs.DroneScanEffect &&
		lhs.QuadLaser == rhs.QuadLaser &&
		lhs.WalkerLaser == rhs.WalkerLaser &&
		lhs.DroneCriticalOffset == rhs.DroneCriticalOffset &&
		lhs.DroneRepairOffset == rhs.DroneRepairOffset &&
		lhs.QuadCriticalOffset == rhs.QuadCriticalOffset &&
		lhs.WalkerGunOffset1 == rhs.WalkerGunOffset1 &&
		lhs.WalkerGunOffset2 == rhs.WalkerGunOffset2 &&
		lhs.WalkerHeadEyeOffset == rhs.WalkerHeadEyeOffset &&
		std::equal(std::begin(lhs.DamageData), std::end(lhs.DamageData), std::begin(rhs.DamageData)) &&
		std::equal(std::begin(lhs.QuadWeapons), std::end(lhs.QuadWeapons), std::begin(rhs.QuadWeapons)) &&
		std::equal(std::begin(lhs.SentinelResources), std::end(lhs.SentinelResources), std::begin(rhs.SentinelResources)) &&
		lhs.RobotCamoData == rhs.RobotCamoData &&
		lhs.AttackScan == rhs.AttackScan &&
		lhs.DroneControlData == rhs.DroneControlData &&
		lhs.DroneWeapons == rhs.DroneWeapons &&
		lhs.ForceDroneWeapon == rhs.ForceDroneWeapon &&
		lhs.RepairEffect == rhs.RepairEffect &&
		lhs.SentinelMechAvailableWeapons == rhs.SentinelMechAvailableWeapons &&
		lhs.SentinelMechWeaponData == rhs.SentinelMechWeaponData &&
		lhs.StoneMechAvailableWeapons == rhs.StoneMechAvailableWeapons &&
		lhs.SummonerDroneBuildupEffect == rhs.SummonerDroneBuildupEffect &&
		lhs.SummonerDroneSpawnEffect == rhs.SummonerDroneSpawnEffect &&
		lhs.WalkerLeftLegArmourNodes == rhs.WalkerLeftLegArmourNodes &&
		lhs.WalkerRightLegArmourNodes == rhs.WalkerRightLegArmourNodes &&
		lhs.WalkerTitanFallEffect == rhs.WalkerTitanFallEffect &&
		lhs.WalkerTitanFallShake == rhs.WalkerTitanFallShake &&
		std::equal(std::begin(lhs.PounceData), std::end(lhs.PounceData), std::begin(rhs.PounceData)) &&
		std::equal(std::begin(lhs.FireRateModifierScores), std::end(lhs.FireRateModifierScores), std::begin(rhs.FireRateModifierScores)) &&
		std::equal(std::begin(lhs.SentinelSpawnLimits), std::end(lhs.SentinelSpawnLimits), std::begin(rhs.SentinelSpawnLimits)) &&
		lhs.MechTargetSelectionWeightingSettings == rhs.MechTargetSelectionWeightingSettings &&
		lhs.MechPatrolPauseTime == rhs.MechPatrolPauseTime &&
		lhs.QuadAttackTurnSpeeds == rhs.QuadAttackTurnSpeeds &&
		lhs.QuadLookTurnSpeeds == rhs.QuadLookTurnSpeeds &&
		lhs.QuadPatrolPauseTime == rhs.QuadPatrolPauseTime &&
		lhs.AttackMoveArrivalDistance == rhs.AttackMoveArrivalDistance &&
		lhs.AttackMoveMaxTime == rhs.AttackMoveMaxTime &&
		lhs.AttackSentinelWantedValue == rhs.AttackSentinelWantedValue &&
		lhs.CollisionDistance == rhs.CollisionDistance &&
		lhs.CombatSpawnSquadRadiusDrones == rhs.CombatSpawnSquadRadiusDrones &&
		lhs.CombatSpawnSquadRadiusRobots == rhs.CombatSpawnSquadRadiusRobots &&
		lhs.CombatWaveSpawnTime == rhs.CombatWaveSpawnTime &&
		lhs.CorruptedDroneRepairInteruptCooldownTime == rhs.CorruptedDroneRepairInteruptCooldownTime &&
		lhs.CriticalHitSizeDrone == rhs.CriticalHitSizeDrone &&
		lhs.CriticalHitSizeMech == rhs.CriticalHitSizeMech &&
		lhs.CriticalHitSizeQuad == rhs.CriticalHitSizeQuad &&
		lhs.CriticalHitSizeWalker == rhs.CriticalHitSizeWalker &&
		lhs.DroneAggressiveInvestigateAttackTime == rhs.DroneAggressiveInvestigateAttackTime &&
		lhs.DroneAggroDamage == rhs.DroneAggroDamage &&
		lhs.DroneAttackGetInRangeBoost == rhs.DroneAttackGetInRangeBoost &&
		lhs.DroneAttackMaxAngleDownFromPlayer == rhs.DroneAttackMaxAngleDownFromPlayer &&
		lhs.DroneAttackPlayerHeightOffset == rhs.DroneAttackPlayerHeightOffset &&
		lhs.DroneCombatSpawnAngle == rhs.DroneCombatSpawnAngle &&
		lhs.DroneCrimeCooldown == rhs.DroneCrimeCooldown &&
		lhs.DroneCrimeCooldownWaitTime == rhs.DroneCrimeCooldownWaitTime &&
		lhs.DroneCrimeCooldownWaitTimeAtMax == rhs.DroneCrimeCooldownWaitTimeAtMax &&
		lhs.DroneCrimePostInvestigateWaitTime == rhs.DroneCrimePostInvestigateWaitTime &&
		lhs.DroneCrimeWitnessInvestigateDistance == rhs.DroneCrimeWitnessInvestigateDistance &&
		lhs.DroneCriminalScanTime == rhs.DroneCriminalScanTime &&
		lhs.DroneDecisionTime == rhs.DroneDecisionTime &&
		lhs.DroneHeightAngle == rhs.DroneHeightAngle &&
		lhs.DroneHitImpulseCooldown == rhs.DroneHitImpulseCooldown &&
		lhs.DroneHitImpulseFlipForceDownBound == rhs.DroneHitImpulseFlipForceDownBound &&
		lhs.DroneHitImpulseLaserMultiplier == rhs.DroneHitImpulseLaserMultiplier &&
		lhs.DroneHitImpulseMinVerticalComponentScale == rhs.DroneHitImpulseMinVerticalComponentScale &&
		lhs.DroneHitImpulseMultiplier == rhs.DroneHitImpulseMultiplier &&
		lhs.DroneInvestigateMaxPositionAngle == rhs.DroneInvestigateMaxPositionAngle &&
		lhs.DroneInvestigateMinChaseRange == rhs.DroneInvestigateMinChaseRange &&
		lhs.DroneInvestigateMinCrimeInterval == rhs.DroneInvestigateMinCrimeInterval &&
		lhs.DroneInvestigateMinPositionAngle == rhs.DroneInvestigateMinPositionAngle &&
		lhs.DroneInvestigateMinScanTime == rhs.DroneInvestigateMinScanTime &&
		lhs.DroneInvestigateMinWitnessRange == rhs.DroneInvestigateMinWitnessRange &&
		lhs.DroneInvestigateMinWitnessRangeCantSee == rhs.DroneInvestigateMinWitnessRangeCantSee &&
		lhs.DroneInvestigateMinWitnessTime == rhs.DroneInvestigateMinWitnessTime &&
		lhs.DroneInvestigateRepositionTime == rhs.DroneInvestigateRepositionTime &&
		lhs.DroneInvestigateSpeedBoost == rhs.DroneInvestigateSpeedBoost &&
		lhs.DroneInvestigateSpeedBoostRange == rhs.DroneInvestigateSpeedBoostRange &&
		lhs.DroneInvestigateSpeedBoostStartDistance == rhs.DroneInvestigateSpeedBoostStartDistance &&
		lhs.DroneMaxScanAngle == rhs.DroneMaxScanAngle &&
		lhs.DroneMaxScanLength == rhs.DroneMaxScanLength &&
		lhs.DroneMoveDistancePlayerMechMultiplier == rhs.DroneMoveDistancePlayerMechMultiplier &&
		lhs.DronePatrolAttackSightTime == rhs.DronePatrolAttackSightTime &&
		lhs.DronePatrolInvestigateSpeedBoost == rhs.DronePatrolInvestigateSpeedBoost &&
		lhs.DronePatrolSearchTime == rhs.DronePatrolSearchTime &&
		lhs.DronePerceptionMinHearingSpeed == rhs.DronePerceptionMinHearingSpeed &&
		lhs.DronePerceptionRange == rhs.DronePerceptionRange &&
		lhs.DronePerceptionRangeHostile == rhs.DronePerceptionRangeHostile &&
		lhs.DronePerceptionSightAngle == rhs.DronePerceptionSightAngle &&
		lhs.DronePerceptionSightRange == rhs.DronePerceptionSightRange &&
		lhs.DronePerceptionSightRangeHostile == rhs.DronePerceptionSightRangeHostile &&
		lhs.DronePushLaserForce == rhs.DronePushLaserForce &&
		lhs.DronePushMaxSpeed == rhs.DronePushMaxSpeed &&
		lhs.DronePushMaxTurn == rhs.DronePushMaxTurn &&
		lhs.DroneRadius == rhs.DroneRadius &&
		lhs.DroneReAttackTime == rhs.DroneReAttackTime &&
		lhs.DroneScale == rhs.DroneScale &&
		lhs.DroneScanMinPerpSpeed == rhs.DroneScanMinPerpSpeed &&
		lhs.DroneScanRadius == rhs.DroneScanRadius &&
		lhs.DroneScanWaitTime == rhs.DroneScanWaitTime &&
		lhs.DroneSearchLookDistance == rhs.DroneSearchLookDistance &&
		lhs.DroneSearchLookSpeed == rhs.DroneSearchLookSpeed &&
		lhs.DroneSearchPickNearbyAngleMax == rhs.DroneSearchPickNearbyAngleMax &&
		lhs.DroneSearchPickNearbyAngleMin == rhs.DroneSearchPickNearbyAngleMin &&
		lhs.DroneSearchPickNearbyTime == rhs.DroneSearchPickNearbyTime &&
		lhs.DroneSpawnFadeTime == rhs.DroneSpawnFadeTime &&
		lhs.DroneSpawnHeight == rhs.DroneSpawnHeight &&
		lhs.DroneSpawnTime == rhs.DroneSpawnTime &&
		lhs.DroneSquadSpawnRadius == rhs.DroneSquadSpawnRadius &&
		lhs.DroneUpdateDistForMax == rhs.DroneUpdateDistForMax &&
		lhs.DroneUpdateDistForMin == rhs.DroneUpdateDistForMin &&
		lhs.DroneUpdateFPSMax == rhs.DroneUpdateFPSMax &&
		lhs.DroneUpdateFPSMin == rhs.DroneUpdateFPSMin &&
		lhs.EncounterRangeToAllowPulledIntoFight == rhs.EncounterRangeToAllowPulledIntoFight &&
		lhs.EncounterRangeToBlockWantedSpawns == rhs.EncounterRangeToBlockWantedSpawns &&
		lhs.EnergyExplodeTime == rhs.EnergyExplodeTime &&
		lhs.ExoMechJumpCooldownTimeInCombat == rhs.ExoMechJumpCooldownTimeInCombat &&
		lhs.ExoMechJumpCooldownTimeOutOfCombat == rhs.ExoMechJumpCooldownTimeOutOfCombat &&
		lhs.FakeQuadGuard == rhs.FakeQuadGuard &&
		lhs.FireRateLastHitBypassTime == rhs.FireRateLastHitBypassTime &&
		lhs.FireRateModifierMax == rhs.FireRateModifierMax &&
		lhs.FireRateModifierMin == rhs.FireRateModifierMin &&
		lhs.FollowRoutineArriveRadius == rhs.FollowRoutineArriveRadius &&
		lhs.FriendlyDroneBeepReplaceChatChance == rhs.FriendlyDroneBeepReplaceChatChance &&
		lhs.FriendlyDroneChatChanceBecomeWanted == rhs.FriendlyDroneChatChanceBecomeWanted &&
		lhs.FriendlyDroneChatChanceIdle == rhs.FriendlyDroneChatChanceIdle &&
		lhs.FriendlyDroneChatChanceLoseWanted == rhs.FriendlyDroneChatChanceLoseWanted &&
		lhs.FriendlyDroneChatChanceSummoned == rhs.FriendlyDroneChatChanceSummoned &&
		lhs.FriendlyDroneChatChanceUnsummoned == rhs.FriendlyDroneChatChanceUnsummoned &&
		lhs.FriendlyDroneChatCooldown == rhs.FriendlyDroneChatCooldown &&
		lhs.FriendlyDroneDissolveTime == rhs.FriendlyDroneDissolveTime &&
		lhs.GrenadeLaunchFlightTime == rhs.GrenadeLaunchFlightTime &&
		lhs.HeightTestSampleDistance == rhs.HeightTestSampleDistance &&
		lhs.HeightTestSampleTime == rhs.HeightTestSampleTime &&
		lhs.HitsToCancelStealth == rhs.HitsToCancelStealth &&
		lhs.HitsToCancelStealthSmall == rhs.HitsToCancelStealthSmall &&
		lhs.LabelOffsetDrone == rhs.LabelOffsetDrone &&
		lhs.LabelOffsetMech == rhs.LabelOffsetMech &&
		lhs.LabelOffsetQuad == rhs.LabelOffsetQuad &&
		lhs.LabelOffsetSpiderQuad == rhs.LabelOffsetSpiderQuad &&
		lhs.LabelOffsetWalker == rhs.LabelOffsetWalker &&
		lhs.LaserFadeTime == rhs.LaserFadeTime &&
		lhs.LaserFadeTime2 == rhs.LaserFadeTime2 &&
		lhs.LineOfSightReturnCheckMinDistance == rhs.LineOfSightReturnCheckMinDistance &&
		lhs.LineOfSightReturnCheckRadius == rhs.LineOfSightReturnCheckRadius &&
		lhs.LineOfSightReturnRange == rhs.LineOfSightReturnRange &&
		lhs.MaxNumInvestigatingDrones == rhs.MaxNumInvestigatingDrones &&
		lhs.MaxNumPatrolDrones == rhs.MaxNumPatrolDrones &&
		lhs.MechAlertRange == rhs.MechAlertRange &&
		lhs.MechAttackMoveAngleToleranceDeg == rhs.MechAttackMoveAngleToleranceDeg &&
		lhs.MechAttackMoveFacingAngleTolerance == rhs.MechAttackMoveFacingAngleTolerance &&
		lhs.MechAttackMoveHoldPositionTime == rhs.MechAttackMoveHoldPositionTime &&
		lhs.MechAttackMoveMaxOffsetRotation == rhs.MechAttackMoveMaxOffsetRotation &&
		lhs.MechAttackMoveMinOffsetRotation == rhs.MechAttackMoveMinOffsetRotation &&
		lhs.MechAttackRange == rhs.MechAttackRange &&
		lhs.MechAttackRate == rhs.MechAttackRate &&
		lhs.MechEndJumpMinDistanceInCombat == rhs.MechEndJumpMinDistanceInCombat &&
		lhs.MechEndJumpMinDistanceOutOfCombat == rhs.MechEndJumpMinDistanceOutOfCombat &&
		lhs.MechFadeInDistance == rhs.MechFadeInDistance &&
		lhs.MechFadeInTime == rhs.MechFadeInTime &&
		lhs.MechFadeOutTime == rhs.MechFadeOutTime &&
		lhs.MechHearingRange == rhs.MechHearingRange &&
		lhs.MechMinMaintainFireTargetTime == rhs.MechMinMaintainFireTargetTime &&
		lhs.MechMinMaintainTargetTime == rhs.MechMinMaintainTargetTime &&
		lhs.MechMinTurretAngle == rhs.MechMinTurretAngle &&
		lhs.MechPatrolRadius == rhs.MechPatrolRadius &&
		lhs.MechSightAngle == rhs.MechSightAngle &&
		lhs.MechSightRange == rhs.MechSightRange &&
		lhs.MechStartJumpMinDistanceInCombat == rhs.MechStartJumpMinDistanceInCombat &&
		lhs.MechStartJumpMinDistanceOutOfCombat == rhs.MechStartJumpMinDistanceOutOfCombat &&
		lhs.MedicDroneMinHealTime == rhs.MedicDroneMinHealTime &&
		lhs.MinInvestigateMessageTime == rhs.MinInvestigateMessageTime &&
		lhs.MinRobotKillsForHint == rhs.MinRobotKillsForHint &&
		lhs.QuadAlertRange == rhs.QuadAlertRange &&
		lhs.QuadAttackMinMoveTime == rhs.QuadAttackMinMoveTime &&
		lhs.QuadAttackMoveMinDist == rhs.QuadAttackMoveMinDist &&
		lhs.QuadAttackMoveMinRange == rhs.QuadAttackMoveMinRange &&
		lhs.QuadAttackMoveRange == rhs.QuadAttackMoveRange &&
		lhs.QuadAttackRate == rhs.QuadAttackRate &&
		lhs.QuadAttackTurnAngleMax == rhs.QuadAttackTurnAngleMax &&
		lhs.QuadAttackTurnAngleMin == rhs.QuadAttackTurnAngleMin &&
		lhs.QuadCannotSeeTargetRepositionTime == rhs.QuadCannotSeeTargetRepositionTime &&
		lhs.QuadDamageMoveThreshold == rhs.QuadDamageMoveThreshold &&
		lhs.QuadEvadeCooldown == rhs.QuadEvadeCooldown &&
		lhs.QuadEvadeFacingAngle == rhs.QuadEvadeFacingAngle &&
		lhs.QuadHearingRange == rhs.QuadHearingRange &&
		lhs.QuadHeight == rhs.QuadHeight &&
		lhs.QuadJumpBackCheckRange == rhs.QuadJumpBackCheckRange &&
		lhs.QuadJumpBackDoFlipDistance == rhs.QuadJumpBackDoFlipDistance &&
		lhs.QuadJumpBackFacingAngle == rhs.QuadJumpBackFacingAngle &&
		lhs.QuadJumpBackHeightRange == rhs.QuadJumpBackHeightRange &&
		lhs.QuadJumpBackJumpDistance == rhs.QuadJumpBackJumpDistance &&
		lhs.QuadJumpBackJumpMinLength == rhs.QuadJumpBackJumpMinLength &&
		lhs.QuadJumpBackMinTime == rhs.QuadJumpBackMinTime &&
		lhs.QuadJumpBackRange == rhs.QuadJumpBackRange &&
		lhs.QuadJumpBackRecoveryTime == rhs.QuadJumpBackRecoveryTime &&
		lhs.QuadJumpBackTestHeightOffset == rhs.QuadJumpBackTestHeightOffset &&
		lhs.QuadJumpBackTestRadius == rhs.QuadJumpBackTestRadius &&
		lhs.QuadLaserSpringMax == rhs.QuadLaserSpringMax &&
		lhs.QuadLaserSpringMin == rhs.QuadLaserSpringMin &&
		lhs.QuadLookAngleMax == rhs.QuadLookAngleMax &&
		lhs.QuadLookAngleMin == rhs.QuadLookAngleMin &&
		lhs.QuadMinStationaryTime == rhs.QuadMinStationaryTime &&
		lhs.QuadNavRadius == rhs.QuadNavRadius &&
		lhs.QuadObstacleSize == rhs.QuadObstacleSize &&
		lhs.QuadPatrolRadius == rhs.QuadPatrolRadius &&
		lhs.QuadPounceDamageRadius == rhs.QuadPounceDamageRadius &&
		lhs.QuadPounceOffset == rhs.QuadPounceOffset &&
		lhs.QuadRepositionHealthThresholdPercent == rhs.QuadRepositionHealthThresholdPercent &&
		lhs.QuadRepositionMaxTimeSinceHit == rhs.QuadRepositionMaxTimeSinceHit &&
		lhs.QuadRepositionMinMoveDist == rhs.QuadRepositionMinMoveDist &&
		lhs.QuadRepositionMinTargetDist == rhs.QuadRepositionMinTargetDist &&
		lhs.QuadRepositionTargetDist == rhs.QuadRepositionTargetDist &&
		lhs.QuadRepositionTimeout == rhs.QuadRepositionTimeout &&
		lhs.QuadSightAngle == rhs.QuadSightAngle &&
		lhs.QuadSightRange == rhs.QuadSightRange &&
		lhs.QuadStealthCooldown == rhs.QuadStealthCooldown &&
		lhs.QuadStealthRepositionHealthThresholdPercent == rhs.QuadStealthRepositionHealthThresholdPercent &&
		lhs.QuadStealthRepositionHealthThresholdPercentSmall == rhs.QuadStealthRepositionHealthThresholdPercentSmall &&
		lhs.QuadStealthRepositionMaxTimeSinceHit == rhs.QuadStealthRepositionMaxTimeSinceHit &&
		lhs.QuadTurnBlendTime == rhs.QuadTurnBlendTime &&
		lhs.RepairChargeTime == rhs.RepairChargeTime &&
		lhs.RepairCheckForTargetCooldownTime == rhs.RepairCheckForTargetCooldownTime &&
		lhs.RepairEffectScaleDrone == rhs.RepairEffectScaleDrone &&
		lhs.RepairEffectScaleQuad == rhs.RepairEffectScaleQuad &&
		lhs.RepairOffset == rhs.RepairOffset &&
		lhs.RepairOffsetChangeTime == rhs.RepairOffsetChangeTime &&
		lhs.RepairRate == rhs.RepairRate &&
		lhs.RepairScanArriveDistance == rhs.RepairScanArriveDistance &&
		lhs.RepairScanRadius == rhs.RepairScanRadius &&
		lhs.RobotHUDMarkerFalloff == rhs.RobotHUDMarkerFalloff &&
		lhs.RobotHUDMarkerRange == rhs.RobotHUDMarkerRange &&
		lhs.RobotMapScale == rhs.RobotMapScale &&
		lhs.RobotSightAngle == rhs.RobotSightAngle &&
		lhs.RobotSightTimer == rhs.RobotSightTimer &&
		lhs.RobotSteeringAvoidCreaturesWeight == rhs.RobotSteeringAvoidCreaturesWeight &&
		lhs.RobotSteeringAvoidDangerWeight == rhs.RobotSteeringAvoidDangerWeight &&
		lhs.RobotSteeringAvoidTurnWeight == rhs.RobotSteeringAvoidTurnWeight &&
		lhs.RobotSteeringFollowWeight == rhs.RobotSteeringFollowWeight &&
		lhs.ScoreForMaxFireRateModifier == rhs.ScoreForMaxFireRateModifier &&
		lhs.ScoreForMinFireRateModifier == rhs.ScoreForMinFireRateModifier &&
		lhs.SentinelMechJumpCooldownTimeInCombat == rhs.SentinelMechJumpCooldownTimeInCombat &&
		lhs.SentinelMechJumpCooldownTimeOutOfCombat == rhs.SentinelMechJumpCooldownTimeOutOfCombat &&
		lhs.SpiderPounceAngle == rhs.SpiderPounceAngle &&
		lhs.SpiderPounceMinRange == rhs.SpiderPounceMinRange &&
		lhs.SpiderPounceRange == rhs.SpiderPounceRange &&
		lhs.SpiderQuadHeadTrackSmoothTime == rhs.SpiderQuadHeadTrackSmoothTime &&
		lhs.SpiderQuadHeight == rhs.SpiderQuadHeight &&
		lhs.SpiderQuadMiniHeight == rhs.SpiderQuadMiniHeight &&
		lhs.SpiderQuadMiniNavRadius == rhs.SpiderQuadMiniNavRadius &&
		lhs.SpiderQuadMiniObstacleSize == rhs.SpiderQuadMiniObstacleSize &&
		lhs.SpiderQuadNavRadius == rhs.SpiderQuadNavRadius &&
		lhs.StoneEnemyTrackArrowOffsetMultiplier == rhs.StoneEnemyTrackArrowOffsetMultiplier &&
		lhs.SummonerDroneBeginTime == rhs.SummonerDroneBeginTime &&
		lhs.SummonerDroneBuildupTime == rhs.SummonerDroneBuildupTime &&
		lhs.SummonerDroneCooldown == rhs.SummonerDroneCooldown &&
		lhs.SummonerDroneCooldownOffset == rhs.SummonerDroneCooldownOffset &&
		lhs.SummonerDroneResummonThreshold == rhs.SummonerDroneResummonThreshold &&
		lhs.SummonPreviewInterpSpeedMax == rhs.SummonPreviewInterpSpeedMax &&
		lhs.SummonPreviewInterpSpeedMin == rhs.SummonPreviewInterpSpeedMin &&
		lhs.SummonRadius == rhs.SummonRadius &&
		lhs.SummonVerticalOffset == rhs.SummonVerticalOffset &&
		lhs.TrackArrowOffsetMultiplier == rhs.TrackArrowOffsetMultiplier &&
		lhs.UnderwaterPerceptionMargin == rhs.UnderwaterPerceptionMargin &&
		lhs.WalkerAttackAngle == rhs.WalkerAttackAngle &&
		lhs.WalkerAttackRange == rhs.WalkerAttackRange &&
		lhs.WalkerAttackRate == rhs.WalkerAttackRate &&
		lhs.WalkerClosingRange == rhs.WalkerClosingRange &&
		lhs.WalkerEnergyLength == rhs.WalkerEnergyLength &&
		lhs.WalkerEnergyMaxAlpha == rhs.WalkerEnergyMaxAlpha &&
		lhs.WalkerEnergyMinAlpha == rhs.WalkerEnergyMinAlpha &&
		lhs.WalkerEnergyRadiusStartMax == rhs.WalkerEnergyRadiusStartMax &&
		lhs.WalkerEnergyRadiusStartMin == rhs.WalkerEnergyRadiusStartMin &&
		lhs.WalkerEnergySpeedMax == rhs.WalkerEnergySpeedMax &&
		lhs.WalkerEnergySpeedMin == rhs.WalkerEnergySpeedMin &&
		lhs.WalkerFastMoveFactor == rhs.WalkerFastMoveFactor &&
		lhs.WalkerGuardAlertRange == rhs.WalkerGuardAlertRange &&
		lhs.WalkerGunChargeTime == rhs.WalkerGunChargeTime &&
		lhs.WalkerGunRate == rhs.WalkerGunRate &&
		lhs.WalkerGunShootTime == rhs.WalkerGunShootTime &&
		lhs.WalkerHeadMaxPitch == rhs.WalkerHeadMaxPitch &&
		lhs.WalkerHeadMaxYaw == rhs.WalkerHeadMaxYaw &&
		lhs.WalkerHeadMoveTimeActive == rhs.WalkerHeadMoveTimeActive &&
		lhs.WalkerHeadMoveTimeIdle == rhs.WalkerHeadMoveTimeIdle &&
		lhs.WalkerHeight == rhs.WalkerHeight &&
		lhs.WalkerLaserBodyOffset == rhs.WalkerLaserBodyOffset &&
		lhs.WalkerLaserOvershootEnd == rhs.WalkerLaserOvershootEnd &&
		lhs.WalkerLaserOvershootStart == rhs.WalkerLaserOvershootStart &&
		lhs.WalkerLaserOvershootVehicleReducer == rhs.WalkerLaserOvershootVehicleReducer &&
		lhs.WalkerLegShotDefendTime == rhs.WalkerLegShotDefendTime &&
		lhs.WalkerLegShotEnrageShotInterval == rhs.WalkerLegShotEnrageShotInterval &&
		lhs.WalkerLegShotEnrageShotsPerVolley == rhs.WalkerLegShotEnrageShotsPerVolley &&
		lhs.WalkerLegShotEnrageShotSpreadMax == rhs.WalkerLegShotEnrageShotSpreadMax &&
		lhs.WalkerLegShotEnrageShotSpreadMin == rhs.WalkerLegShotEnrageShotSpreadMin &&
		lhs.WalkerLegShotEnrageVolleyInterval == rhs.WalkerLegShotEnrageVolleyInterval &&
		lhs.WalkerMoveSpeed == rhs.WalkerMoveSpeed &&
		lhs.WalkerNavRadius == rhs.WalkerNavRadius &&
		lhs.WalkerObstacleSize == rhs.WalkerObstacleSize &&
		lhs.WalkerPauseTime == rhs.WalkerPauseTime &&
		lhs.WalkerPushRadius == rhs.WalkerPushRadius &&
		lhs.WalkerPushTime == rhs.WalkerPushTime &&
		lhs.WalkerTitanFallEffectScale == rhs.WalkerTitanFallEffectScale &&
		lhs.WalkerTitanFallHeight == rhs.WalkerTitanFallHeight &&
		lhs.WalkerTitanFallSpeed == rhs.WalkerTitanFallSpeed &&
		lhs.DisableDronePerception == rhs.DisableDronePerception &&
		lhs.DroneChatter == rhs.DroneChatter &&
		lhs.DroneClickToMove == rhs.DroneClickToMove &&
		lhs.DroneEnableVariableUpdate == rhs.DroneEnableVariableUpdate &&
		lhs.DroneHitImpulseEnabled == rhs.DroneHitImpulseEnabled &&
		lhs.DronePatrolScanPlayer == rhs.DronePatrolScanPlayer &&
		lhs.DronesUseEscalationTimer == rhs.DronesUseEscalationTimer &&
		lhs.ForceShowDebugMoveTrail == rhs.ForceShowDebugMoveTrail &&
		lhs.SpawnFriendlyDrone == rhs.SpawnFriendlyDrone &&
		lhs.SummonerTestSummonEffects == rhs.SummonerTestSummonEffects &&
		lhs.WalkerLegShotDefendEnabled == rhs.WalkerLegShotDefendEnabled &&
		lhs.WalkerLegShotEnrageEnabled == rhs.WalkerLegShotEnrageEnabled;
	}
};

//Dependency: GcSettlementProductionElement
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSettlementBuildingCost
//Dependency: GcSettlementBuildingContribution
//Dependency: GcScanToRevealComponentData
//Dependency: GcSettlementGiftDetails
//Dependency: GcSettlementCustomJudgement
//Dependency: GcSettlementJudgementData
//Dependency: GcSettlementJobDetails
//Dependency: GcSettlementStatStrengthData
//Dependency: Colour
struct GcSettlementGlobals
{
	NMS::Colour NegativeStatColour;
	NMS::Colour PositiveStatColour;
	NMS_GameComponents::GcSettlementBuildingCost SettlementBuildingCosts[60];
	NMS_GameComponents::GcSettlementBuildingContribution SettlementBuildingContributions[60];
	NMS::NMSString0x20A BuildingProductionNotes[60];
	NMS::NMSString0x20A BuildingUpgradePageNames[60];
	NMS::NMSString0x20A SettlementBuildingClassGenericRequirement[60];
	NMS::NMSString0x20A SettlementBuildingClassGenericTitle[60];
	uint64_t SettlementBuildingTimes[60];
	NMS::NMSString0x20A JudgementMissionObjectives[12];
	NMS::NMSString0x20A JudgementUpdateMainText[12];
	NMS::NMSString0x20A JudgementUpdateSubtitles[12];
	NMS::NMSString0x20A JudgementUpdateTitles[12];
	NMS::NMSString0x20A LongAltResearchLocIDs[8];
	NMS::NMSString0x20A LongPolicyLocIDs[8];
	NMS::NMSString0x20A LongResearchLocIDs[8];
	NMS::NMSString0x20A NegativeFakePerkOSDLocIDs[8];
	NMS::NMSString0x20A NegativeStatChangeOSDLocIDs[8];
	NMS::NMSString0x20A PositiveFakePerkOSDLocIDs[8];
	NMS::NMSString0x20A PositiveStatChangeOSDLocIDs[8];
	NMS::NMSString0x20A ProcPerkDescriptions[8];
	NMS::NMSString0x20A ShortAltResearchLocIDs[8];
	NMS::NMSString0x20A ShortPolicyLocIDs[8];
	NMS::NMSString0x20A ShortResearchLocIDs[8];
	NMS::NMSString0x10 AltResearchPerks[8];
	NMS::NMSString0x10 NegativeStatChangeSubstances[8];
	NMS::NMSString0x10 PolicyPerks[8];
	NMS::NMSString0x10 PositiveStatChangeSubstances[8];
	NMS::NMSString0x10 ResearchPerks[8];
	NMS_GameComponents::GcScanToRevealComponentData BuilderNPCScanToRevealData;
	uint64_t TowerPowerRechargeTime[4];
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> AutophageGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> AutophageProductionElementsSelectable;
	std::vector<NMS_GameComponents::GcSettlementCustomJudgement> CustomJudgements;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> GekGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> GekProductionElementsSelectable;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> Gifts;
	std::vector<NMS_GameComponents::GcSettlementJobDetails> JobTypes;
	std::vector<NMS_GameComponents::GcSettlementJudgementData> Judgements;
	NMS::NMSString0x10 JudgementTextHashID;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> KorvaxGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> KorvaxProductionElementsSelectable;
	NMS::NMSString0x10 MiniMissionFailJudgement;
	NMS::NMSString0x10 MiniMissionSuccessJudgement;
	std::vector<NMS::NMSString0x20A> ScanEventsThatPreventSentinelAlert;
	NMS::NMSString0x10 SettlementCostAutophage;
	NMS::NMSString0x10 SettlementCostGek;
	NMS::NMSString0x10 SettlementCostKorvax;
	NMS::NMSString0x10 SettlementCostVykeen;
	NMS::NMSString0x10 SettlementMiniExpeditionMissionID;
	std::vector<NMS::NMSString0x10> TechGiftPerks;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> VykeenGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> VykeenProductionElementsSelectable;
	uint64_t AlertCycleDurationInSeconds;
	uint64_t BugAttackCycleDurationInSeconds;
	uint64_t BuildingFreeUpgradeTimeInSeconds;
	uint64_t BuildingUpgradeTimeInSeconds;
	uint64_t ProductionCycleDurationInSeconds;
	uint64_t ProductionSlotTimerOffsetInSeconds;
	uint64_t TowerRechargeTime;
	NMS_GameComponents::GcSettlementStatStrengthData PerkStatStrengthValues[8];
	float JudgementSelectionWeights[12];
	int32_t InitialStatsMaxValues[8];
	int32_t InitialStatsMinValues[8];
	float NormalisedStatBadThresholds[8];
	float NormalisedStatGoodThresholds[8];
	int32_t StatProductivityContributionModifiers[8];
	int32_t StatsMaxValues[8];
	int32_t StatsMinValues[8];
	int32_t AlertUnitsPerCycleRateModifier;
	int32_t BugAttackUnitsPerCycleRateModifier;
	float BuildingRevealCutsceneLength;
	int32_t DailyDebtPaymentModifier;
	int32_t InitialBuildingCountMax;
	int32_t InitialBuildingCountMin;
	int32_t InitialDebtCycles;
	float JudgementSpecificRacePartyChance;
	int32_t JudgementWaitTimeMax;
	int32_t JudgementWaitTimeMin;
	int32_t MaxInitialNegativePerksCount;
	int32_t MaxInitialPositivePerksCount;
	int32_t MaxNPCPopulation;
	int32_t MaxPerksCount;
	int32_t MinInitialNegativePerksCount;
	int32_t MinInitialPositivePerksCount;
	int32_t PopulationGrowthRatePerDayBad;
	int32_t PopulationGrowthRatePerDayGood;
	int32_t PopulationGrowthRatePerDayNeutral;
	float PopulationGrowthRateThresholdBad;
	float PopulationGrowthRateThresholdGood;
	float ProductionBoostConversionRate;
	int32_t ProductUnitsPerCycleRateModifier;
	float SettlementEntryMessageDistance;
	float SettlementMiniExpeditionSuccessChance;
	int32_t SettlementMiniExpeditionTime;
	float StartingPopulationScalar;
	int32_t SubstanceUnitsPerCycleRateModifier;
	bool StatIsGoodWhenPositive[8];
	bool StatProductionIsNegativeWhenBad[8];
	bool DebugForceShowHiddenPerks;

	friend bool operator==(const GcSettlementGlobals& lhs, const GcSettlementGlobals& rhs) 
	{
		return lhs.NegativeStatColour == rhs.NegativeStatColour &&
		lhs.PositiveStatColour == rhs.PositiveStatColour &&
		std::equal(std::begin(lhs.SettlementBuildingCosts), std::end(lhs.SettlementBuildingCosts), std::begin(rhs.SettlementBuildingCosts)) &&
		std::equal(std::begin(lhs.SettlementBuildingContributions), std::end(lhs.SettlementBuildingContributions), std::begin(rhs.SettlementBuildingContributions)) &&
		std::equal(std::begin(lhs.BuildingProductionNotes), std::end(lhs.BuildingProductionNotes), std::begin(rhs.BuildingProductionNotes)) &&
		std::equal(std::begin(lhs.BuildingUpgradePageNames), std::end(lhs.BuildingUpgradePageNames), std::begin(rhs.BuildingUpgradePageNames)) &&
		std::equal(std::begin(lhs.SettlementBuildingClassGenericRequirement), std::end(lhs.SettlementBuildingClassGenericRequirement), std::begin(rhs.SettlementBuildingClassGenericRequirement)) &&
		std::equal(std::begin(lhs.SettlementBuildingClassGenericTitle), std::end(lhs.SettlementBuildingClassGenericTitle), std::begin(rhs.SettlementBuildingClassGenericTitle)) &&
		std::equal(std::begin(lhs.SettlementBuildingTimes), std::end(lhs.SettlementBuildingTimes), std::begin(rhs.SettlementBuildingTimes)) &&
		std::equal(std::begin(lhs.JudgementMissionObjectives), std::end(lhs.JudgementMissionObjectives), std::begin(rhs.JudgementMissionObjectives)) &&
		std::equal(std::begin(lhs.JudgementUpdateMainText), std::end(lhs.JudgementUpdateMainText), std::begin(rhs.JudgementUpdateMainText)) &&
		std::equal(std::begin(lhs.JudgementUpdateSubtitles), std::end(lhs.JudgementUpdateSubtitles), std::begin(rhs.JudgementUpdateSubtitles)) &&
		std::equal(std::begin(lhs.JudgementUpdateTitles), std::end(lhs.JudgementUpdateTitles), std::begin(rhs.JudgementUpdateTitles)) &&
		std::equal(std::begin(lhs.LongAltResearchLocIDs), std::end(lhs.LongAltResearchLocIDs), std::begin(rhs.LongAltResearchLocIDs)) &&
		std::equal(std::begin(lhs.LongPolicyLocIDs), std::end(lhs.LongPolicyLocIDs), std::begin(rhs.LongPolicyLocIDs)) &&
		std::equal(std::begin(lhs.LongResearchLocIDs), std::end(lhs.LongResearchLocIDs), std::begin(rhs.LongResearchLocIDs)) &&
		std::equal(std::begin(lhs.NegativeFakePerkOSDLocIDs), std::end(lhs.NegativeFakePerkOSDLocIDs), std::begin(rhs.NegativeFakePerkOSDLocIDs)) &&
		std::equal(std::begin(lhs.NegativeStatChangeOSDLocIDs), std::end(lhs.NegativeStatChangeOSDLocIDs), std::begin(rhs.NegativeStatChangeOSDLocIDs)) &&
		std::equal(std::begin(lhs.PositiveFakePerkOSDLocIDs), std::end(lhs.PositiveFakePerkOSDLocIDs), std::begin(rhs.PositiveFakePerkOSDLocIDs)) &&
		std::equal(std::begin(lhs.PositiveStatChangeOSDLocIDs), std::end(lhs.PositiveStatChangeOSDLocIDs), std::begin(rhs.PositiveStatChangeOSDLocIDs)) &&
		std::equal(std::begin(lhs.ProcPerkDescriptions), std::end(lhs.ProcPerkDescriptions), std::begin(rhs.ProcPerkDescriptions)) &&
		std::equal(std::begin(lhs.ShortAltResearchLocIDs), std::end(lhs.ShortAltResearchLocIDs), std::begin(rhs.ShortAltResearchLocIDs)) &&
		std::equal(std::begin(lhs.ShortPolicyLocIDs), std::end(lhs.ShortPolicyLocIDs), std::begin(rhs.ShortPolicyLocIDs)) &&
		std::equal(std::begin(lhs.ShortResearchLocIDs), std::end(lhs.ShortResearchLocIDs), std::begin(rhs.ShortResearchLocIDs)) &&
		std::equal(std::begin(lhs.AltResearchPerks), std::end(lhs.AltResearchPerks), std::begin(rhs.AltResearchPerks)) &&
		std::equal(std::begin(lhs.NegativeStatChangeSubstances), std::end(lhs.NegativeStatChangeSubstances), std::begin(rhs.NegativeStatChangeSubstances)) &&
		std::equal(std::begin(lhs.PolicyPerks), std::end(lhs.PolicyPerks), std::begin(rhs.PolicyPerks)) &&
		std::equal(std::begin(lhs.PositiveStatChangeSubstances), std::end(lhs.PositiveStatChangeSubstances), std::begin(rhs.PositiveStatChangeSubstances)) &&
		std::equal(std::begin(lhs.ResearchPerks), std::end(lhs.ResearchPerks), std::begin(rhs.ResearchPerks)) &&
		lhs.BuilderNPCScanToRevealData == rhs.BuilderNPCScanToRevealData &&
		std::equal(std::begin(lhs.TowerPowerRechargeTime), std::end(lhs.TowerPowerRechargeTime), std::begin(rhs.TowerPowerRechargeTime)) &&
		lhs.AutophageGifts == rhs.AutophageGifts &&
		lhs.AutophageProductionElementsSelectable == rhs.AutophageProductionElementsSelectable &&
		lhs.CustomJudgements == rhs.CustomJudgements &&
		lhs.GekGifts == rhs.GekGifts &&
		lhs.GekProductionElementsSelectable == rhs.GekProductionElementsSelectable &&
		lhs.Gifts == rhs.Gifts &&
		lhs.JobTypes == rhs.JobTypes &&
		lhs.Judgements == rhs.Judgements &&
		lhs.JudgementTextHashID == rhs.JudgementTextHashID &&
		lhs.KorvaxGifts == rhs.KorvaxGifts &&
		lhs.KorvaxProductionElementsSelectable == rhs.KorvaxProductionElementsSelectable &&
		lhs.MiniMissionFailJudgement == rhs.MiniMissionFailJudgement &&
		lhs.MiniMissionSuccessJudgement == rhs.MiniMissionSuccessJudgement &&
		lhs.ScanEventsThatPreventSentinelAlert == rhs.ScanEventsThatPreventSentinelAlert &&
		lhs.SettlementCostAutophage == rhs.SettlementCostAutophage &&
		lhs.SettlementCostGek == rhs.SettlementCostGek &&
		lhs.SettlementCostKorvax == rhs.SettlementCostKorvax &&
		lhs.SettlementCostVykeen == rhs.SettlementCostVykeen &&
		lhs.SettlementMiniExpeditionMissionID == rhs.SettlementMiniExpeditionMissionID &&
		lhs.TechGiftPerks == rhs.TechGiftPerks &&
		lhs.VykeenGifts == rhs.VykeenGifts &&
		lhs.VykeenProductionElementsSelectable == rhs.VykeenProductionElementsSelectable &&
		lhs.AlertCycleDurationInSeconds == rhs.AlertCycleDurationInSeconds &&
		lhs.BugAttackCycleDurationInSeconds == rhs.BugAttackCycleDurationInSeconds &&
		lhs.BuildingFreeUpgradeTimeInSeconds == rhs.BuildingFreeUpgradeTimeInSeconds &&
		lhs.BuildingUpgradeTimeInSeconds == rhs.BuildingUpgradeTimeInSeconds &&
		lhs.ProductionCycleDurationInSeconds == rhs.ProductionCycleDurationInSeconds &&
		lhs.ProductionSlotTimerOffsetInSeconds == rhs.ProductionSlotTimerOffsetInSeconds &&
		lhs.TowerRechargeTime == rhs.TowerRechargeTime &&
		std::equal(std::begin(lhs.PerkStatStrengthValues), std::end(lhs.PerkStatStrengthValues), std::begin(rhs.PerkStatStrengthValues)) &&
		std::equal(std::begin(lhs.JudgementSelectionWeights), std::end(lhs.JudgementSelectionWeights), std::begin(rhs.JudgementSelectionWeights)) &&
		std::equal(std::begin(lhs.InitialStatsMaxValues), std::end(lhs.InitialStatsMaxValues), std::begin(rhs.InitialStatsMaxValues)) &&
		std::equal(std::begin(lhs.InitialStatsMinValues), std::end(lhs.InitialStatsMinValues), std::begin(rhs.InitialStatsMinValues)) &&
		std::equal(std::begin(lhs.NormalisedStatBadThresholds), std::end(lhs.NormalisedStatBadThresholds), std::begin(rhs.NormalisedStatBadThresholds)) &&
		std::equal(std::begin(lhs.NormalisedStatGoodThresholds), std::end(lhs.NormalisedStatGoodThresholds), std::begin(rhs.NormalisedStatGoodThresholds)) &&
		std::equal(std::begin(lhs.StatProductivityContributionModifiers), std::end(lhs.StatProductivityContributionModifiers), std::begin(rhs.StatProductivityContributionModifiers)) &&
		std::equal(std::begin(lhs.StatsMaxValues), std::end(lhs.StatsMaxValues), std::begin(rhs.StatsMaxValues)) &&
		std::equal(std::begin(lhs.StatsMinValues), std::end(lhs.StatsMinValues), std::begin(rhs.StatsMinValues)) &&
		lhs.AlertUnitsPerCycleRateModifier == rhs.AlertUnitsPerCycleRateModifier &&
		lhs.BugAttackUnitsPerCycleRateModifier == rhs.BugAttackUnitsPerCycleRateModifier &&
		lhs.BuildingRevealCutsceneLength == rhs.BuildingRevealCutsceneLength &&
		lhs.DailyDebtPaymentModifier == rhs.DailyDebtPaymentModifier &&
		lhs.InitialBuildingCountMax == rhs.InitialBuildingCountMax &&
		lhs.InitialBuildingCountMin == rhs.InitialBuildingCountMin &&
		lhs.InitialDebtCycles == rhs.InitialDebtCycles &&
		lhs.JudgementSpecificRacePartyChance == rhs.JudgementSpecificRacePartyChance &&
		lhs.JudgementWaitTimeMax == rhs.JudgementWaitTimeMax &&
		lhs.JudgementWaitTimeMin == rhs.JudgementWaitTimeMin &&
		lhs.MaxInitialNegativePerksCount == rhs.MaxInitialNegativePerksCount &&
		lhs.MaxInitialPositivePerksCount == rhs.MaxInitialPositivePerksCount &&
		lhs.MaxNPCPopulation == rhs.MaxNPCPopulation &&
		lhs.MaxPerksCount == rhs.MaxPerksCount &&
		lhs.MinInitialNegativePerksCount == rhs.MinInitialNegativePerksCount &&
		lhs.MinInitialPositivePerksCount == rhs.MinInitialPositivePerksCount &&
		lhs.PopulationGrowthRatePerDayBad == rhs.PopulationGrowthRatePerDayBad &&
		lhs.PopulationGrowthRatePerDayGood == rhs.PopulationGrowthRatePerDayGood &&
		lhs.PopulationGrowthRatePerDayNeutral == rhs.PopulationGrowthRatePerDayNeutral &&
		lhs.PopulationGrowthRateThresholdBad == rhs.PopulationGrowthRateThresholdBad &&
		lhs.PopulationGrowthRateThresholdGood == rhs.PopulationGrowthRateThresholdGood &&
		lhs.ProductionBoostConversionRate == rhs.ProductionBoostConversionRate &&
		lhs.ProductUnitsPerCycleRateModifier == rhs.ProductUnitsPerCycleRateModifier &&
		lhs.SettlementEntryMessageDistance == rhs.SettlementEntryMessageDistance &&
		lhs.SettlementMiniExpeditionSuccessChance == rhs.SettlementMiniExpeditionSuccessChance &&
		lhs.SettlementMiniExpeditionTime == rhs.SettlementMiniExpeditionTime &&
		lhs.StartingPopulationScalar == rhs.StartingPopulationScalar &&
		lhs.SubstanceUnitsPerCycleRateModifier == rhs.SubstanceUnitsPerCycleRateModifier &&
		std::equal(std::begin(lhs.StatIsGoodWhenPositive), std::end(lhs.StatIsGoodWhenPositive), std::begin(rhs.StatIsGoodWhenPositive)) &&
		std::equal(std::begin(lhs.StatProductionIsNegativeWhenBad), std::end(lhs.StatProductionIsNegativeWhenBad), std::begin(rhs.StatProductionIsNegativeWhenBad)) &&
		lhs.DebugForceShowHiddenPerks == rhs.DebugForceShowHiddenPerks;
	}
};

//Dependency: GcSpaceStormData
//Dependency: GcMultitoolPoolData
//Dependency: VariableSizeString
struct GcSimulationGlobals
{
	NMS::VariableSizeString AbandonedSpaceStationFile;
	std::vector<NMS::VariableSizeString> AtlasStationAnomalies;
	std::vector<NMS::VariableSizeString> BlackHoleAnomalies;
	NMS::VariableSizeString BlackHoleTunnelFile;
	NMS::VariableSizeString HeavyAirAbandonedFreighter;
	NMS::VariableSizeString HeavyAirCave;
	NMS::VariableSizeString HeavyAirSpaceStormDefault;
	std::vector<NMS_GameComponents::GcSpaceStormData> HeavyAirSpaceStormList;
	NMS::VariableSizeString HeavyAirUnderwater;
	std::vector<NMS_GameComponents::GcMultitoolPoolData> MultitoolPool;
	NMS::VariableSizeString NexusExteriorFile;
	NMS::VariableSizeString NexusFile;
	NMS::VariableSizeString None;
	NMS::VariableSizeString PirateSystemSpaceStationFile;
	NMS::VariableSizeString PlaceMarkerFile;
	NMS::VariableSizeString PlacementDroneFile;
	NMS::VariableSizeString PlanetAtmosphereFile;
	NMS::VariableSizeString PlanetAtmosphereMaterialFile;
	NMS::VariableSizeString PlanetGasGiantAtmosphereFile;
	NMS::VariableSizeString PlanetGasGiantAtmosphereMaterialFile;
	NMS::VariableSizeString PlanetMaterialFile;
	NMS::VariableSizeString PlanetRingFile;
	NMS::VariableSizeString PlanetRingMaterialFile;
	std::vector<NMS::VariableSizeString> PlanetTerrainMaterials;
	NMS::VariableSizeString PortalStoryTunnelFile;
	NMS::VariableSizeString PortalTunnelFile;
	std::vector<NMS::VariableSizeString> PrefetchMaterialResources;
	std::vector<NMS::VariableSizeString> PrefetchScenegraphResources;
	std::vector<NMS::VariableSizeString> PrefetchTextureResources;
	NMS::VariableSizeString SpaceStationFile;
	NMS::VariableSizeString StartingSceneFile;
	NMS::VariableSizeString TeleportTunnelFile;
	NMS::VariableSizeString WarpTunnelFile;
	uint64_t ProceduralBuildingsGenerationSeed;
	float GasGiantFadeDistanceEnd;
	float GasGiantFadeDistanceStart;
	float GasGiantFlowSpeed;
	float GasGiantFlowStrength;
	float WarpTunnelScale;

	friend bool operator==(const GcSimulationGlobals& lhs, const GcSimulationGlobals& rhs) 
	{
		return lhs.AbandonedSpaceStationFile == rhs.AbandonedSpaceStationFile &&
		lhs.AtlasStationAnomalies == rhs.AtlasStationAnomalies &&
		lhs.BlackHoleAnomalies == rhs.BlackHoleAnomalies &&
		lhs.BlackHoleTunnelFile == rhs.BlackHoleTunnelFile &&
		lhs.HeavyAirAbandonedFreighter == rhs.HeavyAirAbandonedFreighter &&
		lhs.HeavyAirCave == rhs.HeavyAirCave &&
		lhs.HeavyAirSpaceStormDefault == rhs.HeavyAirSpaceStormDefault &&
		lhs.HeavyAirSpaceStormList == rhs.HeavyAirSpaceStormList &&
		lhs.HeavyAirUnderwater == rhs.HeavyAirUnderwater &&
		lhs.MultitoolPool == rhs.MultitoolPool &&
		lhs.NexusExteriorFile == rhs.NexusExteriorFile &&
		lhs.NexusFile == rhs.NexusFile &&
		lhs.None == rhs.None &&
		lhs.PirateSystemSpaceStationFile == rhs.PirateSystemSpaceStationFile &&
		lhs.PlaceMarkerFile == rhs.PlaceMarkerFile &&
		lhs.PlacementDroneFile == rhs.PlacementDroneFile &&
		lhs.PlanetAtmosphereFile == rhs.PlanetAtmosphereFile &&
		lhs.PlanetAtmosphereMaterialFile == rhs.PlanetAtmosphereMaterialFile &&
		lhs.PlanetGasGiantAtmosphereFile == rhs.PlanetGasGiantAtmosphereFile &&
		lhs.PlanetGasGiantAtmosphereMaterialFile == rhs.PlanetGasGiantAtmosphereMaterialFile &&
		lhs.PlanetMaterialFile == rhs.PlanetMaterialFile &&
		lhs.PlanetRingFile == rhs.PlanetRingFile &&
		lhs.PlanetRingMaterialFile == rhs.PlanetRingMaterialFile &&
		lhs.PlanetTerrainMaterials == rhs.PlanetTerrainMaterials &&
		lhs.PortalStoryTunnelFile == rhs.PortalStoryTunnelFile &&
		lhs.PortalTunnelFile == rhs.PortalTunnelFile &&
		lhs.PrefetchMaterialResources == rhs.PrefetchMaterialResources &&
		lhs.PrefetchScenegraphResources == rhs.PrefetchScenegraphResources &&
		lhs.PrefetchTextureResources == rhs.PrefetchTextureResources &&
		lhs.SpaceStationFile == rhs.SpaceStationFile &&
		lhs.StartingSceneFile == rhs.StartingSceneFile &&
		lhs.TeleportTunnelFile == rhs.TeleportTunnelFile &&
		lhs.WarpTunnelFile == rhs.WarpTunnelFile &&
		lhs.ProceduralBuildingsGenerationSeed == rhs.ProceduralBuildingsGenerationSeed &&
		lhs.GasGiantFadeDistanceEnd == rhs.GasGiantFadeDistanceEnd &&
		lhs.GasGiantFadeDistanceStart == rhs.GasGiantFadeDistanceStart &&
		lhs.GasGiantFlowSpeed == rhs.GasGiantFlowSpeed &&
		lhs.GasGiantFlowStrength == rhs.GasGiantFlowStrength &&
		lhs.WarpTunnelScale == rhs.WarpTunnelScale;
	}
};

//Dependency: GcPlanetCloudProperties
//Dependency: GcPlanetWeatherColourData
//Dependency: GcPlanetSkyProperties
//Dependency: GcFogProperties
//Dependency: GcPhotoModeAdjustData
//Dependency: GcSpaceSkyColours
//Dependency: GcSpaceSkyProperties
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: Vector2f
struct GcSkyGlobals
{
	NMS_GameComponents::GcPlanetSkyProperties PlanetGasGiantProperties;
	NMS_GameComponents::GcPlanetSkyProperties PlanetPrimeProperties;
	NMS_GameComponents::GcPlanetSkyProperties PlanetProperties;
	NMS_GameComponents::GcFogProperties AbandonedFreighterFog;
	NMS_GameComponents::GcPlanetWeatherColourData NightSkyColours;
	NMS_GameComponents::GcSpaceSkyProperties SpaceSkyMax;
	NMS_GameComponents::GcSpaceSkyProperties SpaceSkyMin;
	NMS::Colour AbandonedFreighterFogColour;
	NMS::Colour AsteroidColour;
	NMS::Colour DayLightColour;
	NMS::Colour DuskLightColour;
	NMS::Colour HeavyAirColour1;
	NMS::Colour HeavyAirColour2;
	NMS::Colour NightFogColour;
	NMS::Colour NightHeightFogColour;
	NMS::Colour NightHorizonColour;
	NMS::Colour NightLightColour;
	NMS::Colour NightSkyColour;
	NMS::Vector3f SleepSunFromSettingsPos;
	NMS::Colour SpaceLightColour;
	NMS::Vector3f SunPosition;
	NMS::Vector3f SunRotationAxis;
	NMS_GameComponents::GcPlanetCloudProperties PlanetCloudsMax;
	NMS_GameComponents::GcPlanetCloudProperties PlanetCloudsMin;
	std::vector<NMS_GameComponents::GcSpaceSkyColours> SpaceSkyColours;
	NMS_GameComponents::GcPhotoModeAdjustData CloudAdjust;
	NMS_GameComponents::GcPhotoModeAdjustData FogAdjust;
	NMS_GameComponents::GcPhotoModeAdjustData VignetteAdjust;
	NMS::Vector2f PhotoModeVignette;
	float AmbientFactor;
	float BinaryStarChance;
	float CloudColourH;
	float CloudColourS;
	float CloudColourV;
	float CloudCoverSmoothTime;
	float CloudRatioSmoothTime;
	float CreatureStormThreshold;
	int32_t DayLength;
	float DayLengthSpookMultiplier;
	float ExtremeAudioLevel;
	float ForceFlightStrength;
	float ForceNightBlendValue;
	float ForceStormStrength;
	float FreshStartTimeOfDay;
	float HeavyAirScale;
	float InFlightStormStrength;
	float LowFlightFogThreshold;
	float MaxCloudCover;
	float MaxColourS;
	float MaxColourV;
	float MaxFogSaturation;
	float MaxFogValue;
	float MaxNightFade;
	float MaxRainWetness;
	float MaxSaturation;
	float MaxStormCloudCover;
	float MaxStormLengthHigh;
	float MaxStormLengthLow;
	float MaxSunsetAtmosphereFade;
	float MaxSunsetColourFade;
	float MaxSunsetFade;
	float MaxSunsetFogFade;
	float MaxSunsetHorizonFade;
	float MaxSunsetPosFade;
	float MaxTimeBetweenStormsExtremeFallback;
	float MaxTimeBetweenStormsHigh;
	float MaxTimeBetweenStormsLow;
	float MaxValue;
	float MidColourH;
	float MidColourS;
	float MidColourV;
	float MinColourS;
	float MinColourV;
	float MinFogSaturation;
	float MinFogValue;
	float MinNightFade;
	float MinSaturation;
	float MinStormLengthHigh;
	float MinStormLengthLow;
	float MinSunsetAtmosphereFade;
	float MinSunsetColourFade;
	float MinSunsetFade;
	float MinSunsetFogFade;
	float MinSunsetHorizonFade;
	float MinSunsetPosFade;
	float MinTimeBetweenStormsExtremeFallback;
	float MinTimeBetweenStormsHigh;
	float MinTimeBetweenStormsLow;
	float MinValue;
	float MulticolourH;
	float NebulaColour1S;
	float NebulaColour1V;
	float NebulaColour2S;
	float NebulaColour2V;
	float NebulaColourH;
	float NightHorizonBlendMax;
	float NightHorizonBlendMin;
	float NightLightBlendMax;
	float NightLightBlendMin;
	float NightSkyBlendMax;
	float NightSkyBlendMin;
	float NightThreshold;
	float NoAtmosphereColourMax;
	float NoAtmosphereColourStrength;
	float NoAtmosphereFogMax;
	float NoAtmosphereFogStrength;
	float PhotoModeMacroMaxDOFAngle;
	float PhotoModeMacroMaxDOFAperture;
	float PhotoModeSunSpeed;
	float RainbowAlpha;
	float RainbowDistance;
	float RainbowFadeWidth;
	float RainbowScale;
	float RainbowStormAlpha;
	float RainbowWidth;
	float RainWetnessFadeInTime;
	float RainWetnessFadeOutTime;
	float SpaceAtmosphereThickness;
	float StormAudioLevel;
	float StormCloudBottomColourMaxBlend;
	float StormCloudBottomColourMinBlend;
	float StormCloudSmoothTime;
	float StormCloudTopColourMaxBlend;
	float StormCloudTopColourMinBlend;
	float StormScreenFilterDistance;
	float StormScreenFilterFadeTime;
	float StormTransitionTime;
	float StormWarningTime;
	float SunClampAngle;
	float TakeoffStormThreshold;
	float TernaryStarChance;
	float ToFlightFadeTime;
	float ToFootFadeTime;
	float WaterHeavyAirAlpha;
	float WeatherBloomGain;
	float WeatherBloomGainSpeed;
	float WeatherBloomImpulseSpeed;
	float WeatherBloomThreshold;
	float WeatherBloomThresholdSpeed;
	float WeatherFilterSpaceTransitionChangeTime;
	NMS_Toolkit::TkCurveType DoFAdjustMagnitudeMaxCurve;
	bool ForceFlightSetting;
	bool ForceNightBlend;
	bool ForceStormSetting;
	bool SleepSunFromSettings;
	bool UpdateWeatherWhenSunLocked;
	NMS_Toolkit::TkCurveType WeatherBloomCurve;

	friend bool operator==(const GcSkyGlobals& lhs, const GcSkyGlobals& rhs) 
	{
		return lhs.PlanetGasGiantProperties == rhs.PlanetGasGiantProperties &&
		lhs.PlanetPrimeProperties == rhs.PlanetPrimeProperties &&
		lhs.PlanetProperties == rhs.PlanetProperties &&
		lhs.AbandonedFreighterFog == rhs.AbandonedFreighterFog &&
		lhs.NightSkyColours == rhs.NightSkyColours &&
		lhs.SpaceSkyMax == rhs.SpaceSkyMax &&
		lhs.SpaceSkyMin == rhs.SpaceSkyMin &&
		lhs.AbandonedFreighterFogColour == rhs.AbandonedFreighterFogColour &&
		lhs.AsteroidColour == rhs.AsteroidColour &&
		lhs.DayLightColour == rhs.DayLightColour &&
		lhs.DuskLightColour == rhs.DuskLightColour &&
		lhs.HeavyAirColour1 == rhs.HeavyAirColour1 &&
		lhs.HeavyAirColour2 == rhs.HeavyAirColour2 &&
		lhs.NightFogColour == rhs.NightFogColour &&
		lhs.NightHeightFogColour == rhs.NightHeightFogColour &&
		lhs.NightHorizonColour == rhs.NightHorizonColour &&
		lhs.NightLightColour == rhs.NightLightColour &&
		lhs.NightSkyColour == rhs.NightSkyColour &&
		lhs.SleepSunFromSettingsPos == rhs.SleepSunFromSettingsPos &&
		lhs.SpaceLightColour == rhs.SpaceLightColour &&
		lhs.SunPosition == rhs.SunPosition &&
		lhs.SunRotationAxis == rhs.SunRotationAxis &&
		lhs.PlanetCloudsMax == rhs.PlanetCloudsMax &&
		lhs.PlanetCloudsMin == rhs.PlanetCloudsMin &&
		lhs.SpaceSkyColours == rhs.SpaceSkyColours &&
		lhs.CloudAdjust == rhs.CloudAdjust &&
		lhs.FogAdjust == rhs.FogAdjust &&
		lhs.VignetteAdjust == rhs.VignetteAdjust &&
		lhs.PhotoModeVignette == rhs.PhotoModeVignette &&
		lhs.AmbientFactor == rhs.AmbientFactor &&
		lhs.BinaryStarChance == rhs.BinaryStarChance &&
		lhs.CloudColourH == rhs.CloudColourH &&
		lhs.CloudColourS == rhs.CloudColourS &&
		lhs.CloudColourV == rhs.CloudColourV &&
		lhs.CloudCoverSmoothTime == rhs.CloudCoverSmoothTime &&
		lhs.CloudRatioSmoothTime == rhs.CloudRatioSmoothTime &&
		lhs.CreatureStormThreshold == rhs.CreatureStormThreshold &&
		lhs.DayLength == rhs.DayLength &&
		lhs.DayLengthSpookMultiplier == rhs.DayLengthSpookMultiplier &&
		lhs.ExtremeAudioLevel == rhs.ExtremeAudioLevel &&
		lhs.ForceFlightStrength == rhs.ForceFlightStrength &&
		lhs.ForceNightBlendValue == rhs.ForceNightBlendValue &&
		lhs.ForceStormStrength == rhs.ForceStormStrength &&
		lhs.FreshStartTimeOfDay == rhs.FreshStartTimeOfDay &&
		lhs.HeavyAirScale == rhs.HeavyAirScale &&
		lhs.InFlightStormStrength == rhs.InFlightStormStrength &&
		lhs.LowFlightFogThreshold == rhs.LowFlightFogThreshold &&
		lhs.MaxCloudCover == rhs.MaxCloudCover &&
		lhs.MaxColourS == rhs.MaxColourS &&
		lhs.MaxColourV == rhs.MaxColourV &&
		lhs.MaxFogSaturation == rhs.MaxFogSaturation &&
		lhs.MaxFogValue == rhs.MaxFogValue &&
		lhs.MaxNightFade == rhs.MaxNightFade &&
		lhs.MaxRainWetness == rhs.MaxRainWetness &&
		lhs.MaxSaturation == rhs.MaxSaturation &&
		lhs.MaxStormCloudCover == rhs.MaxStormCloudCover &&
		lhs.MaxStormLengthHigh == rhs.MaxStormLengthHigh &&
		lhs.MaxStormLengthLow == rhs.MaxStormLengthLow &&
		lhs.MaxSunsetAtmosphereFade == rhs.MaxSunsetAtmosphereFade &&
		lhs.MaxSunsetColourFade == rhs.MaxSunsetColourFade &&
		lhs.MaxSunsetFade == rhs.MaxSunsetFade &&
		lhs.MaxSunsetFogFade == rhs.MaxSunsetFogFade &&
		lhs.MaxSunsetHorizonFade == rhs.MaxSunsetHorizonFade &&
		lhs.MaxSunsetPosFade == rhs.MaxSunsetPosFade &&
		lhs.MaxTimeBetweenStormsExtremeFallback == rhs.MaxTimeBetweenStormsExtremeFallback &&
		lhs.MaxTimeBetweenStormsHigh == rhs.MaxTimeBetweenStormsHigh &&
		lhs.MaxTimeBetweenStormsLow == rhs.MaxTimeBetweenStormsLow &&
		lhs.MaxValue == rhs.MaxValue &&
		lhs.MidColourH == rhs.MidColourH &&
		lhs.MidColourS == rhs.MidColourS &&
		lhs.MidColourV == rhs.MidColourV &&
		lhs.MinColourS == rhs.MinColourS &&
		lhs.MinColourV == rhs.MinColourV &&
		lhs.MinFogSaturation == rhs.MinFogSaturation &&
		lhs.MinFogValue == rhs.MinFogValue &&
		lhs.MinNightFade == rhs.MinNightFade &&
		lhs.MinSaturation == rhs.MinSaturation &&
		lhs.MinStormLengthHigh == rhs.MinStormLengthHigh &&
		lhs.MinStormLengthLow == rhs.MinStormLengthLow &&
		lhs.MinSunsetAtmosphereFade == rhs.MinSunsetAtmosphereFade &&
		lhs.MinSunsetColourFade == rhs.MinSunsetColourFade &&
		lhs.MinSunsetFade == rhs.MinSunsetFade &&
		lhs.MinSunsetFogFade == rhs.MinSunsetFogFade &&
		lhs.MinSunsetHorizonFade == rhs.MinSunsetHorizonFade &&
		lhs.MinSunsetPosFade == rhs.MinSunsetPosFade &&
		lhs.MinTimeBetweenStormsExtremeFallback == rhs.MinTimeBetweenStormsExtremeFallback &&
		lhs.MinTimeBetweenStormsHigh == rhs.MinTimeBetweenStormsHigh &&
		lhs.MinTimeBetweenStormsLow == rhs.MinTimeBetweenStormsLow &&
		lhs.MinValue == rhs.MinValue &&
		lhs.MulticolourH == rhs.MulticolourH &&
		lhs.NebulaColour1S == rhs.NebulaColour1S &&
		lhs.NebulaColour1V == rhs.NebulaColour1V &&
		lhs.NebulaColour2S == rhs.NebulaColour2S &&
		lhs.NebulaColour2V == rhs.NebulaColour2V &&
		lhs.NebulaColourH == rhs.NebulaColourH &&
		lhs.NightHorizonBlendMax == rhs.NightHorizonBlendMax &&
		lhs.NightHorizonBlendMin == rhs.NightHorizonBlendMin &&
		lhs.NightLightBlendMax == rhs.NightLightBlendMax &&
		lhs.NightLightBlendMin == rhs.NightLightBlendMin &&
		lhs.NightSkyBlendMax == rhs.NightSkyBlendMax &&
		lhs.NightSkyBlendMin == rhs.NightSkyBlendMin &&
		lhs.NightThreshold == rhs.NightThreshold &&
		lhs.NoAtmosphereColourMax == rhs.NoAtmosphereColourMax &&
		lhs.NoAtmosphereColourStrength == rhs.NoAtmosphereColourStrength &&
		lhs.NoAtmosphereFogMax == rhs.NoAtmosphereFogMax &&
		lhs.NoAtmosphereFogStrength == rhs.NoAtmosphereFogStrength &&
		lhs.PhotoModeMacroMaxDOFAngle == rhs.PhotoModeMacroMaxDOFAngle &&
		lhs.PhotoModeMacroMaxDOFAperture == rhs.PhotoModeMacroMaxDOFAperture &&
		lhs.PhotoModeSunSpeed == rhs.PhotoModeSunSpeed &&
		lhs.RainbowAlpha == rhs.RainbowAlpha &&
		lhs.RainbowDistance == rhs.RainbowDistance &&
		lhs.RainbowFadeWidth == rhs.RainbowFadeWidth &&
		lhs.RainbowScale == rhs.RainbowScale &&
		lhs.RainbowStormAlpha == rhs.RainbowStormAlpha &&
		lhs.RainbowWidth == rhs.RainbowWidth &&
		lhs.RainWetnessFadeInTime == rhs.RainWetnessFadeInTime &&
		lhs.RainWetnessFadeOutTime == rhs.RainWetnessFadeOutTime &&
		lhs.SpaceAtmosphereThickness == rhs.SpaceAtmosphereThickness &&
		lhs.StormAudioLevel == rhs.StormAudioLevel &&
		lhs.StormCloudBottomColourMaxBlend == rhs.StormCloudBottomColourMaxBlend &&
		lhs.StormCloudBottomColourMinBlend == rhs.StormCloudBottomColourMinBlend &&
		lhs.StormCloudSmoothTime == rhs.StormCloudSmoothTime &&
		lhs.StormCloudTopColourMaxBlend == rhs.StormCloudTopColourMaxBlend &&
		lhs.StormCloudTopColourMinBlend == rhs.StormCloudTopColourMinBlend &&
		lhs.StormScreenFilterDistance == rhs.StormScreenFilterDistance &&
		lhs.StormScreenFilterFadeTime == rhs.StormScreenFilterFadeTime &&
		lhs.StormTransitionTime == rhs.StormTransitionTime &&
		lhs.StormWarningTime == rhs.StormWarningTime &&
		lhs.SunClampAngle == rhs.SunClampAngle &&
		lhs.TakeoffStormThreshold == rhs.TakeoffStormThreshold &&
		lhs.TernaryStarChance == rhs.TernaryStarChance &&
		lhs.ToFlightFadeTime == rhs.ToFlightFadeTime &&
		lhs.ToFootFadeTime == rhs.ToFootFadeTime &&
		lhs.WaterHeavyAirAlpha == rhs.WaterHeavyAirAlpha &&
		lhs.WeatherBloomGain == rhs.WeatherBloomGain &&
		lhs.WeatherBloomGainSpeed == rhs.WeatherBloomGainSpeed &&
		lhs.WeatherBloomImpulseSpeed == rhs.WeatherBloomImpulseSpeed &&
		lhs.WeatherBloomThreshold == rhs.WeatherBloomThreshold &&
		lhs.WeatherBloomThresholdSpeed == rhs.WeatherBloomThresholdSpeed &&
		lhs.WeatherFilterSpaceTransitionChangeTime == rhs.WeatherFilterSpaceTransitionChangeTime &&
		lhs.DoFAdjustMagnitudeMaxCurve == rhs.DoFAdjustMagnitudeMaxCurve &&
		lhs.ForceFlightSetting == rhs.ForceFlightSetting &&
		lhs.ForceNightBlend == rhs.ForceNightBlend &&
		lhs.ForceStormSetting == rhs.ForceStormSetting &&
		lhs.SleepSunFromSettings == rhs.SleepSunFromSettings &&
		lhs.UpdateWeatherWhenSunLocked == rhs.UpdateWeatherWhenSunLocked &&
		lhs.WeatherBloomCurve == rhs.WeatherBloomCurve;
	}
};

//Dependency: GcScanEffectData
//Dependency: GcShipDataNames
//Dependency: GcPlayerSpaceshipControlData
//Dependency: GcPlayerSpaceshipAim
//Dependency: GcPlayerSpaceshipClassBonuses
//Dependency: GcSpaceshipAvoidanceData
//Dependency: GcPlayerStickData
//Dependency: GcPlayerSpaceshipWarpData
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcSpaceshipGlobals
{
	NMS_GameComponents::GcScanEffectData ShieldEffectScanData;
	NMS::Colour AlarmLightColour;
	NMS::Colour AlarmLightColourHostile;
	NMS::Vector3f AtmosphereLightOffset;
	NMS::Vector3f CockpitScale;
	NMS::Colour DamageLightColour;
	NMS::Colour DamageLightColourShield;
	NMS::Vector3f DamageLightOffsetLeft;
	NMS::Vector3f DamageLightOffsetRight;
	NMS::Vector3f DamageLightOffsetTop;
	NMS::Vector3f DefaultCentreOffset;
	NMS::Vector3f DefaultCentreOffsetDropship;
	NMS::Vector3f DefaultCentreOffsetRoyal;
	NMS::Vector3f DefaultCentreOffsetSail;
	NMS::Vector3f DefaultCentreOffsetScientific;
	NMS::Colour DirectionDockingInRangeColour;
	NMS::Colour DirectionDockingOutRangeColour;
	NMS::Colour GroundEffectBuildingColour;
	NMS::Colour GroundEffectWaterColour;
	NMS::Vector3f GunOffset3rdPersonLeft;
	NMS::Vector3f GunOffset3rdPersonRight;
	NMS::Vector3f GunOffsetLeft;
	NMS::Vector3f GunOffsetLeft2;
	NMS::Vector3f GunOffsetRight;
	NMS::Vector3f GunOffsetRight2;
	NMS::Vector3f HandControllerDeadZone;
	NMS::Vector3f HandControllerExtents;
	NMS::Vector3f HandControllerValueMultiplier;
	NMS::Vector3f HandControllerValueMultiplierSpace;
	NMS::Colour LandingEffectSpaceColourOverride;
	NMS::Colour MuzzleLightColour;
	NMS::Vector3f PostCollisionAngularFactor;
	NMS::Vector3f StickAnimationDamping;
	NMS::Colour TargetLockDangerColour;
	NMS::Colour TargetLockPassiveColour;
	std::vector<NMS::Vector3f> AlarmLightOffsets;
	std::vector<NMS_GameComponents::GcPlayerSpaceshipAim> GunAimArray;
	std::vector<NMS_GameComponents::GcPlayerSpaceshipAim> LaserAimArray;
	NMS::NMSString0x10 SailShipCoreTechID;
	std::vector<NMS::VariableSizeString> ShipModels;
	NMS::NMSString0x10 WaterEffectID;
	NMS::NMSString0x10 WaterJetHoverEffectID;
	NMS::NMSString0x10 WaterJetLandingEffectID;
	NMS::NMSString0x10 WaterJetTakeoffEffectID;
	NMS_GameComponents::GcPlayerSpaceshipControlData Control;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHeavy;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHeavyHover;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHover;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlLight;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusA;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusB;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusC;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusS;
	NMS_GameComponents::GcSpaceshipAvoidanceData Avoidance;
	NMS_GameComponents::GcSpaceshipAvoidanceData AvoidanceLowAltitude;
	NMS_GameComponents::GcPlayerStickData StickData;
	NMS_GameComponents::GcPlayerSpaceshipAim MissileAim;
	NMS_GameComponents::GcPlayerSpaceshipWarpData Warp;
	NMS_Toolkit::TkHitCurveData DamageLightCurve;
	NMS_Toolkit::TkHitCurveData MuzzleLightCurve;
	NMS::Vector2f DeathSpinPitch;
	NMS::Vector2f DeathSpinRoll;
	float _3rdPersonAngleMinSpeed;
	float _3rdPersonAngleSpeedRangePitch;
	float _3rdPersonAngleSpeedRangeYaw;
	float _3rdPersonAngleSpringTime;
	float _3rdPersonAvoidanceAdjustPitchFactor;
	float _3rdPersonAvoidanceAdjustRollFactor;
	float _3rdPersonAvoidanceAdjustYawFactor;
	float _3rdPersonFlashDuration;
	float _3rdPersonFlashIntensity;
	float _3rdPersonHeightForceAdjustPitchFactor;
	float _3rdPersonLowHeightMax;
	float _3rdPersonLowHeightMin;
	float _3rdPersonLowHeightOffsetVertRotationY;
	float _3rdPersonLowHeightOffsetY;
	float _3rdPersonLowHeightSpringTime;
	float _3rdPersonPitchAngle;
	float _3rdPersonRollAngle;
	float _3rdPersonRollAngleAlien;
	float _3rdPersonRollAngleDropship;
	float _3rdPersonRollAngleScience;
	float _3rdPersonTransitionTime;
	float _3rdPersonUpOffsetRollChangeSpeed;
	float _3rdPersonWarpWanderSpring;
	float _3rdPersonWarpWanderStartTime;
	float _3rdPersonWarpWanderTimeX;
	float _3rdPersonWarpWanderTimeY;
	float _3rdPersonWarpWanderTimeZ;
	float _3rdPersonWarpXWander;
	float _3rdPersonWarpYWander;
	float _3rdPersonWarpZWander;
	float _3rdPersonYawAngle;
	float _3rdPersonYawAngleLateralExtra;
	float AcrobaticLowFlightLevel;
	float AimCritAngle;
	float AimCritBehindAngle;
	float AimCritMinFwdAngle;
	float AimFoVBoost;
	float AimFoVBoostTime;
	float AimFoVBoostTimeAuto;
	float AimMaxAutoAngle;
	float AimSpeedTrackDistance;
	float AimSpeedTrackForce;
	float AimTurnSlower;
	float AlarmLastHitTime;
	float AlarmLightIntensity;
	float AlarmLightIntensityHostile;
	float AlarmRate;
	float AlarmRateHostileMax;
	float AlarmRateHostileMin;
	float AngularDamping;
	float AnomalyStationMaxApproachSpeed;
	float AsteroidHitAngle;
	float AsteroidHitAngleBoosting;
	float AtmosphereAngle;
	float AtmosphereCombatHeight;
	float AtmosphereLightIntensity;
	float AtmosphereSpeed;
	float AutoLevelMaxAngle;
	float AutoLevelMaxPitchAngle;
	float AutoLevelMinAngle;
	float AutoLevelMinPitchAngle;
	float AutoLevelPitchCorrectMargin;
	float AutoLevelWaterAngle;
	float AutoLevelWaterMargin;
	float AutoLevelWaterTorque;
	float AutoPilotAlignStrength;
	float AutoPilotCallAngle;
	float AutoPilotCallAngleGhost;
	float AutoPilotCallAngleVertical;
	float AutoPilotCallAngleVerticalGhost;
	float AutoPilotCallDistance;
	float AutoPilotCallDistanceGhost;
	float AutoPilotCallDistanceSpacePOI;
	float AutoPilotPositionAlignStrength;
	float AutoPilotSmallShipAlignStrength;
	float AvoidanceDistancePower;
	float AvoidancePower;
	float BoostChargeRate;
	float BoostNoAsteroidRadius;
	float CameraPostWarpFov;
	float CameraPostWarpFovTime;
	float CockpitDriftAngle;
	float CockpitDriftAngleHmd;
	float CockpitExitAnimMul;
	float CockpitExitAnimOffset;
	float CockpitExitAnimTime;
	float CockpitPitchCorrectAngle;
	float CockpitPitchCorrectAngleHmd;
	float CockpitRollAngle;
	float CockpitRollAngleExtra;
	float CockpitRollAngleHmd;
	float CockpitRollMultiplierCentre;
	float CockpitRollMultiplierOpposite;
	float CockpitRollTime;
	float CollisionAlignStrength;
	float CollisionAsteroidDamp;
	float CollisionDeflectDamping;
	float CollisionDeflectForce;
	float CollisionDeflectNormalFactor;
	float CollisionDeflectTime;
	float CollisionDistance;
	float CollisionDistanceAsteroid;
	float CollisionDistanceAsteroidSide;
	float CollisionDistanceGround;
	float CollisionDistanceSpaceships;
	float CollisionGroundDamp;
	float CollisionRadiusMultiplier;
	float CollisionSpeedDamageAmount;
	float CombatBoostMultiplier;
	float CombatBoostTurnDamp;
	float ContrailDefaultAlpha;
	float ContrailSpeedDamping;
	float CruiseForce;
	float CruiseHeight;
	float CruiseHeightRange;
	float CruiseOffAngle;
	float CruiseOffAngleRange;
	float DamageFlashMin;
	float DamageFlashScale;
	float DamageLightIntensity;
	float DamageMaxHitTime;
	float DamageMinHitTime;
	float DamageMinWoundTime;
	float DefaultTrailInitialSpeed;
	float DefaultTrailMinForwardSpeed;
	float DefaultTrailSpeedDamping;
	float DeflectAlignTimeMax;
	float DeflectAlignTimeMin;
	float DeflectDistance;
	float DirectionBrakeVerticalMultiplier;
	float DirectionBrakeVRBoost;
	float DirectionDockingAlignmentAngle;
	float DirectionDockingAngle;
	float DirectionDockingCircleOffset;
	float DirectionDockingCircleOffsetExtra;
	float DirectionDockingCircleRadius;
	float DirectionDockingCircleRadiusExtra;
	float DirectionDockingCircleWidth;
	float DirectionDockingIndicatorAngleRange;
	float DirectionDockingIndicatorClearAngleRange;
	float DirectionDockingIndicatorMaxHeight;
	float DirectionDockingIndicatorMinHeight;
	float DirectionDockingIndicatorRange;
	float DirectionDockingIndicatorSpeed;
	float DirectionDockingInfoRange;
	float DirectionDockTime;
	float DistanceFromShipToAllowSpawningOnFreighter;
	float DockingApproachActiveRange;
	float DockingApproachBrakeHmdMod;
	float DockingApproachRollHmdMod;
	float DockingApproachSpeedHmdMod;
	float DockingRotateSpeed;
	float DockingRotateSpeedVR;
	float DrawLineLockTargetLineWidth;
	float DriftEffectIntensity;
	float DriftSpring;
	float DriftTurnBrakeMultiplier;
	float DriftTurnStrengthMultiplier;
	float DroneAlertAngle;
	float DroneAlertRange;
	float DroneAlignUpTime;
	float DroneDustHeight;
	float DroneHeightAdjust;
	float DroneMinHeight;
	float DroneMoveArrivedRange;
	float DronePatrolRadius;
	float DronePatrolTime;
	float DronePlanetAttackMinRange;
	float DronePlanetAttackRange;
	float DroneShootTime;
	float DroneWarpMaxForce;
	float DroneWarpMinForce;
	float DroneWarpTime;
	float EjectAnimSpeedFactor;
	float EjectAnimSwitchPoint;
	float EngineEffectsThrustContribution;
	float EngineJetLightIntensityMultiplier;
	float ExhaustSpeed;
	float ExplorerTakeOffMod;
	float FighterTakeOffMod;
	float FreighterApproachCombatDistanceMax;
	float FreighterApproachCombatDistanceMin;
	float FreighterApproachCombatMinSpeedFactor;
	float FreighterApproachDistanceMax;
	float FreighterApproachDistanceMin;
	float FreighterApproachExtraMargin;
	float FreighterApproachExtraMarginCombat;
	float FreighterApproachExtraMarginPirate;
	float FreighterApproachSpeedDamper;
	float FreighterBattleIgnoreFriendlyFireDistance;
	float FreighterBattleRangeBoost;
	float FreighterCombatBoostMul;
	float FreighterCombatSpeedMul;
	float FreighterSpeed;
	float FrigateTargetLockRange;
	float GravityDropForce;
	float GravityDropMaxForceHeight;
	float GravityDropMaxHeight;
	float GravityDropMinHeight;
	float GroundHeightBrakeMultiplier;
	float GroundHeightDownSpeedMultiplier;
	float GroundHeightHard;
	float GroundHeightHardHorizontal;
	float GroundHeightHardOverWater;
	float GroundHeightHardTimeMax;
	float GroundHeightHardTimeMin;
	int32_t GroundHeightNumRays;
	float GroundHeightPostCollisionDamper;
	float GroundHeightPostCollisionMultiplier;
	float GroundHeightPostCollisionMultiplierTime;
	float GroundHeightSmoothTime;
	float GroundHeightSoft;
	float GroundHeightSoftForce;
	float GroundHeightSoftHorizontal;
	float GroundHeightSpeedAngle;
	float GroundHeightSpeedAngleRange;
	float GroundHeightSpeedLength;
	float GroundNearEffectBuildingFade;
	float GroundNearEffectHeight;
	float GroundNearEffectLightFactor;
	float GroundNearEffectNormalOffset;
	float GroundNearEffectRange;
	float GroundNearEffectWaterLightFactor;
	float GroundWaterSpeedFactor;
	int32_t GunAimLevel;
	int32_t GunAmmoMultiplier;
	float GunOffset3rdPersonMultiplier;
	float HandControllerActiveBlendMinTime;
	float HandControllerActiveBlendTime;
	float HandControllerDirOffsetAngle;
	float HandControllerDirOffsetAngleMove;
	float HandControllerThrottleDeadZone;
	float HandControllerThrottleDistance;
	float HandControllerThrottleRange;
	float HandControllerXReorientation;
	float HandControllerXReorientationMove;
	float HandControllerZReorientation;
	float HandControllerZReorientationMove;
	float HaulerTakeOffMod;
	int32_t HitAsteroidDamage;
	float HoverAlignTime;
	float HoverAlignTimeAlt;
	float HoverBrakeStrength;
	float HoverHeightFactor;
	float HoverLandManeuvreBrake;
	float HoverLandManeuvreTimeHmdMax;
	float HoverLandManeuvreTimeHmdMin;
	float HoverLandManeuvreTimeMax;
	float HoverLandManeuvreTimeMin;
	float HoverLandManeuvreTimeWaterMultiplier;
	float HoverLandReachedDistance;
	float HoverLandReachedMinTime;
	float HoverMaxSpeed;
	float HoverMinSpeed;
	float HoverSpeedFactor;
	float HoverStopTime;
	float HoverTakeoffHeight;
	float HoverTime;
	float HoverTimeAlt;
	float HUDBoostUpgradeMultiplier;
	float KBThrustSmoothTime;
	float LandGroundTakeOffTime;
	float LandHeightThreshold;
	float LandingAreaFloorOffset;
	float LandingAreaRadius;
	float LandingButtonMinTime;
	float LandingCheckBuildingRadiusFactor;
	int32_t LandingCost;
	float LandingDirectionalSideOffsetFactor;
	float LandingHelperMinAngle;
	float LandingHelperRollTime;
	float LandingHelperTurnTime;
	float LandingHoverOffset;
	float LandingMargin;
	float LandingMaxAngle;
	float LandingMaxSpeed;
	float LandingObstacleMinHeight;
	float LandingOnGroundTip;
	float LandingPushNoseUpFactor;
	float LandingTooManyLowPointsFraction;
	float LandingWaterHoverHeight;
	float LandingWaterHoverOffset;
	float LandLookingForward;
	float LandOffset;
	float LandSlopeMax;
	float LandWidthThreshold;
	int32_t LaserAimLevel;
	float LaserCoolFactor;
	float LaserFireTime;
	float LaserOverheatDownTime;
	float LaserOverheatTime;
	float LaserWaitTime;
	float LateralDriftRange;
	float LateralDriftRollAmount;
	float LaunchThrustersMinimumSummonPercentage;
	float LaunchThrustersRegenTimePeriod;
	float LaunchThrustersSummonCostMultiplier;
	float LinearDamping;
	float LockTargetMaxScale;
	float LockTargetMinDistance;
	float LockTargetMinScale;
	float LockTargetRange;
	float LootAttractDistance;
	float LootAttractTime;
	float LootCollectDistance;
	float LootDampForce;
	float LowAltitudeAnimationHeight;
	float LowAltitudeAnimationHysteresisTime;
	float LowAltitudeAnimationTime;
	float LowAltitudeContrailFadeAtAnimProgress;
	float MarkerEventTime;
	float MaximumDistanceFromShipWhenExiting;
	float MaximumHeightWhenExitingShip;
	float MaxOverspeedBrake;
	float MaxSpeedUpDistance;
	float MaxSpeedUpVelocity;
	float MiniWarpAlignSlerp;
	float MiniWarpAlignStrength;
	float MiniWarpChargeTime;
	float MiniWarpCooldownTime;
	float MiniWarpExitSpeed;
	float MiniWarpExitSpeedStation;
	float MiniWarpExitTime;
	float MiniWarpFlashDelay;
	float MiniWarpFlashDuration;
	float MiniWarpFlashIntensity;
	float MiniWarpFuelTime;
	float MiniWarpHUDArrowAttractAngle;
	float MiniWarpHUDArrowAttractAngleDense;
	float MiniWarpHUDArrowAttractAngleOtherPlayerStuff;
	float MiniWarpHUDArrowAttractAngleSaveBeacon;
	float MiniWarpHUDArrowAttractAngleStation;
	int32_t MiniWarpHUDArrowNumMarkersToBeDense;
	float MiniWarpLinesHeight;
	int32_t MiniWarpLinesNum;
	float MiniWarpLinesOffset;
	float MiniWarpLinesSpacing;
	float MiniWarpMarkerAlignSlowdown;
	float MiniWarpMarkerAlignSlowdownRange;
	float MiniWarpMarkerApproachSlowdown;
	float MiniWarpMinPlanetDistance;
	float MiniWarpNoAsteroidRadius;
	float MiniWarpPlanetRadius;
	float MiniWarpShakeStrength;
	float MiniWarpSpeed;
	float MiniWarpStationRadius;
	float MiniWarpStoppingMarginDefault;
	float MiniWarpStoppingMarginLong;
	float MiniWarpStoppingMarginPlanet;
	float MiniWarpTime;
	float MiniWarpTopSpeedTime;
	float MiniWarpTrackingMargin;
	float MissileLockSpeedUp;
	float MissileLockTime;
	float MissileShootTime;
	float MuzzleAnimSpeed;
	float MuzzleLightIntensity;
	float NearGroundPitchCorrectMinHeight;
	float NearGroundPitchCorrectMinHeightRemote;
	float NearGroundPitchCorrectRange;
	float NearGroundPitchCorrectRangeRemote;
	float NetworkDockSearchRadius;
	float NoBoostAnomalyDistance;
	float NoBoostCombatEventMinBattleTime;
	float NoBoostCombatEventMinFreighterBattleTime;
	float NoBoostCombatEventTime;
	float NoBoostFreighterAngle;
	float NoBoostFreighterDistance;
	float NoBoostShipDistance;
	float NoBoostShipLastHitTime;
	float NoBoostShipNearMinTime;
	float NoBoostSpaceAnomalyDistance;
	float NoBoostStationDistance;
	float OutpostDockSpeedAlignMinDistance;
	float OutpostDockSpeedAlignRange;
	float PadThrustSmoothTime;
	float PadTurnSpeed;
	float PitchCorrectCockpitSpring;
	float PitchCorrectDownSpeedHeightMax;
	float PitchCorrectDownSpeedHeightMin;
	float PitchCorrectDownSpeedMaxDownAngle;
	float PitchCorrectDownSpeedMinSpeed;
	float PitchCorrectDownSpeedRange;
	float PitchCorrectDownSpeedSoftAngle;
	float PitchCorrectHeightMax;
	float PitchCorrectHeightMin;
	float PitchCorrectHeightSpring;
	float PitchCorrectMaxDownAngle;
	float PitchCorrectMaxDownAnglePostCollision;
	float PitchCorrectMaxDownAngleWater;
	float PitchCorrectSoftDownAngle;
	float PitchCorrectSoftDownAnglePostCollision;
	float PitchCorrectSoftDownAngleWater;
	float PitchCorrectTimeHeight;
	float PitchCorrectTimeMax;
	float PitchCorrectTimeMin;
	float PlayerFreighterClearSpaceRadius;
	float PostFreighterWarpTransitionTime;
	float PostWarpSlowDownTime;
	float PowerSettingEngineDamper;
	float PowerSettingEngineMul;
	float PowerSettingShieldDamper;
	float PowerSettingShieldMul;
	float PowerSettingWeaponDamper;
	float PowerSettingWeaponMul;
	int32_t ProjectileClipSize;
	float ProjectileFireRate;
	float ProjectileOverheatTime;
	float ProjectileReloadTime;
	float PulseDriveBoostDoubleTapTime;
	float PulseDrivePlanetApproachHeight;
	float PulseDrivePlanetApproachMaxAngle;
	float PulseDrivePlanetApproachMinAngle;
	float PulseDriveStationApproachAngleMin;
	float PulseDriveStationApproachAngleRange;
	float PulseDriveStationApproachOffset;
	float PulseDriveStationApproachPerpAngleMin;
	float PulseDriveStationApproachPerpAngleRange;
	float PulseDriveStationApproachSlowdown;
	float PulseDriveStationApproachSlowdownRange;
	float PulseDriveStationApproachSlowdownRangeMin;
	float RemotePlayerLockTimeAfterShot;
	float ResetTargetLockAngle;
	float ResourceCollectOffset;
	float RoyalTakeOffMod;
	float RudderToRollAngleDownMax;
	float RudderToRollAngleDownMin;
	float RudderToRollAngleUpMax;
	float RudderToRollCutoffRotation;
	float RudderToRollMultiplierLow;
	float RudderToRollMultiplierMax;
	float RudderToRollMultiplierMin;
	float RudderToRollMultiplierOpposite;
	float RudderToRollMultiplierSpace;
	float RudderToRollUpsideDownRotation;
	float ShakeAlignBrake;
	float ShakeMaxPower;
	float ShakeMaxSpeed;
	float ShakePowerScaler;
	float ShakeSpeed;
	float ShieldEffectHitTime;
	float ShieldLeechMul;
	float ShieldRechargeMinHitTime;
	float ShieldRechargeRate;
	float ShipDifferentRepelAmount;
	float ShipDifferentRepelRange;
	float ShipEnterAngle;
	float ShipEnterMinTime;
	float ShipEnterRange;
	float ShipEnterSpeed;
	float ShipEnterTransitionTime;
	float ShipHeatAlertTime;
	float ShipMotionDeadZone;
	float ShipThrottleBrakeVibrationStrength;
	float ShipThrottleNotchVibrationStrength;
	float ShipThrustReverseThreshhold;
	float ShuttleTakeOffMod;
	float SpaceBrakeAngularRange;
	float SpaceBrakeMinAngularSpeed;
	float SpaceCombatFollowModeAimTime;
	float SpaceCombatFollowModeBrakeBehindAngle;
	float SpaceCombatFollowModeEvadeRoll;
	float SpaceCombatFollowModeEvadeThrust;
	float SpaceCombatFollowModeEvadeTime;
	float SpaceCombatFollowModeMaxBrakeBehind;
	float SpaceCombatFollowModeMaxBrakeHeadOn;
	float SpaceCombatFollowModeMaxTorque;
	float SpaceCombatFollowModeTargetDistance;
	float SpeedCoolNormalSpeedAmount;
	float SpeedCoolOffset;
	float SpeedUpDistanceFadeThreshold;
	float SpeedUpDistanceThreshold;
	float SpeedUpVelocityCoeff;
	float SpeedUpVelocityThreshold;
	float SpringSpeedBoosting;
	float SpringSpeedBraking;
	float SpringSpeedDefault;
	float SpringSpeedRolling;
	float SpringSpeedSpringSpeedIn;
	float SpringSpeedSpringSpeedOut;
	float StickLandThreshold;
	float StickPulseThreshold;
	float StickyStickAngle;
	float StickyTurnAngleRange;
	float StickyTurnHigh;
	float StickyTurnLow;
	float StickyTurnMinAngle;
	float SummonShipAnywhereFwdOffset;
	float SummonShipAnywhereHeightOffset;
	float SummonShipAnywhereRangeMax;
	float SummonShipAnywhereRangeMin;
	float SummonShipApproachOffset;
	float SummonShipHeightOffset;
	int32_t TakeOffCost;
	float TakeOffSphereCastLength;
	float TakeOffSphereCastRadiusMul;
	float TargetLockAngleTorpedo;
	float TargetLockChangeTime;
	float TargetLockLoseTime;
	float TargetLockNearestAngle;
	float TargetLockRange;
	float TargetLockTime;
	float TestJetsBoost;
	float TestJetsStage1;
	float TestJetsStage2;
	float TestShieldEffect;
	float TestShipAnimLowAltitude;
	float TestShipAnimPulse;
	float TestShipAnimRoll;
	float TestShipAnimSpace;
	float TestShipAnimThrust;
	float TestTrailRadius;
	float TestTrailSpeed;
	float TestTrailThreshold;
	float ThrustDecaySpring;
	float ThrustDecaySpringCombat;
	int32_t TrailMaxNumPointsPerFrameOverride;
	float TrailVelocityFactor;
	float TurnRudderStrength;
	float VignetteAmountAcceleration;
	float VignetteAmountTurning;
	float WarpAnimMaxSpeed;
	float WarpAnimMinSpeed;
	float WarpFadeInTime;
	float WarpInFlashTime;
	float WarpInFlashTimeFreighter;
	float WarpInFlashTimeNexus;
	float WarpInLineWidth;
	float WarpInRange;
	float WarpInRangeFreighter;
	float WarpInRangeNexus;
	float WarpInTime;
	float WarpInTimeFreighter;
	float WarpInTimeNexus;
	float WarpNexusDistance;
	float WarpNexusPitch;
	float WarpNexusRotation;
	float WarpOutRange;
	float WarpOutTime;
	float WarpScale;
	float WarpScaleFreighter;
	float WarpScaleNexus;
	float WaterEffectScaler;
	float WeaponDamagePotentialReferenceRange;
	float WingmanAlign;
	float WingmanAngle;
	float WingmanAngle2;
	float WingmanAttackAimAngle;
	float WingmanAttackAngle;
	float WingmanAttackCoolTime;
	float WingmanAttackMinRange;
	float WingmanAttackOffset;
	float WingmanAttackRange;
	float WingmanAttackTime;
	float WingmanAttackTimeout;
	float WingmanAtTime;
	float WingmanAtTimeBack;
	float WingmanAtTimeStart;
	float WingmanFwd1;
	float WingmanFwd2;
	float WingmanPerpTime;
	float WingmanRadius;
	float WingmanSpawnDist;
	float WingmanSpeedApproachSpeed;
	float WingmanSpeedApproachSpeedSpace;
	float WingmanSpeedTrackDistance;
	float WingmanSpeedTrackForceMax;
	float WingmanSpeedTrackForceMin;
	float WingmanSpeedTrackOffset;
	float WingmanViewerAngle;
	NMS_GameComponents::GcShipDataNames HoverShipDataNames;
	NMS_GameComponents::GcShipDataNames HoverShipDataNamesSpecial;
	NMS_GameComponents::GcShipDataNames SpookShipDataNames;
	bool _3rdPersonShipEnabled;
	NMS_Toolkit::TkCurveType _3rdPersonWarpWanderCurve;
	bool AddShipToCollectionOnEnter;
	bool AimZoomAuto;
	bool AllowSideScreenPointing;
	bool AltAtmosphere;
	bool AltControls;
	bool ApplyHeightAlign;
	bool ApplyHeightForce;
	bool AutoEjectOnLanding;
	NMS_Toolkit::TkCurveType CockpitExitAnimCurve;
	bool CritsFromBehind;
	NMS_Toolkit::TkCurveType DeflectCurve;
	NMS_Toolkit::TkCurveType DirectionDockingIndicatorCurve;
	bool DoPreCollision;
	bool DrawLineLockTarget;
	bool EnableDepthTestedCrosshairSections;
	bool EnablePulseDriveSpaceStationOrient;
	NMS_Toolkit::TkCurveType GroundHeightHardCurve;
	NMS_Toolkit::TkCurveType GroundHeightSoftCurve;
	bool LandedCockpitFreeLook;
	bool LandingCheckBuildings;
	NMS_Toolkit::TkCurveType LandingCurve;
	NMS_Toolkit::TkCurveType LandingCurveHeavy;
	NMS_Toolkit::TkCurveType LandingCurveWater;
	NMS_Toolkit::TkCurveType MiniWarpCurve;
	NMS_Toolkit::TkCurveType PitchCorrectHeightCurve;
	NMS_Toolkit::TkCurveType RudderToRollCurve;
	NMS_Toolkit::TkCurveType ShieldEffectHitCurve;
	bool SpaceCombatFollowModeUseBoost;
	bool SpaceCombatFollowModeUseEvadeTarget;
	bool SpaceMapInWorld;
	bool SpeedTrackModeEnabled;
	bool SpringSpeedSpringEnabled;
	bool TestShipAnims;
	NMS_Toolkit::TkCurveType WarpInCurve;

	friend bool operator==(const GcSpaceshipGlobals& lhs, const GcSpaceshipGlobals& rhs) 
	{
		return lhs.ShieldEffectScanData == rhs.ShieldEffectScanData &&
		lhs.AlarmLightColour == rhs.AlarmLightColour &&
		lhs.AlarmLightColourHostile == rhs.AlarmLightColourHostile &&
		lhs.AtmosphereLightOffset == rhs.AtmosphereLightOffset &&
		lhs.CockpitScale == rhs.CockpitScale &&
		lhs.DamageLightColour == rhs.DamageLightColour &&
		lhs.DamageLightColourShield == rhs.DamageLightColourShield &&
		lhs.DamageLightOffsetLeft == rhs.DamageLightOffsetLeft &&
		lhs.DamageLightOffsetRight == rhs.DamageLightOffsetRight &&
		lhs.DamageLightOffsetTop == rhs.DamageLightOffsetTop &&
		lhs.DefaultCentreOffset == rhs.DefaultCentreOffset &&
		lhs.DefaultCentreOffsetDropship == rhs.DefaultCentreOffsetDropship &&
		lhs.DefaultCentreOffsetRoyal == rhs.DefaultCentreOffsetRoyal &&
		lhs.DefaultCentreOffsetSail == rhs.DefaultCentreOffsetSail &&
		lhs.DefaultCentreOffsetScientific == rhs.DefaultCentreOffsetScientific &&
		lhs.DirectionDockingInRangeColour == rhs.DirectionDockingInRangeColour &&
		lhs.DirectionDockingOutRangeColour == rhs.DirectionDockingOutRangeColour &&
		lhs.GroundEffectBuildingColour == rhs.GroundEffectBuildingColour &&
		lhs.GroundEffectWaterColour == rhs.GroundEffectWaterColour &&
		lhs.GunOffset3rdPersonLeft == rhs.GunOffset3rdPersonLeft &&
		lhs.GunOffset3rdPersonRight == rhs.GunOffset3rdPersonRight &&
		lhs.GunOffsetLeft == rhs.GunOffsetLeft &&
		lhs.GunOffsetLeft2 == rhs.GunOffsetLeft2 &&
		lhs.GunOffsetRight == rhs.GunOffsetRight &&
		lhs.GunOffsetRight2 == rhs.GunOffsetRight2 &&
		lhs.HandControllerDeadZone == rhs.HandControllerDeadZone &&
		lhs.HandControllerExtents == rhs.HandControllerExtents &&
		lhs.HandControllerValueMultiplier == rhs.HandControllerValueMultiplier &&
		lhs.HandControllerValueMultiplierSpace == rhs.HandControllerValueMultiplierSpace &&
		lhs.LandingEffectSpaceColourOverride == rhs.LandingEffectSpaceColourOverride &&
		lhs.MuzzleLightColour == rhs.MuzzleLightColour &&
		lhs.PostCollisionAngularFactor == rhs.PostCollisionAngularFactor &&
		lhs.StickAnimationDamping == rhs.StickAnimationDamping &&
		lhs.TargetLockDangerColour == rhs.TargetLockDangerColour &&
		lhs.TargetLockPassiveColour == rhs.TargetLockPassiveColour &&
		lhs.AlarmLightOffsets == rhs.AlarmLightOffsets &&
		lhs.GunAimArray == rhs.GunAimArray &&
		lhs.LaserAimArray == rhs.LaserAimArray &&
		lhs.SailShipCoreTechID == rhs.SailShipCoreTechID &&
		lhs.ShipModels == rhs.ShipModels &&
		lhs.WaterEffectID == rhs.WaterEffectID &&
		lhs.WaterJetHoverEffectID == rhs.WaterJetHoverEffectID &&
		lhs.WaterJetLandingEffectID == rhs.WaterJetLandingEffectID &&
		lhs.WaterJetTakeoffEffectID == rhs.WaterJetTakeoffEffectID &&
		lhs.Control == rhs.Control &&
		lhs.ControlHeavy == rhs.ControlHeavy &&
		lhs.ControlHeavyHover == rhs.ControlHeavyHover &&
		lhs.ControlHover == rhs.ControlHover &&
		lhs.ControlLight == rhs.ControlLight &&
		lhs.ControlBonusA == rhs.ControlBonusA &&
		lhs.ControlBonusB == rhs.ControlBonusB &&
		lhs.ControlBonusC == rhs.ControlBonusC &&
		lhs.ControlBonusS == rhs.ControlBonusS &&
		lhs.Avoidance == rhs.Avoidance &&
		lhs.AvoidanceLowAltitude == rhs.AvoidanceLowAltitude &&
		lhs.StickData == rhs.StickData &&
		lhs.MissileAim == rhs.MissileAim &&
		lhs.Warp == rhs.Warp &&
		lhs.DamageLightCurve == rhs.DamageLightCurve &&
		lhs.MuzzleLightCurve == rhs.MuzzleLightCurve &&
		lhs.DeathSpinPitch == rhs.DeathSpinPitch &&
		lhs.DeathSpinRoll == rhs.DeathSpinRoll &&
		lhs._3rdPersonAngleMinSpeed == rhs._3rdPersonAngleMinSpeed &&
		lhs._3rdPersonAngleSpeedRangePitch == rhs._3rdPersonAngleSpeedRangePitch &&
		lhs._3rdPersonAngleSpeedRangeYaw == rhs._3rdPersonAngleSpeedRangeYaw &&
		lhs._3rdPersonAngleSpringTime == rhs._3rdPersonAngleSpringTime &&
		lhs._3rdPersonAvoidanceAdjustPitchFactor == rhs._3rdPersonAvoidanceAdjustPitchFactor &&
		lhs._3rdPersonAvoidanceAdjustRollFactor == rhs._3rdPersonAvoidanceAdjustRollFactor &&
		lhs._3rdPersonAvoidanceAdjustYawFactor == rhs._3rdPersonAvoidanceAdjustYawFactor &&
		lhs._3rdPersonFlashDuration == rhs._3rdPersonFlashDuration &&
		lhs._3rdPersonFlashIntensity == rhs._3rdPersonFlashIntensity &&
		lhs._3rdPersonHeightForceAdjustPitchFactor == rhs._3rdPersonHeightForceAdjustPitchFactor &&
		lhs._3rdPersonLowHeightMax == rhs._3rdPersonLowHeightMax &&
		lhs._3rdPersonLowHeightMin == rhs._3rdPersonLowHeightMin &&
		lhs._3rdPersonLowHeightOffsetVertRotationY == rhs._3rdPersonLowHeightOffsetVertRotationY &&
		lhs._3rdPersonLowHeightOffsetY == rhs._3rdPersonLowHeightOffsetY &&
		lhs._3rdPersonLowHeightSpringTime == rhs._3rdPersonLowHeightSpringTime &&
		lhs._3rdPersonPitchAngle == rhs._3rdPersonPitchAngle &&
		lhs._3rdPersonRollAngle == rhs._3rdPersonRollAngle &&
		lhs._3rdPersonRollAngleAlien == rhs._3rdPersonRollAngleAlien &&
		lhs._3rdPersonRollAngleDropship == rhs._3rdPersonRollAngleDropship &&
		lhs._3rdPersonRollAngleScience == rhs._3rdPersonRollAngleScience &&
		lhs._3rdPersonTransitionTime == rhs._3rdPersonTransitionTime &&
		lhs._3rdPersonUpOffsetRollChangeSpeed == rhs._3rdPersonUpOffsetRollChangeSpeed &&
		lhs._3rdPersonWarpWanderSpring == rhs._3rdPersonWarpWanderSpring &&
		lhs._3rdPersonWarpWanderStartTime == rhs._3rdPersonWarpWanderStartTime &&
		lhs._3rdPersonWarpWanderTimeX == rhs._3rdPersonWarpWanderTimeX &&
		lhs._3rdPersonWarpWanderTimeY == rhs._3rdPersonWarpWanderTimeY &&
		lhs._3rdPersonWarpWanderTimeZ == rhs._3rdPersonWarpWanderTimeZ &&
		lhs._3rdPersonWarpXWander == rhs._3rdPersonWarpXWander &&
		lhs._3rdPersonWarpYWander == rhs._3rdPersonWarpYWander &&
		lhs._3rdPersonWarpZWander == rhs._3rdPersonWarpZWander &&
		lhs._3rdPersonYawAngle == rhs._3rdPersonYawAngle &&
		lhs._3rdPersonYawAngleLateralExtra == rhs._3rdPersonYawAngleLateralExtra &&
		lhs.AcrobaticLowFlightLevel == rhs.AcrobaticLowFlightLevel &&
		lhs.AimCritAngle == rhs.AimCritAngle &&
		lhs.AimCritBehindAngle == rhs.AimCritBehindAngle &&
		lhs.AimCritMinFwdAngle == rhs.AimCritMinFwdAngle &&
		lhs.AimFoVBoost == rhs.AimFoVBoost &&
		lhs.AimFoVBoostTime == rhs.AimFoVBoostTime &&
		lhs.AimFoVBoostTimeAuto == rhs.AimFoVBoostTimeAuto &&
		lhs.AimMaxAutoAngle == rhs.AimMaxAutoAngle &&
		lhs.AimSpeedTrackDistance == rhs.AimSpeedTrackDistance &&
		lhs.AimSpeedTrackForce == rhs.AimSpeedTrackForce &&
		lhs.AimTurnSlower == rhs.AimTurnSlower &&
		lhs.AlarmLastHitTime == rhs.AlarmLastHitTime &&
		lhs.AlarmLightIntensity == rhs.AlarmLightIntensity &&
		lhs.AlarmLightIntensityHostile == rhs.AlarmLightIntensityHostile &&
		lhs.AlarmRate == rhs.AlarmRate &&
		lhs.AlarmRateHostileMax == rhs.AlarmRateHostileMax &&
		lhs.AlarmRateHostileMin == rhs.AlarmRateHostileMin &&
		lhs.AngularDamping == rhs.AngularDamping &&
		lhs.AnomalyStationMaxApproachSpeed == rhs.AnomalyStationMaxApproachSpeed &&
		lhs.AsteroidHitAngle == rhs.AsteroidHitAngle &&
		lhs.AsteroidHitAngleBoosting == rhs.AsteroidHitAngleBoosting &&
		lhs.AtmosphereAngle == rhs.AtmosphereAngle &&
		lhs.AtmosphereCombatHeight == rhs.AtmosphereCombatHeight &&
		lhs.AtmosphereLightIntensity == rhs.AtmosphereLightIntensity &&
		lhs.AtmosphereSpeed == rhs.AtmosphereSpeed &&
		lhs.AutoLevelMaxAngle == rhs.AutoLevelMaxAngle &&
		lhs.AutoLevelMaxPitchAngle == rhs.AutoLevelMaxPitchAngle &&
		lhs.AutoLevelMinAngle == rhs.AutoLevelMinAngle &&
		lhs.AutoLevelMinPitchAngle == rhs.AutoLevelMinPitchAngle &&
		lhs.AutoLevelPitchCorrectMargin == rhs.AutoLevelPitchCorrectMargin &&
		lhs.AutoLevelWaterAngle == rhs.AutoLevelWaterAngle &&
		lhs.AutoLevelWaterMargin == rhs.AutoLevelWaterMargin &&
		lhs.AutoLevelWaterTorque == rhs.AutoLevelWaterTorque &&
		lhs.AutoPilotAlignStrength == rhs.AutoPilotAlignStrength &&
		lhs.AutoPilotCallAngle == rhs.AutoPilotCallAngle &&
		lhs.AutoPilotCallAngleGhost == rhs.AutoPilotCallAngleGhost &&
		lhs.AutoPilotCallAngleVertical == rhs.AutoPilotCallAngleVertical &&
		lhs.AutoPilotCallAngleVerticalGhost == rhs.AutoPilotCallAngleVerticalGhost &&
		lhs.AutoPilotCallDistance == rhs.AutoPilotCallDistance &&
		lhs.AutoPilotCallDistanceGhost == rhs.AutoPilotCallDistanceGhost &&
		lhs.AutoPilotCallDistanceSpacePOI == rhs.AutoPilotCallDistanceSpacePOI &&
		lhs.AutoPilotPositionAlignStrength == rhs.AutoPilotPositionAlignStrength &&
		lhs.AutoPilotSmallShipAlignStrength == rhs.AutoPilotSmallShipAlignStrength &&
		lhs.AvoidanceDistancePower == rhs.AvoidanceDistancePower &&
		lhs.AvoidancePower == rhs.AvoidancePower &&
		lhs.BoostChargeRate == rhs.BoostChargeRate &&
		lhs.BoostNoAsteroidRadius == rhs.BoostNoAsteroidRadius &&
		lhs.CameraPostWarpFov == rhs.CameraPostWarpFov &&
		lhs.CameraPostWarpFovTime == rhs.CameraPostWarpFovTime &&
		lhs.CockpitDriftAngle == rhs.CockpitDriftAngle &&
		lhs.CockpitDriftAngleHmd == rhs.CockpitDriftAngleHmd &&
		lhs.CockpitExitAnimMul == rhs.CockpitExitAnimMul &&
		lhs.CockpitExitAnimOffset == rhs.CockpitExitAnimOffset &&
		lhs.CockpitExitAnimTime == rhs.CockpitExitAnimTime &&
		lhs.CockpitPitchCorrectAngle == rhs.CockpitPitchCorrectAngle &&
		lhs.CockpitPitchCorrectAngleHmd == rhs.CockpitPitchCorrectAngleHmd &&
		lhs.CockpitRollAngle == rhs.CockpitRollAngle &&
		lhs.CockpitRollAngleExtra == rhs.CockpitRollAngleExtra &&
		lhs.CockpitRollAngleHmd == rhs.CockpitRollAngleHmd &&
		lhs.CockpitRollMultiplierCentre == rhs.CockpitRollMultiplierCentre &&
		lhs.CockpitRollMultiplierOpposite == rhs.CockpitRollMultiplierOpposite &&
		lhs.CockpitRollTime == rhs.CockpitRollTime &&
		lhs.CollisionAlignStrength == rhs.CollisionAlignStrength &&
		lhs.CollisionAsteroidDamp == rhs.CollisionAsteroidDamp &&
		lhs.CollisionDeflectDamping == rhs.CollisionDeflectDamping &&
		lhs.CollisionDeflectForce == rhs.CollisionDeflectForce &&
		lhs.CollisionDeflectNormalFactor == rhs.CollisionDeflectNormalFactor &&
		lhs.CollisionDeflectTime == rhs.CollisionDeflectTime &&
		lhs.CollisionDistance == rhs.CollisionDistance &&
		lhs.CollisionDistanceAsteroid == rhs.CollisionDistanceAsteroid &&
		lhs.CollisionDistanceAsteroidSide == rhs.CollisionDistanceAsteroidSide &&
		lhs.CollisionDistanceGround == rhs.CollisionDistanceGround &&
		lhs.CollisionDistanceSpaceships == rhs.CollisionDistanceSpaceships &&
		lhs.CollisionGroundDamp == rhs.CollisionGroundDamp &&
		lhs.CollisionRadiusMultiplier == rhs.CollisionRadiusMultiplier &&
		lhs.CollisionSpeedDamageAmount == rhs.CollisionSpeedDamageAmount &&
		lhs.CombatBoostMultiplier == rhs.CombatBoostMultiplier &&
		lhs.CombatBoostTurnDamp == rhs.CombatBoostTurnDamp &&
		lhs.ContrailDefaultAlpha == rhs.ContrailDefaultAlpha &&
		lhs.ContrailSpeedDamping == rhs.ContrailSpeedDamping &&
		lhs.CruiseForce == rhs.CruiseForce &&
		lhs.CruiseHeight == rhs.CruiseHeight &&
		lhs.CruiseHeightRange == rhs.CruiseHeightRange &&
		lhs.CruiseOffAngle == rhs.CruiseOffAngle &&
		lhs.CruiseOffAngleRange == rhs.CruiseOffAngleRange &&
		lhs.DamageFlashMin == rhs.DamageFlashMin &&
		lhs.DamageFlashScale == rhs.DamageFlashScale &&
		lhs.DamageLightIntensity == rhs.DamageLightIntensity &&
		lhs.DamageMaxHitTime == rhs.DamageMaxHitTime &&
		lhs.DamageMinHitTime == rhs.DamageMinHitTime &&
		lhs.DamageMinWoundTime == rhs.DamageMinWoundTime &&
		lhs.DefaultTrailInitialSpeed == rhs.DefaultTrailInitialSpeed &&
		lhs.DefaultTrailMinForwardSpeed == rhs.DefaultTrailMinForwardSpeed &&
		lhs.DefaultTrailSpeedDamping == rhs.DefaultTrailSpeedDamping &&
		lhs.DeflectAlignTimeMax == rhs.DeflectAlignTimeMax &&
		lhs.DeflectAlignTimeMin == rhs.DeflectAlignTimeMin &&
		lhs.DeflectDistance == rhs.DeflectDistance &&
		lhs.DirectionBrakeVerticalMultiplier == rhs.DirectionBrakeVerticalMultiplier &&
		lhs.DirectionBrakeVRBoost == rhs.DirectionBrakeVRBoost &&
		lhs.DirectionDockingAlignmentAngle == rhs.DirectionDockingAlignmentAngle &&
		lhs.DirectionDockingAngle == rhs.DirectionDockingAngle &&
		lhs.DirectionDockingCircleOffset == rhs.DirectionDockingCircleOffset &&
		lhs.DirectionDockingCircleOffsetExtra == rhs.DirectionDockingCircleOffsetExtra &&
		lhs.DirectionDockingCircleRadius == rhs.DirectionDockingCircleRadius &&
		lhs.DirectionDockingCircleRadiusExtra == rhs.DirectionDockingCircleRadiusExtra &&
		lhs.DirectionDockingCircleWidth == rhs.DirectionDockingCircleWidth &&
		lhs.DirectionDockingIndicatorAngleRange == rhs.DirectionDockingIndicatorAngleRange &&
		lhs.DirectionDockingIndicatorClearAngleRange == rhs.DirectionDockingIndicatorClearAngleRange &&
		lhs.DirectionDockingIndicatorMaxHeight == rhs.DirectionDockingIndicatorMaxHeight &&
		lhs.DirectionDockingIndicatorMinHeight == rhs.DirectionDockingIndicatorMinHeight &&
		lhs.DirectionDockingIndicatorRange == rhs.DirectionDockingIndicatorRange &&
		lhs.DirectionDockingIndicatorSpeed == rhs.DirectionDockingIndicatorSpeed &&
		lhs.DirectionDockingInfoRange == rhs.DirectionDockingInfoRange &&
		lhs.DirectionDockTime == rhs.DirectionDockTime &&
		lhs.DistanceFromShipToAllowSpawningOnFreighter == rhs.DistanceFromShipToAllowSpawningOnFreighter &&
		lhs.DockingApproachActiveRange == rhs.DockingApproachActiveRange &&
		lhs.DockingApproachBrakeHmdMod == rhs.DockingApproachBrakeHmdMod &&
		lhs.DockingApproachRollHmdMod == rhs.DockingApproachRollHmdMod &&
		lhs.DockingApproachSpeedHmdMod == rhs.DockingApproachSpeedHmdMod &&
		lhs.DockingRotateSpeed == rhs.DockingRotateSpeed &&
		lhs.DockingRotateSpeedVR == rhs.DockingRotateSpeedVR &&
		lhs.DrawLineLockTargetLineWidth == rhs.DrawLineLockTargetLineWidth &&
		lhs.DriftEffectIntensity == rhs.DriftEffectIntensity &&
		lhs.DriftSpring == rhs.DriftSpring &&
		lhs.DriftTurnBrakeMultiplier == rhs.DriftTurnBrakeMultiplier &&
		lhs.DriftTurnStrengthMultiplier == rhs.DriftTurnStrengthMultiplier &&
		lhs.DroneAlertAngle == rhs.DroneAlertAngle &&
		lhs.DroneAlertRange == rhs.DroneAlertRange &&
		lhs.DroneAlignUpTime == rhs.DroneAlignUpTime &&
		lhs.DroneDustHeight == rhs.DroneDustHeight &&
		lhs.DroneHeightAdjust == rhs.DroneHeightAdjust &&
		lhs.DroneMinHeight == rhs.DroneMinHeight &&
		lhs.DroneMoveArrivedRange == rhs.DroneMoveArrivedRange &&
		lhs.DronePatrolRadius == rhs.DronePatrolRadius &&
		lhs.DronePatrolTime == rhs.DronePatrolTime &&
		lhs.DronePlanetAttackMinRange == rhs.DronePlanetAttackMinRange &&
		lhs.DronePlanetAttackRange == rhs.DronePlanetAttackRange &&
		lhs.DroneShootTime == rhs.DroneShootTime &&
		lhs.DroneWarpMaxForce == rhs.DroneWarpMaxForce &&
		lhs.DroneWarpMinForce == rhs.DroneWarpMinForce &&
		lhs.DroneWarpTime == rhs.DroneWarpTime &&
		lhs.EjectAnimSpeedFactor == rhs.EjectAnimSpeedFactor &&
		lhs.EjectAnimSwitchPoint == rhs.EjectAnimSwitchPoint &&
		lhs.EngineEffectsThrustContribution == rhs.EngineEffectsThrustContribution &&
		lhs.EngineJetLightIntensityMultiplier == rhs.EngineJetLightIntensityMultiplier &&
		lhs.ExhaustSpeed == rhs.ExhaustSpeed &&
		lhs.ExplorerTakeOffMod == rhs.ExplorerTakeOffMod &&
		lhs.FighterTakeOffMod == rhs.FighterTakeOffMod &&
		lhs.FreighterApproachCombatDistanceMax == rhs.FreighterApproachCombatDistanceMax &&
		lhs.FreighterApproachCombatDistanceMin == rhs.FreighterApproachCombatDistanceMin &&
		lhs.FreighterApproachCombatMinSpeedFactor == rhs.FreighterApproachCombatMinSpeedFactor &&
		lhs.FreighterApproachDistanceMax == rhs.FreighterApproachDistanceMax &&
		lhs.FreighterApproachDistanceMin == rhs.FreighterApproachDistanceMin &&
		lhs.FreighterApproachExtraMargin == rhs.FreighterApproachExtraMargin &&
		lhs.FreighterApproachExtraMarginCombat == rhs.FreighterApproachExtraMarginCombat &&
		lhs.FreighterApproachExtraMarginPirate == rhs.FreighterApproachExtraMarginPirate &&
		lhs.FreighterApproachSpeedDamper == rhs.FreighterApproachSpeedDamper &&
		lhs.FreighterBattleIgnoreFriendlyFireDistance == rhs.FreighterBattleIgnoreFriendlyFireDistance &&
		lhs.FreighterBattleRangeBoost == rhs.FreighterBattleRangeBoost &&
		lhs.FreighterCombatBoostMul == rhs.FreighterCombatBoostMul &&
		lhs.FreighterCombatSpeedMul == rhs.FreighterCombatSpeedMul &&
		lhs.FreighterSpeed == rhs.FreighterSpeed &&
		lhs.FrigateTargetLockRange == rhs.FrigateTargetLockRange &&
		lhs.GravityDropForce == rhs.GravityDropForce &&
		lhs.GravityDropMaxForceHeight == rhs.GravityDropMaxForceHeight &&
		lhs.GravityDropMaxHeight == rhs.GravityDropMaxHeight &&
		lhs.GravityDropMinHeight == rhs.GravityDropMinHeight &&
		lhs.GroundHeightBrakeMultiplier == rhs.GroundHeightBrakeMultiplier &&
		lhs.GroundHeightDownSpeedMultiplier == rhs.GroundHeightDownSpeedMultiplier &&
		lhs.GroundHeightHard == rhs.GroundHeightHard &&
		lhs.GroundHeightHardHorizontal == rhs.GroundHeightHardHorizontal &&
		lhs.GroundHeightHardOverWater == rhs.GroundHeightHardOverWater &&
		lhs.GroundHeightHardTimeMax == rhs.GroundHeightHardTimeMax &&
		lhs.GroundHeightHardTimeMin == rhs.GroundHeightHardTimeMin &&
		lhs.GroundHeightNumRays == rhs.GroundHeightNumRays &&
		lhs.GroundHeightPostCollisionDamper == rhs.GroundHeightPostCollisionDamper &&
		lhs.GroundHeightPostCollisionMultiplier == rhs.GroundHeightPostCollisionMultiplier &&
		lhs.GroundHeightPostCollisionMultiplierTime == rhs.GroundHeightPostCollisionMultiplierTime &&
		lhs.GroundHeightSmoothTime == rhs.GroundHeightSmoothTime &&
		lhs.GroundHeightSoft == rhs.GroundHeightSoft &&
		lhs.GroundHeightSoftForce == rhs.GroundHeightSoftForce &&
		lhs.GroundHeightSoftHorizontal == rhs.GroundHeightSoftHorizontal &&
		lhs.GroundHeightSpeedAngle == rhs.GroundHeightSpeedAngle &&
		lhs.GroundHeightSpeedAngleRange == rhs.GroundHeightSpeedAngleRange &&
		lhs.GroundHeightSpeedLength == rhs.GroundHeightSpeedLength &&
		lhs.GroundNearEffectBuildingFade == rhs.GroundNearEffectBuildingFade &&
		lhs.GroundNearEffectHeight == rhs.GroundNearEffectHeight &&
		lhs.GroundNearEffectLightFactor == rhs.GroundNearEffectLightFactor &&
		lhs.GroundNearEffectNormalOffset == rhs.GroundNearEffectNormalOffset &&
		lhs.GroundNearEffectRange == rhs.GroundNearEffectRange &&
		lhs.GroundNearEffectWaterLightFactor == rhs.GroundNearEffectWaterLightFactor &&
		lhs.GroundWaterSpeedFactor == rhs.GroundWaterSpeedFactor &&
		lhs.GunAimLevel == rhs.GunAimLevel &&
		lhs.GunAmmoMultiplier == rhs.GunAmmoMultiplier &&
		lhs.GunOffset3rdPersonMultiplier == rhs.GunOffset3rdPersonMultiplier &&
		lhs.HandControllerActiveBlendMinTime == rhs.HandControllerActiveBlendMinTime &&
		lhs.HandControllerActiveBlendTime == rhs.HandControllerActiveBlendTime &&
		lhs.HandControllerDirOffsetAngle == rhs.HandControllerDirOffsetAngle &&
		lhs.HandControllerDirOffsetAngleMove == rhs.HandControllerDirOffsetAngleMove &&
		lhs.HandControllerThrottleDeadZone == rhs.HandControllerThrottleDeadZone &&
		lhs.HandControllerThrottleDistance == rhs.HandControllerThrottleDistance &&
		lhs.HandControllerThrottleRange == rhs.HandControllerThrottleRange &&
		lhs.HandControllerXReorientation == rhs.HandControllerXReorientation &&
		lhs.HandControllerXReorientationMove == rhs.HandControllerXReorientationMove &&
		lhs.HandControllerZReorientation == rhs.HandControllerZReorientation &&
		lhs.HandControllerZReorientationMove == rhs.HandControllerZReorientationMove &&
		lhs.HaulerTakeOffMod == rhs.HaulerTakeOffMod &&
		lhs.HitAsteroidDamage == rhs.HitAsteroidDamage &&
		lhs.HoverAlignTime == rhs.HoverAlignTime &&
		lhs.HoverAlignTimeAlt == rhs.HoverAlignTimeAlt &&
		lhs.HoverBrakeStrength == rhs.HoverBrakeStrength &&
		lhs.HoverHeightFactor == rhs.HoverHeightFactor &&
		lhs.HoverLandManeuvreBrake == rhs.HoverLandManeuvreBrake &&
		lhs.HoverLandManeuvreTimeHmdMax == rhs.HoverLandManeuvreTimeHmdMax &&
		lhs.HoverLandManeuvreTimeHmdMin == rhs.HoverLandManeuvreTimeHmdMin &&
		lhs.HoverLandManeuvreTimeMax == rhs.HoverLandManeuvreTimeMax &&
		lhs.HoverLandManeuvreTimeMin == rhs.HoverLandManeuvreTimeMin &&
		lhs.HoverLandManeuvreTimeWaterMultiplier == rhs.HoverLandManeuvreTimeWaterMultiplier &&
		lhs.HoverLandReachedDistance == rhs.HoverLandReachedDistance &&
		lhs.HoverLandReachedMinTime == rhs.HoverLandReachedMinTime &&
		lhs.HoverMaxSpeed == rhs.HoverMaxSpeed &&
		lhs.HoverMinSpeed == rhs.HoverMinSpeed &&
		lhs.HoverSpeedFactor == rhs.HoverSpeedFactor &&
		lhs.HoverStopTime == rhs.HoverStopTime &&
		lhs.HoverTakeoffHeight == rhs.HoverTakeoffHeight &&
		lhs.HoverTime == rhs.HoverTime &&
		lhs.HoverTimeAlt == rhs.HoverTimeAlt &&
		lhs.HUDBoostUpgradeMultiplier == rhs.HUDBoostUpgradeMultiplier &&
		lhs.KBThrustSmoothTime == rhs.KBThrustSmoothTime &&
		lhs.LandGroundTakeOffTime == rhs.LandGroundTakeOffTime &&
		lhs.LandHeightThreshold == rhs.LandHeightThreshold &&
		lhs.LandingAreaFloorOffset == rhs.LandingAreaFloorOffset &&
		lhs.LandingAreaRadius == rhs.LandingAreaRadius &&
		lhs.LandingButtonMinTime == rhs.LandingButtonMinTime &&
		lhs.LandingCheckBuildingRadiusFactor == rhs.LandingCheckBuildingRadiusFactor &&
		lhs.LandingCost == rhs.LandingCost &&
		lhs.LandingDirectionalSideOffsetFactor == rhs.LandingDirectionalSideOffsetFactor &&
		lhs.LandingHelperMinAngle == rhs.LandingHelperMinAngle &&
		lhs.LandingHelperRollTime == rhs.LandingHelperRollTime &&
		lhs.LandingHelperTurnTime == rhs.LandingHelperTurnTime &&
		lhs.LandingHoverOffset == rhs.LandingHoverOffset &&
		lhs.LandingMargin == rhs.LandingMargin &&
		lhs.LandingMaxAngle == rhs.LandingMaxAngle &&
		lhs.LandingMaxSpeed == rhs.LandingMaxSpeed &&
		lhs.LandingObstacleMinHeight == rhs.LandingObstacleMinHeight &&
		lhs.LandingOnGroundTip == rhs.LandingOnGroundTip &&
		lhs.LandingPushNoseUpFactor == rhs.LandingPushNoseUpFactor &&
		lhs.LandingTooManyLowPointsFraction == rhs.LandingTooManyLowPointsFraction &&
		lhs.LandingWaterHoverHeight == rhs.LandingWaterHoverHeight &&
		lhs.LandingWaterHoverOffset == rhs.LandingWaterHoverOffset &&
		lhs.LandLookingForward == rhs.LandLookingForward &&
		lhs.LandOffset == rhs.LandOffset &&
		lhs.LandSlopeMax == rhs.LandSlopeMax &&
		lhs.LandWidthThreshold == rhs.LandWidthThreshold &&
		lhs.LaserAimLevel == rhs.LaserAimLevel &&
		lhs.LaserCoolFactor == rhs.LaserCoolFactor &&
		lhs.LaserFireTime == rhs.LaserFireTime &&
		lhs.LaserOverheatDownTime == rhs.LaserOverheatDownTime &&
		lhs.LaserOverheatTime == rhs.LaserOverheatTime &&
		lhs.LaserWaitTime == rhs.LaserWaitTime &&
		lhs.LateralDriftRange == rhs.LateralDriftRange &&
		lhs.LateralDriftRollAmount == rhs.LateralDriftRollAmount &&
		lhs.LaunchThrustersMinimumSummonPercentage == rhs.LaunchThrustersMinimumSummonPercentage &&
		lhs.LaunchThrustersRegenTimePeriod == rhs.LaunchThrustersRegenTimePeriod &&
		lhs.LaunchThrustersSummonCostMultiplier == rhs.LaunchThrustersSummonCostMultiplier &&
		lhs.LinearDamping == rhs.LinearDamping &&
		lhs.LockTargetMaxScale == rhs.LockTargetMaxScale &&
		lhs.LockTargetMinDistance == rhs.LockTargetMinDistance &&
		lhs.LockTargetMinScale == rhs.LockTargetMinScale &&
		lhs.LockTargetRange == rhs.LockTargetRange &&
		lhs.LootAttractDistance == rhs.LootAttractDistance &&
		lhs.LootAttractTime == rhs.LootAttractTime &&
		lhs.LootCollectDistance == rhs.LootCollectDistance &&
		lhs.LootDampForce == rhs.LootDampForce &&
		lhs.LowAltitudeAnimationHeight == rhs.LowAltitudeAnimationHeight &&
		lhs.LowAltitudeAnimationHysteresisTime == rhs.LowAltitudeAnimationHysteresisTime &&
		lhs.LowAltitudeAnimationTime == rhs.LowAltitudeAnimationTime &&
		lhs.LowAltitudeContrailFadeAtAnimProgress == rhs.LowAltitudeContrailFadeAtAnimProgress &&
		lhs.MarkerEventTime == rhs.MarkerEventTime &&
		lhs.MaximumDistanceFromShipWhenExiting == rhs.MaximumDistanceFromShipWhenExiting &&
		lhs.MaximumHeightWhenExitingShip == rhs.MaximumHeightWhenExitingShip &&
		lhs.MaxOverspeedBrake == rhs.MaxOverspeedBrake &&
		lhs.MaxSpeedUpDistance == rhs.MaxSpeedUpDistance &&
		lhs.MaxSpeedUpVelocity == rhs.MaxSpeedUpVelocity &&
		lhs.MiniWarpAlignSlerp == rhs.MiniWarpAlignSlerp &&
		lhs.MiniWarpAlignStrength == rhs.MiniWarpAlignStrength &&
		lhs.MiniWarpChargeTime == rhs.MiniWarpChargeTime &&
		lhs.MiniWarpCooldownTime == rhs.MiniWarpCooldownTime &&
		lhs.MiniWarpExitSpeed == rhs.MiniWarpExitSpeed &&
		lhs.MiniWarpExitSpeedStation == rhs.MiniWarpExitSpeedStation &&
		lhs.MiniWarpExitTime == rhs.MiniWarpExitTime &&
		lhs.MiniWarpFlashDelay == rhs.MiniWarpFlashDelay &&
		lhs.MiniWarpFlashDuration == rhs.MiniWarpFlashDuration &&
		lhs.MiniWarpFlashIntensity == rhs.MiniWarpFlashIntensity &&
		lhs.MiniWarpFuelTime == rhs.MiniWarpFuelTime &&
		lhs.MiniWarpHUDArrowAttractAngle == rhs.MiniWarpHUDArrowAttractAngle &&
		lhs.MiniWarpHUDArrowAttractAngleDense == rhs.MiniWarpHUDArrowAttractAngleDense &&
		lhs.MiniWarpHUDArrowAttractAngleOtherPlayerStuff == rhs.MiniWarpHUDArrowAttractAngleOtherPlayerStuff &&
		lhs.MiniWarpHUDArrowAttractAngleSaveBeacon == rhs.MiniWarpHUDArrowAttractAngleSaveBeacon &&
		lhs.MiniWarpHUDArrowAttractAngleStation == rhs.MiniWarpHUDArrowAttractAngleStation &&
		lhs.MiniWarpHUDArrowNumMarkersToBeDense == rhs.MiniWarpHUDArrowNumMarkersToBeDense &&
		lhs.MiniWarpLinesHeight == rhs.MiniWarpLinesHeight &&
		lhs.MiniWarpLinesNum == rhs.MiniWarpLinesNum &&
		lhs.MiniWarpLinesOffset == rhs.MiniWarpLinesOffset &&
		lhs.MiniWarpLinesSpacing == rhs.MiniWarpLinesSpacing &&
		lhs.MiniWarpMarkerAlignSlowdown == rhs.MiniWarpMarkerAlignSlowdown &&
		lhs.MiniWarpMarkerAlignSlowdownRange == rhs.MiniWarpMarkerAlignSlowdownRange &&
		lhs.MiniWarpMarkerApproachSlowdown == rhs.MiniWarpMarkerApproachSlowdown &&
		lhs.MiniWarpMinPlanetDistance == rhs.MiniWarpMinPlanetDistance &&
		lhs.MiniWarpNoAsteroidRadius == rhs.MiniWarpNoAsteroidRadius &&
		lhs.MiniWarpPlanetRadius == rhs.MiniWarpPlanetRadius &&
		lhs.MiniWarpShakeStrength == rhs.MiniWarpShakeStrength &&
		lhs.MiniWarpSpeed == rhs.MiniWarpSpeed &&
		lhs.MiniWarpStationRadius == rhs.MiniWarpStationRadius &&
		lhs.MiniWarpStoppingMarginDefault == rhs.MiniWarpStoppingMarginDefault &&
		lhs.MiniWarpStoppingMarginLong == rhs.MiniWarpStoppingMarginLong &&
		lhs.MiniWarpStoppingMarginPlanet == rhs.MiniWarpStoppingMarginPlanet &&
		lhs.MiniWarpTime == rhs.MiniWarpTime &&
		lhs.MiniWarpTopSpeedTime == rhs.MiniWarpTopSpeedTime &&
		lhs.MiniWarpTrackingMargin == rhs.MiniWarpTrackingMargin &&
		lhs.MissileLockSpeedUp == rhs.MissileLockSpeedUp &&
		lhs.MissileLockTime == rhs.MissileLockTime &&
		lhs.MissileShootTime == rhs.MissileShootTime &&
		lhs.MuzzleAnimSpeed == rhs.MuzzleAnimSpeed &&
		lhs.MuzzleLightIntensity == rhs.MuzzleLightIntensity &&
		lhs.NearGroundPitchCorrectMinHeight == rhs.NearGroundPitchCorrectMinHeight &&
		lhs.NearGroundPitchCorrectMinHeightRemote == rhs.NearGroundPitchCorrectMinHeightRemote &&
		lhs.NearGroundPitchCorrectRange == rhs.NearGroundPitchCorrectRange &&
		lhs.NearGroundPitchCorrectRangeRemote == rhs.NearGroundPitchCorrectRangeRemote &&
		lhs.NetworkDockSearchRadius == rhs.NetworkDockSearchRadius &&
		lhs.NoBoostAnomalyDistance == rhs.NoBoostAnomalyDistance &&
		lhs.NoBoostCombatEventMinBattleTime == rhs.NoBoostCombatEventMinBattleTime &&
		lhs.NoBoostCombatEventMinFreighterBattleTime == rhs.NoBoostCombatEventMinFreighterBattleTime &&
		lhs.NoBoostCombatEventTime == rhs.NoBoostCombatEventTime &&
		lhs.NoBoostFreighterAngle == rhs.NoBoostFreighterAngle &&
		lhs.NoBoostFreighterDistance == rhs.NoBoostFreighterDistance &&
		lhs.NoBoostShipDistance == rhs.NoBoostShipDistance &&
		lhs.NoBoostShipLastHitTime == rhs.NoBoostShipLastHitTime &&
		lhs.NoBoostShipNearMinTime == rhs.NoBoostShipNearMinTime &&
		lhs.NoBoostSpaceAnomalyDistance == rhs.NoBoostSpaceAnomalyDistance &&
		lhs.NoBoostStationDistance == rhs.NoBoostStationDistance &&
		lhs.OutpostDockSpeedAlignMinDistance == rhs.OutpostDockSpeedAlignMinDistance &&
		lhs.OutpostDockSpeedAlignRange == rhs.OutpostDockSpeedAlignRange &&
		lhs.PadThrustSmoothTime == rhs.PadThrustSmoothTime &&
		lhs.PadTurnSpeed == rhs.PadTurnSpeed &&
		lhs.PitchCorrectCockpitSpring == rhs.PitchCorrectCockpitSpring &&
		lhs.PitchCorrectDownSpeedHeightMax == rhs.PitchCorrectDownSpeedHeightMax &&
		lhs.PitchCorrectDownSpeedHeightMin == rhs.PitchCorrectDownSpeedHeightMin &&
		lhs.PitchCorrectDownSpeedMaxDownAngle == rhs.PitchCorrectDownSpeedMaxDownAngle &&
		lhs.PitchCorrectDownSpeedMinSpeed == rhs.PitchCorrectDownSpeedMinSpeed &&
		lhs.PitchCorrectDownSpeedRange == rhs.PitchCorrectDownSpeedRange &&
		lhs.PitchCorrectDownSpeedSoftAngle == rhs.PitchCorrectDownSpeedSoftAngle &&
		lhs.PitchCorrectHeightMax == rhs.PitchCorrectHeightMax &&
		lhs.PitchCorrectHeightMin == rhs.PitchCorrectHeightMin &&
		lhs.PitchCorrectHeightSpring == rhs.PitchCorrectHeightSpring &&
		lhs.PitchCorrectMaxDownAngle == rhs.PitchCorrectMaxDownAngle &&
		lhs.PitchCorrectMaxDownAnglePostCollision == rhs.PitchCorrectMaxDownAnglePostCollision &&
		lhs.PitchCorrectMaxDownAngleWater == rhs.PitchCorrectMaxDownAngleWater &&
		lhs.PitchCorrectSoftDownAngle == rhs.PitchCorrectSoftDownAngle &&
		lhs.PitchCorrectSoftDownAnglePostCollision == rhs.PitchCorrectSoftDownAnglePostCollision &&
		lhs.PitchCorrectSoftDownAngleWater == rhs.PitchCorrectSoftDownAngleWater &&
		lhs.PitchCorrectTimeHeight == rhs.PitchCorrectTimeHeight &&
		lhs.PitchCorrectTimeMax == rhs.PitchCorrectTimeMax &&
		lhs.PitchCorrectTimeMin == rhs.PitchCorrectTimeMin &&
		lhs.PlayerFreighterClearSpaceRadius == rhs.PlayerFreighterClearSpaceRadius &&
		lhs.PostFreighterWarpTransitionTime == rhs.PostFreighterWarpTransitionTime &&
		lhs.PostWarpSlowDownTime == rhs.PostWarpSlowDownTime &&
		lhs.PowerSettingEngineDamper == rhs.PowerSettingEngineDamper &&
		lhs.PowerSettingEngineMul == rhs.PowerSettingEngineMul &&
		lhs.PowerSettingShieldDamper == rhs.PowerSettingShieldDamper &&
		lhs.PowerSettingShieldMul == rhs.PowerSettingShieldMul &&
		lhs.PowerSettingWeaponDamper == rhs.PowerSettingWeaponDamper &&
		lhs.PowerSettingWeaponMul == rhs.PowerSettingWeaponMul &&
		lhs.ProjectileClipSize == rhs.ProjectileClipSize &&
		lhs.ProjectileFireRate == rhs.ProjectileFireRate &&
		lhs.ProjectileOverheatTime == rhs.ProjectileOverheatTime &&
		lhs.ProjectileReloadTime == rhs.ProjectileReloadTime &&
		lhs.PulseDriveBoostDoubleTapTime == rhs.PulseDriveBoostDoubleTapTime &&
		lhs.PulseDrivePlanetApproachHeight == rhs.PulseDrivePlanetApproachHeight &&
		lhs.PulseDrivePlanetApproachMaxAngle == rhs.PulseDrivePlanetApproachMaxAngle &&
		lhs.PulseDrivePlanetApproachMinAngle == rhs.PulseDrivePlanetApproachMinAngle &&
		lhs.PulseDriveStationApproachAngleMin == rhs.PulseDriveStationApproachAngleMin &&
		lhs.PulseDriveStationApproachAngleRange == rhs.PulseDriveStationApproachAngleRange &&
		lhs.PulseDriveStationApproachOffset == rhs.PulseDriveStationApproachOffset &&
		lhs.PulseDriveStationApproachPerpAngleMin == rhs.PulseDriveStationApproachPerpAngleMin &&
		lhs.PulseDriveStationApproachPerpAngleRange == rhs.PulseDriveStationApproachPerpAngleRange &&
		lhs.PulseDriveStationApproachSlowdown == rhs.PulseDriveStationApproachSlowdown &&
		lhs.PulseDriveStationApproachSlowdownRange == rhs.PulseDriveStationApproachSlowdownRange &&
		lhs.PulseDriveStationApproachSlowdownRangeMin == rhs.PulseDriveStationApproachSlowdownRangeMin &&
		lhs.RemotePlayerLockTimeAfterShot == rhs.RemotePlayerLockTimeAfterShot &&
		lhs.ResetTargetLockAngle == rhs.ResetTargetLockAngle &&
		lhs.ResourceCollectOffset == rhs.ResourceCollectOffset &&
		lhs.RoyalTakeOffMod == rhs.RoyalTakeOffMod &&
		lhs.RudderToRollAngleDownMax == rhs.RudderToRollAngleDownMax &&
		lhs.RudderToRollAngleDownMin == rhs.RudderToRollAngleDownMin &&
		lhs.RudderToRollAngleUpMax == rhs.RudderToRollAngleUpMax &&
		lhs.RudderToRollCutoffRotation == rhs.RudderToRollCutoffRotation &&
		lhs.RudderToRollMultiplierLow == rhs.RudderToRollMultiplierLow &&
		lhs.RudderToRollMultiplierMax == rhs.RudderToRollMultiplierMax &&
		lhs.RudderToRollMultiplierMin == rhs.RudderToRollMultiplierMin &&
		lhs.RudderToRollMultiplierOpposite == rhs.RudderToRollMultiplierOpposite &&
		lhs.RudderToRollMultiplierSpace == rhs.RudderToRollMultiplierSpace &&
		lhs.RudderToRollUpsideDownRotation == rhs.RudderToRollUpsideDownRotation &&
		lhs.ShakeAlignBrake == rhs.ShakeAlignBrake &&
		lhs.ShakeMaxPower == rhs.ShakeMaxPower &&
		lhs.ShakeMaxSpeed == rhs.ShakeMaxSpeed &&
		lhs.ShakePowerScaler == rhs.ShakePowerScaler &&
		lhs.ShakeSpeed == rhs.ShakeSpeed &&
		lhs.ShieldEffectHitTime == rhs.ShieldEffectHitTime &&
		lhs.ShieldLeechMul == rhs.ShieldLeechMul &&
		lhs.ShieldRechargeMinHitTime == rhs.ShieldRechargeMinHitTime &&
		lhs.ShieldRechargeRate == rhs.ShieldRechargeRate &&
		lhs.ShipDifferentRepelAmount == rhs.ShipDifferentRepelAmount &&
		lhs.ShipDifferentRepelRange == rhs.ShipDifferentRepelRange &&
		lhs.ShipEnterAngle == rhs.ShipEnterAngle &&
		lhs.ShipEnterMinTime == rhs.ShipEnterMinTime &&
		lhs.ShipEnterRange == rhs.ShipEnterRange &&
		lhs.ShipEnterSpeed == rhs.ShipEnterSpeed &&
		lhs.ShipEnterTransitionTime == rhs.ShipEnterTransitionTime &&
		lhs.ShipHeatAlertTime == rhs.ShipHeatAlertTime &&
		lhs.ShipMotionDeadZone == rhs.ShipMotionDeadZone &&
		lhs.ShipThrottleBrakeVibrationStrength == rhs.ShipThrottleBrakeVibrationStrength &&
		lhs.ShipThrottleNotchVibrationStrength == rhs.ShipThrottleNotchVibrationStrength &&
		lhs.ShipThrustReverseThreshhold == rhs.ShipThrustReverseThreshhold &&
		lhs.ShuttleTakeOffMod == rhs.ShuttleTakeOffMod &&
		lhs.SpaceBrakeAngularRange == rhs.SpaceBrakeAngularRange &&
		lhs.SpaceBrakeMinAngularSpeed == rhs.SpaceBrakeMinAngularSpeed &&
		lhs.SpaceCombatFollowModeAimTime == rhs.SpaceCombatFollowModeAimTime &&
		lhs.SpaceCombatFollowModeBrakeBehindAngle == rhs.SpaceCombatFollowModeBrakeBehindAngle &&
		lhs.SpaceCombatFollowModeEvadeRoll == rhs.SpaceCombatFollowModeEvadeRoll &&
		lhs.SpaceCombatFollowModeEvadeThrust == rhs.SpaceCombatFollowModeEvadeThrust &&
		lhs.SpaceCombatFollowModeEvadeTime == rhs.SpaceCombatFollowModeEvadeTime &&
		lhs.SpaceCombatFollowModeMaxBrakeBehind == rhs.SpaceCombatFollowModeMaxBrakeBehind &&
		lhs.SpaceCombatFollowModeMaxBrakeHeadOn == rhs.SpaceCombatFollowModeMaxBrakeHeadOn &&
		lhs.SpaceCombatFollowModeMaxTorque == rhs.SpaceCombatFollowModeMaxTorque &&
		lhs.SpaceCombatFollowModeTargetDistance == rhs.SpaceCombatFollowModeTargetDistance &&
		lhs.SpeedCoolNormalSpeedAmount == rhs.SpeedCoolNormalSpeedAmount &&
		lhs.SpeedCoolOffset == rhs.SpeedCoolOffset &&
		lhs.SpeedUpDistanceFadeThreshold == rhs.SpeedUpDistanceFadeThreshold &&
		lhs.SpeedUpDistanceThreshold == rhs.SpeedUpDistanceThreshold &&
		lhs.SpeedUpVelocityCoeff == rhs.SpeedUpVelocityCoeff &&
		lhs.SpeedUpVelocityThreshold == rhs.SpeedUpVelocityThreshold &&
		lhs.SpringSpeedBoosting == rhs.SpringSpeedBoosting &&
		lhs.SpringSpeedBraking == rhs.SpringSpeedBraking &&
		lhs.SpringSpeedDefault == rhs.SpringSpeedDefault &&
		lhs.SpringSpeedRolling == rhs.SpringSpeedRolling &&
		lhs.SpringSpeedSpringSpeedIn == rhs.SpringSpeedSpringSpeedIn &&
		lhs.SpringSpeedSpringSpeedOut == rhs.SpringSpeedSpringSpeedOut &&
		lhs.StickLandThreshold == rhs.StickLandThreshold &&
		lhs.StickPulseThreshold == rhs.StickPulseThreshold &&
		lhs.StickyStickAngle == rhs.StickyStickAngle &&
		lhs.StickyTurnAngleRange == rhs.StickyTurnAngleRange &&
		lhs.StickyTurnHigh == rhs.StickyTurnHigh &&
		lhs.StickyTurnLow == rhs.StickyTurnLow &&
		lhs.StickyTurnMinAngle == rhs.StickyTurnMinAngle &&
		lhs.SummonShipAnywhereFwdOffset == rhs.SummonShipAnywhereFwdOffset &&
		lhs.SummonShipAnywhereHeightOffset == rhs.SummonShipAnywhereHeightOffset &&
		lhs.SummonShipAnywhereRangeMax == rhs.SummonShipAnywhereRangeMax &&
		lhs.SummonShipAnywhereRangeMin == rhs.SummonShipAnywhereRangeMin &&
		lhs.SummonShipApproachOffset == rhs.SummonShipApproachOffset &&
		lhs.SummonShipHeightOffset == rhs.SummonShipHeightOffset &&
		lhs.TakeOffCost == rhs.TakeOffCost &&
		lhs.TakeOffSphereCastLength == rhs.TakeOffSphereCastLength &&
		lhs.TakeOffSphereCastRadiusMul == rhs.TakeOffSphereCastRadiusMul &&
		lhs.TargetLockAngleTorpedo == rhs.TargetLockAngleTorpedo &&
		lhs.TargetLockChangeTime == rhs.TargetLockChangeTime &&
		lhs.TargetLockLoseTime == rhs.TargetLockLoseTime &&
		lhs.TargetLockNearestAngle == rhs.TargetLockNearestAngle &&
		lhs.TargetLockRange == rhs.TargetLockRange &&
		lhs.TargetLockTime == rhs.TargetLockTime &&
		lhs.TestJetsBoost == rhs.TestJetsBoost &&
		lhs.TestJetsStage1 == rhs.TestJetsStage1 &&
		lhs.TestJetsStage2 == rhs.TestJetsStage2 &&
		lhs.TestShieldEffect == rhs.TestShieldEffect &&
		lhs.TestShipAnimLowAltitude == rhs.TestShipAnimLowAltitude &&
		lhs.TestShipAnimPulse == rhs.TestShipAnimPulse &&
		lhs.TestShipAnimRoll == rhs.TestShipAnimRoll &&
		lhs.TestShipAnimSpace == rhs.TestShipAnimSpace &&
		lhs.TestShipAnimThrust == rhs.TestShipAnimThrust &&
		lhs.TestTrailRadius == rhs.TestTrailRadius &&
		lhs.TestTrailSpeed == rhs.TestTrailSpeed &&
		lhs.TestTrailThreshold == rhs.TestTrailThreshold &&
		lhs.ThrustDecaySpring == rhs.ThrustDecaySpring &&
		lhs.ThrustDecaySpringCombat == rhs.ThrustDecaySpringCombat &&
		lhs.TrailMaxNumPointsPerFrameOverride == rhs.TrailMaxNumPointsPerFrameOverride &&
		lhs.TrailVelocityFactor == rhs.TrailVelocityFactor &&
		lhs.TurnRudderStrength == rhs.TurnRudderStrength &&
		lhs.VignetteAmountAcceleration == rhs.VignetteAmountAcceleration &&
		lhs.VignetteAmountTurning == rhs.VignetteAmountTurning &&
		lhs.WarpAnimMaxSpeed == rhs.WarpAnimMaxSpeed &&
		lhs.WarpAnimMinSpeed == rhs.WarpAnimMinSpeed &&
		lhs.WarpFadeInTime == rhs.WarpFadeInTime &&
		lhs.WarpInFlashTime == rhs.WarpInFlashTime &&
		lhs.WarpInFlashTimeFreighter == rhs.WarpInFlashTimeFreighter &&
		lhs.WarpInFlashTimeNexus == rhs.WarpInFlashTimeNexus &&
		lhs.WarpInLineWidth == rhs.WarpInLineWidth &&
		lhs.WarpInRange == rhs.WarpInRange &&
		lhs.WarpInRangeFreighter == rhs.WarpInRangeFreighter &&
		lhs.WarpInRangeNexus == rhs.WarpInRangeNexus &&
		lhs.WarpInTime == rhs.WarpInTime &&
		lhs.WarpInTimeFreighter == rhs.WarpInTimeFreighter &&
		lhs.WarpInTimeNexus == rhs.WarpInTimeNexus &&
		lhs.WarpNexusDistance == rhs.WarpNexusDistance &&
		lhs.WarpNexusPitch == rhs.WarpNexusPitch &&
		lhs.WarpNexusRotation == rhs.WarpNexusRotation &&
		lhs.WarpOutRange == rhs.WarpOutRange &&
		lhs.WarpOutTime == rhs.WarpOutTime &&
		lhs.WarpScale == rhs.WarpScale &&
		lhs.WarpScaleFreighter == rhs.WarpScaleFreighter &&
		lhs.WarpScaleNexus == rhs.WarpScaleNexus &&
		lhs.WaterEffectScaler == rhs.WaterEffectScaler &&
		lhs.WeaponDamagePotentialReferenceRange == rhs.WeaponDamagePotentialReferenceRange &&
		lhs.WingmanAlign == rhs.WingmanAlign &&
		lhs.WingmanAngle == rhs.WingmanAngle &&
		lhs.WingmanAngle2 == rhs.WingmanAngle2 &&
		lhs.WingmanAttackAimAngle == rhs.WingmanAttackAimAngle &&
		lhs.WingmanAttackAngle == rhs.WingmanAttackAngle &&
		lhs.WingmanAttackCoolTime == rhs.WingmanAttackCoolTime &&
		lhs.WingmanAttackMinRange == rhs.WingmanAttackMinRange &&
		lhs.WingmanAttackOffset == rhs.WingmanAttackOffset &&
		lhs.WingmanAttackRange == rhs.WingmanAttackRange &&
		lhs.WingmanAttackTime == rhs.WingmanAttackTime &&
		lhs.WingmanAttackTimeout == rhs.WingmanAttackTimeout &&
		lhs.WingmanAtTime == rhs.WingmanAtTime &&
		lhs.WingmanAtTimeBack == rhs.WingmanAtTimeBack &&
		lhs.WingmanAtTimeStart == rhs.WingmanAtTimeStart &&
		lhs.WingmanFwd1 == rhs.WingmanFwd1 &&
		lhs.WingmanFwd2 == rhs.WingmanFwd2 &&
		lhs.WingmanPerpTime == rhs.WingmanPerpTime &&
		lhs.WingmanRadius == rhs.WingmanRadius &&
		lhs.WingmanSpawnDist == rhs.WingmanSpawnDist &&
		lhs.WingmanSpeedApproachSpeed == rhs.WingmanSpeedApproachSpeed &&
		lhs.WingmanSpeedApproachSpeedSpace == rhs.WingmanSpeedApproachSpeedSpace &&
		lhs.WingmanSpeedTrackDistance == rhs.WingmanSpeedTrackDistance &&
		lhs.WingmanSpeedTrackForceMax == rhs.WingmanSpeedTrackForceMax &&
		lhs.WingmanSpeedTrackForceMin == rhs.WingmanSpeedTrackForceMin &&
		lhs.WingmanSpeedTrackOffset == rhs.WingmanSpeedTrackOffset &&
		lhs.WingmanViewerAngle == rhs.WingmanViewerAngle &&
		lhs.HoverShipDataNames == rhs.HoverShipDataNames &&
		lhs.HoverShipDataNamesSpecial == rhs.HoverShipDataNamesSpecial &&
		lhs.SpookShipDataNames == rhs.SpookShipDataNames &&
		lhs._3rdPersonShipEnabled == rhs._3rdPersonShipEnabled &&
		lhs._3rdPersonWarpWanderCurve == rhs._3rdPersonWarpWanderCurve &&
		lhs.AddShipToCollectionOnEnter == rhs.AddShipToCollectionOnEnter &&
		lhs.AimZoomAuto == rhs.AimZoomAuto &&
		lhs.AllowSideScreenPointing == rhs.AllowSideScreenPointing &&
		lhs.AltAtmosphere == rhs.AltAtmosphere &&
		lhs.AltControls == rhs.AltControls &&
		lhs.ApplyHeightAlign == rhs.ApplyHeightAlign &&
		lhs.ApplyHeightForce == rhs.ApplyHeightForce &&
		lhs.AutoEjectOnLanding == rhs.AutoEjectOnLanding &&
		lhs.CockpitExitAnimCurve == rhs.CockpitExitAnimCurve &&
		lhs.CritsFromBehind == rhs.CritsFromBehind &&
		lhs.DeflectCurve == rhs.DeflectCurve &&
		lhs.DirectionDockingIndicatorCurve == rhs.DirectionDockingIndicatorCurve &&
		lhs.DoPreCollision == rhs.DoPreCollision &&
		lhs.DrawLineLockTarget == rhs.DrawLineLockTarget &&
		lhs.EnableDepthTestedCrosshairSections == rhs.EnableDepthTestedCrosshairSections &&
		lhs.EnablePulseDriveSpaceStationOrient == rhs.EnablePulseDriveSpaceStationOrient &&
		lhs.GroundHeightHardCurve == rhs.GroundHeightHardCurve &&
		lhs.GroundHeightSoftCurve == rhs.GroundHeightSoftCurve &&
		lhs.LandedCockpitFreeLook == rhs.LandedCockpitFreeLook &&
		lhs.LandingCheckBuildings == rhs.LandingCheckBuildings &&
		lhs.LandingCurve == rhs.LandingCurve &&
		lhs.LandingCurveHeavy == rhs.LandingCurveHeavy &&
		lhs.LandingCurveWater == rhs.LandingCurveWater &&
		lhs.MiniWarpCurve == rhs.MiniWarpCurve &&
		lhs.PitchCorrectHeightCurve == rhs.PitchCorrectHeightCurve &&
		lhs.RudderToRollCurve == rhs.RudderToRollCurve &&
		lhs.ShieldEffectHitCurve == rhs.ShieldEffectHitCurve &&
		lhs.SpaceCombatFollowModeUseBoost == rhs.SpaceCombatFollowModeUseBoost &&
		lhs.SpaceCombatFollowModeUseEvadeTarget == rhs.SpaceCombatFollowModeUseEvadeTarget &&
		lhs.SpaceMapInWorld == rhs.SpaceMapInWorld &&
		lhs.SpeedTrackModeEnabled == rhs.SpeedTrackModeEnabled &&
		lhs.SpringSpeedSpringEnabled == rhs.SpringSpeedSpringEnabled &&
		lhs.TestShipAnims == rhs.TestShipAnims &&
		lhs.WarpInCurve == rhs.WarpInCurve;
	}
};

//Dependency: GcExoMechWeaponData
//Dependency: GcMechMeshPartTable
//Dependency: GcVehicleMuzzleData
//Dependency: GcVehicleWeaponMuzzleData
//Dependency: GcMechAudioEventTable
//Dependency: GcMechEffectTable
//Dependency: GcSpaceshipAvoidanceData
//Dependency: GcVehicleData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcVehicleGlobals
{
	NMS::Colour CheckpointBeamColourActive;
	NMS::Colour CheckpointBeamColourNormal;
	NMS::Colour DefaultBoosterColour;
	NMS::Vector3f MechCrouchOffset;
	NMS::Vector3f MechWalkBackwardsCoGOffset;
	NMS_GameComponents::GcMechMeshPartTable MechMeshPartsTable;
	NMS_GameComponents::GcExoMechWeaponData MechWeaponData[5];
	NMS_GameComponents::GcVehicleMuzzleData VehicleWeaponMuzzleFlash[7];
	NMS_GameComponents::GcMechAudioEventTable MechAudioEventTable;
	NMS_GameComponents::GcMechEffectTable MechEffectTable;
	NMS::NMSString0x20A BugMechRightArmTechNameOverride;
	NMS::NMSString0x20A SentinelRightArmTechNameOverride;
	NMS::NMSString0x10 BugMechLeftArmTech;
	NMS::NMSString0x10 BugMechRightArmTech;
	std::vector<NMS::NMSString0x10> DefaultBikeLoadout;
	std::vector<NMS::NMSString0x10> DefaultBuggyLoadout;
	std::vector<NMS::NMSString0x10> DefaultTruckLoadout;
	NMS::NMSString0x10 MechArmPitchAnimLeft;
	NMS::NMSString0x10 MechArmPitchAnimRight;
	NMS::NMSString0x10 MechStrongLaser;
	NMS::NMSString0x10 SentinelLeftArmTech;
	NMS::NMSString0x10 SentinelRightArmTech;
	NMS::NMSString0x10 SentinelRightLeftArmLaserData;
	std::vector<NMS::Vector3f> UnderwaterBubbleOffset;
	std::vector<NMS_GameComponents::GcVehicleData> VehicleDataTable;
	NMS::NMSString0x10 VehicleLocalScan;
	NMS::NMSString0x10 VehicleScan;
	NMS::NMSString0x10 VehicleStrongLaser;
	std::vector<NMS_GameComponents::GcVehicleWeaponMuzzleData> VehicleWeaponMuzzleDataTable;
	NMS_GameComponents::GcSpaceshipAvoidanceData UnderwaterAvoidance;
	NMS::Vector2f MechLookStickSpeedLimit;
	NMS::Vector2f MechMovementStickSpeedLimit;
	float AIMechFlamethrowerFireInterval;
	int32_t AIMechFlamethrowerNumShotsMax;
	int32_t AIMechFlamethrowerNumShotsMin;
	float AIMechGunExplosionRadius;
	float AIMechGunFireInterval;
	float AIMechGunInheritVelocity;
	int32_t AIMechGunNumShotsMax;
	int32_t AIMechGunNumShotsMin;
	float AIMechLaserFireDurationMax;
	float AIMechLaserFireDurationMin;
	float AIMechStunGunFireInterval;
	int32_t AIMechStunGunNumShotsMax;
	int32_t AIMechStunGunNumShotsMin;
	float AttractAlign;
	float AttractAmount;
	float AttractDirectionBrakeThresholdSq;
	float AttractMaxSpeed;
	float BoostPadStrength;
	float BoostPadTime;
	float BuoyancyMaxDownForce;
	float BuoyancyMaxUpForce;
	float BuoyancySurfaceFudge;
	float BuoyancySurfacingTime;
	float BuoyancyUnderwaterSphereRadius;
	float CheckpointBeamOffset;
	float CheckpointBeamSizeActive;
	float CheckpointBeamSizeNormal;
	float CheckpointDeleteAngle;
	float CheckpointDeleteDistance;
	float CheckpointFlashDuration;
	float CheckpointFlashIntensity;
	float CheckpointPlacementOffset;
	float CheckpointPlacementRayLength;
	float CheckpointRadius;
	float ControlStickRecenterSpeedDegPerSec;
	float DamageTechMinHitIntervalSeconds;
	int32_t DamageTechNumHitsRequired;
	float DisablePhysicsRange;
	float ExitStopForce;
	float ExitStopTime;
	float FirstPersonSteeringAdditionalForward;
	float FirstPersonSteeringAdditionalForwardThreshold;
	float FirstPersonSteeringAdditionalReverseThreshold;
	float FirstPersonSteeringLowSpeedTurnDamping;
	float FirstPersonSteeringMinThrottleHardLeftRight;
	int32_t GunBaseDamage;
	int32_t GunBaseMiningDamage;
	float GunFireRate;
	float HeadlightIntensitySpringTime;
	float HornScareFleeRadius;
	float HornScareRadius;
	float HornScareTime;
	float LevelVehicleCameraFactor;
	float MechAIGroundTurnSpeed;
	float MechAIResummonMinSpawnDistance;
	float MechAIResummonMinSpeedForVelBasedSpawnPos;
	float MechAIResummonTriggerDistance;
	float MechAIResummonVelBasedSpawnSpeedMultiplier;
	float MechArmPitchAngleMax;
	float MechArmPitchAngleMin;
	float MechArmPitchLerpSpeed;
	float MechArmSwingAngleFastWalk;
	float MechArmSwingAngleWalk;
	float MechArmSwingPhaseFastWalk;
	float MechArmSwingPhaseWalk;
	float MechCameraOffsetAmount;
	float MechCameraOffsetTime;
	float MechCockPitBobPitch;
	float MechCockPitBobRoll;
	float MechCockPitBobX;
	float MechCockPitBobY;
	float MechCockPitBobYaw;
	float MechCockPowerDownY;
	float MechCoGAdjustTimeAir;
	float MechCoGAdjustTimeLand;
	float MechCoGAdjustTimeWindUp;
	float MechContrailAlpha;
	float MechCrouchTime;
	float MechDefaultBlendTime;
	float MechFirstPersonCrouchAmount;
	float MechFirstPersonDamping;
	float MechFirstPersonIgnoreReverseThreshold;
	float MechFirstPersonMaxLookTurret;
	float MechFirstPersonMaxTurnTurret;
	float MechFirstPersonStickXModerator;
	float MechFirstPersonTurretAngleThrottleStrength;
	float MechFirstPersonTurretAngleThrottleThreshold;
	float MechFirstPersonTurretBaseThrottleThreshold;
	float MechFirstPersonTurretBaseTurnThreshold;
	float MechFirstPersonTurretPitchModerator;
	float MechFirstPersonTurretShootTimer;
	float MechFirstPersonTurretThrottleLookThreshold;
	float MechFirstPersonTurretTurnModerator;
	float MechFootprintFadeDist;
	float MechFootprintFadeTime;
	float MechIdleLowBlendTime;
	float MechIdleLowDelay;
	float MechIdleStopDelay;
	float MechJetpackAvoidGroundForce;
	float MechJetpackAvoidGroundProbeLength;
	float MechJetpackBrake;
	float MechJetpackDrainRate;
	float MechJetpackFallForce;
	float MechJetpackFillRate;
	float MechJetpackForce;
	float MechJetpackIgnitionForce;
	float MechJetpackIgnitionTime;
	float MechJetpackJetScaleTime;
	float MechJetpackLandTime;
	float MechJetpackMaxCoGAdjustX;
	float MechJetpackMaxSpeed;
	float MechJetpackMaxUpSpeed;
	float MechJetpackStrafeStrength;
	float MechJetpackTurnSpeed;
	float MechJetpackUpForce;
	float MechJumpBlendTime;
	float MechJumpDownBlendTime;
	float MechJumpFlyBlendTime;
	float MechLandBlendTime;
	float MechLandBrake;
	float MechLandCameraShakeDist;
	float MechMaxTurnAngleWhileStationary;
	float MechPlayerGroundTurnSpeed;
	float MechPowerUpTime;
	float MechSpawnRotation;
	float MechSpeedBlendTime;
	float MechTitanFallCameraShakeDist;
	float MechTitanFallHeight;
	float MechTitanFallLandIdleTime;
	float MechTitanFallLandIntroTime;
	float MechTitanFallTerrainEditOffset;
	float MechTitanFallTerrainEditSize;
	float MechTurretMaxAngleAir;
	float MechTurretMaxAngleGround;
	float MechTurretTimeVRModifier;
	float MechTurretTurnTimeAir;
	float MechTurretTurnTimeGround;
	float MechTurretTurnTimeGroundPlayerCombat;
	float MechWalkToRunTimeIdle;
	float MechWalkToRunTimeSkid;
	float MechWeaponInterpSpeed;
	int32_t MiningLaserDamage;
	float MiningLaserDrainSpeed;
	int32_t MiningLaserMiningDamage;
	float MiningLaserRadius;
	float MiningLaserSpeed;
	float ProjectileDrainPerShot;
	float RaceCooldown;
	float RaceInteractRespawnOffset;
	float RaceInteractRespawnUpOffset;
	float RaceMultipleStartCaptureRange;
	float RaceMultipleStartOffset;
	float RaceResetFlashDuration;
	float RaceResetFlashIntensity;
	float RaceStartSpawnUpOffset;
	float RemoteBoostingEffectTimeout;
	float ResourceCollectOffset;
	float SpawnRotation;
	float SteeringWheelCentreOffset;
	float SteeringWheelPitchAngle;
	float SteeringWheelPushRange;
	float SteeringWheelSpringBothHands;
	float SteeringWheelSpringOneHand;
	float StickReverseTurnStiffness;
	float StickReverseTurnThreshold;
	float StickTurnReducer;
	float StickTurnReducerAltNonVR;
	float StickTurnReducerVR;
	float StickTurnReducerWater;
	int32_t StunGunBaseDamage;
	float StunGunFireRate;
	float SubmarineEjectDownOffset;
	float SubmarineEjectRadius;
	float SubmarineFirstPersonSteeringSensitivity;
	float SubmarineMinSummonDepth;
	float SummoningRange;
	float SuspensionDamping;
	float SuspensionDampingAngularFactor;
	float TestAnimBoost;
	float TestAnimThrust;
	float TestAnimTurn;
	float TestFrictionStat;
	float TestSkidFrictionStat;
	float TravelSpeedReportReducer;
	float UnderwaterBuoyancyRangeMax;
	float UnderwaterBuoyancyRangeMin;
	float UnderwaterDiveForce;
	float UnderwaterFlattenMinDepth;
	float UnderwaterFlattenRange;
	float UnderwaterJumpForce;
	float UnderwaterScannerIconRangeBoost;
	float UnderwaterSummonSurfaceOffset;
	float UnderwaterSurfaceForceFlatteningAngleMin;
	float UnderwaterSurfaceForceFlatteningAngleRange;
	float UnderwaterSurfaceOffset;
	float UnderwaterSurfaceSplashdownForce;
	float UnderwaterSurfaceSplashdownMinSpeed;
	float VehicleAltControlStickSmoothInTime;
	float VehicleAltControlStickSmoothOutTime;
	float VehicleBoostFuelRate;
	float VehicleBoostFuelRateSurvival;
	float VehicleBoostSpeedMultiplierPercent;
	float VehicleCollisionScaleFactor;
	float VehicleDeactivateRange;
	float VehicleFadeTime;
	float VehicleFuelRate;
	float VehicleFuelRateTruckMultiplier;
	float VehicleGarageHologramFadeRange;
	float VehicleGarageHologramMinFadeRange;
	float VehicleJumpCooldown;
	float VehicleJumpTimeMax;
	float VehicleJumpTimeMin;
	float VehicleMaxSummonDistance;
	float VehicleMaxSummonDistanceUnderwater;
	float VehicleMinSummonDistance;
	float VehicleMotionDeadZone;
	float VehicleSolarRegenFactor;
	float VehicleSuspensionAudioDelay;
	float VehicleSuspensionAudioScale;
	float VehicleSuspensionAudioSpacing;
	float VehicleSuspensionAudioTrigger;
	float VehicleTextSize;
	float VehicleWheelNoise;
	float VehicleWheelNoiseScale;
	float VignetteAmountAcceleration;
	float VignetteAmountTurning;
	float VisualRollUnderwaterSpring;
	float VisualTurnSpring;
	float VisualTurnUnderwaterSpring;
	float WeaponInterpSpeed;
	float WheelDustColourLightFactor;
	float WheelForceHalflife;
	float WheelSideVerticalFactor;
	NMS::NMSString0x20 MechWeaponLocatorNames[5];
	bool MechAltJumpMode;
	NMS_Toolkit::TkCurveType MechArmSwingCurveFastWalk;
	NMS_Toolkit::TkCurveType MechArmSwingCurveWalk;
	bool MechCanUpdateMeshWhileMaintenanceUIActive;
	bool MechFirstPersonTurretTweaksEnabled;
	bool MechStrafeEnabled;
	bool MechTitanFallTerrainEditEnabled;
	bool RaceFinishAtStart;
	bool ShowAllCheckpoints;
	bool ShowTempVehicleMesh;
	bool ShowVehicleDebugging;
	bool ShowVehicleParticleDebug;
	bool ShowVehicleText;
	bool ShowVehicleWheelGuards;
	NMS_Toolkit::TkCurveType SteeringWheelOutputCurve;
	bool TestAnims;
	bool ThrottleButtonCamRelative;
	NMS_Toolkit::TkCurveType UnderwaterBuoyancyDepthCurve;
	bool UseFirstPersonCamera;
	bool VehicleAltControlScheme;
	bool VehicleDrawAudioDebug;

	friend bool operator==(const GcVehicleGlobals& lhs, const GcVehicleGlobals& rhs) 
	{
		return lhs.CheckpointBeamColourActive == rhs.CheckpointBeamColourActive &&
		lhs.CheckpointBeamColourNormal == rhs.CheckpointBeamColourNormal &&
		lhs.DefaultBoosterColour == rhs.DefaultBoosterColour &&
		lhs.MechCrouchOffset == rhs.MechCrouchOffset &&
		lhs.MechWalkBackwardsCoGOffset == rhs.MechWalkBackwardsCoGOffset &&
		lhs.MechMeshPartsTable == rhs.MechMeshPartsTable &&
		std::equal(std::begin(lhs.MechWeaponData), std::end(lhs.MechWeaponData), std::begin(rhs.MechWeaponData)) &&
		std::equal(std::begin(lhs.VehicleWeaponMuzzleFlash), std::end(lhs.VehicleWeaponMuzzleFlash), std::begin(rhs.VehicleWeaponMuzzleFlash)) &&
		lhs.MechAudioEventTable == rhs.MechAudioEventTable &&
		lhs.MechEffectTable == rhs.MechEffectTable &&
		lhs.BugMechRightArmTechNameOverride == rhs.BugMechRightArmTechNameOverride &&
		lhs.SentinelRightArmTechNameOverride == rhs.SentinelRightArmTechNameOverride &&
		lhs.BugMechLeftArmTech == rhs.BugMechLeftArmTech &&
		lhs.BugMechRightArmTech == rhs.BugMechRightArmTech &&
		lhs.DefaultBikeLoadout == rhs.DefaultBikeLoadout &&
		lhs.DefaultBuggyLoadout == rhs.DefaultBuggyLoadout &&
		lhs.DefaultTruckLoadout == rhs.DefaultTruckLoadout &&
		lhs.MechArmPitchAnimLeft == rhs.MechArmPitchAnimLeft &&
		lhs.MechArmPitchAnimRight == rhs.MechArmPitchAnimRight &&
		lhs.MechStrongLaser == rhs.MechStrongLaser &&
		lhs.SentinelLeftArmTech == rhs.SentinelLeftArmTech &&
		lhs.SentinelRightArmTech == rhs.SentinelRightArmTech &&
		lhs.SentinelRightLeftArmLaserData == rhs.SentinelRightLeftArmLaserData &&
		lhs.UnderwaterBubbleOffset == rhs.UnderwaterBubbleOffset &&
		lhs.VehicleDataTable == rhs.VehicleDataTable &&
		lhs.VehicleLocalScan == rhs.VehicleLocalScan &&
		lhs.VehicleScan == rhs.VehicleScan &&
		lhs.VehicleStrongLaser == rhs.VehicleStrongLaser &&
		lhs.VehicleWeaponMuzzleDataTable == rhs.VehicleWeaponMuzzleDataTable &&
		lhs.UnderwaterAvoidance == rhs.UnderwaterAvoidance &&
		lhs.MechLookStickSpeedLimit == rhs.MechLookStickSpeedLimit &&
		lhs.MechMovementStickSpeedLimit == rhs.MechMovementStickSpeedLimit &&
		lhs.AIMechFlamethrowerFireInterval == rhs.AIMechFlamethrowerFireInterval &&
		lhs.AIMechFlamethrowerNumShotsMax == rhs.AIMechFlamethrowerNumShotsMax &&
		lhs.AIMechFlamethrowerNumShotsMin == rhs.AIMechFlamethrowerNumShotsMin &&
		lhs.AIMechGunExplosionRadius == rhs.AIMechGunExplosionRadius &&
		lhs.AIMechGunFireInterval == rhs.AIMechGunFireInterval &&
		lhs.AIMechGunInheritVelocity == rhs.AIMechGunInheritVelocity &&
		lhs.AIMechGunNumShotsMax == rhs.AIMechGunNumShotsMax &&
		lhs.AIMechGunNumShotsMin == rhs.AIMechGunNumShotsMin &&
		lhs.AIMechLaserFireDurationMax == rhs.AIMechLaserFireDurationMax &&
		lhs.AIMechLaserFireDurationMin == rhs.AIMechLaserFireDurationMin &&
		lhs.AIMechStunGunFireInterval == rhs.AIMechStunGunFireInterval &&
		lhs.AIMechStunGunNumShotsMax == rhs.AIMechStunGunNumShotsMax &&
		lhs.AIMechStunGunNumShotsMin == rhs.AIMechStunGunNumShotsMin &&
		lhs.AttractAlign == rhs.AttractAlign &&
		lhs.AttractAmount == rhs.AttractAmount &&
		lhs.AttractDirectionBrakeThresholdSq == rhs.AttractDirectionBrakeThresholdSq &&
		lhs.AttractMaxSpeed == rhs.AttractMaxSpeed &&
		lhs.BoostPadStrength == rhs.BoostPadStrength &&
		lhs.BoostPadTime == rhs.BoostPadTime &&
		lhs.BuoyancyMaxDownForce == rhs.BuoyancyMaxDownForce &&
		lhs.BuoyancyMaxUpForce == rhs.BuoyancyMaxUpForce &&
		lhs.BuoyancySurfaceFudge == rhs.BuoyancySurfaceFudge &&
		lhs.BuoyancySurfacingTime == rhs.BuoyancySurfacingTime &&
		lhs.BuoyancyUnderwaterSphereRadius == rhs.BuoyancyUnderwaterSphereRadius &&
		lhs.CheckpointBeamOffset == rhs.CheckpointBeamOffset &&
		lhs.CheckpointBeamSizeActive == rhs.CheckpointBeamSizeActive &&
		lhs.CheckpointBeamSizeNormal == rhs.CheckpointBeamSizeNormal &&
		lhs.CheckpointDeleteAngle == rhs.CheckpointDeleteAngle &&
		lhs.CheckpointDeleteDistance == rhs.CheckpointDeleteDistance &&
		lhs.CheckpointFlashDuration == rhs.CheckpointFlashDuration &&
		lhs.CheckpointFlashIntensity == rhs.CheckpointFlashIntensity &&
		lhs.CheckpointPlacementOffset == rhs.CheckpointPlacementOffset &&
		lhs.CheckpointPlacementRayLength == rhs.CheckpointPlacementRayLength &&
		lhs.CheckpointRadius == rhs.CheckpointRadius &&
		lhs.ControlStickRecenterSpeedDegPerSec == rhs.ControlStickRecenterSpeedDegPerSec &&
		lhs.DamageTechMinHitIntervalSeconds == rhs.DamageTechMinHitIntervalSeconds &&
		lhs.DamageTechNumHitsRequired == rhs.DamageTechNumHitsRequired &&
		lhs.DisablePhysicsRange == rhs.DisablePhysicsRange &&
		lhs.ExitStopForce == rhs.ExitStopForce &&
		lhs.ExitStopTime == rhs.ExitStopTime &&
		lhs.FirstPersonSteeringAdditionalForward == rhs.FirstPersonSteeringAdditionalForward &&
		lhs.FirstPersonSteeringAdditionalForwardThreshold == rhs.FirstPersonSteeringAdditionalForwardThreshold &&
		lhs.FirstPersonSteeringAdditionalReverseThreshold == rhs.FirstPersonSteeringAdditionalReverseThreshold &&
		lhs.FirstPersonSteeringLowSpeedTurnDamping == rhs.FirstPersonSteeringLowSpeedTurnDamping &&
		lhs.FirstPersonSteeringMinThrottleHardLeftRight == rhs.FirstPersonSteeringMinThrottleHardLeftRight &&
		lhs.GunBaseDamage == rhs.GunBaseDamage &&
		lhs.GunBaseMiningDamage == rhs.GunBaseMiningDamage &&
		lhs.GunFireRate == rhs.GunFireRate &&
		lhs.HeadlightIntensitySpringTime == rhs.HeadlightIntensitySpringTime &&
		lhs.HornScareFleeRadius == rhs.HornScareFleeRadius &&
		lhs.HornScareRadius == rhs.HornScareRadius &&
		lhs.HornScareTime == rhs.HornScareTime &&
		lhs.LevelVehicleCameraFactor == rhs.LevelVehicleCameraFactor &&
		lhs.MechAIGroundTurnSpeed == rhs.MechAIGroundTurnSpeed &&
		lhs.MechAIResummonMinSpawnDistance == rhs.MechAIResummonMinSpawnDistance &&
		lhs.MechAIResummonMinSpeedForVelBasedSpawnPos == rhs.MechAIResummonMinSpeedForVelBasedSpawnPos &&
		lhs.MechAIResummonTriggerDistance == rhs.MechAIResummonTriggerDistance &&
		lhs.MechAIResummonVelBasedSpawnSpeedMultiplier == rhs.MechAIResummonVelBasedSpawnSpeedMultiplier &&
		lhs.MechArmPitchAngleMax == rhs.MechArmPitchAngleMax &&
		lhs.MechArmPitchAngleMin == rhs.MechArmPitchAngleMin &&
		lhs.MechArmPitchLerpSpeed == rhs.MechArmPitchLerpSpeed &&
		lhs.MechArmSwingAngleFastWalk == rhs.MechArmSwingAngleFastWalk &&
		lhs.MechArmSwingAngleWalk == rhs.MechArmSwingAngleWalk &&
		lhs.MechArmSwingPhaseFastWalk == rhs.MechArmSwingPhaseFastWalk &&
		lhs.MechArmSwingPhaseWalk == rhs.MechArmSwingPhaseWalk &&
		lhs.MechCameraOffsetAmount == rhs.MechCameraOffsetAmount &&
		lhs.MechCameraOffsetTime == rhs.MechCameraOffsetTime &&
		lhs.MechCockPitBobPitch == rhs.MechCockPitBobPitch &&
		lhs.MechCockPitBobRoll == rhs.MechCockPitBobRoll &&
		lhs.MechCockPitBobX == rhs.MechCockPitBobX &&
		lhs.MechCockPitBobY == rhs.MechCockPitBobY &&
		lhs.MechCockPitBobYaw == rhs.MechCockPitBobYaw &&
		lhs.MechCockPowerDownY == rhs.MechCockPowerDownY &&
		lhs.MechCoGAdjustTimeAir == rhs.MechCoGAdjustTimeAir &&
		lhs.MechCoGAdjustTimeLand == rhs.MechCoGAdjustTimeLand &&
		lhs.MechCoGAdjustTimeWindUp == rhs.MechCoGAdjustTimeWindUp &&
		lhs.MechContrailAlpha == rhs.MechContrailAlpha &&
		lhs.MechCrouchTime == rhs.MechCrouchTime &&
		lhs.MechDefaultBlendTime == rhs.MechDefaultBlendTime &&
		lhs.MechFirstPersonCrouchAmount == rhs.MechFirstPersonCrouchAmount &&
		lhs.MechFirstPersonDamping == rhs.MechFirstPersonDamping &&
		lhs.MechFirstPersonIgnoreReverseThreshold == rhs.MechFirstPersonIgnoreReverseThreshold &&
		lhs.MechFirstPersonMaxLookTurret == rhs.MechFirstPersonMaxLookTurret &&
		lhs.MechFirstPersonMaxTurnTurret == rhs.MechFirstPersonMaxTurnTurret &&
		lhs.MechFirstPersonStickXModerator == rhs.MechFirstPersonStickXModerator &&
		lhs.MechFirstPersonTurretAngleThrottleStrength == rhs.MechFirstPersonTurretAngleThrottleStrength &&
		lhs.MechFirstPersonTurretAngleThrottleThreshold == rhs.MechFirstPersonTurretAngleThrottleThreshold &&
		lhs.MechFirstPersonTurretBaseThrottleThreshold == rhs.MechFirstPersonTurretBaseThrottleThreshold &&
		lhs.MechFirstPersonTurretBaseTurnThreshold == rhs.MechFirstPersonTurretBaseTurnThreshold &&
		lhs.MechFirstPersonTurretPitchModerator == rhs.MechFirstPersonTurretPitchModerator &&
		lhs.MechFirstPersonTurretShootTimer == rhs.MechFirstPersonTurretShootTimer &&
		lhs.MechFirstPersonTurretThrottleLookThreshold == rhs.MechFirstPersonTurretThrottleLookThreshold &&
		lhs.MechFirstPersonTurretTurnModerator == rhs.MechFirstPersonTurretTurnModerator &&
		lhs.MechFootprintFadeDist == rhs.MechFootprintFadeDist &&
		lhs.MechFootprintFadeTime == rhs.MechFootprintFadeTime &&
		lhs.MechIdleLowBlendTime == rhs.MechIdleLowBlendTime &&
		lhs.MechIdleLowDelay == rhs.MechIdleLowDelay &&
		lhs.MechIdleStopDelay == rhs.MechIdleStopDelay &&
		lhs.MechJetpackAvoidGroundForce == rhs.MechJetpackAvoidGroundForce &&
		lhs.MechJetpackAvoidGroundProbeLength == rhs.MechJetpackAvoidGroundProbeLength &&
		lhs.MechJetpackBrake == rhs.MechJetpackBrake &&
		lhs.MechJetpackDrainRate == rhs.MechJetpackDrainRate &&
		lhs.MechJetpackFallForce == rhs.MechJetpackFallForce &&
		lhs.MechJetpackFillRate == rhs.MechJetpackFillRate &&
		lhs.MechJetpackForce == rhs.MechJetpackForce &&
		lhs.MechJetpackIgnitionForce == rhs.MechJetpackIgnitionForce &&
		lhs.MechJetpackIgnitionTime == rhs.MechJetpackIgnitionTime &&
		lhs.MechJetpackJetScaleTime == rhs.MechJetpackJetScaleTime &&
		lhs.MechJetpackLandTime == rhs.MechJetpackLandTime &&
		lhs.MechJetpackMaxCoGAdjustX == rhs.MechJetpackMaxCoGAdjustX &&
		lhs.MechJetpackMaxSpeed == rhs.MechJetpackMaxSpeed &&
		lhs.MechJetpackMaxUpSpeed == rhs.MechJetpackMaxUpSpeed &&
		lhs.MechJetpackStrafeStrength == rhs.MechJetpackStrafeStrength &&
		lhs.MechJetpackTurnSpeed == rhs.MechJetpackTurnSpeed &&
		lhs.MechJetpackUpForce == rhs.MechJetpackUpForce &&
		lhs.MechJumpBlendTime == rhs.MechJumpBlendTime &&
		lhs.MechJumpDownBlendTime == rhs.MechJumpDownBlendTime &&
		lhs.MechJumpFlyBlendTime == rhs.MechJumpFlyBlendTime &&
		lhs.MechLandBlendTime == rhs.MechLandBlendTime &&
		lhs.MechLandBrake == rhs.MechLandBrake &&
		lhs.MechLandCameraShakeDist == rhs.MechLandCameraShakeDist &&
		lhs.MechMaxTurnAngleWhileStationary == rhs.MechMaxTurnAngleWhileStationary &&
		lhs.MechPlayerGroundTurnSpeed == rhs.MechPlayerGroundTurnSpeed &&
		lhs.MechPowerUpTime == rhs.MechPowerUpTime &&
		lhs.MechSpawnRotation == rhs.MechSpawnRotation &&
		lhs.MechSpeedBlendTime == rhs.MechSpeedBlendTime &&
		lhs.MechTitanFallCameraShakeDist == rhs.MechTitanFallCameraShakeDist &&
		lhs.MechTitanFallHeight == rhs.MechTitanFallHeight &&
		lhs.MechTitanFallLandIdleTime == rhs.MechTitanFallLandIdleTime &&
		lhs.MechTitanFallLandIntroTime == rhs.MechTitanFallLandIntroTime &&
		lhs.MechTitanFallTerrainEditOffset == rhs.MechTitanFallTerrainEditOffset &&
		lhs.MechTitanFallTerrainEditSize == rhs.MechTitanFallTerrainEditSize &&
		lhs.MechTurretMaxAngleAir == rhs.MechTurretMaxAngleAir &&
		lhs.MechTurretMaxAngleGround == rhs.MechTurretMaxAngleGround &&
		lhs.MechTurretTimeVRModifier == rhs.MechTurretTimeVRModifier &&
		lhs.MechTurretTurnTimeAir == rhs.MechTurretTurnTimeAir &&
		lhs.MechTurretTurnTimeGround == rhs.MechTurretTurnTimeGround &&
		lhs.MechTurretTurnTimeGroundPlayerCombat == rhs.MechTurretTurnTimeGroundPlayerCombat &&
		lhs.MechWalkToRunTimeIdle == rhs.MechWalkToRunTimeIdle &&
		lhs.MechWalkToRunTimeSkid == rhs.MechWalkToRunTimeSkid &&
		lhs.MechWeaponInterpSpeed == rhs.MechWeaponInterpSpeed &&
		lhs.MiningLaserDamage == rhs.MiningLaserDamage &&
		lhs.MiningLaserDrainSpeed == rhs.MiningLaserDrainSpeed &&
		lhs.MiningLaserMiningDamage == rhs.MiningLaserMiningDamage &&
		lhs.MiningLaserRadius == rhs.MiningLaserRadius &&
		lhs.MiningLaserSpeed == rhs.MiningLaserSpeed &&
		lhs.ProjectileDrainPerShot == rhs.ProjectileDrainPerShot &&
		lhs.RaceCooldown == rhs.RaceCooldown &&
		lhs.RaceInteractRespawnOffset == rhs.RaceInteractRespawnOffset &&
		lhs.RaceInteractRespawnUpOffset == rhs.RaceInteractRespawnUpOffset &&
		lhs.RaceMultipleStartCaptureRange == rhs.RaceMultipleStartCaptureRange &&
		lhs.RaceMultipleStartOffset == rhs.RaceMultipleStartOffset &&
		lhs.RaceResetFlashDuration == rhs.RaceResetFlashDuration &&
		lhs.RaceResetFlashIntensity == rhs.RaceResetFlashIntensity &&
		lhs.RaceStartSpawnUpOffset == rhs.RaceStartSpawnUpOffset &&
		lhs.RemoteBoostingEffectTimeout == rhs.RemoteBoostingEffectTimeout &&
		lhs.ResourceCollectOffset == rhs.ResourceCollectOffset &&
		lhs.SpawnRotation == rhs.SpawnRotation &&
		lhs.SteeringWheelCentreOffset == rhs.SteeringWheelCentreOffset &&
		lhs.SteeringWheelPitchAngle == rhs.SteeringWheelPitchAngle &&
		lhs.SteeringWheelPushRange == rhs.SteeringWheelPushRange &&
		lhs.SteeringWheelSpringBothHands == rhs.SteeringWheelSpringBothHands &&
		lhs.SteeringWheelSpringOneHand == rhs.SteeringWheelSpringOneHand &&
		lhs.StickReverseTurnStiffness == rhs.StickReverseTurnStiffness &&
		lhs.StickReverseTurnThreshold == rhs.StickReverseTurnThreshold &&
		lhs.StickTurnReducer == rhs.StickTurnReducer &&
		lhs.StickTurnReducerAltNonVR == rhs.StickTurnReducerAltNonVR &&
		lhs.StickTurnReducerVR == rhs.StickTurnReducerVR &&
		lhs.StickTurnReducerWater == rhs.StickTurnReducerWater &&
		lhs.StunGunBaseDamage == rhs.StunGunBaseDamage &&
		lhs.StunGunFireRate == rhs.StunGunFireRate &&
		lhs.SubmarineEjectDownOffset == rhs.SubmarineEjectDownOffset &&
		lhs.SubmarineEjectRadius == rhs.SubmarineEjectRadius &&
		lhs.SubmarineFirstPersonSteeringSensitivity == rhs.SubmarineFirstPersonSteeringSensitivity &&
		lhs.SubmarineMinSummonDepth == rhs.SubmarineMinSummonDepth &&
		lhs.SummoningRange == rhs.SummoningRange &&
		lhs.SuspensionDamping == rhs.SuspensionDamping &&
		lhs.SuspensionDampingAngularFactor == rhs.SuspensionDampingAngularFactor &&
		lhs.TestAnimBoost == rhs.TestAnimBoost &&
		lhs.TestAnimThrust == rhs.TestAnimThrust &&
		lhs.TestAnimTurn == rhs.TestAnimTurn &&
		lhs.TestFrictionStat == rhs.TestFrictionStat &&
		lhs.TestSkidFrictionStat == rhs.TestSkidFrictionStat &&
		lhs.TravelSpeedReportReducer == rhs.TravelSpeedReportReducer &&
		lhs.UnderwaterBuoyancyRangeMax == rhs.UnderwaterBuoyancyRangeMax &&
		lhs.UnderwaterBuoyancyRangeMin == rhs.UnderwaterBuoyancyRangeMin &&
		lhs.UnderwaterDiveForce == rhs.UnderwaterDiveForce &&
		lhs.UnderwaterFlattenMinDepth == rhs.UnderwaterFlattenMinDepth &&
		lhs.UnderwaterFlattenRange == rhs.UnderwaterFlattenRange &&
		lhs.UnderwaterJumpForce == rhs.UnderwaterJumpForce &&
		lhs.UnderwaterScannerIconRangeBoost == rhs.UnderwaterScannerIconRangeBoost &&
		lhs.UnderwaterSummonSurfaceOffset == rhs.UnderwaterSummonSurfaceOffset &&
		lhs.UnderwaterSurfaceForceFlatteningAngleMin == rhs.UnderwaterSurfaceForceFlatteningAngleMin &&
		lhs.UnderwaterSurfaceForceFlatteningAngleRange == rhs.UnderwaterSurfaceForceFlatteningAngleRange &&
		lhs.UnderwaterSurfaceOffset == rhs.UnderwaterSurfaceOffset &&
		lhs.UnderwaterSurfaceSplashdownForce == rhs.UnderwaterSurfaceSplashdownForce &&
		lhs.UnderwaterSurfaceSplashdownMinSpeed == rhs.UnderwaterSurfaceSplashdownMinSpeed &&
		lhs.VehicleAltControlStickSmoothInTime == rhs.VehicleAltControlStickSmoothInTime &&
		lhs.VehicleAltControlStickSmoothOutTime == rhs.VehicleAltControlStickSmoothOutTime &&
		lhs.VehicleBoostFuelRate == rhs.VehicleBoostFuelRate &&
		lhs.VehicleBoostFuelRateSurvival == rhs.VehicleBoostFuelRateSurvival &&
		lhs.VehicleBoostSpeedMultiplierPercent == rhs.VehicleBoostSpeedMultiplierPercent &&
		lhs.VehicleCollisionScaleFactor == rhs.VehicleCollisionScaleFactor &&
		lhs.VehicleDeactivateRange == rhs.VehicleDeactivateRange &&
		lhs.VehicleFadeTime == rhs.VehicleFadeTime &&
		lhs.VehicleFuelRate == rhs.VehicleFuelRate &&
		lhs.VehicleFuelRateTruckMultiplier == rhs.VehicleFuelRateTruckMultiplier &&
		lhs.VehicleGarageHologramFadeRange == rhs.VehicleGarageHologramFadeRange &&
		lhs.VehicleGarageHologramMinFadeRange == rhs.VehicleGarageHologramMinFadeRange &&
		lhs.VehicleJumpCooldown == rhs.VehicleJumpCooldown &&
		lhs.VehicleJumpTimeMax == rhs.VehicleJumpTimeMax &&
		lhs.VehicleJumpTimeMin == rhs.VehicleJumpTimeMin &&
		lhs.VehicleMaxSummonDistance == rhs.VehicleMaxSummonDistance &&
		lhs.VehicleMaxSummonDistanceUnderwater == rhs.VehicleMaxSummonDistanceUnderwater &&
		lhs.VehicleMinSummonDistance == rhs.VehicleMinSummonDistance &&
		lhs.VehicleMotionDeadZone == rhs.VehicleMotionDeadZone &&
		lhs.VehicleSolarRegenFactor == rhs.VehicleSolarRegenFactor &&
		lhs.VehicleSuspensionAudioDelay == rhs.VehicleSuspensionAudioDelay &&
		lhs.VehicleSuspensionAudioScale == rhs.VehicleSuspensionAudioScale &&
		lhs.VehicleSuspensionAudioSpacing == rhs.VehicleSuspensionAudioSpacing &&
		lhs.VehicleSuspensionAudioTrigger == rhs.VehicleSuspensionAudioTrigger &&
		lhs.VehicleTextSize == rhs.VehicleTextSize &&
		lhs.VehicleWheelNoise == rhs.VehicleWheelNoise &&
		lhs.VehicleWheelNoiseScale == rhs.VehicleWheelNoiseScale &&
		lhs.VignetteAmountAcceleration == rhs.VignetteAmountAcceleration &&
		lhs.VignetteAmountTurning == rhs.VignetteAmountTurning &&
		lhs.VisualRollUnderwaterSpring == rhs.VisualRollUnderwaterSpring &&
		lhs.VisualTurnSpring == rhs.VisualTurnSpring &&
		lhs.VisualTurnUnderwaterSpring == rhs.VisualTurnUnderwaterSpring &&
		lhs.WeaponInterpSpeed == rhs.WeaponInterpSpeed &&
		lhs.WheelDustColourLightFactor == rhs.WheelDustColourLightFactor &&
		lhs.WheelForceHalflife == rhs.WheelForceHalflife &&
		lhs.WheelSideVerticalFactor == rhs.WheelSideVerticalFactor &&
		std::equal(std::begin(lhs.MechWeaponLocatorNames), std::end(lhs.MechWeaponLocatorNames), std::begin(rhs.MechWeaponLocatorNames)) &&
		lhs.MechAltJumpMode == rhs.MechAltJumpMode &&
		lhs.MechArmSwingCurveFastWalk == rhs.MechArmSwingCurveFastWalk &&
		lhs.MechArmSwingCurveWalk == rhs.MechArmSwingCurveWalk &&
		lhs.MechCanUpdateMeshWhileMaintenanceUIActive == rhs.MechCanUpdateMeshWhileMaintenanceUIActive &&
		lhs.MechFirstPersonTurretTweaksEnabled == rhs.MechFirstPersonTurretTweaksEnabled &&
		lhs.MechStrafeEnabled == rhs.MechStrafeEnabled &&
		lhs.MechTitanFallTerrainEditEnabled == rhs.MechTitanFallTerrainEditEnabled &&
		lhs.RaceFinishAtStart == rhs.RaceFinishAtStart &&
		lhs.ShowAllCheckpoints == rhs.ShowAllCheckpoints &&
		lhs.ShowTempVehicleMesh == rhs.ShowTempVehicleMesh &&
		lhs.ShowVehicleDebugging == rhs.ShowVehicleDebugging &&
		lhs.ShowVehicleParticleDebug == rhs.ShowVehicleParticleDebug &&
		lhs.ShowVehicleText == rhs.ShowVehicleText &&
		lhs.ShowVehicleWheelGuards == rhs.ShowVehicleWheelGuards &&
		lhs.SteeringWheelOutputCurve == rhs.SteeringWheelOutputCurve &&
		lhs.TestAnims == rhs.TestAnims &&
		lhs.ThrottleButtonCamRelative == rhs.ThrottleButtonCamRelative &&
		lhs.UnderwaterBuoyancyDepthCurve == rhs.UnderwaterBuoyancyDepthCurve &&
		lhs.UseFirstPersonCamera == rhs.UseFirstPersonCamera &&
		lhs.VehicleAltControlScheme == rhs.VehicleAltControlScheme &&
		lhs.VehicleDrawAudioDebug == rhs.VehicleDrawAudioDebug;
	}
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

struct TKNGuiEditorComponentSize
{
	enum class NGuiEditorComponentSizeEnum : uint32_t
	{
		WindowResize = 0,
		WindowButton = 1,
		MinimumWindowHeight = 2,
		MinimumWindowWidth = 3,
		Indent = 4,
		SeparatorHeight = 5,
		SeparatorWidth = 6,
		TreeNodeExpander = 7,
		CheckBox = 8,
		Adjuster = 9,
		Cursor = 10,
		TextEditSeparator = 11,
		DefaultLineHeight = 12,
		ColourEditHeight = 13,
		ColourEditWidth = 14,
		FileBrowser = 15,
		EditorResize = 16,
		EditorMove = 17,
		IconButton = 18,
		SliderKnob = 19,
		SliderBarWidth = 20,
		SliderBarHeight = 21,
		CategoryHeight = 22,
		WindowTitle = 23,
		MinimumTabWidth = 24,
		ScrollSpeed = 25,
		ComboBox = 26,
		Taskbar = 27,
		IconListItem = 28,
		StartBarWindowButton = 29,
		StartBarWindowListItem = 30,
		StartBarWindowSeparatorWidth = 31,
		StartBarWindowChildOffset = 32,
		Toolbar = 33,
		ToolbarOptions = 34,
		GlobalSearchBox = 35,
		SearchBox = 36,
		StartBarWindowWidth = 37,
		StartBarHeight = 38,
		StartBarWindowSearchWidth = 39,
		GlobalsMenuWidth = 40,
		TreeNodeSpacing = 41,
		VectorSpacing = 42,
		SliderMinSpacing = 43,
		VectorMinSpacing = 44,
		ColourAlphaMinsize = 45,
		SpacingGap = 46,
		Scroll = 47,
		TextLabelSeparator = 48,
		AlignmentAnchor = 49,
		MinimiseHighlightHeight = 50,
		TableButtonSpacing = 51,
		TableHeaderHeight = 52,
		TreeNodeHeight = 53,
		ScrollMargin = 54,
		ScrollIncrement = 55,
		EditorPin = 56,
		DynamicPanelTitle = 57,
		FavouriteValueStar = 58,
		ShortcutBar = 59,
		RevertButton = 60,
		ToolbarItemPadding = 61,
		ContextMenuWidth = 62,
		TooltipButtonSize = 63,
		TooltipMaxWidth = 64,
	};

	NMS_Toolkit::TKNGuiEditorComponentSize::NGuiEditorComponentSizeEnum NGuiEditorComponentSize;

	friend bool operator==(const TKNGuiEditorComponentSize& lhs, const TKNGuiEditorComponentSize& rhs) 
	{
		return lhs.NGuiEditorComponentSize == rhs.NGuiEditorComponentSize;
	}
};

struct TKNGuiEditorTextType
{
	enum class NGuiEditorTextEnum : uint32_t
	{
		Text = 0,
		Button = 1,
		WindowTab = 2,
		WindowTabInactive = 3,
		TreeNode = 4,
		CheckBox = 5,
		TextInput = 6,
		TextInputLabel = 7,
		TextInputLabelHeader = 8,
		Category = 9,
		TaskBar = 10,
		GroupTitle = 11,
		TreeNodeSelected = 12,
		DynamicPanelTitle = 13,
		ContextMenuButton = 14,
	};

	NMS_Toolkit::TKNGuiEditorTextType::NGuiEditorTextEnum NGuiEditorText;

	friend bool operator==(const TKNGuiEditorTextType& lhs, const TKNGuiEditorTextType& rhs) 
	{
		return lhs.NGuiEditorText == rhs.NGuiEditorText;
	}
};

//Dependency: TkActionButtonMap
struct TkActionButtonLookup
{
	std::vector<NMS_Toolkit::TkActionButtonMap> Lookup;

	friend bool operator==(const TkActionButtonLookup& lhs, const TkActionButtonLookup& rhs) 
	{
		return lhs.Lookup == rhs.Lookup;
	}
};

//Dependency: TkCurveType
//Dependency: NMSString0x20
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimAnimNode
{
	enum class SyncGroupRoleEnum : uint32_t
	{
		CanBeLeader = 0,
		AlwaysLeader = 1,
		NeverLeader = 2,
	};

	NMS::NMSString0x20 DisplayName;
	NMS::NMSString0x10 AnimId;
	NMS::NMSString0x40 PhaseIn;
	NMS_Toolkit::TkCurveType PhaseCurve;
	float PhaseRangeBegin;
	float PhaseRangeEnd;
	NMS::NMSString0x10 SyncGroup;
	NMS_Toolkit::TkAnimAnimNode::SyncGroupRoleEnum SyncGroupRole;

	friend bool operator==(const TkAnimAnimNode& lhs, const TkAnimAnimNode& rhs) 
	{
		return lhs.DisplayName == rhs.DisplayName &&
		lhs.AnimId == rhs.AnimId &&
		lhs.PhaseIn == rhs.PhaseIn &&
		lhs.PhaseCurve == rhs.PhaseCurve &&
		lhs.PhaseRangeBegin == rhs.PhaseRangeBegin &&
		lhs.PhaseRangeEnd == rhs.PhaseRangeEnd &&
		lhs.SyncGroup == rhs.SyncGroup &&
		lhs.SyncGroupRole == rhs.SyncGroupRole;
	}
};

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimBlendNode
{
	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 WeightIn;
	float WeightRangeBegin;
	float WeightRangeEnd;
	float WeightSpringTime;
	NMS_Toolkit::TkCurveType WeightCurve;
	float InitialWeight;
	NMSTemplate BlendLeft;
	NMSTemplate BlendRight;

	friend bool operator==(const TkAnimBlendNode& lhs, const TkAnimBlendNode& rhs) 
	{
		return lhs.NodeId == rhs.NodeId &&
		lhs.WeightIn == rhs.WeightIn &&
		lhs.WeightRangeBegin == rhs.WeightRangeBegin &&
		lhs.WeightRangeEnd == rhs.WeightRangeEnd &&
		lhs.WeightSpringTime == rhs.WeightSpringTime &&
		lhs.WeightCurve == rhs.WeightCurve &&
		lhs.InitialWeight == rhs.InitialWeight &&
		lhs.BlendLeft == rhs.BlendLeft &&
		lhs.BlendRight == rhs.BlendRight;
	}
};

//Dependency: halfVector4
struct TkAnimNodeFrameHalfData
{
	std::vector<uint16_t> Rotations;
	std::vector<NMS::halfVector4> Scales;
	std::vector<NMS::halfVector4> Translations;

	friend bool operator==(const TkAnimNodeFrameHalfData& lhs, const TkAnimNodeFrameHalfData& rhs) 
	{
		return lhs.Rotations == rhs.Rotations &&
		lhs.Scales == rhs.Scales &&
		lhs.Translations == rhs.Translations;
	}
};

//Dependency: TkAnimNodeFrameHalfData
//Dependency: TkAnimNodeData
struct TkAnimCompactMetadata
{
	NMS_Toolkit::TkAnimNodeFrameHalfData StillFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeFrameHalfData> AnimFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeData> NodeData;
	int32_t FrameCount;
	int32_t NodeCount;
	bool Has30HzFrames;

	friend bool operator==(const TkAnimCompactMetadata& lhs, const TkAnimCompactMetadata& rhs) 
	{
		return lhs.StillFrameData == rhs.StillFrameData &&
		lhs.AnimFrameData == rhs.AnimFrameData &&
		lhs.NodeData == rhs.NodeData &&
		lhs.FrameCount == rhs.FrameCount &&
		lhs.NodeCount == rhs.NodeCount &&
		lhs.Has30HzFrames == rhs.Has30HzFrames;
	}
};

//Dependency: Quaternion
//Dependency: Vector3f
struct TkAnimNodeFrameData
{
	std::vector<NMS::Quaternion> Rotations;
	std::vector<NMS::Vector3f> Scales;
	std::vector<NMS::Vector3f> Translations;

	friend bool operator==(const TkAnimNodeFrameData& lhs, const TkAnimNodeFrameData& rhs) 
	{
		return lhs.Rotations == rhs.Rotations &&
		lhs.Scales == rhs.Scales &&
		lhs.Translations == rhs.Translations;
	}
};

//Dependency: TkAnimNodeFrameData
//Dependency: TkAnimNodeData
struct TkAnimMetadata
{
	NMS_Toolkit::TkAnimNodeFrameData StillFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeFrameData> AnimFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeData> NodeData;
	int32_t FrameCount;
	int32_t NodeCount;
	bool Has30HzFrames;

	friend bool operator==(const TkAnimMetadata& lhs, const TkAnimMetadata& rhs) 
	{
		return lhs.StillFrameData == rhs.StillFrameData &&
		lhs.AnimFrameData == rhs.AnimFrameData &&
		lhs.NodeData == rhs.NodeData &&
		lhs.FrameCount == rhs.FrameCount &&
		lhs.NodeCount == rhs.NodeCount &&
		lhs.Has30HzFrames == rhs.Has30HzFrames;
	}
};

//Dependency: TkAnimStateMachineData
//Dependency: NMSString0x10
struct TkAnimStateMachineLayerData
{
	NMS_Toolkit::TkAnimStateMachineData StateMachineContainer;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkAnimStateMachineLayerData& lhs, const TkAnimStateMachineLayerData& rhs) 
	{
		return lhs.StateMachineContainer == rhs.StateMachineContainer &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterBool
{
	NMS::NMSString0x10 Name;
	bool Default;

	friend bool operator==(const TkAnimStateMachineParameterBool& lhs, const TkAnimStateMachineParameterBool& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Default == rhs.Default;
	}
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterFloat
{
	NMS::NMSString0x10 Name;
	float Default;

	friend bool operator==(const TkAnimStateMachineParameterFloat& lhs, const TkAnimStateMachineParameterFloat& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Default == rhs.Default;
	}
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterInt
{
	NMS::NMSString0x10 Name;
	int32_t Default;

	friend bool operator==(const TkAnimStateMachineParameterInt& lhs, const TkAnimStateMachineParameterInt& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Default == rhs.Default;
	}
};

//Dependency: TkAnimStateMachineData
//Dependency: NMSString0x20A
struct TkLayeredAnimStateMachineData
{
	NMS::NMSString0x20A Id;
	std::vector<NMS_Toolkit::TkAnimStateMachineData> Layers;
	std::vector<NMSTemplate> Parameters;

	friend bool operator==(const TkLayeredAnimStateMachineData& lhs, const TkLayeredAnimStateMachineData& rhs) 
	{
		return lhs.Id == rhs.Id &&
		lhs.Layers == rhs.Layers &&
		lhs.Parameters == rhs.Parameters;
	}
};

//Dependency: TkLayeredAnimStateMachineData
struct TkAnimStateMachineTable
{
	std::vector<NMS_Toolkit::TkLayeredAnimStateMachineData> Table;

	friend bool operator==(const TkAnimStateMachineTable& lhs, const TkAnimStateMachineTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionFloatData
{
	enum class FloatComparisonModeEnum : uint32_t
	{
		LessThan = 0,
		LessThanEqual = 1,
		GreaterThanEqual = 2,
		GreaterThan = 3,
	};

	NMS::NMSString0x10 Parameter;
	float CompareValue;
	NMS_Toolkit::TkAnimStateMachineTransitionConditionFloatData::FloatComparisonModeEnum FloatComparisonMode;

	friend bool operator==(const TkAnimStateMachineTransitionConditionFloatData& lhs, const TkAnimStateMachineTransitionConditionFloatData& rhs) 
	{
		return lhs.Parameter == rhs.Parameter &&
		lhs.CompareValue == rhs.CompareValue &&
		lhs.FloatComparisonMode == rhs.FloatComparisonMode;
	}
};

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionIntData
{
	enum class IntComparisonModeEnum : uint32_t
	{
		LessThan = 0,
		LessThanEqual = 1,
		Equal = 2,
		GreaterThanEqual = 3,
		GreaterThan = 4,
	};

	NMS::NMSString0x10 Parameter;
	int32_t CompareValue;
	NMS_Toolkit::TkAnimStateMachineTransitionConditionIntData::IntComparisonModeEnum IntComparisonMode;

	friend bool operator==(const TkAnimStateMachineTransitionConditionIntData& lhs, const TkAnimStateMachineTransitionConditionIntData& rhs) 
	{
		return lhs.Parameter == rhs.Parameter &&
		lhs.CompareValue == rhs.CompareValue &&
		lhs.IntComparisonMode == rhs.IntComparisonMode;
	}
};

struct TkAnimStateMachineTransitionConditionStateTimeData
{
	float MaxTime;
	float MinTime;

	friend bool operator==(const TkAnimStateMachineTransitionConditionStateTimeData& lhs, const TkAnimStateMachineTransitionConditionStateTimeData& rhs) 
	{
		return lhs.MaxTime == rhs.MaxTime &&
		lhs.MinTime == rhs.MinTime;
	}
};

//Dependency: TkAnimVectorBlendNodeData
//Dependency: NMSString0x10
struct TkAnimVectorBlendNode
{
	enum class BlendOperationEnum : uint32_t
	{
		Blend = 0,
		Add = 1,
	};

	std::vector<NMS_Toolkit::TkAnimVectorBlendNodeData> BlendChildren;
	NMS::NMSString0x10 NodeId;
	NMS_Toolkit::TkAnimVectorBlendNode::BlendOperationEnum BlendOperation;

	friend bool operator==(const TkAnimVectorBlendNode& lhs, const TkAnimVectorBlendNode& rhs) 
	{
		return lhs.BlendChildren == rhs.BlendChildren &&
		lhs.NodeId == rhs.NodeId &&
		lhs.BlendOperation == rhs.BlendOperation;
	}
};

//Dependency: NMSString0x20
struct TkDynamicChainComponentData
{
	std::vector<NMS::NMSString0x20> IgnoreJoints;
	float AirThickness;
	float AngularDamping;
	float AngularLimit;
	float BodyMassChange;
	float Gravity;
	float InitialBodyMass;
	float LinearDamping;
	float MaxMotorForce;
	float MotorStrengthCone;
	float MotorStrengthTwist;
	float TwistLimit;
	float VertAirThickness;
	float WindStrength;
	bool WeightByJointLength;

	friend bool operator==(const TkDynamicChainComponentData& lhs, const TkDynamicChainComponentData& rhs) 
	{
		return lhs.IgnoreJoints == rhs.IgnoreJoints &&
		lhs.AirThickness == rhs.AirThickness &&
		lhs.AngularDamping == rhs.AngularDamping &&
		lhs.AngularLimit == rhs.AngularLimit &&
		lhs.BodyMassChange == rhs.BodyMassChange &&
		lhs.Gravity == rhs.Gravity &&
		lhs.InitialBodyMass == rhs.InitialBodyMass &&
		lhs.LinearDamping == rhs.LinearDamping &&
		lhs.MaxMotorForce == rhs.MaxMotorForce &&
		lhs.MotorStrengthCone == rhs.MotorStrengthCone &&
		lhs.MotorStrengthTwist == rhs.MotorStrengthTwist &&
		lhs.TwistLimit == rhs.TwistLimit &&
		lhs.VertAirThickness == rhs.VertAirThickness &&
		lhs.WindStrength == rhs.WindStrength &&
		lhs.WeightByJointLength == rhs.WeightByJointLength;
	}
};

//Dependency: TkAnimationData
//Dependency: TkAnimJointLODData
//Dependency: TkAnimRandomOneShots
//Dependency: TkAnimBlendTree
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkAnimationComponentData
{
	NMS_Toolkit::TkAnimationData Idle;
	NMS::NMSString0x10 AnimGroup;
	std::vector<NMS::VariableSizeString> AnimLibraries;
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	std::vector<NMS_Toolkit::TkAnimJointLODData> JointLODOverrides;
	std::vector<NMS_Toolkit::TkAnimRandomOneShots> RandomOneShots;
	std::vector<NMS_Toolkit::TkAnimBlendTree> Trees;
	bool NetSyncAnimations;

	friend bool operator==(const TkAnimationComponentData& lhs, const TkAnimationComponentData& rhs) 
	{
		return lhs.Idle == rhs.Idle &&
		lhs.AnimGroup == rhs.AnimGroup &&
		lhs.AnimLibraries == rhs.AnimLibraries &&
		lhs.Anims == rhs.Anims &&
		lhs.JointLODOverrides == rhs.JointLODOverrides &&
		lhs.RandomOneShots == rhs.RandomOneShots &&
		lhs.Trees == rhs.Trees &&
		lhs.NetSyncAnimations == rhs.NetSyncAnimations;
	}
};

//Dependency: TkAnimationData
struct TkAnimationDataTable
{
	std::vector<NMS_Toolkit::TkAnimationData> Table;

	friend bool operator==(const TkAnimationDataTable& lhs, const TkAnimationDataTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x10
struct TkAnimationNotifyGeneric
{
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkAnimationNotifyGeneric& lhs, const TkAnimationNotifyGeneric& rhs) 
	{
		return lhs.Id == rhs.Id;
	}
};

//Dependency: Vector3f
struct TkAudioEmitterLine
{
	NMS::Vector3f End;
	NMS::Vector3f Start;
	float Spacing;

	friend bool operator==(const TkAudioEmitterLine& lhs, const TkAudioEmitterLine& rhs) 
	{
		return lhs.End == rhs.End &&
		lhs.Start == rhs.Start &&
		lhs.Spacing == rhs.Spacing;
	}
};

//Dependency: TkAxisPathMapping
struct TkAxisImageLookup
{
	std::vector<NMS_Toolkit::TkAxisPathMapping> Lookup;

	friend bool operator==(const TkAxisImageLookup& lhs, const TkAxisImageLookup& rhs) 
	{
		return lhs.Lookup == rhs.Lookup;
	}
};

//Dependency: NMSString0x10
struct TkBehaviourTreeConcurrentSelectorData
{
	enum class SucceedWhenEnum : uint32_t
	{
		AllChildrenSucceed = 0,
		AnyChildSucceeds = 1,
	};

	enum class FailWhenEnum : uint32_t
	{
		AnyChildFails = 0,
		AllChildrenFail = 1,
	};

	std::vector<NMSTemplate> Children;
	NMS::NMSString0x10 Name;
	NMS_Toolkit::TkBehaviourTreeConcurrentSelectorData::FailWhenEnum FailWhen;
	NMS_Toolkit::TkBehaviourTreeConcurrentSelectorData::SucceedWhenEnum SucceedWhen;

	friend bool operator==(const TkBehaviourTreeConcurrentSelectorData& lhs, const TkBehaviourTreeConcurrentSelectorData& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.Name == rhs.Name &&
		lhs.FailWhen == rhs.FailWhen &&
		lhs.SucceedWhen == rhs.SucceedWhen;
	}
};

//Dependency: NMSString0x10
struct TkBehaviourTreeSequentialSelectorData
{
	std::vector<NMSTemplate> Children;
	NMS::NMSString0x10 Name;
	bool FailWhenAnyChildFails;
	bool Looping;

	friend bool operator==(const TkBehaviourTreeSequentialSelectorData& lhs, const TkBehaviourTreeSequentialSelectorData& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.Name == rhs.Name &&
		lhs.FailWhenAnyChildFails == rhs.FailWhenAnyChildFails &&
		lhs.Looping == rhs.Looping;
	}
};

struct TkBehaviourTreeSucceedDecoratorData
{
	NMSTemplate Child;

	friend bool operator==(const TkBehaviourTreeSucceedDecoratorData& lhs, const TkBehaviourTreeSucceedDecoratorData& rhs) 
	{
		return lhs.Child == rhs.Child;
	}
};

//Dependency: TkLSystemInnerRule
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemRule
{
	enum class RuleTypeEnum : uint32_t
	{
		Default = 0,
		BaseRule = 1,
	};

	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemInnerRule> Rules;
	NMS_Toolkit::TkLSystemRule::RuleTypeEnum RuleType;
	NMS::NMSString0x20 Name;

	friend bool operator==(const TkLSystemRule& lhs, const TkLSystemRule& rhs) 
	{
		return lhs.Model == rhs.Model &&
		lhs.Rules == rhs.Rules &&
		lhs.RuleType == rhs.RuleType &&
		lhs.Name == rhs.Name;
	}
};

//Dependency: TkLSystemGlobalRestriction
//Dependency: TkLSystemGlobalVariation
//Dependency: TkLSystemRule
//Dependency: TkLSystemRuleTemplate
struct TkLSystemRulesData
{
	std::vector<NMS_Toolkit::TkLSystemGlobalRestriction> GlobalRestriction;
	std::vector<NMS_Toolkit::TkLSystemGlobalVariation> GlobalVariation;
	std::vector<NMS_Toolkit::TkLSystemRule> Rules;
	std::vector<NMS_Toolkit::TkLSystemRuleTemplate> Templates;

	friend bool operator==(const TkLSystemRulesData& lhs, const TkLSystemRulesData& rhs) 
	{
		return lhs.GlobalRestriction == rhs.GlobalRestriction &&
		lhs.GlobalVariation == rhs.GlobalVariation &&
		lhs.Rules == rhs.Rules &&
		lhs.Templates == rhs.Templates;
	}
};

struct TkBlackboardType
{
	enum class BlackboardTypeEnum : uint32_t
	{
		Invalid = 0,
		Float = 1,
		Integer = 2,
		Bool = 3,
		Id = 4,
		Vector = 5,
		Attachment = 6,
	};

	NMS_Toolkit::TkBlackboardType::BlackboardTypeEnum BlackboardType;

	friend bool operator==(const TkBlackboardType& lhs, const TkBlackboardType& rhs) 
	{
		return lhs.BlackboardType == rhs.BlackboardType;
	}
};

//Dependency: NMSString0x10
struct TkBlackboardValueBool
{
	NMS::NMSString0x10 Key;
	bool Value;

	friend bool operator==(const TkBlackboardValueBool& lhs, const TkBlackboardValueBool& rhs) 
	{
		return lhs.Key == rhs.Key &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: NMSString0x10
struct TkBlackboardValueId
{
	NMS::NMSString0x10 Key;
	NMS::NMSString0x10 Value;

	friend bool operator==(const TkBlackboardValueId& lhs, const TkBlackboardValueId& rhs) 
	{
		return lhs.Key == rhs.Key &&
		lhs.Value == rhs.Value;
	}
};

//Dependency: Vector3f
struct TkBoundingBoxData
{
	NMS::Vector3f Max;
	NMS::Vector3f Min;

	friend bool operator==(const TkBoundingBoxData& lhs, const TkBoundingBoxData& rhs) 
	{
		return lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min;
	}
};

struct TkCameraAttachmentData
{
	float BaseOffset;
	float OffsetScaler;

	friend bool operator==(const TkCameraAttachmentData& lhs, const TkCameraAttachmentData& rhs) 
	{
		return lhs.BaseOffset == rhs.BaseOffset &&
		lhs.OffsetScaler == rhs.OffsetScaler;
	}
};

//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkChordPathMapping
{
	NMS::NMSString0x20A Name;
	std::vector<NMS_Toolkit::TkInputEnum> ButtonIds;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS::NMSString0x10 TextTag;

	friend bool operator==(const TkChordPathMapping& lhs, const TkChordPathMapping& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.ButtonIds == rhs.ButtonIds &&
		lhs.OverlayIcon == rhs.OverlayIcon &&
		lhs.SolidIcon == rhs.SolidIcon &&
		lhs.SpecialIcon == rhs.SpecialIcon &&
		lhs.TextTag == rhs.TextTag;
	}
};

//Dependency: TkChordPathMapping
struct TkChordsImageLookup
{
	std::vector<NMS_Toolkit::TkChordPathMapping> Lookup;

	friend bool operator==(const TkChordsImageLookup& lhs, const TkChordsImageLookup& rhs) 
	{
		return lhs.Lookup == rhs.Lookup;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkControllerButtonLookup
{
	NMS::VariableSizeString ButtonImageLookupFilename;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkControllerButtonLookup& lhs, const TkControllerButtonLookup& rhs) 
	{
		return lhs.ButtonImageLookupFilename == rhs.ButtonImageLookupFilename &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: TkControllerButtonLookup
struct TkControllerList
{
	std::vector<NMS_Toolkit::TkControllerButtonLookup> Controllers;

	friend bool operator==(const TkControllerList& lhs, const TkControllerList& rhs) 
	{
		return lhs.Controllers == rhs.Controllers;
	}
};

//Dependency: TkAxisImageLookup
//Dependency: TkButtonImageLookup
//Dependency: TkChordsImageLookup
//Dependency: NMSString0x10
struct TkControllerSpecification
{
	NMS_Toolkit::TkAxisImageLookup AxisImageLookup;
	NMS_Toolkit::TkButtonImageLookup ButtonImageLookup;
	NMS_Toolkit::TkChordsImageLookup ChordsImageLookup;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkControllerSpecification& lhs, const TkControllerSpecification& rhs) 
	{
		return lhs.AxisImageLookup == rhs.AxisImageLookup &&
		lhs.ButtonImageLookup == rhs.ButtonImageLookup &&
		lhs.ChordsImageLookup == rhs.ChordsImageLookup &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: NMSString0x20
struct TkCreatureTailJoints
{
	float InterpSpeedHead;
	float InterpSpeedTail;
	float PullSpeedMax;
	float PullSpeedMin;
	float StrengthX;
	float StrengthY;
	float StrengthZ;
	float SwimPhaseOffset;
	NMS::NMSString0x20 EndJoint;
	NMS::NMSString0x20 StartJoint;

	friend bool operator==(const TkCreatureTailJoints& lhs, const TkCreatureTailJoints& rhs) 
	{
		return lhs.InterpSpeedHead == rhs.InterpSpeedHead &&
		lhs.InterpSpeedTail == rhs.InterpSpeedTail &&
		lhs.PullSpeedMax == rhs.PullSpeedMax &&
		lhs.PullSpeedMin == rhs.PullSpeedMin &&
		lhs.StrengthX == rhs.StrengthX &&
		lhs.StrengthY == rhs.StrengthY &&
		lhs.StrengthZ == rhs.StrengthZ &&
		lhs.SwimPhaseOffset == rhs.SwimPhaseOffset &&
		lhs.EndJoint == rhs.EndJoint &&
		lhs.StartJoint == rhs.StartJoint;
	}
};

//Dependency: TkCreatureTailJoints
//Dependency: NMSString0x20A
struct TkCreatureTailParams
{
	NMS::NMSString0x20A PartName;
	std::vector<NMS_Toolkit::TkCreatureTailJoints> Joints;
	std::vector<float> PerBoneSwimStrength;
	float AnimationMix;
	float MaxTurnForSwim;
	float MinSwimStrength;
	float SwimBlendInTime;
	float SwimBlendOutTime;
	float SwimFallOffBegin;
	float SwimFallOffEnd;
	float SwimMagnitude;
	float SwimReps;
	float SwimRollMagnitude;
	float SwimSpeed;
	float SwimTurn;
	bool HorizontalStrokes;

	friend bool operator==(const TkCreatureTailParams& lhs, const TkCreatureTailParams& rhs) 
	{
		return lhs.PartName == rhs.PartName &&
		lhs.Joints == rhs.Joints &&
		lhs.PerBoneSwimStrength == rhs.PerBoneSwimStrength &&
		lhs.AnimationMix == rhs.AnimationMix &&
		lhs.MaxTurnForSwim == rhs.MaxTurnForSwim &&
		lhs.MinSwimStrength == rhs.MinSwimStrength &&
		lhs.SwimBlendInTime == rhs.SwimBlendInTime &&
		lhs.SwimBlendOutTime == rhs.SwimBlendOutTime &&
		lhs.SwimFallOffBegin == rhs.SwimFallOffBegin &&
		lhs.SwimFallOffEnd == rhs.SwimFallOffEnd &&
		lhs.SwimMagnitude == rhs.SwimMagnitude &&
		lhs.SwimReps == rhs.SwimReps &&
		lhs.SwimRollMagnitude == rhs.SwimRollMagnitude &&
		lhs.SwimSpeed == rhs.SwimSpeed &&
		lhs.SwimTurn == rhs.SwimTurn &&
		lhs.HorizontalStrokes == rhs.HorizontalStrokes;
	}
};

//Dependency: GcPrimaryAxis
//Dependency: TkCreatureTailParams
struct TkCreatureTailComponentData
{
	NMS_Toolkit::TkCreatureTailParams DefaultParams;
	std::vector<NMS_Toolkit::TkCreatureTailParams> ParamVariations;
	NMS_GameComponents::GcPrimaryAxis LengthAxis;
	bool CanUseDefaultParams;

	friend bool operator==(const TkCreatureTailComponentData& lhs, const TkCreatureTailComponentData& rhs) 
	{
		return lhs.DefaultParams == rhs.DefaultParams &&
		lhs.ParamVariations == rhs.ParamVariations &&
		lhs.LengthAxis == rhs.LengthAxis &&
		lhs.CanUseDefaultParams == rhs.CanUseDefaultParams;
	}
};

struct TkEmitFromParticleInfo
{
	enum class EmissionRateTypeEnum : uint32_t
	{
		PerParticle = 0,
		Distance = 1,
	};

	NMS_Toolkit::TkEmitFromParticleInfo::EmissionRateTypeEnum EmissionRateType;
	int32_t OtherEmitterIndex;

	friend bool operator==(const TkEmitFromParticleInfo& lhs, const TkEmitFromParticleInfo& rhs) 
	{
		return lhs.EmissionRateType == rhs.EmissionRateType &&
		lhs.OtherEmitterIndex == rhs.OtherEmitterIndex;
	}
};

struct TkEmitterBillboardAlignment
{
	enum class BillboardAlignmentEnum : uint32_t
	{
		Screen = 0,
		XLocal = 1,
		YLocal = 2,
		ZLocal = 3,
		NegativeXLocal = 4,
		NegativeYLocal = 5,
		NegativeZLocal = 6,
		ScreenWorld = 7,
	};

	NMS_Toolkit::TkEmitterBillboardAlignment::BillboardAlignmentEnum BillboardAlignment;
	bool CameraFacing;

	friend bool operator==(const TkEmitterBillboardAlignment& lhs, const TkEmitterBillboardAlignment& rhs) 
	{
		return lhs.BillboardAlignment == rhs.BillboardAlignment &&
		lhs.CameraFacing == rhs.CameraFacing;
	}
};

struct TkEngineSettingTypes
{
	enum class EngineSettingEnum : uint32_t
	{
		FullScreen = 0,
		Borderless = 1,
		ResolutionWidth = 2,
		ResolutionHeight = 3,
		ResolutionScale = 4,
		RetinaScaleIOS = 5,
		Monitor = 6,
		FoVOnFoot = 7,
		FoVInShip = 8,
		VSync = 9,
		TextureQuality = 10,
		AnimationQuality = 11,
		ShadowQuality = 12,
		ReflectionProbesMultiplier = 13,
		ReflectionProbes = 14,
		ScreenSpaceReflections = 15,
		ReflectionsQuality = 16,
		PostProcessingEffects = 17,
		VolumetricsQuality = 18,
		TerrainTessellation = 19,
		PlanetQuality = 20,
		WaterQuality = 21,
		BaseQuality = 22,
		UIQuality = 23,
		DLSSQuality = 24,
		FFXSRQuality = 25,
		FFXSR2Quality = 26,
		XESSQuality = 27,
		DynamicResScaling = 28,
		EnableTessellation = 29,
		AntiAliasing = 30,
		AnisotropyLevel = 31,
		Brightness = 32,
		VignetteAndScanlines = 33,
		AvailableMonitors = 34,
		MaxFrameRate = 35,
		NumLowThreads = 36,
		NumHighThreads = 37,
		NumGraphicsThreads = 38,
		TextureStreaming = 39,
		TexturePageSizeKb = 40,
		MotionBlurStrength = 41,
		ShowRequirementsWarnings = 42,
		AmbientOcclusion = 43,
		MaxTextureMemoryMb = 44,
		FixedTextureMemory = 45,
		UseArbSparseTexture = 46,
		UseTerrainTextureCache = 47,
		AdapterIndex = 48,
		UseHDR = 49,
		MinGPUMode = 50,
		MetalFXQuality = 51,
		DLSSFrameGeneration = 52,
		NVIDIAReflexLowLatency = 53,
	};

	NMS_Toolkit::TkEngineSettingTypes::EngineSettingEnum EngineSetting;

	friend bool operator==(const TkEngineSettingTypes& lhs, const TkEngineSettingTypes& rhs) 
	{
		return lhs.EngineSetting == rhs.EngineSetting;
	}
};

struct TkEngineSettingsMapping
{
	int32_t CloudsMaxIterations[4];
	float CloudsResolutionScale[4];
	float IKFullBodyIterations[4];
	float ReflectionProbesMultiplier[4];
	float ShadowMultiplier[4];
	bool NeedsGameRestart[54];

	friend bool operator==(const TkEngineSettingsMapping& lhs, const TkEngineSettingsMapping& rhs) 
	{
		return std::equal(std::begin(lhs.CloudsMaxIterations), std::end(lhs.CloudsMaxIterations), std::begin(rhs.CloudsMaxIterations)) &&
		std::equal(std::begin(lhs.CloudsResolutionScale), std::end(lhs.CloudsResolutionScale), std::begin(rhs.CloudsResolutionScale)) &&
		std::equal(std::begin(lhs.IKFullBodyIterations), std::end(lhs.IKFullBodyIterations), std::begin(rhs.IKFullBodyIterations)) &&
		std::equal(std::begin(lhs.ReflectionProbesMultiplier), std::end(lhs.ReflectionProbesMultiplier), std::begin(rhs.ReflectionProbesMultiplier)) &&
		std::equal(std::begin(lhs.ShadowMultiplier), std::end(lhs.ShadowMultiplier), std::begin(rhs.ShadowMultiplier)) &&
		std::equal(std::begin(lhs.NeedsGameRestart), std::end(lhs.NeedsGameRestart), std::begin(rhs.NeedsGameRestart));
	}
};

struct TkFeaturesEnum
{
	enum class FeatureTypesEnum : uint32_t
	{
		River = 0,
		Crater = 1,
		Arches = 2,
		ArchesSmall = 3,
		Blobs = 4,
		BlobsSmall = 5,
		Substance = 6,
	};

	NMS_Toolkit::TkFeaturesEnum::FeatureTypesEnum FeatureTypes;

	friend bool operator==(const TkFeaturesEnum& lhs, const TkFeaturesEnum& rhs) 
	{
		return lhs.FeatureTypes == rhs.FeatureTypes;
	}
};

struct TkFloatRange
{
	float Maximum;
	float Minimum;

	friend bool operator==(const TkFloatRange& lhs, const TkFloatRange& rhs) 
	{
		return lhs.Maximum == rhs.Maximum &&
		lhs.Minimum == rhs.Minimum;
	}
};

struct TkFoamProperties
{
	float FoamBlurFactor;
	float FoamFadeRate;
	float ShorelineFoamFadeDepth;
	float ShorelineFoamMidpointDepth;
	float ShorelineFoamSaturateDepth;
	float WaveFoamBase;
	float WaveFoamGenerationStrength;
	float WaveFoamSensitivity;

	friend bool operator==(const TkFoamProperties& lhs, const TkFoamProperties& rhs) 
	{
		return lhs.FoamBlurFactor == rhs.FoamBlurFactor &&
		lhs.FoamFadeRate == rhs.FoamFadeRate &&
		lhs.ShorelineFoamFadeDepth == rhs.ShorelineFoamFadeDepth &&
		lhs.ShorelineFoamMidpointDepth == rhs.ShorelineFoamMidpointDepth &&
		lhs.ShorelineFoamSaturateDepth == rhs.ShorelineFoamSaturateDepth &&
		lhs.WaveFoamBase == rhs.WaveFoamBase &&
		lhs.WaveFoamGenerationStrength == rhs.WaveFoamGenerationStrength &&
		lhs.WaveFoamSensitivity == rhs.WaveFoamSensitivity;
	}
};

struct TkTrailData
{
	float DistanceThreshold;
	int32_t FrontPoints;
	float FrontUvEnd;
	int32_t MaxPointsPerFrame;
	float PointLife;
	int32_t Points;
	float Width;

	friend bool operator==(const TkTrailData& lhs, const TkTrailData& rhs) 
	{
		return lhs.DistanceThreshold == rhs.DistanceThreshold &&
		lhs.FrontPoints == rhs.FrontPoints &&
		lhs.FrontUvEnd == rhs.FrontUvEnd &&
		lhs.MaxPointsPerFrame == rhs.MaxPointsPerFrame &&
		lhs.PointLife == rhs.PointLife &&
		lhs.Points == rhs.Points &&
		lhs.Width == rhs.Width;
	}
};

struct TkPadEnum
{
	enum class PadEnum : uint32_t
	{
		None = 0,
		XInput = 1,
		GLFW = 2,
		XBoxOne = 3,
		XBox360 = 4,
		DS4 = 5,
		DS5 = 6,
		Move = 7,
		SteamInput = 8,
		Touch = 9,
		OpenVR = 10,
		SwitchPro = 11,
		SwitchHandheld = 12,
		GameInput = 13,
		SwitchDebugPad = 14,
		SwitchJoyConDual = 15,
		VirtualController = 16,
	};

	NMS_Toolkit::TkPadEnum::PadEnum Pad;

	friend bool operator==(const TkPadEnum& lhs, const TkPadEnum& rhs) 
	{
		return lhs.Pad == rhs.Pad;
	}
};

//Dependency: GcInputActionMapping
//Dependency: GcInputActionMapping2
//Dependency: TkPadEnum
struct TkGameSettings
{
	std::vector<NMS_GameComponents::GcInputActionMapping> KeyMapping;
	std::vector<NMS_GameComponents::GcInputActionMapping2> KeyMapping2;
	NMS_Toolkit::TkPadEnum LastKnownPadType;

	friend bool operator==(const TkGameSettings& lhs, const TkGameSettings& rhs) 
	{
		return lhs.KeyMapping == rhs.KeyMapping &&
		lhs.KeyMapping2 == rhs.KeyMapping2 &&
		lhs.LastKnownPadType == rhs.LastKnownPadType;
	}
};

//Dependency: VariableSizeString
struct TkMeshMetaData
{
	NMS::VariableSizeString IdString;
	uint64_t Hash;
	int32_t IndexDataOffset;
	int32_t IndexDataSize;
	int32_t VertexDataOffset;
	int32_t VertexDataSize;
	int32_t VertexPositionDataOffset;
	int32_t VertexPositionDataSize;
	bool DoubleBufferGeometry;

	friend bool operator==(const TkMeshMetaData& lhs, const TkMeshMetaData& rhs) 
	{
		return lhs.IdString == rhs.IdString &&
		lhs.Hash == rhs.Hash &&
		lhs.IndexDataOffset == rhs.IndexDataOffset &&
		lhs.IndexDataSize == rhs.IndexDataSize &&
		lhs.VertexDataOffset == rhs.VertexDataOffset &&
		lhs.VertexDataSize == rhs.VertexDataSize &&
		lhs.VertexPositionDataOffset == rhs.VertexPositionDataOffset &&
		lhs.VertexPositionDataSize == rhs.VertexPositionDataSize &&
		lhs.DoubleBufferGeometry == rhs.DoubleBufferGeometry;
	}
};

struct TkJointMirrorAxis
{
	int32_t MirrorAxisMode;
	float RotAdjustW;
	float RotAdjustX;
	float RotAdjustY;
	float RotAdjustZ;
	float RotMirrorAxisX;
	float RotMirrorAxisY;
	float RotMirrorAxisZ;
	float TransMirrorAxisX;
	float TransMirrorAxisY;
	float TransMirrorAxisZ;

	friend bool operator==(const TkJointMirrorAxis& lhs, const TkJointMirrorAxis& rhs) 
	{
		return lhs.MirrorAxisMode == rhs.MirrorAxisMode &&
		lhs.RotAdjustW == rhs.RotAdjustW &&
		lhs.RotAdjustX == rhs.RotAdjustX &&
		lhs.RotAdjustY == rhs.RotAdjustY &&
		lhs.RotAdjustZ == rhs.RotAdjustZ &&
		lhs.RotMirrorAxisX == rhs.RotMirrorAxisX &&
		lhs.RotMirrorAxisY == rhs.RotMirrorAxisY &&
		lhs.RotMirrorAxisZ == rhs.RotMirrorAxisZ &&
		lhs.TransMirrorAxisX == rhs.TransMirrorAxisX &&
		lhs.TransMirrorAxisY == rhs.TransMirrorAxisY &&
		lhs.TransMirrorAxisZ == rhs.TransMirrorAxisZ;
	}
};

//Dependency: TkVertexLayout
//Dependency: TkMeshMetaData
//Dependency: TkJointBindingData
//Dependency: VariableSizeString
//Dependency: TkJointExtentData
//Dependency: Vector4f
//Dependency: TkJointMirrorAxis
struct TkGeometryData
{
	NMS_Toolkit::TkVertexLayout PositionVertexLayout;
	NMS_Toolkit::TkVertexLayout VertexLayout;
	std::vector<int32_t> BoundHullVertEd;
	std::vector<NMS::Vector4f> BoundHullVerts;
	std::vector<int32_t> BoundHullVertSt;
	std::vector<int32_t> IndexBuffer;
	std::vector<NMS_Toolkit::TkJointBindingData> JointBindings;
	std::vector<NMS_Toolkit::TkJointExtentData> JointExtents;
	std::vector<NMS_Toolkit::TkJointMirrorAxis> JointMirrorAxes;
	std::vector<int32_t> JointMirrorPairs;
	std::vector<NMS::Vector4f> MeshAABBMax;
	std::vector<NMS::Vector4f> MeshAABBMin;
	std::vector<int32_t> MeshBaseSkinMat;
	std::vector<int32_t> MeshVertREnd;
	std::vector<int32_t> MeshVertRStart;
	std::vector<NMS::VariableSizeString> ProcGenNodeNames;
	std::vector<int32_t> ProcGenParentId;
	std::vector<int32_t> SkinMatrixLayout;
	std::vector<NMS_Toolkit::TkMeshMetaData> StreamMetaDataArray;
	int32_t CollisionIndexCount;
	int32_t IndexCount;
	int32_t Indices16Bit;
	int32_t VertexCount;

	friend bool operator==(const TkGeometryData& lhs, const TkGeometryData& rhs) 
	{
		return lhs.PositionVertexLayout == rhs.PositionVertexLayout &&
		lhs.VertexLayout == rhs.VertexLayout &&
		lhs.BoundHullVertEd == rhs.BoundHullVertEd &&
		lhs.BoundHullVerts == rhs.BoundHullVerts &&
		lhs.BoundHullVertSt == rhs.BoundHullVertSt &&
		lhs.IndexBuffer == rhs.IndexBuffer &&
		lhs.JointBindings == rhs.JointBindings &&
		lhs.JointExtents == rhs.JointExtents &&
		lhs.JointMirrorAxes == rhs.JointMirrorAxes &&
		lhs.JointMirrorPairs == rhs.JointMirrorPairs &&
		lhs.MeshAABBMax == rhs.MeshAABBMax &&
		lhs.MeshAABBMin == rhs.MeshAABBMin &&
		lhs.MeshBaseSkinMat == rhs.MeshBaseSkinMat &&
		lhs.MeshVertREnd == rhs.MeshVertREnd &&
		lhs.MeshVertRStart == rhs.MeshVertRStart &&
		lhs.ProcGenNodeNames == rhs.ProcGenNodeNames &&
		lhs.ProcGenParentId == rhs.ProcGenParentId &&
		lhs.SkinMatrixLayout == rhs.SkinMatrixLayout &&
		lhs.StreamMetaDataArray == rhs.StreamMetaDataArray &&
		lhs.CollisionIndexCount == rhs.CollisionIndexCount &&
		lhs.IndexCount == rhs.IndexCount &&
		lhs.Indices16Bit == rhs.Indices16Bit &&
		lhs.VertexCount == rhs.VertexCount;
	}
};

//Dependency: TkEmitterWindDrift
//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
struct TkHeavyAirData
{
	enum class EmitterShapeEnum : uint32_t
	{
		Sphere = 0,
		UpperHalfSphere = 1,
		BottomHalfSphere = 2,
	};

	NMS::Vector3f AmplitudeMax;
	NMS::Vector3f AmplitudeMin;
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f MajorDirection;
	NMS::Vector3f RotationSpeedRange;
	NMS::Vector3f ScaleRange;
	NMS::Vector3f TwinkleRange;
	NMS::VariableSizeString Material;
	NMS_Toolkit::TkEmitterWindDrift WindDrift;
	NMS_Toolkit::TkHeavyAirData::EmitterShapeEnum EmitterShape;
	float FadeTime;
	float MaxParticleLifetime;
	float MaxVisibleSpeed;
	float MinParticleLifetime;
	float MinVisibleSpeed;
	int32_t NumberOfParticles;
	float Radius;
	float RadiusY;
	float SoftFadeStrength;
	float SpawnRotationRange;
	float SpeedFadeInTime;
	float SpeedFadeOutTime;
	bool VelocityAlignment;

	friend bool operator==(const TkHeavyAirData& lhs, const TkHeavyAirData& rhs) 
	{
		return lhs.AmplitudeMax == rhs.AmplitudeMax &&
		lhs.AmplitudeMin == rhs.AmplitudeMin &&
		lhs.Colour1 == rhs.Colour1 &&
		lhs.Colour2 == rhs.Colour2 &&
		lhs.MajorDirection == rhs.MajorDirection &&
		lhs.RotationSpeedRange == rhs.RotationSpeedRange &&
		lhs.ScaleRange == rhs.ScaleRange &&
		lhs.TwinkleRange == rhs.TwinkleRange &&
		lhs.Material == rhs.Material &&
		lhs.WindDrift == rhs.WindDrift &&
		lhs.EmitterShape == rhs.EmitterShape &&
		lhs.FadeTime == rhs.FadeTime &&
		lhs.MaxParticleLifetime == rhs.MaxParticleLifetime &&
		lhs.MaxVisibleSpeed == rhs.MaxVisibleSpeed &&
		lhs.MinParticleLifetime == rhs.MinParticleLifetime &&
		lhs.MinVisibleSpeed == rhs.MinVisibleSpeed &&
		lhs.NumberOfParticles == rhs.NumberOfParticles &&
		lhs.Radius == rhs.Radius &&
		lhs.RadiusY == rhs.RadiusY &&
		lhs.SoftFadeStrength == rhs.SoftFadeStrength &&
		lhs.SpawnRotationRange == rhs.SpawnRotationRange &&
		lhs.SpeedFadeInTime == rhs.SpeedFadeInTime &&
		lhs.SpeedFadeOutTime == rhs.SpeedFadeOutTime &&
		lhs.VelocityAlignment == rhs.VelocityAlignment;
	}
};

//Dependency: TkHeavyAirData
struct TkHeavyAirCollection
{
	std::vector<NMS_Toolkit::TkHeavyAirData> HeavyAirSystems;

	friend bool operator==(const TkHeavyAirCollection& lhs, const TkHeavyAirCollection& rhs) 
	{
		return lhs.HeavyAirSystems == rhs.HeavyAirSystems;
	}
};

//Dependency: TkGraphicsSettings
//Dependency: NMSString0x100
struct TkIOSDevicePreset
{
	NMS_Toolkit::TkGraphicsSettings DefaultGraphicsSettings;
	std::vector<NMS::NMSString0x100> ModelIdentifiers;
	NMS::NMSString0x100 DeviceName;

	friend bool operator==(const TkIOSDevicePreset& lhs, const TkIOSDevicePreset& rhs) 
	{
		return lhs.DefaultGraphicsSettings == rhs.DefaultGraphicsSettings &&
		lhs.ModelIdentifiers == rhs.ModelIdentifiers &&
		lhs.DeviceName == rhs.DeviceName;
	}
};

//Dependency: TkIOSDevicePreset
struct TkIOSPerDeviceSettings
{
	std::vector<NMS_Toolkit::TkIOSDevicePreset> DevicePresets;

	friend bool operator==(const TkIOSPerDeviceSettings& lhs, const TkIOSPerDeviceSettings& rhs) 
	{
		return lhs.DevicePresets == rhs.DevicePresets;
	}
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkIdSceneFilename
{
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkIdSceneFilename& lhs, const TkIdSceneFilename& rhs) 
	{
		return lhs.Filename == rhs.Filename &&
		lhs.Id == rhs.Id;
	}
};

//Dependency: TkInputFrame
struct TkInputFrameArray
{
	NMS_Toolkit::TkInputFrame Array[20000];

	friend bool operator==(const TkInputFrameArray& lhs, const TkInputFrameArray& rhs) 
	{
		return std::equal(std::begin(lhs.Array), std::end(lhs.Array), std::begin(rhs.Array));
	}
};

struct TkInstanceWindComponentData
{
	float BaseMass;
	float BaseSpring;
	float LinearDamping;
	float MassReduction;
	float SpringLengthFactor;
	float SpringNonDirFactor;
	float SpringReduction;
	bool EnableLdsWind;

	friend bool operator==(const TkInstanceWindComponentData& lhs, const TkInstanceWindComponentData& rhs) 
	{
		return lhs.BaseMass == rhs.BaseMass &&
		lhs.BaseSpring == rhs.BaseSpring &&
		lhs.LinearDamping == rhs.LinearDamping &&
		lhs.MassReduction == rhs.MassReduction &&
		lhs.SpringLengthFactor == rhs.SpringLengthFactor &&
		lhs.SpringNonDirFactor == rhs.SpringNonDirFactor &&
		lhs.SpringReduction == rhs.SpringReduction &&
		lhs.EnableLdsWind == rhs.EnableLdsWind;
	}
};

struct TkNavMeshPolyFlags
{
	enum class NavMeshPolyFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_Toolkit::TkNavMeshPolyFlags::NavMeshPolyFlagsEnum NavMeshPolyFlags;

	friend bool operator==(const TkNavMeshPolyFlags& lhs, const TkNavMeshPolyFlags& rhs) 
	{
		return lhs.NavMeshPolyFlags == rhs.NavMeshPolyFlags;
	}
};

//Dependency: TkLocalisationEntry
struct TkLocalisationTable
{
	std::vector<NMS_Toolkit::TkLocalisationEntry> Table;

	friend bool operator==(const TkLocalisationTable& lhs, const TkLocalisationTable& rhs) 
	{
		return lhs.Table == rhs.Table;
	}
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkMaterialAlternative
{
	enum class TextureTypeEnum : uint32_t
	{
		Diffuse = 0,
		Normal = 1,
		Ambient = 2,
		Environment = 3,
	};

	NMS::NMSString0x20A MaterialAlternativeId;
	NMS::VariableSizeString File;
	NMS_Toolkit::TkMaterialAlternative::TextureTypeEnum TextureType;

	friend bool operator==(const TkMaterialAlternative& lhs, const TkMaterialAlternative& rhs) 
	{
		return lhs.MaterialAlternativeId == rhs.MaterialAlternativeId &&
		lhs.File == rhs.File &&
		lhs.TextureType == rhs.TextureType;
	}
};

//Dependency: TkMaterialShaderMillData
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkMaterialMetaData
{
	enum class ShaderEnum : uint32_t
	{
		UberShader = 0,
		Sky = 1,
		Screen = 2,
		UberHack = 3,
		UIScreen = 4,
		Decal = 5,
		ShaderMillParticle = 6,
		ShaderMillUber = 7,
		ShaderMillDecal = 8,
	};

	NMS::Vector3f WaveOneAmplitude;
	NMS::Vector3f WaveOneFallOff;
	NMS::Vector3f WaveOneFrequency;
	NMS::Vector3f WaveTwoAmplitude;
	NMS::Vector3f WaveTwoFallOff;
	NMS::Vector3f WaveTwoFrequency;
	NMS_Toolkit::TkMaterialShaderMillData ShaderMillData;
	NMS::VariableSizeString DetailNormal;
	NMS::VariableSizeString ExternalMaterial;
	NMS::VariableSizeString ForceDiffuse;
	NMS::VariableSizeString ForceFeature;
	NMS::VariableSizeString ForceMask;
	NMS::VariableSizeString ForceNormal;
	float BillboardSphereFactor;
	float BranchHSwing;
	float BranchTrunkAnim;
	float BranchVSwing;
	float DetailHeightBlend;
	float DetailHeightBoost;
	float FurNoiseScale;
	float FurNoiseThickness;
	float FurNoiseTurbulence;
	float FurTurbulenceScale;
	float Glow;
	float HeightScale;
	float IBLWeight;
	float LeafNoise;
	float LeafSwing;
	float NormalTiling;
	int32_t NumSteps;
	float ParallaxDepth;
	float ParticleRefractionBrightnessMultiplier;
	float ParticleRefractionStrengthX;
	float ParticleRefractionStrengthY;
	float ParticleRefractionTint;
	float ReactivityBias;
	float Reflectance;
	float Refraction;
	float RefractionIndex;
	float Roughness;
	NMS_Toolkit::TkMaterialMetaData::ShaderEnum Shader;
	float ShadowFactor;
	float ShellsHeight;
	float SoftFadeStrength;
	float Subsurface;
	float TerrainNormalFactor;
	float TessellationHeight;
	int32_t TransparencyLayerID;
	float TrunkBend;
	float UVFrameTime;
	float UVNumTilesX;
	float UVNumTilesY;
	float UVScrollNormalX;
	float UVScrollNormalY;
	float UVScrollX;
	float UVScrollY;
	float WaveOneSpeed;
	float WaveTwoSpeed;
	NMS::NMSString0x20 MaterialClass;
	bool Additive;
	bool AlphaCutout;
	bool AlwaysOnTopUI;
	bool AnisotropicFilter;
	bool AOMap;
	bool BeforeUI;
	bool BentNormals;
	bool Billboard;
	bool BrightEdge;
	bool CameraRelative;
	bool CastShadow;
	bool Colourisable;
	bool ColourMask;
	bool CreateFur;
	bool DecalNormalOnly;
	bool DecalTerrainOnly;
	bool DepthMaskUI;
	bool DisablePostProcess;
	bool DisableZTest;
	bool DisplacementPositionOffset;
	bool DisplacementWave;
	bool Dissolve;
	bool DoubleBufferGeometry;
	bool DoubleSided;
	bool DoubleSidedKeepNormals;
	bool DrawToBloom;
	bool DrawToLensFlare;
	bool EnableLodFade;
	bool FeatureMap;
	bool FullPrecisionPosition;
	bool GlowMask;
	bool HighQualityParticle;
	bool ImageBasedLighting;
	bool Imposter;
	bool InvertAlpha;
	bool MatchGroundColour;
	bool MergedMeshBillboard;
	bool Metallic;
	bool MetallicMask;
	bool Multitexture;
	bool ParallaxMapped;
	bool ReceiveShadow;
	bool ReflectanceMask;
	bool ReflectionProbe;
	bool RefractionMask;
	bool RotateAroundAt;
	bool RoughnessMask;
	bool ScanEffect;
	bool ScreenSpaceReflections;
	bool SelfShadow;
	bool ShadowOnly;
	bool SimulatedCloth;
	bool SubsurfaceMask;
	bool Transparent;
	bool UISurface;
	bool Unlit;
	bool UVAnimation;
	bool UVScrolling;
	bool UVTileAlts;
	bool VertexAlphaAO;
	bool VertexColour;
	bool VertexDetailBlend;
	bool Wind;
	bool WriteLogZ;

	friend bool operator==(const TkMaterialMetaData& lhs, const TkMaterialMetaData& rhs) 
	{
		return lhs.WaveOneAmplitude == rhs.WaveOneAmplitude &&
		lhs.WaveOneFallOff == rhs.WaveOneFallOff &&
		lhs.WaveOneFrequency == rhs.WaveOneFrequency &&
		lhs.WaveTwoAmplitude == rhs.WaveTwoAmplitude &&
		lhs.WaveTwoFallOff == rhs.WaveTwoFallOff &&
		lhs.WaveTwoFrequency == rhs.WaveTwoFrequency &&
		lhs.ShaderMillData == rhs.ShaderMillData &&
		lhs.DetailNormal == rhs.DetailNormal &&
		lhs.ExternalMaterial == rhs.ExternalMaterial &&
		lhs.ForceDiffuse == rhs.ForceDiffuse &&
		lhs.ForceFeature == rhs.ForceFeature &&
		lhs.ForceMask == rhs.ForceMask &&
		lhs.ForceNormal == rhs.ForceNormal &&
		lhs.BillboardSphereFactor == rhs.BillboardSphereFactor &&
		lhs.BranchHSwing == rhs.BranchHSwing &&
		lhs.BranchTrunkAnim == rhs.BranchTrunkAnim &&
		lhs.BranchVSwing == rhs.BranchVSwing &&
		lhs.DetailHeightBlend == rhs.DetailHeightBlend &&
		lhs.DetailHeightBoost == rhs.DetailHeightBoost &&
		lhs.FurNoiseScale == rhs.FurNoiseScale &&
		lhs.FurNoiseThickness == rhs.FurNoiseThickness &&
		lhs.FurNoiseTurbulence == rhs.FurNoiseTurbulence &&
		lhs.FurTurbulenceScale == rhs.FurTurbulenceScale &&
		lhs.Glow == rhs.Glow &&
		lhs.HeightScale == rhs.HeightScale &&
		lhs.IBLWeight == rhs.IBLWeight &&
		lhs.LeafNoise == rhs.LeafNoise &&
		lhs.LeafSwing == rhs.LeafSwing &&
		lhs.NormalTiling == rhs.NormalTiling &&
		lhs.NumSteps == rhs.NumSteps &&
		lhs.ParallaxDepth == rhs.ParallaxDepth &&
		lhs.ParticleRefractionBrightnessMultiplier == rhs.ParticleRefractionBrightnessMultiplier &&
		lhs.ParticleRefractionStrengthX == rhs.ParticleRefractionStrengthX &&
		lhs.ParticleRefractionStrengthY == rhs.ParticleRefractionStrengthY &&
		lhs.ParticleRefractionTint == rhs.ParticleRefractionTint &&
		lhs.ReactivityBias == rhs.ReactivityBias &&
		lhs.Reflectance == rhs.Reflectance &&
		lhs.Refraction == rhs.Refraction &&
		lhs.RefractionIndex == rhs.RefractionIndex &&
		lhs.Roughness == rhs.Roughness &&
		lhs.Shader == rhs.Shader &&
		lhs.ShadowFactor == rhs.ShadowFactor &&
		lhs.ShellsHeight == rhs.ShellsHeight &&
		lhs.SoftFadeStrength == rhs.SoftFadeStrength &&
		lhs.Subsurface == rhs.Subsurface &&
		lhs.TerrainNormalFactor == rhs.TerrainNormalFactor &&
		lhs.TessellationHeight == rhs.TessellationHeight &&
		lhs.TransparencyLayerID == rhs.TransparencyLayerID &&
		lhs.TrunkBend == rhs.TrunkBend &&
		lhs.UVFrameTime == rhs.UVFrameTime &&
		lhs.UVNumTilesX == rhs.UVNumTilesX &&
		lhs.UVNumTilesY == rhs.UVNumTilesY &&
		lhs.UVScrollNormalX == rhs.UVScrollNormalX &&
		lhs.UVScrollNormalY == rhs.UVScrollNormalY &&
		lhs.UVScrollX == rhs.UVScrollX &&
		lhs.UVScrollY == rhs.UVScrollY &&
		lhs.WaveOneSpeed == rhs.WaveOneSpeed &&
		lhs.WaveTwoSpeed == rhs.WaveTwoSpeed &&
		lhs.MaterialClass == rhs.MaterialClass &&
		lhs.Additive == rhs.Additive &&
		lhs.AlphaCutout == rhs.AlphaCutout &&
		lhs.AlwaysOnTopUI == rhs.AlwaysOnTopUI &&
		lhs.AnisotropicFilter == rhs.AnisotropicFilter &&
		lhs.AOMap == rhs.AOMap &&
		lhs.BeforeUI == rhs.BeforeUI &&
		lhs.BentNormals == rhs.BentNormals &&
		lhs.Billboard == rhs.Billboard &&
		lhs.BrightEdge == rhs.BrightEdge &&
		lhs.CameraRelative == rhs.CameraRelative &&
		lhs.CastShadow == rhs.CastShadow &&
		lhs.Colourisable == rhs.Colourisable &&
		lhs.ColourMask == rhs.ColourMask &&
		lhs.CreateFur == rhs.CreateFur &&
		lhs.DecalNormalOnly == rhs.DecalNormalOnly &&
		lhs.DecalTerrainOnly == rhs.DecalTerrainOnly &&
		lhs.DepthMaskUI == rhs.DepthMaskUI &&
		lhs.DisablePostProcess == rhs.DisablePostProcess &&
		lhs.DisableZTest == rhs.DisableZTest &&
		lhs.DisplacementPositionOffset == rhs.DisplacementPositionOffset &&
		lhs.DisplacementWave == rhs.DisplacementWave &&
		lhs.Dissolve == rhs.Dissolve &&
		lhs.DoubleBufferGeometry == rhs.DoubleBufferGeometry &&
		lhs.DoubleSided == rhs.DoubleSided &&
		lhs.DoubleSidedKeepNormals == rhs.DoubleSidedKeepNormals &&
		lhs.DrawToBloom == rhs.DrawToBloom &&
		lhs.DrawToLensFlare == rhs.DrawToLensFlare &&
		lhs.EnableLodFade == rhs.EnableLodFade &&
		lhs.FeatureMap == rhs.FeatureMap &&
		lhs.FullPrecisionPosition == rhs.FullPrecisionPosition &&
		lhs.GlowMask == rhs.GlowMask &&
		lhs.HighQualityParticle == rhs.HighQualityParticle &&
		lhs.ImageBasedLighting == rhs.ImageBasedLighting &&
		lhs.Imposter == rhs.Imposter &&
		lhs.InvertAlpha == rhs.InvertAlpha &&
		lhs.MatchGroundColour == rhs.MatchGroundColour &&
		lhs.MergedMeshBillboard == rhs.MergedMeshBillboard &&
		lhs.Metallic == rhs.Metallic &&
		lhs.MetallicMask == rhs.MetallicMask &&
		lhs.Multitexture == rhs.Multitexture &&
		lhs.ParallaxMapped == rhs.ParallaxMapped &&
		lhs.ReceiveShadow == rhs.ReceiveShadow &&
		lhs.ReflectanceMask == rhs.ReflectanceMask &&
		lhs.ReflectionProbe == rhs.ReflectionProbe &&
		lhs.RefractionMask == rhs.RefractionMask &&
		lhs.RotateAroundAt == rhs.RotateAroundAt &&
		lhs.RoughnessMask == rhs.RoughnessMask &&
		lhs.ScanEffect == rhs.ScanEffect &&
		lhs.ScreenSpaceReflections == rhs.ScreenSpaceReflections &&
		lhs.SelfShadow == rhs.SelfShadow &&
		lhs.ShadowOnly == rhs.ShadowOnly &&
		lhs.SimulatedCloth == rhs.SimulatedCloth &&
		lhs.SubsurfaceMask == rhs.SubsurfaceMask &&
		lhs.Transparent == rhs.Transparent &&
		lhs.UISurface == rhs.UISurface &&
		lhs.Unlit == rhs.Unlit &&
		lhs.UVAnimation == rhs.UVAnimation &&
		lhs.UVScrolling == rhs.UVScrolling &&
		lhs.UVTileAlts == rhs.UVTileAlts &&
		lhs.VertexAlphaAO == rhs.VertexAlphaAO &&
		lhs.VertexColour == rhs.VertexColour &&
		lhs.VertexDetailBlend == rhs.VertexDetailBlend &&
		lhs.Wind == rhs.Wind &&
		lhs.WriteLogZ == rhs.WriteLogZ;
	}
};

struct TkWaterMeshConfig
{
	float BaseScale;
	int32_t DynamicWaveScale;
	int32_t FoamScale;
	int32_t GeometryDownSampleFactor;
	int32_t LodCount;
	int32_t LodDataResolution;
	int32_t MaxHorizontalScaleMultiplier;
	int32_t MinHorizontalScaleMultiplier;
	bool DisableSkirtGeneration;

	friend bool operator==(const TkWaterMeshConfig& lhs, const TkWaterMeshConfig& rhs) 
	{
		return lhs.BaseScale == rhs.BaseScale &&
		lhs.DynamicWaveScale == rhs.DynamicWaveScale &&
		lhs.FoamScale == rhs.FoamScale &&
		lhs.GeometryDownSampleFactor == rhs.GeometryDownSampleFactor &&
		lhs.LodCount == rhs.LodCount &&
		lhs.LodDataResolution == rhs.LodDataResolution &&
		lhs.MaxHorizontalScaleMultiplier == rhs.MaxHorizontalScaleMultiplier &&
		lhs.MinHorizontalScaleMultiplier == rhs.MinHorizontalScaleMultiplier &&
		lhs.DisableSkirtGeneration == rhs.DisableSkirtGeneration;
	}
};

//Dependency: TkWaterMeshConfig
struct TkMeshWaterQualitySettingData
{
	NMS_Toolkit::TkWaterMeshConfig WaterMeshConfig;
	bool EnableDetailNormals;
	bool EnableDynamicWaves;
	bool EnableFoam;
	bool EnableLocalTerrain;
	bool PostProcessWater;
	bool RainDropEffect;

	friend bool operator==(const TkMeshWaterQualitySettingData& lhs, const TkMeshWaterQualitySettingData& rhs) 
	{
		return lhs.WaterMeshConfig == rhs.WaterMeshConfig &&
		lhs.EnableDetailNormals == rhs.EnableDetailNormals &&
		lhs.EnableDynamicWaves == rhs.EnableDynamicWaves &&
		lhs.EnableFoam == rhs.EnableFoam &&
		lhs.EnableLocalTerrain == rhs.EnableLocalTerrain &&
		lhs.PostProcessWater == rhs.PostProcessWater &&
		lhs.RainDropEffect == rhs.RainDropEffect;
	}
};

struct TkMeshWaterReflectionQualitySettingData
{
	enum class ScreenSpaceReflectionsEnum : uint32_t
	{
		Off = 0,
		On = 1,
	};

	enum class PlanarReflectionsEnum : uint32_t
	{
		Off = 0,
		TerrainOnly = 1,
		TerrainAndScreenspace = 2,
	};

	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData::PlanarReflectionsEnum PlanarReflections;
	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData::ScreenSpaceReflectionsEnum ScreenSpaceReflections;

	friend bool operator==(const TkMeshWaterReflectionQualitySettingData& lhs, const TkMeshWaterReflectionQualitySettingData& rhs) 
	{
		return lhs.PlanarReflections == rhs.PlanarReflections &&
		lhs.ScreenSpaceReflections == rhs.ScreenSpaceReflections;
	}
};

//Dependency: TkMeshWaterQualitySettingData
//Dependency: TkMeshWaterReflectionQualitySettingData
struct TkMeshWaterQualitySettings
{
	NMS_Toolkit::TkMeshWaterQualitySettingData MeshWaterQualitySettings[4];
	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData MeshWaterReflectionQualitySettings[4];

	friend bool operator==(const TkMeshWaterQualitySettings& lhs, const TkMeshWaterQualitySettings& rhs) 
	{
		return std::equal(std::begin(lhs.MeshWaterQualitySettings), std::end(lhs.MeshWaterQualitySettings), std::begin(rhs.MeshWaterQualitySettings)) &&
		std::equal(std::begin(lhs.MeshWaterReflectionQualitySettings), std::end(lhs.MeshWaterReflectionQualitySettings), std::begin(rhs.MeshWaterReflectionQualitySettings));
	}
};

struct TkMetadataReadMask
{
	enum class MetadataReadMaskEnum : uint32_t
	{
		None = 0,
		Default = 1,
		SaveWhenMultiplayerClient = 2,
		SavePlayerPosition = 4,
		SavePlayerInventory = 8,
	};

	NMS_Toolkit::TkMetadataReadMask::MetadataReadMaskEnum MetadataReadMask;

	friend bool operator==(const TkMetadataReadMask& lhs, const TkMetadataReadMask& rhs) 
	{
		return lhs.MetadataReadMask == rhs.MetadataReadMask;
	}
};

//Dependency: TkResourceDescriptorData
//Dependency: NMSString0x10
struct TkResourceDescriptorList
{
	std::vector<NMS_Toolkit::TkResourceDescriptorData> Descriptors;
	NMS::NMSString0x10 TypeId;

	friend bool operator==(const TkResourceDescriptorList& lhs, const TkResourceDescriptorList& rhs) 
	{
		return lhs.Descriptors == rhs.Descriptors &&
		lhs.TypeId == rhs.TypeId;
	}
};

//Dependency: TkResourceDescriptorList
struct TkModelDescriptorList
{
	std::vector<NMS_Toolkit::TkResourceDescriptorList> List;

	friend bool operator==(const TkModelDescriptorList& lhs, const TkModelDescriptorList& rhs) 
	{
		return lhs.List == rhs.List;
	}
};

struct TkNGuiEditorGraphicType
{
	enum class NGuiEditorGraphicEnum : uint32_t
	{
		Panel = 0,
		Button = 1,
		Text = 2,
		Graphic = 3,
		WindowTitleBar = 4,
		WindowTitleBarInactive = 5,
		WindowTabActiveActive = 6,
		WindowTabInactiveActive = 7,
		WindowTabActiveInactive = 8,
		WindowTabInactiveInactive = 9,
		WindowTabsSeparator = 10,
		WindowBacking = 11,
		Window = 12,
		WindowPane = 13,
		WindowResize = 14,
		WindowClose = 15,
		WindowMinimize = 16,
		WindowMaximize = 17,
		ScrollBarBackground = 18,
		ScrollBarForeground = 19,
		TreeNodeCollapsed = 20,
		TreeNodeExpanded = 21,
		CheckBoxTrue = 22,
		CheckBoxFalse = 23,
		TextInput = 24,
		Increment = 25,
		Decrement = 26,
		Cursor = 27,
		TextSelection = 28,
		Separator = 29,
		EditorResize = 30,
		EditorMove = 31,
		EditorOverlay = 32,
		FileBrowser = 33,
		ColourEdit = 34,
		IconButton = 35,
		SliderKnob = 36,
		SliderBar = 37,
		IconButtonText = 38,
		TextInputLabel = 39,
		Category = 40,
		Taskbar = 41,
		TaskbarItem = 42,
		TaskbarShortcutButton = 43,
		StartBarWindow = 44,
		StartBarWindowButton = 45,
		StartBarWindowPane = 46,
		StartBarWindowListItem = 47,
		MenuSearchBox = 48,
		SearchBox = 49,
		ComboBox = 50,
		ComboBoxWindow = 51,
		IconListItem = 52,
		IconListItemSelected = 53,
		ImageButton = 54,
		Toolbar = 55,
		ToolbarGraphic = 56,
		ToolbarOptions = 57,
		Rectangle = 58,
		TreeNodeBorder = 59,
		Background = 60,
		GroupTitle = 61,
		TextLabelSeparator = 62,
		AlignmentAnchor = 63,
		MinimiseHighlight = 64,
		Table = 65,
		TableBorder = 66,
		TableFolderButton = 67,
		TableAddEntryButton = 68,
		TreeNode = 69,
		CategoryCollapsed = 70,
		CategoryExpanded = 71,
		WindowTitleBarDragTarget = 72,
		IconButtonSelected = 73,
		Line = 74,
		LightLine = 75,
		TreeNodeBackground = 76,
		TreeNodeCategoryBackground = 77,
		SceneNodeBackground = 78,
		PinChildren = 79,
		UnpinChildren = 80,
		DynamicPanel = 81,
		DynamicPanelTitle = 82,
		DynamicPanelCustomToolbar = 83,
		Favourite = 84,
		FavouriteSelected = 85,
		FavouriteValue = 86,
		FavouriteValueSelected = 87,
		RevertButton = 88,
		TreeNodeCustomPanel = 89,
		IconButtonBordered = 90,
		IconButtonBorderedSelected = 91,
		Tooltip = 92,
		TooltipButton = 93,
		ContextMenuButton = 94,
	};

	NMS_Toolkit::TkNGuiEditorGraphicType::NGuiEditorGraphicEnum NGuiEditorGraphic;

	friend bool operator==(const TkNGuiEditorGraphicType& lhs, const TkNGuiEditorGraphicType& rhs) 
	{
		return lhs.NGuiEditorGraphic == rhs.NGuiEditorGraphic;
	}
};

//Dependency: NMSString0x100
struct TkNGuiEditorSavedFavourite
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedFavourite> Children;
	NMS::NMSString0x100 Name;
	bool AddedManually;

	friend bool operator==(const TkNGuiEditorSavedFavourite& lhs, const TkNGuiEditorSavedFavourite& rhs) 
	{
		return lhs.Children == rhs.Children &&
		lhs.Name == rhs.Name &&
		lhs.AddedManually == rhs.AddedManually;
	}
};

//Dependency: TkNGuiEditorSavedFavourite
//Dependency: TkNGuiEditorSavedTreeNodeModification
//Dependency: NMSString0x100
//Dependency: TkNGuiWindowLayoutData
struct TkNGuiEditorLayout
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedFavourite> FavouriteData;
	std::vector<int32_t> FavouriteTreeNodeChildCounts;
	std::vector<NMS::NMSString0x100> FavouriteTreeNodes;
	std::vector<NMS_Toolkit::TkNGuiEditorSavedTreeNodeModification> TreeNodeModificationData;
	NMS_Toolkit::TkNGuiWindowLayoutData Windows[256];

	friend bool operator==(const TkNGuiEditorLayout& lhs, const TkNGuiEditorLayout& rhs) 
	{
		return lhs.FavouriteData == rhs.FavouriteData &&
		lhs.FavouriteTreeNodeChildCounts == rhs.FavouriteTreeNodeChildCounts &&
		lhs.FavouriteTreeNodes == rhs.FavouriteTreeNodes &&
		lhs.TreeNodeModificationData == rhs.TreeNodeModificationData &&
		std::equal(std::begin(lhs.Windows), std::end(lhs.Windows), std::begin(rhs.Windows));
	}
};

//Dependency: TkNGuiEditorStyleColour
//Dependency: TkNGuiLayoutShortcut
//Dependency: VariableSizeString
//Dependency: TkNGuiGraphicStyle
//Dependency: TkNGuiTextStyle
struct TkNGuiEditorStyleData
{
	NMS_Toolkit::TkNGuiEditorStyleColour SkinColours[8];
	NMS::VariableSizeString Font;
	std::vector<NMS_Toolkit::TkNGuiLayoutShortcut> LayoutShortcuts;
	std::vector<float> SnapSettings;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyles[95];
	NMS_Toolkit::TkNGuiTextStyle TextStyles[15];
	float Sizes[65];
	float SkinFontHeight;

	friend bool operator==(const TkNGuiEditorStyleData& lhs, const TkNGuiEditorStyleData& rhs) 
	{
		return std::equal(std::begin(lhs.SkinColours), std::end(lhs.SkinColours), std::begin(rhs.SkinColours)) &&
		lhs.Font == rhs.Font &&
		lhs.LayoutShortcuts == rhs.LayoutShortcuts &&
		lhs.SnapSettings == rhs.SnapSettings &&
		std::equal(std::begin(lhs.GraphicStyles), std::end(lhs.GraphicStyles), std::begin(rhs.GraphicStyles)) &&
		std::equal(std::begin(lhs.TextStyles), std::end(lhs.TextStyles), std::begin(rhs.TextStyles)) &&
		std::equal(std::begin(lhs.Sizes), std::end(lhs.Sizes), std::begin(rhs.Sizes)) &&
		lhs.SkinFontHeight == rhs.SkinFontHeight;
	}
};

//Dependency: TkNGuiLayoutListData
struct TkNGuiLayoutList
{
	std::vector<NMS_Toolkit::TkNGuiLayoutListData> Layouts;

	friend bool operator==(const TkNGuiLayoutList& lhs, const TkNGuiLayoutList& rhs) 
	{
		return lhs.Layouts == rhs.Layouts;
	}
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
//Dependency: NMSString0x100
struct TkNGuiUserSettings
{
	NMS::NMSString0x10 AnimationViewerRecents[10];
	NMS::NMSString0x10 AnimationViewerRecentWindows[10];
	float FileBrowserThumbnailSize;
	float NguiScale;
	NMS::NMSString0x80 FavouriteWindows[20];
	NMS::NMSString0x100 FileBrowserFavourites[10];
	NMS::NMSString0x100 FileBrowserRecents[10];
	NMS::NMSString0x100 LastActiveLayout;
	NMS::NMSString0x100 LastLoadedModel;
	bool CanSelectRegionDecoratorNodesInDebugEditor;
	bool DebugEditorDebugDrawInPlayMode;
	bool FileBrowserAutoBuildTree;

	friend bool operator==(const TkNGuiUserSettings& lhs, const TkNGuiUserSettings& rhs) 
	{
		return std::equal(std::begin(lhs.AnimationViewerRecents), std::end(lhs.AnimationViewerRecents), std::begin(rhs.AnimationViewerRecents)) &&
		std::equal(std::begin(lhs.AnimationViewerRecentWindows), std::end(lhs.AnimationViewerRecentWindows), std::begin(rhs.AnimationViewerRecentWindows)) &&
		lhs.FileBrowserThumbnailSize == rhs.FileBrowserThumbnailSize &&
		lhs.NguiScale == rhs.NguiScale &&
		std::equal(std::begin(lhs.FavouriteWindows), std::end(lhs.FavouriteWindows), std::begin(rhs.FavouriteWindows)) &&
		std::equal(std::begin(lhs.FileBrowserFavourites), std::end(lhs.FileBrowserFavourites), std::begin(rhs.FileBrowserFavourites)) &&
		std::equal(std::begin(lhs.FileBrowserRecents), std::end(lhs.FileBrowserRecents), std::begin(rhs.FileBrowserRecents)) &&
		lhs.LastActiveLayout == rhs.LastActiveLayout &&
		lhs.LastLoadedModel == rhs.LastLoadedModel &&
		lhs.CanSelectRegionDecoratorNodesInDebugEditor == rhs.CanSelectRegionDecoratorNodesInDebugEditor &&
		lhs.DebugEditorDebugDrawInPlayMode == rhs.DebugEditorDebugDrawInPlayMode &&
		lhs.FileBrowserAutoBuildTree == rhs.FileBrowserAutoBuildTree;
	}
};

struct TkNavMeshAreaNavigability
{
	float EntryCost;
	float TravelCost;
	bool IsNavigable;

	friend bool operator==(const TkNavMeshAreaNavigability& lhs, const TkNavMeshAreaNavigability& rhs) 
	{
		return lhs.EntryCost == rhs.EntryCost &&
		lhs.TravelCost == rhs.TravelCost &&
		lhs.IsNavigable == rhs.IsNavigable;
	}
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: TkNavMeshAreaFlags
struct TkNavMeshAreaFlagNavigability
{
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;
	NMS_Toolkit::TkNavMeshAreaFlags AreaFlag;

	friend bool operator==(const TkNavMeshAreaFlagNavigability& lhs, const TkNavMeshAreaFlagNavigability& rhs) 
	{
		return lhs.Navigability == rhs.Navigability &&
		lhs.AreaFlag == rhs.AreaFlag;
	}
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: NMSString0x10
struct TkNavMeshAreaGroupNavigability
{
	NMS::NMSString0x10 AreaGroupId;
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;

	friend bool operator==(const TkNavMeshAreaGroupNavigability& lhs, const TkNavMeshAreaGroupNavigability& rhs) 
	{
		return lhs.AreaGroupId == rhs.AreaGroupId &&
		lhs.Navigability == rhs.Navigability;
	}
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: TkNavMeshAreaType
struct TkNavMeshAreaTypeNavigability
{
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;
	NMS_Toolkit::TkNavMeshAreaType AreaType;

	friend bool operator==(const TkNavMeshAreaTypeNavigability& lhs, const TkNavMeshAreaTypeNavigability& rhs) 
	{
		return lhs.Navigability == rhs.Navigability &&
		lhs.AreaType == rhs.AreaType;
	}
};

//Dependency: NMSString0x80
struct TkNetReplicatedEntityComponentData
{
	enum class SpawnTypeEnum : uint32_t
	{
		Basic = 0,
		Creature = 1,
	};

	enum class ReplicationRangeEnum : uint32_t
	{
		NotSet = 0,
		System = 1,
		SystemLocal = 2,
		Planet = 3,
		PlanetLocal = 4,
		Space = 5,
		SpaceStation = 6,
		Nexus = 7,
	};

	std::vector<NMS::NMSString0x80> ReplicaComponentMask;
	NMS_Toolkit::TkNetReplicatedEntityComponentData::ReplicationRangeEnum ReplicationRange;
	NMS_Toolkit::TkNetReplicatedEntityComponentData::SpawnTypeEnum SpawnType;
	bool IgnoreComponents;

	friend bool operator==(const TkNetReplicatedEntityComponentData& lhs, const TkNetReplicatedEntityComponentData& rhs) 
	{
		return lhs.ReplicaComponentMask == rhs.ReplicaComponentMask &&
		lhs.ReplicationRange == rhs.ReplicationRange &&
		lhs.SpawnType == rhs.SpawnType &&
		lhs.IgnoreComponents == rhs.IgnoreComponents;
	}
};

//Dependency: TkProceduralInstanceData
struct TkProceduralInstance
{
	NMS_Toolkit::TkProceduralInstanceData Data[16];

	friend bool operator==(const TkProceduralInstance& lhs, const TkProceduralInstance& rhs) 
	{
		return std::equal(std::begin(lhs.Data), std::end(lhs.Data), std::begin(rhs.Data));
	}
};

//Dependency: TkNoiseFlattenOptions
struct TkNoiseFlattenPoint
{
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	int32_t Classification;
	float Density;
	float FlattenRadius;
	int32_t Placement;
	float TurbulenceAmplitude;
	float TurbulenceFrequency;
	int32_t TurbulenceOctaves;
	bool AddLandingPad;
	bool AddShelter;
	bool AddWaypoint;

	friend bool operator==(const TkNoiseFlattenPoint& lhs, const TkNoiseFlattenPoint& rhs) 
	{
		return lhs.FlattenType == rhs.FlattenType &&
		lhs.Classification == rhs.Classification &&
		lhs.Density == rhs.Density &&
		lhs.FlattenRadius == rhs.FlattenRadius &&
		lhs.Placement == rhs.Placement &&
		lhs.TurbulenceAmplitude == rhs.TurbulenceAmplitude &&
		lhs.TurbulenceFrequency == rhs.TurbulenceFrequency &&
		lhs.TurbulenceOctaves == rhs.TurbulenceOctaves &&
		lhs.AddLandingPad == rhs.AddLandingPad &&
		lhs.AddShelter == rhs.AddShelter &&
		lhs.AddWaypoint == rhs.AddWaypoint;
	}
};

//Dependency: TkNoiseFlattenPoint
//Dependency: Vector3f
struct TkNoiseFlattenFixedPosition
{
	NMS::Vector3f Position;
	NMS_Toolkit::TkNoiseFlattenPoint FlattenPoint;

	friend bool operator==(const TkNoiseFlattenFixedPosition& lhs, const TkNoiseFlattenFixedPosition& rhs) 
	{
		return lhs.Position == rhs.Position &&
		lhs.FlattenPoint == rhs.FlattenPoint;
	}
};

struct TkNoiseLayersEnum
{
	enum class NoiseLayerTypesEnum : uint32_t
	{
		Base = 0,
		Hill = 1,
		Mountain = 2,
		Rock = 3,
		UnderWater = 4,
		Texture = 5,
		Elevation = 6,
		Continent = 7,
	};

	NMS_Toolkit::TkNoiseLayersEnum::NoiseLayerTypesEnum NoiseLayerTypes;

	friend bool operator==(const TkNoiseLayersEnum& lhs, const TkNoiseLayersEnum& rhs) 
	{
		return lhs.NoiseLayerTypes == rhs.NoiseLayerTypes;
	}
};

struct TkWaterRequirement
{
	enum class WaterRequirementEnum : uint32_t
	{
		NoStorm = 0,
		Storm = 1,
	};

	NMS_Toolkit::TkWaterRequirement::WaterRequirementEnum WaterRequirement;

	friend bool operator==(const TkWaterRequirement& lhs, const TkWaterRequirement& rhs) 
	{
		return lhs.WaterRequirement == rhs.WaterRequirement;
	}
};

//Dependency: TkEmitterFloatProperty
struct TkParticleSize
{
	NMS_Toolkit::TkEmitterFloatProperty GeneralSize;
	float PointAmplitudes[16];
	float PointRotations[16];
	float PointTimes[16];
	int32_t CurvePointCount;
	float CurveStrength;
	float Max;
	float Min;
	bool ManualSketchCurve;

	friend bool operator==(const TkParticleSize& lhs, const TkParticleSize& rhs) 
	{
		return lhs.GeneralSize == rhs.GeneralSize &&
		std::equal(std::begin(lhs.PointAmplitudes), std::end(lhs.PointAmplitudes), std::begin(rhs.PointAmplitudes)) &&
		std::equal(std::begin(lhs.PointRotations), std::end(lhs.PointRotations), std::begin(rhs.PointRotations)) &&
		std::equal(std::begin(lhs.PointTimes), std::end(lhs.PointTimes), std::begin(rhs.PointTimes)) &&
		lhs.CurvePointCount == rhs.CurvePointCount &&
		lhs.CurveStrength == rhs.CurveStrength &&
		lhs.Max == rhs.Max &&
		lhs.Min == rhs.Min &&
		lhs.ManualSketchCurve == rhs.ManualSketchCurve;
	}
};

//Dependency: TkParticleSize
//Dependency: TkCurveType
//Dependency: TkCoordinateOrientation
//Dependency: TkParticleBurstData
//Dependency: TkEmitterFloatProperty
//Dependency: TkFloatRange
//Dependency: TkEmitterWindDrift
//Dependency: TkEmitterBillboardAlignment
//Dependency: TkEmitFromParticleInfo
//Dependency: NMSString0x10
//Dependency: Colour
//Dependency: Vector3f
//Dependency: VariableSizeString
struct TkParticleData
{
	enum class SpawnOffsetTypeEnum : uint32_t
	{
		Sphere = 0,
		Box = 1,
		Disc = 2,
		Cone = 3,
		Donut = 4,
		Point = 5,
	};

	enum class OnRefractionsDisabledEnum : uint32_t
	{
		Hide = 0,
		AlphaBlend = 1,
	};

	enum class FlipbookPlaybackRateEnum : uint32_t
	{
		Absolute = 0,
		RelativeToMax = 1,
		OnceToCompletion = 2,
		Random = 3,
	};

	enum class EmitterQualityLevelEnum : uint32_t
	{
		All = 0,
		Low = 1,
		High = 2,
	};

	enum class DragTypeEnum : uint32_t
	{
		IgnoreGravity = 0,
		PhysicallyBased = 1,
		ApplyWind = 2,
	};

	enum class AlignmentEnum : uint32_t
	{
		Rotation = 0,
		Velocity = 1,
		VelocityScreenSpace = 2,
	};

	NMS::Colour ColourEnd;
	NMS::Colour ColourMiddle;
	NMS::Colour ColourStart;
	NMS::Vector3f EmitterDirection;
	NMS::Vector3f RotateAroundEmitterAxis;
	NMS::Vector3f RotationAxis;
	NMS::Vector3f RotationPivot;
	NMS::Vector3f SpawnOffsetParams;
	NMS_Toolkit::TkParticleSize ParticleSize;
	NMS_Toolkit::TkParticleBurstData BurstData;
	NMS_Toolkit::TkEmitterFloatProperty AlphaThreshold;
	NMS_Toolkit::TkEmitterFloatProperty EmissionRate;
	NMS_Toolkit::TkEmitterFloatProperty EmitterLife;
	NMS_Toolkit::TkEmitterFloatProperty ParticleDamping;
	NMS_Toolkit::TkEmitterFloatProperty ParticleDrag;
	NMS_Toolkit::TkEmitterFloatProperty ParticleGravity;
	NMS_Toolkit::TkEmitterFloatProperty ParticleLife;
	NMS_Toolkit::TkEmitterFloatProperty ParticleSizeY;
	NMS_Toolkit::TkEmitterFloatProperty ParticleSpeedMultiplier;
	NMS_Toolkit::TkEmitterFloatProperty Rotation;
	NMS::VariableSizeString _3DGeom;
	NMS::VariableSizeString TrailPath;
	NMS::NMSString0x10 UserColour;
	NMS_Toolkit::TkEmitterWindDrift WindDrift;
	NMS_Toolkit::TkEmitterBillboardAlignment BillboardAlignment;
	NMS_Toolkit::TkFloatRange CameraDistanceFade;
	NMS_Toolkit::TkEmitFromParticleInfo EmitFromParticleInfo;
	NMS_Toolkit::TkParticleData::AlignmentEnum Alignment;
	float AlphaVariance;
	uint32_t AudioEvent;
	float Delay;
	NMS_Toolkit::TkParticleData::DragTypeEnum DragType;
	float EmitterMidLifeRatio;
	NMS_Toolkit::TkParticleData::EmitterQualityLevelEnum EmitterQualityLevel;
	float EmitterSpreadAngle;
	float EmitterSpreadAngleMin;
	NMS_Toolkit::TkParticleData::FlipbookPlaybackRateEnum FlipbookPlaybackRate;
	float HueVariance;
	float LightnessVariance;
	float LimitLifetimeOnMove;
	int32_t MaxCount;
	float MaxRenderCameraHeight;
	float MaxRenderDistance;
	float MaxSpawnDistance;
	NMS_Toolkit::TkParticleData::OnRefractionsDisabledEnum OnRefractionsDisabled;
	float RotateAroundEmitter;
	float SaturationVariance;
	float SoftFadeStrength;
	NMS_Toolkit::TkParticleData::SpawnOffsetTypeEnum SpawnOffsetType;
	float StartOffset;
	float StartRotationVariation;
	float SurfaceDistanceFadeStrength;
	float TrackEmitterPosition;
	float TrailRatio;
	NMS_Toolkit::TkCoordinateOrientation UCoordinate;
	NMS_Toolkit::TkCoordinateOrientation VCoordinate;
	float Variation;
	float VelocityInheritance;
	NMS_Toolkit::TkCurveType EmitterLifeCurve1;
	NMS_Toolkit::TkCurveType EmitterLifeCurve2;
	bool FadeRefractionsAtScreenEdge;
	bool Oneshot;
	bool StartEnabled;
	bool TrailIsRibbon;

	friend bool operator==(const TkParticleData& lhs, const TkParticleData& rhs) 
	{
		return lhs.ColourEnd == rhs.ColourEnd &&
		lhs.ColourMiddle == rhs.ColourMiddle &&
		lhs.ColourStart == rhs.ColourStart &&
		lhs.EmitterDirection == rhs.EmitterDirection &&
		lhs.RotateAroundEmitterAxis == rhs.RotateAroundEmitterAxis &&
		lhs.RotationAxis == rhs.RotationAxis &&
		lhs.RotationPivot == rhs.RotationPivot &&
		lhs.SpawnOffsetParams == rhs.SpawnOffsetParams &&
		lhs.ParticleSize == rhs.ParticleSize &&
		lhs.BurstData == rhs.BurstData &&
		lhs.AlphaThreshold == rhs.AlphaThreshold &&
		lhs.EmissionRate == rhs.EmissionRate &&
		lhs.EmitterLife == rhs.EmitterLife &&
		lhs.ParticleDamping == rhs.ParticleDamping &&
		lhs.ParticleDrag == rhs.ParticleDrag &&
		lhs.ParticleGravity == rhs.ParticleGravity &&
		lhs.ParticleLife == rhs.ParticleLife &&
		lhs.ParticleSizeY == rhs.ParticleSizeY &&
		lhs.ParticleSpeedMultiplier == rhs.ParticleSpeedMultiplier &&
		lhs.Rotation == rhs.Rotation &&
		lhs._3DGeom == rhs._3DGeom &&
		lhs.TrailPath == rhs.TrailPath &&
		lhs.UserColour == rhs.UserColour &&
		lhs.WindDrift == rhs.WindDrift &&
		lhs.BillboardAlignment == rhs.BillboardAlignment &&
		lhs.CameraDistanceFade == rhs.CameraDistanceFade &&
		lhs.EmitFromParticleInfo == rhs.EmitFromParticleInfo &&
		lhs.Alignment == rhs.Alignment &&
		lhs.AlphaVariance == rhs.AlphaVariance &&
		lhs.AudioEvent == rhs.AudioEvent &&
		lhs.Delay == rhs.Delay &&
		lhs.DragType == rhs.DragType &&
		lhs.EmitterMidLifeRatio == rhs.EmitterMidLifeRatio &&
		lhs.EmitterQualityLevel == rhs.EmitterQualityLevel &&
		lhs.EmitterSpreadAngle == rhs.EmitterSpreadAngle &&
		lhs.EmitterSpreadAngleMin == rhs.EmitterSpreadAngleMin &&
		lhs.FlipbookPlaybackRate == rhs.FlipbookPlaybackRate &&
		lhs.HueVariance == rhs.HueVariance &&
		lhs.LightnessVariance == rhs.LightnessVariance &&
		lhs.LimitLifetimeOnMove == rhs.LimitLifetimeOnMove &&
		lhs.MaxCount == rhs.MaxCount &&
		lhs.MaxRenderCameraHeight == rhs.MaxRenderCameraHeight &&
		lhs.MaxRenderDistance == rhs.MaxRenderDistance &&
		lhs.MaxSpawnDistance == rhs.MaxSpawnDistance &&
		lhs.OnRefractionsDisabled == rhs.OnRefractionsDisabled &&
		lhs.RotateAroundEmitter == rhs.RotateAroundEmitter &&
		lhs.SaturationVariance == rhs.SaturationVariance &&
		lhs.SoftFadeStrength == rhs.SoftFadeStrength &&
		lhs.SpawnOffsetType == rhs.SpawnOffsetType &&
		lhs.StartOffset == rhs.StartOffset &&
		lhs.StartRotationVariation == rhs.StartRotationVariation &&
		lhs.SurfaceDistanceFadeStrength == rhs.SurfaceDistanceFadeStrength &&
		lhs.TrackEmitterPosition == rhs.TrackEmitterPosition &&
		lhs.TrailRatio == rhs.TrailRatio &&
		lhs.UCoordinate == rhs.UCoordinate &&
		lhs.VCoordinate == rhs.VCoordinate &&
		lhs.Variation == rhs.Variation &&
		lhs.VelocityInheritance == rhs.VelocityInheritance &&
		lhs.EmitterLifeCurve1 == rhs.EmitterLifeCurve1 &&
		lhs.EmitterLifeCurve2 == rhs.EmitterLifeCurve2 &&
		lhs.FadeRefractionsAtScreenEdge == rhs.FadeRefractionsAtScreenEdge &&
		lhs.Oneshot == rhs.Oneshot &&
		lhs.StartEnabled == rhs.StartEnabled &&
		lhs.TrailIsRibbon == rhs.TrailIsRibbon;
	}
};

//Dependency: TkPhysicsData
//Dependency: TkNavMeshInclusionParams
//Dependency: TkVolumeTriggerType
struct TkPhysicsComponentData
{
	enum class SurfacePropertiesEnum : uint32_t
	{
		None = 0,
		Glass = 1,
	};

	enum class ModelOwnershipEnum : uint32_t
	{
		Model = 0,
		MasterModel = 1,
		None = 2,
	};

	NMS_Toolkit::TkPhysicsData Data;
	NMS_Toolkit::TkNavMeshInclusionParams NavMeshInclusion;
	NMS_Toolkit::TkPhysicsComponentData::ModelOwnershipEnum ModelOwnership;
	float SimpleCharacterCollisionFwdOffset;
	float SimpleCharacterCollisionHeight;
	float SimpleCharacterCollisionHeightOffset;
	float SimpleCharacterCollisionRadius;
	float SpinOnCreate;
	NMS_Toolkit::TkPhysicsComponentData::SurfacePropertiesEnum SurfaceProperties;
	NMS_Toolkit::TkVolumeTriggerType TriggerVolumeType;
	bool AllowedDefaultCollision;
	bool AllowTeleporter;
	bool Animated;
	bool BlocksInteract;
	bool BlockTeleporter;
	bool CameraInvisible;
	bool Climbable;
	bool DisableGravity;
	bool Floor;
	bool IgnoreAllCollisions;
	bool IgnoreModelOwner;
	bool InvisibleForInteraction;
	bool IsTransporter;
	bool NoFallDamage;
	bool NoFireCollide;
	bool NoPlayerCollide;
	bool NoTerrainCollide;
	bool NoVehicleCollide;
	bool RotateSimpleCharacterCollisionCapsule;
	bool ScaleAffectsMass;
	bool TriggerVolume;
	bool UseBasePartOptimisation;
	bool UseSimpleCharacterCollision;
	bool Walkable;

	friend bool operator==(const TkPhysicsComponentData& lhs, const TkPhysicsComponentData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.NavMeshInclusion == rhs.NavMeshInclusion &&
		lhs.ModelOwnership == rhs.ModelOwnership &&
		lhs.SimpleCharacterCollisionFwdOffset == rhs.SimpleCharacterCollisionFwdOffset &&
		lhs.SimpleCharacterCollisionHeight == rhs.SimpleCharacterCollisionHeight &&
		lhs.SimpleCharacterCollisionHeightOffset == rhs.SimpleCharacterCollisionHeightOffset &&
		lhs.SimpleCharacterCollisionRadius == rhs.SimpleCharacterCollisionRadius &&
		lhs.SpinOnCreate == rhs.SpinOnCreate &&
		lhs.SurfaceProperties == rhs.SurfaceProperties &&
		lhs.TriggerVolumeType == rhs.TriggerVolumeType &&
		lhs.AllowedDefaultCollision == rhs.AllowedDefaultCollision &&
		lhs.AllowTeleporter == rhs.AllowTeleporter &&
		lhs.Animated == rhs.Animated &&
		lhs.BlocksInteract == rhs.BlocksInteract &&
		lhs.BlockTeleporter == rhs.BlockTeleporter &&
		lhs.CameraInvisible == rhs.CameraInvisible &&
		lhs.Climbable == rhs.Climbable &&
		lhs.DisableGravity == rhs.DisableGravity &&
		lhs.Floor == rhs.Floor &&
		lhs.IgnoreAllCollisions == rhs.IgnoreAllCollisions &&
		lhs.IgnoreModelOwner == rhs.IgnoreModelOwner &&
		lhs.InvisibleForInteraction == rhs.InvisibleForInteraction &&
		lhs.IsTransporter == rhs.IsTransporter &&
		lhs.NoFallDamage == rhs.NoFallDamage &&
		lhs.NoFireCollide == rhs.NoFireCollide &&
		lhs.NoPlayerCollide == rhs.NoPlayerCollide &&
		lhs.NoTerrainCollide == rhs.NoTerrainCollide &&
		lhs.NoVehicleCollide == rhs.NoVehicleCollide &&
		lhs.RotateSimpleCharacterCollisionCapsule == rhs.RotateSimpleCharacterCollisionCapsule &&
		lhs.ScaleAffectsMass == rhs.ScaleAffectsMass &&
		lhs.TriggerVolume == rhs.TriggerVolume &&
		lhs.UseBasePartOptimisation == rhs.UseBasePartOptimisation &&
		lhs.UseSimpleCharacterCollision == rhs.UseSimpleCharacterCollision &&
		lhs.Walkable == rhs.Walkable;
	}
};

struct TkPlatformGroup
{
	enum class PlatformMaskEnum : uint32_t
	{
		None = 0,
		Playfab = 1,
		Steam = 2,
		Playstation = 4,
		XBox = 8,
	};

	NMS_Toolkit::TkPlatformGroup::PlatformMaskEnum PlatformMask;

	friend bool operator==(const TkPlatformGroup& lhs, const TkPlatformGroup& rhs) 
	{
		return lhs.PlatformMask == rhs.PlatformMask;
	}
};

struct TkPostProcessData
{
	float BrightnessDepth;
	float BrightnessFinal;
	float ContrastDepth;
	float ContrastFinal;
	float DOFFarAmount;
	float DOFFarPlane;
	float DOFNearAmount;
	float DOFNearPlane;
	float SaturationDepth;
	float SaturationFinal;

	friend bool operator==(const TkPostProcessData& lhs, const TkPostProcessData& rhs) 
	{
		return lhs.BrightnessDepth == rhs.BrightnessDepth &&
		lhs.BrightnessFinal == rhs.BrightnessFinal &&
		lhs.ContrastDepth == rhs.ContrastDepth &&
		lhs.ContrastFinal == rhs.ContrastFinal &&
		lhs.DOFFarAmount == rhs.DOFFarAmount &&
		lhs.DOFFarPlane == rhs.DOFFarPlane &&
		lhs.DOFNearAmount == rhs.DOFNearAmount &&
		lhs.DOFNearPlane == rhs.DOFNearPlane &&
		lhs.SaturationDepth == rhs.SaturationDepth &&
		lhs.SaturationFinal == rhs.SaturationFinal;
	}
};

struct TkWaveInputData
{
	int32_t Count;
	float Strength;
	float Variance;

	friend bool operator==(const TkWaveInputData& lhs, const TkWaveInputData& rhs) 
	{
		return lhs.Count == rhs.Count &&
		lhs.Strength == rhs.Strength &&
		lhs.Variance == rhs.Variance;
	}
};

struct TkProbability
{
	enum class ProbabilityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
		Extraordinary = 3,
	};

	NMS_Toolkit::TkProbability::ProbabilityEnum Probability;

	friend bool operator==(const TkProbability& lhs, const TkProbability& rhs) 
	{
		return lhs.Probability == rhs.Probability;
	}
};

//Dependency: VariableSizeString
struct TkProceduralModelComponentData
{
	std::vector<NMS::VariableSizeString> List;

	friend bool operator==(const TkProceduralModelComponentData& lhs, const TkProceduralModelComponentData& rhs) 
	{
		return lhs.List == rhs.List;
	}
};

//Dependency: NMSString0x20
struct TkRagdollData
{
	std::vector<NMS::NMSString0x20> ChainEnds;
	std::vector<NMS::NMSString0x20> ExcludeJoints;

	friend bool operator==(const TkRagdollData& lhs, const TkRagdollData& rhs) 
	{
		return lhs.ChainEnds == rhs.ChainEnds &&
		lhs.ExcludeJoints == rhs.ExcludeJoints;
	}
};

//Dependency: VariableSizeString
struct TkReferenceComponentData
{
	NMS::VariableSizeString LSystem;
	NMS::VariableSizeString Reference;

	friend bool operator==(const TkReferenceComponentData& lhs, const TkReferenceComponentData& rhs) 
	{
		return lhs.LSystem == rhs.LSystem &&
		lhs.Reference == rhs.Reference;
	}
};

//Dependency: TkReplacementResource
struct TkReplacementResourceTable
{
	std::vector<NMS_Toolkit::TkReplacementResource> Data;

	friend bool operator==(const TkReplacementResourceTable& lhs, const TkReplacementResourceTable& rhs) 
	{
		return lhs.Data == rhs.Data;
	}
};

//Dependency: Vector3f
struct TkRotationComponentData
{
	NMS::Vector3f Axis;
	float Speed;
	int32_t SyncGroup;
	bool AlwaysUpdate;

	friend bool operator==(const TkRotationComponentData& lhs, const TkRotationComponentData& rhs) 
	{
		return lhs.Axis == rhs.Axis &&
		lhs.Speed == rhs.Speed &&
		lhs.SyncGroup == rhs.SyncGroup &&
		lhs.AlwaysUpdate == rhs.AlwaysUpdate;
	}
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkSceneNodeAttributeData
{
	NMS::NMSString0x10 Name;
	NMS::VariableSizeString Value;

	friend bool operator==(const TkSceneNodeAttributeData& lhs, const TkSceneNodeAttributeData& rhs) 
	{
		return lhs.Name == rhs.Name &&
		lhs.Value == rhs.Value;
	}
};

struct TkTransformData
{
	float RotX;
	float RotY;
	float RotZ;
	float ScaleX;
	float ScaleY;
	float ScaleZ;
	float TransX;
	float TransY;
	float TransZ;

	friend bool operator==(const TkTransformData& lhs, const TkTransformData& rhs) 
	{
		return lhs.RotX == rhs.RotX &&
		lhs.RotY == rhs.RotY &&
		lhs.RotZ == rhs.RotZ &&
		lhs.ScaleX == rhs.ScaleX &&
		lhs.ScaleY == rhs.ScaleY &&
		lhs.ScaleZ == rhs.ScaleZ &&
		lhs.TransX == rhs.TransX &&
		lhs.TransY == rhs.TransY &&
		lhs.TransZ == rhs.TransZ;
	}
};

//Dependency: TkSceneNodeAttributeData
//Dependency: TkTransformData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkSceneNodeData
{
	std::vector<NMS_Toolkit::TkSceneNodeAttributeData> Attributes;
	std::vector<NMS_Toolkit::TkSceneNodeData> Children;
	NMS::VariableSizeString Name;
	NMS::NMSString0x10 Type;
	NMS_Toolkit::TkTransformData Transform;
	uint32_t NameHash;
	int8_t PlatformExclusion;

	friend bool operator==(const TkSceneNodeData& lhs, const TkSceneNodeData& rhs) 
	{
		return lhs.Attributes == rhs.Attributes &&
		lhs.Children == rhs.Children &&
		lhs.Name == rhs.Name &&
		lhs.Type == rhs.Type &&
		lhs.Transform == rhs.Transform &&
		lhs.NameHash == rhs.NameHash &&
		lhs.PlatformExclusion == rhs.PlatformExclusion;
	}
};

struct TkSketchConditions
{
	enum class ConditionEnum : uint32_t
	{
		Equal = 0,
		NotEqual = 1,
		Greater = 2,
		Less = 3,
		GreaterEqual = 4,
		LessEqual = 5,
	};

	NMS_Toolkit::TkSketchConditions::ConditionEnum Condition;

	friend bool operator==(const TkSketchConditions& lhs, const TkSketchConditions& rhs) 
	{
		return lhs.Condition == rhs.Condition;
	}
};

//Dependency: TkPhysicsData
//Dependency: TkNavMeshInclusionParams
//Dependency: TkVolumeTriggerType
struct TkStaticPhysicsComponentData
{
	NMS_Toolkit::TkPhysicsData Data;
	NMS_Toolkit::TkNavMeshInclusionParams NavMeshInclusion;
	NMS_Toolkit::TkVolumeTriggerType TriggerVolumeType;
	bool AddToWorldImmediately;
	bool AddToWorldOnPrepare;
	bool CameraInvisible;
	bool Climbable;
	bool NoPlayerCollide;
	bool NoTerrainCollide;
	bool NoVehicleCollide;
	bool TriggerVolume;

	friend bool operator==(const TkStaticPhysicsComponentData& lhs, const TkStaticPhysicsComponentData& rhs) 
	{
		return lhs.Data == rhs.Data &&
		lhs.NavMeshInclusion == rhs.NavMeshInclusion &&
		lhs.TriggerVolumeType == rhs.TriggerVolumeType &&
		lhs.AddToWorldImmediately == rhs.AddToWorldImmediately &&
		lhs.AddToWorldOnPrepare == rhs.AddToWorldOnPrepare &&
		lhs.CameraInvisible == rhs.CameraInvisible &&
		lhs.Climbable == rhs.Climbable &&
		lhs.NoPlayerCollide == rhs.NoPlayerCollide &&
		lhs.NoTerrainCollide == rhs.NoTerrainCollide &&
		lhs.NoVehicleCollide == rhs.NoVehicleCollide &&
		lhs.TriggerVolume == rhs.TriggerVolume;
	}
};

struct TkTrophyEnum
{
	enum class TrophyEnum : uint32_t
	{
		None = 4294967295,
		Trophy0 = 0,
		Trophy1 = 1,
		Trophy2 = 2,
		Trophy3 = 3,
		Trophy4 = 4,
	};

	NMS_Toolkit::TkTrophyEnum::TrophyEnum Trophy;

	friend bool operator==(const TkTrophyEnum& lhs, const TkTrophyEnum& rhs) 
	{
		return lhs.Trophy == rhs.Trophy;
	}
};

//Dependency: TkSaveID
struct TkUniqueSyncKey
{
	uint64_t Index;
	NMS_Toolkit::TkSaveID OwnerID;

	friend bool operator==(const TkUniqueSyncKey& lhs, const TkUniqueSyncKey& rhs) 
	{
		return lhs.Index == rhs.Index &&
		lhs.OwnerID == rhs.OwnerID;
	}
};

//Dependency: TkPlatformGroup
//Dependency: NMSString0x40
struct TkUserAccount
{
	NMS_Toolkit::TkPlatformGroup PlatformGroup;
	NMS::NMSString0x40 OnlineID;

	friend bool operator==(const TkUserAccount& lhs, const TkUserAccount& rhs) 
	{
		return lhs.PlatformGroup == rhs.PlatformGroup &&
		lhs.OnlineID == rhs.OnlineID;
	}
};

struct TkUserServiceAuthProvider
{
	enum class AuthProviderEnum : uint32_t
	{
		Null = 0,
		PSN = 1,
		Steam = 2,
		Galaxy = 3,
		Xbox = 4,
		WeGame = 5,
		NSO = 6,
		GameCenter = 7,
	};

	NMS_Toolkit::TkUserServiceAuthProvider::AuthProviderEnum AuthProvider;

	friend bool operator==(const TkUserServiceAuthProvider& lhs, const TkUserServiceAuthProvider& rhs) 
	{
		return lhs.AuthProvider == rhs.AuthProvider;
	}
};

//Dependency: TkNoiseFlattenPoint
struct TkVoxelGeneratorRegionData
{
	std::vector<NMS_Toolkit::TkNoiseFlattenPoint> FlattenTerrainPoints;
	std::vector<float> FlattenTypeChances;
	int32_t ShelterIndices[3];
	float AddShelterChance;
	int32_t LandingPadIndex;
	int32_t NumShelters;
	float PlanetRadius;
	float VoronoiPointDivisions;
	int32_t VoronoiPointSeed;
	int32_t VoronoiSectorSeed;
	int32_t WaypointIndex;

	friend bool operator==(const TkVoxelGeneratorRegionData& lhs, const TkVoxelGeneratorRegionData& rhs) 
	{
		return lhs.FlattenTerrainPoints == rhs.FlattenTerrainPoints &&
		lhs.FlattenTypeChances == rhs.FlattenTypeChances &&
		std::equal(std::begin(lhs.ShelterIndices), std::end(lhs.ShelterIndices), std::begin(rhs.ShelterIndices)) &&
		lhs.AddShelterChance == rhs.AddShelterChance &&
		lhs.LandingPadIndex == rhs.LandingPadIndex &&
		lhs.NumShelters == rhs.NumShelters &&
		lhs.PlanetRadius == rhs.PlanetRadius &&
		lhs.VoronoiPointDivisions == rhs.VoronoiPointDivisions &&
		lhs.VoronoiPointSeed == rhs.VoronoiPointSeed &&
		lhs.VoronoiSectorSeed == rhs.VoronoiSectorSeed &&
		lhs.WaypointIndex == rhs.WaypointIndex;
	}
};

//Dependency: TkVoxelGeneratorSettingsElement
struct TkVoxelGeneratorSettingsArray
{
	NMS_Toolkit::TkVoxelGeneratorSettingsElement TerrainSettings[31];

	friend bool operator==(const TkVoxelGeneratorSettingsArray& lhs, const TkVoxelGeneratorSettingsArray& rhs) 
	{
		return std::equal(std::begin(lhs.TerrainSettings), std::end(lhs.TerrainSettings), std::begin(rhs.TerrainSettings));
	}
};

//Dependency: TkWaveInputData
//Dependency: TkFoamProperties
struct TkWaterConditionData
{
	std::vector<NMS_Toolkit::TkWaveInputData> Waves;
	NMS_Toolkit::TkFoamProperties FoamProperties;
	float DetailNormalsStrength;
	float WaveRTPCStrength;

	friend bool operator==(const TkWaterConditionData& lhs, const TkWaterConditionData& rhs) 
	{
		return lhs.Waves == rhs.Waves &&
		lhs.FoamProperties == rhs.FoamProperties &&
		lhs.DetailNormalsStrength == rhs.DetailNormalsStrength &&
		lhs.WaveRTPCStrength == rhs.WaveRTPCStrength;
	}
};

//Dependency: TkWaterConditionData
//Dependency: TkBiomeSpecificWaterConditions
//Dependency: TkAllowedWaterConditions
struct TkWaterData
{
	NMS_Toolkit::TkWaterConditionData WaterConditions[15];
	NMS_Toolkit::TkBiomeSpecificWaterConditions BiomeSpecificUsage[17];
	NMS_Toolkit::TkAllowedWaterConditions WaterConditionUsage[2];
	float MinimumWavelength;

	friend bool operator==(const TkWaterData& lhs, const TkWaterData& rhs) 
	{
		return std::equal(std::begin(lhs.WaterConditions), std::end(lhs.WaterConditions), std::begin(rhs.WaterConditions)) &&
		std::equal(std::begin(lhs.BiomeSpecificUsage), std::end(lhs.BiomeSpecificUsage), std::begin(rhs.BiomeSpecificUsage)) &&
		std::equal(std::begin(lhs.WaterConditionUsage), std::end(lhs.WaterConditionUsage), std::begin(rhs.WaterConditionUsage)) &&
		lhs.MinimumWavelength == rhs.MinimumWavelength;
	}
};

struct TkWaveSpectrumData
{
	float Chop;
	float Wavelength;

	friend bool operator==(const TkWaveSpectrumData& lhs, const TkWaveSpectrumData& rhs) 
	{
		return lhs.Chop == rhs.Chop &&
		lhs.Wavelength == rhs.Wavelength;
	}
};

//Dependency: TkWeightedAnim
//Dependency: NMSString0x10
struct TkWeightedAnimLibrary
{
	std::vector<NMS_Toolkit::TkWeightedAnim> Anims;
	NMS::NMSString0x10 Id;

	friend bool operator==(const TkWeightedAnimLibrary& lhs, const TkWeightedAnimLibrary& rhs) 
	{
		return lhs.Anims == rhs.Anims &&
		lhs.Id == rhs.Id;
	}
};


} //namespace NMS_Toolkit
