//Generated by NMSgen CSharpInterpreter

#pragma once

#include <string>
#include <vector>

struct NMSTemplate {};

namespace NMS_GameComponents
{

struct GcBaseStatCondition
{
	enum class BaseStatEnum : uint32_t
	{
		HasTeleporter = 0,
		HasMainframe = 1,
	};

	NMS_GameComponents::GcBaseStatCondition::BaseStatEnum BaseStat;
	bool StatValue;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Colour
{
	float R;
	float G;
	float B;
	float A;
};


} //namespace NMS

namespace NMS_Toolkit
{

struct TkAllowedWaterConditions
{
	float ConditionWeights[15];
};

//Dependency: TkAllowedWaterConditions
struct TkBiomeSpecificWaterConditions
{
	NMS_Toolkit::TkAllowedWaterConditions WaterConditionUsage[2];
};


} //namespace NMS_Toolkit

namespace NMS
{

struct NMSString0x80
{
	//max length: 128
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x80
struct GcJudgementMessageOptions
{
	NMS::NMSString0x80 MessageInSettlement;
	NMS::NMSString0x80 MessageInSettlementSystem;
	NMS::NMSString0x80 MessageOutOfSettlementSystem;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct VariableSizeString
{
	//max length: 2048
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcJudgementMessageOptions
//Dependency: VariableSizeString
struct GcMissionSequenceCompleteSettlementJudgement
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcJudgementMessageOptions MessageOptions[12];
	NMS_GameComponents::GcJudgementMessageOptions MessageNoOffice;
	bool FormatObjectives;
};

struct GcAISpaceshipRoles
{
	enum class AIShipRoleEnum : uint32_t
	{
		Standard = 0,
		PlayerSquadron = 1,
		Freighter = 2,
		CapitalFreighter = 3,
		SmallFreighter = 4,
		TinyFreighter = 5,
		Frigate = 6,
	};

	NMS_GameComponents::GcAISpaceshipRoles::AIShipRoleEnum AIShipRole;
};

struct GcSpaceshipClasses
{
	enum class ShipClassEnum : uint32_t
	{
		Freighter = 0,
		Dropship = 1,
		Fighter = 2,
		Scientific = 3,
		Shuttle = 4,
		PlayerFreighter = 5,
		Royal = 6,
		Alien = 7,
		Sail = 8,
		Robot = 9,
	};

	NMS_GameComponents::GcSpaceshipClasses::ShipClassEnum ShipClass;
};

struct GcFrigateClass
{
	enum class FrigateClassEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomacy = 3,
		Support = 4,
		Normandy = 5,
		DeepSpace = 6,
		DeepSpaceCommon = 7,
		Pirate = 8,
		GhostShip = 9,
	};

	NMS_GameComponents::GcFrigateClass::FrigateClassEnum FrigateClass;
};

//Dependency: GcAISpaceshipRoles
//Dependency: GcSpaceshipClasses
//Dependency: GcFrigateClass
//Dependency: VariableSizeString
struct GcAISpaceshipModelData
{
	NMS::VariableSizeString Filename;
	NMS_GameComponents::GcAISpaceshipRoles AIRole;
	NMS_GameComponents::GcSpaceshipClasses Class;
	NMS_GameComponents::GcFrigateClass FrigateClass;
};

//Dependency: GcAISpaceshipModelData
struct GcAISpaceshipModelDataArray
{
	std::vector<NMS_GameComponents::GcAISpaceshipModelData> Spaceships;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x20A
{
	//max length: 32
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcWeightedMaterialId
{
	NMS::NMSString0x20A DecorationId;
	NMS::NMSString0x20A Id;
	float RelativeProbability;
};

struct GcBuildingClassification
{
	enum class BuildingClassEnum : uint32_t
	{
		None = 0,
		TerrainResource = 1,
		Shelter = 2,
		Abandoned = 3,
		Terminal = 4,
		Shop = 5,
		Outpost = 6,
		Waypoint = 7,
		Beacon = 8,
		RadioTower = 9,
		Observatory = 10,
		Depot = 11,
		Factory = 12,
		Harvester = 13,
		Plaque = 14,
		Monolith = 15,
		Portal = 16,
		Ruin = 17,
		Debris = 18,
		DamagedMachine = 19,
		DistressSignal = 20,
		LandingPad = 21,
		Base = 22,
		MissionTower = 23,
		CrashedFreighter = 24,
		GraveInCave = 25,
		StoryGlitch = 26,
		TreasureRuins = 27,
		GameStartSpawn = 28,
		WaterCrashedFreighter = 29,
		WaterTreasureRuins = 30,
		WaterAbandoned = 31,
		WaterDistressSignal = 32,
		NPCDistressSignal = 33,
		NPCDebris = 34,
		LargeBuilding = 35,
		Settlement_Hub = 36,
		Settlement_LandingZone = 37,
		Settlement_Bar = 38,
		Settlement_Tower = 39,
		Settlement_Market = 40,
		Settlement_Small = 41,
		Settlement_SmallIndustrial = 42,
		Settlement_Medium = 43,
		Settlement_Large = 44,
		Settlement_Monument = 45,
		Settlement_SheriffsOffice = 46,
		Settlement_Double = 47,
		Settlement_Farm = 48,
		Settlement_Factory = 49,
		Settlement_Clump = 50,
		DroneHive = 51,
		SentinelDistressSignal = 52,
		AbandonedRobotCamp = 53,
		RobotHead = 54,
		DigSite = 55,
		AncientGuardian = 56,
		Settlement_Hub_Builders = 57,
		Settlement_FishPond = 58,
		Settlement_Builders_RoboArm = 59,
	};

	NMS_GameComponents::GcBuildingClassification::BuildingClassEnum BuildingClass;
};

//Dependency: GcWeightedMaterialId
//Dependency: GcBuildingClassification
struct GcBuildingMaterialOverride
{
	std::vector<NMS_GameComponents::GcWeightedMaterialId> Materials;
	NMS_GameComponents::GcBuildingClassification Building;
};

//Dependency: GcBuildingMaterialOverride
//Dependency: GcWeightedMaterialId
struct GcSettlementMaterialData
{
	std::vector<NMS_GameComponents::GcBuildingMaterialOverride> BuildingMaterials;
	std::vector<NMS_GameComponents::GcBuildingMaterialOverride> BuildingPalettes;
	std::vector<NMS_GameComponents::GcWeightedMaterialId> DefaultMaterials;
	std::vector<NMS_GameComponents::GcWeightedMaterialId> DefaultPalettes;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x10
{
	//max length: 16
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcUnlockableItemTreeNode
{
	std::vector<NMS_GameComponents::GcUnlockableItemTreeNode> Children;
	NMS::NMSString0x10 Unlockable;
};

//Dependency: GcUnlockableItemTreeNode
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableItemTree
{
	NMS_GameComponents::GcUnlockableItemTreeNode Root;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 CostTypeID;
};

//Dependency: GcUnlockableItemTree
//Dependency: NMSString0x20A
struct GcUnlockableItemTrees
{
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcUnlockableItemTree> Trees;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct halfVector4
{
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcRealityCommonFactions
{
	enum class AIFactionEnum : uint32_t
	{
		Player = 0,
		Civilian = 1,
		Pirate = 2,
		Police = 3,
		Creature = 4,
	};

	NMS_GameComponents::GcRealityCommonFactions::AIFactionEnum AIFaction;
};

//Dependency: GcRealityCommonFactions
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForShips
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageLowShield;
	int32_t Count;
	NMS_GameComponents::GcRealityCommonFactions Type;
};

//Dependency: NMSString0x10
struct GcAnimFrameEvent
{
	NMS::NMSString0x10 Anim;
	int32_t FrameStart;
	bool StartFromEnd;
};

struct GcBasePartAudioLocation
{
	enum class BasePartAudioLocationEnum : uint32_t
	{
		None = 0,
		Freighter_SpaceWalk = 1,
		Freighter_BioRoom = 2,
		Freighter_TechRoom = 3,
		Freighter_IndustrialRoom = 4,
	};

	NMS_GameComponents::GcBasePartAudioLocation::BasePartAudioLocationEnum BasePartAudioLocation;
};

struct GcInventoryIndex
{
	int32_t X;
	int32_t Y;
};

struct GcInventorySpecialSlotType
{
	enum class InventorySpecialSlotTypeEnum : uint32_t
	{
		Broken = 0,
		TechOnly = 1,
		Cargo = 2,
		BlockedByBrokenTech = 3,
		TechBonus = 4,
	};

	NMS_GameComponents::GcInventorySpecialSlotType::InventorySpecialSlotTypeEnum InventorySpecialSlotType;
};

//Dependency: GcInventoryIndex
//Dependency: GcInventorySpecialSlotType
struct GcInventorySpecialSlot
{
	NMS_GameComponents::GcInventoryIndex Index;
	NMS_GameComponents::GcInventorySpecialSlotType Type;
};

struct GcStatType
{
	enum class StatTypeEnum : uint32_t
	{
		Int = 0,
		Float = 1,
		AvgRate = 2,
	};

	NMS_GameComponents::GcStatType::StatTypeEnum StatType;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcResource
{
	int32_t ResourceID;
};


} //namespace NMS

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkTextureResource
{
	NMS::VariableSizeString Filename;
	NMS::GcResource ResHandle;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcStatType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcJourneyMedal
{
	NMS::NMSString0x20A MedalProgressText;
	NMS::NMSString0x20A MedalTitle;
	NMS::NMSString0x20A PinnedDescription;
	NMS_Toolkit::TkTextureResource IconBronze;
	NMS_Toolkit::TkTextureResource IconGold;
	NMS_Toolkit::TkTextureResource IconNone;
	NMS_Toolkit::TkTextureResource IconSilver;
	NMS::NMSString0x10 LevelledStatID;
	NMS::NMSString0x10 PinnedMission;
	NMS_GameComponents::GcStatType StatType;
	bool OverallJourneyDummy;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Colour32
{
	uint8_t R;
	uint8_t G;
	uint8_t B;
	uint8_t A;
};

struct Vector3f
{
	float X;
	float Y;
	float Z;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Vector3f
struct GcPlayerCharacterIKOverrideData
{
	NMS::Vector3f RotStrengths;
	float Strength;
	bool Enabled;
};

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: NMSString0x10
struct GcPlayerCharacterAnimationOverrideData
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData Data;
	NMS::NMSString0x10 AnimName;
};

struct GcPlayerCharacterStateType
{
	enum class CharacterStateEnum : uint32_t
	{
		Idle = 0,
		Jog = 1,
		JogUphill = 2,
		JogDownhill = 3,
		SteepSlope = 4,
		Sliding = 5,
		Run = 6,
		Airborne = 7,
		JetpackBoost = 8,
		RocketBoots = 9,
		Riding = 10,
		Swimming = 11,
		SwimmingJetpack = 12,
		Death = 13,
		FullBodyOverride = 14,
		InSpace = 15,
		LowGWalk = 16,
		LowGRun = 17,
		Fishing = 18,
	};

	NMS_GameComponents::GcPlayerCharacterStateType::CharacterStateEnum CharacterState;
};

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: GcPlayerCharacterAnimationOverrideData
//Dependency: GcPlayerCharacterStateType
struct GcPlayerCharacterIKStateData
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData Data;
	std::vector<NMS_GameComponents::GcPlayerCharacterAnimationOverrideData> AnimOverrides;
	NMS_GameComponents::GcPlayerCharacterStateType State;
};

struct GcCreatureIkType
{
	enum class CreatureIkTypeEnum : uint32_t
	{
		Foot = 0,
		Hinge_X = 1,
		Hinge_Y = 2,
		Hinge_Z = 3,
		Locked = 4,
		Head = 5,
		Toe = 6,
		SpaceshipFoot = 7,
		SpaceshipToe = 8,
	};

	NMS_GameComponents::GcCreatureIkType::CreatureIkTypeEnum CreatureIkType;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x100
{
	//max length: 256
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcPlayerCharacterIKOverrideData
//Dependency: NMSString0x10
//Dependency: GcPlayerCharacterIKStateData
//Dependency: GcCreatureIkType
//Dependency: NMSString0x100
struct GcIKConstraint
{
	NMS_GameComponents::GcPlayerCharacterIKOverrideData DefaultState;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcPlayerCharacterIKStateData> States;
	NMS_GameComponents::GcCreatureIkType Type;
	NMS::NMSString0x100 JointName;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x40
{
	//max length: 64
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x40
struct GcAdvancedTweaks
{
	std::vector<NMS::NMSString0x40> NodesThatMustBePresent;
	std::vector<NMS::NMSString0x40> NodesToHide;
	float EdgeMultiplierForTangentI;
	float EdgeMultiplierForTangentJ;
	float ParticleKillSpeed;
	float ParticleKillSpeedWrtFixed;
	float RenderNormalMultiplier;
	float StretchUvsToHideTextureEdges;
	bool LeaveRenderedTrianglesUnaffected;
};

struct GcDefaultMissionProductEnum
{
	enum class DefaultProductTypeEnum : uint32_t
	{
		None = 0,
		PrimaryProduct = 1,
		SecondaryProduct = 2,
	};

	NMS_GameComponents::GcDefaultMissionProductEnum::DefaultProductTypeEnum DefaultProductType;
};

struct GcDifficultySettingEnum
{
	enum class DifficultySettingEnum : uint32_t
	{
		SettingsLocked = 0,
		InventoriesAlwaysInRange = 1,
		AllSlotsUnlocked = 2,
		WarpDriveRequirements = 3,
		CraftingIsFree = 4,
		TutorialEnabled = 5,
		StartWithAllItemsKnown = 6,
		BaseAutoPower = 7,
		DeathConsequences = 8,
		DamageReceived = 9,
		DamageGiven = 10,
		ActiveSurvivalBars = 11,
		HazardDrain = 12,
		EnergyDrain = 13,
		SubstanceCollection = 14,
		InventoryStackLimits = 15,
		ChargingRequirements = 16,
		FuelUse = 17,
		LaunchFuelCost = 18,
		CurrencyCost = 19,
		ScannerRecharge = 20,
		ReputationGain = 21,
		CreatureHostility = 22,
		SpaceCombat = 23,
		GroundCombat = 24,
		ItemShopAvailablity = 25,
		SprintingCost = 26,
		BreakTechOnDamage = 27,
		Fishing = 28,
		NPCPopulation = 29,
	};

	NMS_GameComponents::GcDifficultySettingEnum::DifficultySettingEnum DifficultySetting;
};

//Dependency: GcDifficultySettingEnum
struct GcDifficultySettingUIOption
{
	std::vector<NMS_GameComponents::GcDifficultySettingEnum> AlsoChangeOptions;
	NMS_GameComponents::GcDifficultySettingEnum MainOption;
};

//Dependency: GcDifficultySettingUIOption
//Dependency: NMSString0x20A
struct GcDifficultyOptionUIGroup
{
	NMS::NMSString0x20A HeadingLocID;
	std::vector<NMS_GameComponents::GcDifficultySettingUIOption> DifficultyOptions;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct HashedString
{
	//max length: 32
	std::string Value;
	uint64_t Offset;
	uint32_t Length;
	uint32_t Padding0xC;
	uint32_t Padding0x14;
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcMissionConditionTest
{
	enum class ConditionTestEnum : uint32_t
	{
		AnyFalse = 0,
		AllFalse = 1,
		AnyTrue = 2,
		AllTrue = 3,
	};

	NMS_GameComponents::GcMissionConditionTest::ConditionTestEnum ConditionTest;
};

//Dependency: GcMissionConditionTest
//Dependency: NMSString0x20A
struct GcCostGroup
{
	NMS::NMSString0x20A Text;
	std::vector<NMSTemplate> Costs;
	int32_t HideOptionIfCantAffordIndex;
	int32_t TakeTextFromIndex;
	NMS_GameComponents::GcMissionConditionTest Test;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForDepots
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct OptionalVariableSizeString
{
	//max length: 16
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcGalaxyWaypointTypes
{
	enum class GalaxyWaypointTypeEnum : uint32_t
	{
		User = 0,
		Gameplay_AtlasStation = 1,
		Gameplay_DistressBeacon = 2,
		Gameplay_BlackHole = 3,
		Gameplay_Mission = 4,
		Gameplay_SeasonParty = 5,
	};

	NMS_GameComponents::GcGalaxyWaypointTypes::GalaxyWaypointTypeEnum GalaxyWaypointType;
};

struct GcGalaxySolarSystemOrbitParams
{
	float FirstOrbitRadiusMax;
	float FirstOrbitRadiusMin;
	float OrbitLineWidth;
	float OrbitRadiusOffsetMax;
	float OrbitRadiusOffsetMin;
	float OrbitRotationSpeedMax;
	float OrbitRotationSpeedMin;
};

struct GcDamageGivenDifficultyOption
{
	enum class DamageGivenDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcDamageGivenDifficultyOption::DamageGivenDifficultyEnum DamageGivenDifficulty;
};

struct GcCreatureHostilityDifficultyOption
{
	enum class CreatureHostilityDifficultyEnum : uint32_t
	{
		NeverAttack = 0,
		AttackIfProvoked = 1,
		FullEcosystem = 2,
	};

	NMS_GameComponents::GcCreatureHostilityDifficultyOption::CreatureHostilityDifficultyEnum CreatureHostilityDifficulty;
};


} //namespace NMS_GameComponents

namespace NMS
{

//Dependency: OptionalVariableSizeString
struct LinkableNMSTemplate
{
	NMSTemplate Template;
	NMS::OptionalVariableSizeString Linked;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: NMSString0x10
struct GcScanEffectData
{
	enum class ScanEffectTypeEnum : uint32_t
	{
		Building = 0,
		TargetShip = 1,
		Creature = 2,
		Ground = 3,
		Objects = 4,
	};

	NMS::Colour Colour;
	NMS::NMSString0x10 Id;
	float BasecolourIntensity;
	float FadeInTime;
	float FadeOutTime;
	float FresnelIntensity;
	float GlowIntensity;
	NMS_GameComponents::GcScanEffectData::ScanEffectTypeEnum ScanEffectType;
	float ScanlinesSeparation;
	float WaveOffset;
	bool FixedUpAxis;
	bool ModelFade;
	bool Transparent;
	bool WaveActive;
};

struct GcHand
{
	enum class HandEnum : uint32_t
	{
		Right = 0,
		Left = 1,
	};

	NMS_GameComponents::GcHand::HandEnum Hand;
};

//Dependency: GcScanEffectData
//Dependency: GcHand
//Dependency: VariableSizeString
//Dependency: NMSString0x40
struct GcPlayerEmotePropData
{
	NMS_GameComponents::GcScanEffectData ScanEffect;
	NMS::VariableSizeString Model;
	float DelayTime;
	NMS_GameComponents::GcHand Hand;
	float Scale;
	NMS::NMSString0x40 ScanEffectNodeName;
	bool IsHologram;
};

//Dependency: VariableSizeString
struct GcNumberedTextList
{
	NMS::VariableSizeString Format;
	int32_t Count;
};

struct GcExpeditionCategory
{
	enum class ExpeditionCategoryEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomacy = 3,
		Balanced = 4,
	};

	NMS_GameComponents::GcExpeditionCategory::ExpeditionCategoryEnum ExpeditionCategory;
};

struct GcMissionType
{
	enum class MissionTypeEnum : uint32_t
	{
		SpaceCombat = 0,
		GroundCombat = 1,
		Research = 2,
		MissingPerson = 3,
		Repair = 4,
		Cargo = 5,
		Piracy = 6,
		Photo = 7,
		Feeding = 8,
		Planting = 9,
		Construction = 10,
		LocalCorrupted = 11,
		LocalCorruptedCombat = 12,
		LocalSalvage = 13,
		LocalBiomePlants = 14,
		LocalExtreme = 15,
		LocalBones = 16,
		LocalInfested = 17,
		LocalPlanetaryPirates = 18,
		LocalPredators = 19,
		LocalSentinels = 20,
		BuildersLanguage = 21,
		Fishing = 22,
	};

	NMS_GameComponents::GcMissionType::MissionTypeEnum MissionType;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x20
{
	//max length: 32
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcNumberedTextList
//Dependency: GcExpeditionCategory
//Dependency: GcMissionType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcExpeditionInterventionEventData
{
	NMS::NMSString0x20A ID;
	NMS_GameComponents::GcNumberedTextList InteractionID;
	NMS::NMSString0x10 AvoidanceFailureReward;
	NMS::NMSString0x10 AvoidanceSuccessReward;
	NMS::NMSString0x10 FailureReward;
	NMS::NMSString0x10 SuccessReward;
	NMS_GameComponents::GcExpeditionCategory ExpeditionCategory;
	int32_t FailureDamageChance;
	NMS_GameComponents::GcMissionType MissionType;
	int32_t SelectionWeight;
	NMS::NMSString0x20 AvoidanceFailureLogEntry;
	NMS::NMSString0x20 AvoidanceSuccessLogEntry;
	NMS::NMSString0x20 FailureLogEntry;
	NMS::NMSString0x20 SuccessLogEntry;
};

struct GcCombatEffectType
{
	enum class CombatEffectTypeEnum : uint32_t
	{
		None = 0,
		Fire = 1,
		Stun = 2,
		Slow = 3,
		ElectricDOT = 4,
		SpookyLight = 5,
	};

	NMS_GameComponents::GcCombatEffectType::CombatEffectTypeEnum CombatEffectType;
};

struct GcAudioWwiseEvents
{
	enum class AkEventEnum : uint32_t
	{
		INVALID_EVENT = 0,
		ABANDONED_DOOR_UNLOCK = 642510125,
		ABANDONED_FIEND_IDLE = 410904609,
		ABANDONED_FIEND_ROAR = 3594534895,
		ABANDONED_FIEND_RUN = 4101509102,
		ABANDONED_FIEND_SPIT = 2171945049,
		ABANDONED_FIEND_WALK = 3364949456,
		ABANDONED_JELLYFISH_DEATH = 1134430303,
		ABANDONED_JELLYFISH_SWIM = 1305953951,
		AF_CAPSULE = 1289565016,
		AF_DOOR_PRESSURISING = 619175826,
		AF_DOOR_PRESSURISING1 = 2869228263,
		AF_DOOR_PRESSURISING2 = 2869228260,
		AF_DOOR_PRESSURISING3 = 2869228261,
		AF_EXPLODINGCAPSULE = 1602884676,
		AF_FAN = 2783983378,
		AF_ROTATINGDEVICE = 2612871125,
		AMB_ABANDONEDBUILDING = 1285060758,
		AMB_ABANDONEDBUILDING_STOP = 176757445,
		AMB_ANCIENTGUARDIAN = 2933092947,
		AMB_BLACKHOLE = 2055672013,
		AMB_BUILDING_START = 339664199,
		AMB_BUILDING_STOP = 1558548461,
		AMB_FREIGHTER_INTERNAL = 1597120850,
		AMB_FRIGATE = 3281515910,
		AMB_NEBULA_STORM = 2601939637,
		AMB_NEXUS = 2975799955,
		AMB_PLANET_ALL = 2969493440,
		AMB_PLANET_ALL_STOP = 2265604591,
		AMB_RAIN_SURFACE = 3574681672,
		AMB_RAIN_SURFACE_STOP = 824457831,
		AMB_SETTLEMENT_HUB = 696195043,
		AMB_SPACESTATION_HANGER = 3963562130,
		AMB_WEATHER_THUNDER = 3934991865,
		AMB_WEATHER_THUNDER_STOP = 2053666444,
		AMBIENT_EMPHASISER = 1656056005,
		ANIMATEDDOOR_CLOSE = 3509973715,
		ANIMATEDDOOR_OPEN = 2478378341,
		ANOMALY_CORE = 2516442138,
		ANOMALY_DOOR_CLOSE = 3888600666,
		ANOMALY_DOOR_OPEN = 4084656478,
		ANOMALY_MAINAIRLOCK_CLOSE = 2543008824,
		ANOMALY_MAINAIRLOCK_OPEN = 2050087292,
		ANOMALY_SIMULATION_CONSOLE_END = 3365919014,
		ANOMALY_SIMULATION_CONSOLE_FLASH = 1297243995,
		ANOMALY_SIMULATION_CONSOLE_START = 577663245,
		ANOMALY_SIMULATION_LIGHTSOFF = 1547086885,
		ANOMALY_SIMULATION_LIGHTSON = 850401433,
		ANOMALY_SIMULATION_REVEAL_OPEN = 2936469701,
		ANOMALY_SIMULATION_TERMINAL_DIE = 3601682466,
		ANOMALY_WEAPONCRATE_CLOSE = 3814073573,
		ANOMALY_WEAPONCRATE_OPEN = 2316777199,
		ANTATTACK2 = 1540086934,
		ANTELOPE2LEGPOUNCE1 = 652179040,
		ANTELOPEATTACK3 = 3625649098,
		ANTELOPEROAR = 3406035547,
		ANTELOPESHAKE = 101577563,
		ANTELOPETWOLEGATTACK = 4149002821,
		ANTELOPETWOLEGATTACK2 = 2463486637,
		ANTELOPETWOLEGATTACK3 = 2463486636,
		ANTELOPETWOLEGPOUNCE2 = 1664810287,
		ANTELOPETWOLEGPOUNCE3 = 1664810286,
		ANTELOPETWOLEGROAR = 2729766737,
		ANTELOPETWOPERFORM = 371707126,
		ANTPOUNCE1 = 768877531,
		ANTPOUNCE02 = 4277432348,
		ANTPOUNCE03 = 4277432349,
		ARTHROPOD_ATTACK01 = 3203370656,
		ARTHROPOD_EAT = 2231055101,
		ARTHROPOD_POUNCE = 1825148307,
		ARTHROPOD_QUEEN_ATTACK01 = 3519346061,
		ARTHROPOD_QUEEN_BIRTHING = 2415058117,
		ARTHROPOD_QUEEN_BOUNCE = 1351939280,
		ARTHROPOD_QUEEN_EAT = 2300224902,
		ARTHROPOD_QUEEN_GROUNDAPPEAR = 4289375962,
		ARTHROPOD_QUEEN_POUNCE01 = 2900057823,
		ARTHROPOD_QUEEN_ROAR = 850787572,
		ARTHROPOD_QUEEN_SPIT = 3379658970,
		ASTEROID_EXPLODE = 4179480828,
		ASTEROID_HIT = 4266722844,
		ATLAS_ARCH = 2756267813,
		ATLAS_BALLOFLIGHT = 165925067,
		ATLAS_CORE = 3156009720,
		ATLAS_CORE_ACTIVATE = 2439676256,
		ATLAS_CORE_INTERACT = 1194642533,
		ATLAS_GALAXY_SPIN_LP = 1754759127,
		ATLAS_GALAXYBEAM = 3317001044,
		ATLAS_GALAXYSTART_MULTIPLE = 2749352082,
		ATLAS_GALAXYSTART_SINGLE = 493558118,
		ATLAS_INTERFACE_GALAXY_SPIN = 3252185904,
		ATLAS_INTERFACE_TRIGGER = 4238798851,
		ATLAS_ORB_FLARE = 2736877861,
		ATLAS_ORB_ILLUMINATE = 389479645,
		ATLAS_PLINTH_RISE = 2221210384,
		ATLAS_SEED_01 = 2192726712,
		ATLAS_SEED_02 = 2192726715,
		ATLAS_SEED_03 = 2192726714,
		ATLAS_SEED_04 = 2192726717,
		ATLAS_SEED_05 = 2192726716,
		ATLAS_SPHERE_PULSE = 1867798324,
		ATLAS_SPHERE_SPARK = 3237560904,
		ATLAS_SPHERE_WIND = 1509244359,
		ATLAS_VANISH = 31178572,
		ATLASCORRUPTED_LP = 1093824629,
		ATLASCORRUPTED_LP_STOP = 661544472,
		ATLASCORRUPTED_START = 3956103475,
		ATLASINTERACT_CLOSE = 4209843593,
		ATLASINTERACT_OPEN = 4291155803,
		ATLASSTARTSCENEORB_ACTIVATE = 1063302551,
		ATLASSTARTSCENEORB_ACTIVATEIDLE = 282917841,
		ATLASSTARTSCENEORB_DISMISS = 1062916464,
		ATLASSTARTSCENEORB_END = 1213573187,
		ATLASSTARTSCENEORB_IDLE = 1092865242,
		BASE_AQUARIUM = 77795248,
		BASE_BATTERY_CHARGING = 2081665978,
		BASE_BATTERY_DISCHARGING = 588144724,
		BASE_BATTERY_FULLYCHARGED = 922074591,
		BASE_BATTERY_FULLYDISCHARGED = 3305252781,
		BASE_BIOFUELCHARGED = 3829092815,
		BASE_BIOFUELDISCHARGED = 234180189,
		BASE_BIOFUELRUNNING = 3196711758,
		BASE_CALCISHROOM = 3754299263,
		BASE_CUBEGADGET = 905013626,
		BASE_CYCLONIC_LATHE = 3964544424,
		BASE_DOOR_CLOSE = 4123032396,
		BASE_DOOR_OPEN = 2878210264,
		BASE_ELECTRICALWIRING_DELETE = 2491489993,
		BASE_ELECTRICALWIRING_PLACE = 495041649,
		BASE_ELECTRICCUBE = 2018672611,
		BASE_FORCEFIELD_DOOR = 3467740713,
		BASE_GARAGE_DOOR_CLOSE = 959796828,
		BASE_GARAGE_DOOR_OPEN = 462303560,
		BASE_GASEXTRACTOR = 1867920968,
		BASE_GASEXTRACTOR_OFF = 1651550158,
		BASE_LARGEMONITORSTATION = 457136408,
		BASE_LIGHTBOX = 3662433178,
		BASE_MINERALEXTRACTOR = 1152204915,
		BASE_MINERALEXTRACTOR_OFF = 481442981,
		BASE_MONITORSTATION = 1882962519,
		BASE_OSCILLOSCOPE = 2248393238,
		BASE_PIPE_DELETE = 2557514445,
		BASE_PIPE_PLACE = 671919277,
		BASE_POCKETREALITYGENERATOR = 2514072408,
		BASE_POWER_CONNECT = 2832992131,
		BASE_POWER_OFF = 2659594190,
		BASE_POWER_ON = 1917287088,
		BASE_POWER_POWERDOWN = 2968271706,
		BASE_POWER_POWERUP = 1713882617,
		BASE_POWER_SWITCH_OFF = 1808843805,
		BASE_POWER_SWITCH_ON = 3985351281,
		BASE_POWERFLOW_OFF = 2967816550,
		BASE_POWERFLOW_ON = 2117546760,
		BASE_SERVER = 1842991380,
		BASE_SOL_CLOSE = 2594776780,
		BASE_SOL_OPEN = 1409013592,
		BASE_SOLARPANEL_CLOSE = 3472898859,
		BASE_SOLARPANEL_OPEN = 4064347757,
		BASE_SPHERECREATE = 810492146,
		BASE_SPHEREROLL = 1563275903,
		BASEBEACON = 2731684274,
		BASEBUILD_ITEM_BEACON = 3759265155,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION = 2445487892,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION_ACCEPT = 4284763887,
		BASEBUILD_ITEM_COMMUNICATIONSSTATION_CANCEL = 408276461,
		BASEBUILD_ITEM_CONSTRUCTIONTERMINAL = 1609931684,
		BASEBUILD_ITEM_PLANTINCUBATOR = 3982030399,
		BASEBUILD_ITEM_SCIENCETERMINAL = 2569215859,
		BASEBUILD_ITEM_SIGNALBOOSTER_LOOP = 4148625186,
		BASEBUILD_ITEM_SIGNALBOOSTER_START = 3715123596,
		BASEBUILD_ITEM_TERMINALGENERIC = 3370316570,
		BASEBUILD_ITEM_WEAPONTERMINAL = 2975504823,
		BASESHOP_OPEN = 3235315269,
		BASETERMINAL = 1912419070,
		BEACON_TRIGGER_START = 2609690989,
		BEACON_TRIGGER_STOP = 2174397615,
		BEAMSTONE = 2395557887,
		BEETLE_FLY = 3113267994,
		BEETLE_WALK = 2328912828,
		BINOCULARS_ENTER = 2681519212,
		BINOCULARS_EXIT = 1055620270,
		BINOCULARS_ZOOM01 = 12375898,
		BINOCULARS_ZOOM02 = 12375897,
		BINOCULARS_ZOOM03 = 12375896,
		BLACKHOLE_WARP = 1335717601,
		BLD_ALARM_LP = 750785822,
		BLD_ALARM_LP_STOP = 1119458557,
		BLD_AMB_ATM = 381794725,
		BLD_AMB_DEBRISLARGE = 4234591687,
		BLD_AMB_DEPOTS = 127138094,
		BLD_AMB_DEPOTS_STOP = 1788608813,
		BLD_BLACKBOX_OPEN = 1002359359,
		BLD_DAMAGEDMACH_BEAM = 3850508068,
		BLD_DEBRISLARGE_OPEN = 1747581601,
		BLD_DMG_MACH_POD_LP = 1345679995,
		BLD_DOOR_EXPLODE = 2149245338,
		BLD_HOLOGRAM_APPEAR = 1655574179,
		BLD_LIGHTS = 412286519,
		BLD_POD_DOOR_CLOSE = 2732351493,
		BLD_POD_DOOR_OPEN = 80017039,
		BLD_POD_SHUTDOWN = 1875984994,
		BLD_POD_STARTUP = 1548441119,
		BLD_RUIN_MONOLITH = 517735361,
		BLD_RUIN_PLAQUE = 1562405909,
		BLD_SC_FACT_INT = 3137908029,
		BLD_SC_OBS_IN = 3036991769,
		BLD_SCIENTIFIC_DOOR_CLOSE = 1083580215,
		BLD_SCIENTIFIC_DOOR_OPEN = 3898024577,
		BLD_SCIENTIFIC_FACTORY_ROOF = 4701189,
		BLD_SCIENTIFIC_PISTON = 803968741,
		BLD_SCIENTIFIC_WINDOW_CLOSE = 502034775,
		BLD_SCIENTIFIC_WINDOW_OPEN = 459366177,
		BLD_SERVER = 2470221145,
		BLD_TONEINT_GENERIC_01 = 544908605,
		BLD_TONEINT_GENERIC_02 = 544908606,
		BLD_TONEINT_GENERIC_03 = 544908607,
		BLD_TONEINT_GENERIC_04 = 544908600,
		BLD_TONEINT_GENERIC_05 = 544908601,
		BLD_TONEINT_GENERIC_06 = 544908602,
		BLD_TONEINT_GENERIC_07 = 544908603,
		BLD_TONEINT_GENERIC_08 = 544908596,
		BLD_TONEINT_GENERIC_09 = 544908597,
		BLD_TONEINT_GENERIC_10 = 561686191,
		BLD_TONEINT_GENERIC_11 = 561686190,
		BLD_TONEINT_GENERIC_12 = 561686189,
		BLD_TONEINT_GENERIC_13 = 561686188,
		BLD_TONEINT_GENERIC_14 = 561686187,
		BLD_TONEINT_GENERIC_15 = 561686186,
		BLD_TONEINT_GENERIC_16 = 561686185,
		BLD_TONEINT_GENERIC_17 = 561686184,
		BLD_TONEINT_GENERIC_18 = 561686183,
		BLD_TONEINT_HANGER_START_01 = 217123016,
		BLD_TONEINT_HANGER_STOP_01 = 1950752640,
		BLD_TR_HAR_INT = 1010610848,
		BLD_TRADER_DOOR_CLOSE = 242548278,
		BLD_TRADER_DOOR_OPEN = 2826362082,
		BLD_TRADER_FACTORY_ROOF = 232363872,
		BLD_TRADER_RADIOTOWEREFFECT = 3665937068,
		BLD_WARRIOR_DOOR_CLOSE = 1114864716,
		BLD_WARRIOR_DOOR_OPEN = 1144232920,
		BLD_WARRIOR_FACTORY_ROOF = 867791422,
		BLD_WARRIOR_ROOF_OBS = 127805988,
		BLD_WARRIOR_SATELLITE = 2636829060,
		BLD_WARRIOR_WALLEX_CAP = 796125363,
		BLD_WORDSTATION = 1588450116,
		BLOB_TERRARIUM = 2204250590,
		BLOBATTACK = 4147811260,
		BLOBATTACK2 = 3979776198,
		BLOBATTACK3 = 3979776199,
		BLOBROAR = 1950090148,
		BRIDGETERMINAL_CLOSE = 3285412579,
		BRIDGETERMINAL_OPEN = 2725140437,
		BRIDGETERMINALSCREEN = 3075773782,
		BUGFIEND_ATTACK01 = 1394392069,
		BUGFIEND_EAT = 2470439070,
		BUGFIEND_GROUNDAPPEAR = 2500767650,
		BUGFIEND_PAIN01 = 2469122849,
		BUGFIEND_POUNCE01 = 1970527591,
		BUGFIEND_SPIT = 2812242578,
		BUGFIEND_STUNNED = 1204941377,
		BUGGY_BOOST_START = 2829911344,
		BUGGY_BOOST_STOP = 1503147676,
		BUGGY_HORN_START = 4067927030,
		BUGGY_HORN_STOP = 420903030,
		BUGGY_IDLE_EXTERIOR = 1868431803,
		BUGGY_IMPACTS = 2051012561,
		BUGGY_JUMP = 1085198708,
		BUGGY_START = 1464773060,
		BUGGY_STOP = 2599649656,
		BUGGY_SUSPENSION = 2574892627,
		BURNING_BARREL = 4065151541,
		BUTTERFLY = 222366258,
		BYTEBEAT = 1035353295,
		BYTEBEAT_BAR = 2397974629,
		BYTEBEAT_BAR_STOP = 1261594536,
		BYTEBEAT_PLAYER = 502462901,
		BYTEBEAT_STOP = 2468685818,
		CAPSULE_COLLECT = 3159746737,
		CAPSULE_PANEL_OPEN = 3915151496,
		CATALTATTACK = 2597596004,
		CATALTATTACK2 = 536890974,
		CATALTATTACK3 = 536890975,
		CATALTHAPPY = 1635371674,
		CATALTPERFORM01 = 804580326,
		CATALTROAR = 2479264748,
		CATATTACK1 = 77265416,
		CATATTACK2 = 77265419,
		CATATTACK3 = 77265418,
		CATLARGEATTACK = 2892546116,
		CATPERFORM01 = 1962265779,
		CATPOUNCE = 597134041,
		CATROAR = 2369804059,
		CHARACTEREDITOR_SELECT = 3794410944,
		CHARACTEREDITOR_WOOSH = 458434848,
		CHAT = 4140304027,
		CLAMCLOSE = 2654204538,
		CLAMOPEN = 2636171774,
		CLAMSHELL_IDLE = 2305567501,
		CLAMSHELL_OPEN = 66118335,
		COLLECTABLE_RECEIVED = 3261528369,
		COMMS_CHATTER_FREIGHTER = 3756665911,
		COMMS_CHATTER_PIRATES_AMBIENT = 1216580404,
		COMMS_CHATTER_PIRATES_HIT = 2177676691,
		COMMS_CHATTER_POLICE = 3578259387,
		COMMS_CHATTER_POLICE_HIT = 1077964857,
		COMMS_CHATTER_STOP_ALL = 1346411037,
		COMMUNICATOR_CLOSE = 757927345,
		COMMUNICATOR_HAIL = 2069001373,
		COMMUNICATOR_OPEN = 1102444595,
		COMPUTER_TEXT = 791634652,
		COMPUTER_TEXT_STOP = 4263083179,
		COMPUTER_TEXT_TYPE = 684979843,
		COMPUTER_TEXT_TYPE_STOP = 3799116526,
		COOKER_CLOSE = 3730210249,
		COOKER_COOKING = 336188789,
		COOKER_END = 4193619414,
		COOKER_OPEN = 3338888091,
		CORETERMINAL_COLLECTDATA = 94949887,
		CORRUPTED_PILLAR = 4172114174,
		CORRUPTED_PILLAR_FR0 = 587914587,
		CORRUPTED_PILLAR_FR226 = 2342734269,
		CORRUPTEDQUAD_AMBIENT_TONE = 1194772446,
		CORRUPTEDQUAD_DIE = 2816694541,
		CORRUPTEDQUAD_EMOTE_LP = 2971412038,
		CORRUPTEDQUAD_EMOTE_LP_STOP = 2659100949,
		CORRUPTEDQUAD_EVADE = 3309700520,
		CORRUPTEDQUAD_POUNCE = 1980755735,
		CORRUPTEDQUAD_POUNCEBACK = 2710332710,
		CORRUPTEDQUAD_STUNNED = 1908209346,
		CORRUPTMONOLITH_BASE = 3996975076,
		CORRUPTMONOLITH_BURST = 3809413719,
		CORRUPTMONOLITH_CLOSE = 1655377173,
		CORRUPTMONOLITH_SPARK = 1534950826,
		COWATTACK1 = 4067424511,
		COWATTACK2 = 4067424508,
		COWATTACK2HIND = 4275645231,
		COWATTACK3 = 4067424509,
		COWATTACK3HIND = 2626429106,
		COWATTACKHIND = 781478521,
		COWFLOATHAPPY = 3196693770,
		COWFLOATSAD = 838550652,
		COWHAPPYHIND = 3566067199,
		COWHINDPERFORM01 = 3595464745,
		COWHINDROAR01 = 563603328,
		COWPERFORM01 = 2716157744,
		COWPOUNCE1 = 834708601,
		COWROAR = 3807503574,
		CRASHED_FREIGHTER = 2792539788,
		CRATE_WEAPON = 340488265,
		CRATE_WEAPON_CLOSE = 2060217696,
		CRATELOCKOPEN = 4158575759,
		CRATEM_OPEN = 3053640262,
		CREATURE_BITE = 2822601387,
		CREATURE_JUMPSWIPE = 3300279125,
		CREATURE_POOP = 1476152087,
		CREATURE_ROAR = 1491832973,
		CREATURE_STEP_BLOB = 2317876667,
		CREATURE_STEP_BLOB_WALK = 1887236481,
		CREATURE_STEPS = 711944018,
		CREATURE_SWIPE = 1685683705,
		CREATURE_VOCALS_SQUAWK_AGGRESSION = 1979032685,
		CREATURE_VOCALS_SQUAWK_ATTACK = 601203825,
		CREATURE_VOCALS_SQUAWK_DIE = 962565769,
		CREATURE_VOCALS_SQUAWK_FLEE = 250702265,
		CREATURE_VOCALS_SQUAWK_IDLE = 1842302347,
		CREATURE_VOCALS_SQUAWK_PAIN = 1820869333,
		CREATURE_VOCALS_SQUAWK_ROAR = 2161123877,
		CREATURE_VOCALS_SQUAWK_ROAR_ANGRY = 1341767535,
		CREATURE_VOCALS_SQUAWK_ROAR_HAPPY = 2455663178,
		CREATURE_VOCALS_SQUAWK_ROAR_NEUTRAL = 2833805173,
		CREATURE_VOCALS_SQUAWK_SNORE = 2382273050,
		CRT_BIRD_FLAP = 907775926,
		CRT_COW_WINGFLAP = 1805115425,
		CRT_GRUNT_WINGFLAPRUN = 129427747,
		CRT_GRUNT_WINGFLAPWALK = 507729407,
		CRYOCHAMBER = 3453217060,
		CRYOCHAMBER_CLOSE = 719106397,
		CRYSTAL_RARE_EXPLODE = 2692246182,
		CRYSTAL_RARE_LP = 2262673863,
		CRYSTALALTAR_COLLECT = 1142615968,
		CRYSTALALTAR_LOOP = 3807036732,
		CUSTOMISE_ACTIVATE = 3788299127,
		CUSTOMISE_END = 1934037667,
		CUSTOMISE_IDLE = 951310522,
		DEATH_DAMAGE = 1634760423,
		DEATH_DAMAGE_REBUILD = 807767091,
		DEATHMARKER_PULSE = 1475987097,
		DEATHMARKER_TRANSFORM = 106032502,
		DEATHSHOUT = 3953313476,
		DISCOVER_PLANET = 1914115581,
		DISCOVERY_UPLOADED = 4174773896,
		DOOR_BROKEN_SPARKS = 2772005240,
		DRAGONFLY = 3028993147,
		DRAGONFLY_BOOST_START = 3350056110,
		DRAGONFLY_BOOST_STOP = 226293902,
		DRAGONFLY_HORN_START = 201771252,
		DRAGONFLY_HORN_STOP = 3311233384,
		DRAGONFLY_IDLE_EXTERIOR = 2179160221,
		DRAGONFLY_IMPACTS = 2777340995,
		DRAGONFLY_JUMP = 3497672358,
		DRAGONFLY_START = 3980929494,
		DRAGONFLY_STOP = 3027774934,
		DRAGONFLY_SUSPENSION = 1862605769,
		DRILL_IN = 2280057738,
		DRILL_LP = 2229725019,
		DRILL_LP_STOP = 1512357622,
		DRILL_OUT = 2508224485,
		DRONE_ALERT = 2055526214,
		DRONE_ARMOURED_BRACE = 1518199151,
		DRONE_ARMOURED_UNBRACE = 3596431812,
		DRONE_ATTACK = 592387840,
		DRONE_ATTACK_STOP = 2796584751,
		DRONE_DEBRIS = 1020089297,
		DRONE_DIE = 1999325246,
		DRONE_EMOTE_LP = 3590180063,
		DRONE_EMOTE_LP_STOP = 3164382570,
		DRONE_EMOTE_ONESHOT = 109641857,
		DRONE_ENGINE = 2131109290,
		DRONE_ENGINE_CORRUPTED = 2715012487,
		DRONE_FRIENDLY_COMBAT = 3791091580,
		DRONE_FRIENDLY_COMBAT_STOP = 2054085643,
		DRONE_FRIENDLY_DEVICE_OFF = 3998648232,
		DRONE_FRIENDLY_DEVICE_ON = 2986275250,
		DRONE_FRIENDLY_SUMMONED = 1073667706,
		DRONE_FRIENDLY_UNSUMMONED = 3281142011,
		DRONE_FRIENDLY_WANTED = 812141993,
		DRONE_FRIENDLY_WANTED_END = 2737261387,
		DRONE_INVESTIGATING = 461618248,
		DRONE_LASER = 2650146373,
		DRONE_MEDIC_ATTACK = 258673257,
		DRONE_MEDIC_DISENGAGE = 1173673882,
		DRONE_MEDIC_ENGAGE = 685642744,
		DRONE_MEDIC_FIX = 3057298250,
		DRONE_MEDIC_IDLE = 1569175891,
		DRONE_RECHARGE = 181141787,
		DRONE_SCAN_START = 3571083530,
		DRONE_SCAN_STOP = 1091261538,
		DRONE_SEARCHING = 1858415680,
		DRONE_SHIELD_ACTIVATE = 892400501,
		DRONE_SHIELD_DEACTIVATE = 2864522852,
		DRONE_SHIELD_GLITCH = 2413934129,
		DRONE_SUMMONER_ALARM = 4056835042,
		DRONE_SUMMONER_SIGNAL = 3866942231,
		DRONE_SUMMONER_UNSIGNAL = 1487857538,
		DRONE_SUSPICIOUS = 3066956501,
		E3_ZOOMIN = 3187868944,
		E3_ZOOMOUT = 365355383,
		EGG_MACHINE_AMBIENT_LP = 2078783418,
		EGG_MACHINE_CLOSE = 1798922135,
		EGG_MACHINE_COOK = 3132627921,
		EGG_MACHINE_FINISH = 3585087032,
		EGG_MACHINE_OPEN = 2506054497,
		EGG_MACHINE_START = 2534802791,
		EGGOPENS = 2421737719,
		EGGRESOURCE_COLLECT = 1564787531,
		ENGINEREACTOR_OFF_IDLE = 4079097354,
		EQUIP_DAMAGED = 4117517243,
		EXOCRAFT_SUMMONING_STATION = 703529186,
		EXPL_DEPOT = 349257017,
		EXPL_ELECTRICAL_STUN = 3470665538,
		EXPL_ELECTRICAL_STUN_STOP = 1353451713,
		EXPL_FIREWORK = 209237086,
		EXPL_FIREWORK_LAUNCH = 540557536,
		EXPL_FIREWORK_LAUNCH_SLIME = 58672657,
		EXPL_FIREWORK_SLIME = 3630781871,
		EXPL_FIREWORK_TAIL = 2941531479,
		EXPL_FIREWORK_TAIL_SLIME = 1717942922,
		EXPL_FREIGHTER = 952311831,
		EXPL_FREIGHTER_BUILDUP = 3440011769,
		EXPL_FREIGHTER_CONTAINER_LARGE = 2565077707,
		EXPL_FREIGHTER_CONTAINER_SMALL = 2396497463,
		EXPL_FREIGHTER_ONE_SHOTS = 965308984,
		EXPL_FREIGHTER_ROD = 4262844757,
		EXPL_NEWSTARSYSTEM = 3563599418,
		EXPL_ROCK = 3050083982,
		EXPL_SHIELD_GENERATOR = 2795877332,
		EXPL_SHIP_SMALL = 755532987,
		EXPL_SHIPS_LARGE = 3143410778,
		EXPL_SHIPS_MED = 1636690473,
		EXPL_SHIPS_SMALL = 3101275974,
		EXPL_SMALL_SPACE_GENERIC = 3353181699,
		EXPL_SPACE_MEMORYBOAT = 3338824747,
		EXPL_TORPEDO = 1969561330,
		EXPLODINGBARREL = 2813215145,
		EXPLORERANGRYIPAD = 2981959467,
		EXPLORERCHATTER = 3787776123,
		EXPLORERHAPPYIPAD = 3347474830,
		EXPLORERHAPPYIPAD2 = 2794990264,
		EXPLORERHAPPYIPAD3 = 2794990265,
		EXPLORERIPADGREET = 3225378119,
		EXPLORERIPADGREET2 = 3938440951,
		EXPLORERIPADGREET3 = 3938440950,
		EXPLORERIPADGREET4 = 3938440945,
		EXPLORERNEUTRALIPAD = 2276336817,
		EXPLOSION_RESOURCE_GATHER = 1113666341,
		EYESTALK = 867129537,
		FEEDERDISPENSE = 1915160809,
		FIBREGLASS_DOOR1_SETTLEMENT_CLOSE = 27344640,
		FIBREGLASS_DOOR1_SETTLEMENT_OPEN = 1255863092,
		FIBREGLASS_DOOR2_SETTLEMENT_CLOSE = 2416244317,
		FIBREGLASS_DOOR2_SETTLEMENT_OPEN = 1310720887,
		FIEND_ATTACK = 1321023120,
		FIEND_BURY = 2805110636,
		FIEND_DIE = 92269166,
		FIEND_GROUNDAPPEAR = 2587993966,
		FIEND_GROUNDEFFECT = 3893798086,
		FIEND_IDLE = 2475891066,
		FIEND_POUNCE = 1958430642,
		FIEND_ROAR = 2241239504,
		FIEND_SPIT = 4198153334,
		FIREPLACE_LP = 1235193281,
		FIRESTORM = 675401316,
		FIRESTORM_STOP = 923373187,
		FISHCAUGHT = 1360909815,
		FISHFIEND_DIE = 1854084912,
		FISHFIEND_EAT = 1518679556,
		FISHFIEND_SPAWN = 473811295,
		FISHING_PLATFORM_LP = 188562228,
		FISHING_PLATFORM_OPEN = 260154296,
		FISHSPARKLE = 720869351,
		FISHSTRUGGLE = 2578762934,
		FLOATING_GASBAG_EXPLODE = 1569840055,
		FLOATINGFERN = 588457764,
		FLOATNIBBLE = 57112251,
		FLOATRIPPLE = 2986464699,
		FLOATSPLASH = 3796193508,
		FOLEY_STOP_ALL = 2930145345,
		FOOT_LOCKER_OPEN = 2937236815,
		FOOTSTEP = 1866025847,
		FOOTSTEP_FALLLAND = 4289240962,
		FORFANGRY01 = 1100757146,
		FORFCHATTER01 = 3835121742,
		FORFGREET01 = 2570377158,
		FORFHAPPY01 = 4245599,
		FOSSIL_COLLECT = 3241914726,
		FOURTHRACE_APOLLO_ANGRY00 = 2888197550,
		FOURTHRACE_APOLLO_CHATTER00 = 1934909318,
		FOURTHRACE_APOLLO_GREET00 = 3998886434,
		FOURTHRACE_APOLLO_GREET01 = 3998886435,
		FOURTHRACE_APOLLO_GREET02 = 3998886432,
		FOURTHRACE_APOLLO_GREET03 = 3998886433,
		FOURTHRACE_APOLLO_GREET04 = 3998886438,
		FOURTHRACE_APOLLO_HAPPY00 = 3511603975,
		FOURTHRACE_APOLLO_HAPPY01 = 3511603974,
		FOURTHRACE_APOLLO_HAPPY02 = 3511603973,
		FOURTHRACE_APOLLO_IDLE00 = 1953921021,
		FOURTHRACE_ARTEMIS_ANGRY00 = 514172700,
		FOURTHRACE_ARTEMIS_CHATTER00 = 509048624,
		FOURTHRACE_ARTEMIS_GREET00 = 363480308,
		FOURTHRACE_ARTEMIS_GREET01 = 363480309,
		FOURTHRACE_ARTEMIS_GREET02 = 363480310,
		FOURTHRACE_ARTEMIS_GREET03 = 363480311,
		FOURTHRACE_ARTEMIS_GREET04 = 363480304,
		FOURTHRACE_ARTEMIS_HAPPY00 = 1938366649,
		FOURTHRACE_ARTEMIS_HAPPY01 = 1938366648,
		FOURTHRACE_ARTEMIS_HAPPY02 = 1938366651,
		FOURTHRACE_ARTEMIS_IDLE00 = 2490081971,
		FOURTHRACE_NULL_ANGRY00 = 2903957936,
		FOURTHRACE_NULL_CHATTER00 = 3569598604,
		FOURTHRACE_NULL_GREET00 = 2517343080,
		FOURTHRACE_NULL_GREET01 = 2517343081,
		FOURTHRACE_NULL_GREET02 = 2517343082,
		FOURTHRACE_NULL_GREET03 = 2517343083,
		FOURTHRACE_NULL_GREET04 = 2517343084,
		FOURTHRACE_NULL_HAPPY00 = 3181214893,
		FOURTHRACE_NULL_HAPPY01 = 3181214892,
		FOURTHRACE_NULL_HAPPY02 = 3181214895,
		FOURTHRACE_NULL_IDLE00 = 3316901463,
		FOURTHRACE_PROC_ANGRY00 = 2795243455,
		FOURTHRACE_PROC_CHATTER00 = 1605418795,
		FOURTHRACE_PROC_GREET00 = 1243244491,
		FOURTHRACE_PROC_GREET01 = 1243244490,
		FOURTHRACE_PROC_GREET02 = 1243244489,
		FOURTHRACE_PROC_GREET03 = 1243244488,
		FOURTHRACE_PROC_GREET04 = 1243244495,
		FOURTHRACE_PROC_HAPPY00 = 1946340818,
		FOURTHRACE_PROC_HAPPY01 = 1946340819,
		FOURTHRACE_PROC_HAPPY02 = 1946340816,
		FOURTHRACE_PROC_IDLE00 = 362011646,
		FRACTALCUBE = 3069279419,
		FREIGHTER_ALARM = 284312429,
		FREIGHTER_ALARM_START = 722568716,
		FREIGHTER_BRIDGE = 2380244041,
		FREIGHTER_CALL = 3123437914,
		FREIGHTER_CORRIDOR = 2097288684,
		FREIGHTER_DOOR_INTERNAL_CLOSE = 4199127191,
		FREIGHTER_DOOR_INTERNAL_OPEN = 1062592097,
		FREIGHTER_DOOR_REINFORCED_CLOSE = 1306907177,
		FREIGHTER_DOOR_REINFORCED_OPEN = 382083451,
		FREIGHTER_DRONE = 2760474932,
		FREIGHTER_ELEVATOR = 489088848,
		FREIGHTER_HANGAR = 3278121963,
		FREIGHTER_HANGARDOOR_CLOSE = 2846845302,
		FREIGHTER_HANGARDOOR_OPEN = 4130373410,
		FREIGHTER_LOWSHIELD_ALARM = 4013381861,
		FREIGHTER_REFINER_ROOM = 2183233433,
		FREIGHTER_REFINER_RUNNING = 584112333,
		FREIGHTER_SHIELD_LP = 281067852,
		FREIGHTER_SHIELD_LP_STOP = 2381396731,
		FREIGHTER_SHIELD_ONESHOT = 51835396,
		FREIGHTER_STELLAREXTRACTOR = 92303359,
		FREIGHTER_STORAGE_TERMINAL = 1360884328,
		FREIGHTER_TELEPORT = 3705218111,
		FREIGHTER_TELEPORTER = 3453226538,
		FRIGATE_LIVING_DEVOUR = 504452073,
		FRIGATE_LIVING_REVEAL = 1078315443,
		FRIGATE_LIVING_TALK = 31778742,
		FRIGATE_LIVING_WARPIN = 425072055,
		GAS_BASTARD_POP = 1051272552,
		GEMCRYSTAL_COLLECT = 2890792835,
		GLITCHY_MONITOR = 503621724,
		GRABBYPLANT_ATTACK_END = 1749990328,
		GRABBYPLANT_ATTACK_LP = 279061285,
		GRABBYPLANT_DIE = 3623548220,
		GRAV_BALLS = 3341431912,
		GRAV_BALLS_STOP = 2920453447,
		GROUND_SIZZLE = 1467871242,
		GROUND_SIZZLE_STOP = 464280121,
		GROUNDWORM_CLOSE = 1836038144,
		GROUNDWORM_KILL = 3393815172,
		GROUNDWORM_OPEN = 620901940,
		GRUNTATTACK2 = 3733618017,
		GRUNTATTACK3 = 3733618016,
		GRUNTFLOATHAPPY = 4290629701,
		GRUNTFLOATSLEEP = 2664502518,
		GRUNTPOUNCE = 191267115,
		GRUNTROAR = 2357944437,
		HARRYTEST = 3510517901,
		HAZ_CRIT_COLD = 1276438582,
		HAZ_CRIT_HEAT = 2860017406,
		HAZ_CRIT_O2 = 3181938407,
		HAZ_CRIT_RAD = 1479268681,
		HAZ_CRIT_RAD_FALLING = 1866008241,
		HAZ_CRIT_RAD_STABLE = 2908898829,
		HAZ_CRIT_SHIELD = 1178838907,
		HAZ_CRIT_SHIELD_FALLING = 275059059,
		HAZ_CRIT_SHIELD_STABLE = 659288159,
		HAZ_CRIT_THERM_FALLING = 4128053670,
		HAZ_CRIT_TOXIC = 2733524485,
		HAZ_CRIT_TOXIC_FALLING = 3340557645,
		HAZ_CRIT_TOXIC_STABLE = 1437305169,
		HAZARDPLANT_CLOSE = 2350082741,
		HAZARDPLANT_IDLE = 2850491053,
		HAZARDPLANT_OPEN = 611145055,
		HAZARDPLANT_OPENIDLE = 2466822905,
		HEATER_OFF = 3581645832,
		HEATER_ON = 1313347218,
		HEXAGON = 107856943,
		HOLOHUB_END = 3481540492,
		HOLOHUB_LADDER_END = 925613463,
		HOLOHUB_LADDER_START = 4017144196,
		HOLOHUB_START = 3591292911,
		HOVERCRAFT_BOOST_START = 4044751388,
		HOVERCRAFT_BOOST_STOP = 3260481264,
		HOVERCRAFT_HORN_START = 2776795426,
		HOVERCRAFT_HORN_STOP = 1860965658,
		HOVERCRAFT_IDLE_EXTERIOR = 691817511,
		HOVERCRAFT_IMPACTS = 4130874493,
		HOVERCRAFT_JUMP = 1629454712,
		HOVERCRAFT_START = 414245808,
		HOVERCRAFT_STOP = 1225387548,
		HOVERCRAFT_SUSPENSION = 648046031,
		HUD_JUMP_ENGAGE = 986240791,
		HUD_JUMPING = 69438469,
		IDENTIFY_SCAN_OFF = 2387818357,
		IDENTIFY_SCAN_ON = 3315033225,
		IMPACT_CREATURE_SQUISH = 2903807147,
		IMPACTS_GROUND_GENERIC_SMALL = 2019205434,
		INTERACT_COLLECT = 766530384,
		INTERACTION_CARGOBAY = 559147438,
		INTERACTION_CARGOBAYSTUCK = 2205427274,
		INTERACTION_CARGOCONTLOAD = 4015136470,
		INTERACTION_ENGINEREACTOR = 307622734,
		INTERACTION_MAINTPOINT = 4267244527,
		INTERACTION_TURRETSHELLS = 2834891617,
		INTERACTION_TURRETTURN = 3675638357,
		INTERACTIVECASE_OPEN = 3894284866,
		JELLYFISH_DIE = 2365800878,
		JELLYFISH_SPAWN = 1291269561,
		JELLYFISH_SWIM = 1844848624,
		JELLYFISHBOSS_APPEAR = 1261478350,
		JELLYFISHBOSS_ORBATTACK = 623681040,
		JELLYFISHBOSS_SWIM = 4045770389,
		JETPACK_BOOST_PICKUP = 375575720,
		JETPACK_BOOST_START = 1508816120,
		JETPACK_BOOST_STOP = 3872165892,
		JETPACK_BOOST_TIMEOUT = 1027507557,
		JETPACK_DEPLETED = 70853637,
		JETPACK_START = 3208028412,
		JETPACK_STOP = 899103824,
		JETPACK_WATER_TRANSITION_INTO_ATMOS = 1052751609,
		JETPACK_WATER_TRANSITION_INTO_WATER = 549373334,
		KEYCONTAINER = 4095839047,
		LANDING_PLATFORM_CLOSE = 2236028909,
		LANDING_PLATFORM_OPEN = 2023300135,
		LANDINGBAY_ACTIVATE = 941009430,
		LANDINGBAY_DEACTIVATE = 2235131831,
		LANDSQUID_APPEAR = 1011705184,
		LANDSQUID_DISAPPEAR = 731110914,
		LANDSQUID_KAMIKAZE = 4275880726,
		LANDSQUID_KAMIKAZE_STOP = 1589074501,
		LANDSQUID_KILL = 847100111,
		LANDSQUID_SPIT = 1710430429,
		LANDSQUID_SWIM = 1709591771,
		LANTERNCLOSE = 2156834357,
		LANTERNOPEN = 2331849695,
		LAVA_VOLCANO_AMBIENT = 1292840173,
		LAVA_VOLCANO_ERUPT = 3776022315,
		LAVA_VOLCANO_EXPLODE = 2192977534,
		LIGHTNING = 3334464137,
		LOCKER_OPEN = 811376648,
		LOWERORDERANGRYIPAD = 2813675567,
		LOWERORDERCHATTERIPAD = 1046507451,
		LOWERORDERGREET1IPAD = 413175152,
		LOWERORDERGREET2IPAD = 2953539971,
		LOWERORDERGREET3IPAD = 3579432354,
		LOWERORDERGREET4IPAD = 1325477477,
		LOWERORDERGREET5IPAD = 963005508,
		LOWERORDERHAPPY2IPAD = 843951668,
		LOWERORDERHAPPY3IPAD = 3439259093,
		LOWERORDERHAPPY4IPAD = 2471911250,
		LOWERORDERHAPPYIPAD = 2236075986,
		MAINTENANCE_BROKEN = 15656046,
		MANTARAY_ATTACK = 1961811905,
		MANTARAY_FASTSWIM = 4126223247,
		MANTARAY_SWIM = 4176963809,
		MAP_STAR_WOOSH = 3162157229,
		MAP_WAYPOINT_TONE_LP = 3444335899,
		MECH_EXIT = 3167056125,
		MECH_IDLE = 3137477943,
		MECH_JETPACK_LANDING = 1376545177,
		MECH_JETPACK_LANDING_INTRO = 2978160650,
		MECH_JETPACK_LANDING_SKID = 403343781,
		MECH_JETPACK_LP = 3729982900,
		MECH_JETPACK_LP_END = 2801593130,
		MECH_JETPACK_RETRIGGER = 1994443637,
		MECH_JETPACK_STARTUP = 23864475,
		MECH_JETPACK_TRIGGER = 217569044,
		MECH_MOVE_RUN = 3620021148,
		MECH_MOVE_WALK = 2473316010,
		MECH_SENTINEL_STEP_RUN = 8769932,
		MECH_SENTINEL_STEP_WALK = 2828199962,
		MECH_STEP_RUN = 3758679757,
		MECH_STEP_WALK = 1432958557,
		MECH_STONE_STEP_RUN = 3121287963,
		MECH_STONE_STEP_WALK = 2923978487,
		MESSAGEMODULE_IDLE = 1949597471,
		MESSAGEMODULE_START = 2527827351,
		METALFORMATION_COLLECT = 790946364,
		METEORITE_EXPLODE = 3628527645,
		METEORITE_INCOMING = 3485432110,
		MILK_BOTTLING = 1158791598,
		MILK_PUMPING = 2277869711,
		MINIDRONE_ACTIVE = 2668890899,
		MINIDRONE_IDLE = 2790384423,
		MINIDRONE_SHOOT = 3785627830,
		MINIWORM_BURSTOUT = 274707258,
		MINIWORM_DEATH = 697752394,
		MINIWORM_IDLE = 2352728546,
		MINIWORM_LUNGE = 2971229129,
		MINIWORM_LURKING = 1924109804,
		MINIWORM_RETRACT = 2548776003,
		MINIWORM_ROAR = 2699711464,
		MOLE = 3178980848,
		MONOLITH_BEAM_START = 571963192,
		MONOLITH_INTERACTIONPLATFORM_START = 835980732,
		MONUMENT = 2595720378,
		MOTION_PS5_01 = 328897772,
		MOTION_PS5_STOP = 3974206461,
		MSTRUCTURE = 48522517,
		MUS_AMBIENT_MODE = 3946584727,
		MUS_AMBIENT_MODE_STOP = 2955514930,
		MUS_ATLASSTATION = 3536389074,
		MUS_COMMUNITYRESEARCH = 3293233043,
		MUS_CORRUPTED_LP = 2633597366,
		MUS_CORRUPTED_LP_STOP_FAST = 640712538,
		MUS_CORRUPTED_LP_STOP_SLOW = 3118164007,
		MUS_CORRUPTED_MUSICCUE = 2714381840,
		MUS_CORRUPTED_STING_LONG = 2307234050,
		MUS_ENCLAVE_DISCOVER = 4232840109,
		MUS_ENDING = 873791384,
		MUS_EXPEDITION_START = 1760008293,
		MUS_FIRSTTIMESPACESTATION = 474446100,
		MUS_FIRSTTIMEWARP = 34608572,
		MUS_FISHING = 1771682885,
		MUS_FISHING_STOP = 2134142408,
		MUS_GAMESTART = 1849779297,
		MUS_GAMESTART_LUSHWALK = 3830983247,
		MUS_GAMESTART_LUSHWALK_STOP = 1474007162,
		MUS_GAMESTART_STOP = 736660580,
		MUS_LEVEL_UP = 3686365187,
		MUS_LOADING01 = 1487083614,
		MUS_LOADING02 = 1487083613,
		MUS_LOADING03 = 1487083612,
		MUS_LOADING04 = 1487083611,
		MUS_LOADING05 = 1487083610,
		MUS_LOADING06 = 1487083609,
		MUS_LOADING07 = 1487083608,
		MUS_LOADING08 = 1487083607,
		MUS_LOADING09 = 1487083606,
		MUS_LOADING10 = 1470306028,
		MUS_LOADING11 = 1470306029,
		MUS_LOADING12 = 1470306030,
		MUS_LOADING13 = 1470306031,
		MUS_LOADING14 = 1470306024,
		MUS_LOADING15 = 1470306025,
		MUS_LOADING16 = 1470306026,
		MUS_LOADING17 = 1470306027,
		MUS_LOADING18 = 1470306020,
		MUS_LOADING19 = 1470306021,
		MUS_LOADING20 = 1520638885,
		MUS_LOADING21 = 1520638884,
		MUS_LOADING22 = 1520638887,
		MUS_LOADING23 = 1520638886,
		MUS_LOADING24 = 1520638881,
		MUS_LOADING25 = 1520638880,
		MUS_LOADING26 = 1520638883,
		MUS_LOADING27 = 1520638882,
		MUS_LOADING28 = 1520638893,
		MUS_LOADING29 = 1520638892,
		MUS_LOADING30 = 1503861298,
		MUS_LOADING31 = 1503861299,
		MUS_LOADING32 = 1503861296,
		MUS_LOADING33 = 1503861297,
		MUS_LOADING34 = 1503861302,
		MUS_LOADING35 = 1503861303,
		MUS_LOADING36 = 1503861300,
		MUS_LOADING37 = 1503861301,
		MUS_LOADING38 = 1503861306,
		MUS_LOADING39 = 1503861307,
		MUS_LOADING40 = 1419973139,
		MUS_LOADING41 = 1419973138,
		MUS_LOADING42 = 1419973137,
		MUS_LOADING43 = 1419973136,
		MUS_LOADING44 = 1419973143,
		MUS_LOADING45 = 1419973142,
		MUS_LOADING46 = 1419973141,
		MUS_LOADING47 = 1419973140,
		MUS_LOADING48 = 1419973147,
		MUS_LOADING49 = 1419973146,
		MUS_LOADING50 = 1403195552,
		MUS_LOADING51 = 1403195553,
		MUS_LOADING52 = 1403195554,
		MUS_LOADING_STOP = 512165634,
		MUS_MILESTONE_COMPLETE = 3512432505,
		MUS_MILESTONE_REWARDS = 1925711792,
		MUS_MONOLITH = 416655437,
		MUS_MONOLITH_STOP = 302934592,
		MUS_ONE_SINGLE_STAR = 2009001049,
		MUS_RECURSIVE_SIMULATION = 3854664283,
		MUS_SPACEVIRGIN = 777096854,
		MUS_STATUS_UPDATE = 2660192621,
		MUS_STORYMODE_MUSICCUE_01 = 3240878588,
		MUS_STORYMODE_MUSICCUE_02 = 3240878591,
		MUS_STORYMODE_MUSICCUE_03 = 3240878590,
		MUS_STORYMODE_MUSICCUE_04 = 3240878585,
		MUS_STORYMODE_MUSICCUE_05 = 3240878584,
		MUS_STORYMODE_MUSICCUE_06_LP = 3276141938,
		MUS_STORYMODE_MUSICCUE_06_LP_STOP = 938098129,
		MUS_STORYMODE_MUSICCUE_07 = 3240878586,
		MUS_STORYMODE_MUSICCUE_08_LP = 832075396,
		MUS_STORYMODE_MUSICCUE_08_LP_STOP = 1329638883,
		MUS_STORYMODE_MUSICCUE_09 = 3240878580,
		MUS_STORYMODE_MUSICCUE_10_LP = 232039165,
		MUS_STORYMODE_MUSICCUE_10_LP_STOP = 564448080,
		MUS_STORYMODE_MUSICCUE_11_LP = 1472125922,
		MUS_STORYMODE_MUSICCUE_11_LP_STOP = 142497,
		MUS_STORYMODE_MUSICCUE_12_LP = 270829563,
		MUS_STORYMODE_MUSICCUE_12_LP_STOP = 2823854166,
		MUS_STORYMODE_MUSICCUE_13_LP = 2605472160,
		MUS_STORYMODE_MUSICCUE_13_LP_STOP = 3050094479,
		MUS_STORYMODE_MUSICCUE_14 = 3224100878,
		MUS_STORYMODE_MUSICCUE_15 = 3224100879,
		MUS_STORYMODE_MUSICCUE_16 = 3224100876,
		MUS_STORYMODE_MUSICCUE_17 = 3224100877,
		MUS_STORYMODE_MUSICCUE_18 = 3224100866,
		MUS_STORYMODE_MUSICCUE_19 = 3224100867,
		MUS_STORYMODE_MUSICCUE_20 = 3207323287,
		MUS_STORYMODE_MUSICCUE_21 = 3207323286,
		MUS_STORYMODE_MUSICCUE_22_LP = 284882276,
		MUS_STORYMODE_MUSICCUE_22_LP_STOP = 1189299075,
		MUS_STORYMODE_MUSICCUE_23 = 3207323284,
		MUS_STORYMODE_MUSICCUE_24 = 3207323283,
		MUS_STORYMODE_MUSICCUE_25 = 3207323282,
		MUS_STORYMODE_MUSICCUE_26 = 3207323281,
		MUS_STORYMODE_MUSICCUE_27 = 3207323280,
		MUS_STORYMODE_MUSICCUE_28 = 3207323295,
		MUS_STORYMODE_MUSICCUE_29 = 3207323294,
		MUS_STORYMODE_MUSICCUE_30 = 3190545700,
		MUS_STORYMODE_MUSICCUE_31 = 3190545701,
		MUS_STORYMODE_MUSICCUE_32 = 3190545702,
		MUS_STORYMODE_MUSICCUE_33 = 3190545703,
		MUS_STORYMODE_STOPALL = 1427757253,
		MUS_THE_APPEARANCE_OF_A_STAR_SYSTEM = 1590140060,
		MUS_UNKNOWN_SYSTEM_X349866 = 104320216,
		MUS_XBOX_SPLASHSCREEN = 2578439328,
		MUS_XBOX_SPLASHSCREEN_STOP = 2314111119,
		NADA_CHATTER_11 = 4156251126,
		NADA_CHATTER_12 = 4156251125,
		NADA_CHATTER_13 = 4156251124,
		NADA_GREET_08 = 2107413004,
		NADA_GREET_09 = 2107413005,
		NEW_TECH = 3402123552,
		NEW_WEAPON = 3824850844,
		NEXUS_BRIDGEENGINE_IDLE = 2954515553,
		NEXUS_BUBBLINGTUBE_SMALL = 1230965380,
		NEXUS_CONTROLROOM_CENTRE = 3655889897,
		NEXUS_CONTROLROOM_HOLOGRAM = 2985364941,
		NEXUS_COOKINGFOOD = 1781334879,
		NEXUS_EXTERIORLEG = 2734286413,
		NEXUS_FUELPUMP = 3377038431,
		NEXUS_LANDING_RINGS = 1918321330,
		NEXUS_MARKETDOOR_CLOSE = 2569414916,
		NEXUS_MARKETDOOR_OPEN = 2167432704,
		NEXUS_MIDDLEDRONE_IDLE = 799164121,
		NEXUS_PLANTGROWBOX = 122227492,
		NEXUS_ROBOARM_MOVE1 = 580678156,
		NEXUS_ROBOARM_MOVE1_REV = 567275794,
		NEXUS_ROTATINGSIGN = 2103081834,
		NEXUS_SMALLDRONE_FRAME0 = 791204106,
		NEXUS_SMALLDRONE_FRAME192 = 645078922,
		NEXUS_SMALLDRONE_FRAME289 = 2775292121,
		NEXUS_SMALLDRONE_FRAME512 = 3061644534,
		NEXUS_SMALLDRONE_FRAME640 = 561337920,
		NEXUS_SMALLDRONE_FRAME879 = 2757528826,
		NEXUS_SMALLDRONE_LP = 1824599151,
		NEXUS_TELEPORTER = 2913667825,
		NEXUS_VENT = 608215292,
		NEXUS_WALLFAN = 530739072,
		NORMANDY_BEACON = 3432013262,
		NOTIFY_ADDITIONALRESOURCES = 4102423381,
		NOTIFY_AREANOTCLEAR = 19506176,
		NOTIFY_ASSISTANT = 1141325151,
		NOTIFY_ATTACKSHIPSENGAGED = 2548397185,
		NOTIFY_BASEOUTRANGE = 3260384977,
		NOTIFY_BASEOUTRANGE_RETURN = 2643024558,
		NOTIFY_BUILDLIMIT = 2244547084,
		NOTIFY_CIVILIANFREIGHTER_DESTROYED = 1977013082,
		NOTIFY_CRITIAL_ENERGY = 2943062140,
		NOTIFY_CRITIAL_HIT = 3034335991,
		NOTIFY_CRITICAL_COLD = 892660151,
		NOTIFY_CRITICAL_HEAT = 4003460323,
		NOTIFY_CRITICAL_NOOXYGEN = 4145593944,
		NOTIFY_CRITICAL_RAD = 1721024114,
		NOTIFY_CRITICAL_TOXIC = 3893114722,
		NOTIFY_DAMAGESUSTAINED = 1891803194,
		NOTIFY_DAMAGEVEHICLE = 2370641510,
		NOTIFY_DAMAGEVEHICLESUSTAINED = 446681206,
		NOTIFY_ENERGY_PERCENT = 3838732551,
		NOTIFY_EXTERNALVIEW = 2956756207,
		NOTIFY_EXTREMEHAZARDPLANET = 4097271277,
		NOTIFY_EXTREMESENTINELPLANET = 2211008373,
		NOTIFY_FREIGHTERACQUIRED = 1606633491,
		NOTIFY_FREIGHTERWARP = 2197622737,
		NOTIFY_FUELDEPLETED = 4012900596,
		NOTIFY_FUELREQUIRED = 3902292714,
		NOTIFY_GAS_PLANT = 973468374,
		NOTIFY_HAZ_CAVE_COLD = 4078635131,
		NOTIFY_HAZ_CAVE_HEAT = 3299690607,
		NOTIFY_HAZ_CAVE_RADIATION = 4052699366,
		NOTIFY_HAZ_CAVE_TOXIC = 3337728422,
		NOTIFY_HAZ_CRIT_COLD = 3185782198,
		NOTIFY_HAZ_CRIT_HEAT = 474393726,
		NOTIFY_HAZ_CRIT_RADIATION = 484434477,
		NOTIFY_HAZ_CRIT_TOXIC = 1252372101,
		NOTIFY_HAZ_NIGHT_COLD = 3649334222,
		NOTIFY_HAZ_NIGHT_HEAT = 4155971206,
		NOTIFY_HAZ_NIGHT_RADIATION = 2430961461,
		NOTIFY_HAZ_NIGHT_TOXIC = 1900849373,
		NOTIFY_HAZ_TEMP_STABLE = 3043790127,
		NOTIFY_HAZ_WATER_COLD = 2178840095,
		NOTIFY_HAZ_WATER_HEAT = 1539850459,
		NOTIFY_HAZ_WATER_TOXIC = 1853471466,
		NOTIFY_HIT_COLD = 3549052141,
		NOTIFY_HIT_ENERGY = 2258430031,
		NOTIFY_HIT_HEAT = 3912212713,
		NOTIFY_HIT_RAD = 392980480,
		NOTIFY_HIT_TOXIC = 2606967900,
		NOTIFY_HOMEPLANET = 2756406194,
		NOTIFY_HOMEPLANETESTABLISHED = 1686813932,
		NOTIFY_HOSTILES = 435489312,
		NOTIFY_HOSTILES_DEFEATED = 1485219709,
		NOTIFY_HOSTILESYSTEM = 3859685630,
		NOTIFY_HOSTILESYSTEMENGAGE = 1096934455,
		NOTIFY_HOSTILESYSTEMWEAPONS = 3809709865,
		NOTIFY_HOT_ROCK = 539140398,
		NOTIFY_INSUFFICIENTRESOURCES = 2278382747,
		NOTIFY_INTERNALVIEW = 3852809789,
		NOTIFY_INV_TRANSFERRED = 4112096461,
		NOTIFY_INVENTORY_SHIP_FULL = 2146088396,
		NOTIFY_INVENTORY_SUIT_FULL = 1470641535,
		NOTIFY_ITEM_RECEIVED = 1689829510,
		NOTIFY_LANDING = 38032730,
		NOTIFY_LANDINGSEQUENCE = 4162222341,
		NOTIFY_LIFESUPPORTFALLING = 2980670373,
		NOTIFY_LOW_ENERGY = 2439887260,
		NOTIFY_MISSILEDESTROYED = 3197905056,
		NOTIFY_MISSILEENEMY = 3231723941,
		NOTIFY_MISSILEENEMYINBOUND = 3486162444,
		NOTIFY_MISSILEINBOUND = 2323987462,
		NOTIFY_MISSILEINCOMING = 293295311,
		NOTIFY_MISSILEINCOMINGDESTROYED = 3652987612,
		NOTIFY_MISSILEINCOMINGNEUTRALISED = 2416665171,
		NOTIFY_MISSILELOCKED = 2998336757,
		NOTIFY_MISSILENEUTRALISED = 2984675695,
		NOTIFY_MISSILEREADY = 40912920,
		NOTIFY_MISSILESDESTROYED = 4272024371,
		NOTIFY_MISSILESINCOMINGDESTROYED = 2017771139,
		NOTIFY_MISSILESINCOMINGNEUTRALISED = 811372744,
		NOTIFY_MISSILESNEUTRALISED = 667949112,
		NOTIFY_NEW_SHIP = 1312806878,
		NOTIFY_NEW_SLOT = 1346950468,
		NOTIFY_NEW_SYSTEM = 3943299355,
		NOTIFY_NEW_WEAPON = 4191451164,
		NOTIFY_NEWASSISTANT = 2826929951,
		NOTIFY_NEWASSISTANTACQUIRED = 3837139263,
		NOTIFY_NEWBOUNTY = 785605828,
		NOTIFY_NEWFREIGHTERACQUIRED = 2302920659,
		NOTIFY_OBJECTIVE_COMPLETE = 3145604772,
		NOTIFY_PIRATEENGINES = 4058169279,
		NOTIFY_PIRATESLARGE = 2368868150,
		NOTIFY_PIRATESSPOTTED = 419444632,
		NOTIFY_PRO_OFFLINE = 1575856134,
		NOTIFY_PRO_PERCENT = 426122696,
		NOTIFY_PRODUCT_RECEIVED = 917892820,
		NOTIFY_PULSE = 4255502616,
		NOTIFY_PULSEOFFATMOS = 713762635,
		NOTIFY_PULSEOFFFUEL = 2949320551,
		NOTIFY_PULSEOFFLARGESHIP = 1659178466,
		NOTIFY_PULSEOFFLOCAL = 3291134448,
		NOTIFY_PULSEOFFPLANET = 620537849,
		NOTIFY_PULSEOFFSTATION = 3488717209,
		NOTIFY_RADLEAK_DAMAGE = 982683537,
		NOTIFY_RADPRO_OFFLINE = 107759759,
		NOTIFY_REFUELVEHICLE = 2046883022,
		NOTIFY_SENTINELSARRIVED = 1476905923,
		NOTIFY_SENTINELSDEACTIVATED = 3190793762,
		NOTIFY_SENTINELSTARSHIPS = 3594927926,
		NOTIFY_SENTINELSTARSHIPSCOMBAT = 2522764794,
		NOTIFY_SHIELD_DOWN = 1176087477,
		NOTIFY_TARGETACQUIRED = 1194636774,
		NOTIFY_TARGETLOCKED = 584356060,
		NOTIFY_TECHNOLOGYCRITICALLYDAMAGED = 2375715218,
		NOTIFY_THRUSTERSOFFATMOS = 2061086258,
		NOTIFY_THRUSTERSOFFLARGESHIP = 3518228531,
		NOTIFY_THRUSTERSOFFLOCAL = 543940437,
		NOTIFY_THRUSTERSOFFSTATION = 4289616824,
		NOTIFY_TOXICPRO_OFFLINE = 86795735,
		NOTIFY_TRANSFERRED = 2986048385,
		NOTIFY_TRANSFERRED_ELEMENT = 2465459844,
		NOTIFY_TRANSFERRED_PRODUCT = 465183449,
		NOTIFY_UNITS_DEPLETED = 457440512,
		NOTIFY_UNITS_INSUFFICIENT = 2011857548,
		NOTIFY_UNITS_RECEIVED = 3802609344,
		NOTIFY_VEHICLE = 3810439335,
		NOTIFY_VEHICLEACQUIRED = 2042603735,
		NOTIFY_VEHICLEDEPOLYED = 1439371671,
		NOTIFY_VEHICLEMOBILISED = 581759323,
		NOTIFY_VEHICLESUMMONED = 3774062441,
		NOTIFY_WARNING = 3960755587,
		NOTIFY_WARP = 639589435,
		NOTIFY_WARPING = 1725123493,
		NPC_CLOTHING_1H_INTERACT_IPAD01 = 1520735370,
		NPC_CLOTHING_1H_INTERACT_IPAD02 = 1520735369,
		NPC_CLOTHING_1H_SITTING_INTERACT_IPAD01 = 4051723187,
		NPC_CLOTHING_1H_SITTING_INTERACT_IPAD02 = 4051723184,
		NPC_CONSTRUCTION_TERMINAL = 338948561,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC01 = 3594942043,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC02 = 3594942040,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC03 = 3594942041,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC04 = 3594942046,
		NPC_FOLEY_CLOTHING_0H_IDLE_BASIC05 = 3594942047,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKDOWN01 = 1565560004,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT01 = 2470846455,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT02 = 2470846452,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKLEFT03 = 2470846453,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT01 = 128109292,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT02 = 128109295,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKRIGHT03 = 128109294,
		NPC_FOLEY_CLOTHING_0H_IDLE_LOOKUP01 = 3697288283,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_IN = 1830540895,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_LP = 1880873626,
		NPC_FOLEY_CLOTHING_0H_INT_CNSL_OUT = 181850354,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_IN = 2845324803,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_LP = 2761436926,
		NPC_FOLEY_CLOTHING_0H_INT_RT_01_OUT = 378414078,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_IN = 1434675654,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_LP = 1518563831,
		NPC_FOLEY_CLOTHING_0H_INT_RT_02_OUT = 2129573833,
		NPC_FOLEY_CLOTHING_0H_INT_RT_03 = 4133477981,
		NPC_FOLEY_CLOTHING_0H_INT_RT_04 = 4133477978,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_01 = 4136726391,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_02 = 4136726388,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_03 = 4136726389,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_04 = 4136726386,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_05 = 4136726387,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_06 = 4136726384,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_07 = 4136726385,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_08 = 4136726398,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_09 = 4136726399,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_10 = 4153503977,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_11 = 4153503976,
		NPC_FOLEY_CLOTHING_0H_INTER_LISTEN_12 = 4153503979,
		NPC_FOLEY_CLOTHING_0H_SHUTDWN_IN = 2989995522,
		NPC_FOLEY_CLOTHING_0H_SHUTDWN_OUT = 2595166525,
		NPC_FOLEY_CLOTHING_0H_SIT_ANGRY01 = 1963111058,
		NPC_FOLEY_CLOTHING_0H_SIT_ANGRY02 = 1963111057,
		NPC_FOLEY_CLOTHING_0H_SIT_CHATTER01 = 2112363894,
		NPC_FOLEY_CLOTHING_0H_SIT_CHATTER02 = 2112363893,
		NPC_FOLEY_CLOTHING_0H_SIT_GREET01 = 3304108126,
		NPC_FOLEY_CLOTHING_0H_SIT_GREET02 = 3304108125,
		NPC_FOLEY_CLOTHING_0H_SIT_HAPPY01 = 3660423735,
		NPC_FOLEY_CLOTHING_0H_SIT_HAPPY02 = 3660423732,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_L01 = 2971324469,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_L02 = 2971324470,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_R01 = 889325531,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOK_R02 = 889325528,
		NPC_FOLEY_CLOTHING_0H_SIT_LOOKARND = 146552510,
		NPC_FOLEY_CLOTHING_0H_SIT_NEUTRAL01 = 4258607936,
		NPC_FOLEY_CLOTHING_0H_SIT_NEUTRAL02 = 4258607939,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE01 = 405201531,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE02 = 405201528,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE03 = 405201529,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE04 = 405201534,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE05 = 405201535,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE06 = 405201532,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_IDLE07 = 405201533,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_INTO = 1270088578,
		NPC_FOLEY_CLOTHING_0H_SIT_SOFA_OUTOF = 3456531571,
		NPC_FOLEY_CLOTHING_0H_SIT_STRETCH = 1813167715,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY01 = 1154166758,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY02 = 1154166757,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY05 = 1154166754,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY_LP01 = 3489990847,
		NPC_FOLEY_CLOTHING_0H_STAND_ANGRY_LP02 = 3489990844,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER01 = 2627504674,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER02 = 2627504673,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER03 = 2627504672,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER04 = 2627504679,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER05 = 2627504678,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER06 = 2627504677,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER07 = 2627504676,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER08 = 2627504683,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER09 = 2627504682,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER10 = 2610727088,
		NPC_FOLEY_CLOTHING_0H_STAND_CHATTER14 = 2610727092,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET01 = 1271614514,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET02 = 1271614513,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET03 = 1271614512,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET04 = 1271614519,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET05 = 1271614518,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET06 = 1271614517,
		NPC_FOLEY_CLOTHING_0H_STAND_GREET07 = 1271614516,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY01 = 2903578779,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY02 = 2903578776,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY03 = 2903578777,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY04 = 2903578782,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY05 = 2903578783,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY06 = 2903578780,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY07 = 2903578781,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY08 = 2903578770,
		NPC_FOLEY_CLOTHING_0H_STAND_HAPPY09 = 2903578771,
		NPC_FOLEY_CLOTHING_0H_STAND_NEUTRAL01 = 1786697628,
		NPC_FOLEY_CLOTHING_0H_STAND_NEUTRAL02 = 1786697631,
		NPC_FOLEY_CLOTHING_0H_TURN_L_120 = 1632991013,
		NPC_FOLEY_CLOTHING_0H_TURN_R_120 = 2040319319,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD03 = 2653185640,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD04 = 2653185647,
		NPC_FOLEY_CLOTHING_1H_INTERACT_IPAD05 = 2653185646,
		NPC_FOLEY_CLOTHING_1H_SAD_LP01 = 462002192,
		NPC_FOLEY_CLOTHING_1H_STAND_ANGRY03 = 1644508259,
		NPC_FOLEY_CLOTHING_1H_STAND_ANGRY04 = 1644508260,
		NPC_FOLEY_CLOTHING_1H_STAND_NEUTRAL03 = 3096829033,
		NPC_FOLEY_CLOTHING_1H_STAND_NEUTRAL04 = 3096829038,
		NPC_FOLEY_CLOTHING_1H_UNSHEATH_IPAD = 977559,
		NPC_FOOTSTEPS_GENERIC = 3958095652,
		NPC_HANDHOLOGRAM = 2188194579,
		NPC_ROBOT_FOOTSTEP = 120238672,
		NPC_SCIENCE_WORKSTATION_ARMS = 719626965,
		NPC_SHIP_ENGINE_FREIGHTER_FRONT = 2823576857,
		NPC_SHIP_ENGINES = 2992898347,
		NPC_SHIP_IDLE = 609381404,
		NPC_SHIP_LAND = 2277641193,
		NPC_SHIP_LAND_IMPACT = 3556618810,
		NPC_SHIP_LAND_ROTATE = 4201461385,
		NPC_SHIP_LAND_ROTATE_STOP = 3073818940,
		NPC_SHIP_LASER = 2452600139,
		NPC_SHIP_LASERS01 = 1911067891,
		NPC_SHIP_LASERS02 = 1911067888,
		NPC_SHIP_LASERS03 = 1911067889,
		NPC_SHIP_LASERS04 = 1911067894,
		NPC_SHIP_POLICE_SIREN = 3466911794,
		NPC_SHIP_POLICE_SIREN_STOP = 4220820369,
		NPC_SHIP_SCAN_PULSE = 3624603939,
		NPC_SHIP_SPACESTATION_FLYIN = 4148605495,
		NPC_SHIP_TAKEOFF = 2861420794,
		NPC_SHIPS_WARPIN = 2736218626,
		NPC_SHIPS_WARPOUT = 3402292541,
		NPC_SHIPSMALL_WARPIN = 3222301780,
		NPC_SHIPSMALL_WARPOUT = 2764795891,
		NPC_SPEECH_CHATTER = 3832504929,
		NPC_TALK_STOP = 3835799014,
		NPC_VOCAL_1H_ANGRY_STAND_03 = 2673672169,
		NPC_VOCAL_1H_ANGRY_STAND_04 = 2673672174,
		NPC_VOCAL_1H_NEUTRAL_STAND_03 = 89235415,
		NPC_VOCAL_ANGRY_STAND01 = 922409450,
		NPC_VOCAL_ANGRY_STAND02 = 922409449,
		NPC_VOCAL_CHATTER_STAND_01 = 2352053023,
		NPC_VOCAL_CHATTER_STAND_02 = 2352053020,
		NPC_VOCAL_CHATTER_STAND_03 = 2352053021,
		NPC_VOCAL_CHATTER_STAND_04 = 2352053018,
		NPC_VOCAL_GREET_STAND_01 = 893852059,
		NPC_VOCAL_GREET_STAND_02 = 893852056,
		NPC_VOCAL_GREET_STAND_03 = 893852057,
		NPC_VOCAL_GREET_STAND_04 = 893852062,
		NPC_VOCAL_GREET_STAND_06 = 893852060,
		NPC_VOCAL_GREET_STAND_07 = 893852061,
		NPC_VOCAL_HAPPY_STAND_01 = 3958863996,
		NPC_VOCAL_HAPPY_STAND_02 = 3958863999,
		NPC_VOCAL_HAPPY_STAND_03 = 3958863998,
		NPC_VOCAL_HAPPY_STAND_04 = 3958863993,
		NPC_VOCAL_HAPPY_STAND_05 = 3958863992,
		NPC_VOCAL_HAPPY_STAND_06 = 3958863995,
		NPC_VOCAL_HAPPY_STAND_07 = 3958863994,
		NPC_VOCAL_HAPPY_STAND_08 = 3958863989,
		NPC_VOCAL_IDLE_BASIC01 = 132860787,
		NPC_VOCAL_NEUTRAL_STAND_01 = 3829808777,
		NPC_VOCAL_NEUTRAL_STAND_02 = 3829808778,
		NPC_VOCAL_SIT_ANGRY_01 = 466021175,
		NPC_VOCAL_SIT_ANGRY_02 = 466021172,
		NPC_VOCAL_SIT_CHATTER_01 = 3127959995,
		NPC_VOCAL_SIT_CHATTER_02 = 3127959992,
		NPC_VOCAL_SIT_GREET_01 = 1022758643,
		NPC_VOCAL_SIT_GREET_02 = 1022758640,
		NPC_VOCAL_SIT_HAPPY_01 = 2412778492,
		NPC_VOCAL_SIT_HAPPY_02 = 2412778495,
		NPC_WPN_FREIGHTER_GUN = 3690376612,
		NPC_WPN_FREIGHTER_LASER = 2280127943,
		NPC_WPN_FREIGHTER_LASER_END = 2522497737,
		NPC_WPN_FREIGHTER_TURRET_FIRE = 714228867,
		NPC_WPN_FREIGHTER_TURRET_ROTATE = 3779495726,
		NPC_WPN_FREIGHTER_TURRET_ROTATE_STOP = 1694509869,
		NPC_WPN_SMALLSHIP_LASER = 3708135956,
		NPC_WPN_SMALLSHIP_LASER_STOP = 4205087763,
		NPC_WPN_TORPEDO_LAUNCH = 994366060,
		NPC_WPN_TORPEDO_LP_STOP = 2832207160,
		NPC_WPN_TURRET_START = 1790284754,
		NPC_WPN_TURRET_STOP = 1011913610,
		OBJ_ATMOSPHERE_HARVESTER = 1898210056,
		OBJ_BARREL_MED = 3381999112,
		OBJ_CRATE_LARGE = 1631268160,
		OBJ_CRATE_MED = 3320101575,
		OBJ_CRATE_SMALLA = 1805144553,
		OBJ_CRATE_SMALLB = 1805144554,
		OBJ_FLAG = 1301314313,
		OBJ_HARVESTER = 1083822995,
		OBJ_HEALTHSTATION_OFF = 2004120533,
		OBJ_HEALTHSTATION_ON = 3528563049,
		OBJ_MINING_AMU = 1594151933,
		OBJ_MINING_GAS_HARVESTER = 3531133710,
		OBJ_MONOLITH = 2951877355,
		OBJ_PLAQUE = 1850387851,
		OBJ_PORTABLEREFINERY_START = 831490627,
		OBJ_PORTABLEREFINERY_STOP = 3307427009,
		OBJ_REFINERYLARGE_IDLE = 877416377,
		OBJ_REFINERYLARGE_START = 2814564013,
		OBJ_REFINERYLARGE_STOP = 658878447,
		OBJ_REFINERYMEDIUM_IDLE = 4030199823,
		OBJ_REFINERYMEDIUM_START = 3263161063,
		OBJ_REFINERYMEDIUM_STOP = 1244745997,
		OBJ_ROBOTHEAD = 2439061163,
		OBJ_ROBOTHEAD_HAND = 3142177429,
		OBJ_RUINS_RESOURCE_LP = 1465094534,
		OBJ_SHIELD_REPAIRER_OFF = 759403879,
		OBJ_SHIELD_REPAIRER_ON = 1562082195,
		OBJ_SPINNINGCHAIR = 835853928,
		OBJ_SPINNINGGLOBE = 774833132,
		OBJ_SPINNINGSHAPE = 1809435248,
		OBJ_STANDINGSTONE_ACTIVATE = 2571925458,
		OBJ_STANDINGSTONE_RARE = 2757769585,
		OBJ_STANDINGSTONES = 1558870021,
		OBJ_WAYPOINT = 3943441730,
		OBJECT_ANALYSING = 418328775,
		OBJECT_OF_INTEREST = 2086787269,
		OBSERVATORY_HOLOGRAM = 1166522403,
		OCTO_IDLE_FR1 = 1233315629,
		OCTO_IDLE_FR145 = 288773740,
		OCTO_IDLE_FR353 = 473621739,
		OCTO_IDLE_FR575 = 2653726401,
		OCTO_IDLE_FR780 = 2435911579,
		OCTO_SPRINGWALK_FR1 = 1067673959,
		OCTO_SPRINGWALK_FR161 = 84882648,
		OCTO_WALK_FR1 = 3622574264,
		OCTO_WALK_FR145 = 2299379873,
		OCTO_WALK_FR353 = 236130066,
		OCTO_WALK_FR575 = 4229394380,
		OCTO_WALK_FR780 = 2166144694,
		OILSTREAM = 1618707159,
		ORBIDLE = 3764541074,
		ORBIDLE_LOOP = 2865933459,
		PARTICLES_DUSTDEVIL = 1941594313,
		PARTICLES_DUSTDEVIL_STOP = 2294290300,
		PARTICLES_ELECTRICAL_SPARKS = 4237424320,
		PARTICLES_ELECTRICAL_SPARKS_STOP = 3832932079,
		PARTICLES_ELECTRICALANOMALY = 2499651046,
		PARTICLES_ELECTRICALANOMALY_STOP = 1194776565,
		PARTICLES_GEOTHERMAL = 985761321,
		PARTICLES_GEOTHERMAL_EXPLODE = 744291083,
		PARTICLES_GEOTHERMAL_STOP = 1352304924,
		PARTICLES_GRAVITYINVERSION = 3426237444,
		PARTICLES_GRAVITYINVERSION_STOP = 1027251811,
		PARTICLES_LAVAVENT = 3624406402,
		PARTICLES_LAVAVENT_EXPLODE = 259186724,
		PARTICLES_LAVAVENT_STOP = 3258321921,
		PARTICLES_RADIOANOMALY = 1928620129,
		PARTICLES_RADIOANOMALY_STOP = 39884900,
		PARTICLES_SPARKS_COMMON = 2306054985,
		PARTICLES_SPARKS_COMMON_STOP = 2643535612,
		PARTICLES_TOXICCLOUD = 309912793,
		PARTICLES_TOXICCLOUD_STOP = 2986720428,
		PET_EGG_INDUCE = 2543707401,
		PET_EGGSPLOSION = 2269848595,
		PET_UI_ADOPT = 3125690798,
		PET_UI_CALLPET = 84363355,
		PET_UI_COLLECT_EGGS = 599273263,
		PET_UI_CUSTOM_FLANK = 3144257706,
		PET_UI_CUSTOM_SELECT = 2139377788,
		PET_UI_DISMISS = 1737996284,
		PET_UI_EGG_HATCH = 2462078364,
		PET_UI_FOOD_PELLET = 1622626497,
		PET_UI_MENU_HOVER = 1690108398,
		PET_UI_PAT = 4272927287,
		PET_UI_SUMMON = 1903123353,
		PET_UI_TREAT = 684501600,
		PILGRIM_BOOST_START = 1567778204,
		PILGRIM_BOOST_STOP = 179649904,
		PILGRIM_HORN_START = 3990931362,
		PILGRIM_HORN_STOP = 3734367386,
		PILGRIM_IDLE_EXTERIOR = 1770789799,
		PILGRIM_IMPACTS = 2106413053,
		PILGRIM_JUMP = 3872936952,
		PILGRIM_START = 446972720,
		PILGRIM_STOP = 3468869788,
		PILGRIM_SUSPENSION = 1862181967,
		PIPE_SMOKE = 228373679,
		PIPE_SMOKE_STOP = 3361564826,
		PIRATE_SALVAGE_CHAIR_SPIN = 2208077417,
		PIRATE_STATION_GENERATOR = 3290547925,
		PIRATE_STATIONCORE = 3982679414,
		PL_BREATHING_START = 2373909751,
		PL_BREATHING_STOP = 1942603101,
		PL_CAMOUFLAGE_IN = 1315710186,
		PL_CAMOUFLAGE_OUT = 2033727173,
		PL_DAMAGE_WARNING_LOW_HEALTH_LP = 2598974765,
		PL_DAMAGE_WARNING_LOW_HEALTH_LP_STOP = 450279776,
		PL_DAMAGE_WARNING_SHIELD_LOSS = 96350340,
		PL_FISHING_LINE_PULL = 1095278999,
		PL_FISHING_LINE_PULL_STOP = 3324340530,
		PL_FOLEY_BODYHITS = 2438984430,
		PL_FOLEY_CLOTHING_0H_SWIM_BACK = 1038765912,
		PL_FOLEY_CLOTHING_0H_SWIM_FORWARD = 4206703060,
		PL_FOLEY_CLOTHING_0H_SWIM_IDLE = 1353179343,
		PL_FOLEY_CLOTHING_0H_SWIM_LEFT_RIGHT = 3128264693,
		PL_FOLEY_CLOTHING_1H_MULTITOOL_MELEE = 2643905937,
		PL_FOLEY_CLOTHING_1H_OVERHEAT = 280263987,
		PL_FOLEY_CLOTHING_1H_RELOAD = 3642856824,
		PL_FOLEY_CLOTHING_2H_MULTITOOL_MELEE = 3593885660,
		PL_FOLEY_CLOTHING_2H_MULTITOOLRELOAD = 808851594,
		PL_FOLEY_CLOTHING_DEATH_KNEES = 3309322022,
		PL_FOLEY_CLOTHING_DEATH_SWIM = 100439254,
		PL_FOLEY_CLOTHING_EMOTE_CALLPET = 2140299943,
		PL_FOLEY_CLOTHING_EMOTE_DANCEINTO = 2218510691,
		PL_FOLEY_CLOTHING_EMOTE_FALLKNEESINTO = 2659304515,
		PL_FOLEY_CLOTHING_EMOTE_FALLKNEESLP = 138819341,
		PL_FOLEY_CLOTHING_EMOTE_FEED = 385080696,
		PL_FOLEY_CLOTHING_EMOTE_GREET_WAVE = 1159549325,
		PL_FOLEY_CLOTHING_EMOTE_HEROICINTO = 1819879650,
		PL_FOLEY_CLOTHING_EMOTE_LOOKDISTANCEINTO = 248100302,
		PL_FOLEY_CLOTHING_EMOTE_MINDBLOWN = 2361907150,
		PL_FOLEY_CLOTHING_EMOTE_NEG_FINGERWAG = 3343801081,
		PL_FOLEY_CLOTHING_EMOTE_POINT = 2256924678,
		PL_FOLEY_CLOTHING_EMOTE_RELAXINTO = 2857048748,
		PL_FOLEY_CLOTHING_EMOTE_SITINTO = 1906501494,
		PL_FOLEY_CLOTHING_EMOTE_STROKE = 542561232,
		PL_FOLEY_CLOTHING_EMOTE_THUMBSUP = 456024040,
		PL_FOLEY_CLOTHING_EMOTE_WONDER = 2429852101,
		PL_FOLEY_CLOTHING_FALL_CONTROL = 2859952874,
		PL_FOLEY_CLOTHING_FALL_PANIC = 3800802684,
		PL_FOLEY_CLOTHING_IDLE_WEIGHT_SHIFT = 1213548305,
		PL_FOLEY_CLOTHING_JOG_TO_IDLE = 824352504,
		PL_FOLEY_CLOTHING_LADDER_CYCLE_DOWN = 173215931,
		PL_FOLEY_CLOTHING_LADDER_CYCLE_UP = 1027465052,
		PL_FOLEY_CLOTHING_LADDER_DISMOUNT_BOTTOM = 2415414161,
		PL_FOLEY_CLOTHING_LADDER_DISMOUNT_TOP = 3047552345,
		PL_FOLEY_CLOTHING_LADDER_MOUNT_BOTTOM = 4109200797,
		PL_FOLEY_CLOTHING_LADDER_MOUNT_TOP = 4262944789,
		PL_FOLEY_CLOTHING_LOCO = 3080627722,
		PL_FOLEY_CLOTHING_MULTITOOL_DRAW = 2603331957,
		PL_FOLEY_CLOTHING_MULTITOOL_HOLSTER = 2858807508,
		PL_FOLEY_CLOTHING_MULTITOOL_OVERHEAT = 466758131,
		PL_FOLEY_CLOTHING_MULTITOOL_RELOAD = 96586040,
		PL_FOLEY_CLOTHING_RUN_TO_IDLE = 1933902727,
		PL_FOLEY_CLOTHING_SWIM_STOPALL = 2140187239,
		PL_FOLEY_EMOTE_DANCELOOP = 3627207378,
		PL_FOLEY_EMOTE_HELP = 1051463538,
		PL_FOLEY_EMOTE_JOY = 191224083,
		PL_FOLEY_EMOTE_LAUGH = 2503734830,
		PL_FOLEY_EMOTE_NEEDRESOURCE = 4130226675,
		PL_FOLEY_EMOTE_OVERHERE = 2064047647,
		PL_FOLEY_EMOTE_UNDERWATER_OK = 3238082025,
		PL_FOLEY_EMOTE_UNDERWATER_THUMBSDOWN = 2450264440,
		PL_FOLEY_EMOTE_UNDERWATER_THUMBSUP = 3342000667,
		PL_FOLEY_FISHING_CASTOFF = 2292134671,
		PL_FOLEY_FISHING_FLICK = 873824070,
		PL_FOLEY_FISHING_LAND_FISH = 570069063,
		PL_FOLEY_FISHING_LINE_STOP = 2161768674,
		PL_FOLEY_FISHING_REEL_IN = 918401693,
		PL_FOLEY_FISHING_STOP = 1702997973,
		PL_FOLEY_SLOPE_SLIDE_START = 3642926038,
		PL_FOLEY_SLOPE_SLIDE_STOP = 3794275286,
		PL_HAZARD_CRITICAL_HIT = 2512146226,
		PL_HAZARD_RECOVERY = 10119030,
		PL_HAZARD_WARNING = 3503917281,
		PL_HEALTH = 2958097014,
		PL_OUTOFBREATH = 717881129,
		PL_PROTECTION_CHARGE = 3792407780,
		PL_PROTECTION_END = 946174759,
		PL_PROTECTION_LP = 486766964,
		PL_RUN_FAIL = 3575500622,
		PL_SHIELD_CHARGE = 2526386378,
		PL_SHIELD_HIT = 399723077,
		PL_SHIELD_LOWSWEEP = 3418178756,
		PL_SHIELD_SHIP_HIT_BIG = 1961569617,
		PL_SHIELD_SHIP_HIT_SMALL = 1988856382,
		PL_SHIP_BOOST_FAIL = 2588813245,
		PL_SHIP_BOOST_POWERUP = 1657654747,
		PL_SHIP_BOOST_START = 3451007219,
		PL_SHIP_BOOST_STOP = 1795901233,
		PL_SHIP_BURN = 184967358,
		PL_SHIP_BURN_STOP = 2508222941,
		PL_SHIP_COCKPIT_RAIN = 595633637,
		PL_SHIP_COCKPIT_RAIN_STOP = 3151521832,
		PL_SHIP_ENGINES_START = 2143139063,
		PL_SHIP_ENGINES_START_REMOTE = 955953444,
		PL_SHIP_ENGINES_STOP = 3903008093,
		PL_SHIP_ENGINES_STOP_REMOTE = 1189088138,
		PL_SHIP_ENTER = 399772157,
		PL_SHIP_EXIT = 791828913,
		PL_SHIP_GROUND_IMPACT = 753242713,
		PL_SHIP_HASLANDED = 3045449811,
		PL_SHIP_HASLANDED_RACER = 249537421,
		PL_SHIP_HYPERSPACE_END = 3249434187,
		PL_SHIP_HYPERSPACE_START = 1252313904,
		PL_SHIP_IDLE = 4232742771,
		PL_SHIP_LANDING = 3008723446,
		PL_SHIP_MINIWARP_COUNTDOWN = 1348784714,
		PL_SHIP_MINIWARP_END = 1404352244,
		PL_SHIP_MINIWARP_JUMP = 2773095001,
		PL_SHIP_RACER_LANDING = 599003000,
		PL_SHIP_RACER_TAKEOFF = 3039653349,
		PL_SHIP_ROBOT_CARRIAGELOCK_LANDING = 3975579001,
		PL_SHIP_ROBOT_CARRIAGELOCK_TAKEOFF = 431248304,
		PL_SHIP_ROBOT_CHUNKYLEGS_LANDING = 3975438873,
		PL_SHIP_ROBOT_CHUNKYLEGS_TAKEOFF = 431108432,
		PL_SHIP_ROBOT_FLIPWINGS_LANDING = 1176418337,
		PL_SHIP_ROBOT_FLIPWINGS_TAKEOFF = 247945464,
		PL_SHIP_ROBOT_HUGGINGWALLWINGS_LANDING = 493620689,
		PL_SHIP_ROBOT_HUGGINGWALLWINGS_TAKEOFF = 3731903624,
		PL_SHIP_ROBOT_LANDINGGEAR_LANDING = 2545474430,
		PL_SHIP_ROBOT_LANDINGGEAR_TAKEOFF = 12163343,
		PL_SHIP_ROBOT_NEEDLEWINGS_LANDING = 818318901,
		PL_SHIP_ROBOT_NEEDLEWINGS_TAKEOFF = 488362556,
		PL_SHIP_ROBOT_SKIRTWINGS_LANDING = 3211787981,
		PL_SHIP_ROBOT_SKIRTWINGS_TAKEOFF = 1326008884,
		PL_SHIP_ROBOT_TOPWINGS_LANDING = 1050661021,
		PL_SHIP_ROBOT_TOPWINGS_TAKEOFF = 1226065316,
		PL_SHIP_ROBOT_WALLWINGS_LANDING = 3226207038,
		PL_SHIP_ROBOT_WALLWINGS_TAKEOFF = 651319503,
		PL_SHIP_SCANNED = 3802358087,
		PL_SHIP_SHIELD_DOWN = 2110115305,
		PL_SHIP_SPACESTATION_LAUNCH_END = 2186025677,
		PL_SHIP_SPARKS = 977386059,
		PL_SHIP_SPARKS_STOP = 1578311622,
		PL_SHIP_START_ACTIVE = 1408582212,
		PL_SHIP_TAKEOFF = 514090887,
		PL_SHIP_TAKEOFF_WHENREMAININSHIP = 1741087261,
		PL_SHIP_THRUST_ONESHOTS = 3661739297,
		PL_SHIP_THRUST_REVERSE_ONESHOTS = 3071568048,
		PL_SHIP_TRANSITION_TO_PLANET_END = 271192019,
		PL_SHIP_TRANSITION_TO_PLANET_START = 1720965224,
		PL_SHIP_TRANSITION_TO_SPACE_END = 260820793,
		PL_SHIP_TRANSITION_TO_SPACE_START = 3056629338,
		PL_SHIP_VR_EXIT = 2290175096,
		PL_SHIP_VR_EXIT_STOP = 4216455863,
		PL_SHIP_WARP = 2367794895,
		PL_SUIT_START = 2721016034,
		PL_SUIT_STARTUP = 1748081337,
		PL_SUIT_STARTUP_CONFIRM = 3409426940,
		PL_SUIT_STARTUP_INTERACT_TIMER = 1012345556,
		PL_SUIT_STARTUP_INTERACT_TIMER_STOP = 3518049491,
		PL_SUIT_STOP = 2716090586,
		PL_SURVEYING = 1689446954,
		PL_SURVEYING_C = 3293464112,
		PL_SURVEYING_DISCOVER = 1560049920,
		PL_SURVEYING_HIGHLIGHT = 1561117923,
		PL_SURVEYING_L = 3293464127,
		PL_SURVEYING_R = 3293464097,
		PL_SURVEYING_SWITCHTO = 318421178,
		PL_TELEPORT_WARP_END = 3402827328,
		PL_TELEPORT_WARP_START = 3314899483,
		PL_VEHICLE_REMOTE_BOOST = 202932265,
		PL_VEHICLE_REMOTE_DESTRUCTIBLE = 4100343898,
		PL_VEHICLE_REMOTE_ENGINE = 2885382678,
		PL_VEHICLE_REMOTE_HORN = 3371701339,
		PL_VEHICLE_REMOTE_IDLE = 669762998,
		PL_VEHICLE_REMOTE_IMPACTS = 4189153617,
		PL_VEHICLE_REMOTE_JUMP = 2471146996,
		PL_VEHICLE_REMOTE_START = 3803668292,
		PL_VEHICLE_REMOTE_STOP = 3985597944,
		PL_VEHICLE_REMOTE_SURFACE = 997646265,
		PL_VEHICLE_REMOTE_SUSPENSION = 991067859,
		PL_WOUND = 2192195653,
		PL_WPN_SHIP_MISSILE_SHOOT = 1078756643,
		PLACEMARKER_FLARE = 2772020849,
		PLACEMARKER_IMPACT = 1606985057,
		PLACEMARKER_LP = 906588535,
		PLACEMARKER_LP_STOP = 3992295250,
		PLACEMARKER_WOOSH = 3391103609,
		PLANT_ATTACK = 1298875651,
		PLANT_CLOSE = 2117620981,
		PLANT_GASGIANT_STEAMER = 698184181,
		PLANT_GATHER_ALOEFLESH = 1968897852,
		PLANT_GATHER_FIREBERRY = 2266430979,
		PLANT_GATHER_FROZENTUBERS = 217940900,
		PLANT_GATHER_GRAHFRUIT = 538135969,
		PLANT_GATHER_HEPTAWHEAT = 356502074,
		PLANT_GATHER_IMPULSEBEANS = 2422461359,
		PLANT_GATHER_JADEPEAS = 1322806538,
		PLANT_GATHER_PULPYROOTS = 3472181036,
		PLANT_GATHER_SWEETROOT = 1747268291,
		PLANT_ILLUMINATED = 1114436071,
		PLANT_ILLUMINATED_STOP = 2437626530,
		PLANT_RADIOACTIVE_STEAMER = 2955905370,
		PLANTCAT_ATTACK01 = 943544470,
		PLANTCAT_ATTACK02 = 943544469,
		PLANTCAT_ATTACK03 = 943544468,
		PLANTCAT_DEATH = 1137032495,
		PLANTCAT_DETBARK01 = 1715395753,
		PLANTCAT_EAT_FR1 = 3039316223,
		PLANTCAT_EAT_FR160 = 3662502513,
		PLANTCAT_HAPPY01_FR1 = 411786158,
		PLANTCAT_HAPPY01_FR111 = 4147474160,
		PLANTCAT_PAIN = 2255048231,
		PLANTCAT_PERFORM02 = 3279770388,
		PLANTCAT_PERFORM03 = 3279770389,
		PLANTCAT_PERFORM04 = 3279770386,
		PLANTCAT_PERFORMATK = 521335180,
		PLANTCAT_POUNCE = 1849217989,
		PLANTCAT_ROAR = 1862874271,
		PLANTCAT_SAD01 = 3888947508,
		PLANTCAT_SLEEPEND = 1991187183,
		PLANTCAT_SLEEPSTART = 2446705740,
		PLAQUE_END = 170445927,
		PLAQUE_LOOP = 2216543882,
		PLAQUE_START = 306803540,
		PLAY_BASE_POWER_CONNECT = 317299172,
		PLAY_MAP_CENTRECHORD_01_INDEX_01_MAP_CENTRECHORD_01 = 3601292498,
		PLAY_MAP_CENTRECHORD_02_INDEX_01_MAP_CENTRECHORD_02 = 306860026,
		PLAY_MAP_DRONENOISE_01_INDEX_01_MAP_SPACE_NOISE_DRONE = 4067482608,
		PLAY_MAP_DRONENOISE_02_INDEX_01_MAP_SPACE_NOISE_DRONE_RR = 1472729552,
		PLAY_MAP_DRONETONE_01_INDEX_01_MUS_MAP1_DRONE_E = 776510771,
		PLAY_MAP_PIANO_INDEX_01_MUS_MAP01_PIANO_01 = 3114147655,
		PLAY_MAP_SINGLES_01_INDEX_01_MUS_MAP01_SINGLES1_04 = 1632615509,
		PLAY_MAP_SINGLES_02_INDEX_01_MUS_MAP01_SINGLES2_09 = 2137135100,
		PLAY_MAP_ZONE01_INDEX_01_MAP_ZONE01 = 1493737966,
		PLAY_MAP_ZONE02_INDEX_01_MAP_ZONE02 = 2189323162,
		PLAY_MAP_ZONE02_SINGLES_INDEX_01_ZONE02_SINGLES02 = 2073155049,
		PLAY_PL_BASS_INDEX_01_MONOLITH_BOWEDBASSGTR_GMIN_6 = 1742782413,
		PLAY_PL_BASS_INDEX_07_MONOLITH_BOWEDBASSGTR_GMIN_1 = 2118527992,
		PLAY_PL_BASS_INDEX_26_MELB_PLANETBASS_8 = 1448714392,
		PLAY_PL_CELLO_INDEX_07_EOTWS_CELLO_1 = 3232248294,
		PLAY_PL_DRONE_01_INDEX_01_EQUINOXSOFT_EMIN_2 = 1073890527,
		PLAY_PL_DRONE_01_INDEX_03_SM_VOX_GRANULAR_DMIN_1 = 3726505767,
		PLAY_PL_DRONE_01_INDEX_08_ASCENSION_SPACE_6 = 2077639119,
		PLAY_PL_DRONE_01_INDEX_10_TETSUO_VOXTEXTURE_1 = 3243686488,
		PLAY_PL_DRONE_01_INDEX_13_BEYOND_PLANETDRONE_9 = 1341298234,
		PLAY_PL_DRONE_01_INDEX_14_EOTWSALT_STRINGHOLD_7 = 1774780321,
		PLAY_PL_DRONE_01_INDEX_16_BOREALIS_GTRDELAY_AMIN_7 = 322796441,
		PLAY_PL_DRONE_01_INDEX_18_NMS2017_MIDS_52 = 2190106001,
		PLAY_PL_DRONE_01_INDEX_20_TUNG_PLANET_TEXTURE_2 = 3961650110,
		PLAY_PL_DRONE_01_INDEX_21_OCT_TEXTURE_39 = 4100350270,
		PLAY_PL_DRONE_01_INDEX_23_ECHO_PLANETLOWEND_15 = 3382037007,
		PLAY_PL_DRONE_01_INDEX_24_DOMO_PLANETIRIS_2 = 1448240474,
		PLAY_PL_DRONE_01_INDEX_25_SCRAPER_PLANETROOTS_6 = 1817747444,
		PLAY_PL_DRONE_01_INDEX_27_OVERSEER_PLANETACOUSTICBED_5 = 3687781679,
		PLAY_PL_DRONE_01_INDEX_28_SCRAPER_PLANETROOTS_11 = 2648708807,
		PLAY_PL_DRONE_02_INDEX_01_TOMORROW_FM_1 = 1472803101,
		PLAY_PL_DRONE_02_INDEX_08_TOMORROW_FM_CHOPPED_1 = 277324806,
		PLAY_PL_DRONE_02_INDEX_14_EOTWSALT_STRINGLOOP_3 = 3977495409,
		PLAY_PL_DRONE_02_INDEX_18_NMS2017_POLYHIGH_1 = 1196679577,
		PLAY_PL_DRONE_02_INDEX_25_SCRAPER_PLANETWEIRDARP_1 = 3267639477,
		PLAY_PL_DRONE_02_INDEX_28_SCRAPER_PLANETGTRTEXTURE_8 = 2902217127,
		PLAY_PL_FX_01_INDEX_01_BOWEDCYMBAL_CLEAN_6 = 1485806021,
		PLAY_PL_FX_01_INDEX_03_SM_ATMOS_DMIN_4 = 1177923396,
		PLAY_PL_FX_01_INDEX_06_EV_PLANETNOISE_9 = 1549168942,
		PLAY_PL_FX_01_INDEX_14_EOTWSALT_CRACKLE_2 = 38901843,
		PLAY_PL_FX_01_INDEX_15_HAUNTED_ARCTIC_EMIN_3 = 109968494,
		PLAY_PL_FX_01_INDEX_17_APORIA_PLANET_ROBOT_14 = 3771823134,
		PLAY_PL_FX_01_INDEX_18_NMS2017_IMPACTS_3 = 2616376169,
		PLAY_PL_FX_01_INDEX_19_TUES_PLANETTREMOR_17 = 2370070298,
		PLAY_PL_FX_01_INDEX_25_DASKA_PLANETTHUD = 4176156255,
		PLAY_PL_FX_01_INDEX_27_OVERSEER_PLANETTHUMPS_9 = 319943388,
		PLAY_PL_FX_02_INDEX_03_BOWEDCYMBAL_CHOPDISTORT_22 = 2405430794,
		PLAY_PL_FX_03_INDEX_03_SM_HHPATTER_6 = 744004353,
		PLAY_PL_GUITAR_01_INDEX_01_MONOLITH_PLANET_GTRSOUNDSCAPE_5 = 3482103253,
		PLAY_PL_GUITAR_01_INDEX_02_ASIM_PLANET_PAULGTR_5 = 1874757831,
		PLAY_PL_GUITAR_01_INDEX_03_SM_PLANET_ATMOSGTR_DMIN_3 = 2268213627,
		PLAY_PL_GUITAR_01_INDEX_04_BLUEPRINT_BOWEDGTR_EMIN_31 = 142809987,
		PLAY_PL_GUITAR_01_INDEX_06_EV_PLANETGTR_5 = 4146100305,
		PLAY_PL_GUITAR_01_INDEX_12_ATWOOD_GTRVERB_7 = 2913554562,
		PLAY_PL_GUITAR_01_INDEX_13_LULL_GTR_16 = 3500995777,
		PLAY_PL_GUITAR_01_INDEX_15_HAUNTED_GTRSHARK_EMIN_4 = 1311004613,
		PLAY_PL_GUITAR_01_INDEX_16_MONOALT_PLANETMALLETFX_6 = 626663260,
		PLAY_PL_GUITAR_01_INDEX_19_TUES_PLANETGTR_3 = 1299893599,
		PLAY_PL_GUITAR_01_INDEX_22_VOSTOK_BOWEDGTR_1 = 3831365145,
		PLAY_PL_GUITAR_01_INDEX_23_ECHO_PLANETGTRBED_9 = 3156630479,
		PLAY_PL_GUITAR_01_INDEX_25_DASHKA_JOEGTR_5 = 152461295,
		PLAY_PL_GUITAR_01_INDEX_26_MELB_PLANETGTR_3 = 2050966288,
		PLAY_PL_GUITAR_02_INDEX_02_ASIM_PLANET_MALLETGTR_BMIN_4 = 2851439297,
		PLAY_PL_GUITAR_02_INDEX_04_BLUEPRINT_GTRTEXTURE_EMIN_5 = 259776083,
		PLAY_PL_GUITAR_02_INDEX_22_VOSTOK_BOWEDGTRREV_18 = 1239261485,
		PLAY_PL_GUITAR_03_INDEX_02_ASIM_PLANET_MALLETGTRTWO_BMIN_2 = 1815063544,
		PLAY_PL_GUITAR_04_INDEX_02_ASIM_PLANET_JOEGTRWASHSOFT_BMIN_4 = 1731256341,
		PLAY_PL_GUITARDRONE_INDEX_01_DEPARTURE_GTR_EMIN_1 = 3840753179,
		PLAY_PL_GUITARDRONE_INDEX_08_DEPARTURE_GTR_EMIN_1 = 2185115432,
		PLAY_PL_GUITARFAST_INDEX_01_CELESTIAL_GTRLOOP_2 = 805925424,
		PLAY_PL_GUITARFAST_INDEX_08_CELESTIAL_GTRLOOP_3 = 1025492252,
		PLAY_PL_HIGHCELLO_INDEX_09_RIPLEY_CELLOHIGHER_1 = 2232746678,
		PLAY_PL_HIGHSYNTH_INDEX_08_CELESTIAL_HIGH_2 = 3025435844,
		PLAY_PL_HIGHSYNTH_INDEX_19_TUES_PLANETHIGH_2 = 4159173745,
		PLAY_PL_HIGHSYNTH_INDEX_20_TUNG_PLANET_PIANOHIGHINT_21 = 3932819286,
		PLAY_PL_HIGHSYNTH_INDEX_24_DOMO_PLANETHIGHINTEREST_2 = 297686181,
		PLAY_PL_HIGHSYNTH_INDEX_25_SCRAPER_PLANETGTRMELS_4 = 108415221,
		PLAY_PL_HIGHSYNTH_INDEX_27_OVERSEER_PLANETHIGHINTEREST_5 = 4020044181,
		PLAY_PL_MELODY_HI_INDEX_01_MONLITH_PLANET_PIANOMELVERB_1 = 3540468576,
		PLAY_PL_MELODY_HI_INDEX_02_ASIM_PLANETJUNO_BMIN_7 = 2798552724,
		PLAY_PL_MELODY_HI_INDEX_03_SM_PIANOHIGH_DMIN_5 = 2838209304,
		PLAY_PL_MELODY_HI_INDEX_05_REDPARA_CELESTA_9 = 2126566076,
		PLAY_PL_MELODY_HI_INDEX_06_EV_HIGHINTEREST_1 = 585835874,
		PLAY_PL_MELODY_HI_INDEX_10_TETSUO_PLANETHI_1 = 3025157699,
		PLAY_PL_MELODY_HI_INDEX_11_AKIRA_PLANETPIANO_1 = 3451467314,
		PLAY_PL_MELODY_HI_INDEX_13_LULL_PIANO_8 = 4135122428,
		PLAY_PL_MELODY_HI_INDEX_14_EOTWS_PIANOLOOP_4 = 3206962458,
		PLAY_PL_MELODY_HI_INDEX_15_HAUNTED_SHARKUPCLOSE_EMIN_7 = 3669413696,
		PLAY_PL_MELODY_HI_INDEX_16_MONOALT_REVPIANO_11 = 2116270751,
		PLAY_PL_MELODY_HI_INDEX_18_NMS2017_MODMELS_2 = 3502208466,
		PLAY_PL_MELODY_HI_INDEX_21_OCT_HIGHMEL_11 = 2107005141,
		PLAY_PL_MELODY_HI_INDEX_22_VOSTOK_PLANETHIGH_7 = 3763954971,
		PLAY_PL_MELODY_HI_INDEX_25_DASKA_PLANETHIGHINTEREST_12 = 4234615294,
		PLAY_PL_MELODY_HI_INDEX_27_OVERSEER_PLANETACOUSTIC_13 = 972489965,
		PLAY_PL_MELODY_HI_INDEX_28_SCRAPER_PLANETGTRMELS_7 = 1629727811,
		PLAY_PL_MELODY_INDEX_25_DASHKA_PLANETLOOPS_6 = 2439054922,
		PLAY_PL_MELODY_INDEX_28_SCRAPER_PLANETWEIRDARP_2 = 290164238,
		PLAY_PL_MUSICBOX_INDEX_01_MUSICBOXLONG_EMIN = 1556973833,
		PLAY_PL_MUSICBOX_INDEX_08_MUSICBOXLONG_EMIN = 2676308404,
		PLAY_PL_PIANO_INDEX_09_RIPLEY_PIANOHI_1 = 1471216650,
		PLAY_PL_PIANO_INDEX_11_AKIRA_PLANETPIANOREV_18 = 4146872444,
		PLAY_PL_PIANO_INDEX_12_ATWOOD_PIANO_5 = 1847814226,
		PLAY_PL_PIANO_INDEX_17_APORIA_PLANETSINEKEYS_2 = 2212582306,
		PLAY_PL_PIANO_INDEX_20_TUNG_PLANET_PIANO_2 = 512129911,
		PLAY_PL_PIANO_INDEX_22_VOSTOK_PLANETKEYS_19 = 4081904771,
		PLAY_PL_PIANO_INDEX_23_ECHO_PIANOHIGH_2 = 671813290,
		PLAY_PL_PIANO_INDEX_24_DOMO_PLANETBURN_3 = 3899933802,
		PLAY_PL_STRINGS_INDEX_09_RIPLEY_CELLO_1 = 1638884626,
		PLAY_PL_STRINGS_INDEX_17_APORIA_PLANETSOFTBED_2 = 2539644305,
		PLAY_PL_SYNTH_INDEX_01_CELESTIAL_MOD_1 = 3245606980,
		PLAY_PL_SYNTH_INDEX_05_REDPARA_SPACEFROST_AMIN_1 = 2341020961,
		PLAY_PL_SYNTH_INDEX_08_CELESTIAL_MOD_8 = 1882211360,
		PLAY_PL_SYNTH_INDEX_13_BEYOND_SLOWSYNTH_6 = 3084446878,
		PLAY_PL_SYNTH_INDEX_15_HAUNTED_DIGITALSHARK_EMIN_2 = 1208914976,
		PLAY_PL_SYNTH_INDEX_17_APORIA_PLANETREAMPTEXTURE_22 = 2241032768,
		PLAY_PL_SYNTH_INDEX_21_OCT_SLOWMEL_25 = 3004096831,
		PLAY_PL_SYNTH_INDEX_25_DASHKA_PLANETCOUNTER_314 = 1578551773,
		PLAY_PL_SYNTH_INDEX_26_MELB_PLANETBURNT_4 = 288763005,
		PLAY_PL_VOCAL_INDEX_10_TETSUO_VOXSOFT_1 = 433545354,
		PLAY_PL_VOX_INDEX_03_SM_VOX_DMIN_3 = 3601640217,
		PLAY_PL_VOX_INDEX_13_LULL_VOX_16 = 2335840534,
		PLAY_SP_ARP_HI_INDEX_01_MONOLITH_SPACE_ARP_GMIN_11 = 3257820699,
		PLAY_SP_ARP_HI_INDEX_02_ASIMOVARP_A1 = 4061942481,
		PLAY_SP_ARP_HI_INDEX_03_SUPERMOON_17 = 1323076246,
		PLAY_SP_ARP_HI_INDEX_04_BLUEPRINT_ARPEMIN_128BPM_3 = 865575101,
		PLAY_SP_ARP_HI_INDEX_05_REDPARA_SPACEARP_AMIN_7 = 121292172,
		PLAY_SP_ARP_HI_INDEX_07_ARPEOTWS_A11 = 1029083858,
		PLAY_SP_ARP_HI_INDEX_08_HUSK_7 = 2786353027,
		PLAY_SP_ARP_HI_INDEX_09_RIPLEY_12 = 2855205414,
		PLAY_SP_ARP_HI_INDEX_10_ARPTETSUO_B9 = 890066908,
		PLAY_SP_ARP_HI_INDEX_12_ATWOOD_10 = 3207920743,
		PLAY_SP_ARP_HI_INDEX_13_ARPBEYOND_A9 = 66715489,
		PLAY_SP_ARP_HI_INDEX_14_EOTWSALT_11 = 1119535793,
		PLAY_SP_ARP_HI_INDEX_15_MACREADY_4 = 374359247,
		PLAY_SP_ARP_HI_INDEX_16_MONOALT_7 = 579561383,
		PLAY_SP_ARP_HI_INDEX_21_OCT_ARPS_10 = 318987984,
		PLAY_SP_ARP_HI_INDEX_25_DASHKA_SPACEGTR_8 = 2128050728,
		PLAY_SP_BASS_INDEX_01_SPARKGROWLER_EMIN_4 = 3745907121,
		PLAY_SP_BASS_INDEX_02_SKANNERLOW_EMIN_4 = 3606894743,
		PLAY_SP_BASS_INDEX_07_EOTWS_REAMP_1 = 1738952747,
		PLAY_SP_BASS_INDEX_09_RIPLEY_SPACEBASS_EMIN_1 = 215196296,
		PLAY_SP_BASS_INDEX_17_APORIA_SPACEBASS_6 = 3035780867,
		PLAY_SP_BASS_INDEX_18_NMS2017_SPACEBASS_7 = 1781464191,
		PLAY_SP_BASS_INDEX_20_TUNG_SPACEBASS2 = 4007455586,
		PLAY_SP_BASS_INDEX_25_DASHKA_SPACEBASS_3 = 3573155061,
		PLAY_SP_BASS_INDEX_26_MELB_SPACELOWS_5 = 1678816486,
		PLAY_SP_BASS_INDEX_28_SCRAPER_SPACEROOTS_7 = 3110525856,
		PLAY_SP_CHORDS_INDEX_03_SM_CLUSTERKEYS_DMIN_2 = 68556826,
		PLAY_SP_CHORDS_INDEX_17_APORIA_SPACECHORDS_16 = 36045234,
		PLAY_SP_CHORDS_INDEX_18_NMS2017_SPACECHORDSYNTH_10 = 256887816,
		PLAY_SP_DRONE_01_INDEX_01_MONOLITH_WANTEDGTRDRONES_GMIN_3 = 1626013488,
		PLAY_SP_DRONE_01_INDEX_02_ASIM_KORGSPACESYNTH_BMIN_9 = 934104092,
		PLAY_SP_DRONE_01_INDEX_04_BLUEPRINT_MOPHODRONE_EMIN_4 = 3911126271,
		PLAY_SP_DRONE_01_INDEX_05_REDPARA_SPACEPULSE_AMIN_7 = 2778763669,
		PLAY_SP_DRONE_01_INDEX_06_EV_SPACEDRONEONE_ENEUTRAL_2 = 176633303,
		PLAY_SP_DRONE_01_INDEX_12_ATWOOD_DRONESUB_1 = 231389689,
		PLAY_SP_DRONE_01_INDEX_13_BEYOND_SPACEKORG_13 = 2621887011,
		PLAY_SP_DRONE_01_INDEX_16_MONOALT_SPACEDRONE_5 = 2863062915,
		PLAY_SP_DRONE_01_INDEX_20_TUNG_SPACEMODAL_14 = 456995189,
		PLAY_SP_DRONE_01_INDEX_22_VOSTOK_SPACETEXTURE_33 = 3033568150,
		PLAY_SP_DRONE_01_INDEX_24_DOMO_SPACEDRONE_15 = 2968314560,
		PLAY_SP_DRONE_01_INDEX_25_DASHKA_SPACEAMBIENCE_7 = 3301851785,
		PLAY_SP_DRONE_02_INDEX_06_EV_SPACEDRONETWO_ENEUTRAL_4 = 1970297818,
		PLAY_SP_DRONE_02_INDEX_22_VOSTOK_SPACEGRAIN_6 = 670464751,
		PLAY_SP_DRONE_03_INDEX_22_VOSTOK_LOW_2 = 290952825,
		PLAY_SP_FX_01_INDEX_02_BOWEDCYMBAL_CLEAN_22 = 3168157901,
		PLAY_SP_FX_01_INDEX_14_EOTWS2_SPACECHIME_1 = 4028909353,
		PLAY_SP_FX_01_INDEX_22_VOSTOK_ECHO_6 = 786384974,
		PLAY_SP_FX_01_INDEX_28_SCRAPER_VERBAMBIENCE_7 = 1836100471,
		PLAY_SP_GUITAR_INDEX_07_EOTWS_GTRCLEANNOTES_16 = 2866950636,
		PLAY_SP_GUITAR_INDEX_09_RIPLEY_SPACEGTRHI_1 = 3905121782,
		PLAY_SP_GUITAR_INDEX_21_OCT_SPACEGTR_31 = 165317463,
		PLAY_SP_HARP_INDEX_01_ASCENSION_HARP_3 = 2757506388,
		PLAY_SP_HARP_INDEX_08_ASCENSION_HARP_4 = 4047888064,
		PLAY_SP_LOWATMOS_INDEX_01_ASCENSION_LONGRISE_2 = 3060576940,
		PLAY_SP_LOWATMOS_INDEX_08_ASCENSION_LONGRISE_2 = 1764301815,
		PLAY_SP_MELODY_HI_INDEX_02_ASIM_SPACEDUDE_9 = 2464339904,
		PLAY_SP_MELODY_HI_INDEX_06_EV_SPACEPIANO_3_REV = 4242784146,
		PLAY_SP_MELODY_HI_INDEX_11_AKIRA_DULCECLUSTER_7 = 1200277777,
		PLAY_SP_MELODY_HI_INDEX_12_ATWOOD_SPACEHIGHINTEREST_2 = 4158441750,
		PLAY_SP_MELODY_HI_INDEX_13_BEYOND_HIGHMELODY_12 = 3656904909,
		PLAY_SP_MELODY_HI_INDEX_16_MONOALT_VIOLIN_2 = 1115819669,
		PLAY_SP_MELODY_HI_INDEX_19_TUES_SPACEHIGHONESHOTS_11 = 1767323249,
		PLAY_SP_MELODY_HI_INDEX_23_ECHO_SPACEHIGHINTERESTREV_1 = 147035401,
		PLAY_SP_MELODY_HI_INDEX_27_OVERSEER_SPACEHIGHINTEREST_10 = 2598359622,
		PLAY_SP_MELODY_INDEX_01_ASCENSION_ELEKTRIK_EMIN_1 = 1437448673,
		PLAY_SP_MELODY_INDEX_03_SM_JUNOCHORDS_DMIN_18 = 763919093,
		PLAY_SP_MELODY_INDEX_04_BLUEPRINT_ORGANSCATTER_EMIN_10 = 801292362,
		PLAY_SP_MELODY_INDEX_08_ASCENSION_ELEKTRIK_EMIN_1 = 3230263864,
		PLAY_SP_MELODY_INDEX_11_AKIRA_SPACEORGAN_15 = 2506964256,
		PLAY_SP_MELODY_INDEX_15_MAC_SPACEPADS_4 = 1156188012,
		PLAY_SP_MELODY_INDEX_19_TUES_MUSICBOX_12 = 3738192585,
		PLAY_SP_MELODY_INDEX_23_ECHO_SPACETHUD_19 = 3666107162,
		PLAY_SP_MELODY_INDEX_26_MELB_SPACEMELS_3 = 3340502265,
		PLAY_SP_MISC_HI_INDEX_01_MONOLITH_MISC_GMIN_1 = 1563413319,
		PLAY_SP_MISC_HI_INDEX_20_TUNG_SPACEHIGHINTEREST_13 = 154854099,
		PLAY_SP_MISC_HI_INDEX_22_VOSTOK_SPACEHIGHINT_60 = 2169191362,
		PLAY_SP_MISC_HI_INDEX_23_ECHO_WANTEDCELESTA_3 = 4287225002,
		PLAY_SP_MISC_HI_INDEX_24_DOMO_SPACEHIGHINTEREST_9 = 699090183,
		PLAY_SP_SYNTH_INDEX_01_ASCENSION_SYNTHSTAB_6 = 3902029433,
		PLAY_SP_SYNTH_INDEX_08_ASCENSION_SYNTHSTAB_9 = 3601458763,
		PLAY_SP_SYNTH_INDEX_11_AKIRA_SPACESYNTH_9 = 3500246388,
		PLAY_SP_SYNTH_INDEX_13_BEYOND_SLOWSYNTH_6 = 496248595,
		PLAY_SP_SYNTH_INDEX_14_EOTWS2_SPACESTABS_5 = 2810302312,
		PLAY_SP_SYNTH_INDEX_19_TUES_JUNO_6 = 4204259326,
		PLAY_SP_SYNTH_INDEX_21_OCT_SPACEKEYS_14 = 4267863481,
		PLAY_SP_SYNTH_INDEX_22_VOSTOK_ECHOREV_7 = 3570543724,
		PLAY_SP_SYNTH_INDEX_23_ECHO_SPACEPOLY_7 = 4206230308,
		PLAY_SP_SYNTH_INDEX_24_DOMO_SPACEARP_22 = 2727312055,
		PLAY_SP_SYNTH_INDEX_27_OVERSEER_SPACESYNTH_6 = 1536842869,
		PLAY_SP_SYNTHHIGH_INDEX_10_TETSUO_MOPHOHIGHINTEREST_1 = 2918800504,
		PLAY_SP_SYNTHHIGH_INDEX_13_BEYOND_HIGHMELODY_14 = 2830567039,
		PLAY_SP_SYNTHHIGH_INDEX_17_APORIA_SPACE_HIGHINTEREST_3 = 969213273,
		PLAY_SP_SYNTHHIGH_INDEX_26_MELB_SPACEHIGHINTEREST6 = 2608278348,
		PLAY_SP_SYNTHHIGH_INDEX_28_SCRAPER_SPACEARPS_5 = 119921096,
		PLAY_SP_SYNTHINTERFERENCE_INDEX_10_TETSUO_SPACEHIGHINTEREST_1 = 1888655209,
		PLAY_SP_SYNTHPADS_INDEX_10_TETSUO_SPACEPADS_17 = 53427294,
		PLAY_SP_SYNTHPADS_INDEX_14_EOTWS2_SPACEPADS_3 = 1694216399,
		PLAY_SP_SYNTHPADS_INDEX_27_OVERSEER_SPACEDRIFTS_10 = 1095772158,
		PLAY_VO_WARNINGDRONE_ACTIVATED = 2976777968,
		PLAY_VO_WARNINGDRONE_COMBAT = 2816386511,
		PLAY_VO_WARNINGDRONE_ENGAGED = 3437182990,
		PLAY_VO_WARNINGSENTINELELITE = 808375119,
		PLAY_VO_WARNINGSENTINELINCOMING = 1467584186,
		PLAY_VO_WARNINGWALKER = 1932832400,
		PLAY_WT_ARP_INDEX_05_REDPARA_SPACEARP_AMIN_3 = 3903585956,
		PLAY_WT_ARP_INDEX_06_EV_WANTEDARPS_4 = 687937090,
		PLAY_WT_ARP_INDEX_08_MONOLITH_SPACE_ARP_GMIN_4 = 2042481618,
		PLAY_WT_ARP_INDEX_17_APORIA_WANTEDARPS_1 = 2171259124,
		PLAY_WT_ARP_INDEX_19_TUES_WANTEDARP_2 = 815167967,
		PLAY_WT_ARP_INDEX_23_ECHO_WANTEDCELESTA_3 = 3660900695,
		PLAY_WT_BASS_INDEX_02_SKANNERLOW_EMIN_1 = 3462907642,
		PLAY_WT_BASS_INDEX_03_SM_WANTED_BASSSEQ_118BPM_DMIN_2 = 4115586420,
		PLAY_WT_BASS_INDEX_08_MONOLITH_WANTED_SYNTHLOW_1 = 381587121,
		PLAY_WT_BASS_INDEX_20_TUNG_PLANET_PIANOLOWINT2 = 3901995434,
		PLAY_WT_BASS_INDEX_22_VOSTOK_WANTEDSTABS_3 = 2174492689,
		PLAY_WT_BASS_INDEX_25_DASHKA_WANTEDBASSSYNTH_5 = 1389552814,
		PLAY_WT_BASS_INDEX_26_MELB_PLANETBASS_2 = 1028898275,
		PLAY_WT_BASS_INDEX_27_OVERSEER_WANTEDBASS_2 = 535467764,
		PLAY_WT_DRONE_02_INDEX_08_DEPARTURE_NOISE_EMIN_1 = 2101320039,
		PLAY_WT_DRONE_02_INDEX_09_RIPLEY_GRAIN__1 = 762929575,
		PLAY_WT_DRONE_INDEX_03_DEPARTURE_GTR_EMIN_9 = 1830718450,
		PLAY_WT_DRONE_INDEX_04_DEPARTURE_NOISE_EMIN_5 = 3543813370,
		PLAY_WT_DRONE_INDEX_07_EOTWS_GRAINSPACE_1 = 3638589302,
		PLAY_WT_DRONE_INDEX_08_BOREALIS_GTRFEEDBACK_AMIN_1 = 2102683001,
		PLAY_WT_DRONE_INDEX_09_SM_ATMOS_DMIN_1 = 3922581774,
		PLAY_WT_DRONE_INDEX_10_TETSUO_GRAINSPACE_1 = 2913040954,
		PLAY_WT_DRONE_INDEX_11_AKIRA_PLANETGRAIN_17 = 1789593018,
		PLAY_WT_DRONE_INDEX_12_ATWOOD_DRONEGTR_16 = 2451145538,
		PLAY_WT_DRONE_INDEX_14_DEPARTURE_GTR_EMIN_1 = 3271330686,
		PLAY_WT_DRONE_INDEX_15_MAC_MAINPADSFULL_CSHARP_MIN_2 = 247783589,
		PLAY_WT_DRONE_INDEX_16_MONOALT_GRAIN_10 = 925990122,
		PLAY_WT_DRONE_INDEX_22_VOSTOK_ECHOREV_7 = 1698008700,
		PLAY_WT_DRONE_INDEX_24_DOMO_WANTEDBACKGROUND_2 = 3986737055,
		PLAY_WT_DRUMS_INDEX_01_MONOLITH_WANTED_DRUMLOOPS_20 = 2540424258,
		PLAY_WT_DRUMS_INDEX_02_ASIM_DRUMSDIRTY_128BPM_6 = 3523044906,
		PLAY_WT_DRUMS_INDEX_03_SM_WANTED_DRUMLOOPS_15 = 2796988808,
		PLAY_WT_DRUMS_INDEX_04_BLUEPRINT_DRMSGLITCHYBEATS_128BPM_5 = 3586954620,
		PLAY_WT_DRUMS_INDEX_05_REDPARA_WANTEDDRUMLOOPS_1 = 2293835967,
		PLAY_WT_DRUMS_INDEX_06_EV_DRUMLOOPS_138BPM_9 = 1071383,
		PLAY_WT_DRUMS_INDEX_07_EOTWS_WANTEDBEATS_1 = 223065998,
		PLAY_WT_DRUMS_INDEX_08_HUSKWANTEDBEATS11 = 3047651065,
		PLAY_WT_DRUMS_INDEX_09_RIPLEY_DRUMLOOPS_120BPM_1 = 4288704429,
		PLAY_WT_DRUMS_INDEX_10_TETSUO_DRUMLOOPS_1 = 3373906461,
		PLAY_WT_DRUMS_INDEX_11_AKIRAWANTEDBEATS3 = 3005214281,
		PLAY_WT_DRUMS_INDEX_12_ATWOOD_WANTEDARPBEATS_24 = 3032050364,
		PLAY_WT_DRUMS_INDEX_13_BEYONDTOMORROW1 = 1367908627,
		PLAY_WT_DRUMS_INDEX_14_EOTWS_WANTEDDRUMS_2 = 2597203141,
		PLAY_WT_DRUMS_INDEX_15_MAC_DRUMLOOP_5 = 1673345798,
		PLAY_WT_DRUMS_INDEX_16_MONOALT_WANTEDLOOPS_8 = 3271557999,
		PLAY_WT_DRUMS_INDEX_17_APORIA_WANTEDBEATS_2 = 509480090,
		PLAY_WT_DRUMS_INDEX_18_NMS2017_WANTEDSYNTHBEATS_1 = 2578763048,
		PLAY_WT_DRUMS_INDEX_19_TUES_WANTEDBEATS4 = 2886905344,
		PLAY_WT_DRUMS_INDEX_20_TUNG_WANTEDBEATS_3 = 3982631043,
		PLAY_WT_DRUMS_INDEX_21_OCT_WANTEDBEATS_1 = 1938498382,
		PLAY_WT_DRUMS_INDEX_22_VOSTOK_WANTEDDRUMS_2 = 1743004274,
		PLAY_WT_DRUMS_INDEX_23_ECHO_WANTEDLOOPS_2 = 1869844574,
		PLAY_WT_DRUMS_INDEX_24_DOMO_WANTEDDRUMS_3 = 3225074748,
		PLAY_WT_DRUMS_INDEX_25_DASHKA_WANTEDBEATS_3 = 822494656,
		PLAY_WT_DRUMS_INDEX_26_MELB_WANTEDBEATS_6 = 2429661520,
		PLAY_WT_DRUMS_INDEX_27_OVERSEER_WANTEDDRUMS_6 = 332577596,
		PLAY_WT_DRUMS_INDEX_28_SCRAPER_WANTEDBEATS_8 = 16089482,
		PLAY_WT_FX_01_INDEX_03_SM_ATMOS_DMIN_5 = 3011401550,
		PLAY_WT_FX_01_INDEX_04_BLUEPRINT_MOPHOSTUTTER_EMIN_4 = 1799728648,
		PLAY_WT_FX_01_INDEX_17_APORIA_SPACEBOWS_49 = 2489436955,
		PLAY_WT_FX_01_INDEX_19_TUES_SONIC_2 = 2509018552,
		PLAY_WT_FX_01_INDEX_25_DASHKA_WANTEDNOISE_5 = 713871256,
		PLAY_WT_GUITAR_INDEX_02_ASIM_JOEGTRLOUD_BMIN_18 = 51768442,
		PLAY_WT_GUITAR_INDEX_04_BLUEPRINT_GTRBUILD_EMIN_9 = 4264406116,
		PLAY_WT_GUITAR_INDEX_05_REDPARA_GTRTREM_9 = 4077834583,
		PLAY_WT_GUITAR_INDEX_10_TETSUO_GTR1 = 1043990553,
		PLAY_WT_GUITAR_INDEX_15_MAC_GTRMEL_2 = 3163131119,
		PLAY_WT_GUITAR_INDEX_17_APORIA_WANTEDSTABS_1 = 757407008,
		PLAY_WT_GUITAR_INDEX_18_NMS2017_EBOWGTR_5 = 4220221827,
		PLAY_WT_GUITAR_INDEX_19_TUES_WANTEDGTR_3 = 3043716285,
		PLAY_WT_GUITAR_INDEX_20_TUNG_WANTEDGTRS_5 = 3122446025,
		PLAY_WT_GUITAR_INDEX_21_OCT_WANTEDGTR_32 = 2216784749,
		PLAY_WT_GUITAR_INDEX_23_ECHO_WANTEDGTRS_1 = 464614527,
		PLAY_WT_GUITAR_INDEX_26_MELB_PLANETGTR_2 = 2935906234,
		PLAY_WT_GUITAR_INDEX_27_OVERSEER_WANTEDGTR_7 = 124980078,
		PLAY_WT_GUITARS_02_INDEX_04_BLUEPRINT_GTREND_EMIN_6 = 947831786,
		PLAY_WT_GUITARS_02_INDEX_05_REDPARA_EBOWDRONE_5 = 632942917,
		PLAY_WT_GUITARS_02_INDEX_17_APORIA_WANTEDGTRS_1 = 198676045,
		PLAY_WT_GUITARS_02_INDEX_20_TUNG_WANTEDBASS_3 = 2086797210,
		PLAY_WT_GUITARS_02_INDEX_26_MELB_DIST_2 = 2620286753,
		PLAY_WT_MELODY_INDEX_03_SM_JOEGTRBURTS_DMIN_19 = 1111964372,
		PLAY_WT_MELODY_INDEX_04_KOAECAX_SLOWSYNTH_2 = 5990982,
		PLAY_WT_MELODY_INDEX_06_EV_PIANOWANTED_AMIN_12 = 371871443,
		PLAY_WT_MELODY_INDEX_07_EOTWS_PLANETHIINTEREST_1 = 905937072,
		PLAY_WT_MELODY_INDEX_12_ATWOOD_CRACKLE_5 = 3442611096,
		PLAY_WT_MELODY_INDEX_18_NMS2017_WANTEDLOOPS_3 = 379672213,
		PLAY_WT_MELODY_INDEX_21_OCT_WANTEDMELS_4 = 3107795080,
		PLAY_WT_MELODY_INDEX_23_ECHO_SPACEHIGHINTEREST_1 = 29848260,
		PLAY_WT_MELODY_INDEX_24_DOMO_WANTEDMELS_1 = 4142586611,
		PLAY_WT_MELODY_INDEX_25_DASHKA_SPACEPIANO_6 = 3096393545,
		PLAY_WT_MELODY_INDEX_27_OVERSEER_WANTEDMELS_4 = 2231062661,
		PLAY_WT_MELODY_INDEX_28_SCRAPER_WANTEDMELS_10 = 1106905062,
		PLAY_WT_NOISE_INDEX_01_MONOLITH_WANTED_NOISEONESHOTS_2 = 132903593,
		PLAY_WT_ONESHOTS_INDEX_01_MONOLITH_WANTED_FASTONESHOTS_13 = 641006944,
		PLAY_WT_ONESHOTS_INDEX_03_TOMORROW_FM_CHOPPED_5 = 1995099564,
		PLAY_WT_ONESHOTS_INDEX_04_BLUEPRINT_JOESTUTTER_EMIN_11 = 2965534666,
		PLAY_WT_ONESHOTS_INDEX_05_REDPARA_WANTEDSONGONESHOT_2 = 2159036964,
		PLAY_WT_ONESHOTS_INDEX_11_BLUEPRINT_GTREND_EMIN_5 = 1890245284,
		PLAY_WT_ONESHOTS_INDEX_14_EOTWS_WANTEDBURN_4 = 1933445445,
		PLAY_WT_ONESHOTS_INDEX_17_APORIA_PLANETSTABS_37 = 1356286117,
		PLAY_WT_ONESHOTS_INDEX_20_TUNG_SPACEHIGHINTEREST_16 = 4096620077,
		PLAY_WT_ORGAN_INDEX_06_EV_ORGANWANTED_AMIN_4 = 3639238911,
		PLAY_WT_PADS_INDEX_04_BLUEPRINT_INTROPADS_EMIN_48 = 2417063694,
		PLAY_WT_PADS_INDEX_13_BEYOND_WANTEDPADS_6 = 3297803837,
		PLAY_WT_SYNTH_INDEX_17_APORIA_SPACECHORDS_1 = 2046073511,
		PLAY_WT_SYNTH_INDEX_20_TUNG_SPACEMODAL_2 = 4051696474,
		PLAY_WT_SYNTH_INDEX_26_MELB_WANTEDKEYS_5 = 2244231755,
		PLAYER_DIE = 1542330065,
		PLAYER_DIE_SURFACE = 1048639253,
		PLAYER_ORB = 1157180176,
		PLAYER_SHIP_TRANSITION = 1278267371,
		PLAYER_WATER_TRANSITION_INTO_ATMOS = 3534087874,
		PLAYER_WATER_TRANSITION_INTO_WATER = 282747473,
		PLOUGH = 1944056996,
		POD_BEAT = 1540885285,
		POD_BURST = 2536627301,
		POD_SHAKE = 3522626797,
		POI_ASTEROID_BEACON = 1577606680,
		POI_ATLAS_BEACON_01 = 551943340,
		POI_ATLAS_BEACON_02 = 551943343,
		POI_BONES = 3560744339,
		POI_CRYSTALS = 859711595,
		POI_CUBE_STATION = 3231709240,
		POI_DERELICT_01 = 631327698,
		POI_DERELICT_02 = 631327697,
		POI_DERELICT_03 = 631327696,
		POI_EYE = 3305341845,
		POI_EYE_BEAM_END = 2241045207,
		POI_EYE_BEAM_LP = 1387207012,
		POI_GAS_BRAIN = 2706943988,
		POI_GEKHEAD = 3165270075,
		POI_GYRO_BALL = 2410364041,
		POI_HORROR = 4091138034,
		POI_JELLYFISH = 1958545432,
		POI_JELLYFISH_SPACE_SWIM = 2883272550,
		POI_LINE_GEO = 527001218,
		POI_MEMORYLIFEBOAT_FLARE = 1814221006,
		POI_MEMORYLIFEBOAT_IDLE = 1440055604,
		POI_NEURON = 994955047,
		POI_RADIO_PILLAR = 1691095874,
		POI_RELAYBEACON = 461236281,
		POI_RELICGATE = 1675951782,
		POI_SPACE_EGG = 2554222458,
		POI_SPACECLOCK = 955198338,
		POI_SPINNER = 4056555781,
		POI_WEIRD_METAL = 4281289809,
		POLICE_CHATTER_START = 570698736,
		POLICE_CHATTER_STOP = 2256887644,
		POLICE_INCOMING = 3808275034,
		PORTAL_ACTIVATE_NORMAL = 3360645137,
		PORTAL_CAMERA_TOTERMINAL = 1290934733,
		PORTAL_CORRUPTED_AMBIENT_LP = 3460628878,
		PORTAL_CORRUPTED_AWAKEN = 3947792144,
		PORTAL_CORRUPTED_RUMBLE_BUILD = 3073565511,
		PORTAL_CORRUPTED_RUMBLE_LP = 2734753225,
		PORTAL_CORRUPTED_STOP = 1387433489,
		PORTAL_DIAL_SPIN_START = 2594292902,
		PORTAL_DIAL_SPIN_STOP = 4164019174,
		PORTAL_EXPLOSION = 3100297435,
		PORTAL_JUMP_NORMAL_END = 548019122,
		PORTAL_JUMP_NORMAL_END_AMBIENCES = 1729349860,
		PORTAL_JUMP_NORMAL_START = 3820363409,
		PORTAL_JUMP_STORY_END = 526888118,
		PORTAL_JUMP_STORY_START = 2695577501,
		PORTAL_PILLARSATTACH = 2012126694,
		PORTAL_PILLARSDETACH = 737286440,
		PORTAL_PILLARSLOCK = 1267518560,
		PORTAL_PILLARSUNLOCK = 2153823061,
		PORTAL_RUNE_SELECT = 1123182233,
		PORTAL_RUNE_UNAVAILABLE = 1048695189,
		PORTAL_RUNES_APPEAR = 690403667,
		PORTAL_STOP_ALL = 1286595626,
		PORTAL_TERMINAL_CLOSE = 2900944611,
		PORTAL_TERMINAL_OPEN = 123759573,
		PORTAL_WEIRD_BUILDUP = 3508454847,
		POWER_SWITCH_AUTOSWITCH_OFF = 837237653,
		POWER_SWITCH_AUTOSWITCH_ON = 2046941225,
		POWER_SWITCH_BUTTON_OFF = 244684404,
		POWER_SWITCH_BUTTON_ON = 3177620718,
		POWER_SWITCH_FLOOR_OFF = 2284693082,
		POWER_SWITCH_FLOOR_ON = 1281070684,
		POWER_SWITCH_PROXIMITY_OFF = 2770143255,
		POWER_SWITCH_PROXIMITY_ON = 950935651,
		POWERMODULE_NOTE_A = 1714182503,
		POWERMODULE_NOTE_A_STOP = 1716228386,
		POWERMODULE_NOTE_B = 1714182500,
		POWERMODULE_NOTE_B_STOP = 440299395,
		POWERMODULE_NOTE_C = 1714182501,
		POWERMODULE_NOTE_C_STOP = 1005232808,
		POWERMODULE_NOTE_D = 1714182498,
		POWERMODULE_NOTE_D_STOP = 968312097,
		POWERMODULE_NOTE_E = 1714182499,
		POWERMODULE_NOTE_E_STOP = 1573542158,
		POWERMODULE_NOTE_F = 1714182496,
		POWERMODULE_NOTE_F_STOP = 3634175311,
		POWERMODULE_NOTE_G = 1714182497,
		POWERMODULE_NOTE_G_STOP = 13904740,
		PROTOROLLER = 2566437297,
		PROTOROLLER_STOP = 3300685012,
		PS5_VIBRATION_TONE = 3479050115,
		PS5_VIBRATION_TONE_STOP = 2479885806,
		PULSE_EMPHASISER = 583987252,
		QUAD_ATTACK = 2379114231,
		QUAD_CROUCHTOSTAND = 2677755542,
		QUAD_DIE = 2644811907,
		QUAD_EMOTE_LP = 1646266224,
		QUAD_EMOTE_LP_STOP = 4190679167,
		QUAD_EVADE = 4159430602,
		QUAD_GUN = 3114732543,
		QUAD_HOP = 3214559584,
		QUAD_IDLE = 2937386393,
		QUAD_LASER = 3328691260,
		QUAD_LASER_STOP = 1220331979,
		QUAD_POUNCE = 1294057325,
		QUAD_POUNCE_BACK = 3406344785,
		QUAD_POUNCE_FORWARD = 1973492231,
		QUAD_SCAN = 3358222432,
		QUAD_SCAN_STOP = 3159067215,
		QUAD_STEP = 2886624525,
		QUAD_TONE = 2684000083,
		RACING_DOME_NOTIFIER = 1920540000,
		RADIO_CHATTER = 2120624028,
		RADIO_CHATTER_STOP = 1725914731,
		RECIPE_RECEIVE = 3688357373,
		RESOURCE_GATHER = 2251504665,
		RIVER = 3605787649,
		ROBOT_GUNMELEE_IMPACTS = 1144432308,
		ROBOT_LASER_IMPACTS = 1238539687,
		ROBOT_METAL_IMPACTS = 225804991,
		ROBOT_NARRATION_SINGALONG = 2344326313,
		ROBOT_NARRATION_SINGALONG_STOP = 3466138780,
		ROBOT_SHIP_TALK = 2337036937,
		ROBOT_SHIP_TALK_STOP = 1881877820,
		ROCKCREATURE_TRANSFORM = 1310991260,
		RODENTATTACK1 = 219682336,
		RODENTATTACK2 = 219682339,
		RODENTATTACK3 = 219682338,
		RODENTPOUNCE = 3976265745,
		RODENTPOUNCE2 = 697506545,
		RODENTROAR = 4258467331,
		ROLLER = 4054296493,
		ROUNDTABLE_CLOSE = 3053565700,
		ROUNDTABLE_OPEN = 3554107392,
		ROVER_BOOST_START = 3526012810,
		ROVER_BOOST_STOP = 1767900130,
		ROVER_HORN_START = 1299366960,
		ROVER_HORN_STOP = 135191452,
		ROVER_IDLE_EXTERIOR = 3441063321,
		ROVER_IMPACTS = 4197774095,
		ROVER_JUMP = 2301006026,
		ROVER_START = 3960568722,
		ROVER_STOP = 3215405642,
		ROVER_SUSPENSION = 1935935285,
		RUININTERACTION_ACTIVE = 2322525926,
		RUININTERACTION_END = 1654540399,
		RUININTERACTION_IDLE = 2260859310,
		SANDWORM_INTOGROUND = 2251455322,
		SANDWORM_LP = 1848982545,
		SANDWORM_LP_STOP = 2865278324,
		SANDWORM_OUTOFGROUND = 3841881461,
		SANDWORM_UNDERGROUND_WAIL_LP = 2995948895,
		SC_TR_HARV = 842321922,
		SCAN_OFF = 1895681704,
		SCAN_ON = 2149772978,
		SCRAP_DESTROY = 2396188467,
		SEAHORSE_SWIM = 2286696,
		SEAURCHINCLOSE = 967767057,
		SEAURCHINEXTEND = 2047101075,
		SENTINEL_CRYSTAL = 3531027850,
		SENTINEL_CRYSTAL_SMALL = 4011512006,
		SENTINEL_HIVE_LP = 2857828625,
		SENTINEL_HIVE_NODE = 294290669,
		SENTINEL_HIVE_TERMINAL = 324186281,
		SENTINEL_MECH_JUMP = 3563701918,
		SENTINEL_MECH_LAND = 1626353097,
		SENTINEL_MECH_WPN_FIRE = 591770082,
		SENTINEL_MECH_WPN_FIRE_STOP = 118566561,
		SENTINEL_MECH_WPN_GRENADE = 3975516232,
		SENTINEL_MECH_WPN_GUN = 4154493600,
		SENTINELS_INCOMING1 = 1482865360,
		SENTINELS_INCOMING2 = 1482865363,
		SENTINELS_INCOMING3 = 1482865362,
		SENTINELS_INCOMING4 = 1482865365,
		SENTINELS_INCOMING5 = 1482865364,
		SENTINENCEECHO_REVEAL = 180910584,
		SETTLEMENT_ALARM = 966847506,
		SETTLEMENT_ALARM_SHIP = 2648944667,
		SETTLEMENT_ANTENNA = 1960970972,
		SETTLEMENT_ANTENNA0 = 3688306788,
		SETTLEMENT_ANTENNA1 = 3688306789,
		SETTLEMENT_ANTENNA2 = 3688306790,
		SETTLEMENT_ANTENNA3_LOOP = 2129238684,
		SETTLEMENT_ANTENNA3_SPIN = 492753242,
		SETTLEMENT_CONSTRUCTION_TERMINAL = 1218563483,
		SETTLEMENT_FURNACE = 582422645,
		SETTLEMENT_GENERATOR = 2098320458,
		SETTLEMENT_GLOWGLOBE = 254379439,
		SETTLEMENT_LIGHTOUTDOOR = 2355899779,
		SETTLEMENT_MEDIBAY_LP = 4022718587,
		SETTLEMENT_PUMP = 3270980965,
		SETTLEMENT_ROBOTARM = 207414385,
		SETTLEMENT_TERMINAL = 3177730335,
		SETTLEMENT_WATERTOWER = 319911827,
		SFX_FADEDOWN = 3983193067,
		SFX_FADEUP = 1911123884,
		SHARK_LP = 682654775,
		SHIP_ALIEN_LANDING = 1324829291,
		SHIP_ALIEN_NOSTRILFLARE = 1660970061,
		SHIP_ALIEN_TAKEOFF = 221805542,
		SHIP_NORMANDY_ENGINES = 1652446832,
		SHIP_NORMANDY_REVEAL = 2213475144,
		SHIP_PIRATE_LANDING_WINGS = 1307028832,
		SHIP_PIRATE_SAILS_ROUNDSAILS_FOLD = 3164352659,
		SHIP_PIRATE_SAILS_ROUNDSAILS_UNFOLD = 790642474,
		SHIP_PIRATE_SAILS_SQUARE_FOLD = 2329808098,
		SHIP_PIRATE_SAILS_SQUARE_UNFOLD = 149909671,
		SHIP_PIRATE_SAILS_TRIANGLE_FOLD = 2528284669,
		SHIP_PIRATE_SAILS_TRIANGLE_UNFOLD = 442931416,
		SHIP_PIRATE_TAKEOFF_WINGS = 2197480917,
		SHIP_ROYAL_ENGINEC_LANDING = 2745991531,
		SHIP_ROYAL_ENGINEC_TAKEOFF = 1642967782,
		SHIP_ROYAL_LANDINGGEAR_LANDING = 1585841874,
		SHIP_ROYAL_LANDINGGEAR_TAKEOFF = 1101552643,
		SHIP_ROYAL_WINGSA_LANDING = 1356864679,
		SHIP_ROYAL_WINGSA_TAKEOFF = 3162439074,
		SHIP_ROYAL_WINGSB_LANDING = 1341704276,
		SHIP_ROYAL_WINGSB_TAKEOFF = 3382074657,
		SHIP_ROYAL_WINGSC_LANDING = 2597010733,
		SHIP_ROYAL_WINGSC_TAKEOFF = 3158279828,
		SHIP_SQUID_LANDINGGEAR_LANDING = 2813396705,
		SHIP_SQUID_LANDINGGEAR_TAKEOFF = 3839530168,
		SHIP_SQUID_NOSE_LANDING = 213968194,
		SHIP_SQUID_NOSE_TAKEOFF = 3807021139,
		SHIP_TOUCHDOWN_IMPACT = 4032126704,
		SHIPREPAIR_IDLE = 751951229,
		SHORELINE = 27371874,
		SHUTTLE_CLOSE = 2821071217,
		SHUTTLE_MAINTHRUSTER = 2344195895,
		SHUTTLE_OPEN = 3626448883,
		SHUTTLE_THRUSTERS_STOP = 1645327086,
		SHUTTLE_TOPTHRUSTER = 1609123203,
		SIGNALSCANNER = 806234925,
		SILO_LOOSECLOTH = 1206605935,
		SIXLEGCATPERFORM01 = 3519706211,
		SIXLEGGEDCOWPERFORM01 = 4195558370,
		SLIMEDOOR_BREAKA = 719481504,
		SLIMEDOOR_BREAKB = 719481507,
		SLIMEDOOR_BREAKC = 719481506,
		SLIMEDOOR_BREAKD = 719481509,
		SMALLPROPC = 2418514844,
		SPACE_STATION_EXTERIOR = 299327257,
		SPACE_STATION_INTERIOR_01 = 3524134059,
		SPACE_STATION_INTERIOR_01_STOP = 3862706406,
		SPACESTATION_ATLAS_DOOR_CLOSE = 4089232747,
		SPACESTATION_ATLAS_DOOR_OPEN = 291412141,
		SPACESTATION_ENGINES_INTERIOR = 1882835862,
		SPACESTATION_PLANET_HOLOGRAM = 1758701798,
		SPARKS = 2439012415,
		SPGEK_CHATTER = 177551289,
		SPGEK_CHATTER_STOP = 1850573900,
		SPIDERATTACK = 1083233890,
		SPIDERATTACK2 = 100760692,
		SPIDERATTACK3 = 100760693,
		SPIDERFLOATSAD = 4035071540,
		SPIDERPERFORM01 = 3073496632,
		SPIDERPOUNCE = 1563940176,
		SPIDERROAR = 1897433086,
		SPKORVAX_CHATTER = 670047555,
		SPKORVAX_CHATTER_STOP = 3224180142,
		SPOOKHEATER_IDLE = 3104408719,
		SPOOKHEATER_LP = 786723625,
		SPOOKHEATER_START = 1684017255,
		SPOOKYTENTACLES = 1798864599,
		SPOOKYTENTACLES_STOP = 4050532722,
		SPORE = 287737412,
		SPOREBAG_IDLE = 4157250455,
		SPOREBAG_WOBBLE = 1520474518,
		SPOREBAGEXPLODE = 1662669133,
		SPOREVENT_IDLE = 1502432274,
		SPOREVENT_INFLATE = 2453750081,
		SPVYKEEN_CHATTER = 460833812,
		SPVYKEEN_CHATTER_STOP = 650402323,
		STARSHIP_OUTFITTING_LP = 4082362318,
		STARSHIP_VIEW_SWITCH_EXTERIOR = 254916497,
		STARSHIP_VIEW_SWITCH_INTERIOR = 1387569711,
		STATION_CONSOLE_SWITCH = 2631526756,
		STATIONB_CRANELOADCARGO_FR1 = 4115657195,
		STATIONB_CRANELOADCARGO_FR446 = 3807482764,
		STATIONB_ORB_IDLE = 505648450,
		STATIONB_ORB_LOOM = 3727923755,
		STATIONB_ORB_RETRACT = 2712203811,
		STATIONB_ORB_ZOOM = 2615748917,
		STING_LOGO = 3995851678,
		STONE_DOOR1_SETTLEMENT_CLOSE = 3128248579,
		STONE_DOOR1_SETTLEMENT_OPEN = 639879541,
		STONEFLOATER_CORE_EXPLODE = 1633103673,
		STONEFLOATER_LEFT_RIGHT_THROW = 1499603803,
		STONEFLOATER_MELEE = 2233207830,
		STONEFLOATER_SPAWN = 2362813131,
		STONEFLOATER_SPIN = 876491334,
		STONEFLOATER_THROW = 3372862510,
		STOP_MAP_CENTRECHORD_01_INDEX_01_MAP_CENTRECHORD_01 = 609003312,
		STOP_MAP_CENTRECHORD_02_INDEX_01_MAP_CENTRECHORD_02 = 2810844184,
		STOP_MAP_DRONENOISE_01_INDEX_01_MAP_SPACE_NOISE_DRONE = 1411731682,
		STOP_MAP_DRONENOISE_02_INDEX_01_MAP_SPACE_NOISE_DRONE_RR = 159584654,
		STOP_MAP_DRONETONE_01_INDEX_01_MUS_MAP1_DRONE_E = 949166737,
		STOP_MAP_PIANO_INDEX_01_MUS_MAP01_PIANO_01 = 1858104029,
		STOP_MAP_SINGLES_01_INDEX_01_MUS_MAP01_SINGLES1_04 = 3605227175,
		STOP_MAP_SINGLES_02_INDEX_01_MUS_MAP01_SINGLES2_09 = 3642758646,
		STOP_MAP_ZONE01_INDEX_01_MAP_ZONE01 = 418962276,
		STOP_MAP_ZONE02_INDEX_01_MAP_ZONE02 = 1420385216,
		STOP_SP_ARP_HI_INDEX_02_ASIMOVARP_A1 = 1702590803,
		STOP_SP_ARP_HI_INDEX_03_SUPERMOON_17 = 3235806432,
		STOP_SP_ARP_HI_INDEX_04_BLUEPRINT_ARPEMIN_128BPM_3 = 2924318635,
		STOP_SP_ARP_HI_INDEX_05_REDPARA_SPACEARP_AMIN_7 = 1601868466,
		STOP_SP_ARP_HI_INDEX_07_ARPEOTWS_A11 = 934366420,
		STOP_SP_ARP_HI_INDEX_08_HUSK_7 = 1162206253,
		STOP_SP_ARP_HI_INDEX_09_RIPLEY_12 = 3433850568,
		STOP_SP_ARP_HI_INDEX_10_ARPTETSUO_B9 = 997454834,
		STOP_SP_ARP_HI_INDEX_12_ATWOOD_10 = 3376192409,
		STOP_SP_ARP_HI_INDEX_13_ARPBEYOND_A9 = 3540222211,
		STOP_SP_ARP_HI_INDEX_14_EOTWSALT_11 = 1804610823,
		STOP_SP_ARP_HI_INDEX_15_MACREADY_4 = 2774297237,
		STOP_SP_ARP_HI_INDEX_16_MONOALT_7 = 1217587597,
		STOP_WT_DRUMS_INDEX_01_MONOLITH_WANTED_DRUMLOOPS_20 = 165328332,
		STOP_WT_DRUMS_INDEX_02_ASIM_DRUMSDIRTY_128BPM_6 = 2381251412,
		STOP_WT_DRUMS_INDEX_03_SM_WANTED_DRUMLOOPS_15 = 3179618362,
		STOP_WT_DRUMS_INDEX_04_BLUEPRINT_DRMSGLITCHYBEATS_128BPM_5 = 3588124590,
		STOP_WT_DRUMS_INDEX_05_REDPARA_WANTEDDRUMLOOPS_1 = 3264597457,
		STOP_WT_DRUMS_INDEX_06_EV_DRUMLOOPS_138BPM_9 = 188932445,
		STOP_WT_DRUMS_INDEX_07_EOTWS_WANTEDBEATS_1 = 434458312,
		STOP_WT_DRUMS_INDEX_08_HUSKWANTEDBEATS11 = 3935322051,
		STOP_WT_DRUMS_INDEX_09_RIPLEY_DRUMLOOPS_120BPM_1 = 1111487,
		STOP_WT_DRUMS_INDEX_10_TETSUO_DRUMLOOPS_1 = 673599155,
		STOP_WT_DRUMS_INDEX_11_AKIRAWANTEDBEATS3 = 887794623,
		STOP_WT_DRUMS_INDEX_12_ATWOOD_WANTEDARPBEATS_24 = 3391312602,
		STOP_WT_DRUMS_INDEX_13_BEYONDTOMORROW1 = 2313425453,
		STOP_WT_DRUMS_INDEX_14_EOTWS_WANTEDDRUMS_2 = 790882567,
		STOP_WT_DRUMS_INDEX_15_MAC_DRUMLOOP_5 = 2908125108,
		STOP_WT_DRUMS_INDEX_16_MONOALT_WANTEDLOOPS_8 = 2258686837,
		STOP_WT_DRUMS_INDEX_17_APORIA_WANTEDBEATS_2 = 3695232200,
		STOP_WT_DRUMS_INDEX_18_NMS2017_WANTEDSYNTHBEATS_1 = 3328109910,
		STOP_WT_DRUMS_INDEX_19_TUES_WANTEDBEATS4 = 1695477586,
		STOP_WT_DRUMS_INDEX_20_TUNG_WANTEDBEATS_3 = 2975026641,
		STOP_WT_DRUMS_INDEX_21_OCT_WANTEDBEATS_1 = 124962492,
		STOP_WT_DRUMS_INDEX_22_VOSTOK_WANTEDDRUMS_2 = 3522344384,
		STOP_WT_DRUMS_INDEX_23_ECHO_WANTEDLOOPS_2 = 4247467284,
		STOP_WT_DRUMS_INDEX_24_DOMO_WANTEDDRUMS_3 = 3388069506,
		STOP_WT_DRUMS_INDEX_25_DASHKA_WANTEDBEATS_3 = 546355550,
		STOP_WT_DRUMS_INDEX_26_MELB_WANTEDBEATS_6 = 4203938678,
		STOP_WT_DRUMS_INDEX_27_OVERSEER_WANTEDDRUMS_6 = 3529698098,
		STOP_WT_DRUMS_INDEX_28_SCRAPER_WANTEDBEATS_8 = 3138963968,
		STORMCRYSTAL = 3099141526,
		STRIDERATTACK = 1884909260,
		STRIDERATTACK2 = 2831772438,
		STRIDERATTACK3 = 2831772439,
		STRIDERROAR = 1822410676,
		SUBMARINE_BOOST_START = 841460250,
		SUBMARINE_BOOST_STOP = 2253481394,
		SUBMARINE_HORN_START = 893978368,
		SUBMARINE_HORN_STOP = 836913580,
		SUBMARINE_IDLE_EXTERIOR = 1760319209,
		SUBMARINE_IMPACTS = 2203081759,
		SUBMARINE_JUMP = 718058842,
		SUBMARINE_START = 2336426498,
		SUBMARINE_STOP = 4232495994,
		SUBMARINE_SUBMERGE = 1947762264,
		SUBMARINE_SURFACE = 3507421351,
		SUBMARINE_SUSPENSION = 3356903013,
		SUIT_INIT_END = 161497825,
		SUIT_INIT_JETPACK = 3286703312,
		SUIT_INIT_LIFESUPPORT = 813596697,
		SUIT_INIT_SCANNER = 3862412372,
		SUIT_INIT_STARTUP = 2078447401,
		SUIT_UPGRADE_TERMINAL_INTERACT = 258603543,
		SUIT_UPGRADE_TERMINAL_LP = 3856985561,
		SUITBOOT_FINISHED = 799059747,
		SUITBOOT_FREIGHTERINTRO_01 = 2134027251,
		SUITBOOT_FREIGHTERINTRO_02 = 2134027248,
		SUITBOOT_FREIGHTERINTRO_03 = 2134027249,
		SUITBOOT_FREIGHTERINTRO_04 = 2134027254,
		SUITBOOT_FREIGHTERINTRO_05 = 2134027255,
		SUITBOOT_FREIGHTERINTRO_06 = 2134027252,
		SUITBOOT_FREIGHTERINTRO_07 = 2134027253,
		SUITBOOT_INIT = 1406265891,
		SUITBOOT_JETPACK = 3493785085,
		SUITBOOT_LIFESUPPORT = 2266384552,
		SUITBOOT_SCANNER = 3066321237,
		SUITBOOT_SHIELD = 1995270154,
		SUITBOOT_WEAPON = 431752453,
		SUMMONSHIPBEACON_CLOSE = 2321196019,
		SUMMONSHIPBEACON_OPEN = 2531659013,
		TELEPORT = 530129416,
		TELEPORT_ACTIVATED_LOOP = 3079989133,
		TELEPORT_END = 3723096942,
		TELEPORT_LOOP_STOP = 3704808700,
		TELEPORT_START = 650852485,
		TENTACLE_IN = 3547594691,
		TENTACLE_LP = 3463706558,
		TENTACLE_OUT = 3146562750,
		TENTPLANT_CLOSE = 1112057648,
		TENTPLANT_OPEN = 3988975428,
		TERMINAL_ABANDONED_GROWTH = 4149453994,
		TERMINAL_ABANDONED_GROWTH_CLOSE = 1077121491,
		TERMINAL_ABANDONED_GROWTH_OPEN = 159666789,
		TERMINAL_ABANDONED_OPEN = 692858459,
		TERMINAL_BOOTUP = 406501363,
		TERMINAL_INDOORS = 1631121032,
		TERMINAL_INTERACT = 1132985582,
		TERMINAL_OUTDOORS = 3297594443,
		TERRAIN_CREATE = 2694184399,
		TERRAIN_DESTROY = 3593801287,
		TERRAIN_UNDO = 518691445,
		TIMBER_DOOR1_SETTLEMENT_CLOSE = 1134973227,
		TIMBER_DOOR1_SETTLEMENT_OPEN = 413685869,
		TIMBER_DOOR2_SETTLEMENT_CLOSE = 3443058714,
		TIMBER_DOOR2_SETTLEMENT_OPEN = 1721306142,
		TORCH_OFF = 122467803,
		TORCH_ON = 2883861863,
		TORNADO = 2586554088,
		TORNADO_STOP = 3131860167,
		TREXATTACK = 1272900592,
		TREXATTACK2 = 1609394914,
		TREXATTACK3 = 1609394915,
		TREXHAPPY = 2295281582,
		TREXPERFORM03 = 3371934392,
		TREXROAR = 2880005424,
		TRIATTACK = 1551704004,
		TRIATTACK2 = 1559822782,
		TRIATTACK3 = 1559822783,
		TRIPERFORM01 = 4069850822,
		TRIROAR = 3523086412,
		TURRET_DEPLOY = 1305807563,
		TURRET_INACTIVE_IDLE = 435503774,
		TURRET_LASER = 3517346539,
		TURRET_LASER_STOP = 1056229158,
		TURRET_RETRACT = 2184733109,
		TURRET_SHOOT = 2888394459,
		TUT_ELEMENT_TRANSFER_SUCCESS = 4008949373,
		TXT_RADIONOISE = 2434536403,
		TXT_SPECIAL_CHIME = 1782038646,
		TXT_STATICNOISE_END = 3293272248,
		TXT_STATICNOISE_START = 1438761059,
		UI_ACTION_CONFIRMED = 414108918,
		UI_ALERT_DAMAGE_WARNING_CRITICAL_LP = 2613665542,
		UI_ALERT_DAMAGE_WARNING_CRITICAL_LP_STOP = 3895653333,
		UI_ALERT_POLICE = 2320709165,
		UI_ALIEN_RESPONSE = 2475545571,
		UI_BADGE = 3526135975,
		UI_BARTER_SUCCESS = 3282524670,
		UI_BASEBUILD_CALLFREIGHTER = 2117072262,
		UI_BASEBUILD_CHANGECATEGORY = 2133792826,
		UI_BASEBUILD_CHANGESELECTION = 3377512016,
		UI_BASEBUILD_DELETE = 2952796143,
		UI_BASEBUILD_INVALIDPOSITION = 4059944170,
		UI_BASEBUILD_MENU_CLOSE = 2088534494,
		UI_BASEBUILD_MENU_OPEN = 1093324154,
		UI_BASEBUILD_PLACEBUILDING = 1589148399,
		UI_BASEBUILD_REPAIRTECH = 2871826949,
		UI_BASEBUILD_REPAIRTECH_ERROR = 3778035298,
		UI_BASEBUILD_ROTATE = 4019996011,
		UI_BASEBUILD_ROTATE_LOOP_START = 3980637285,
		UI_BASEBUILD_ROTATE_LOOP_STOP = 3979254151,
		UI_BASEBUILD_SETCOLOUR = 2774370610,
		UI_BASEBUILD_SNAP = 2040747090,
		UI_BEACON_DISCOVER = 1975101476,
		UI_BIOSHIP_ADDORGAN = 4111887813,
		UI_BLUEPRINT_KNOWN = 1834761571,
		UI_BUILD_ERROR = 1974231569,
		UI_BUY = 3247222218,
		UI_CHOICETEXT_WOOSH = 2373818691,
		UI_CLICK_GENERIC = 290149060,
		UI_COMBAT_UNIT_DEPLOYED_01 = 572186546,
		UI_COMBAT_UNIT_DEPLOYED_02 = 572186545,
		UI_COMBAT_UNIT_DEPLOYED_03 = 572186544,
		UI_COMMUNICATOR_HAIL_ALARM = 2181752810,
		UI_CREDITS_INCREASE = 303576711,
		UI_CRITICAL_HIT = 2368764731,
		UI_DECISIONTEXT_MOUSEOVER = 696694815,
		UI_DESTINATION_REACHED = 1818533469,
		UI_DISMANTLE = 2261736867,
		UI_DUMMY_EVENT = 3603524867,
		UI_EPIC_ITEM = 4219387885,
		UI_ERROR = 1009189048,
		UI_FRIGATE_LIVING_FEED = 90675821,
		UI_FRONTEND_BACK = 2654147108,
		UI_FRONTEND_ENTER = 2852869421,
		UI_FRONTEND_EXIT = 3376480577,
		UI_FRONTEND_PRODUCTSBUILD = 472585883,
		UI_FRONTEND_SELECTGENERIC = 3635375988,
		UI_FRONTEND_TECHBUILD = 3396963939,
		UI_FRONTEND_TEXTOVERLAY_DISCOVERY = 408793035,
		UI_FRONTEND_TEXTOVERLAY_EMPTY = 3154678550,
		UI_FRONTEND_TEXTOVERLAY_SUBSTANCE = 306235403,
		UI_FRONTEND_TEXTOVERLAY_TECH = 343158839,
		UI_FRONTEND_TRANSFER = 1148272344,
		UI_GAMEMODE_ERASE_COMPLETE = 249451172,
		UI_GAMEMODE_ERASE_ERROR = 1752181397,
		UI_GAMEMODE_HOVER = 3993814526,
		UI_GAMEMODE_SELECT = 781172048,
		UI_GAMEMODE_WARNING = 800133804,
		UI_GLITCHED_MEMORY = 1619887904,
		UI_HEALTH_INCREASE = 3537297379,
		UI_INCOMING_FRIGATE_LIVING_WARNING = 4192213380,
		UI_INCOMING_MESSAGE = 1782162542,
		UI_INCOMING_NORMANDY_WARNING = 518076034,
		UI_INCOMING_STARSHIP_WARNING = 263205366,
		UI_INSUFFICIENT_FUEL = 808072914,
		UI_INSUFFICIENT_STANDING = 3298470450,
		UI_INSUFFICIENT_TECH_FRAGMENTS = 2584560788,
		UI_INTERACT_TIMER = 103385342,
		UI_INTERACT_TIMER_STOP = 1484538141,
		UI_INTERACTIVEFLORA_COLLECT = 3401748187,
		UI_ITEM_TELEPORTTOSHIP = 2268658758,
		UI_ITEM_TRANSFERTOSUIT = 1340061303,
		UI_JUICYGRUB = 2639969652,
		UI_KEYBINDING = 173284918,
		UI_KNOWLEDGE_EXPANDED = 1864736154,
		UI_LANDINGPOST_LOCKON = 843127146,
		UI_LAUNCH_CONFIRMATION = 2719476233,
		UI_LAUNCH_NOTIFICATION = 786358347,
		UI_LEVEL_UP_TEXT = 2720858558,
		UI_MANAGE_EXOSUIT_INVENTORY = 2820680502,
		UI_MAP_ENTRY = 2763231777,
		UI_MAP_EXIT = 2991743527,
		UI_MAP_FILTER_CHANGE = 1471906256,
		UI_MAP_HIGHLIGHT_HOVER = 2838564814,
		UI_MAP_INFO = 4204003495,
		UI_MAP_INTERACT_TIMER = 982578715,
		UI_MAP_LINES = 1105933428,
		UI_MAP_MENUDOWN = 2892924582,
		UI_MAP_MENUUP = 367452365,
		UI_MAP_NAV_MODE_BACK = 1815586734,
		UI_MAP_NAV_MODE_NEXT = 1708280704,
		UI_MAP_NAV_MODE_SWITCH_FAIL = 2157663446,
		UI_MAP_NAV_PATH_BACK = 2830722782,
		UI_MAP_NAV_PATH_NEXT = 2186636272,
		UI_MAP_PLANET_HOVER = 1578225138,
		UI_MAP_PLANET_SELECT = 206169972,
		UI_MAP_PLANET_UNSELECT = 23895309,
		UI_MAP_POINT_SELECT = 2617200518,
		UI_MAP_SELECT = 1335995103,
		UI_MAP_TEXT = 28170026,
		UI_MAP_TEXT_OUT = 3154603751,
		UI_MAP_WAYPOINT_ADDED = 3837776649,
		UI_MAP_WAYPOINT_DELETED = 333420632,
		UI_MAP_WAYPOINT_ERROR = 3203127381,
		UI_MARKER = 721935692,
		UI_MENU_BUILD_TAB = 2043548298,
		UI_MENU_INCORRECT = 526430491,
		UI_MENU_OPTION_SWITCH = 4281318564,
		UI_MESSAGE_GENERIC = 974424781,
		UI_MISSION_NEWSECONDARY_COMPLETE = 3635392031,
		UI_MISSION_NEWSECONDARY_OBJECTIVE = 732730851,
		UI_MISSION_NOTIFYSCAN = 1932812103,
		UI_MISSION_NOTIFYSCAN_END = 3295362121,
		UI_MISSIONPRIMARY_UPDATE = 4073624774,
		UI_NANITES_INSUFFICIENT = 2436124684,
		UI_NANITES_RECEIVED = 4001836096,
		UI_NEW_DISCOVERY = 2669263559,
		UI_NEW_SUIT_SLOT = 477984115,
		UI_NEW_TECH = 3230149307,
		UI_NEWTECH_WOOSH = 3356802997,
		UI_NEXT_MESSAGE = 819219473,
		UI_NOWHERETOLAND = 3238843736,
		UI_NPC_SHIP_HIT_ALERT = 2898295217,
		UI_NPC_SHIP_INTERACTION = 1001143561,
		UI_OXYGEN_REPLENISHED = 3184286286,
		UI_PAGE_CHANGE = 3428947486,
		UI_PHOTOMODE_CAMERAPLACE_END = 2230641370,
		UI_PHOTOMODE_CAMERAPLACE_START = 1222919881,
		UI_PHOTOMODE_IN = 63226467,
		UI_PHOTOMODE_OUT = 1789861598,
		UI_PHOTOMODE_TAKEPHOTO = 200908601,
		UI_PHOTOMODE_VALUEDOWN = 366058609,
		UI_PHOTOMODE_VALUEUP = 2322337430,
		UI_PICKUP_LOOT = 1554598435,
		UI_PICKUP_NITROGENPLANT = 1694903770,
		UI_PICKUP_PLANT = 1685079420,
		UI_PICKUP_RESOURCE = 2815161641,
		UI_PIRATES_WARNING = 3383726405,
		UI_PIRATES_WARNING_STOP = 2968038600,
		UI_PLACEMARKER = 3983888049,
		UI_PRODUCT_CREATED = 1888798398,
		UI_PROTECTION_OFFLINE = 3777853139,
		UI_PULSEDRIVE_OFFLINE = 554423067,
		UI_PURCHASE = 1378023143,
		UI_QUICKMENU_CLOSE = 1512935547,
		UI_QUICKMENU_NOCHARGE = 4153767524,
		UI_QUICKMENU_OPEN = 4258157981,
		UI_QUICKMENU_TAB = 986310006,
		UI_QUICKMENU_TECHCHARGE = 1065379769,
		UI_RARE_ITEM = 3948695812,
		UI_RECORD_UPLOADED = 3550585484,
		UI_REFINERY_DECREASE = 2342925785,
		UI_REFINERY_INCREASE = 2726559881,
		UI_RETICULE_LOCK = 3536167353,
		UI_RETICULE_ONTARGET = 2810498048,
		UI_SAVE = 272763609,
		UI_SCAN_PORTAL = 4054484686,
		UI_SELECT_GENERIC = 2935274652,
		UI_SENTINELDETECTOR = 4127338044,
		UI_SENTINELFORCES_ALERTED = 3747732370,
		UI_SENTINELFORCES_DEACTIVATED = 91057941,
		UI_SENTINELINVESTIGATORS_INCOMING = 1238818803,
		UI_SERVER_FOUND = 4027298922,
		UI_SERVER_SCANDISCOVERIES = 3974143045,
		UI_SERVER_SEARCHING_START = 1345310275,
		UI_SERVER_SELECT = 1338284846,
		UI_SERVER_SELECT_POPUP = 1830428773,
		UI_SETTLEMENT_BUILDINGCOMPLETE = 3073272543,
		UI_SETTLEMENT_DECISION = 3979660232,
		UI_SETTLEMENT_FLOORCOMPLETE = 3571912641,
		UI_SETTLEMENT_INVEST = 477732489,
		UI_SHIP_CUSTOMISATION_ASSEMBLE = 2376488592,
		UI_SHIP_CUSTOMISATION_CHANGE_SHIP = 2839178421,
		UI_SHIP_CUSTOMISATION_REMOVE = 3945198120,
		UI_SHIP_CUSTOMISATION_SELECT = 2130795848,
		UI_SHOP_ITEMS_MENU = 102310535,
		UI_SHOP_SCROLL_DOWN = 2270127805,
		UI_SHOP_SCROLL_UP = 2001239178,
		UI_SHOP_SWITCH_BUYSELL = 4019570460,
		UI_SHOP_SWITCH_INVENTORY = 3514066980,
		UI_SLEEP = 1911634139,
		UI_SPECIALS_INSUFFICIENT = 3495174572,
		UI_SPOOKYMESSAGE = 2049481054,
		UI_STANDING_DECREASED = 3347164623,
		UI_STANDING_INCREASED = 1298025503,
		UI_STAT_CHANGE = 3190835499,
		UI_TARGET_ONSCREEN = 2619419727,
		UI_TECH_BROKEN = 2132680226,
		UI_TECH_INSTALLED = 1955321165,
		UI_TERRAIN_CHANGESIZE = 4106667827,
		UI_TEXT_WOOSH = 2567758798,
		UI_TEXTENTRY = 3996708793,
		UI_TIP = 3781148677,
		UI_TRADING_MESSAGE = 2952981261,
		UI_TRADING_TEXT = 1880488429,
		UI_TRADING_TEXT_ONESHOT = 2717301988,
		UI_TRADING_TEXT_STOP = 3821385760,
		UI_TRADING_TEXT_TRANSLATE = 1076027498,
		UI_UNITS_RECEIVED = 2307708267,
		UI_VEGETABLE_COLLECT = 4237605284,
		UI_VR_HANDMENU_CLOSE = 911012006,
		UI_VR_HANDMENU_HIGHLIGHT = 3866257518,
		UI_VR_HANDMENU_OPEN = 288102642,
		UI_VR_HANDMENU_OPENLP = 3504143902,
		UI_VR_WRISTMENU_HIGHLIGHT = 2984279906,
		UI_VR_WRISTMENU_IN = 4232244903,
		UI_VR_WRISTMENU_OUT = 3714209050,
		UI_VR_WRISTMENU_SELECT = 1391173718,
		UI_VR_WRISTMENU_TOUCH = 163825071,
		UI_WAKEUP = 1465978177,
		UI_WANTED_INCREASE = 2159694266,
		UI_WANTED_INCREASE_01 = 2554339384,
		UI_WANTED_INCREASE_02 = 2554339387,
		UI_WANTED_INCREASE_03 = 2554339386,
		UI_WANTED_INCREASE_04 = 2554339389,
		UI_WANTED_INCREASE_05 = 2554339388,
		UI_WEAPON_FOUND = 1304070631,
		UI_WEIRDBIOME_COUNTDOWN = 1244489011,
		UI_WEIRDBIOME_COUNTDOWN_END = 1242895829,
		UI_WHALESONG = 4257282614,
		UI_WORD_LEARNT = 2740329391,
		UI_WPN_LOCKON = 2672515092,
		UI_WPN_RETICULE_LOCK = 2651931489,
		UI_WPN_TARGET_FOCUS = 4104693168,
		UNDERWATER_STEAMVENT_RUMBLE = 3310270886,
		UNDERWATER_STEAMVENT_VENTING = 3061595124,
		UNDERWATER_STEAMVENT_VENTING_END = 1798340714,
		VAULT_CLOSE = 2373813322,
		VAULT_OPEN = 1525204846,
		VEHICLE_DESTRUCTIBLE = 1641993852,
		VEHICLE_MARKER_COLLECT = 3423360975,
		VEHICLE_MARKER_DELETE = 3081788866,
		VEHICLE_MARKER_PLACE = 1187481120,
		VEHICLE_RACE_END = 2439653635,
		VEHICLE_RACE_START = 188413656,
		VEHICLE_SPAWN = 1535298655,
		VENUSFLYTRAP_CLOSE = 1915456699,
		VENUSFLYTRAP_OPEN = 3275053533,
		VIEW_FIRSTPERSON = 2276274114,
		VIEW_THIRDPERSON = 1925050367,
		VILESPAWN_EGG_COLLECT = 3682824825,
		VILESPAWN_LP = 2895942271,
		VILESPAWN_LP_STOP = 1573625034,
		VO_ANOMALYDETECTED = 4211663104,
		VO_BASECOMPUTER_ONLINE = 2831470351,
		VO_INVENTORY_FULL = 461300987,
		VO_PRODUCT_CONSTRUCTED = 1347699473,
		VO_SECURE_TRADEMODULE_LOCATED = 2543323772,
		VO_SECURE_TRANSMISSIONMODULE_LOCATED = 3657000392,
		VO_STARSHIP_SIGNAL = 1105946740,
		VO_TECH_COMP_REPAIRED = 3250932190,
		VO_TECH_INSTALLED = 4058033412,
		VO_TECH_OFFLINE = 806590379,
		VO_TECH_RECHARGED = 547693767,
		VO_TECH_REPAIRED = 3608735718,
		VO_TUT_COORDSRECEIVED = 2686710122,
		VO_TUT_STATIONCOORDSRECEIVED = 95899052,
		VR_FOLEY_ARM_MOVEMENTS = 4209118041,
		VR_FOLEY_ARM_MOVEMENTS_LEFT = 3683156111,
		VR_FOLEY_ARM_MOVEMENTS_RIGHT = 2222104402,
		VR_FOLEY_ARMS_WOOSH = 1068440112,
		VR_FOLEY_HAND_CLENCH_CLOSE = 480413662,
		VR_FOLEY_HAND_CLENCH_OPEN = 4190662522,
		VR_PULLTOUSE = 1782927043,
		VR_PULLTOUSE_STOP = 843860526,
		VR_TELEPORTMOVE = 2952721386,
		VR_THEREMIN = 3343065366,
		WALKER_CHARGEUP = 3097612505,
		WALKER_DIE = 2928402536,
		WALKER_EMOTE_LP = 719817013,
		WALKER_EMOTE_LP_STOP = 3883505624,
		WALKER_ENRAGE = 3137661732,
		WALKER_FALL_IMPACT = 706709666,
		WALKER_IDLE = 2999450336,
		WALKER_LASER = 2829856335,
		WALKER_LASER_STOP = 3438713978,
		WALKER_LEG_HIT_IDLE = 2300078273,
		WALKER_LEG_HIT_LEFT_IN_01 = 209998576,
		WALKER_LEG_HIT_LEFT_IN_02 = 209998579,
		WALKER_LEG_HIT_LEFT_OUT_01 = 2135470921,
		WALKER_LEG_HIT_LEFT_OUT_02 = 2135470922,
		WALKER_LEG_HIT_RIGHT_IN_01 = 3678113983,
		WALKER_LEG_HIT_RIGHT_IN_02 = 3678113980,
		WALKER_LEG_HIT_RIGHT_OUT_01 = 2964903764,
		WALKER_LEG_HIT_RIGHT_OUT_02 = 2964903767,
		WALKER_MOVE = 303786705,
		WALKER_SIT = 2926283798,
		WALKER_SQUAWKER = 3101502923,
		WALKER_STAND = 3301500158,
		WALKER_STEP = 3056818156,
		WALKINGBUILDING_AMBIENT_LP = 2135640002,
		WALKINGBUILDING_ATTACK = 3801618789,
		WALKINGBUILDING_AWAKEN = 2208085772,
		WALKINGBUILDING_EVADE = 3890281744,
		WALKINGBUILDING_MOVE_SMALL = 1145387830,
		WALKINGBUILDING_POUNCE = 53936303,
		WALKINGBUILDING_POUNCE_BACK = 458125207,
		WALKINGBUILDING_STUNNED = 576094026,
		WARN_CIVILIANSHIELDS = 3153565387,
		WARN_DISTRESS_DETECTED = 1689749890,
		WARN_HOSTILE_APPROACH = 1105027473,
		WARN_HOSTILE_DETECTED = 1273218079,
		WARN_HOSTILE_SCAN = 356986526,
		WARRIORANGRY = 2223624956,
		WARRIORCHATTER = 4139651952,
		WARRIORGREET1 = 3988243341,
		WARRIORGREET2 = 3988243342,
		WARRIORGREET3 = 3988243343,
		WARRIORHAPPY01 = 1039060760,
		WARRIORHAPPY02 = 1039060763,
		WARRIORHAPPY03 = 1039060762,
		WARRIORHONOUR = 3698328094,
		WATERFALL = 2074477625,
		WEAPONTECHSTATION_IN = 2635183507,
		WEAPONTECHSTATION_OUT = 3469956014,
		WEATHER_OVER = 4139171360,
		WEATHER_WARN = 3688258070,
		WEIRDBEAMSTONE = 797025488,
		WEIRDBEAMSTONE_STOP = 4211193503,
		WEIRDBUBBLE = 2583025390,
		WEIRDBUBBLE_STOP = 1076058861,
		WEIRDCONTOUR = 565041878,
		WEIRDFLOAT_LP = 4208116821,
		WEIRDFLOAT_STOP = 2748074065,
		WEIRDOFRACTCUBE = 2039614538,
		WEIRDROLL_LP = 780492524,
		WEIRDROLL_STOP = 450488928,
		WEIRDSHARDS = 4048634783,
		WEIRDWIRECELL = 3314118587,
		WINGFLAP = 333542113,
		WOOSH_DROID_SMALL_01_FRONT = 297568986,
		WOOSH_DROID_SMALL_01_MID = 3473928497,
		WOOSH_DROID_SMALL_01_REAR = 3928749951,
		WPN_BROKEN = 2784902906,
		WPN_GROUND_SIZZLE = 1109588194,
		WPN_MELEE_IMPACT_CREATURE = 2718991944,
		WPN_MELEE_IMPACT_GENERIC = 3405827486,
		WPN_NOAMMO = 329188022,
		WPN_NOTECHTOOL = 3650641058,
		WPN_NOTOOL = 3181582258,
		WPN_PL_CHANGE = 3077859156,
		WPN_PL_DEPLETED = 4177552889,
		WPN_PL_GRENADE = 4036580414,
		WPN_PL_GRENADE_BOUNCE = 3445433421,
		WPN_PL_GRENADE_EXPLODE = 406583408,
		WPN_PL_HANDLASER = 3201991932,
		WPN_PL_HANDLASER_OVERHEAT = 3544769539,
		WPN_PL_HANDLASER_STOP = 2191565963,
		WPN_PL_JAVELIN_CHARGE = 4031014832,
		WPN_PL_JAVELIN_CHARGE_END = 3065630806,
		WPN_PL_MELEE = 2411764952,
		WPN_PL_NEUTRON_CANNON_BUILDUP = 3492763105,
		WPN_PL_NEUTRON_CANNON_CHARGE_END = 1827911144,
		WPN_PL_NEUTRON_CANNON_FIRE = 2478971518,
		WPN_PL_NEUTRON_CANNON_FIRE_CHARGED = 2184721947,
		WPN_PL_NEUTRON_CANNON_LP = 3199661166,
		WPN_PL_OUTOFAMMO_GUN = 3016897146,
		WPN_PL_PISTOL = 3283242809,
		WPN_PL_PISTOL_RELOAD = 3934477835,
		WPN_PL_PUTAWAY = 2351811961,
		WPN_PL_RAILGUN = 3988465362,
		WPN_PL_RAILGUN_PATHFINDER = 1889341932,
		WPN_PL_RAILGUN_RELOAD = 3462987238,
		WPN_PL_SCAN = 2654277663,
		WPN_PL_SCAN_STOP = 3907022506,
		WPN_PL_SCATTERBLASTER = 3304217333,
		WPN_PL_SHOTGUN = 311296194,
		WPN_PL_SHOTGUN_PATHFINDER = 941243004,
		WPN_PL_SHOTGUN_RELOAD = 2698135478,
		WPN_PL_SMG = 1046143591,
		WPN_PL_TAKEOUT = 1558766251,
		WPN_SHIP_CHANGE = 1511168854,
		WPN_SHIP_CYCLOTRON_FIRE = 1980885110,
		WPN_SHIP_CYCLOTRON_OVERHEAT = 1121880130,
		WPN_SHIP_GUN = 447514284,
		WPN_SHIP_INFRAKNIFE_FIRE = 262551670,
		WPN_SHIP_INFRAKNIFE_OVERHEAT = 3043481666,
		WPN_SHIP_LASER = 1488157423,
		WPN_SHIP_LASER_STOP = 1090233306,
		WPN_SHIP_MISSILE_OVERHEAT = 3566539753,
		WPN_SHIP_OUTOFAMMO = 3988319235,
		WPN_SHIP_OVERHEAT = 3186365130,
		WPN_SHIP_POSITRON_FIRE = 3916643031,
		WPN_SHIP_POSITRON_OVERHEAT = 2413750307,
		WPN_SHIP_READY = 4263241463,
		WPN_TERRAIN_BUILD = 3141878185,
		WPN_TERRAIN_BUILD_END = 736067403,
		WPN_TERRAIN_DESTROY = 2223503391,
		WPN_TERRAIN_DESTROY_END = 3303593601,
		WPN_TERRAIN_END = 867290390,
		WPN_TERRAIN_UNDO = 2310527261,
	};

	NMS_GameComponents::GcAudioWwiseEvents::AkEventEnum AkEvent;
};

struct GcStatsTypes
{
	enum class StatsTypeEnum : uint32_t
	{
		Unspecified = 0,
		Weapon_Laser = 1,
		Weapon_Laser_Damage = 2,
		Weapon_Laser_Mining_Speed = 3,
		Weapon_Laser_HeatTime = 4,
		Weapon_Laser_Bounce = 5,
		Weapon_Laser_ReloadTime = 6,
		Weapon_Laser_Recoil = 7,
		Weapon_Laser_Drain = 8,
		Weapon_Laser_StrongLaser = 9,
		Weapon_Laser_ChargeTime = 10,
		Weapon_Laser_MiningBonus = 11,
		Weapon_Projectile = 12,
		Weapon_Projectile_Damage = 13,
		Weapon_Projectile_Range = 14,
		Weapon_Projectile_Rate = 15,
		Weapon_Projectile_ClipSize = 16,
		Weapon_Projectile_ReloadTime = 17,
		Weapon_Projectile_Recoil = 18,
		Weapon_Projectile_Bounce = 19,
		Weapon_Projectile_Homing = 20,
		Weapon_Projectile_Dispersion = 21,
		Weapon_Projectile_BulletsPerShot = 22,
		Weapon_Projectile_MinimumCharge = 23,
		Weapon_Projectile_MaximumCharge = 24,
		Weapon_Projectile_BurstCap = 25,
		Weapon_Projectile_BurstCooldown = 26,
		Weapon_ChargedProjectile = 27,
		Weapon_ChargedProjectile_ChargeTime = 28,
		Weapon_ChargedProjectile_CooldownDuration = 29,
		Weapon_ChargedProjectile_Drain = 30,
		Weapon_ChargedProjectile_ExtraSpeed = 31,
		Weapon_Rail = 32,
		Weapon_Shotgun = 33,
		Weapon_Burst = 34,
		Weapon_Flame = 35,
		Weapon_Cannon = 36,
		Weapon_Grenade = 37,
		Weapon_Grenade_Damage = 38,
		Weapon_Grenade_Radius = 39,
		Weapon_Grenade_Speed = 40,
		Weapon_Grenade_Bounce = 41,
		Weapon_Grenade_Homing = 42,
		Weapon_Grenade_Clusterbomb = 43,
		Weapon_TerrainEdit = 44,
		Weapon_SunLaser = 45,
		Weapon_SoulLaser = 46,
		Weapon_MineGrenade = 47,
		Weapon_FrontShield = 48,
		Weapon_Scope = 49,
		Weapon_Spawner = 50,
		Weapon_SpawnerAlt = 51,
		Weapon_Melee = 52,
		Weapon_StunGrenade = 53,
		Weapon_Stealth = 54,
		Weapon_Scan = 55,
		Weapon_Scan_Radius = 56,
		Weapon_Scan_Recharge_Time = 57,
		Weapon_Scan_Types = 58,
		Weapon_Scan_Binoculars = 59,
		Weapon_Scan_Discovery_Creature = 60,
		Weapon_Scan_Discovery_Flora = 61,
		Weapon_Scan_Discovery_Mineral = 62,
		Weapon_Scan_Secondary = 63,
		Weapon_Scan_Terrain_Resource = 64,
		Weapon_Scan_Surveying = 65,
		Weapon_Scan_BuilderReveal = 66,
		Weapon_Fish = 67,
		Weapon_Stun = 68,
		Weapon_Stun_Duration = 69,
		Weapon_Stun_Damage_Multiplier = 70,
		Weapon_FireDOT = 71,
		Weapon_FireDOT_Duration = 72,
		Weapon_FireDOT_DPS = 73,
		Weapon_FireDOT_Damage_Multiplier = 74,
		Suit_Armour_Health = 75,
		Suit_Armour_Shield = 76,
		Suit_Armour_Shield_Strength = 77,
		Suit_Energy = 78,
		Suit_Energy_Regen = 79,
		Suit_Protection = 80,
		Suit_Protection_Cold = 81,
		Suit_Protection_Heat = 82,
		Suit_Protection_Toxic = 83,
		Suit_Protection_Radiation = 84,
		Suit_Protection_Spook = 85,
		Suit_Protection_Pressure = 86,
		Suit_Underwater = 87,
		Suit_UnderwaterLifeSupport = 88,
		Suit_DamageReduce_Cold = 89,
		Suit_DamageReduce_Heat = 90,
		Suit_DamageReduce_Toxic = 91,
		Suit_DamageReduce_Radiation = 92,
		Suit_Protection_HeatDrain = 93,
		Suit_Protection_ColdDrain = 94,
		Suit_Protection_ToxDrain = 95,
		Suit_Protection_RadDrain = 96,
		Suit_Protection_WaterDrain = 97,
		Suit_Protection_SpookDrain = 98,
		Suit_Stamina_Strength = 99,
		Suit_Stamina_Speed = 100,
		Suit_Stamina_Recovery = 101,
		Suit_Jetpack = 102,
		Suit_Jetpack_Tank = 103,
		Suit_Jetpack_Drain = 104,
		Suit_Jetpack_Refill = 105,
		Suit_Jetpack_Ignition = 106,
		Suit_Jetpack_DoubleJump = 107,
		Suit_Jetpack_WaterEfficiency = 108,
		Suit_Jetpack_MidairRefill = 109,
		Suit_Refiner = 110,
		Suit_AutoTranslator = 111,
		Suit_Utility = 112,
		Suit_RocketLocker = 113,
		Suit_FishPlatform = 114,
		Suit_FoodUnit = 115,
		Suit_Denier = 116,
		Suit_Vehicle_Summon = 117,
		Ship_Weapons_Guns = 118,
		Ship_Weapons_Guns_Damage = 119,
		Ship_Weapons_Guns_Rate = 120,
		Ship_Weapons_Guns_HeatTime = 121,
		Ship_Weapons_Guns_CoolTime = 122,
		Ship_Weapons_Guns_Scale = 123,
		Ship_Weapons_Guns_BulletsPerShot = 124,
		Ship_Weapons_Guns_Dispersion = 125,
		Ship_Weapons_Guns_Range = 126,
		Ship_Weapons_Guns_Damage_Radius = 127,
		Ship_Weapons_Lasers = 128,
		Ship_Weapons_Lasers_Damage = 129,
		Ship_Weapons_Lasers_HeatTime = 130,
		Ship_Weapons_Missiles = 131,
		Ship_Weapons_Missiles_NumPerShot = 132,
		Ship_Weapons_Missiles_Speed = 133,
		Ship_Weapons_Missiles_Damage = 134,
		Ship_Weapons_Missiles_Size = 135,
		Ship_Weapons_Shotgun = 136,
		Ship_Weapons_MiniGun = 137,
		Ship_Weapons_Plasma = 138,
		Ship_Weapons_Rockets = 139,
		Ship_Weapons_ShieldLeech = 140,
		Ship_Armour_Shield = 141,
		Ship_Armour_Shield_Strength = 142,
		Ship_Armour_Health = 143,
		Ship_Scan = 144,
		Ship_Scan_EconomyFilter = 145,
		Ship_Scan_ConflictFilter = 146,
		Ship_Hyperdrive = 147,
		Ship_Hyperdrive_JumpDistance = 148,
		Ship_Hyperdrive_JumpsPerCell = 149,
		Ship_Hyperdrive_QuickWarp = 150,
		Ship_Launcher = 151,
		Ship_Launcher_TakeOffCost = 152,
		Ship_Launcher_AutoCharge = 153,
		Ship_PulseDrive = 154,
		Ship_PulseDrive_MiniJumpFuelSpending = 155,
		Ship_PulseDrive_MiniJumpSpeed = 156,
		Ship_Boost = 157,
		Ship_Maneuverability = 158,
		Ship_BoostManeuverability = 159,
		Ship_LifeSupport = 160,
		Ship_Drift = 161,
		Ship_Teleport = 162,
		Ship_CargoShield = 163,
		Ship_WaterLandingJet = 164,
		Freighter_Hyperdrive = 165,
		Freighter_Hyperdrive_JumpDistance = 166,
		Freighter_Hyperdrive_JumpsPerCell = 167,
		Freighter_MegaWarp = 168,
		Freighter_Teleport = 169,
		Freighter_Fleet_Boost = 170,
		Freighter_Fleet_Speed = 171,
		Freighter_Fleet_Fuel = 172,
		Freighter_Fleet_Combat = 173,
		Freighter_Fleet_Trade = 174,
		Freighter_Fleet_Explore = 175,
		Freighter_Fleet_Mine = 176,
		Vehicle_Boost = 177,
		Vehicle_Engine = 178,
		Vehicle_Scan = 179,
		Vehicle_EngineFuelUse = 180,
		Vehicle_EngineTopSpeed = 181,
		Vehicle_BoostSpeed = 182,
		Vehicle_BoostTanks = 183,
		Vehicle_Grip = 184,
		Vehicle_SkidGrip = 185,
		Vehicle_SubBoostSpeed = 186,
		Vehicle_Laser = 187,
		Vehicle_LaserDamage = 188,
		Vehicle_LaserHeatTime = 189,
		Vehicle_LaserStrongLaser = 190,
		Vehicle_Gun = 191,
		Vehicle_GunDamage = 192,
		Vehicle_GunHeatTime = 193,
		Vehicle_GunRate = 194,
		Vehicle_StunGun = 195,
		Vehicle_TerrainEdit = 196,
		Vehicle_FuelRegen = 197,
		Vehicle_AutoPilot = 198,
		Vehicle_Flame = 199,
		Vehicle_FlameDamage = 200,
		Vehicle_FlameHeatTime = 201,
		Vehicle_Refiner = 202,
	};

	NMS_GameComponents::GcStatsTypes::StatsTypeEnum StatsType;
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcCombatEffectData
{
	NMS::NMSString0x10 DamageId;
	NMS::NMSString0x10 ParticlesId;
	float DamageMergeTime;
	float DamageMinDistance;
	float DamageTimeBetweenNumbers;
	NMS_GameComponents::GcAudioWwiseEvents EndAudio;
	NMS_GameComponents::GcAudioWwiseEvents StartAudio;
	NMS_GameComponents::GcStatsTypes Stat;
	bool OverrideDamageNumberData;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkModelResource
{
	NMS::VariableSizeString Filename;
	uint64_t Seed;
	NMS::GcResource ResHandle;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct TkIdModelResource
{
	NMS_Toolkit::TkModelResource Model;
	NMS::NMSString0x10 Id;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionLifeSupportEnabled
{
	bool Enabled;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcNodeID
{
	int32_t NodeID;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcDiscoveryRewardLookup
{
	NMS::NMSString0x10 BiomeSpecific[17];
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Secondary;
};

//Dependency: GcDiscoveryRewardLookup
struct GcDiscoveryRewardLookupTable
{
	std::vector<NMS_GameComponents::GcDiscoveryRewardLookup> Table;
};

struct GcNPCHabitationType
{
	enum class NPCHabitationTypeEnum : uint32_t
	{
		WeaponsExpert = 0,
		Farmer = 1,
		Builder = 2,
		Vehicles = 3,
		Scientist = 4,
	};

	NMS_GameComponents::GcNPCHabitationType::NPCHabitationTypeEnum NPCHabitationType;
};

//Dependency: GcNPCHabitationType
struct GcCostNPCHabitation
{
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;
	bool MustBeInhabited;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFreighterPods
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	bool TakeAmountFromPulseEncounter;
};

//Dependency: Vector3f
struct GcDebugShipTravelLine
{
	NMS::Vector3f Dir;
	NMS::Vector3f Origin;
	float InfluenceRange;
	float Length;
};

struct GcProductTableType
{
	enum class ProductTableTypeEnum : uint32_t
	{
		Main = 0,
		BaseParts = 1,
		ModularCustomisation = 2,
	};

	NMS_GameComponents::GcProductTableType::ProductTableTypeEnum ProductTableType;
};

struct GcFrigateTraitStrength
{
	enum class FrigateTraitStrengthEnum : uint32_t
	{
		NegativeLarge = 0,
		NegativeMedium = 1,
		NegativeSmall = 2,
		TertiarySmall = 3,
		TertiaryMedium = 4,
		TertiaryLarge = 5,
		SecondarySmall = 6,
		SecondaryMedium = 7,
		SecondaryLarge = 8,
		Primary = 9,
	};

	NMS_GameComponents::GcFrigateTraitStrength::FrigateTraitStrengthEnum FrigateTraitStrength;
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcModelExplosionRule
{
	enum class MatchNodeTypeEnum : uint32_t
	{
		Any = 0,
		Mesh = 1,
		Model = 2,
		Joint = 3,
	};

	enum class MatchNameEnum : uint32_t
	{
		ContainsString = 0,
		ExactString = 1,
	};

	enum class ExplodeActionEnum : uint32_t
	{
		RelativeToParent = 0,
		DontMove = 1,
		SaveCenter = 2,
		RelativeToSaved = 3,
	};

	NMS::Vector3f AxisMultiplier;
	NMS::Vector3f Offset;
	NMS_GameComponents::GcModelExplosionRule::ExplodeActionEnum ExplodeAction;
	float ExplodeMod;
	NMS_GameComponents::GcModelExplosionRule::MatchNameEnum MatchName;
	NMS_GameComponents::GcModelExplosionRule::MatchNodeTypeEnum MatchNodeType;
	NMS::NMSString0x20 String;
};

//Dependency: GcModelExplosionRule
struct GcModelExplosionRules
{
	std::vector<NMS_GameComponents::GcModelExplosionRule> Rules;
	float ShipSalvageDisplayScales[10];
	bool UseRules[10];
};


} //namespace NMS_GameComponents

namespace NMS
{

struct EmptyNode
{
	uint8_t Padding;
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcInventoryCostDataEntry
{
	float ClassMultiplier[4];
	float CoolMultiplier;
	int32_t MaxSlots;
	float MaxValueInMillions;
	int32_t MinSlots;
	float MinValueInMillions;
	float TradeInMultiplier;
};

//Dependency: GcInventoryCostDataEntry
struct GcInventoryCostData
{
	NMS_GameComponents::GcInventoryCostDataEntry InventoryCostData[10];
};

//Dependency: NMSString0x10
struct GcInventoryGenerationBaseStatDataEntry
{
	NMS::NMSString0x10 BaseStatID;
	float Max;
	float MaxFixedAdd;
	float Min;
	float MinFixedAdd;
};

//Dependency: GcInventoryGenerationBaseStatDataEntry
struct GcInventoryGenerationBaseStatClassData
{
	std::vector<NMS_GameComponents::GcInventoryGenerationBaseStatDataEntry> BaseStats;
};

//Dependency: GcInventoryGenerationBaseStatClassData
struct GcInventoryGenerationBaseStatData
{
	NMS_GameComponents::GcInventoryGenerationBaseStatClassData BaseStatsPerClass[4];
};

struct GcInventoryClassProbabilities
{
	float ClassProbabilities[4];
};

//Dependency: GcStatsTypes
struct GcInventoryBaseStatBonus
{
	NMS_GameComponents::GcStatsTypes StatType;
	bool LessIsBetter;
};

//Dependency: GcInventoryBaseStatBonus
//Dependency: NMSString0x10
struct GcInventoryBaseStat
{
	NMS::NMSString0x10 BaseStatID;
	NMS::NMSString0x10 LocID;
	std::vector<NMS_GameComponents::GcInventoryBaseStatBonus> StatBonus;
};

struct GcInventoryLayoutSizeType
{
	enum class SizeTypeEnum : uint32_t
	{
		SciSmall = 0,
		SciMedium = 1,
		SciLarge = 2,
		FgtSmall = 3,
		FgtMedium = 4,
		FgtLarge = 5,
		ShuSmall = 6,
		ShtMedium = 7,
		ShtLarge = 8,
		DrpSmall = 9,
		DrpMedium = 10,
		DrpLarge = 11,
		RoySmall = 12,
		RoyMedium = 13,
		RoyLarge = 14,
		AlienSmall = 15,
		AlienMedium = 16,
		AlienLarge = 17,
		SailSmall = 18,
		SailMedium = 19,
		SailLarge = 20,
		RobotSmall = 21,
		RobotMedium = 22,
		RobotLarge = 23,
		WeaponSmall = 24,
		WeaponMedium = 25,
		WeaponLarge = 26,
		FreighterSmall = 27,
		FreighterMedium = 28,
		FreighterLarge = 29,
		VehicleSmall = 30,
		VehicleMedium = 31,
		VehicleLarge = 32,
		ChestSmall = 33,
		ChestMedium = 34,
		ChestLarge = 35,
		ChestCapsule = 36,
		Suit = 37,
		MaintObject = 38,
		RocketLocker = 39,
		FishBaitBox = 40,
		FishingPlatform = 41,
		FoodUnit = 42,
	};

	NMS_GameComponents::GcInventoryLayoutSizeType::SizeTypeEnum SizeType;
};

//Dependency: GcInventoryLayoutSizeType
//Dependency: NMSString0x10
struct GcInventoryTableEntry
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryLayoutSizeType LayoutSizeType;
	int32_t MaxSize;
	int32_t MinSize;
};

struct GcShipInventoryMaxUpgradeCapacity
{
	int32_t MaxCargoInventoryCapacity[4];
	int32_t MaxInventoryCapacity[4];
	int32_t MaxTechInventoryCapacity[4];
};

struct GcInventoryLayoutGenerationBounds
{
	int32_t MaxHeightLarge;
	int32_t MaxHeightSmall;
	int32_t MaxHeightStandard;
	int32_t MaxWidthLarge;
	int32_t MaxWidthSmall;
	int32_t MaxWidthStandard;
};

//Dependency: GcInventoryLayoutGenerationBounds
//Dependency: GcInventoryIndex
struct GcInventoryLayoutGenerationDataEntry
{
	NMS_GameComponents::GcInventoryLayoutGenerationBounds Bounds;
	NMS_GameComponents::GcInventoryLayoutGenerationBounds TechBounds;
	NMS_GameComponents::GcInventoryIndex SpecialTechSlotMaxIndex;
	int32_t MaxCargoSlots;
	int32_t MaxNumSpecialTechSlots;
	int32_t MaxSlots;
	int32_t MaxTechSlots;
	int32_t MinCargoSlots;
	int32_t MinSlots;
	int32_t MinTechSlots;
};

//Dependency: GcInventoryLayoutGenerationDataEntry
struct GcInventoryLayoutGenerationData
{
	NMS_GameComponents::GcInventoryLayoutGenerationDataEntry GenerationDataPerSizeType[43];
};

struct GcWeaponInventoryMaxUpgradeCapacity
{
	int32_t MaxInventoryCapacity[4];
};

//Dependency: GcInventoryCostData
//Dependency: GcInventoryGenerationBaseStatData
//Dependency: GcInventoryClassProbabilities
//Dependency: GcInventoryBaseStat
//Dependency: GcInventoryTableEntry
//Dependency: GcShipInventoryMaxUpgradeCapacity
//Dependency: GcInventoryLayoutGenerationData
//Dependency: GcInventoryCostDataEntry
//Dependency: GcWeaponInventoryMaxUpgradeCapacity
struct GcInventoryTable
{
	NMS_GameComponents::GcInventoryGenerationBaseStatData ShipBaseStatsData[10];
	NMS_GameComponents::GcInventoryGenerationBaseStatData WeaponBaseStatsData[10];
	NMS_GameComponents::GcInventoryGenerationBaseStatData VehicleBaseStatsData;
	std::vector<NMS_GameComponents::GcInventoryBaseStat> BaseStats;
	std::vector<NMS_GameComponents::GcInventoryTableEntry> Table;
	NMS_GameComponents::GcInventoryLayoutGenerationData GenerationData;
	NMS_GameComponents::GcShipInventoryMaxUpgradeCapacity ShipInventoryMaxUpgradeSize[10];
	NMS_GameComponents::GcInventoryCostData ShipCostData;
	NMS_GameComponents::GcInventoryCostDataEntry WeaponCostData[10];
	NMS_GameComponents::GcInventoryClassProbabilities ClassProbabilityData[4];
	NMS_GameComponents::GcInventoryCostDataEntry VehicleCostData;
	NMS_GameComponents::GcWeaponInventoryMaxUpgradeCapacity WeaponInventoryMaxUpgradeSize;
};

struct GcTechnologyCategory
{
	enum class TechnologyCategoryEnum : uint32_t
	{
		Ship = 0,
		Weapon = 1,
		Suit = 2,
		Personal = 3,
		All = 4,
		None = 5,
		Freighter = 6,
		Maintenance = 7,
		Exocraft = 8,
		Colossus = 9,
		Submarine = 10,
		Mech = 11,
		AllVehicles = 12,
		AlienShip = 13,
		AllShips = 14,
		RobotShip = 15,
		AllShipsExceptAlien = 16,
	};

	NMS_GameComponents::GcTechnologyCategory::TechnologyCategoryEnum TechnologyCategory;
};

//Dependency: GcScanEffectData
//Dependency: GcHand
//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x40
struct GcNPCPropInfo
{
	enum class NPCPropAttachLocationEnum : uint32_t
	{
		Hand = 0,
		Wrist = 1,
	};

	NMS_GameComponents::GcScanEffectData ScanEffect;
	NMS::Vector3f AttachRotation;
	NMS::Vector3f AttachTranslation;
	NMS::NMSString0x10 AttachLocator;
	NMS::VariableSizeString Model;
	float AttachScale;
	float AttachScaleGek;
	NMS_GameComponents::GcHand DominantHand;
	NMS_GameComponents::GcNPCPropInfo::NPCPropAttachLocationEnum NPCPropAttachLocation;
	NMS_GameComponents::GcTechnologyCategory ShopType;
	float Weight;
	NMS::NMSString0x40 ScanEffectNodeName;
	bool Hologram;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct GcSeed
{
	uint64_t Seed;
	bool UseSeedValue;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: GcSeed
struct GcInventoryLayout
{
	NMS::GcSeed Seed;
	int32_t Level;
	int32_t Slots;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector2f
{
	float X;
	float Y;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: Vector3f
//Dependency: Vector2f
struct GcCutSceneClouds
{
	NMS::Colour BottomColour;
	NMS::Vector3f InitialOffsetWorldSpace;
	NMS::Colour TopColour;
	NMS::Vector2f StratosphereWindOffset;
	NMS::Vector2f WindOffset;
	float AbsorbtionFactor;
	float AnimScale;
	float AtmosphereEndHeight;
	float AtmosphereStartHeight;
	float Coverage;
	float Density;
	float StratosphereHeight;
	bool ControlClouds;
};

//Dependency: NMSString0x10
struct GcCutSceneTriggerActionData
{
	NMS::NMSString0x10 Action;
	NMS::NMSString0x10 GroupFilter;
	NMS::NMSString0x10 IdFilter;
	NMS::NMSString0x10 Parameter;
};

//Dependency: GcCutSceneTriggerActionData
struct GcCutSceneTriggerInputData
{
	enum class CutSceneKeyPressEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_3 = 2,
		_4 = 3,
		_5 = 4,
		_6 = 5,
		_7 = 6,
		_8 = 7,
		_9 = 8,
		PadUp = 9,
		PadDown = 10,
		PadLeft = 11,
		PadRight = 12,
	};

	std::vector<NMS_GameComponents::GcCutSceneTriggerActionData> Actions;
	NMS_GameComponents::GcCutSceneTriggerInputData::CutSceneKeyPressEnum CutSceneKeyPress;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkPaletteTexture
{
	enum class PaletteEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	enum class ColourAltEnum : uint32_t
	{
		Primary = 0,
		Alternative1 = 1,
		Alternative2 = 2,
		Alternative3 = 3,
		Alternative4 = 4,
		Unique = 5,
		MatchGround = 6,
		None = 7,
	};

	NMS_Toolkit::TkPaletteTexture::ColourAltEnum ColourAlt;
	int32_t Index;
	NMS_Toolkit::TkPaletteTexture::PaletteEnum Palette;
};

//Dependency: TkPaletteTexture
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkProceduralTextureChosenOption
{
	NMS::Colour Colour;
	NMS::NMSString0x20A OptionName;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;
	NMS_Toolkit::TkPaletteTexture Palette;
	bool OverrideColour;
};

//Dependency: TkProceduralTextureChosenOption
struct TkProceduralTextureChosenOptionSampler
{
	std::vector<NMS_Toolkit::TkProceduralTextureChosenOption> Options;
};

//Dependency: TkProceduralTextureChosenOptionSampler
struct TkProceduralTextureChosenOptionList
{
	std::vector<NMS_Toolkit::TkProceduralTextureChosenOptionSampler> Samplers;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkProceduralTextureChosenOptionList
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: GcResource
struct GcResourceElement
{
	NMS::VariableSizeString AltId;
	NMS::VariableSizeString Filename;
	NMS_Toolkit::TkProceduralTextureChosenOptionList ProceduralTexture;
	NMS::GcSeed Seed;
	NMS::GcResource ResHandle;
};

//Dependency: GcResourceElement
//Dependency: VariableSizeString
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcCutSceneSpawnData
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Id;
	std::vector<NMSTemplate> Modules;
	NMS::GcSeed Seed;
	NMS::VariableSizeString TrimmedPath;
	int32_t Guid;
	bool DebugDraw;
	bool EnableAI;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseUberData
{
	enum class DebugNoiseTypeEnum : uint32_t
	{
		Plane = 0,
		Check = 1,
		Sine = 2,
		Uber = 3,
	};

	float AltitudeErosion;
	float AmplifyFeatures;
	NMS_Toolkit::TkNoiseUberData::DebugNoiseTypeEnum DebugNoiseType;
	float Gain;
	float Lacunarity;
	int32_t Octaves;
	float PerturbFeatures;
	float RemapFromMax;
	float RemapFromMin;
	float RemapToMax;
	float RemapToMin;
	float RidgeErosion;
	float SharpToRoundFeatures;
	float SlopeBias;
	float SlopeErosion;
	float SlopeGain;
};

struct TkNoiseOffsetEnum
{
	enum class OffsetTypeEnum : uint32_t
	{
		Zero = 0,
		Base = 1,
		All = 2,
		SeaLevel = 3,
	};

	NMS_Toolkit::TkNoiseOffsetEnum::OffsetTypeEnum OffsetType;
};

struct TkNoiseVoxelTypeEnum
{
	enum class NoiseVoxelTypeEnum : uint32_t
	{
		Base = 0,
		Rock = 1,
		Mountain = 2,
		Sand = 3,
		Cave = 4,
		Substance_1 = 5,
		Substance_2 = 6,
		Substance_3 = 7,
		RandomRock = 8,
		RandomRockOrSubstance = 9,
	};

	NMS_Toolkit::TkNoiseVoxelTypeEnum::NoiseVoxelTypeEnum NoiseVoxelType;
};

//Dependency: TkNoiseUberData
//Dependency: TkNoiseOffsetEnum
//Dependency: TkNoiseVoxelTypeEnum
struct TkNoiseUberLayerData
{
	enum class WaterFadeEnum : uint32_t
	{
		None = 0,
		Above = 1,
		Below = 2,
	};

	NMS_Toolkit::TkNoiseUberData NoiseData;
	float Height;
	float HeightOffset;
	int32_t MaximumLOD;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float PlateauRegionSize;
	int32_t PlateauSharpness;
	float PlateauStratas;
	float RegionGain;
	float RegionRatio;
	float RegionScale;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	NMS_Toolkit::TkNoiseUberLayerData::WaterFadeEnum WaterFade;
	float Width;
	bool Active;
	bool Subtract;
};

struct TkNoiseSuperPrimitiveData
{
	float BottomRadiusOffset;
	float CornerRadiusXY;
	float CornerRadiusZ;
	float Depth;
	float Height;
	float Thickness;
	float Width;
};

struct TkNoiseSuperFormulaData
{
	float Form_m;
	float Form_n1;
	float Form_n2;
	float Form_n3;
};

//Dependency: TkNoiseUberLayerData
//Dependency: TkNoiseVoxelTypeEnum
//Dependency: TkNoiseSuperPrimitiveData
//Dependency: TkNoiseSuperFormulaData
//Dependency: TkNoiseOffsetEnum
//Dependency: VariableSizeString
struct TkNoiseGridData
{
	enum class NoiseGridTypeEnum : uint32_t
	{
		Cube = 0,
		Cone = 1,
		Torus = 2,
		Sphere = 3,
		Cylinder = 4,
		Capsule = 5,
		Corridor = 6,
		Pipe = 7,
		Puck = 8,
		SuperPrimitiveRandom = 9,
		SuperFormula_01 = 10,
		SuperFormula_02 = 11,
		SuperFormula_03 = 12,
		SuperFormula_04 = 13,
		SuperFormula_05 = 14,
		SuperFormula_06 = 15,
		SuperFormula_07 = 16,
		SuperFormula_08 = 17,
		SuperFormulaRandom = 18,
		SuperFormula = 19,
		SuperPrimitive = 20,
		File = 21,
	};

	NMS::VariableSizeString Filename;
	NMS_Toolkit::TkNoiseUberLayerData TurbulenceNoiseLayer;
	NMS_Toolkit::TkNoiseSuperPrimitiveData SuperPrimitive;
	NMS_Toolkit::TkNoiseSuperFormulaData SuperFormula1;
	NMS_Toolkit::TkNoiseSuperFormulaData SuperFormula2;
	float HeightOffset;
	float MaxHeight;
	float MaxHeightOffset;
	int32_t MaximumLOD;
	float MaxWidth;
	float MinHeight;
	float MinHeightOffset;
	float MinWidth;
	NMS_Toolkit::TkNoiseGridData::NoiseGridTypeEnum NoiseGridType;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float Pitch;
	float RandomPrimitive;
	float RegionRatio;
	float RegionScale;
	float Roll;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	float VaryPitch;
	float VaryRoll;
	float VaryYaw;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	float Yaw;
	bool Active;
	bool Hemisphere;
	bool Subtract;
	bool SwapZY;
};

//Dependency: TkNoiseOffsetEnum
//Dependency: TkNoiseVoxelTypeEnum
struct TkNoiseFeatureData
{
	enum class FeatureTypeEnum : uint32_t
	{
		Tube = 0,
		Blob = 1,
	};

	NMS_Toolkit::TkNoiseFeatureData::FeatureTypeEnum FeatureType;
	float Height;
	float HeightOffset;
	float HeightVarianceAmplitude;
	float HeightVarianceFrequency;
	int32_t MaximumLOD;
	int32_t Octaves;
	NMS_Toolkit::TkNoiseOffsetEnum Offset;
	float Ratio;
	float RegionSize;
	int32_t SeedOffset;
	float SmoothRadius;
	float TileBlendMeters;
	NMS_Toolkit::TkNoiseVoxelTypeEnum VoxelType;
	float Width;
	bool Active;
	bool Subtract;
	bool Trench;
};

//Dependency: TkNoiseFeatureData
struct TkNoiseCaveData
{
	NMS_Toolkit::TkNoiseFeatureData Mouth;
	NMS_Toolkit::TkNoiseFeatureData Tunnel;
};

//Dependency: TkNoiseGridData
//Dependency: GcSeed
//Dependency: TkNoiseUberLayerData
//Dependency: TkNoiseVoxelTypeEnum
//Dependency: TkNoiseFeatureData
//Dependency: TkNoiseCaveData
struct TkVoxelGeneratorData
{
	NMS_Toolkit::TkNoiseGridData GridLayers[9];
	NMS::GcSeed BaseSeed;
	NMS_Toolkit::TkNoiseUberLayerData NoiseLayers[8];
	NMS_Toolkit::TkNoiseFeatureData Features[7];
	NMS_Toolkit::TkNoiseCaveData Caves[1];
	float BeachHeight;
	float BuildingSmoothingHeight;
	float BuildingSmoothingRadius;
	float BuildingTextureRadius;
	NMS_Toolkit::TkNoiseVoxelTypeEnum BuildingVoxelType;
	float CaveRoofSmoothingDist;
	float MaximumSeaLevelCaveDepth;
	float MinimumCaveDepth;
	float NoSeaBaseLevel;
	NMS_Toolkit::TkNoiseVoxelTypeEnum ResourceVoxelType;
	float SeaLevel;
	float WaterFadeInDistance;
};

//Dependency: TkVoxelGeneratorData
struct TkVoxelGeneratorSettingsElement
{
	NMS_Toolkit::TkVoxelGeneratorData Max;
	NMS_Toolkit::TkVoxelGeneratorData Min;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcCutSceneClouds
//Dependency: GcCutSceneTriggerInputData
//Dependency: GcCutSceneTriggerActionData
//Dependency: Vector3f
//Dependency: GcCutSceneSpawnData
//Dependency: TkVoxelGeneratorSettingsElement
struct GcCutSceneData
{
	NMS_GameComponents::GcCutSceneClouds Clouds;
	NMS::Vector3f ForcedSunDir;
	NMS_Toolkit::TkVoxelGeneratorSettingsElement VoxelSettings;
	std::vector<NMS_GameComponents::GcCutSceneTriggerInputData> KeyPressActions;
	std::vector<NMS_GameComponents::GcCutSceneTriggerActionData> OnLoadActions;
	std::vector<NMS_GameComponents::GcCutSceneSpawnData> Spawns;
	float FlyCamFoV;
	float FlyCamSmoothFactor;
	float FlyCamSpeedModifier;
	int32_t GuidGenerator;
	bool Active;
	bool AutomaticObjectEditing;
	bool AutoSave;
	bool DebugDraw;
	bool FlyCamSmooth;
	bool ForceSunDir;
	bool UseVoxelSettings;
};

//Dependency: NMSString0x20A
struct GcSeasonalObjectiveOverrides
{
	NMS::NMSString0x20A OverrideObjective;
	NMS::NMSString0x20A OverrideObjectiveTip;
	std::vector<int32_t> ApplicableSeasonNumbers;
};

struct GcMonth
{
	enum class MonthEnum : uint32_t
	{
		January = 0,
		February = 1,
		March = 2,
		April = 3,
		May = 4,
		June = 5,
		July = 6,
		August = 7,
		September = 8,
		October = 9,
		November = 10,
		December = 11,
	};

	NMS_GameComponents::GcMonth::MonthEnum Month;
};

//Dependency: GcMonth
struct GcDate
{
	int32_t Day;
	int32_t Hour;
	int32_t Minute;
	NMS_GameComponents::GcMonth Month;
	int32_t Year;
};

//Dependency: NMSString0x20A
struct GcRewardWikiTopic
{
	NMS::NMSString0x20A Topic;
	bool CentreMessage;
};

struct GcAlienRace
{
	enum class AlienRaceEnum : uint32_t
	{
		Traders = 0,
		Warriors = 1,
		Explorers = 2,
		Robots = 3,
		Atlas = 4,
		Diplomats = 5,
		Exotics = 6,
		None = 7,
		Builders = 8,
	};

	NMS_GameComponents::GcAlienRace::AlienRaceEnum AlienRace;
};

struct GcWordCategoryTableEnum
{
	enum class wordcategorytableEnumEnum : uint32_t
	{
		MISC = 0,
		DIRECTIONS = 1,
		HELP = 2,
		TRADE = 3,
		LORE = 4,
		TECH = 5,
		THREAT = 6,
	};

	NMS_GameComponents::GcWordCategoryTableEnum::wordcategorytableEnumEnum wordcategorytableEnum;
};

struct GcAlienMood
{
	enum class MoodEnum : uint32_t
	{
		Neutral = 0,
		Positive = 1,
		VeryPositive = 2,
		Negative = 3,
		VeryNegative = 4,
		Pity = 5,
		Sad = 6,
		Dead = 7,
		Confused = 8,
		Busy = 9,
	};

	NMS_GameComponents::GcAlienMood::MoodEnum Mood;
};

struct GcNPCPropType
{
	enum class NPCPropEnum : uint32_t
	{
		None = 0,
		Default = 1,
		DontCare = 2,
		IPad = 3,
		RandomHologram = 4,
		HoloBlob = 5,
		HoloFrigate = 6,
		HoloShip = 7,
		HoloMultitool = 8,
		HoloSolarSystem = 9,
		HoloDrone = 10,
		Container = 11,
		Box = 12,
		Cup = 13,
		Staff = 14,
	};

	NMS_GameComponents::GcNPCPropType::NPCPropEnum NPCProp;
};

//Dependency: GcAlienRace
//Dependency: GcAudioWwiseEvents
//Dependency: GcMissionConditionTest
//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcNPCPropType
struct GcAlienPuzzleOption
{
	NMS::NMSString0x20A EnablingConditionId;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A NextInteraction;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A TitleOverride;
	NMS::NMSString0x10 Cost;
	std::vector<NMSTemplate> EnablingConditions;
	std::vector<NMS::NMSString0x10> Rewards;
	NMS_GameComponents::GcAlienRace AlienWordSpecificRace;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcMissionConditionTest EnablingConditionTest;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcAlienRace ResponseLanguageOverride;
	NMS_GameComponents::GcWordCategoryTableEnum WordCategory;
	bool DisplayCost;
	bool IsAlien;
	bool KeepOpen;
	bool MarkInteractionComplete;
	bool OverrideWithAlienWord;
	bool ReseedInteractionOnUse;
	bool SelectedOnBackOut;
	bool SkipStraightToOptionsOnNextPuzzle;
	bool TruncateCost;
};

//Dependency: GcAlienPuzzleOption
//Dependency: NMSString0x10
struct GcAdditionalOptionMissionOverride
{
	NMS_GameComponents::GcAlienPuzzleOption Option;
	std::vector<int32_t> ApplicableSeasons;
	NMS::NMSString0x10 Mission;
	bool MissionMustBeSelected;
};

struct GcDay
{
	enum class DayEnum : uint32_t
	{
		Sunday = 0,
		Monday = 1,
		Tuesday = 2,
		Wednesday = 3,
		Thursday = 4,
		Friday = 5,
		Saturday = 6,
	};

	NMS_GameComponents::GcDay::DayEnum Day;
};

//Dependency: VariableSizeString
struct GcBuildingFilename
{
	NMS::VariableSizeString LSystem[2];
	NMS::VariableSizeString Scene[2];
	NMS::VariableSizeString WFC[2];
};

//Dependency: GcBuildingFilename
struct GcBuildingFilenameList
{
	NMS_GameComponents::GcBuildingFilename BuildingFiles[60];
};

struct GcAccessibleOverride_Layout
{
	enum class AccessibleOverride_LayoutEnum : uint32_t
	{
		PosX = 0,
		PosY = 1,
		LayerWidth = 2,
		LayerHeight = 3,
		MaxWidth = 4,
	};

	NMS_GameComponents::GcAccessibleOverride_Layout::AccessibleOverride_LayoutEnum AccessibleOverride_Layout;
	float FloatValue;
};

struct GcVROverride_Layout
{
	enum class VROverride_LayoutEnum : uint32_t
	{
		PosX = 0,
		PosY = 1,
		LayerWidth = 2,
		LayerHeight = 3,
		MaxWidth = 4,
	};

	float FloatValue;
	NMS_GameComponents::GcVROverride_Layout::VROverride_LayoutEnum VROverride_Layout;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiAlignment
{
	enum class VerticalEnum : uint32_t
	{
		Top = 0,
		Middle = 1,
		Bottom = 2,
	};

	enum class HorizontalEnum : uint32_t
	{
		Left = 0,
		Center = 1,
		Right = 2,
	};

	NMS_Toolkit::TkNGuiAlignment::HorizontalEnum Horizontal;
	NMS_Toolkit::TkNGuiAlignment::VerticalEnum Vertical;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcAccessibleOverride_Layout
//Dependency: GcVROverride_Layout
//Dependency: TkNGuiAlignment
struct GcNGuiLayoutData
{
	std::vector<NMS_GameComponents::GcAccessibleOverride_Layout> AccessibleOverrides;
	std::vector<NMS_GameComponents::GcVROverride_Layout> VROverrides;
	float ConstrainAspect;
	float Height;
	float MaxWidth;
	float PositionX;
	float PositionY;
	float Width;
	NMS_Toolkit::TkNGuiAlignment Align;
	bool Anchor;
	bool AnchorPercent;
	bool ConstrainProportions;
	bool ForceAspect;
	bool HeightPercentage;
	bool SameLine;
	bool SlowCursorOnHover;
	bool WidthPercentage;
};

struct GcNGuiEditorVisibility
{
	enum class EditorVisibilityEnum : uint32_t
	{
		UseData = 0,
		Visible = 1,
		Hidden = 2,
	};

	NMS_GameComponents::GcNGuiEditorVisibility::EditorVisibilityEnum EditorVisibility;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiForcedStyle
{
	enum class NGuiForcedStyleEnum : uint32_t
	{
		None = 0,
		Default = 1,
		Highlight = 2,
		Active = 3,
	};

	NMS_Toolkit::TkNGuiForcedStyle::NGuiForcedStyleEnum NGuiForcedStyle;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiLayoutData
//Dependency: GcNGuiEditorVisibility
//Dependency: TkNGuiForcedStyle
//Dependency: NMSString0x10
struct GcNGuiElementData
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcNGuiEditorVisibility EditorVisible;
	NMS_Toolkit::TkNGuiForcedStyle ForcedStyle;
	bool IgnoreInput;
	bool IsHidden;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNGuiGraphicAnimatedImageData
{
	enum class NGuiImageAnimTypeEnum : uint32_t
	{
		None = 0,
		Animated = 1,
		Scrolling = 2,
	};

	int32_t FramesHorizontal;
	float FramesPerSecond;
	int32_t FramesVertical;
	NMS_Toolkit::TkNGuiGraphicAnimatedImageData::NGuiImageAnimTypeEnum NGuiImageAnimType;
	float ScrollAngle;
	float ScrollSpeed;
	int32_t TotalFrames;
	bool BlendFrames;
};

struct TkNGuiEditorIcons
{
	enum class NGuiEditorIconEnum : uint32_t
	{
		none = 0,
		_0 = 1,
		_1 = 2,
		_2 = 3,
		_3 = 4,
		_4 = 5,
		_5 = 6,
		_6 = 7,
		_7 = 8,
		_8 = 9,
		_9 = 10,
		a = 11,
		address_book = 12,
		address_book_outline = 13,
		address_card = 14,
		address_card_outline = 15,
		align_center = 16,
		align_justify = 17,
		align_left = 18,
		align_right = 19,
		anchor = 20,
		anchor_circle_check = 21,
		anchor_circle_exclamation = 22,
		anchor_circle_xmark = 23,
		anchor_lock = 24,
		angle_down = 25,
		angle_left = 26,
		angle_right = 27,
		angle_up = 28,
		angles_down = 29,
		angles_left = 30,
		angles_right = 31,
		angles_up = 32,
		ankh = 33,
		apple_whole = 34,
		archway = 35,
		arrow_down = 36,
		arrow_down_1_9 = 37,
		arrow_down_9_1 = 38,
		arrow_down_a_z = 39,
		arrow_down_long = 40,
		arrow_down_short_wide = 41,
		arrow_down_up_across_line = 42,
		arrow_down_up_lock = 43,
		arrow_down_wide_short = 44,
		arrow_down_z_a = 45,
		arrow_left = 46,
		arrow_left_long = 47,
		arrow_pointer = 48,
		arrow_right = 49,
		arrow_right_arrow_left = 50,
		arrow_right_from_bracket = 51,
		arrow_right_long = 52,
		arrow_right_to_bracket = 53,
		arrow_right_to_city = 54,
		arrow_rotate_left = 55,
		arrow_rotate_right = 56,
		arrow_trend_down = 57,
		arrow_trend_up = 58,
		arrow_turn_down = 59,
		arrow_turn_up = 60,
		arrow_up = 61,
		arrow_up_1_9 = 62,
		arrow_up_9_1 = 63,
		arrow_up_a_z = 64,
		arrow_up_from_bracket = 65,
		arrow_up_from_ground_water = 66,
		arrow_up_from_water_pump = 67,
		arrow_up_long = 68,
		arrow_up_right_dots = 69,
		arrow_up_right_from_square = 70,
		arrow_up_short_wide = 71,
		arrow_up_wide_short = 72,
		arrow_up_z_a = 73,
		arrows_down_to_line = 74,
		arrows_down_to_people = 75,
		arrows_left_right = 76,
		arrows_left_right_to_line = 77,
		arrows_rotate = 78,
		arrows_spin = 79,
		arrows_split_up_and_left = 80,
		arrows_to_circle = 81,
		arrows_to_dot = 82,
		arrows_to_eye = 83,
		arrows_turn_right = 84,
		arrows_turn_to_dots = 85,
		arrows_up_down = 86,
		arrows_up_down_left_right = 87,
		arrows_up_to_line = 88,
		asterisk = 89,
		at = 90,
		atom = 91,
		audio_description = 92,
		austral_sign = 93,
		award = 94,
		b = 95,
		baby = 96,
		baby_carriage = 97,
		backward = 98,
		backward_fast = 99,
		backward_step = 100,
		bacon = 101,
		bacteria = 102,
		bacterium = 103,
		bag_shopping = 104,
		bahai = 105,
		baht_sign = 106,
		ban = 107,
		ban_smoking = 108,
		bandage = 109,
		bangladeshi_taka_sign = 110,
		barcode = 111,
		bars = 112,
		bars_progress = 113,
		bars_staggered = 114,
		baseball = 115,
		baseball_bat_ball = 116,
		basket_shopping = 117,
		basketball = 118,
		bath = 119,
		battery_empty = 120,
		battery_full = 121,
		battery_half = 122,
		battery_quarter = 123,
		battery_three_quarters = 124,
		bed = 125,
		bed_pulse = 126,
		beer_mug_empty = 127,
		bell = 128,
		bell_outline = 129,
		bell_concierge = 130,
		bell_slash = 131,
		bell_slash_outline = 132,
		bezier_curve = 133,
		bicycle = 134,
		binoculars = 135,
		biohazard = 136,
		bitcoin_sign = 137,
		blender = 138,
		blender_phone = 139,
		blog = 140,
		bold = 141,
		bolt = 142,
		bolt_lightning = 143,
		bomb = 144,
		bone = 145,
		bong = 146,
		book = 147,
		book_atlas = 148,
		book_bible = 149,
		book_bookmark = 150,
		book_journal_whills = 151,
		book_medical = 152,
		book_open = 153,
		book_open_reader = 154,
		book_quran = 155,
		book_skull = 156,
		book_tanakh = 157,
		bookmark = 158,
		bookmark_outline = 159,
		border_all = 160,
		border_none = 161,
		border_top_left = 162,
		bore_hole = 163,
		bottle_droplet = 164,
		bottle_water = 165,
		bowl_food = 166,
		bowl_rice = 167,
		bowling_ball = 168,
		box = 169,
		box_archive = 170,
		box_open = 171,
		box_tissue = 172,
		boxes_packing = 173,
		boxes_stacked = 174,
		braille = 175,
		brain = 176,
		brazilian_real_sign = 177,
		bread_slice = 178,
		bridge = 179,
		bridge_circle_check = 180,
		bridge_circle_exclamation = 181,
		bridge_circle_xmark = 182,
		bridge_lock = 183,
		bridge_water = 184,
		briefcase = 185,
		briefcase_medical = 186,
		broom = 187,
		broom_ball = 188,
		brush = 189,
		bucket = 190,
		bug = 191,
		bug_slash = 192,
		bugs = 193,
		building = 194,
		building_outline = 195,
		building_circle_arrow_right = 196,
		building_circle_check = 197,
		building_circle_exclamation = 198,
		building_circle_xmark = 199,
		building_columns = 200,
		building_flag = 201,
		building_lock = 202,
		building_ngo = 203,
		building_shield = 204,
		building_un = 205,
		building_user = 206,
		building_wheat = 207,
		bullhorn = 208,
		bullseye = 209,
		burger = 210,
		burst = 211,
		bus = 212,
		bus_simple = 213,
		business_time = 214,
		c = 215,
		cable_car = 216,
		cake_candles = 217,
		calculator = 218,
		calendar = 219,
		calendar_outline = 220,
		calendar_check = 221,
		calendar_check_outline = 222,
		calendar_day = 223,
		calendar_days = 224,
		calendar_days_outline = 225,
		calendar_minus = 226,
		calendar_minus_outline = 227,
		calendar_plus = 228,
		calendar_plus_outline = 229,
		calendar_week = 230,
		calendar_xmark = 231,
		calendar_xmark_outline = 232,
		camera = 233,
		camera_retro = 234,
		camera_rotate = 235,
		campground = 236,
		candy_cane = 237,
		cannabis = 238,
		capsules = 239,
		car = 240,
		car_battery = 241,
		car_burst = 242,
		car_on = 243,
		car_rear = 244,
		car_side = 245,
		car_tunnel = 246,
		caravan = 247,
		caret_down = 248,
		caret_left = 249,
		caret_right = 250,
		caret_up = 251,
		carrot = 252,
		cart_arrow_down = 253,
		cart_flatbed = 254,
		cart_flatbed_suitcase = 255,
		cart_plus = 256,
		cart_shopping = 257,
		cash_register = 258,
		cat = 259,
		cedi_sign = 260,
		cent_sign = 261,
		certificate = 262,
		chair = 263,
		chalkboard = 264,
		chalkboard_user = 265,
		champagne_glasses = 266,
		charging_station = 267,
		chart_area = 268,
		chart_bar = 269,
		chart_bar_outline = 270,
		chart_column = 271,
		chart_gantt = 272,
		chart_line = 273,
		chart_pie = 274,
		chart_simple = 275,
		check = 276,
		check_double = 277,
		check_to_slot = 278,
		cheese = 279,
		chess = 280,
		chess_bishop = 281,
		chess_bishop_outline = 282,
		chess_board = 283,
		chess_king = 284,
		chess_king_outline = 285,
		chess_knight = 286,
		chess_knight_outline = 287,
		chess_pawn = 288,
		chess_pawn_outline = 289,
		chess_queen = 290,
		chess_queen_outline = 291,
		chess_rook = 292,
		chess_rook_outline = 293,
		chevron_down = 294,
		chevron_left = 295,
		chevron_right = 296,
		chevron_up = 297,
		child = 298,
		child_combatant = 299,
		child_dress = 300,
		child_reaching = 301,
		children = 302,
		church = 303,
		circle = 304,
		circle_outline = 305,
		circle_arrow_down = 306,
		circle_arrow_left = 307,
		circle_arrow_right = 308,
		circle_arrow_up = 309,
		circle_check = 310,
		circle_check_outline = 311,
		circle_chevron_down = 312,
		circle_chevron_left = 313,
		circle_chevron_right = 314,
		circle_chevron_up = 315,
		circle_dollar_to_slot = 316,
		circle_dot = 317,
		circle_dot_outline = 318,
		circle_down = 319,
		circle_down_outline = 320,
		circle_exclamation = 321,
		circle_h = 322,
		circle_half_stroke = 323,
		circle_info = 324,
		circle_left = 325,
		circle_left_outline = 326,
		circle_minus = 327,
		circle_nodes = 328,
		circle_notch = 329,
		circle_pause = 330,
		circle_pause_outline = 331,
		circle_play = 332,
		circle_play_outline = 333,
		circle_plus = 334,
		circle_question = 335,
		circle_question_outline = 336,
		circle_radiation = 337,
		circle_right = 338,
		circle_right_outline = 339,
		circle_stop = 340,
		circle_stop_outline = 341,
		circle_up = 342,
		circle_up_outline = 343,
		circle_user = 344,
		circle_user_outline = 345,
		circle_xmark = 346,
		circle_xmark_outline = 347,
		city = 348,
		clapperboard = 349,
		clipboard = 350,
		clipboard_outline = 351,
		clipboard_check = 352,
		clipboard_list = 353,
		clipboard_question = 354,
		clipboard_user = 355,
		clock = 356,
		clock_outline = 357,
		clock_rotate_left = 358,
		clone = 359,
		clone_outline = 360,
		closed_captioning = 361,
		closed_captioning_outline = 362,
		cloud = 363,
		cloud_arrow_down = 364,
		cloud_arrow_up = 365,
		cloud_bolt = 366,
		cloud_meatball = 367,
		cloud_moon = 368,
		cloud_moon_rain = 369,
		cloud_rain = 370,
		cloud_showers_heavy = 371,
		cloud_showers_water = 372,
		cloud_sun = 373,
		cloud_sun_rain = 374,
		clover = 375,
		code = 376,
		code_branch = 377,
		code_commit = 378,
		code_compare = 379,
		code_fork = 380,
		code_merge = 381,
		code_pull_request = 382,
		coins = 383,
		colon_sign = 384,
		comment = 385,
		comment_outline = 386,
		comment_dollar = 387,
		comment_dots = 388,
		comment_dots_outline = 389,
		comment_medical = 390,
		comment_slash = 391,
		comment_sms = 392,
		comments = 393,
		comments_outline = 394,
		comments_dollar = 395,
		compact_disc = 396,
		compass = 397,
		compass_outline = 398,
		compass_drafting = 399,
		compress = 400,
		computer = 401,
		computer_mouse = 402,
		cookie = 403,
		cookie_bite = 404,
		copy = 405,
		copy_outline = 406,
		copyright = 407,
		copyright_outline = 408,
		couch = 409,
		cow = 410,
		credit_card = 411,
		credit_card_outline = 412,
		crop = 413,
		crop_simple = 414,
		cross = 415,
		crosshairs = 416,
		crow = 417,
		crown = 418,
		crutch = 419,
		cruzeiro_sign = 420,
		cube = 421,
		cubes = 422,
		cubes_stacked = 423,
		d = 424,
		database = 425,
		delete_left = 426,
		democrat = 427,
		desktop = 428,
		dharmachakra = 429,
		diagram_next = 430,
		diagram_predecessor = 431,
		diagram_project = 432,
		diagram_successor = 433,
		diamond = 434,
		diamond_turn_right = 435,
		dice = 436,
		dice_d20 = 437,
		dice_d6 = 438,
		dice_five = 439,
		dice_four = 440,
		dice_one = 441,
		dice_six = 442,
		dice_three = 443,
		dice_two = 444,
		disease = 445,
		display = 446,
		divide = 447,
		dna = 448,
		dog = 449,
		dollar_sign = 450,
		dolly = 451,
		dong_sign = 452,
		door_closed = 453,
		door_open = 454,
		dove = 455,
		down_left_and_up_right_to_center = 456,
		down_long = 457,
		download = 458,
		dragon = 459,
		draw_polygon = 460,
		droplet = 461,
		droplet_slash = 462,
		drum = 463,
		drum_steelpan = 464,
		drumstick_bite = 465,
		dumbbell = 466,
		dumpster = 467,
		dumpster_fire = 468,
		dungeon = 469,
		e = 470,
		ear_deaf = 471,
		ear_listen = 472,
		earth_africa = 473,
		earth_americas = 474,
		earth_asia = 475,
		earth_europe = 476,
		earth_oceania = 477,
		egg = 478,
		eject = 479,
		elevator = 480,
		ellipsis = 481,
		ellipsis_vertical = 482,
		envelope = 483,
		envelope_outline = 484,
		envelope_circle_check = 485,
		envelope_open = 486,
		envelope_open_outline = 487,
		envelope_open_text = 488,
		envelopes_bulk = 489,
		equals = 490,
		eraser = 491,
		ethernet = 492,
		euro_sign = 493,
		exclamation = 494,
		expand = 495,
		explosion = 496,
		eye = 497,
		eye_outline = 498,
		eye_dropper = 499,
		eye_low_vision = 500,
		eye_slash = 501,
		eye_slash_outline = 502,
		f = 503,
		face_angry = 504,
		face_angry_outline = 505,
		face_dizzy = 506,
		face_dizzy_outline = 507,
		face_flushed = 508,
		face_flushed_outline = 509,
		face_frown = 510,
		face_frown_outline = 511,
		face_frown_open = 512,
		face_frown_open_outline = 513,
		face_grimace = 514,
		face_grimace_outline = 515,
		face_grin = 516,
		face_grin_outline = 517,
		face_grin_beam = 518,
		face_grin_beam_outline = 519,
		face_grin_beam_sweat = 520,
		face_grin_beam_sweat_outline = 521,
		face_grin_hearts = 522,
		face_grin_hearts_outline = 523,
		face_grin_squint = 524,
		face_grin_squint_outline = 525,
		face_grin_squint_tears = 526,
		face_grin_squint_tears_outline = 527,
		face_grin_stars = 528,
		face_grin_stars_outline = 529,
		face_grin_tears = 530,
		face_grin_tears_outline = 531,
		face_grin_tongue = 532,
		face_grin_tongue_outline = 533,
		face_grin_tongue_squint = 534,
		face_grin_tongue_squint_outline = 535,
		face_grin_tongue_wink = 536,
		face_grin_tongue_wink_outline = 537,
		face_grin_wide = 538,
		face_grin_wide_outline = 539,
		face_grin_wink = 540,
		face_grin_wink_outline = 541,
		face_kiss = 542,
		face_kiss_outline = 543,
		face_kiss_beam = 544,
		face_kiss_beam_outline = 545,
		face_kiss_wink_heart = 546,
		face_kiss_wink_heart_outline = 547,
		face_laugh = 548,
		face_laugh_outline = 549,
		face_laugh_beam = 550,
		face_laugh_beam_outline = 551,
		face_laugh_squint = 552,
		face_laugh_squint_outline = 553,
		face_laugh_wink = 554,
		face_laugh_wink_outline = 555,
		face_meh = 556,
		face_meh_outline = 557,
		face_meh_blank = 558,
		face_meh_blank_outline = 559,
		face_rolling_eyes = 560,
		face_rolling_eyes_outline = 561,
		face_sad_cry = 562,
		face_sad_cry_outline = 563,
		face_sad_tear = 564,
		face_sad_tear_outline = 565,
		face_smile = 566,
		face_smile_outline = 567,
		face_smile_beam = 568,
		face_smile_beam_outline = 569,
		face_smile_wink = 570,
		face_smile_wink_outline = 571,
		face_surprise = 572,
		face_surprise_outline = 573,
		face_tired = 574,
		face_tired_outline = 575,
		fan = 576,
		faucet = 577,
		faucet_drip = 578,
		fax = 579,
		feather = 580,
		feather_pointed = 581,
		ferry = 582,
		file = 583,
		file_outline = 584,
		file_arrow_down = 585,
		file_arrow_up = 586,
		file_audio = 587,
		file_audio_outline = 588,
		file_circle_check = 589,
		file_circle_exclamation = 590,
		file_circle_minus = 591,
		file_circle_plus = 592,
		file_circle_question = 593,
		file_circle_xmark = 594,
		file_code = 595,
		file_code_outline = 596,
		file_contract = 597,
		file_csv = 598,
		file_excel = 599,
		file_excel_outline = 600,
		file_export = 601,
		file_image = 602,
		file_image_outline = 603,
		file_import = 604,
		file_invoice = 605,
		file_invoice_dollar = 606,
		file_lines = 607,
		file_lines_outline = 608,
		file_medical = 609,
		file_pdf = 610,
		file_pdf_outline = 611,
		file_pen = 612,
		file_powerpoint = 613,
		file_powerpoint_outline = 614,
		file_prescription = 615,
		file_shield = 616,
		file_signature = 617,
		file_video = 618,
		file_video_outline = 619,
		file_waveform = 620,
		file_word = 621,
		file_word_outline = 622,
		file_zipper = 623,
		file_zipper_outline = 624,
		fill = 625,
		fill_drip = 626,
		film = 627,
		filter = 628,
		filter_circle_dollar = 629,
		filter_circle_xmark = 630,
		fingerprint = 631,
		fire = 632,
		fire_burner = 633,
		fire_extinguisher = 634,
		fire_flame_curved = 635,
		fire_flame_simple = 636,
		fish = 637,
		fish_fins = 638,
		flag = 639,
		flag_outline = 640,
		flag_checkered = 641,
		flag_usa = 642,
		flask = 643,
		flask_vial = 644,
		floppy_disk = 645,
		floppy_disk_outline = 646,
		florin_sign = 647,
		folder = 648,
		folder_outline = 649,
		folder_closed = 650,
		folder_closed_outline = 651,
		folder_minus = 652,
		folder_open = 653,
		folder_open_outline = 654,
		folder_plus = 655,
		folder_tree = 656,
		font = 657,
		font_awesome = 658,
		font_awesome_outline = 659,
		football = 660,
		forward = 661,
		forward_fast = 662,
		forward_step = 663,
		franc_sign = 664,
		frog = 665,
		futbol = 666,
		futbol_outline = 667,
		g = 668,
		gamepad = 669,
		gas_pump = 670,
		gauge = 671,
		gauge_high = 672,
		gauge_simple = 673,
		gauge_simple_high = 674,
		gavel = 675,
		gear = 676,
		gears = 677,
		gem = 678,
		gem_outline = 679,
		genderless = 680,
		ghost = 681,
		gift = 682,
		gifts = 683,
		glass_water = 684,
		glass_water_droplet = 685,
		glasses = 686,
		globe = 687,
		golf_ball_tee = 688,
		gopuram = 689,
		graduation_cap = 690,
		greater_than = 691,
		greater_than_equal = 692,
		grip = 693,
		grip_lines = 694,
		grip_lines_vertical = 695,
		grip_vertical = 696,
		group_arrows_rotate = 697,
		guarani_sign = 698,
		guitar = 699,
		gun = 700,
		h = 701,
		hammer = 702,
		hamsa = 703,
		hand = 704,
		hand_outline = 705,
		hand_back_fist = 706,
		hand_back_fist_outline = 707,
		hand_dots = 708,
		hand_fist = 709,
		hand_holding = 710,
		hand_holding_dollar = 711,
		hand_holding_droplet = 712,
		hand_holding_hand = 713,
		hand_holding_heart = 714,
		hand_holding_medical = 715,
		hand_lizard = 716,
		hand_lizard_outline = 717,
		hand_middle_finger = 718,
		hand_peace = 719,
		hand_peace_outline = 720,
		hand_point_down = 721,
		hand_point_down_outline = 722,
		hand_point_left = 723,
		hand_point_left_outline = 724,
		hand_point_right = 725,
		hand_point_right_outline = 726,
		hand_point_up = 727,
		hand_point_up_outline = 728,
		hand_pointer = 729,
		hand_pointer_outline = 730,
		hand_scissors = 731,
		hand_scissors_outline = 732,
		hand_sparkles = 733,
		hand_spock = 734,
		hand_spock_outline = 735,
		handcuffs = 736,
		hands = 737,
		hands_asl_interpreting = 738,
		hands_bound = 739,
		hands_bubbles = 740,
		hands_clapping = 741,
		hands_holding = 742,
		hands_holding_child = 743,
		hands_holding_circle = 744,
		hands_praying = 745,
		handshake = 746,
		handshake_outline = 747,
		handshake_angle = 748,
		handshake_simple = 749,
		handshake_simple_slash = 750,
		handshake_slash = 751,
		hanukiah = 752,
		hard_drive = 753,
		hard_drive_outline = 754,
		hashtag = 755,
		hat_cowboy = 756,
		hat_cowboy_side = 757,
		hat_wizard = 758,
		head_side_cough = 759,
		head_side_cough_slash = 760,
		head_side_mask = 761,
		head_side_virus = 762,
		heading = 763,
		headphones = 764,
		headphones_simple = 765,
		headset = 766,
		heart = 767,
		heart_outline = 768,
		heart_circle_bolt = 769,
		heart_circle_check = 770,
		heart_circle_exclamation = 771,
		heart_circle_minus = 772,
		heart_circle_plus = 773,
		heart_circle_xmark = 774,
		heart_crack = 775,
		heart_pulse = 776,
		helicopter = 777,
		helicopter_symbol = 778,
		helmet_safety = 779,
		helmet_un = 780,
		highlighter = 781,
		hill_avalanche = 782,
		hill_rockslide = 783,
		hippo = 784,
		hockey_puck = 785,
		holly_berry = 786,
		horse = 787,
		horse_head = 788,
		hospital = 789,
		hospital_outline = 790,
		hospital_user = 791,
		hot_tub_person = 792,
		hotdog = 793,
		hotel = 794,
		hourglass = 795,
		hourglass_outline = 796,
		hourglass_end = 797,
		hourglass_half = 798,
		hourglass_half_outline = 799,
		hourglass_start = 800,
		house = 801,
		house_chimney = 802,
		house_chimney_crack = 803,
		house_chimney_medical = 804,
		house_chimney_user = 805,
		house_chimney_window = 806,
		house_circle_check = 807,
		house_circle_exclamation = 808,
		house_circle_xmark = 809,
		house_crack = 810,
		house_fire = 811,
		house_flag = 812,
		house_flood_water = 813,
		house_flood_water_circle_arrow_right = 814,
		house_laptop = 815,
		house_lock = 816,
		house_medical = 817,
		house_medical_circle_check = 818,
		house_medical_circle_exclamation = 819,
		house_medical_circle_xmark = 820,
		house_medical_flag = 821,
		house_signal = 822,
		house_tsunami = 823,
		house_user = 824,
		hryvnia_sign = 825,
		hurricane = 826,
		i = 827,
		i_cursor = 828,
		ice_cream = 829,
		icicles = 830,
		icons = 831,
		id_badge = 832,
		id_badge_outline = 833,
		id_card = 834,
		id_card_outline = 835,
		id_card_clip = 836,
		igloo = 837,
		image = 838,
		image_outline = 839,
		image_portrait = 840,
		images = 841,
		images_outline = 842,
		inbox = 843,
		indent = 844,
		indian_rupee_sign = 845,
		industry = 846,
		infinity = 847,
		info = 848,
		italic = 849,
		j = 850,
		jar = 851,
		jar_wheat = 852,
		jedi = 853,
		jet_fighter = 854,
		jet_fighter_up = 855,
		joint = 856,
		jug_detergent = 857,
		k = 858,
		kaaba = 859,
		key = 860,
		keyboard = 861,
		keyboard_outline = 862,
		khanda = 863,
		kip_sign = 864,
		kit_medical = 865,
		kitchen_set = 866,
		kiwi_bird = 867,
		l = 868,
		land_mine_on = 869,
		landmark = 870,
		landmark_dome = 871,
		landmark_flag = 872,
		language = 873,
		laptop = 874,
		laptop_code = 875,
		laptop_file = 876,
		laptop_medical = 877,
		lari_sign = 878,
		layer_group = 879,
		leaf = 880,
		left_long = 881,
		left_right = 882,
		lemon = 883,
		lemon_outline = 884,
		less_than = 885,
		less_than_equal = 886,
		life_ring = 887,
		life_ring_outline = 888,
		lightbulb = 889,
		lightbulb_outline = 890,
		lines_leaning = 891,
		link = 892,
		link_slash = 893,
		lira_sign = 894,
		list = 895,
		list_check = 896,
		list_ol = 897,
		list_ul = 898,
		litecoin_sign = 899,
		location_arrow = 900,
		location_crosshairs = 901,
		location_dot = 902,
		location_pin = 903,
		location_pin_lock = 904,
		Lock = 905,
		lock_open = 906,
		locust = 907,
		lungs = 908,
		lungs_virus = 909,
		m = 910,
		magnet = 911,
		magnifying_glass = 912,
		magnifying_glass_arrow_right = 913,
		magnifying_glass_chart = 914,
		magnifying_glass_dollar = 915,
		magnifying_glass_location = 916,
		magnifying_glass_minus = 917,
		magnifying_glass_plus = 918,
		manat_sign = 919,
		map = 920,
		map_outline = 921,
		map_location = 922,
		map_location_dot = 923,
		map_pin = 924,
		marker = 925,
		mars = 926,
		mars_and_venus = 927,
		mars_and_venus_burst = 928,
		mars_double = 929,
		mars_stroke = 930,
		mars_stroke_right = 931,
		mars_stroke_up = 932,
		martini_glass = 933,
		martini_glass_citrus = 934,
		martini_glass_empty = 935,
		mask = 936,
		mask_face = 937,
		mask_ventilator = 938,
		masks_theater = 939,
		mattress_pillow = 940,
		maximize = 941,
		medal = 942,
		memory = 943,
		menorah = 944,
		mercury = 945,
		message = 946,
		message_outline = 947,
		meteor = 948,
		microchip = 949,
		microphone = 950,
		microphone_lines = 951,
		microphone_lines_slash = 952,
		microphone_slash = 953,
		microscope = 954,
		mill_sign = 955,
		minimize = 956,
		minus = 957,
		mitten = 958,
		mobile = 959,
		mobile_button = 960,
		mobile_retro = 961,
		mobile_screen = 962,
		mobile_screen_button = 963,
		money_bill = 964,
		money_bill_1 = 965,
		money_bill_1_outline = 966,
		money_bill_1_wave = 967,
		money_bill_transfer = 968,
		money_bill_trend_up = 969,
		money_bill_wave = 970,
		money_bill_wheat = 971,
		money_bills = 972,
		money_check = 973,
		money_check_dollar = 974,
		monument = 975,
		moon = 976,
		moon_outline = 977,
		mortar_pestle = 978,
		mosque = 979,
		mosquito = 980,
		mosquito_net = 981,
		motorcycle = 982,
		mound = 983,
		mountain = 984,
		mountain_city = 985,
		mountain_sun = 986,
		mug_hot = 987,
		mug_saucer = 988,
		music = 989,
		n = 990,
		naira_sign = 991,
		network_wired = 992,
		neuter = 993,
		newspaper = 994,
		newspaper_outline = 995,
		not_equal = 996,
		notdef = 997,
		note_sticky = 998,
		note_sticky_outline = 999,
		notes_medical = 1000,
		o = 1001,
		object_group = 1002,
		object_group_outline = 1003,
		object_ungroup = 1004,
		object_ungroup_outline = 1005,
		oil_can = 1006,
		oil_well = 1007,
		om = 1008,
		otter = 1009,
		outdent = 1010,
		p = 1011,
		pager = 1012,
		paint_roller = 1013,
		paintbrush = 1014,
		palette = 1015,
		pallet = 1016,
		panorama = 1017,
		paper_plane = 1018,
		paper_plane_outline = 1019,
		paperclip = 1020,
		parachute_box = 1021,
		paragraph = 1022,
		passport = 1023,
		paste = 1024,
		paste_outline = 1025,
		pause = 1026,
		paw = 1027,
		peace = 1028,
		pen = 1029,
		pen_clip = 1030,
		pen_fancy = 1031,
		pen_nib = 1032,
		pen_ruler = 1033,
		pen_to_square = 1034,
		pen_to_square_outline = 1035,
		pencil = 1036,
		people_arrows = 1037,
		people_carry_box = 1038,
		people_group = 1039,
		people_line = 1040,
		people_pulling = 1041,
		people_robbery = 1042,
		people_roof = 1043,
		pepper_hot = 1044,
		percent = 1045,
		person = 1046,
		person_arrow_down_to_line = 1047,
		person_arrow_up_from_line = 1048,
		person_biking = 1049,
		person_booth = 1050,
		person_breastfeeding = 1051,
		person_burst = 1052,
		person_cane = 1053,
		person_chalkboard = 1054,
		person_circle_check = 1055,
		person_circle_exclamation = 1056,
		person_circle_minus = 1057,
		person_circle_plus = 1058,
		person_circle_question = 1059,
		person_circle_xmark = 1060,
		person_digging = 1061,
		person_dots_from_line = 1062,
		person_dress = 1063,
		person_dress_burst = 1064,
		person_drowning = 1065,
		person_falling = 1066,
		person_falling_burst = 1067,
		person_half_dress = 1068,
		person_harassing = 1069,
		person_hiking = 1070,
		person_military_pointing = 1071,
		person_military_rifle = 1072,
		person_military_to_person = 1073,
		person_praying = 1074,
		person_pregnant = 1075,
		person_rays = 1076,
		person_rifle = 1077,
		person_running = 1078,
		person_shelter = 1079,
		person_skating = 1080,
		person_skiing = 1081,
		person_skiing_nordic = 1082,
		person_snowboarding = 1083,
		person_swimming = 1084,
		person_through_window = 1085,
		person_walking = 1086,
		person_walking_arrow_loop_left = 1087,
		person_walking_arrow_right = 1088,
		person_walking_dashed_line_arrow_right = 1089,
		person_walking_luggage = 1090,
		person_walking_with_cane = 1091,
		peseta_sign = 1092,
		peso_sign = 1093,
		phone = 1094,
		phone_flip = 1095,
		phone_slash = 1096,
		phone_volume = 1097,
		photo_film = 1098,
		piggy_bank = 1099,
		pills = 1100,
		pizza_slice = 1101,
		place_of_worship = 1102,
		plane = 1103,
		plane_arrival = 1104,
		plane_circle_check = 1105,
		plane_circle_exclamation = 1106,
		plane_circle_xmark = 1107,
		plane_departure = 1108,
		plane_lock = 1109,
		plane_slash = 1110,
		plane_up = 1111,
		plant_wilt = 1112,
		plate_wheat = 1113,
		play = 1114,
		plug = 1115,
		plug_circle_bolt = 1116,
		plug_circle_check = 1117,
		plug_circle_exclamation = 1118,
		plug_circle_minus = 1119,
		plug_circle_plus = 1120,
		plug_circle_xmark = 1121,
		plus = 1122,
		plus_minus = 1123,
		podcast = 1124,
		poo = 1125,
		poo_storm = 1126,
		poop = 1127,
		power_off = 1128,
		prescription = 1129,
		prescription_bottle = 1130,
		prescription_bottle_medical = 1131,
		print = 1132,
		pump_medical = 1133,
		pump_soap = 1134,
		puzzle_piece = 1135,
		q = 1136,
		qrcode = 1137,
		question = 1138,
		quote_left = 1139,
		quote_right = 1140,
		r = 1141,
		radiation = 1142,
		radio = 1143,
		rainbow = 1144,
		ranking_star = 1145,
		receipt = 1146,
		record_vinyl = 1147,
		rectangle_ad = 1148,
		rectangle_list = 1149,
		rectangle_list_outline = 1150,
		rectangle_xmark = 1151,
		rectangle_xmark_outline = 1152,
		recycle = 1153,
		registered = 1154,
		registered_outline = 1155,
		repeat = 1156,
		reply = 1157,
		reply_all = 1158,
		republican = 1159,
		restroom = 1160,
		retweet = 1161,
		ribbon = 1162,
		right_from_bracket = 1163,
		right_left = 1164,
		right_long = 1165,
		right_to_bracket = 1166,
		ring = 1167,
		road = 1168,
		road_barrier = 1169,
		road_bridge = 1170,
		road_circle_check = 1171,
		road_circle_exclamation = 1172,
		road_circle_xmark = 1173,
		road_lock = 1174,
		road_spikes = 1175,
		robot = 1176,
		rocket = 1177,
		rotate = 1178,
		rotate_left = 1179,
		rotate_right = 1180,
		route = 1181,
		rss = 1182,
		ruble_sign = 1183,
		rug = 1184,
		ruler = 1185,
		ruler_combined = 1186,
		ruler_horizontal = 1187,
		ruler_vertical = 1188,
		rupee_sign = 1189,
		rupiah_sign = 1190,
		s = 1191,
		sack_dollar = 1192,
		sack_xmark = 1193,
		sailboat = 1194,
		satellite = 1195,
		satellite_dish = 1196,
		scale_balanced = 1197,
		scale_unbalanced = 1198,
		scale_unbalanced_flip = 1199,
		school = 1200,
		school_circle_check = 1201,
		school_circle_exclamation = 1202,
		school_circle_xmark = 1203,
		school_flag = 1204,
		school_lock = 1205,
		scissors = 1206,
		screwdriver = 1207,
		screwdriver_wrench = 1208,
		scroll = 1209,
		scroll_torah = 1210,
		sd_card = 1211,
		section = 1212,
		seedling = 1213,
		server = 1214,
		shapes = 1215,
		share = 1216,
		share_from_square = 1217,
		share_from_square_outline = 1218,
		share_nodes = 1219,
		sheet_plastic = 1220,
		shekel_sign = 1221,
		shield = 1222,
		shield_cat = 1223,
		shield_dog = 1224,
		shield_halved = 1225,
		shield_heart = 1226,
		shield_virus = 1227,
		ship = 1228,
		shirt = 1229,
		shoe_prints = 1230,
		shop = 1231,
		shop_lock = 1232,
		shop_slash = 1233,
		shower = 1234,
		shrimp = 1235,
		shuffle = 1236,
		shuttle_space = 1237,
		sign_hanging = 1238,
		signal = 1239,
		signature = 1240,
		signs_post = 1241,
		sim_card = 1242,
		sink = 1243,
		sitemap = 1244,
		skull = 1245,
		skull_crossbones = 1246,
		slash = 1247,
		sleigh = 1248,
		sliders = 1249,
		smog = 1250,
		smoking = 1251,
		snowflake = 1252,
		snowflake_outline = 1253,
		snowman = 1254,
		snowplow = 1255,
		soap = 1256,
		socks = 1257,
		solar_panel = 1258,
		sort = 1259,
		sort_down = 1260,
		sort_up = 1261,
		spa = 1262,
		spaghetti_monster_flying = 1263,
		spell_check = 1264,
		spider = 1265,
		spinner = 1266,
		splotch = 1267,
		spoon = 1268,
		spray_can = 1269,
		spray_can_sparkles = 1270,
		square = 1271,
		square_outline = 1272,
		square_arrow_up_right = 1273,
		square_caret_down = 1274,
		square_caret_down_outline = 1275,
		square_caret_left = 1276,
		square_caret_left_outline = 1277,
		square_caret_right = 1278,
		square_caret_right_outline = 1279,
		square_caret_up = 1280,
		square_caret_up_outline = 1281,
		square_check = 1282,
		square_check_outline = 1283,
		square_envelope = 1284,
		square_full = 1285,
		square_full_outline = 1286,
		square_h = 1287,
		square_minus = 1288,
		square_minus_outline = 1289,
		square_nfi = 1290,
		square_parking = 1291,
		square_pen = 1292,
		square_person_confined = 1293,
		square_phone = 1294,
		square_phone_flip = 1295,
		square_plus = 1296,
		square_plus_outline = 1297,
		square_poll_horizontal = 1298,
		square_poll_vertical = 1299,
		square_root_variable = 1300,
		square_rss = 1301,
		square_share_nodes = 1302,
		square_up_right = 1303,
		square_virus = 1304,
		square_xmark = 1305,
		staff_snake = 1306,
		stairs = 1307,
		stamp = 1308,
		stapler = 1309,
		star = 1310,
		star_outline = 1311,
		star_and_crescent = 1312,
		star_half = 1313,
		star_half_outline = 1314,
		star_half_stroke = 1315,
		star_half_stroke_outline = 1316,
		star_of_david = 1317,
		star_of_life = 1318,
		sterling_sign = 1319,
		stethoscope = 1320,
		stop = 1321,
		stopwatch = 1322,
		stopwatch_20 = 1323,
		store = 1324,
		store_slash = 1325,
		street_view = 1326,
		strikethrough = 1327,
		stroopwafel = 1328,
		subscript = 1329,
		suitcase = 1330,
		suitcase_medical = 1331,
		suitcase_rolling = 1332,
		sun = 1333,
		sun_outline = 1334,
		sun_plant_wilt = 1335,
		superscript = 1336,
		swatchbook = 1337,
		synagogue = 1338,
		syringe = 1339,
		t = 1340,
		table = 1341,
		table_cells = 1342,
		table_cells_large = 1343,
		table_columns = 1344,
		table_list = 1345,
		table_tennis_paddle_ball = 1346,
		tablet = 1347,
		tablet_button = 1348,
		tablet_screen_button = 1349,
		tablets = 1350,
		tachograph_digital = 1351,
		tag = 1352,
		tags = 1353,
		tape = 1354,
		tarp = 1355,
		tarp_droplet = 1356,
		taxi = 1357,
		teeth = 1358,
		teeth_open = 1359,
		temperature_arrow_down = 1360,
		temperature_arrow_up = 1361,
		temperature_empty = 1362,
		temperature_full = 1363,
		temperature_half = 1364,
		temperature_high = 1365,
		temperature_low = 1366,
		temperature_quarter = 1367,
		temperature_three_quarters = 1368,
		tenge_sign = 1369,
		tent = 1370,
		tent_arrow_down_to_line = 1371,
		tent_arrow_left_right = 1372,
		tent_arrow_turn_left = 1373,
		tent_arrows_down = 1374,
		tents = 1375,
		terminal = 1376,
		text_height = 1377,
		text_slash = 1378,
		text_width = 1379,
		thermometer = 1380,
		thumbs_down = 1381,
		thumbs_down_outline = 1382,
		thumbs_up = 1383,
		thumbs_up_outline = 1384,
		thumbtack = 1385,
		ticket = 1386,
		ticket_simple = 1387,
		timeline = 1388,
		toggle_off = 1389,
		toggle_on = 1390,
		toilet = 1391,
		toilet_paper = 1392,
		toilet_paper_slash = 1393,
		toilet_portable = 1394,
		toilets_portable = 1395,
		toolbox = 1396,
		tooth = 1397,
		torii_gate = 1398,
		tornado = 1399,
		tower_broadcast = 1400,
		tower_cell = 1401,
		tower_observation = 1402,
		tractor = 1403,
		trademark = 1404,
		traffic_light = 1405,
		trailer = 1406,
		train = 1407,
		train_subway = 1408,
		train_tram = 1409,
		transgender = 1410,
		trash = 1411,
		trash_arrow_up = 1412,
		trash_can = 1413,
		trash_can_outline = 1414,
		trash_can_arrow_up = 1415,
		tree = 1416,
		tree_city = 1417,
		triangle_exclamation = 1418,
		trophy = 1419,
		trowel = 1420,
		trowel_bricks = 1421,
		truck = 1422,
		truck_arrow_right = 1423,
		truck_droplet = 1424,
		truck_fast = 1425,
		truck_field = 1426,
		truck_field_un = 1427,
		truck_front = 1428,
		truck_medical = 1429,
		truck_monster = 1430,
		truck_moving = 1431,
		truck_pickup = 1432,
		truck_plane = 1433,
		truck_ramp_box = 1434,
		tty = 1435,
		turkish_lira_sign = 1436,
		turn_down = 1437,
		turn_up = 1438,
		tv = 1439,
		u = 1440,
		umbrella = 1441,
		umbrella_beach = 1442,
		underline = 1443,
		universal_access = 1444,
		unlock = 1445,
		unlock_keyhole = 1446,
		up_down = 1447,
		up_down_left_right = 1448,
		up_long = 1449,
		up_right_and_down_left_from_center = 1450,
		up_right_from_square = 1451,
		upload = 1452,
		user = 1453,
		user_outline = 1454,
		user_astronaut = 1455,
		user_check = 1456,
		user_clock = 1457,
		user_doctor = 1458,
		user_gear = 1459,
		user_graduate = 1460,
		user_group = 1461,
		user_injured = 1462,
		user_large = 1463,
		user_large_slash = 1464,
		user_lock = 1465,
		user_minus = 1466,
		user_ninja = 1467,
		user_nurse = 1468,
		user_pen = 1469,
		user_plus = 1470,
		user_secret = 1471,
		user_shield = 1472,
		user_slash = 1473,
		user_tag = 1474,
		user_tie = 1475,
		user_xmark = 1476,
		users = 1477,
		users_between_lines = 1478,
		users_gear = 1479,
		users_line = 1480,
		users_rays = 1481,
		users_rectangle = 1482,
		users_slash = 1483,
		users_viewfinder = 1484,
		utensils = 1485,
		v = 1486,
		van_shuttle = 1487,
		vault = 1488,
		vector_square = 1489,
		venus = 1490,
		venus_double = 1491,
		venus_mars = 1492,
		vest = 1493,
		vest_patches = 1494,
		vial = 1495,
		vial_circle_check = 1496,
		vial_virus = 1497,
		vials = 1498,
		video = 1499,
		video_slash = 1500,
		vihara = 1501,
		virus = 1502,
		virus_covid = 1503,
		virus_covid_slash = 1504,
		virus_slash = 1505,
		viruses = 1506,
		voicemail = 1507,
		volcano = 1508,
		volleyball = 1509,
		volume_high = 1510,
		volume_low = 1511,
		volume_off = 1512,
		volume_xmark = 1513,
		vr_cardboard = 1514,
		w = 1515,
		walkie_talkie = 1516,
		wallet = 1517,
		wand_magic = 1518,
		wand_magic_sparkles = 1519,
		wand_sparkles = 1520,
		warehouse = 1521,
		water = 1522,
		water_ladder = 1523,
		wave_square = 1524,
		weight_hanging = 1525,
		weight_scale = 1526,
		wheat_awn = 1527,
		wheat_awn_circle_exclamation = 1528,
		wheelchair = 1529,
		wheelchair_move = 1530,
		whiskey_glass = 1531,
		wifi = 1532,
		wind = 1533,
		window_maximize = 1534,
		window_maximize_outline = 1535,
		window_minimize = 1536,
		window_minimize_outline = 1537,
		window_restore = 1538,
		window_restore_outline = 1539,
		wine_bottle = 1540,
		wine_glass = 1541,
		wine_glass_empty = 1542,
		won_sign = 1543,
		worm = 1544,
		wrench = 1545,
		x = 1546,
		x_ray = 1547,
		xmark = 1548,
		xmarks_lines = 1549,
		y = 1550,
		yen_sign = 1551,
		yin_yang = 1552,
		z = 1553,
	};

	NMS_Toolkit::TkNGuiEditorIcons::NGuiEditorIconEnum NGuiEditorIcon;
};

//Dependency: TkNGuiGraphicAnimatedImageData
//Dependency: TkNGuiEditorIcons
//Dependency: Colour32
struct TkNGuiGraphicStyleData
{
	enum class ShapeEnum : uint32_t
	{
		Rectangle = 0,
		Ellipse = 1,
		Line = 2,
		LineInverted = 3,
		Bezier = 4,
		BezierInverted = 5,
		BezierWide = 6,
		BezierWideInverted = 7,
	};

	enum class GradientEnum : uint32_t
	{
		None = 0,
		Vertical = 1,
		Horizontal = 2,
		HorizontalBounce = 3,
		Radial = 4,
		Box = 5,
	};

	NMS_Toolkit::TkNGuiGraphicAnimatedImageData Animated;
	float CornerRadius;
	float Desaturation;
	NMS_Toolkit::TkNGuiEditorIcons EditorIcon;
	float GradientEndOffset;
	float GradientStartOffset;
	int32_t Image;
	float MarginX;
	float MarginY;
	float PaddingX;
	float PaddingY;
	float StrokeGradientFeather;
	float StrokeGradientOffset;
	float StrokeSize;
	NMS::Colour32 Colour;
	NMS::Colour32 GradientColour;
	NMS::Colour32 IconColour;
	NMS::Colour32 StrokeColour;
	NMS::Colour32 StrokeGradientColour;
	NMS_Toolkit::TkNGuiGraphicStyleData::GradientEnum Gradient;
	bool GradientOffsetPercent;
	bool HasDropShadow;
	bool HasInnerGradient;
	bool HasOuterGradient;
	NMS_Toolkit::TkNGuiGraphicStyleData::ShapeEnum Shape;
	bool SolidColour;
	bool StrokeGradient;
};

struct TkCurveType
{
	enum class CurveEnum : uint32_t
	{
		Linear = 0,
		SmoothInOut = 1,
		FastInSlowOut = 2,
		BellSquared = 3,
		Squared = 4,
		Cubed = 5,
		Logarithmic = 6,
		SlowIn = 7,
		SlowOut = 8,
		ReallySlowOut = 9,
		SmootherStep = 10,
		SmoothFastInSlowOut = 11,
		SmoothSlowInFastOut = 12,
		EaseInSine = 13,
		EaseOutSine = 14,
		EaseInOutSine = 15,
		EaseInQuad = 16,
		EaseOutQuad = 17,
		EaseInOutQuad = 18,
		EaseInQuart = 19,
		EaseOutQuart = 20,
		EaseInOutQuart = 21,
		EaseInQuint = 22,
		EaseOutQuint = 23,
		EaseInOutQuint = 24,
		EaseInExpo = 25,
		EaseOutExpo = 26,
		EaseInOutExpo = 27,
		EaseInCirc = 28,
		EaseOutCirc = 29,
		EaseInOutCirc = 30,
		EaseInBack = 31,
		EaseOutBack = 32,
		EaseInOutBack = 33,
		EaseInElastic = 34,
		EaseOutElastic = 35,
		EaseInOutElastic = 36,
		EaseInBounce = 37,
		EaseOutBounce = 38,
		EaseInOutBounce = 39,
	};

	NMS_Toolkit::TkCurveType::CurveEnum Curve;
};

//Dependency: TkNGuiGraphicStyleData
//Dependency: TkCurveType
//Dependency: Vector2f
struct TkNGuiGraphicStyle
{
	enum class AnimateEnum : uint32_t
	{
		None = 0,
		WipeRightToLeft = 1,
		SimpleWipe = 2,
		SimpleWipeDown = 3,
		CustomWipe = 4,
		CustomWipeAlpha = 5,
	};

	NMS_Toolkit::TkNGuiGraphicStyleData Active;
	NMS_Toolkit::TkNGuiGraphicStyleData Default;
	NMS_Toolkit::TkNGuiGraphicStyleData Highlight;
	NMS::Vector2f CustomMaxStart;
	NMS::Vector2f CustomMinStart;
	NMS_Toolkit::TkNGuiGraphicStyle::AnimateEnum Animate;
	float AnimSplit;
	float AnimTime;
	float GlobalFade;
	float HighlightScale;
	float HighlightTime;
	NMS_Toolkit::TkCurveType AnimCurve1;
	NMS_Toolkit::TkCurveType AnimCurve2;
	bool AutoAdjustToChildrenHeight;
	bool DistributeChildrenHeight;
	bool DistributeChildrenWidth;
	bool IgnoreLayerForParentHeightAdjust;
	bool InheritStyleFromParentLayer;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiElementData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
struct GcNGuiGraphicData
{
	NMS_GameComponents::GcNGuiElementData ElementData;
	NMS::VariableSizeString Image;
	NMS_Toolkit::TkNGuiGraphicStyle Style;
	float Angle;
};

//Dependency: NMSString0x20A
struct GcPetAccessoryInfo
{
	NMS::NMSString0x20A Descriptor;
};

struct GcPetAccessoryType
{
	enum class PetAccessoryEnum : uint32_t
	{
		None = 0,
		CargoCylinder = 1,
		Containers = 2,
		ShieldArmour = 3,
		SolarBattery = 4,
		Tank = 5,
		WingPanel = 6,
		TravelPack = 7,
		SpacePack = 8,
		CargoLong = 9,
		Antennae = 10,
		Computer = 11,
		Toolbelt = 12,
		LeftCanisters = 13,
		LeftEnergyCoil = 14,
		LeftFrigateTurret = 15,
		LeftHeadLights = 16,
		LeftArmourPlate = 17,
		LeftTurret = 18,
		LeftSupportSystem = 19,
		RightCanisters = 20,
		RightEnergyCoil = 21,
		RightFrigateTurret = 22,
		RightHeadLights = 23,
		RightArmourPlate = 24,
		RightTurret = 25,
		RightSupportSystem = 26,
		RightMechanicalPaw = 27,
		LeftMechanicalPaw = 28,
		MechanicalPaw = 29,
	};

	NMS_GameComponents::GcPetAccessoryType::PetAccessoryEnum PetAccessory;
};

//Dependency: GcPetAccessoryType
//Dependency: NMSString0x10
struct GcPetAccessoryGroup
{
	std::vector<NMS_GameComponents::GcPetAccessoryType> DisallowedAccessories;
	NMS::NMSString0x10 Id;
};

//Dependency: GcPetAccessoryInfo
//Dependency: GcPetAccessoryGroup
struct GcPetAccessoryTable
{
	NMS_GameComponents::GcPetAccessoryInfo Accessories[30];
	std::vector<NMS_GameComponents::GcPetAccessoryGroup> AccessoryGroups;
};

struct GcSolarSystemLocatorTypes
{
	enum class LocatorTypeEnum : uint32_t
	{
		Generic1 = 0,
		Generic2 = 1,
		Generic3 = 2,
		Generic4 = 3,
	};

	NMS_GameComponents::GcSolarSystemLocatorTypes::LocatorTypeEnum LocatorType;
};

//Dependency: GcSolarSystemLocatorTypes
//Dependency: NMSString0x20
struct GcSolarSystemLocatorChoice
{
	enum class ChoiceEnum : uint32_t
	{
		LookupName = 0,
		AnyOfType = 1,
		SpecificIndex = 2,
		InFrontOfPlayer = 3,
	};

	NMS_GameComponents::GcSolarSystemLocatorChoice::ChoiceEnum Choice;
	int32_t Index;
	NMS_GameComponents::GcSolarSystemLocatorTypes Type;
	NMS::NMSString0x20 Name;
};

struct GcCostFrigateCargo
{
};

struct GcSettlementTowerPower
{
	enum class SettlementTowerPowerEnum : uint32_t
	{
		EarnNavigationData = 0,
		ScanForBuildings = 1,
		ScanForAnomalies = 2,
		ScanForCrashedShips = 3,
	};

	NMS_GameComponents::GcSettlementTowerPower::SettlementTowerPowerEnum SettlementTowerPower;
};

//Dependency: GcAISpaceshipModelDataArray
//Dependency: GcAISpaceshipModelData
struct GcAISpaceshipManagerData
{
	NMS_GameComponents::GcAISpaceshipModelDataArray SystemSpaceships[5];
	NMS_GameComponents::GcAISpaceshipModelData SentinelCrashSiteShip;
};

struct GcMissionConditionHasSettlementLocal
{
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcEntitlementRewardData
{
	NMS::NMSString0x20A Error;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 EntitlementId;
	NMS::NMSString0x10 RewardId;
};

//Dependency: GcEntitlementRewardData
struct GcEntitlementRewardsTable
{
	std::vector<NMS_GameComponents::GcEntitlementRewardData> Table;
};

struct GcFuelUseDifficultyOption
{
	enum class FuelUseDifficultyEnum : uint32_t
	{
		Free = 0,
		Cheap = 1,
		Normal = 2,
		Expensive = 3,
	};

	NMS_GameComponents::GcFuelUseDifficultyOption::FuelUseDifficultyEnum FuelUseDifficulty;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct INMSString
{
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcMissionConditionLocation
{
	enum class MissionPlayerLocationEnum : uint32_t
	{
		OnPlanet = 0,
		OnPlanetInVehicle = 1,
		AnywhereInPlanetAtmos = 2,
		InShipLanded = 3,
		InShipInPlanetOrbit = 4,
		InShipInSpace = 5,
		InShipAnywhere = 6,
		InSpaceStation = 7,
		InFreighter = 8,
		InYourFreighter = 9,
		InOtherPlayerFreighter = 10,
		Underground = 11,
		InBuilding = 12,
		Frigate = 13,
		Underwater = 14,
		UnderwaterSwimming = 15,
		DeepUnderwater = 16,
		InSubmarine = 17,
		Frigate_Damaged = 18,
		FreighterConstructionArea = 19,
		FriendsPlanetBase = 20,
		OnPlanetSurface = 21,
		InNexus = 22,
		InNexusOnFoot = 23,
		AbandonedFreighterExterior = 24,
		AbandonedFreighterInterior = 25,
		AbandonedFreighterAirlock = 26,
		AtlasStation = 27,
		AtlasStationFinal = 28,
	};

	NMS_GameComponents::GcMissionConditionLocation::MissionPlayerLocationEnum MissionPlayerLocation;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct INMSVariableLengthString
{
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcCreatureTypes
{
	enum class CreatureTypeEnum : uint32_t
	{
		None = 0,
		Bird = 1,
		FlyingLizard = 2,
		FlyingSnake = 3,
		Butterfly = 4,
		FlyingBeetle = 5,
		Beetle = 6,
		Fish = 7,
		Shark = 8,
		Crab = 9,
		Snake = 10,
		Dino = 11,
		Antelope = 12,
		Rodent = 13,
		Cat = 14,
		Fiend = 15,
		BugQueen = 16,
		BugFiend = 17,
		Drone = 18,
		Quad = 19,
		SpiderQuad = 20,
		SpiderQuadMini = 21,
		Walker = 22,
		Predator = 23,
		PlayerPredator = 24,
		Prey = 25,
		Passive = 26,
		FishPredator = 27,
		FishPrey = 28,
		FiendFishSmall = 29,
		FiendFishBig = 30,
		Jellyfish = 31,
		LandJellyfish = 32,
		RockCreature = 33,
		MiniFiend = 34,
		Floater = 35,
		Scuttler = 36,
		Slug = 37,
		MiniDrone = 38,
		MiniRobo = 39,
		SpaceFloater = 40,
		JellyBoss = 41,
		JellyBossBrood = 42,
		LandSquid = 43,
		Weird = 44,
		SeaSnake = 45,
		SandWorm = 46,
		ProtoRoller = 47,
		ProtoFlyer = 48,
		ProtoDigger = 49,
		Plough = 50,
		Digger = 51,
		Drill = 52,
		Brainless = 53,
		Pet = 54,
	};

	NMS_GameComponents::GcCreatureTypes::CreatureTypeEnum CreatureType;
};

//Dependency: GcCreatureTypes
struct GcCreatureAlertData
{
	NMS_GameComponents::GcCreatureTypes AlertInitiator;
	NMS_GameComponents::GcCreatureTypes AlertTarget;
	float FleeRange;
	float HearingRange;
	float SightAngle;
	float SightRange;
};

//Dependency: GcCreatureAlertData
struct GcCreatureNearbyEvent
{
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	bool Inverse;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct IHashMap
{
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcVehicleCheckpointComponentData
{
	enum class RaceTypeEnum : uint32_t
	{
		Vehicle = 0,
		Spaceship = 1,
	};

	enum class CheckpointTypeEnum : uint32_t
	{
		Checkpoint = 0,
		Start = 1,
	};

	NMS_GameComponents::GcVehicleCheckpointComponentData::CheckpointTypeEnum CheckpointType;
	NMS_GameComponents::GcVehicleCheckpointComponentData::RaceTypeEnum RaceType;
	float Radius;
};

//Dependency: NMSString0x10
struct GcFishingRecord
{
	NMS::NMSString0x10 ProductList[256];
	float LargestCatchList[256];
	uint32_t ProductCountList[256];
};

struct GcInventoryType
{
	enum class InventoryTypeEnum : uint32_t
	{
		Substance = 0,
		Technology = 1,
		Product = 2,
	};

	NMS_GameComponents::GcInventoryType::InventoryTypeEnum InventoryType;
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcRefinerRecipeElement
{
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcInventoryType Type;
};

//Dependency: NMSString0x10
struct GcSpawnDensity
{
	enum class CoverageTypeEnum : uint32_t
	{
		Total = 0,
		SmoothPatch = 1,
		GridPatch = 2,
	};

	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcSpawnDensity::CoverageTypeEnum CoverageType;
	float PatchSize;
	float RegionScale;
	bool Active;
};

//Dependency: GcSpawnDensity
struct GcSpawnDensityList
{
	std::vector<NMS_GameComponents::GcSpawnDensity> DensityList;
};

struct GcActiveSurvivalBarsDifficultyOption
{
	enum class ActiveSurvivalBarsDifficultyEnum : uint32_t
	{
		None = 0,
		HealthOnly = 1,
		HealthAndHazard = 2,
		All = 3,
	};

	NMS_GameComponents::GcActiveSurvivalBarsDifficultyOption::ActiveSurvivalBarsDifficultyEnum ActiveSurvivalBarsDifficulty;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: NMSString0x40
struct GcExpeditionEventSaveData
{
	NMS::NMSString0x20A EventID;
	NMS::NMSString0x20A InterventionEventID;
	NMS::NMSString0x20A OverriddenRewardDescription;
	std::vector<int32_t> AffectedFrigateIndices;
	std::vector<int32_t> AffectedFrigateResponses;
	NMS::NMSString0x10 OverriddenReward;
	std::vector<int32_t> RepairingFrigateIndices;
	NMS::GcSeed Seed;
	uint64_t UA;
	NMS::NMSString0x40 OverriddenDescription;
	bool AvoidedIntervention;
	bool IsInterventionEvent;
	bool Success;
	bool WhaleEvent;
};

struct GcAudio3PointDopplerData
{
	float Front;
	float Mid;
	float Rear;
};

//Dependency: GcAudio3PointDopplerData
struct GcAudioNPCDoppler
{
	NMS_GameComponents::GcAudio3PointDopplerData Config[7];
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcAudioNPCDoppler
//Dependency: Vector2f
//Dependency: GcAudio3PointDopplerData
struct GcAudioGlobals
{
	std::vector<float> ByteBeatScaleDegreeProbability;
	NMS_GameComponents::GcAudioNPCDoppler NPCEngines;
	NMS_GameComponents::GcAudio3PointDopplerData DroneDoppler;
	NMS::Vector2f ByteBeatSpeakerMaxAmplitude;
	NMS::Vector2f ByteBeatSpeakerMaxFrequency;
	NMS::Vector2f ByteBeatSpeakerMinFrequency;
	NMS::Vector2f CommsChatterFalloffFreighers;
	NMS::Vector2f CommsChatterFalloffShips;
	NMS::Vector2f ShorelineSenseRadius;
	NMS::Vector2f ShorelineSenseUJitter;
	NMS::Vector2f ShorelineSenseVJitter;
	float ArmFoleySpeedMultiplier;
	float ArmWhooshFoleyValueTrigger;
	float AtlasStationActiveDistance;
	float AuxSendCaveRampDistance;
	float AuxSendOutdoorsRampDistance;
	float ByteBeatBeginAtTonicProbability;
	float ByteBeatChangeNoteProbability;
	float ByteBeatCrossfadeTime;
	float ByteBeatDrumMixHigh;
	float ByteBeatDrumMixLow;
	int32_t ByteBeatMaxGeneratingAudio;
	int32_t ByteBeatNonSilentAttempts;
	float ByteBeatNonSilentAvgInterpSpeed;
	float ByteBeatNonSilentSDCutoff;
	float ByteBeatNonSilentTime;
	float ByteBeatPlayerFadeOut;
	int32_t ByteBeatPlayerNumLoops;
	float ByteBeatSkipNoteProbability;
	float ByteBeatSpeakerVolumeInterSpeed;
	float ByteBeatSynthMixHigh;
	float ByteBeatSynthMixLow;
	int32_t ByteBeatVisualisationMiniPixelStep;
	int32_t ByteBeatVisualisationMode;
	int32_t ByteBeatVisualisationPixelStep;
	float ByteBeatVisualisationTime;
	float DistanceReportMax;
	float DistanceReportMin;
	float DistanceSquishMaxTravel;
	float DistanceSquishScaleToListener;
	float DroneDopplerExtentsFactor;
	float FishingMusicRampInTime;
	float FishingMusicRampOutTime;
	float LadderStepDistance;
	float MiniStationActiveDistance;
	float MinSecondsBetweenArmWhooshes;
	float ObstructionAuxControlWhenHidden;
	float ObstructionAuxControlWhenVisible;
	float ObstructionSmoothTime;
	float ObstructionValueMax;
	float PlayerDepthUnderwaterMax;
	float PlayerLowerOffsetEmitterMul;
	float ShorelineObstructionMul;
	float ShorelineObstructionSmoothRate;
	float ShorelineSenseBaseU;
	float ShorelineSenseBlend;
	float ShorelineSenseProbeDist;
	float ShorelineSenseStartUp;
	float ShorelineValidityRate;
	float ThirdPersonPushTowardsPlayer;
	float WaveintensityRTPCSmoothRate;
	bool EnableVRSpecificAudio;
	bool LockListenerMatrix;
	bool ObstructionEnabled;
	bool PulseMusicEnabled;
	bool UseShorelineAudioInOpenWater;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: Vector3f
struct AxisSpecification
{
	enum class AxisEnum : uint32_t
	{
		X = 0,
		Y = 1,
		Z = 2,
		NegativeX = 3,
		NegativeY = 4,
		NegativeZ = 5,
		CustomAxis = 6,
	};

	NMS::Vector3f CustomAxis;
	NMS_GameComponents::AxisSpecification::AxisEnum Axis;
};

struct GcSeasonalRingData
{
	float CoreOpacity;
	float RingOpacity;
	float RingSize;
};

struct GcDistanceScaleComponentData
{
	float MaxDistance;
	float MaxHeight;
	float MinDistance;
	float MinHeight;
	float Scale;
	bool DisabledWhenOnFreighter;
	bool UseGlobals;
};

//Dependency: AxisSpecification
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcCollisionCapsule
{
	NMS_GameComponents::AxisSpecification CapsuleAxis;
	NMS::Vector3f CapsuleCentre;
	float CapsuleLength;
	float CapsuleRadius;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 NodeName;
	bool Enabled;
	bool ImproveCollisionForNarrowCapsule;
};

struct GcConstraintsToCreateSpec
{
	float PushingStrength_Diagonal_1x1_0011;
	float PushingStrength_Diagonal_1x1_0110;
	float PushingStrength_Horizontal_1x0;
	float PushingStrength_Horizontal_2x0;
	float PushingStrength_SkewedDiagonal_2x1_0012;
	float PushingStrength_SkewedDiagonal_2x1_0021;
	float PushingStrength_SkewedDiagonal_2x1_1002;
	float PushingStrength_SkewedDiagonal_2x1_2001;
	float PushingStrength_Vertical_1x0;
	float PushingStrength_Vertical_2x0;
	bool Diagonal_1x1_0011;
	bool Diagonal_1x1_0110;
	bool Horizontal_1x0;
	bool Horizontal_2x0;
	bool SkewedDiagonal_2x1_0012;
	bool SkewedDiagonal_2x1_0021;
	bool SkewedDiagonal_2x1_1002;
	bool SkewedDiagonal_2x1_2001;
	bool Vertical_1x0;
	bool Vertical_2x0;
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcAttachedNode
{
	NMS::Vector3f RelativeTransform_Axis0;
	NMS::Vector3f RelativeTransform_Axis1;
	NMS::Vector3f RelativeTransform_Axis2;
	NMS::Vector3f RelativeTransform_Position;
	float BlendStrength;
	float MaxRenderIFraction;
	float MaxRenderJFraction;
	float MinRenderIFraction;
	float MinRenderJFraction;
	NMS::NMSString0x40 NodeName;
	bool Enabled;
};

//Dependency: Vector3f
struct GcAttachmentPointData
{
	NMS::Vector3f Position;
	int32_t SimP;
};

//Dependency: GcAttachmentPointData
//Dependency: NMSString0x40
struct GcAttachmentPointSet
{
	std::vector<NMS_GameComponents::GcAttachmentPointData> AttachmentPoints;
	float AttractionStartDistance;
	float AttractionStrength;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 JointName;
	NMS::NMSString0x40 Name;
	bool Enabled;
};

//Dependency: NMSString0x40
struct DirectMesh
{
	int32_t NumPointsInDirectMeshI;
	int32_t NumPointsInDirectMeshJ;
	int32_t NumSimPointsI;
	int32_t NumSimPointsJ;
	int32_t VertexOrdering;
	NMS::NMSString0x40 NodeName;
	bool RenderVertexBasedCloth;
};

//Dependency: Vector3f
//Dependency: Vector2f
struct ShapePoint
{
	NMS::Vector3f Position;
	NMS::Vector2f Uv;
};

//Dependency: ShapePoint
//Dependency: NMSString0x40
struct SimShape
{
	std::vector<NMS_GameComponents::ShapePoint> ShapePoints;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 NodeName;
	bool SimPIsInUnwrappedFormat;
	bool WrapI;
	bool WrapJ;
};

//Dependency: Vector3f
struct MappingInfluence
{
	NMS::Vector3f mTransformInClothT_Axis0;
	NMS::Vector3f mTransformInClothT_Axis1;
	NMS::Vector3f mTransformInClothT_Axis2;
	NMS::Vector3f mTransformInClothT_Pos;
	float DistanceSquared;
	int32_t SimP;
};

//Dependency: MappingInfluence
struct InfluencesOnMappedPoint
{
	std::vector<NMS_GameComponents::MappingInfluence> Influences;
};

//Dependency: InfluencesOnMappedPoint
//Dependency: NMSString0x40
struct Mapping
{
	std::vector<NMS_GameComponents::InfluencesOnMappedPoint> InfluencesOnMappedPoint;
	int32_t NumMappedPoints;
	int32_t NumSimI;
	int32_t NumSimJ;
	NMS::NMSString0x40 Name;
};

//Dependency: NMSString0x40
struct MappedMesh
{
	NMS::NMSString0x40 NodeName;
};

//Dependency: GcCollisionCapsule
//Dependency: GcAdvancedTweaks
//Dependency: GcConstraintsToCreateSpec
//Dependency: GcAttachedNode
//Dependency: GcAttachmentPointSet
//Dependency: NMSString0x40
//Dependency: DirectMesh
//Dependency: SimShape
//Dependency: Mapping
//Dependency: MappedMesh
struct GcClothPiece
{
	enum class InitialShapeSourceEnum : uint32_t
	{
		Rectangular = 0,
		TakenFromDirectMesh = 1,
		Saved = 2,
	};

	NMS_GameComponents::GcAdvancedTweaks Advanced;
	std::vector<NMS_GameComponents::GcAttachedNode> AttachedNodes;
	std::vector<NMS_GameComponents::GcAttachmentPointSet> AttachmentPointSets;
	std::vector<NMS_GameComponents::GcCollisionCapsule> CollisionCapsules;
	std::vector<int32_t> DeletedConstraintsI;
	std::vector<int32_t> DeletedConstraintsJ;
	std::vector<int32_t> DeletedSimPoints;
	std::vector<NMS_GameComponents::SimShape> InitialShapes;
	std::vector<NMS_GameComponents::Mapping> Mappings;
	NMS_GameComponents::DirectMesh DirectMesh;
	NMS_GameComponents::GcConstraintsToCreateSpec ConstraintsToCreate;
	float AbsoluteDamping;
	float AirSpeedFromMovementSpeedScale;
	float AirSpeedOverallEffect;
	float ApplyGameWind;
	float AttachedNodesOverallBlendStrength;
	float DampingWrtFixed;
	NMS_GameComponents::GcClothPiece::InitialShapeSourceEnum InitialShapeSource;
	int32_t NumConstraintSolvingIterations;
	int32_t NumTimestepsSubdivisions;
	float ParticleRadius;
	float StandardGravityScale;
	float StaticFriction;
	NMS::NMSString0x40 InitialShapeName;
	NMS_GameComponents::MappedMesh MappedMesh;
	NMS::NMSString0x40 MappingName;
	NMS::NMSString0x40 Name;
	bool AttachedNodesEnabled;
	bool DriveDirectMesh;
	bool DriveMappedMesh;
	bool Enabled;
	bool MoreWindAtBottom;
};

//Dependency: NMSString0x10
struct GcCostInstalledTech
{
	enum class InventoryToCheckEnum : uint32_t
	{
		All = 0,
		Suit = 1,
		Ship = 2,
		Weapon = 3,
		Freighter = 4,
		Buggy = 5,
	};

	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcCostInstalledTech::InventoryToCheckEnum InventoryToCheck;
	float MinChargePercent;
	bool BurnCharge;
};

struct GcPlayerHazardType
{
	enum class HazardEnum : uint32_t
	{
		None = 0,
		NoOxygen = 1,
		ExtremeHeat = 2,
		ExtremeCold = 3,
		ToxicGas = 4,
		Radiation = 5,
		Spook = 6,
	};

	NMS_GameComponents::GcPlayerHazardType::HazardEnum Hazard;
};

//Dependency: GcPlayerHazardType
struct GcMissionConditionWeather
{
	NMS_GameComponents::GcPlayerHazardType WeatherRequirement;
	bool AllowNonHazardExtremeIfNoStorms;
	bool IgnoreStormIfInShip;
	bool IsExtreme;
	bool StormActive;
};

struct GcHandType
{
	enum class HandTypeEnum : uint32_t
	{
		Offhand = 0,
		Dominant = 1,
	};

	NMS_GameComponents::GcHandType::HandTypeEnum HandType;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcAIShipSpawnMarkerData
{
	enum class ShipsToMarkEnum : uint32_t
	{
		None = 0,
		Leader = 1,
		All = 2,
	};

	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	float MaxVisibleRange;
	float MinAngleVisible;
	float MinVisibleRange;
	NMS_GameComponents::GcAIShipSpawnMarkerData::ShipsToMarkEnum ShipsToMark;
	bool HideDuringCombat;
};

struct GcShipAIPerformanceArray
{
	std::vector<NMSTemplate> Array;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputEnum
{
	enum class InputButtonEnum : uint32_t
	{
		None = 0,
		Space = 32,
		Exclamation = 33,
		Quotes = 34,
		Hash = 35,
		Dollar = 36,
		Percent = 37,
		Ampersand = 38,
		Apostrophe = 39,
		LeftBracket = 40,
		RightBracket = 41,
		Asterisk = 42,
		Plus = 43,
		Comma = 44,
		Hyphen = 45,
		Period = 46,
		Slash = 47,
		Key0 = 48,
		Key1 = 49,
		Key2 = 50,
		Key3 = 51,
		Key4 = 52,
		Key5 = 53,
		Key6 = 54,
		Key7 = 55,
		Key8 = 56,
		Key9 = 57,
		Colon = 58,
		Semicolon = 59,
		LessThan = 60,
		Equals = 61,
		GreaterThan = 62,
		QuestionMark = 63,
		At = 64,
		KeyA = 65,
		KeyB = 66,
		KeyC = 67,
		KeyD = 68,
		KeyE = 69,
		KeyF = 70,
		KeyG = 71,
		KeyH = 72,
		KeyI = 73,
		KeyJ = 74,
		KeyK = 75,
		KeyL = 76,
		KeyM = 77,
		KeyN = 78,
		KeyO = 79,
		KeyP = 80,
		KeyQ = 81,
		KeyR = 82,
		KeyS = 83,
		KeyT = 84,
		KeyU = 85,
		KeyV = 86,
		KeyW = 87,
		KeyX = 88,
		KeyY = 89,
		KeyZ = 90,
		LeftSquare = 91,
		BackSlash = 92,
		RightSquare = 93,
		Caret = 94,
		Underscode = 95,
		Grave = 96,
		LeftCurly = 123,
		Bar = 124,
		RightCurly = 125,
		Tilde = 126,
		Special2 = 162,
		Escape = 256,
		Enter = 257,
		Backspace = 258,
		Insert = 259,
		Delete = 260,
		CapsLock = 261,
		Home = 262,
		End = 263,
		PageUp = 264,
		PageDown = 265,
		F1 = 266,
		F2 = 267,
		F3 = 268,
		F4 = 269,
		F5 = 270,
		F6 = 271,
		F7 = 272,
		F8 = 273,
		F9 = 274,
		F10 = 275,
		F11 = 276,
		F12 = 277,
		Tab = 278,
		Shift = 279,
		LShift = 280,
		RShift = 281,
		Alt = 282,
		LAlt = 283,
		RAlt = 284,
		Ctrl = 285,
		LCtrl = 286,
		RCtrl = 287,
		LOption = 288,
		ROption = 289,
		Up = 290,
		Down = 291,
		Left = 292,
		Right = 293,
		KeyboardUnbound = 294,
		Mouse1 = 295,
		Mouse2 = 296,
		Mouse3 = 297,
		Mouse4 = 298,
		Mouse5 = 299,
		Mouse6 = 300,
		Mouse7 = 301,
		Mouse8 = 302,
		MouseWheelUp = 303,
		MouseWheelDown = 304,
		MouseUnbound = 305,
		TouchscreenPress = 306,
		TouchscreenTwoFingerPress = 307,
		TouchscreenThreeFingerPress = 308,
		TouchscreenFourFingerPress = 309,
		TouchscreenSwipeLeft = 310,
		TouchscreenSwipeRight = 311,
		TouchscreenSwipeUp = 312,
		TouchscreenSwipeDown = 313,
		PadA = 314,
		PadB = 315,
		PadC = 316,
		PadD = 317,
		PadStart = 318,
		PadSelect = 319,
		PadLeftShoulder1 = 320,
		PadRightShoulder1 = 321,
		PadLeftShoulder2 = 322,
		PadRightShoulder2 = 323,
		PadLeftTrigger = 324,
		PadRightTrigger = 325,
		PadLeftThumb = 326,
		PadRightThumb = 327,
		PadUp = 328,
		PadDown = 329,
		PadLeft = 330,
		PadRight = 331,
		LeftHandA = 332,
		LeftHandB = 333,
		LeftHandC = 334,
		LeftHandD = 335,
		ChordBothShoulders = 336,
		PadLeftTriggerSpecial = 337,
		PadRightTriggerSpecial = 338,
		PadSpecial0 = 339,
		PadSpecial1 = 340,
		PadSpecial2 = 341,
		PadSpecial3 = 342,
		PadSpecial4 = 343,
		PadSpecial5 = 344,
		PadSpecial6 = 345,
		PadSpecial7 = 346,
		PadSpecial8 = 347,
		PadSpecial9 = 348,
		PadSpecial10 = 349,
		PadSpecial11 = 350,
		PadSpecial12 = 351,
		PadSpecial13 = 352,
		PadSpecial14 = 353,
		PadSpecial15 = 354,
		PadSpecial16 = 355,
		PadSpecial17 = 356,
		PadSpecial18 = 357,
		PadSpecial19 = 358,
		PadUnbound = 359,
		Gesture = 360,
		GestureLeftWrist = 361,
		GestureRightWrist = 362,
		GestureBinoculars = 363,
		GestureBackpack = 364,
		GestureExitVehicle = 365,
		GestureThrottle = 366,
		GestureFlightStick = 367,
		GestureTeleport = 368,
		GestureLeftWrist_LeftHanded = 369,
		GestureRightWrist_LeftHanded = 370,
		GestureBinoculars_LeftHanded = 371,
		GestureBackpack_LeftHanded = 372,
		MaxEnumValue = 373,
	};

	NMS_Toolkit::TkInputEnum::InputButtonEnum InputButton;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcAIShipSpawnMarkerData
//Dependency: GcAISpaceshipRoles
//Dependency: GcShipAIPerformanceArray
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: Vector2f
struct GcAIShipSpawnData
{
	enum class SpawnShapeEnum : uint32_t
	{
		Sphere = 0,
		Cone = 1,
		OffsetSphere = 2,
	};

	NMS::Vector3f OffsetSphereOffset;
	NMS_GameComponents::GcAIShipSpawnMarkerData MarkerData;
	NMS::NMSString0x20A CombatMessage;
	NMS::NMSString0x20A Message;
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A RewardMessage;
	NMS::NMSString0x10 AttackDefinition;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> ChildSpawns;
	NMS_GameComponents::GcShipAIPerformanceArray Performances;
	NMS::NMSString0x10 Reward;
	NMS::Vector2f Count;
	NMS::Vector2f Scale;
	NMS::Vector2f Spread;
	NMS::Vector2f StartTime;
	float MinRange;
	NMS_GameComponents::GcAISpaceshipRoles Role;
	NMS_Toolkit::TkInputEnum Shortcut;
	NMS_GameComponents::GcAIShipSpawnData::SpawnShapeEnum SpawnShape;
	bool AttackFreighter;
	bool WarpIn;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkEqualityEnum
{
	enum class EqualityEnumEnum : uint32_t
	{
		Equal = 0,
		Greater = 1,
		Less = 2,
		GreaterEqual = 3,
		LessEqual = 4,
	};

	NMS_Toolkit::TkEqualityEnum::EqualityEnumEnum EqualityEnum;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionCreatureOwned
{
	NMS::NMSString0x10 SpecificCreatureID;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool AnyPredator;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x200
{
	//max length: 512
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitRealTime
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 DisplayStat;
	NMS::VariableSizeString Message;
	uint64_t Time;
	float Randomness;
	bool StatFromNow;
	bool TakeDisplayStatTargetFromSeasonData;
};

struct GcMissionConditionHasPlatformReward
{
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector4f
{
	float X;
	float Y;
	float Z;
	float W;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: Vector3f
//Dependency: Vector4f
struct GcRagdolCollisionObject
{
	enum class CollisionShapeTypeEnum : uint32_t
	{
		Box = 0,
		Capsule = 1,
		Sphere = 2,
		None = 3,
	};

	NMS::Vector3f Centre;
	NMS::Vector3f Extent;
	NMS::Vector3f HalfVector;
	NMS::Vector4f OrientationQuaternion;
	NMS_GameComponents::GcRagdolCollisionObject::CollisionShapeTypeEnum CollisionShapeType;
	float Radius;
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcChildNode
{
	NMS::Vector3f JointPositionInBone;
	NMS::Vector3f PositionInBone;
	NMS::NMSString0x40 NodeName;
	bool JointPositionInBoneSet;
};

//Dependency: AxisSpecification
//Dependency: GcRagdolCollisionObject
//Dependency: GcChildNode
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcRagdollBone
{
	enum class LimbTypeEnum : uint32_t
	{
		LeftUpperArm = 0,
		RightUpperArm = 1,
		LeftUpperLeg = 2,
		RightUpperLeg = 3,
		LeftFoot = 4,
		RightFoot = 5,
		Other = 6,
	};

	NMS_GameComponents::AxisSpecification LimitedPlaneAxis;
	NMS_GameComponents::AxisSpecification LimitedTwistAxis;
	NMS_GameComponents::AxisSpecification LimitingPlaneAxis;
	NMS_GameComponents::AxisSpecification LimitingTwistAxis;
	NMS::Vector3f ParentNodeTransformInBone_AxisX;
	NMS::Vector3f ParentNodeTransformInBone_AxisY;
	NMS::Vector3f ParentNodeTransformInBone_AxisZ;
	NMS::Vector3f ParentNodeTransformInBone_Position;
	std::vector<NMS_GameComponents::GcChildNode> ChildNodes;
	std::vector<NMS_GameComponents::GcRagdolCollisionObject> CollisionObjects;
	std::vector<NMS::NMSString0x40> NodeNames;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisX;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisY;
	std::vector<NMS::Vector3f> NodeTransformInBone_AxisZ;
	std::vector<NMS::Vector3f> NodeTransformInBone_Position;
	float ConeLimitDeg;
	NMS_GameComponents::GcRagdollBone::LimbTypeEnum LimbType;
	float PlaneMaxAngleDeg;
	float PlaneMinAngleDeg;
	float TwistLimitDeg;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 ParentNodeName;
	bool Enabled;
};

struct GcStatModifyType
{
	enum class ModifyTypeEnum : uint32_t
	{
		Set = 0,
		Add = 1,
		Subtract = 2,
	};

	NMS_GameComponents::GcStatModifyType::ModifyTypeEnum ModifyType;
};

//Dependency: GcStatModifyType
//Dependency: NMSString0x10
struct GcRewardModifyStat
{
	NMS::NMSString0x10 OtherStat;
	NMS::NMSString0x10 Stat;
	int32_t Amount;
	NMS_GameComponents::GcStatModifyType ModifyType;
	bool UseOtherStat;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimationAction
{
	NMS::NMSString0x10 ID;
	float EndFrame;
	float StartFrame;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcActionUseType
{
	enum class ActionUseTypeEnum : uint32_t
	{
		Active = 0,
		ActiveVR = 1,
		ActiveXbox = 2,
		ActivePS4 = 3,
		Hidden = 4,
		Debug = 5,
		Obsolete = 6,
	};

	NMS_GameComponents::GcActionUseType::ActionUseTypeEnum ActionUseType;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x400
{
	//max length: 1024
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcSeasonalLogOverrides
{
	NMS::NMSString0x20A MissionDescription;
	NMS::NMSString0x20A MissionSubtitle;
	NMS::NMSString0x20A MissionTitle;
	std::vector<int32_t> ApplicableSeasonNumbers;
};

struct GcBiomeType
{
	enum class BiomeEnum : uint32_t
	{
		Lush = 0,
		Toxic = 1,
		Scorched = 2,
		Radioactive = 3,
		Frozen = 4,
		Barren = 5,
		Dead = 6,
		Weird = 7,
		Red = 8,
		Green = 9,
		Blue = 10,
		Test = 11,
		Swamp = 12,
		Lava = 13,
		Waterworld = 14,
		GasGiant = 15,
		All = 16,
	};

	NMS_GameComponents::GcBiomeType::BiomeEnum Biome;
};

//Dependency: GcBiomeType
struct GcMissionConditionBiomeType
{
	NMS_GameComponents::GcBiomeType Type;
	bool AnyInfested;
	bool AnyRuins;
};

struct GcStatValueData
{
	float Denominator;
	float FloatValue;
	int32_t IntValue;
};

//Dependency: GcStatValueData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatLevelData
{
	NMS::NMSString0x20A LevelName;
	NMS::NMSString0x20A LevelNameUpper;
	NMS::NMSString0x20A OSDLevelName;
	NMS::NMSString0x10 TrophyToUnlock;
	NMS_GameComponents::GcStatValueData Value;
};

//Dependency: GcStatLevelData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcLeveledStatData
{
	enum class StatMessageTypeEnum : uint32_t
	{
		Full = 0,
		Quick = 1,
		Silent = 2,
	};

	NMS_GameComponents::GcStatLevelData StatLevels[11];
	NMS::NMSString0x20A NotifyMessage;
	NMS::NMSString0x20A NotifyMessageSingular;
	NMS::NMSString0x20A StatTitle;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 StatId;
	NMS_GameComponents::GcLeveledStatData::StatMessageTypeEnum StatMessageType;
	bool ShowInTerminal;
	bool ShowStatLevel;
	bool TelemetryUpload;
	bool UseRankNotStats;
};

struct GcDefaultMissionSubstanceEnum
{
	enum class DefaultSubstanceTypeEnum : uint32_t
	{
		None = 0,
		PrimarySubstance = 1,
		SecondarySubstance = 2,
	};

	NMS_GameComponents::GcDefaultMissionSubstanceEnum::DefaultSubstanceTypeEnum DefaultSubstanceType;
};

struct GcLocalSubstanceType
{
	enum class LocalSubstanceTypeEnum : uint32_t
	{
		AnyDeposit = 0,
		Common = 1,
		Uncommon = 2,
		Rare = 3,
		Plant = 4,
	};

	NMS_GameComponents::GcLocalSubstanceType::LocalSubstanceTypeEnum LocalSubstanceType;
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcLocalSubstanceType
struct GcCostSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocalSubstance;
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool UseDefaultAmount;
};

struct GcAISpaceshipTypes
{
	enum class ShipTypeEnum : uint32_t
	{
		None = 0,
		Pirate = 1,
		Police = 2,
		Trader = 3,
		Freighter = 4,
		PlayerSquadron = 5,
		DefenceForce = 6,
	};

	NMS_GameComponents::GcAISpaceshipTypes::ShipTypeEnum ShipType;
};

struct GcCameraSpawnSetupData
{
	float Distance;
	float HorizontalProportion;
	float YawProportion;
	bool InFrontOfShip;
};

struct GcCharacterLookAtData
{
	float CreatureLookAtRadius;
	float InteractionLookAtRadius;
	float LookAtMaxPitch;
	float LookAtMaxYaw;
	float LookAtRunGlanceMaxTime;
	float LookAtRunGlanceMinTime;
	float LookAtRunMaxTime;
	float LookAtRunMinTime;
	float LookAtTargetGlanceMaxTime;
	float LookAtTargetGlanceMinTime;
	float LookAtTargetWaitMaxTime;
	float LookAtTargetWaitMinTime;
	float SpaceshipLookAtRadius;
};

struct GcCostPoliceCargoComply
{
};

//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
struct GcMissionSequenceAudioEvent
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool UseFrontendAudioObject;
};

//Dependency: Vector3f
struct GcProtectedLocation
{
	NMS::Vector3f Location;
	float Radius;
};

//Dependency: TkModelResource
//Dependency: GcSeed
struct GcDebrisData
{
	NMS_Toolkit::TkModelResource Filename;
	NMS::GcSeed OverrideSeed;
	float AnglularSpeed;
	int32_t Number;
	float Radius;
	float Scale;
	float Speed;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumberOfShipsOwned
{
	int32_t NumShips;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: GcRealityCommonFactions
//Dependency: GcFrigateClass
//Dependency: GcSpaceshipClasses
//Dependency: GcAISpaceshipRoles
//Dependency: NMSString0x20A
//Dependency: GcSeed
struct GcAISpaceshipPreloadCacheData
{
	NMS::NMSString0x20A TextureDescriptorHint;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	NMS_GameComponents::GcSpaceshipClasses ShipClass;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;
};

//Dependency: GcAISpaceshipPreloadCacheData
//Dependency: GcRealityCommonFactions
struct GcAISpaceshipPreloadList
{
	std::vector<NMS_GameComponents::GcAISpaceshipPreloadCacheData> Cache;
	NMS_GameComponents::GcRealityCommonFactions Faction;
};

struct GcCharacterControlOutputSpace
{
	enum class CharacterControlOutputSpaceEnum : uint32_t
	{
		CameraRelative = 0,
		CameraRelativeTopDown = 1,
		Raw = 2,
	};

	NMS_GameComponents::GcCharacterControlOutputSpace::CharacterControlOutputSpaceEnum CharacterControlOutputSpace;
};

struct GcCharacterControlInputValidity
{
	enum class CharacterControlInputValidityEnum : uint32_t
	{
		Always = 0,
		PadOnly = 1,
		KeyboardAnMouseOnly = 2,
	};

	NMS_GameComponents::GcCharacterControlInputValidity::CharacterControlInputValidityEnum CharacterControlInputValidity;
};

//Dependency: GcCharacterControlOutputSpace
//Dependency: GcCharacterControlInputValidity
//Dependency: NMSString0x10
struct GcPlayerControlInputMouse
{
	enum class InputMouseModeEnum : uint32_t
	{
		ScreenCentrePos = 0,
	};

	NMS::NMSString0x10 Output;
	NMS::NMSString0x10 OutputLength;
	NMS_GameComponents::GcPlayerControlInputMouse::InputMouseModeEnum InputMouseMode;
	NMS_GameComponents::GcCharacterControlOutputSpace OutputSpace;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct NMSString0x800
{
	//max length: 2048
	std::string Value;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcMissionConditionCanReceiveReward
{
	NMS::NMSString0x10 Reward;
};

//Dependency: NMSString0x10
struct GcInteractionActivationCost
{
	std::vector<NMS::NMSString0x10> AltIds;
	std::vector<int32_t> OnlyChargeDuringSeasons;
	NMS::NMSString0x10 RequiredTech;
	NMS::NMSString0x10 StartMissionOnCantAfford;
	NMS::NMSString0x10 SubstanceId;
	NMS::NMSString0x10 UseCostID;
	int32_t Cost;
	bool Repeat;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationMultiTextureSubOption
{
	NMS::NMSString0x20A Option;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;
};

//Dependency: GcCustomisationMultiTextureSubOption
//Dependency: NMSString0x20A
struct GcCustomisationMultiTextureOptionList
{
	NMS::NMSString0x20A TextureOptionsID;
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureSubOption> SubOptions;
};

//Dependency: GcCustomisationMultiTextureOptionList
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationMultiTextureOption
{
	NMS::NMSString0x10 MultiTextureOptionsID;
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureOptionList> Options;
	std::vector<NMS::NMSString0x10> ProductsToUnlock;
	std::vector<NMS::NMSString0x20A> Tips;
};

struct GcJourneyMedalTiers
{
	int32_t Bronze;
	int32_t Gold;
	int32_t None;
	int32_t Silver;
};

//Dependency: NMSString0x10
struct GcPlayerMissionProgressMapEntry
{
	NMS::NMSString0x10 Mission;
	int32_t MaxProgress;
	int32_t MinProgress;
	int32_t NewProgress;
};

struct GcTerrainOverlayColours
{
	float Cutoff;
	float FlightStrength;
	float PulsePeriod;
	float PulseStrength;
	float Scale;
	float Strength;
};

//Dependency: NMSString0x10
struct GcStatRewardGroupStatData
{
	NMS::NMSString0x10 StatID;
	float ManualAdjust;
	float StatMultiplier;
};

struct GcCurrency
{
	enum class CurrencyEnum : uint32_t
	{
		Units = 0,
		Nanites = 1,
		Specials = 2,
	};

	NMS_GameComponents::GcCurrency::CurrencyEnum Currency;
};

//Dependency: GcStatRewardGroupStatData
//Dependency: TkTextureResource
//Dependency: GcCurrency
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatRewardGroup
{
	NMS::NMSString0x20A LocIDMultiple;
	NMS::NMSString0x20A LocIDSingle;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcStatRewardGroupStatData> Stats;
	float BaseMultiplier;
	NMS_GameComponents::GcCurrency Currency;
};

//Dependency: GcStatRewardGroup
struct GcStatRewardsTable
{
	std::vector<NMS_GameComponents::GcStatRewardGroup> StatRewardGroups;
};

//Dependency: NMSString0x10
struct GcMissionConditionItemRewardedBySeason
{
	NMS::NMSString0x10 ItemID;
	bool TakeIDFromSeasonData;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVoxelGeneratorSettingsTypes
{
	enum class TerrainSettingsEnum : uint32_t
	{
		FloatingIslands = 0,
		GrandCanyon = 1,
		MountainRavines = 2,
		HugeArches = 3,
		Alien = 4,
		Craters = 5,
		Caverns = 6,
		Alpine = 7,
		LilyPad = 8,
		Desert = 9,
		WaterworldPrime = 10,
		FloatingIslandsPrime = 11,
		GrandCanyonPrime = 12,
		MountainRavinesPrime = 13,
		HugeArchesPrime = 14,
		AlienPrime = 15,
		CratersPrime = 16,
		CavernsPrime = 17,
		AlpinePrime = 18,
		LilyPadPrime = 19,
		DesertPrime = 20,
		FloatingIslandsPurple = 21,
		GrandCanyonPurple = 22,
		MountainRavinesPurple = 23,
		HugeArchesPurple = 24,
		AlienPurple = 25,
		CratersPurple = 26,
		CavernsPurple = 27,
		AlpinePurple = 28,
		LilyPadPurple = 29,
		DesertPurple = 30,
	};

	NMS_Toolkit::TkVoxelGeneratorSettingsTypes::TerrainSettingsEnum TerrainSettings;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcSubstanceSecondary
{
	NMS::NMSString0x10 ID;
	float AmountMax;
	float AmountMin;
	float Chance;
};

//Dependency: GcSubstanceSecondary
//Dependency: NMSString0x10
struct GcSubstanceSecondaryLookup
{
	NMS::NMSString0x10 PrimaryID;
	std::vector<NMS_GameComponents::GcSubstanceSecondary> SecondaryChances;
};

struct GcExperienceDebugTriggerActionTypes
{
	enum class ExperienceDebugTriggerActionEnum : uint32_t
	{
		None = 0,
		Drones = 1,
		FlyBy = 2,
		FrigateFlyByBegin = 3,
		FrigateFlyByEnd = 4,
		PirateCargoAttack = 5,
		PirateRaid = 6,
		FreighterAttack = 7,
		SpawnShips = 8,
		LaunchShips = 9,
		Mechs = 10,
		SpaceBattle = 11,
		PirateSpaceBattle = 12,
		ClearPirateSpaceBattle = 13,
		RespawnInShip = 14,
		DebugWalker = 15,
		DebugWalkerTitanFall = 16,
		SpawnNexus = 17,
		Freighters = 18,
		NPCs = 19,
		Sandworm = 20,
		SpacePOI = 21,
		BackgroundSpaceEncounter = 22,
		Creatures = 23,
		CameraPath = 24,
		SummonFleet = 25,
		SummonSquadron = 26,
		ResetScene = 27,
		ResetPlayerPos = 28,
		CameraSpin = 29,
		SpawnEnemyShips = 30,
		PetHappy = 31,
		PetSad = 32,
		PetFollow = 33,
		PetFollowClose = 34,
		PetRest = 35,
		PetNatural = 36,
		PetMine = 37,
		PetMineAndDeposit = 38,
		RidePet = 39,
		GhostShip = 40,
		Normandy = 41,
		LivingFrigate = 42,
		UpgradeSettlement = 43,
		SentinelFreighter = 44,
		ClearSpacePolice = 45,
		SpawnQuad = 46,
		SpawnSpiderQuad = 47,
		SpawnSpiderQuadMini = 48,
		SpawnDockedShips = 49,
		LaunchDockedShips = 50,
		StartStorm = 51,
		EndStorm = 52,
		SpawnBugQueen = 53,
		RemoveAllFiendsAndBugs = 54,
		WaterTransition = 55,
	};

	NMS_GameComponents::GcExperienceDebugTriggerActionTypes::ExperienceDebugTriggerActionEnum ExperienceDebugTriggerAction;
};

//Dependency: NMSString0x10
struct GcDifficultyFuelUseTechOverride
{
	NMS::NMSString0x10 TechID;
	float Multiplier;
};

//Dependency: NMSString0x10
struct GcReplacementEffectData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ReplaceWith;
};

//Dependency: Vector3f
//Dependency: NMSString0x20A
struct GcCreatureDiscoveryThumbnailOverride
{
	NMS::Vector3f DiscoveryUIOffset;
	NMS::NMSString0x20A ContainsDescriptor;
	float DiscoveryUIScaler;
};

struct GcPrimaryAxis
{
	enum class PrimaryAxisEnum : uint32_t
	{
		Z = 0,
		ZNeg = 1,
		X = 2,
		XNeg = 3,
		Y = 4,
		YNeg = 5,
	};

	NMS_GameComponents::GcPrimaryAxis::PrimaryAxisEnum PrimaryAxis;
};

//Dependency: GcReplacementEffectData
//Dependency: GcCreatureDiscoveryThumbnailOverride
//Dependency: GcPrimaryAxis
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcCreatureComponentData
{
	NMS::Vector3f DiscoveryUIOffset;
	NMS::Vector3f PetLargeUIOverrideOffset;
	NMS::NMSString0x10 DeathEffect;
	NMS::NMSString0x10 DeathEffectTrail;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcReplacementEffectData> ReplacementImpacts;
	std::vector<NMS_GameComponents::GcCreatureDiscoveryThumbnailOverride> ThumbnailOverrides;
	float AccessoryPitchOffset;
	NMS_GameComponents::GcPrimaryAxis Axis;
	float DeathEffectScale;
	float DeathFadeTime;
	float DiscoveryFurScaler;
	float DiscoveryUIScaler;
	float NavRadiusModifier;
	float PetIndoorScaler;
	float PetLargeUIOverrideScaler;
	float Scaler;
	float UnderwaterRagdollAnimStrength;
	float UnderwaterRagdollAnimTime;
	float UnderwaterRagdollDamping;
	float UnderwaterRagdollDampingTime;
	float UnderwaterRagdollGravityScale;
	float UnderwaterRagdollSpinStrength;
	float UnderwaterRagdollSpinTime;
	bool UsePetLargeUIOverride;
	bool UseStandardWaterPusher;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationGameData
{
	enum class BlockPlayerWeaponEnum : uint32_t
	{
		Unblocked = 0,
		Sheathed = 1,
		OutButCannotFire = 2,
	};

	enum class RootMotionEnum : uint32_t
	{
		None = 0,
		EnabledWithGravity = 1,
		EnabledFullControl = 2,
	};

	NMS_Toolkit::TkAnimationGameData::RootMotionEnum RootMotion;
	bool BlockPlayerMovement;
	NMS_Toolkit::TkAnimationGameData::BlockPlayerWeaponEnum BlockPlayerWeapon;
};

//Dependency: TkAnimationGameData
//Dependency: NMSString0x10
struct TkAnimBlendTree
{
	NMS::NMSString0x10 Id;
	NMSTemplate Tree;
	NMS_Toolkit::TkAnimationGameData GameData;
	int32_t Priority;
};

//Dependency: TkAnimBlendTree
struct TkBlendTreeLibrary
{
	std::vector<NMS_Toolkit::TkAnimBlendTree> Trees;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcWeightedColourId
{
	NMS::NMSString0x10 DecorationPaletteId;
	NMS::NMSString0x10 PaletteId;
	float RelativeProbability;
};

//Dependency: GcWeightedColourId
//Dependency: GcBuildingClassification
struct GcBuildingColourPalette
{
	std::vector<NMS_GameComponents::GcWeightedColourId> Palettes;
	NMS_GameComponents::GcBuildingClassification Building;
};

//Dependency: VariableSizeString
struct GcAISpaceshipInstanceData
{
	NMS::VariableSizeString File;
};

//Dependency: GcAISpaceshipInstanceData
struct GcAISpaceshipMappingData
{
	NMS_GameComponents::GcAISpaceshipInstanceData ClassMap[7];
};

struct GcMissionConditionHasUnlockedPurpleSystems
{
};

struct GcBuildMenuOption
{
	enum class BuildMenuOptionEnum : uint32_t
	{
		Place = 0,
		ChangeColour = 1,
		FreeRotate = 2,
		Scale = 3,
		SnapRotate = 4,
		Move = 5,
		Duplicate = 6,
		Delete = 7,
		ToggleBuildCam = 8,
		ToggleSnappingAndCollision = 9,
		ToggleSelectionMode = 10,
		ToggleWiringMode = 11,
		ViewRelatives = 12,
		CyclePart = 13,
		PlaceWire = 14,
		CycleRotateMode = 15,
	};

	NMS_GameComponents::GcBuildMenuOption::BuildMenuOptionEnum BuildMenuOption;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkBlackboardCategory
{
	enum class BlackboardCategoryEnum : uint32_t
	{
		Local = 0,
		Archetype = 1,
		PlayerControl = 2,
	};

	NMS_Toolkit::TkBlackboardCategory::BlackboardCategoryEnum BlackboardCategory;
};

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueFloat
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	float DefaultValue;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcTextStylePlain
{
};

struct GcPlayerWeapons
{
	enum class WeaponModeEnum : uint32_t
	{
		Bolt = 0,
		Shotgun = 1,
		Burst = 2,
		Rail = 3,
		Cannon = 4,
		Laser = 5,
		Grenade = 6,
		MineGrenade = 7,
		Scope = 8,
		FrontShield = 9,
		Melee = 10,
		TerrainEdit = 11,
		SunLaser = 12,
		Spawner = 13,
		SpawnerAlt = 14,
		SoulLaser = 15,
		Flamethrower = 16,
		StunGrenade = 17,
		Stealth = 18,
		FishLaser = 19,
	};

	NMS_GameComponents::GcPlayerWeapons::WeaponModeEnum WeaponMode;
};

//Dependency: GcPlayerWeapons
struct GcMissionConditionWeaponMode
{
	NMS_GameComponents::GcPlayerWeapons WeaponMode;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcMessageCutSceneAction
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS::NMSString0x10 Action;
};

struct GcCreaturePetTraits
{
	enum class PetTraitEnum : uint32_t
	{
		Helpfulness = 0,
		Aggression = 1,
		Independence = 2,
	};

	NMS_GameComponents::GcCreaturePetTraits::PetTraitEnum PetTrait;
};

//Dependency: GcCreaturePetTraits
//Dependency: NMSString0x20A
struct GcPetVocabularyTraitEntry
{
	NMS::NMSString0x20A Negative;
	NMS::NMSString0x20A Positive;
	NMS_GameComponents::GcCreaturePetTraits Trait;
};

//Dependency: GcPetVocabularyTraitEntry
//Dependency: NMSString0x20A
struct GcPetVocabularyEntry
{
	NMS::NMSString0x20A GenericFallback;
	std::vector<NMS_GameComponents::GcPetVocabularyTraitEntry> Vocabulary;
	float OddsOfProcReplacement;
};

struct GcRewardEnergy
{
	int32_t Amount;
};

//Dependency: NMSString0x10
struct GcRewardExchangeProduct
{
	NMS::NMSString0x10 IDToGive;
	NMS::NMSString0x10 IDToTake;
	int32_t AmountToGiveMax;
	int32_t AmountToGiveMin;
	int32_t AmountToTakeMax;
	bool ForceSpecialMessage;
	bool HideNewProduct;
};

//Dependency: GcBuildingClassification
struct GcSettlementProductionElementRequirement
{
	int32_t RequiredSettlementBuildingLevel;
	NMS_GameComponents::GcBuildingClassification RequiredSettlementBuildingType;
};

struct GcCombatTimerDifficultyOption
{
	enum class CombatTimerDifficultyOptionEnum : uint32_t
	{
		Off = 0,
		Slow = 1,
		Normal = 2,
		Fast = 3,
	};

	NMS_GameComponents::GcCombatTimerDifficultyOption::CombatTimerDifficultyOptionEnum CombatTimerDifficultyOption;
};

//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkEqualityEnum
//Dependency: NMSString0x20A
struct GcCostDifficultyGroundCombat
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcCombatTimerDifficultyOption GroundCombatTimers;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: NMSString0x10
struct GcUnlockableTwitchReward
{
	NMS::NMSString0x10 LinkedGroupId;
	NMS::NMSString0x10 ProductId;
	NMS::NMSString0x10 TwitchId;
};

//Dependency: GcUnlockableTwitchReward
struct GcUnlockableTwitchRewards
{
	std::vector<NMS_GameComponents::GcUnlockableTwitchReward> Table;
};

//Dependency: GcAlienRace
struct GcMissionConditionExpeditionCaptainRace
{
	NMS_GameComponents::GcAlienRace Race;
};

struct GcInputActions
{
	enum class InputActionEnum : uint32_t
	{
		Invalid = 0,
		Player_Forward = 1,
		Player_Back = 2,
		Player_Left = 3,
		Player_Right = 4,
		Player_SwimUp = 5,
		Player_SwimDown = 6,
		Player_Interact = 7,
		Player_Melee = 8,
		Player_Scan = 9,
		Player_Torch = 10,
		Player_Binoculars = 11,
		Player_Zoom = 12,
		Player_ShowHUD = 13,
		Player_Jump = 14,
		Player_Run = 15,
		Player_Shoot = 16,
		Player_Grenade = 17,
		Player_Reload = 18,
		Player_ChangeWeapon = 19,
		Player_Deconstruct = 20,
		Player_ChangeAltWeapon = 21,
		Player_PlaceMarker = 22,
		Quick_Menu = 23,
		Build_Menu = 24,
		Ship_AltLeft = 25,
		Ship_AltRight = 26,
		Ship_Thrust = 27,
		Ship_Brake = 28,
		Ship_Boost = 29,
		Ship_RollLeft = 30,
		Ship_RollRight = 31,
		Ship_Exit = 32,
		Ship_Land = 33,
		Ship_Shoot = 34,
		Ship_ChangeWeapon = 35,
		Ship_Scan = 36,
		Ship_PulseJump = 37,
		Ship_GalacticMap = 38,
		Ship_TurnLeft = 39,
		Ship_TurnRight = 40,
		Ship_FreeLook = 41,
		Ship_AutoFollow_Toggle = 42,
		Ship_AutoFollow_Hold = 43,
		Ship_CyclePower = 44,
		Vehicle_Forward = 45,
		Vehicle_Reverse = 46,
		Vehicle_Left = 47,
		Vehicle_Right = 48,
		Vehicle_Exit = 49,
		Vehicle_Shoot = 50,
		Vehicle_ChangeWeapon = 51,
		Vehicle_Scan = 52,
		Vehicle_Boost = 53,
		Vehicle_Jump = 54,
		Vehicle_Dive = 55,
		Vehicle_Horn = 56,
		Vehicle_AddCheckpoint = 57,
		Vehicle_DeleteCheckpoint = 58,
		Fe_Select = 59,
		Fe_AltSelect = 60,
		Fe_SelectX = 61,
		Fe_Back = 62,
		Fe_Alt1 = 63,
		Fe_Alt1X = 64,
		Fe_Transfer = 65,
		Fe_Destroy = 66,
		UI_Left = 67,
		UI_Right = 68,
		UI_Left_Sub = 69,
		UI_Right_Sub = 70,
		UI_Down_Sub = 71,
		UI_Up_Sub = 72,
		UI_NetworkPageShortcut = 73,
		UI_StackSplitUp = 74,
		UI_StackSplitDown = 75,
		Fe_ExitMenu = 76,
		Fe_Options = 77,
		Fe_Quit = 78,
		Fe_MsgSkip = 79,
		Fe_TouchscreenPress = 80,
		Quick_Left = 81,
		Quick_Right = 82,
		Quick_Action = 83,
		Quick_Back = 84,
		Quick_Up = 85,
		Quick_Down = 86,
		Build_Place = 87,
		Build_Rotate_Left = 88,
		Build_Rotate_Right = 89,
		Build_AnalogRotateMode1 = 90,
		Build_AnalogRotateMode2 = 91,
		Build_AnalogRotateLeftY = 92,
		Build_AnalogRotateRightY = 93,
		Build_AnalogRotateY = 94,
		Build_AnalogRotateLeftZ = 95,
		Build_AnalogRotateRightZ = 96,
		Build_AnalogRotateZ = 97,
		Build_ScaleUp = 98,
		Build_ScaleDown = 99,
		Build_AnalogueScale = 100,
		Build_SelectionMode = 101,
		Build_Camera = 102,
		Photo_Hide = 103,
		Photo_Sun = 104,
		Photo_Cam = 105,
		Photo_Exit = 106,
		Photo_CamDown = 107,
		Photo_CamUp = 108,
		Photo_Capture = 109,
		Ambient_Camera = 110,
		Ambient_Planet = 111,
		Ambient_System = 112,
		Ambient_Photo = 113,
		Ambient_NxtSong = 114,
		Ambient_Spawn = 115,
		Terrain_Edit = 116,
		Terrain_ModeBack = 117,
		Terrain_Menu = 118,
		Terrain_SizeUp = 119,
		Terrain_SizeDown = 120,
		Terrain_RotTerrainLeft = 121,
		Terrain_RotTerrainRight = 122,
		Terrain_ChangeShape = 123,
		Ship_NextTarget = 124,
		Ship_PreviousTarget = 125,
		Ship_ClosestTarget = 126,
		CameraLook = 127,
		CameraLookX = 128,
		CameraLookY = 129,
		PlayerMove = 130,
		PlayerMoveX = 131,
		PlayerMoveY = 132,
		SpaceshipThrust = 133,
		SpaceshipBrake = 134,
		VehicleMove = 135,
		VehicleSteer = 136,
		VehicleThrust = 137,
		VehicleBrake = 138,
		ShipStrafe = 139,
		ShipStrafeHorizontal = 140,
		ShipStrafeVertical = 141,
		HeldRotate = 142,
		HeldRotateLeft = 143,
		HeldRotateRight = 144,
		ShipSteer = 145,
		ShipTurn = 146,
		ShipPitch = 147,
		ShipLook = 148,
		ShipLookX = 149,
		ShipLookY = 150,
		ShipLand = 151,
		ShipPulse = 152,
		PlayerSmoothTurnLeft = 153,
		PlayerSmoothTurnRight = 154,
		PlayerSnapTurnLeft = 155,
		PlayerSnapTurnRight = 156,
		PlayerSnapTurnAround = 157,
		PlayerMoveAround = 158,
		TeleportDirection = 159,
		PlayerAutoWalk = 160,
		InteractLeft = 161,
		MeleeLeft = 162,
		HandCtrlHolster = 163,
		ShipUp = 164,
		ShipDown = 165,
		ShipLeft = 166,
		ShipRight = 167,
		ShipZoom = 168,
		Inventory = 169,
		DiscoveryNetworkRetry = 170,
		QuitGame = 171,
		ReportBase = 172,
		Unbound = 173,
		GalacticMap_Select = 174,
		GalacticMap_Deselect = 175,
		GalacticMap_Exit = 176,
		GalacticMap_Scan = 177,
		GalacticMap_Home = 178,
		GalacticMap_PlanetBase = 179,
		GalacticMap_Accelerate = 180,
		GalacticMap_ExpandMenu = 181,
		GalacticMap_ScreenshotToggle = 182,
		GalacticMap_ScanChooseNext = 183,
		GalacticMap_ToggleWaypoint = 184,
		GalacticMap_ClearAllWaypoints = 185,
		GalacticMap_NextNavType = 186,
		GalacticMap_PreviousNavType = 187,
		GalacticMap_PreviousFilter = 188,
		GalacticMap_NextFilter = 189,
		GalacticMap_CameraLook = 190,
		GalacticMap_CameraLookX = 191,
		GalacticMap_CameraLookY = 192,
		GalacticMap_PlayerMove = 193,
		GalacticMap_PlayerMoveX = 194,
		GalacticMap_PlayerMoveY = 195,
		GalacticMap_PlayerMoveForward = 196,
		GalacticMap_PlayerMoveBackward = 197,
		GalacticMap_PlayerMoveLeft = 198,
		GalacticMap_PlayerMoveRight = 199,
		GalacticMap_Up = 200,
		GalacticMap_Down = 201,
		GalacticMap_Gesture = 202,
		UI_Cursor = 203,
		UI_CursorX = 204,
		UI_CursorY = 205,
		UI_Camera = 206,
		UI_CameraX = 207,
		UI_CameraY = 208,
		UI_ViewPlayerInfo = 209,
		UI_ToggleBuySell = 210,
		UI_ToggleTradeInventory = 211,
		UI_TouchScrollY = 212,
		UI_TouchScrollX = 213,
		CharacterCustomisation_ShowCharacter = 214,
		UI_CharacterCustomisation_Camera = 215,
		UI_CharacterCustomisation_RotateCamera = 216,
		UI_CharacterCustomisation_PitchCamera = 217,
		GameMode_TitleStart = 218,
		GameMode_ChangeUser = 219,
		Binocs_NextMode = 220,
		Binocs_PrevMode = 221,
		BaseBuilding_PinRecipe = 222,
		BaseBuilding_SwitchBase = 223,
		PhotoMode_CatLeft = 224,
		PhotoMode_CatRight = 225,
		PhotoMode_ValueIncrease = 226,
		PhotoMode_ValueDecrease = 227,
		PhotoMode_OptionUp = 228,
		PhotoMode_OptionDown = 229,
		PhotoMode_CameraRollLeft = 230,
		PhotoMode_CameraRollRight = 231,
		PhotoMode_PauseApplication = 232,
		PhotoMode_CopyLocation = 233,
		PhotoMode_HideLocation = 234,
		UI_Up_Sub_Discovery = 235,
		UI_Down_Sub_Discovery = 236,
		Fe_Upload_Discovery = 237,
		Fe_Assign_Custom_Wonder = 238,
		HMD_Recenter = 239,
		HMD_Recenter2 = 240,
		HMD_FEOpen = 241,
		TextChatOpenClose = 242,
		TextChatSend = 243,
		TextChatPasteHold = 244,
		TextChatPaste = 245,
		TextChatAutocomplete = 246,
		TextChatAutocompleteModifier = 247,
		TextChatCursorLeft = 248,
		TextChatCursorRight = 249,
		TextChatCursorHome = 250,
		TextChatCursorEnd = 251,
		TextChatDelete = 252,
		Player_InteractSecondary = 253,
		BaseBuilding_ToggleVisions = 254,
		BaseBuilding_Browse = 255,
		BaseBuilding_Pickup = 256,
		BaseBuilding_Duplicate = 257,
		BaseBuilding_Delete = 258,
		BaseBuilding_ToggleRotationAxis = 259,
		Build_AnalogRotateZ2 = 260,
		BaseBuilding_ToggleSnapping = 261,
		BaseBuilding_ToggleWiring = 262,
		BaseBuilding_Paint = 263,
		BaseBuilding_NextPart = 264,
		TogglePause = 265,
		TogglePlanet = 266,
		ToggleFreezeCulling = 267,
		Suicide = 268,
		Reset = 269,
		AddLastToolbox = 270,
		AddLastToolboxAtPos = 271,
		TerrainInvalidate = 272,
		TogglePipeline = 273,
		TakeScreenshot = 274,
		TakeExrScreenshot = 275,
		ToggleDebugStats = 276,
		ToggleDebugSubpage = 277,
		DumpNodeStats = 278,
		ToggleTaa = 279,
		DebugDropMeasurementAnchor = 280,
		QuickWarp = 281,
		DumpStats = 282,
		DiscoverOwnBase = 283,
		ClearTerrainEdits = 284,
		SelectRegion = 285,
		SwitchRegionRow = 286,
		SwitchRegionAxis = 287,
		OpenLog = 288,
		DumpVertStats = 289,
		Player_TagMarker = 290,
	};

	NMS_GameComponents::GcInputActions::InputActionEnum InputAction;
};

//Dependency: GcInputActions
//Dependency: GcActionUseType
struct GcActionSetAction
{
	NMS_GameComponents::GcInputActions Action;
	NMS_GameComponents::GcActionUseType Status;
};

struct GcDifficultyCurrencyCostOptionData
{
	enum class FreeCostTypesEnum : uint32_t
	{
		Currency = 0,
		Substance = 1,
		Product = 2,
	};

	float Multipliers[3];
	float TradeBuyPriceMarkupMod;
	bool FreeCostTypes[3];
	bool CostManagerCostsAreFree;
	bool InteractionsCostsAreFree;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Vector4i
{
	uint32_t X;
	uint32_t Y;
	uint32_t Z;
	uint32_t W;
};


} //namespace NMS

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcBaseBuildingEntryGroup
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 SubGroupName;
	int32_t SubGroup;
};

//Dependency: VariableSizeString
struct GcMissionSequenceShowPodMessage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

struct GcBuildingModeCondition
{
	int32_t ValidBuildingModes[5];
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCharacterJetpackEffect
{
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x100 NodeName;
};

struct GcNPCNavSubgraphNodeType
{
	enum class NPCNavSubgraphNodeTypeEnum : uint32_t
	{
		Path = 0,
		Connection = 1,
		PointOfInterest = 2,
	};

	NMS_GameComponents::GcNPCNavSubgraphNodeType::NPCNavSubgraphNodeTypeEnum NPCNavSubgraphNodeType;
};

struct GcVehicleType
{
	enum class VehicleTypeEnum : uint32_t
	{
		Buggy = 0,
		Bike = 1,
		Truck = 2,
		WheeledBike = 3,
		Hovercraft = 4,
		Submarine = 5,
		Mech = 6,
	};

	NMS_GameComponents::GcVehicleType::VehicleTypeEnum VehicleType;
};

struct GcLaunchFuelCostDifficultyOption
{
	enum class LaunchFuelCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcLaunchFuelCostDifficultyOption::LaunchFuelCostDifficultyEnum LaunchFuelCostDifficulty;
};

struct GcPlayerMissionParticipantType
{
	enum class ParticipantTypeEnum : uint32_t
	{
		None = 0,
		MissionGiver = 1,
		MissionGiverReference = 2,
		Primary = 3,
		Secondary1 = 4,
		Secondary2 = 5,
		Secondary3 = 6,
		Secondary4 = 7,
		Secondary5 = 8,
		Secondary6 = 9,
		Secondary7 = 10,
		Secondary8 = 11,
		Secondary9 = 12,
	};

	NMS_GameComponents::GcPlayerMissionParticipantType::ParticipantTypeEnum ParticipantType;
};

//Dependency: GcPlayerMissionParticipantType
//Dependency: Vector3f
//Dependency: GcSeed
struct GcPlayerMissionParticipant
{
	NMS::Vector3f BuildingLocation;
	NMS::GcSeed BuildingSeed;
	uint64_t UA;
	NMS_GameComponents::GcPlayerMissionParticipantType ParticipantType;
};

//Dependency: GcAlienMood
//Dependency: NMSString0x10
struct GcAlienMoodMissionOverride
{
	NMS::NMSString0x10 Mission;
	NMS_GameComponents::GcAlienMood Mood;
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcScanToRevealComponentData
{
	enum class HideScanMarkerConditionEnum : uint32_t
	{
		Never = 0,
		MissingTech = 1,
		Hidden = 2,
	};

	NMS::NMSString0x10 LockedMarkerScanOverride;
	NMS::NMSString0x10 OnRevealEffect;
	NMS::NMSString0x10 RequiredTech;
	float DissolveTime;
	NMS_GameComponents::GcScanToRevealComponentData::HideScanMarkerConditionEnum HideScanMarkerCondition;
	float MaxRange;
	NMS_GameComponents::GcStatsTypes RequiredStat;
	float RevealTime;
	bool DoDissolve;
	bool EnabledOnlyOnAbandonedNexus;
	bool LockedMarkerClearOnReveal;
	bool OnRevealEffectScaleWithAABB;
	bool RevealedByShipScan;
	bool RevealedByToolScan;
	bool SetNodeActivation;
	bool StartEnabled;
};


} //namespace NMS_GameComponents

namespace NMS
{

struct Quaternion
{
	double X;
	double Y;
	double Z;
	double W;
	int32_t dropComponent;
};


} //namespace NMS

namespace NMS_GameComponents
{

struct GcPerformanceFlyby
{
	float Length;
	float LockOffset;
	float LockSpeed;
	float LockTime;
	float Offset;
	bool Locked;
};

struct GcActionSetType
{
	enum class ActionSetTypeEnum : uint32_t
	{
		None = 0,
		FRONTEND = 1,
		Frontend_Right = 2,
		Frontend_Left = 3,
		OnFootControls = 4,
		OnFootControls_Right = 5,
		OnFootControls_Left = 6,
		OnFootQuickMenu = 7,
		OnFootQuickMenu_Right = 8,
		OnFootQuickMenu_Left = 9,
		ShipControls = 10,
		ShipControls_Right = 11,
		ShipControls_Left = 12,
		ShipQuickMenu = 13,
		ShipQuickMenu_Right = 14,
		ShipQuickMenu_Left = 15,
		VehicleMode = 16,
		VehicleMode_Right = 17,
		VehicleMode_Left = 18,
		VehicleQuickMenu = 19,
		VehicleQuickMenu_Right = 20,
		VehicleQuickMenu_Left = 21,
		GalacticMap = 22,
		GalacticMap_Right = 23,
		GalacticMap_Left = 24,
		PhotoModeMenu = 25,
		PhotoModeMenu_Right = 26,
		PhotoModeMenu_Left = 27,
		PhotoModeMvCam = 28,
		PhotoModeMvCam_Right = 29,
		PhotoModeMvCam_Left = 30,
		AmbientMode = 31,
		DebugMode = 32,
		TextChat = 33,
		BuildMenuSelectionMode = 34,
		BuildMenuSelectionMode_Right = 35,
		BuildMenuSelectionMode_Left = 36,
		BuildMenuPlacementMode = 37,
		BuildMenuPlacementMode_Right = 38,
		BuildMenuPlacementMode_Left = 39,
	};

	NMS_GameComponents::GcActionSetType::ActionSetTypeEnum ActionSetType;
};

//Dependency: GcActionSetType
//Dependency: NMSString0x10
struct GcActionSetHudLayer
{
	std::vector<NMS::NMSString0x10> HudLayerIDs;
	NMS_GameComponents::GcActionSetType Type;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcDialogClearanceInfo
{
	NMS::NMSString0x20A GlobalDialogID;
	NMS::NMSString0x10 AssociatedMission;
	bool AlwaysForceClearThisPair;
};

//Dependency: GcDialogClearanceInfo
struct GcDialogClearanceTable
{
	std::vector<NMS_GameComponents::GcDialogClearanceInfo> Table;
};

//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: VariableSizeString
struct GcAIShipDebugSpawnData
{
	NMS::Vector3f Facing;
	NMS::Vector3f FlightDir;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::GcSeed Seed;
	NMS::VariableSizeString SpecificModel;
	float HoverHeight;
	float HoverTime;
	float IgnitionDelay;
	float Speed;
	float TakeOffDelay;
	float WarpOutTime;
	bool Wingman;
};

struct GcPetVocabularyWords
{
	enum class PetVocabularyWordEnum : uint32_t
	{
		Attack = 0,
		Dislike = 1,
		Cute = 2,
		Good = 3,
		Happy = 4,
		Hostile = 5,
		Like = 6,
		Lonely = 7,
		Loved = 8,
		Noise = 9,
		OwnerLove = 10,
		SummonedTrait = 11,
		Hungry = 12,
		Tickles = 13,
		Yummy = 14,
	};

	NMS_GameComponents::GcPetVocabularyWords::PetVocabularyWordEnum PetVocabularyWord;
};

struct GcGameMode
{
	enum class PresetGameModeEnum : uint32_t
	{
		Unspecified = 0,
		Normal = 1,
		Creative = 2,
		Survival = 3,
		Ambient = 4,
		Permadeath = 5,
		Seasonal = 6,
	};

	NMS_GameComponents::GcGameMode::PresetGameModeEnum PresetGameMode;
};

//Dependency: GcGameMode
struct GcMissionConditionGameMode
{
	NMS_GameComponents::GcGameMode Mode;
};

struct GcCostPendingSettlementJudgement
{
};

//Dependency: NMSString0x10
struct GcRegionHotspotBiomeGases
{
	NMS::NMSString0x10 Gas1Id;
	NMS::NMSString0x10 Gas2Id;
};

//Dependency: NMSString0x10
struct GcRegionHotspotSubstance
{
	NMS::NMSString0x10 SubstanceId;
	int32_t AmountCost;
	int32_t SubstanceYeild;
};

struct GcRegionHotspotData
{
	float ClassStrengths[4];
	float ClassWeightings[4];
	float DiscoveryDistanceThreshold;
	float MaxRange;
	float MinRange;
	float ProbabilityWeighting;
};

//Dependency: GcRegionHotspotBiomeGases
//Dependency: GcRegionHotspotSubstance
//Dependency: GcRegionHotspotData
struct GcRegionHotspotsTable
{
	NMS_GameComponents::GcRegionHotspotBiomeGases RegionHotspotBiomeGases[17];
	std::vector<NMS_GameComponents::GcRegionHotspotSubstance> RegionHotspotSubstances;
	NMS_GameComponents::GcRegionHotspotData RegionHotspots[6];
	float RegionHotspotsMaxDifferentCategoryOverlap;
	float RegionHotspotsMinSameCategorySpacing;
	float RegionHotspotsPerPoleMax;
	float RegionHotspotsPerPoleMin;
	float RegionHotspotsPoleSpacing;
};

struct GcRewardDestructEntry
{
	float HealthFactor;
};

//Dependency: GcRewardDestructEntry
struct GcRewardDestructRarities
{
	NMS_GameComponents::GcRewardDestructEntry Rarities[3];
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkBlackboardValueFloat
{
	NMS::NMSString0x10 Key;
	float Value;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcProceduralTextureColourIndices
{
	int32_t Alts[8];
};

struct GcMaintenanceElementGroups
{
	enum class MaintenanceGroupEnum : uint32_t
	{
		Custom = 0,
		Farming = 1,
		Fuelling = 2,
		Repairing = 3,
		EasyRepairing = 4,
		Cleaning = 5,
		Frigate = 6,
		Sentinels = 7,
		Runes = 8,
		RobotHeads = 9,
	};

	NMS_GameComponents::GcMaintenanceElementGroups::MaintenanceGroupEnum MaintenanceGroup;
};

//Dependency: GcMaintenanceElementGroups
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
struct GcMaintenanceGroupInstallData
{
	NMS::NMSString0x20A InstallSubtitle;
	NMS::NMSString0x20A InstallTitle;
	NMS::NMSString0x20A UninstallSubtitle;
	NMS::NMSString0x20A UninstallTitle;
	int32_t BuildingSeedOffset;
	NMS_GameComponents::GcMaintenanceElementGroups ItemGroupOverride;
	NMS_GameComponents::GcAudioWwiseEvents OverrideAudioID;
	bool DismantleIsDelete;
	bool HideChargingInfo;
	bool InstallIsFree;
};

struct GcBroadcastLevel
{
	enum class BroadcastLevelEnum : uint32_t
	{
		Scene = 0,
		LocalModel = 1,
		Local = 2,
	};

	NMS_GameComponents::GcBroadcastLevel::BroadcastLevelEnum BroadcastLevel;
};

//Dependency: GcMaintenanceElementGroups
//Dependency: GcInventoryType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMaintenanceElement
{
	enum class UpdateTypeEnum : uint32_t
	{
		UpdatesAlways = 0,
		UpdateOnlyWhenComplete = 1,
		UpdateOnlyWhenNotComplete = 2,
	};

	enum class DamageStatusEnum : uint32_t
	{
		Damaged = 0,
		Repaired = 1,
		Random = 2,
	};

	enum class CompletionRequirementEnum : uint32_t
	{
		FullyChargedAndRepaired = 0,
		AnyChargeAndRepaired = 1,
		FullyRepaired = 2,
		NotFullyCharged = 3,
		EmptySlot = 4,
		NoRequirement = 5,
		UserInstalls = 6,
		HasIngredients = 7,
		GroupInstall = 8,
	};

	NMS::NMSString0x20A LocatorOverride;
	NMS::NMSString0x10 Id;
	float AmountEmptyTimePeriod;
	NMS_GameComponents::GcMaintenanceElement::CompletionRequirementEnum CompletionRequirement;
	int32_t DamagedAfterTimePeriodMax;
	int32_t DamagedAfterTimePeriodMin;
	NMS_GameComponents::GcMaintenanceElement::DamageStatusEnum DamageStatus;
	NMS_GameComponents::GcMaintenanceElementGroups ItemGroupOverride;
	int32_t MaxCapacity;
	float MaxRandAmount;
	float MinRandAmount;
	NMS_GameComponents::GcInventoryType Type;
	NMS_GameComponents::GcMaintenanceElement::UpdateTypeEnum UpdateType;
	bool BlockDiscardWhenAllowedForParent;
	bool HideWhenComplete;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCameraWanderData
{
	float CamWanderAmplitude;
	float CamWanderPhase;
	bool CamWander;
};

//Dependency: TkCameraWanderData
//Dependency: Vector3f
struct TkModelRendererCameraData
{
	NMS::Vector3f Offset;
	NMS_Toolkit::TkCameraWanderData Wander;
	float Distance;
	float LightPitch;
	float LightRotate;
	float Pitch;
	float Roll;
	float Rotate;
};

//Dependency: TkModelRendererCameraData
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkModelRendererData
{
	enum class ThumbnailModeEnum : uint32_t
	{
		None = 0,
		HUD = 1,
		GUI = 2,
	};

	enum class FocusTypeEnum : uint32_t
	{
		ResourceBounds = 0,
		ResourceBoundingHeight = 1,
		NodeBoundingBox = 2,
		DiscoveryView = 3,
	};

	NMS_Toolkit::TkModelRendererCameraData Camera;
	NMS::Vector3f FocusOffset;
	NMS::NMSString0x20A FocusLocator;
	NMS::NMSString0x10 Anim;
	float AspectRatio;
	float BlendInOffset;
	float BlendInTime;
	float FocusInterpTime;
	NMS_Toolkit::TkModelRendererData::FocusTypeEnum FocusType;
	float Fov;
	float HeightOffset;
	float LightIntensityMultiplier;
	NMS_Toolkit::TkModelRendererData::ThumbnailModeEnum ThumbnailMode;
	bool AlignUIToCameraInHmd;
	bool FlipRotationIfNecessary;
	bool LookForFocusInMasterModel;
	bool UsePlayerCameraInHmd;
	bool UseSensibleCameraFocusNodeIsNowOffsetNode;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcMaintenanceGroupInstallData
//Dependency: GcBroadcastLevel
//Dependency: GcMaintenanceElement
//Dependency: TkModelRendererData
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcMaintenanceComponentData
{
	enum class ModelRendererResourceEnum : uint32_t
	{
		ModelNode = 0,
		MasterModelNode = 1,
	};

	enum class InteractableEnum : uint32_t
	{
		OnlyWhenComplete = 0,
		OnlyWhenNotComplete = 1,
		Always = 2,
		Never = 3,
	};

	NMS_Toolkit::TkModelRendererData ModelRenderData;
	NMS_Toolkit::TkModelRendererData ModelRenderDataAlt;
	NMS_GameComponents::GcMaintenanceGroupInstallData GroupInstallSetup;
	NMS::NMSString0x20A ActionButtonOverride;
	NMS::NMSString0x20A ActionDescriptionOverride;
	NMS::NMSString0x20A ActionWarningOverride;
	NMS::NMSString0x20A ChargeButtonOverride;
	NMS::NMSString0x20A ChargeDescriptionOverride;
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A DiscardButtonOverride;
	NMS::NMSString0x20A DiscardDescriptionOverride;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A TransferButtonOverride;
	NMS::NMSString0x20A TransferDescriptionOverride;
	std::vector<NMS::NMSString0x10> ForceDamageDuringMissions;
	NMS::NMSString0x10 GiveRewardOnCompletion;
	std::vector<NMS_GameComponents::GcMaintenanceElement> PreInstalledTech;
	NMS::NMSString0x10 StartMissionOnCompletion;
	NMS::NMSString0x10 StartMissionOnUse;
	NMS::Vector2f CustomIconCentre;
	NMS_GameComponents::GcAudioWwiseEvents AudioIDOnSuccess;
	NMS_GameComponents::GcBroadcastLevel BroadcastLevel;
	float CompletedTransitionDelay;
	NMS_GameComponents::GcMaintenanceComponentData::InteractableEnum Interactable;
	float InWorldUIForcedOffset;
	float InWorldUIForcedOffsetV2;
	float InWorldUIMinDistOverride;
	float InWorldUIMinDistOverrideV2;
	float InWorldUIScaler;
	NMS_GameComponents::GcMaintenanceComponentData::ModelRendererResourceEnum ModelRendererResource;
	int32_t VisibleMaintenanceSlots;
	bool AllowCharge;
	bool AllowCraftProduct;
	bool AllowDiscard;
	bool AllowDismantle;
	bool AllowInstallTech;
	bool AllowMoveAndStack;
	bool AllowPinning;
	bool AllowRepair;
	bool AllowTransfer;
	bool AllowTransferIn;
	bool AutoCompleteOnStart;
	bool CanUseOutsideOfBase;
	bool DisableSynchronise;
	bool ForceNoninteraction;
	bool ForceOneClickRepair;
	bool ForceRemoveUIRenderLayer;
	bool HideMaxAmountOnProductSlots;
	bool InteractionRequiresPower;
	bool InWorldUIUseCameraUp;
	bool OpenInteractionOnQuit;
	bool ShareInteractionModelRender;
	bool SilenceSuitVOIAlerts;
	bool UseBoundsForIconCentre;
	bool UseInteractionStyleCameraEvent;
	bool UseModelResourceRenderer;
	bool UseNetworkLock;
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x100
struct GcCreatureFeederComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	std::vector<NMS::NMSString0x100> DispenseNodes;
	float DispensePeriod;
	float DispenseVelocity;
	int32_t NumInputs;
	int32_t NumMealsPerBait;
};

struct GcGalaxyStarAnomaly
{
	enum class GalaxyStarAnomalyEnum : uint32_t
	{
		None = 0,
		AtlasStation = 1,
		AtlasStationFinal = 2,
		BlackHole = 3,
		MiniStation = 4,
	};

	NMS_GameComponents::GcGalaxyStarAnomaly::GalaxyStarAnomalyEnum GalaxyStarAnomaly;
};

//Dependency: GcGalaxyStarAnomaly
struct GcMissionConditionIsAnomalyLoaded
{
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;
};

struct GcAIShipWeapons
{
	enum class AIShipWeaponEnum : uint32_t
	{
		Projectile = 0,
		Laser = 1,
		MiningLaser = 2,
	};

	NMS_GameComponents::GcAIShipWeapons::AIShipWeaponEnum AIShipWeapon;
};

//Dependency: GcPrimaryAxis
//Dependency: GcSpaceshipClasses
//Dependency: GcAISpaceshipTypes
//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcAISpaceshipComponentData
{
	NMS_Toolkit::TkModelResource Hangar;
	NMS::NMSString0x10 CombatDefinitionID;
	NMS_GameComponents::GcPrimaryAxis Axis;
	NMS_GameComponents::GcSpaceshipClasses Class;
	NMS_GameComponents::GcAISpaceshipTypes Type;
	bool IsSpaceAnomaly;
};

struct GcDifficultyPresetType
{
	enum class DifficultyPresetTypeEnum : uint32_t
	{
		Invalid = 0,
		Custom = 1,
		Normal = 2,
		Creative = 3,
		Relaxed = 4,
		Survival = 5,
		Permadeath = 6,
	};

	NMS_GameComponents::GcDifficultyPresetType::DifficultyPresetTypeEnum DifficultyPresetType;
};

//Dependency: GcDifficultyPresetType
struct GcPersistentBaseDifficultyData
{
	enum class PersistentBaseDifficultyFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_GameComponents::GcDifficultyPresetType DifficultyPreset;
	NMS_GameComponents::GcPersistentBaseDifficultyData::PersistentBaseDifficultyFlagsEnum PersistentBaseDifficultyFlags;
};

//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessageCrime
{
	enum class CrimeEnum : uint32_t
	{
		AttackCreature = 0,
		AttackSentinel = 1,
		AttackSentinelLaser = 2,
		KillCreature = 3,
		KillSentinel = 4,
		MineResources = 5,
		HitResources = 6,
		AttackSpaceStation = 7,
		AttackShip = 8,
		AttackPolice = 9,
		KillShip = 10,
		KillPolice = 11,
		TimedShootable = 12,
	};

	NMS::Vector3f Position;
	NMS_GameComponents::GcMessageCrime::CrimeEnum Crime;
	NMS::GcNodeID Criminal;
	int32_t Value;
	NMS::GcNodeID Victim;
};

struct GcCostShipUpgradeable
{
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSettlementActivity
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageForConflict;
	NMS::VariableSizeString MessageForProposal;
	NMS::VariableSizeString MessageForVisitor;
	NMS::VariableSizeString MessageWhileBuilding;
};

struct GcGalaxyCameraData
{
	float CameraFOV;
	float CameraShakeDriftClip;
	float CameraShakeDriftShift;
	float CameraShakeMaximum;
	float CameraShakeSmoothingRate;
	float FixedZoomRate;
	float FreeElevationBlendRate;
	float FreePanSpeed;
	float FreePanSpeedTurbo;
	float FreeRotateSpeed;
	float FreeUpDownSpeed;
	float FreeUpDownSpeedTurbo;
	float LockTransitionRate;
	float LockedScaledElevationSpeed;
	float LockedScaledPushSpeed;
	float LockedSpinSpeed;
	float MaxZoomDistance;
	float MinPushingZoomDistance;
	float MinPushingZoomDistanceScaler;
	float MinZoomDistance;
	float MovementBlendRateFree;
	float MovementBlendRateLocked;
	float MovementBlendRateLookLocked;
	float ZoomInRate;
	float ZoomOutElevation;
	float ZoomOutPushDist;
	float ZoomOutRate;
	float ZoomOutSpin;
};

//Dependency: GcCreaturePetTraits
struct GcPetBehaviourTraitModifier
{
	float CooldownModifierMax;
	float CooldownModifierMin;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;
	float WeightModifierMax;
	float WeightModifierMin;
};

struct GcLegality
{
	enum class LegalityEnum : uint32_t
	{
		Legal = 0,
		Illegal = 1,
	};

	NMS_GameComponents::GcLegality::LegalityEnum Legality;
};

struct GcAISpaceshipWeightingData
{
	float CivilianClassWeightings[10];
};

//Dependency: NMSString0x20A
struct GcNPCProbabilityWordReactionData
{
	NMS::NMSString0x20A NextInteraction;
	float Probability;
};

//Dependency: GcNPCProbabilityWordReactionData
struct GcNPCWordReactionList
{
	std::vector<NMS_GameComponents::GcNPCProbabilityWordReactionData> Reactions;
};

//Dependency: NMSString0x10
struct GcFreighterDungeonChoice
{
	NMS::NMSString0x10 Name;
	float Weighting;
};

//Dependency: GcFreighterDungeonChoice
//Dependency: TkModelResource
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcAbandonedFreighterComponentData
{
	NMS_Toolkit::TkModelResource DungeonRootScene;
	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	std::vector<NMS_GameComponents::GcFreighterDungeonChoice> DungeonOptions;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationTextureOption
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Layer;
	std::vector<NMS::NMSString0x20A> Options;
	std::vector<NMS::NMSString0x10> ProductsToUnlock;
	NMS::NMSString0x10 TextureOptionsID;
	std::vector<NMS::NMSString0x20A> Tips;
};

//Dependency: GcCustomisationMultiTextureOption
//Dependency: GcCustomisationTextureOption
struct GcCustomisationTextureOptions
{
	std::vector<NMS_GameComponents::GcCustomisationMultiTextureOption> MultiTextureOptions;
	std::vector<NMS_GameComponents::GcCustomisationTextureOption> TextureOptions;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterTrigger
{
	NMS::NMSString0x10 Name;
	bool Default;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceEndScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNGuiAlignment
//Dependency: Colour32
struct TkNGuiTextStyleData
{
	float DropShadowAngle;
	float DropShadowOffset;
	float FontHeight;
	int32_t FontIndex;
	float FontSpacing;
	float OutlineSize;
	NMS::Colour32 Colour;
	NMS::Colour32 OutlineColour;
	NMS::Colour32 ShadowColour;
	NMS_Toolkit::TkNGuiAlignment Align;
	bool AllowScroll;
	bool AutoAdjustFontHeight;
	bool AutoAdjustHeight;
	bool BlockAudio;
	bool BypassStyleColours;
	bool BypassStyleFont;
	bool BypassStyleFontHeight;
	bool ForceUpperCase;
	bool HasDropShadow;
	bool HasOutline;
	bool IsIndented;
	bool IsParagraph;
};

//Dependency: TkNGuiTextStyleData
struct TkNGuiTextStyle
{
	NMS_Toolkit::TkNGuiTextStyleData Active;
	NMS_Toolkit::TkNGuiTextStyleData Default;
	NMS_Toolkit::TkNGuiTextStyleData Highlight;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNGuiLayoutData
//Dependency: TkNGuiGraphicStyle
//Dependency: TkNGuiTextStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiPresetText
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::VariableSizeString Image;
	NMS::NMSString0x10 PresetID;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyle;
	NMS_Toolkit::TkNGuiTextStyle Style;
};

//Dependency: NMSString0x10
struct GcFishingRodData
{
	NMS::NMSString0x10 DescriptorGroupID;
	NMS::NMSString0x10 TechID;
};

struct GcCreatureGenerationDensity
{
	enum class DensityEnum : uint32_t
	{
		Sparse = 0,
		Normal = 1,
		Dense = 2,
		VeryDense = 3,
	};

	NMS_GameComponents::GcCreatureGenerationDensity::DensityEnum Density;
};

//Dependency: GcCreatureGenerationDensity
//Dependency: VariableSizeString
struct GcCreatureGenerationDomainEntry
{
	NMS::VariableSizeString File;
	NMS_GameComponents::GcCreatureGenerationDensity DensityModifier;
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcSentinelQuadWeaponData
{
	NMS::NMSString0x10 ChargingIdleAnimId;
	NMS::NMSString0x10 FiringIdleAnimId;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LaunchProjectileAnimId;
	NMS::NMSString0x10 MuzzleFlashEffect;
	NMS::NMSString0x10 ProjectileId;
	float ChargeLightIntensity;
	float ChargeTime;
	float ExplosionRadius;
	float FireInterval;
	float FireTimeMax;
	float FireTimeMin;
	float InheritInitialVelocity;
	float MaxAttackAngle;
	float MaxRange;
	float MinRange;
	int32_t NumProjectiles;
	int32_t NumShotsMax;
	int32_t NumShotsMin;
	float ProjectileSpread;
	NMS_GameComponents::GcAudioWwiseEvents StartFireAudioEvent;
	NMS_GameComponents::GcAudioWwiseEvents StopFireAudioEvent;
	float Timeout;
	NMS::NMSString0x20 ShootLocatorName;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationBannerImageData
{
	NMS::NMSString0x20A TipText;
	NMS_Toolkit::TkTextureResource BannerImage;
	NMS::NMSString0x10 LinkedSpecialID;
	bool WideImage;
};

struct GcAccessibleOverride_Text
{
	enum class AccessibleOverride_TextEnum : uint32_t
	{
		FontHeight = 0,
	};

	NMS_GameComponents::GcAccessibleOverride_Text::AccessibleOverride_TextEnum AccessibleOverride_Text;
	float FloatValue;
};

//Dependency: VariableSizeString
struct GcMissionSequenceCloseMenu
{
	enum class MenuToCloseEnum : uint32_t
	{
		QuickMenu = 0,
		BuildMenu = 1,
		Inventory = 2,
		AllDetailMessages = 3,
	};

	NMS::VariableSizeString DebugText;
	float Delay;
	NMS_GameComponents::GcMissionSequenceCloseMenu::MenuToCloseEnum MenuToClose;
};

struct GcMissionConditionCreatureReadyToLay
{
	bool PrimaryCreatureOnly;
};

//Dependency: Colour
struct GcPaletteData
{
	enum class NumColoursEnum : uint32_t
	{
		Inactive = 0,
		_1 = 1,
		_4 = 2,
		_8 = 3,
		_16 = 4,
		All = 5,
	};

	NMS::Colour Colours[64];
	NMS_GameComponents::GcPaletteData::NumColoursEnum NumColours;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCustomisationColourPaletteExtraData
{
	std::vector<NMS::NMSString0x10> ProductToUnlock;
	std::vector<NMS::NMSString0x20A> TipText;
};

//Dependency: GcPaletteData
//Dependency: GcCustomisationColourPaletteExtraData
//Dependency: NMSString0x10
struct GcCustomisationColourPalette
{
	NMS_GameComponents::GcPaletteData PaletteData;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData ExtraData;
	NMS::NMSString0x10 ID;
};

//Dependency: GcCustomisationColourPalette
//Dependency: NMSString0x10
struct GcCustomisationColourPalettes
{
	NMS::NMSString0x10 CustomisationTypePalettes[26];
	std::vector<NMS_GameComponents::GcCustomisationColourPalette> Palettes;
};

struct GcByteBeatToken
{
	enum class ByteBeatTokenEnum : uint32_t
	{
		T = 0,
		AND = 1,
		OR = 2,
		XOR = 3,
		Plus = 4,
		Minus = 5,
		Multiply = 6,
		Divide = 7,
		Modulo = 8,
		ShiftLeft = 9,
		ShiftRight = 10,
		Greater = 11,
		GreaterEqual = 12,
		Less = 13,
		LessEqual = 14,
		Number = 15,
		OpenParenthesis = 16,
		CloseParenthesis = 17,
	};

	NMS_GameComponents::GcByteBeatToken::ByteBeatTokenEnum ByteBeatToken;
};

//Dependency: GcByteBeatToken
struct GcByteBeatTemplate
{
	std::vector<NMS_GameComponents::GcByteBeatTemplate> Children;
	int32_t MaxValue;
	int32_t MinValue;
	NMS_GameComponents::GcByteBeatToken TokenType;
	float Weight;
};

//Dependency: GcRealityCommonFactions
//Dependency: TkEqualityEnum
struct GcMissionConditionAIShipCount
{
	int32_t Count;
	NMS_Toolkit::TkEqualityEnum Test;
	NMS_GameComponents::GcRealityCommonFactions Type;
};

struct GcMissionConditionInVR
{
	bool NeedsHandControllers;
	bool NeedsNoHandControllers;
	bool NeedsSmoothMoveOn;
	bool NeedsSnapTurnOn;
	bool NeedsTeleportOn;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkDynamicTreeWindFrequency
{
	float BranchHForcePeriod;
	float BranchHForcePeriodFast;
	float BranchVForcePeriod;
	float BranchVForcePeriodFast;
	float LeafForcePeriod;
	float LeafForcePeriodFast;
	float LeafNoiseSpeed;
	float LeafNoiseSpeedFast;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcActionSetAction
//Dependency: NMSString0x20A
//Dependency: GcInputActions
//Dependency: GcActionUseType
//Dependency: GcActionSetType
//Dependency: NMSString0x20
struct GcActionSet
{
	NMS::NMSString0x20A LocTag;
	std::vector<NMS_GameComponents::GcActionSetAction> Actions;
	std::vector<NMS_GameComponents::GcInputActions> BlockedActions;
	NMS_GameComponents::GcActionUseType Status;
	NMS_GameComponents::GcActionSetType Type;
	NMS::NMSString0x20 ExternalId;
	NMS::NMSString0x20 ExternalLoc;
	NMS::NMSString0x20 ParentExternalId;
};

struct GcByteBeatEnvelope
{
	enum class ByteBeatEnvelopeEnum : uint32_t
	{
		Short = 0,
		Med = 1,
		Long = 2,
	};

	NMS_GameComponents::GcByteBeatEnvelope::ByteBeatEnvelopeEnum ByteBeatEnvelope;
};

struct GcByteBeatWave
{
	enum class ByteBeatWaveEnum : uint32_t
	{
		SawTooth = 0,
		Sine = 1,
		Square = 2,
		Triangle = 3,
	};

	NMS_GameComponents::GcByteBeatWave::ByteBeatWaveEnum ByteBeatWave;
};

//Dependency: GcByteBeatEnvelope
//Dependency: GcByteBeatWave
//Dependency: NMSString0x40
struct GcByteBeatDrum
{
	enum class AugmentModeEnum : uint32_t
	{
		Add = 0,
		Multiply = 1,
		Max = 2,
	};

	NMS_GameComponents::GcByteBeatEnvelope AttackEnvelope;
	NMS_GameComponents::GcByteBeatDrum::AugmentModeEnum AugmentMode;
	float AugmentOverdrive;
	float AugmentPitch;
	float AugmentPitchFalloff;
	float AugmentPitchFalloffPower;
	float AugmentSineNoiseMix;
	float AugmentVolume;
	NMS_GameComponents::GcByteBeatEnvelope DecayEnvelope;
	float Duration;
	float OctaveShift;
	float Volume;
	NMS_GameComponents::GcByteBeatWave WaveType;
	NMS::NMSString0x40 Tree;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcByteBeatSong
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 RequiredSpecialId;
	NMS::NMSString0x40 Data[8];
	NMS::NMSString0x40 AuthorOnlineID;
	NMS::NMSString0x40 AuthorPlatform;
	NMS::NMSString0x40 AuthorUsername;
	NMS::NMSString0x20 Name;
};

//Dependency: GcByteBeatDrum
//Dependency: GcByteBeatSong
//Dependency: NMSString0x40
//Dependency: GcByteBeatTemplate
struct GcByteBeatTemplates
{
	std::vector<NMS_GameComponents::GcByteBeatDrum> HiHats;
	std::vector<NMS::NMSString0x40> InitialTrees;
	std::vector<NMS_GameComponents::GcByteBeatDrum> KickDrums;
	std::vector<NMS_GameComponents::GcByteBeatDrum> SnareDrums;
	std::vector<NMS_GameComponents::GcByteBeatSong> Songs;
	std::vector<NMS_GameComponents::GcByteBeatTemplate> Templates;
	float CombinerWeights[18];
	float OperatorPermuteChance;
	float TemplateCombineChance;
	float TemplateCombineChanceAtRoot;
};

//Dependency: GcVehicleType
struct GcMissionConditionHasExocraft
{
	NMS_GameComponents::GcVehicleType ExocraftType;
	bool SpecificExocraft;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSettlementMiniMission
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: GcActionSet
struct GcActionSets
{
	std::vector<NMS_GameComponents::GcActionSet> ActionSets;
};

//Dependency: GcCreatureGenerationDomainEntry
struct GcCreatureGenerationDomainAdditionalEntries
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainEntry> Tables;
	float ChanceOfHemisphereLimit;
	int32_t MaxTablesToAdd;
	int32_t MaxToHemisphereLimit;
};

//Dependency: GcCreatureGenerationDomainAdditionalEntries
//Dependency: GcCreatureGenerationDomainEntry
//Dependency: NMSString0x10
struct GcCreatureGenerationDomainTable
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainAdditionalEntries> AdditionalTables;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainEntry> Tables;
	float ChanceOfHemisphereLimit;
	int32_t MaxToHemisphereLimit;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkTriggerFeedbackData
{
	enum class FeedbackTypeEnum : uint32_t
	{
		None = 0,
		Feedback = 1,
		Weapon = 2,
		Vibration = 3,
	};

	NMS_Toolkit::TkTriggerFeedbackData::FeedbackTypeEnum FeedbackType;
	float Frequency;
	float Position;
	float Strength;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcFreighterBaseOption
{
	NMS::VariableSizeString BaseDataFile;
	float ProbabilityWeighting;
};

//Dependency: GcFreighterBaseOption
struct GcFreighterBaseOptions
{
	std::vector<NMS_GameComponents::GcFreighterBaseOption> FreighterBases;
};

//Dependency: GcFreighterBaseOptions
//Dependency: VariableSizeString
struct GcFreighterBaseComponentData
{
	enum class FreighterBaseGenerationModeEnum : uint32_t
	{
		Prefab = 0,
		WFC = 1,
	};

	NMS_GameComponents::GcFreighterBaseOptions FreighterBaseOptions[4];
	NMS::VariableSizeString FreighterBaseForPlayerReset;
	NMS::VariableSizeString WFCBuildingFile;
	NMS_GameComponents::GcFreighterBaseComponentData::FreighterBaseGenerationModeEnum FreighterBaseGenerationMode;
};

//Dependency: GcMonth
//Dependency: NMSString0x80
struct GcYearlyRecurrence
{
	int32_t RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS_GameComponents::GcMonth RecurrenceMonth;
	NMS::NMSString0x80 DebugText;
};

struct GcActionTrigger
{
	std::vector<NMSTemplate> Action;
	NMSTemplate Event;
};

//Dependency: GcAlienRace
struct GcMissionConditionHasSettlement
{
	NMS_GameComponents::GcAlienRace SpecificAlienRace;
};

//Dependency: NMSString0x10
struct GcRewardSettlementCustomJudgement
{
	NMS::NMSString0x10 CustomJudgement;
	bool CanOverrideNonCustomJudgement;
	bool DisplaySettlementJudgementAlert;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimMaskBone
{
	int32_t NameHash;
	float RotationWeight;
	float TranslationWeight;
	NMS::NMSString0x40 Name;
	bool ChildrenInheritWeights;
	bool LinkWeights;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardTeleport
{
	enum class TeleportRewardTypeEnum : uint32_t
	{
		None = 0,
		ToBase = 1,
		Station0 = 2,
		Station1 = 3,
		Station2 = 4,
		Station3 = 5,
		Atlas = 6,
	};

	NMS_GameComponents::GcRewardTeleport::TeleportRewardTypeEnum TeleportRewardType;
};

struct GcTerrainEdit
{
	int32_t Position;
	uint8_t Data;
};

//Dependency: GcTerrainEdit
//Dependency: Vector3f
struct GcTerrainEditsBuffer
{
	NMS::Vector3f BufferAnchors[256];
	uint64_t GalacticAddresses[256];
	NMS_GameComponents::GcTerrainEdit Edits[30000];
	int32_t BufferSizes[256];
	uint8_t BufferAges[256];
	bool BufferProtected[256];
};

//Dependency: NMSString0x20A
struct GcMissionConditionAreDroneHivePartsDestroyed
{
	NMS::NMSString0x20A ControllingScanEvent;
};

//Dependency: GcActionSetHudLayer
struct GcActionSetsHudLayers
{
	std::vector<NMS_GameComponents::GcActionSetHudLayer> ActionSetHudLayers;
};

//Dependency: GcActionTrigger
//Dependency: NMSString0x10
struct GcActionTriggerState
{
	NMS::NMSString0x10 StateID;
	std::vector<NMS_GameComponents::GcActionTrigger> Triggers;
};

//Dependency: GcCombatEffectType
struct GcCombatEffectDamageMultiplier
{
	NMS_GameComponents::GcCombatEffectType CombatEffectType;
	float DamageMultiplier;
};

//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x40
struct GcCreatureFiendAttackData
{
	NMS::NMSString0x10 PushBackAttackAnim;
	NMS::NMSString0x10 PushBackDamageID;
	NMS::NMSString0x10 SpawnBroodAnim;
	NMS::NMSString0x10 SpawnBroodID;
	NMS::NMSString0x10 SpitAnim;
	NMS::NMSString0x10 SpitProjectile;
	NMS::NMSString0x10 TurnLAnim;
	NMS::NMSString0x10 TurnRAnim;
	NMS::Vector2f TurnAnimSpeeds;
	float AnimSpeedModifier;
	float AttackLightIntensity;
	float DelayBetweenPounceAttacks;
	float DelayBetweenSpitAttacks;
	float FarDist;
	float IdleLightIntensity;
	int32_t MaxFlurryHits;
	int32_t MinFlurryHits;
	float ModifyDistanceForHeight;
	float NearDist;
	int32_t PushBackAttackFrame;
	float PushBackRange;
	float RoarChanceOnHit;
	float RoarChanceOnMiss;
	float SpawnBroodTimer;
	int32_t SpitAnimFrame;
	float SpitFacingRequirement;
	float StartDamageTime;
	float TurnAnimAngleMax;
	float TurnAnimAngleMin;
	float TurnToFaceTime;
	NMS::NMSString0x40 AttackLight;
	NMS::NMSString0x40 SpitJoint;
	bool AllowPounce;
	bool AllowPushBackAttack;
	bool AllowSpawnBrood;
	bool AllowSpit;
	bool AllowSpitAlways;
	bool AOESpitAttack;
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcPlayerCommunicatorMessage
{
	enum class CommunicatorTypeEnum : uint32_t
	{
		HoloExplorer = 0,
		HoloSceptic = 1,
		HoloNoone = 2,
		Generic = 3,
		PlayerFreighterCaptain = 4,
		Polo = 5,
		Nada = 6,
		QuicksilverBot = 7,
		PlayerSettlementResident = 8,
		CargoScanDrone = 9,
		Tethys = 10,
		FleetExpeditionCaptain = 11,
		LivingFrigate = 12,
	};

	NMS::NMSString0x20A Dialog;
	NMS::NMSString0x20A ShipHUDOverride;
	NMS_GameComponents::GcPlayerCommunicatorMessage::CommunicatorTypeEnum CommunicatorType;
	NMS_GameComponents::GcAudioWwiseEvents HailAudioOverride;
	NMS_GameComponents::GcAlienRace RaceOverride;
	bool ShowHologram;
};

struct GcSettlementStatType
{
	enum class SettlementStatTypeEnum : uint32_t
	{
		MaxPopulation = 0,
		Happiness = 1,
		Production = 2,
		Upkeep = 3,
		Sentinels = 4,
		Debt = 5,
		Alert = 6,
		BugAttack = 7,
	};

	NMS_GameComponents::GcSettlementStatType::SettlementStatTypeEnum SettlementStatType;
};

//Dependency: GcSettlementStatType
struct GcSettlementStatValueRange
{
	int32_t MaxValue;
	int32_t MinValue;
	NMS_GameComponents::GcSettlementStatType Type;
};

struct GcWeatherOptions
{
	enum class WeatherEnum : uint32_t
	{
		Clear = 0,
		Dust = 1,
		Humid = 2,
		Snow = 3,
		Toxic = 4,
		Scorched = 5,
		Radioactive = 6,
		RedWeather = 7,
		GreenWeather = 8,
		BlueWeather = 9,
		Swamp = 10,
		Lava = 11,
		Bubble = 12,
		Weird = 13,
		Fire = 14,
		ClearCold = 15,
		GasGiant = 16,
	};

	NMS_GameComponents::GcWeatherOptions::WeatherEnum Weather;
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector2f
struct GcCloudProperties
{
	NMS::Colour CloudBaseColour;
	NMS::Vector4f CloudHeightGradient1;
	NMS::Vector4f CloudHeightGradient2;
	NMS::Vector4f CloudHeightGradient3;
	NMS::Colour CloudTopColour;
	NMS::Vector2f StratosphereWindOffset;
	NMS::Vector2f WindOffset;
	float AbsorptionFactor;
	float AmbientDensity;
	float AmbientScalar;
	float AnimationScale;
	float BackwardScatteringG;
	float BaseScale;
	float CloudBottomFade;
	float CloudDistortion;
	float CloudDistortionScale;
	float ConeRadius;
	float DarkOutlineScalar;
	float Density;
	float DetailScale;
	float DitheringScale;
	float ErosionEdgeSize;
	float ForwardScatteringG;
	float HorizonCoverageEnd;
	float HorizonCoverageStart;
	float HorizonDistance;
	float HorizonFadeScalar;
	float HorizonFadeStartAlpha;
	float LightScalar;
	float LODDistance;
	float MaxIterations;
	float RayMinimumY;
	float SampleScalar;
	float SampleThreshold;
	float SunRayLength;
	bool UseBlueNoiseDithering;
};

struct GcDiscoveryHelperTimings
{
	float DiscoverPlanetMessageTime;
	float DiscoverPlanetMessageWait;
	float DiscoverPlanetTotalTime;
};

struct GcAlienPodAnimParams
{
	float Intensity;
};

struct GcAlienPodComponentData
{
	float AgroMovement;
	float AgroMovementRange;
	float AgroRate;
	float AgroSpookTime;
	float AgroSpookTimeMax;
	float AgroSpookTimeMin;
	float AgroSpookValue;
	float AgroThreshold;
	float AgroThresholdOffscreen;
	float AgroTorch;
	float AgroTorchFOV;
	float AgroTorchRange;
	float GlowIntensityMax;
	float GlowIntensityMin;
	float GunfireAgro;
	float GunfireAgroRange;
	float InstaAgroDistance;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkProceduralInstanceData
{
	NMS::NMSString0x10 Id;
	int32_t Index;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardSetMissionStat
{
	int32_t ValueToAdd;
	int32_t ValueToSet;
};

//Dependency: NMSString0x10
struct GcCreatureVocalSoundData
{
	enum class VocalEmoteEnum : uint32_t
	{
		EmoteIdle = 0,
		EmoteFlee = 1,
		EmoteAggression = 2,
		EmoteRoar = 3,
		EmotePain = 4,
		EmoteAttack = 5,
		EmoteDie = 6,
		EmoteMiniRoarNeutral = 7,
		EmoteMiniRoarHappy = 8,
		EmoteMiniRoarAngry = 9,
	};

	NMS::NMSString0x10 Id;
	float MaxCooldown;
	float MinCooldown;
	float PlayFrequency;
	NMS_GameComponents::GcCreatureVocalSoundData::VocalEmoteEnum VocalEmote;
	bool PlayImmediately;
	bool PlayOnlyOnce;
};

//Dependency: GcCreatureVocalSoundData
struct GcCreatureAudioTable
{
	std::vector<NMS_GameComponents::GcCreatureVocalSoundData> Table;
};

struct GcAlienPuzzleCategory
{
	enum class AlienPuzzleCategoryEnum : uint32_t
	{
		Default = 0,
		GuildTraderNone = 1,
		GuildTraderLow = 2,
		GuildTraderMed = 3,
		GuildTraderHigh = 4,
		GuildTraderBest = 5,
		GuildWarriorNone = 6,
		GuildWarriorLow = 7,
		GuildWarriorMed = 8,
		GuildWarriorHigh = 9,
		GuildWarriorBest = 10,
		GuildExplorerNone = 11,
		GuildExplorerLow = 12,
		GuildExplorerMed = 13,
		GuildExplorerHigh = 14,
		GuildExplorerBest = 15,
		BiomeHot = 16,
		BiomeCold = 17,
		BiomeLush = 18,
		BiomeDusty = 19,
		BiomeTox = 20,
		BiomeRad = 21,
		BiomeWeird = 22,
		LocationSpaceStation = 23,
		LocationShop = 24,
		LocationOutpost = 25,
		LocationObservatory = 26,
		Walking = 27,
		ExtremeWeather = 28,
		ExtremeSentinels = 29,
		WaterPlanet = 30,
		FreighterCrew = 31,
		FreighterCrewOwned = 32,
		ShipShop = 33,
		SuitShop = 34,
		WeapShop = 35,
		VehicleShop = 36,
		MoodVeryPositive = 37,
		MoodPositive = 38,
		MoodNeutral = 39,
		MoodNegative = 40,
		MoodVeryNegative = 41,
		Proc = 42,
		FirstAbandonedFreighter = 43,
		StandardAbandonedFreighter = 44,
		BiomeSwamp = 45,
		BiomeLava = 46,
		AbandonedSystem = 47,
		InhabitedSystem = 48,
		SettlementOwned = 49,
		SettlementNotOwned = 50,
		PirateStation = 51,
		StandardPilot = 52,
		Unlocked = 53,
		AllUnlocked = 54,
		NotUnlocked = 55,
		SpiderA = 56,
		SpiderB = 57,
		SpiderRenewed = 58,
	};

	NMS_GameComponents::GcAlienPuzzleCategory::AlienPuzzleCategoryEnum AlienPuzzleCategory;
};

//Dependency: NMSString0x10
struct GcBaseBuildingFamily
{
	enum class FamilyTypeEnum : uint32_t
	{
		Replacements = 0,
		Extras = 1,
	};

	NMS::NMSString0x10 ID;
	std::vector<NMS::NMSString0x10> ObjectIDs;
	NMS_GameComponents::GcBaseBuildingFamily::FamilyTypeEnum FamilyType;
};

//Dependency: VariableSizeString
struct GcMissionSequenceEnsureBarrelsAtPlayerSettlement
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t MinBarrelsThreshold;
	int32_t NumBarrels;
};

//Dependency: GcAlienRace
//Dependency: GcAudioWwiseEvents
//Dependency: GcMissionConditionTest
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
struct GcPuzzleTextFlow
{
	enum class TranslateAlienTextOverrideEnum : uint32_t
	{
		None = 0,
		Translate = 1,
		DoNotTranslate = 2,
	};

	enum class BracketsOverrideEnum : uint32_t
	{
		None = 0,
		Brackets = 1,
		NoBrackets = 2,
	};

	NMS::NMSString0x20A DisablingConditionId;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A Title;
	std::vector<NMSTemplate> DisablingConditions;
	NMS_GameComponents::GcAlienRace AlienLanguageOverride;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcPuzzleTextFlow::BracketsOverrideEnum BracketsOverride;
	NMS_GameComponents::GcMissionConditionTest DisablingConditionTest;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcPuzzleTextFlow::TranslateAlienTextOverrideEnum TranslateAlienTextOverride;
	bool IsAlien;
	bool ShowHologram;
};

struct GcInteractionType
{
	enum class InteractionTypeEnum : uint32_t
	{
		None = 0,
		Shop = 1,
		NPC = 2,
		NPC_Secondary = 3,
		NPC_Anomaly = 4,
		NPC_Anomaly_Secondary = 5,
		Ship = 6,
		Outpost = 7,
		SpaceStation = 8,
		RadioTower = 9,
		Monolith = 10,
		Factory = 11,
		AbandonedShip = 12,
		Harvester = 13,
		Observatory = 14,
		TradingPost = 15,
		DistressBeacon = 16,
		Portal = 17,
		Plaque = 18,
		AtlasStation = 19,
		AbandonedBuildings = 20,
		WeaponTerminal = 21,
		SuitTerminal = 22,
		SignalScanner = 23,
		Teleporter_Base = 24,
		Teleporter_Station = 25,
		ClaimBase = 26,
		NPC_Freighter_Captain = 27,
		NPC_HIRE_Weapons = 28,
		NPC_HIRE_Weapons_Wait = 29,
		NPC_HIRE_Farmer = 30,
		NPC_HIRE_Farmer_Wait = 31,
		NPC_HIRE_Builder = 32,
		NPC_HIRE_Builder_Wait = 33,
		NPC_HIRE_Vehicles = 34,
		NPC_HIRE_Vehicles_Wait = 35,
		MessageBeacon = 36,
		NPC_HIRE_Scientist = 37,
		NPC_HIRE_Scientist_Wait = 38,
		NPC_Recruit = 39,
		NPC_Freighter_Captain_Secondary = 40,
		NPC_Recruit_Secondary = 41,
		Vehicle = 42,
		MessageModule = 43,
		TechShop = 44,
		VehicleRaceStart = 45,
		BuildingShop = 46,
		MissionGiver = 47,
		HoloHub = 48,
		HoloExplorer = 49,
		HoloSceptic = 50,
		HoloNoone = 51,
		PortalRuneEntry = 52,
		PortalActivate = 53,
		CrashedFreighter = 54,
		GraveInCave = 55,
		GlitchyStoryBox = 56,
		NetworkPlayer = 57,
		NetworkMonument = 58,
		AnomalyComputer = 59,
		AtlasPlinth = 60,
		Epilogue = 61,
		GuildEnvoy = 62,
		ManageFleet = 63,
		ManageExpeditions = 64,
		Frigate = 65,
		CustomiseCharacter = 66,
		CustomiseShip = 67,
		CustomiseWeapon = 68,
		CustomiseVehicle = 69,
		ClaimBaseAnywhere = 70,
		FleetNavigator = 71,
		FleetCommandPost = 72,
		StoryUtility = 73,
		MPMissionGiver = 74,
		SpecialsShop = 75,
		WaterRuin = 76,
		LocationScanner = 77,
		ByteBeat = 78,
		NPC_CrashSite = 79,
		NPC_Scavenger = 80,
		BaseGridPart = 81,
		NPC_Freighter_Crew = 82,
		NPC_Freighter_Crew_Owned = 83,
		AbandonedShip_With_NPC = 84,
		ShipPilot = 85,
		NexusMilestones = 86,
		NexusDailyMission = 87,
		CreatureFeeder = 88,
		ExoticExtra1 = 89,
		ExoticExtra2 = 90,
		ExoticExtra3 = 91,
		ExoticExtra4 = 92,
		ExoticExtra5 = 93,
		ExoticExtra6 = 94,
		MapShop = 95,
		NPC_Closure = 96,
		StorageContainer = 97,
		Teleporter_Nexus = 98,
		ShipSalvage = 99,
		ByteBeatSwitch = 100,
		AbandonedFreighterIntro = 101,
		AbandonedFreighterEnd = 102,
		AbandonedFreighterProcText = 103,
		AbandonedFreighterCaptLog = 104,
		AbandonedFreighterCrewLog = 105,
		AbandonedFreighterShop = 106,
		CustomiseFreighter = 107,
		LibraryVault = 108,
		LibraryMainTerminal = 109,
		LibraryMap = 110,
		WeaponUpgrade = 111,
		Pet = 112,
		Creature = 113,
		FreighterGalacticMap = 114,
		RecipeStation = 115,
		StationCore = 116,
		NPC_Settlement_SpecialWorker = 117,
		NPC_Settlement_Secondary = 118,
		SettlementHub = 119,
		SettlementBuildingSite = 120,
		SettlementAdminTerminal = 121,
		FriendlyDrone = 122,
		DroneHive = 123,
		RocketLocker = 124,
		FrigateCaptain = 125,
		PirateShop = 126,
		NPC_PirateSecondary = 127,
		NPC_FreighterBase_SquadronPilot = 128,
		NPC_FreighterBase_FrigateCaptain = 129,
		NPC_FreighterBase_Worker = 130,
		RobotHead = 131,
		RobotCampTerminal = 132,
		MonolithNub = 133,
		NexusSpiderman = 134,
		WeaponSalvage = 135,
		DiscoverySelector = 136,
		RobotShop = 137,
		SeasonTerminal = 138,
		NPC_Freighter_Captain_Pirate = 139,
		SkiffLocker = 140,
		CustomiseSkiff = 141,
		ExhibitAssembly = 142,
		ArchiveMultitool = 143,
		BoneShop = 144,
		SettlementBuildingDetail = 145,
		ByteBeatJukebox = 146,
		NPC_Settlement_SquadronPilot = 147,
		Settlement_TowerTerminal = 148,
	};

	NMS_GameComponents::GcInteractionType::InteractionTypeEnum InteractionType;
};

//Dependency: GcPuzzleTextFlow
//Dependency: GcNPCPropType
//Dependency: GcAlienPuzzleOption
//Dependency: GcAlienPuzzleCategory
//Dependency: GcAlienMood
//Dependency: GcInteractionType
//Dependency: GcAudioWwiseEvents
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcAlienPuzzleEntry
{
	enum class PersistancyBufferOverrideEnum : uint32_t
	{
		None = 0,
		AlwaysPersonal = 1,
		AlwaysFireteam = 2,
	};

	enum class AdditionalOptionsEnum : uint32_t
	{
		None = 0,
		LearnWord = 1,
		SayWord = 2,
	};

	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A RequiresScanEvent;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x20A TextAlien;
	NMS::NMSString0x20A Title;
	std::vector<NMS::NMSString0x20A> AdditionalText;
	std::vector<NMS::NMSString0x20A> AdditionalTextAlien;
	std::vector<NMS_GameComponents::GcPuzzleTextFlow> AdvancedInteractionFlow;
	std::vector<NMS_GameComponents::GcAlienPuzzleOption> Options;
	NMS_GameComponents::GcAlienPuzzleEntry::AdditionalOptionsEnum AdditionalOptions;
	NMS_GameComponents::GcAlienPuzzleCategory Category;
	int32_t CustomFreighterTextIndex;
	int32_t MinProgressionForSelection;
	NMS_GameComponents::GcAlienMood Mood;
	NMS_GameComponents::GcAudioWwiseEvents NextStageAudioEventOverride;
	NMS_GameComponents::GcAlienPuzzleEntry::PersistancyBufferOverrideEnum PersistancyBufferOverride;
	int32_t ProgressionIndex;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcInteractionType Type;
	bool AllowNoOptions;
	bool ProgressiveDialogue;
	bool RadialInteraction;
	bool TranslateAlienText;
	bool TranslationBrackets;
	bool UseTitleOverrideInLabel;
};

struct GcLinkNetworkTypes
{
	enum class LinkNetworkTypeEnum : uint32_t
	{
		Power = 0,
		Resources = 1,
		Fuel = 2,
		Portals = 3,
		PlantGrowth = 4,
		ByteBeat = 5,
	};

	NMS_GameComponents::GcLinkNetworkTypes::LinkNetworkTypeEnum LinkNetworkType;
};

//Dependency: GcLinkNetworkTypes
//Dependency: Vector3f
struct GcBaseLinkGridConnectionData
{
	std::vector<NMS::Vector3f> LinkSocketPositions;
	std::vector<int32_t> LinkSocketSubGroups;
	float ConnectionDistance;
	NMS_GameComponents::GcLinkNetworkTypes Network;
	int32_t NetworkMask;
	int32_t NetworkSubGroup;
	bool UseMinDistance;
};

//Dependency: GcBaseLinkGridConnectionData
struct GcBaseLinkGridConnectionDependency
{
	enum class DependentEffectEnum : uint32_t
	{
		None = 0,
		EnablesRate = 1,
		DisablesRate = 2,
		EnablesConnection = 3,
		DisablesConnection = 4,
	};

	NMS_GameComponents::GcBaseLinkGridConnectionData Connection;
	NMS_GameComponents::GcBaseLinkGridConnectionDependency::DependentEffectEnum DependentEffect;
	int32_t DependentRate;
	bool DisableWhenOffline;
	bool TransfersConnections;
};

//Dependency: GcBaseLinkGridConnectionData
//Dependency: GcBaseLinkGridConnectionDependency
struct GcBaseLinkGridData
{
	enum class DependsOnHotspotsEnum : uint32_t
	{
		None = 0,
		Power = 1,
		Mineral = 2,
		Gas = 3,
	};

	enum class DependsOnEnvironmentEnum : uint32_t
	{
		None = 0,
		DayNight = 1,
		Storms = 2,
	};

	NMS_GameComponents::GcBaseLinkGridConnectionData Connection;
	std::vector<NMS_GameComponents::GcBaseLinkGridConnectionDependency> DependentConnections;
	NMS_GameComponents::GcBaseLinkGridData::DependsOnEnvironmentEnum DependsOnEnvironment;
	NMS_GameComponents::GcBaseLinkGridData::DependsOnHotspotsEnum DependsOnHotspots;
	int32_t Rate;
	int32_t Storage;
};

//Dependency: NMSString0x10
struct GcMissileComponentData
{
	NMS::NMSString0x10 Explosion;
	NMS::NMSString0x10 Trail;
	float NoTargetLife;
};

struct GcFrigateFlybyType
{
	enum class FrigateFlybyTypeEnum : uint32_t
	{
		SingleShip = 0,
		AmbientGroup = 1,
		ScriptedGroup = 2,
		DeepSpace = 3,
		DeepSpaceCommon = 4,
		GhostShip = 5,
	};

	NMS_GameComponents::GcFrigateFlybyType::FrigateFlybyTypeEnum FrigateFlybyType;
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcAudioWwiseEvents
//Dependency: GcFrigateFlybyType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardFrigateFlyby
{
	NMS_GameComponents::GcPlayerCommunicatorMessage CommunicatorMessage;
	NMS::NMSString0x20A CommunicatorOSDLocId;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMS::NMSString0x10 CameraShake;
	float AppearanceDelay;
	NMS_GameComponents::GcAudioWwiseEvents AudioSting;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	NMS_GameComponents::GcAudioWwiseEvents PulseAudio;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcAlienPuzzleMissionOverride
{
	NMS::NMSString0x20A Puzzle;
	NMS::NMSString0x20A RequireScanEventActive;
	NMS::NMSString0x10 AltPriorityMissionForSelection;
	NMS::NMSString0x10 Mission;
	NMS::GcSeed OptionalMissionSeed;
	bool ForceMissionSeed;
	bool RequireMainMissionActiveWhenUsingAlt;
	bool RequireMainMissionSelected;
};

//Dependency: GcCurrency
struct GcMissionConditionHasMoney
{
	int32_t Amount;
	NMS_GameComponents::GcCurrency TestCurrency;
	bool ApplyDifficultyScaling;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputHandEnum
{
	enum class InputHandEnum : uint32_t
	{
		None = 0,
		Left = 1,
		Right = 2,
	};

	NMS_Toolkit::TkInputHandEnum::InputHandEnum InputHand;
};

struct TkInputAxisEnum
{
	enum class InputAxisEnum : uint32_t
	{
		None = 0,
		Invalid = 0,
		LeftStick = 1,
		LeftStickX = 2,
		LeftStickY = 3,
		RightStick = 4,
		RightStickX = 5,
		RightStickY = 6,
		LeftTrigger = 7,
		RightTrigger = 8,
		Mouse = 9,
		MouseX = 10,
		MouseY = 11,
		MousePositiveX = 12,
		MouseNegativeX = 13,
		MousePositiveY = 14,
		MouseNegativeY = 15,
		MouseWheel = 16,
		MouseWheelPositive = 17,
		MouseWheelNegative = 18,
		Touchpad = 19,
		TouchpadX = 20,
		TouchpadY = 21,
		TouchpadPositiveX = 22,
		TouchpadNegativeX = 23,
		TouchpadPositiveY = 24,
		TouchpadNegativeY = 25,
		LeftTouchpad = 26,
		LeftTouchpadX = 27,
		LeftTouchpadY = 28,
		LeftTouchpadPositiveX = 29,
		LeftTouchpadNegativeX = 30,
		LeftTouchpadPositiveY = 31,
		LeftTouchpadNegativeY = 32,
		LeftGrip = 33,
		RightGrip = 34,
		LeftStickPositiveX = 35,
		LeftStickNegativeX = 36,
		LeftStickPositiveY = 37,
		LeftStickNegativeY = 38,
		RightStickPositiveX = 39,
		RightStickNegativeX = 40,
		RightStickPositiveY = 41,
		RightStickNegativeY = 42,
		DirectionalPadX = 43,
		DirectionalPadY = 44,
		DirectionalButtonsX = 45,
		DirectionalButtonsY = 46,
		ChordAD = 47,
		FakeLeftStick = 48,
		FakeRightStick = 49,
	};

	NMS_Toolkit::TkInputAxisEnum::InputAxisEnum InputAxis;
};

//Dependency: TkInputHandEnum
//Dependency: TkInputAxisEnum
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkAxisPathMapping
{
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS_Toolkit::TkInputHandEnum Hand;
	NMS_Toolkit::TkInputAxisEnum Id;
	NMS::NMSString0x20 OpenVROriginNames;
};

//Dependency: NMSString0x10
struct TkAnimPoseData
{
	NMS::NMSString0x10 Anim;
	int32_t FrameEnd;
	int32_t FrameStart;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Colour
//Dependency: NMSString0x100
struct GcCreatureHoverTintableEffect
{
	NMS::Colour TintColour;
	float LightStrength;
	float TintStrength;
	NMS::NMSString0x100 EffectNode;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseLayerData
{
	enum class NoiseTypeEnum : uint32_t
	{
		Plane = 0,
		Check = 1,
		Sine = 2,
		Smooth = 3,
		Fractal = 4,
		Ridged = 5,
		Billow = 6,
		Erosion = 7,
		Volcanic = 8,
		Glacial = 9,
		Plateau = 10,
	};

	float FrequencyScaleY;
	float Height;
	NMS_Toolkit::TkNoiseLayerData::NoiseTypeEnum NoiseType;
	int32_t Octaves;
	float RegionRatio;
	float RegionScale;
	int32_t SeedOffset;
	float TurbulenceAmplitude;
	float TurbulenceFrequency;
	int32_t TurbulenceOctaves;
	float Width;
	bool Absolute;
	bool Active;
	bool Invert;
	bool Subtract;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcGalaxyStarTypes
{
	enum class GalaxyStarTypeEnum : uint32_t
	{
		Yellow = 0,
		Green = 1,
		Blue = 2,
		Red = 3,
		Purple = 4,
	};

	NMS_GameComponents::GcGalaxyStarTypes::GalaxyStarTypeEnum GalaxyStarType;
};

//Dependency: GcGalaxyStarTypes
//Dependency: NMSString0x20A
struct GcMissionConditionEventRequiresRGB
{
	NMS::NMSString0x20A Event;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	bool IgnoreIfPlayerHasAccess;
};

//Dependency: NMSString0x10
struct GcBehaviourGetTargetData
{
	NMS::NMSString0x10 TargetKey;
};

//Dependency: NMSString0x20A
struct GcNameGeneratorWord
{
	NMS::NMSString0x20A Word;
	int32_t NumOptions;
};

//Dependency: GcNameGeneratorWord
//Dependency: NMSString0x20
struct GcProceduralProductWord
{
	NMS_GameComponents::GcNameGeneratorWord RareWord;
	NMS_GameComponents::GcNameGeneratorWord UncommonWord;
	NMS_GameComponents::GcNameGeneratorWord Word;
	NMS::NMSString0x20 ReplaceKey;
};

//Dependency: NMSString0x10
struct GcDungeonRoomParams
{
	NMS::NMSString0x10 RoomId;
	float BranchProbability;
};

//Dependency: NMSString0x10
struct GcDungeonQuestParams
{
	std::vector<NMS::NMSString0x10> QuestItems;
	float Probability;
};

//Dependency: GcDungeonRoomParams
//Dependency: GcDungeonQuestParams
//Dependency: NMSString0x10
struct GcDungeonGenerationParams
{
	std::vector<NMS::NMSString0x10> BranchRoomTypes;
	std::vector<NMSTemplate> GenerationRules;
	std::vector<NMS_GameComponents::GcDungeonRoomParams> MainRoomTypes;
	std::vector<NMS::NMSString0x10> PruningRules;
	std::vector<NMS_GameComponents::GcDungeonQuestParams> Quests;
	uint32_t EntranceX;
	uint32_t EntranceY;
	uint32_t EntranceZ;
	uint32_t Rooms;
	uint32_t SizeX;
	uint32_t SizeY;
	uint32_t SizeZ;
	float StraightMultiplier;
	float XProbability;
	float YProbability;
	float ZProbability;
};

//Dependency: GcDungeonGenerationParams
//Dependency: NMSString0x10
struct GcFreighterDungeonParams
{
	NMS_GameComponents::GcDungeonGenerationParams DungeonParams;
	NMS::NMSString0x10 Name;
};

struct GcMechMeshPart
{
	enum class MechMeshPartEnum : uint32_t
	{
		Scanner = 0,
		Body = 1,
		Legs = 2,
		LeftArm = 3,
		RightArm = 4,
	};

	NMS_GameComponents::GcMechMeshPart::MechMeshPartEnum MechMeshPart;
};

struct GcMechMeshType
{
	enum class MechMeshTypeEnum : uint32_t
	{
		Exocraft = 0,
		Sentinel = 1,
		BugHunter = 2,
		Stone = 3,
	};

	NMS_GameComponents::GcMechMeshType::MechMeshTypeEnum MechMeshType;
};

//Dependency: GcMechMeshPart
//Dependency: GcMechMeshType
//Dependency: NMSString0x10
struct GcMechPartEffectOverride
{
	NMS::NMSString0x10 OverrideEffect;
	NMS_GameComponents::GcMechMeshPart MeshPart;
	NMS_GameComponents::GcMechMeshType MeshType;
};

//Dependency: GcMechPartEffectOverride
//Dependency: NMSString0x10
struct GcMechEffect
{
	NMS::NMSString0x10 DefaultEffect;
	std::vector<NMS_GameComponents::GcMechPartEffectOverride> MeshPartOverrides;
};

//Dependency: Vector3f
struct GcMessageTrackTargetAlert
{
	NMS::Vector3f AlertPos;
	int32_t Attacker;
	int32_t Victim;
	bool Primary;
};

//Dependency: GcAlienPuzzleEntry
struct GcAlienPuzzleTable
{
	std::vector<NMS_GameComponents::GcAlienPuzzleEntry> Table;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNoiseFlattenOptions
{
	enum class WaterPlacementEnum : uint32_t
	{
		None = 0,
		OnWater = 1,
		Underwater = 2,
		UnderwaterOnly = 3,
	};

	enum class FlatteningEnum : uint32_t
	{
		None = 0,
		Flatten = 1,
		TerrainEdits = 2,
	};

	NMS_Toolkit::TkNoiseFlattenOptions::FlatteningEnum Flattening;
	NMS_Toolkit::TkNoiseFlattenOptions::WaterPlacementEnum WaterPlacement;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcAlienPuzzleTableIndex
{
	enum class IndexTypeEnum : uint32_t
	{
		Regular = 0,
		Seeded = 1,
		Random = 2,
	};

	NMS_GameComponents::GcAlienPuzzleTableIndex::IndexTypeEnum IndexType;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionFreighterBattle
{
	enum class FreighterBattleStatusEnum : uint32_t
	{
		None = 0,
		Active = 1,
		Joined = 2,
		Reward = 3,
	};

	int32_t FreighterBattleDistance;
	NMS_GameComponents::GcMissionConditionFreighterBattle::FreighterBattleStatusEnum FreighterBattleStatus;
	NMS_Toolkit::TkEqualityEnum FreighterBattleTest;
	bool HostileFreighter;
};

struct GcBaseBuildingCameraMode
{
	enum class BaseBuildingCameraModeEnum : uint32_t
	{
		Inactive = 0,
		FreeCam = 1,
		FocusCam = 2,
	};

	NMS_GameComponents::GcBaseBuildingCameraMode::BaseBuildingCameraModeEnum BaseBuildingCameraMode;
};

struct GcItemNeedPurpose
{
	enum class ItemPurposeEnum : uint32_t
	{
		None = 0,
		Crafting = 1,
		Building = 2,
		Repairing = 3,
		Charging = 4,
		Paying = 5,
	};

	NMS_GameComponents::GcItemNeedPurpose::ItemPurposeEnum ItemPurpose;
};

//Dependency: GcCurrency
struct GcCostMoneyList
{
	enum class OutOfBoundsBehaviourEnum : uint32_t
	{
		NoCost = 0,
		UseFirst = 1,
		UseLast = 2,
	};

	enum class IndexProviderEnum : uint32_t
	{
		None = 0,
		ShipSlot = 1,
		ShipClass = 2,
		DailyFreighters = 3,
		WeaponClass = 4,
		WeaponSlot = 5,
		PetSlot = 6,
		PilotSlot = 7,
		PilotRank = 8,
	};

	std::vector<int32_t> Costs;
	NMS_GameComponents::GcCurrency CostCurrency;
	NMS_GameComponents::GcCostMoneyList::IndexProviderEnum IndexProvider;
	NMS_GameComponents::GcCostMoneyList::OutOfBoundsBehaviourEnum OutOfBoundsBehaviour;
	bool AssertIfOutOfBounds;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: LinkableNMSTemplate
//Dependency: NMSString0x40
struct TkAnimationNotifyAddEffect
{
	NMS::NMSString0x10 CharacterLocator;
	NMS::NMSString0x10 Effect;
	std::vector<NMS::LinkableNMSTemplate> Modules;
	float FacingDirOffset;
	float Scale;
	NMS::NMSString0x40 Node;
	bool Attach;
	bool MirrorDuplicate;
	bool UseModelFacingDir;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcLinkNetworkTypes
struct GcBaseGridSearchFilter
{
	int32_t GridHasMaxNonPassiveParts;
	int32_t GridHasMaxParts;
	int32_t GridHasMinNonPassiveParts;
	int32_t GridHasMinParts;
	int32_t GridRateIsGreaterThan;
	int32_t GridRateIsLessThan;
	NMS_GameComponents::GcLinkNetworkTypes NetworkType;
	int32_t PartRateIsGreaterThan;
	int32_t PartRateIsLessThan;
	bool GridHasANegativeRate;
	bool GridHasAPositiveRate;
	bool GridHasPositiveRatePotential;
	bool GridIsNotOnline;
	bool GridIsOnline;
};

//Dependency: GcBaseGridSearchFilter
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcBasePartSearchFilter
{
	NMS::Vector3f ReferenceWorldPosition;
	NMS::NMSString0x10 IsSpecificID;
	NMS_GameComponents::GcBaseGridSearchFilter BaseGridFilter;
	float MaxDistance;
	bool ApplyGridFilter;
	bool PartIsNotOnline;
	bool PartIsNotVision;
	bool PartIsOnline;
	bool PartIsVision;
};

struct GcPersistentBaseTypes
{
	enum class PersistentBaseTypesEnum : uint32_t
	{
		HomePlanetBase = 0,
		FreighterBase = 1,
		ExternalPlanetBase = 2,
		CivilianFreighterBase = 3,
		FriendsPlanetBase = 4,
		FriendsFreighterBase = 5,
		SpaceBase = 6,
		GeneratedPlanetBase = 7,
		GeneratedPlanetBaseEdits = 8,
		PlayerShipBase = 9,
		FriendsShipBase = 10,
	};

	NMS_GameComponents::GcPersistentBaseTypes::PersistentBaseTypesEnum PersistentBaseTypes;
};

//Dependency: GcBasePartSearchFilter
//Dependency: GcPersistentBaseTypes
//Dependency: Vector3f
//Dependency: NMSString0x20A
struct GcBaseSearchFilter
{
	NMS_GameComponents::GcBasePartSearchFilter BasePartFilter;
	NMS::Vector3f ReferenceWorldPosition;
	NMS::NMSString0x20A OnSpecificPlanetScanEvent;
	std::vector<NMS_GameComponents::GcPersistentBaseTypes> MatchingTypes;
	uint64_t InSpecificSystem;
	uint64_t OnSpecificPlanet;
	int32_t ContainsMaxParts;
	int32_t ContainsMinParts;
	float MaxDistance;
	bool InCurrentSystem;
	bool IsBuildable;
	bool IsOverlapping;
	bool OnCurrentPlanet;
};

//Dependency: GcBaseSearchFilter
//Dependency: GcBasePartSearchFilter
struct GcMissionConditionBasePartsQuery
{
	NMS_GameComponents::GcBaseSearchFilter ExcludeBasesFilter;
	NMS_GameComponents::GcBasePartSearchFilter PartsSearchFilter;
	int32_t MaxPartsFound;
	int32_t MinPartsFound;
	float SearchDistanceLimit;
	bool ExcludeGlobalBuffer;
};

//Dependency: NMSString0x10
struct GcInventoryBaseStatEntry
{
	NMS::NMSString0x10 BaseStatID;
	float Value;
};

//Dependency: GcInventoryIndex
//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcInventoryElement
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryIndex Index;
	int32_t Amount;
	float DamageFactor;
	int32_t MaxAmount;
	NMS_GameComponents::GcInventoryType Type;
	bool FullyInstalled;
};

struct GcInventoryClass
{
	enum class InventoryClassEnum : uint32_t
	{
		C = 0,
		B = 1,
		A = 2,
		S = 3,
	};

	NMS_GameComponents::GcInventoryClass::InventoryClassEnum InventoryClass;
};

struct GcInventoryStackSizeGroup
{
	enum class InventoryStackSizeGroupEnum : uint32_t
	{
		Default = 0,
		Personal = 1,
		PersonalCargo = 2,
		Ship = 3,
		ShipCargo = 4,
		Freighter = 5,
		FreighterCargo = 6,
		Vehicle = 7,
		Chest = 8,
		BaseCapsule = 9,
		MaintenanceObject = 10,
		UIPopup = 11,
		SeasonTransfer = 12,
	};

	NMS_GameComponents::GcInventoryStackSizeGroup::InventoryStackSizeGroupEnum InventoryStackSizeGroup;
};

//Dependency: GcInventoryBaseStatEntry
//Dependency: GcInventoryElement
//Dependency: GcInventoryClass
//Dependency: NMSString0x100
//Dependency: GcInventorySpecialSlot
//Dependency: GcInventoryIndex
//Dependency: GcInventoryStackSizeGroup
struct GcInventoryContainer
{
	std::vector<NMS_GameComponents::GcInventoryBaseStatEntry> BaseStatValues;
	std::vector<NMS_GameComponents::GcInventoryElement> Slots;
	std::vector<NMS_GameComponents::GcInventorySpecialSlot> SpecialSlots;
	std::vector<NMS_GameComponents::GcInventoryIndex> ValidSlotIndices;
	NMS_GameComponents::GcInventoryClass Class;
	int32_t Height;
	NMS_GameComponents::GcInventoryStackSizeGroup StackSizeGroup;
	int32_t Version;
	int32_t Width;
	NMS::NMSString0x100 Name;
	bool IsCool;
};

//Dependency: GcInventoryContainer
//Dependency: GcInventoryLayout
struct GcSeasonTransferInventoryData
{
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryLayout Layout;
	int32_t SeasonId;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueInteger
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	int32_t DefaultValue;
};

struct TkBlackboardComparisonTypeEnum
{
	enum class ComparisonTypeEnum : uint32_t
	{
		Equal = 0,
		NotEqual = 1,
		GreaterThan = 2,
		GreaterThanEqual = 3,
		LessThan = 4,
		LessThanEqual = 5,
	};

	NMS_Toolkit::TkBlackboardComparisonTypeEnum::ComparisonTypeEnum ComparisonType;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueInteger
//Dependency: TkBlackboardComparisonTypeEnum
//Dependency: NMSString0x10
struct GcBlackboardIntCompareDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueInteger CompareTo;
	NMS::NMSString0x10 Key;
	NMSTemplate OnFalse;
	NMSTemplate OnTrue;
	NMS_Toolkit::TkBlackboardComparisonTypeEnum Comparison;
};

//Dependency: Colour
struct GcGalaxyStarColours
{
	NMS::Colour ColourByStarType[5];
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcAlienSpeechEntry
{
	enum class WordInteractEffectEnum : uint32_t
	{
		Pain = 0,
		Heal = 1,
	};

	NMS::NMSString0x20A Group;
	NMS::NMSString0x20A Text;
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	int32_t Frequency;
	int32_t Level;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcAlienSpeechEntry::WordInteractEffectEnum WordInteractEffect;
};

//Dependency: NMSString0x10
struct GcMissionConditionCookingSearch
{
	NMS::NMSString0x10 Product;
	int32_t Amount;
	bool ReturnTrueIfCanMakeProduct;
	bool SetIcon;
};

//Dependency: GcAlienSpeechEntry
struct GcAlienSpeechTable
{
	std::vector<NMS_GameComponents::GcAlienSpeechEntry> Table;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
struct TkMeshData
{
	NMS::VariableSizeString IdString;
	uint8_t MeshDataStream;
	uint8_t MeshPositionDataStream;
	uint64_t Hash;
	int32_t IndexDataSize;
	int32_t VertexDataSize;
	int32_t VertexPositionDataSize;
};

//Dependency: TkMeshData
struct TkGeometryStreamData
{
	std::vector<NMS_Toolkit::TkMeshData> StreamDataArray;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBasePartAudioLocation
//Dependency: NMSString0x10
struct GcBaseBuildingPartAudioLocationEntry
{
	NMS::NMSString0x10 PartId;
	NMS_GameComponents::GcBasePartAudioLocation AudioLocation;
};

//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationFreighterEngineEffect
{
	NMS::Colour GlowColour;
	NMS_Toolkit::TkModelResource EffectResource;
	NMS::NMSString0x20A Tip;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 LinkedTechID;
	NMS::NMSString0x10 Name;
};

//Dependency: NMSString0x10
struct GcProceduralProductDeployable
{
	NMS::NMSString0x10 BaseID;
	int32_t Variants;
};

struct GcStatsValueTypes
{
	enum class StatsValueEnum : uint32_t
	{
		DistanceJetpacked = 0,
		DistanceWalked = 1,
		DistanceWarped = 2,
		DamageSustained = 3,
	};

	NMS_GameComponents::GcStatsValueTypes::StatsValueEnum StatsValue;
};

//Dependency: Vector3f
struct GcCreatureDestroyInstancesData
{
	NMS::Vector3f Offset;
	float MinInstanceRadius;
	float Radius;
	bool DebugDraw;
};

struct GcInteractionBufferType
{
	enum class InteractionBufferTypeEnum : uint32_t
	{
		Distress_Signal = 0,
		Crate = 1,
		Destructable = 2,
		Terrain = 3,
		Cost = 4,
		Building = 5,
		Creature = 6,
		Maintenance = 7,
		Personal = 8,
		Personal_Maintenance = 9,
		FireteamSync = 10,
	};

	NMS_GameComponents::GcInteractionBufferType::InteractionBufferTypeEnum InteractionBufferType;
};

//Dependency: GcInteractionBufferType
//Dependency: NMSString0x10
struct GcPersistencyMissionOverride
{
	NMS::NMSString0x10 Mission;
	NMS_GameComponents::GcInteractionBufferType Buffer;
};

struct GcMissionGalacticFeature
{
	enum class GalacticFeatureEnum : uint32_t
	{
		Anomaly = 0,
		Atlas = 1,
		BlackHole = 2,
	};

	NMS_GameComponents::GcMissionGalacticFeature::GalacticFeatureEnum GalacticFeature;
};

//Dependency: GcMissionGalacticFeature
struct GcMissionConditionHasGalacticFeature
{
	NMS_GameComponents::GcMissionGalacticFeature Type;
	bool RequireUnusedAtlas;
};

struct GcMiningComponentData
{
	float Range;
	float Speed;
};

//Dependency: NMSString0x10
struct GcBuildingCostPartCount
{
	NMS::NMSString0x10 Id;
	int32_t Count;
};

//Dependency: NMSString0x20A
struct GcID256Enum
{
	std::vector<NMS::NMSString0x20A> Values;
};

//Dependency: NMSString0x10
struct GcCameraAmbientBuildingData
{
	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	float Offset;
	bool AvailableBuildings[60];
	bool AvailableRaces[9];
	bool AvoidTerrain;
	bool UseLookAt;
};

//Dependency: NMSString0x10
struct GcCameraAmbientSpaceData
{
	enum class OriginEnum : uint32_t
	{
		SpaceStationInternals = 0,
		SpaceStationBack = 1,
		FreighterBattle = 2,
		Freighter = 3,
		FreighterHangar = 4,
		AtlasStation = 5,
		BlackHole = 6,
		Anomaly = 7,
	};

	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	NMS_GameComponents::GcCameraAmbientSpaceData::OriginEnum Origin;
};

//Dependency: NMSString0x10
struct GcCameraAmbientSpecialData
{
	enum class CameraOriginEnum : uint32_t
	{
		ExternalBase = 0,
	};

	NMS::NMSString0x10 Animation;
	NMS::NMSString0x10 DroneAnimation;
	NMS_GameComponents::GcCameraAmbientSpecialData::CameraOriginEnum CameraOrigin;
	bool AvoidTerrain;
	bool UseLookAt;
};

//Dependency: GcCameraAmbientBuildingData
//Dependency: GcCameraAmbientSpaceData
//Dependency: GcCameraAmbientSpecialData
struct GcAmbientModeCameras
{
	std::vector<NMS_GameComponents::GcCameraAmbientBuildingData> BuildingCameraAnimations;
	std::vector<NMS_GameComponents::GcCameraAmbientSpaceData> SpaceCameraAnimations;
	std::vector<NMS_GameComponents::GcCameraAmbientSpecialData> SpecialCameraAnimations;
};

//Dependency: GcNPCHabitationType
struct GcMissionConditionNPCHabitationHasWorker
{
	enum class WorkerInCurrentBaseEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcMissionConditionNPCHabitationHasWorker::WorkerInCurrentBaseEnum WorkerInCurrentBase;
	NMS_GameComponents::GcNPCHabitationType WorkerType;
};

//Dependency: GcGalaxyStarAnomaly
//Dependency: VariableSizeString
struct GcMissionSequenceStartSummonAnomaly
{
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;
	float SummonInFrontDistance;
};

//Dependency: TkCurveType
struct GcVibrationData
{
	float DecayTime;
	float OutputStrength;
	float SmoothTime;
	float Variance;
	float VarianceContrast;
	NMS_Toolkit::TkCurveType OutputStrengthCurve;
};

//Dependency: GcVibrationData
//Dependency: NMSString0x10
struct GcVibrationChannelData
{
	enum class VRAffectedHandsEnum : uint32_t
	{
		Both = 0,
		LeftOnly = 1,
		RightOnly = 2,
		DisableInVR = 3,
	};

	enum class DataEnum : uint32_t
	{
		Left = 0,
		Right = 1,
	};

	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcVibrationData Data[2];
	NMS_GameComponents::GcVibrationChannelData::VRAffectedHandsEnum VRAffectedHands;
	bool VROnly;
	bool VRSwapHandForLeftHanded;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostMissionActive
{
	NMS::NMSString0x20A CostString;
	NMS::NMSString0x10 MissionID;
};

struct GcCostCanUseShipPad
{
	bool ShipPadAvalible;
};

//Dependency: Vector3f
//Dependency: Vector4f
struct GcInWorldUIScreenData
{
	NMS::Vector3f ScreenOffset;
	NMS::Vector4f ScreenRotation;
	float ScreenScale;
};

//Dependency: NMSString0x10
struct GcCharacterCustomisationBoneScaleData
{
	NMS::NMSString0x10 BoneName;
	float Scale;
};

//Dependency: TkPaletteTexture
//Dependency: Colour
struct GcCharacterCustomisationColourData
{
	NMS::Colour Colour;
	NMS_Toolkit::TkPaletteTexture Palette;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCharacterCustomisationTextureOptionData
{
	NMS::NMSString0x20A TextureOptionName;
	NMS::NMSString0x10 TextureOptionGroupName;
};

//Dependency: GcCharacterCustomisationBoneScaleData
//Dependency: GcCharacterCustomisationColourData
//Dependency: GcCharacterCustomisationTextureOptionData
//Dependency: NMSString0x10
struct GcCharacterCustomisationData
{
	std::vector<NMS_GameComponents::GcCharacterCustomisationBoneScaleData> BoneScales;
	std::vector<NMS_GameComponents::GcCharacterCustomisationColourData> Colours;
	std::vector<NMS::NMSString0x10> DescriptorGroups;
	NMS::NMSString0x10 PaletteID;
	std::vector<NMS_GameComponents::GcCharacterCustomisationTextureOptionData> TextureOptions;
	float Scale;
};

//Dependency: GcInWorldUIScreenData
//Dependency: GcCharacterCustomisationData
//Dependency: GcInventoryContainer
//Dependency: GcResourceElement
//Dependency: GcInventoryLayout
//Dependency: GcSeed
//Dependency: NMSString0x20
struct GcMultitoolData
{
	NMS_GameComponents::GcInWorldUIScreenData ScreenData;
	NMS_GameComponents::GcInventoryContainer Store;
	NMS_GameComponents::GcCharacterCustomisationData CustomisationData;
	NMS_GameComponents::GcResourceElement Resource;
	NMS_GameComponents::GcInventoryLayout Layout;
	NMS::GcSeed Seed;
	int32_t PrimaryMode;
	int32_t SecondaryMode;
	NMS::NMSString0x20 Name;
	bool IsLarge;
	bool UseLegacyColours;
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x10
struct GcMaintenanceOverride
{
	NMS_GameComponents::GcMaintenanceComponentData Data;
	NMS::NMSString0x10 ID;
};

//Dependency: TkPaletteTexture
struct GcTileTypeSet
{
	NMS_Toolkit::TkPaletteTexture Colours[12];
	float Probability;
};

//Dependency: GcTileTypeSet
struct GcTileTypeSets
{
	std::vector<NMS_GameComponents::GcTileTypeSet> TileTypeSets;
};

//Dependency: NMSString0x10
struct GcAntagonistEnemy
{
	std::vector<NMS::NMSString0x10> Perceptions;
	float GrudgeFactor;
	float HatredFactor;
};

//Dependency: NMSString0x10
struct GcAntagonistFriend
{
	std::vector<NMS::NMSString0x10> Perceptions;
	float ArticulationFactor;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcAntagonistPerception
{
	enum class ViewShapeEnum : uint32_t
	{
		Pyramid = 0,
		Cone = 1,
	};

	NMS::NMSString0x10 Id;
	float Range;
	NMS_GameComponents::GcAntagonistPerception::ViewShapeEnum ViewShape;
	float XFOV;
	float YFOV;
	NMS::NMSString0x20 SenseLocator;
	bool Raycast;
};

struct GcAntagonistGroup
{
	enum class AntagonistGroupEnum : uint32_t
	{
		Player = 0,
		Fiends = 1,
		Creatures = 2,
		Sentinels = 3,
		Turrets = 4,
		Walls = 5,
	};

	NMS_GameComponents::GcAntagonistGroup::AntagonistGroupEnum AntagonistGroup;
};

//Dependency: GcAntagonistEnemy
//Dependency: GcAntagonistFriend
//Dependency: GcAntagonistPerception
//Dependency: GcAntagonistGroup
struct GcAntagonistComponentData
{
	NMS_GameComponents::GcAntagonistEnemy Enemies[6];
	NMS_GameComponents::GcAntagonistFriend Friends[6];
	std::vector<NMS_GameComponents::GcAntagonistPerception> Perceptions;
	float CommunicationDelay;
	float ComprehensionFactor;
	NMS_GameComponents::GcAntagonistGroup Group;
	float ScarinessFactor;
	float ShockedFactor;
};

//Dependency: NMSString0x10
struct GcRewardCompleteMultiMission
{
	std::vector<NMS::NMSString0x10> Missions;
};

struct GcModularCustomisationEffectsData
{
	enum class ModularCustomisationEffectModeEnum : uint32_t
	{
		Build = 0,
		BuildOutward = 1,
		Dissolve = 2,
	};

	float EffectTime;
	NMS_GameComponents::GcModularCustomisationEffectsData::ModularCustomisationEffectModeEnum ModularCustomisationEffectMode;
};

//Dependency: TkTextureResource
struct GcWaypointComponentData
{
	NMS_Toolkit::TkTextureResource Icon;
};

//Dependency: VariableSizeString
struct GcFrigateTraitIcons
{
	NMS::VariableSizeString Icons[11];
};

//Dependency: TkCurveType
struct GcCompositeCurveElementData
{
	float Duration;
	float EndValue;
	NMS_Toolkit::TkCurveType CurveType;
};

//Dependency: GcGameMode
//Dependency: NMSString0x20A
struct GcCostGameMode
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcGameMode Mode;
	int32_t SpecificSeasonIndex;
	bool InvertMode;
};

struct GcReputationGainDifficultyOption
{
	enum class ReputationGainDifficultyEnum : uint32_t
	{
		VeryFast = 0,
		Fast = 1,
		Normal = 2,
		Slow = 3,
	};

	NMS_GameComponents::GcReputationGainDifficultyOption::ReputationGainDifficultyEnum ReputationGainDifficulty;
};

struct GcFrigateStatType
{
	enum class FrigateStatTypeEnum : uint32_t
	{
		Combat = 0,
		Exploration = 1,
		Mining = 2,
		Diplomatic = 3,
		FuelBurnRate = 4,
		FuelCapacity = 5,
		Speed = 6,
		ExtraLoot = 7,
		Repair = 8,
		Invulnerable = 9,
		Stealth = 10,
	};

	NMS_GameComponents::GcFrigateStatType::FrigateStatTypeEnum FrigateStatType;
};

//Dependency: GcFrigateStatType
//Dependency: GcFrigateTraitStrength
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcFrigateTraitData
{
	NMS::NMSString0x20A DisplayName;
	NMS::NMSString0x10 ID;
	int32_t ChanceOfBeingOffered[10];
	NMS_GameComponents::GcFrigateStatType FrigateStatType;
	NMS_GameComponents::GcFrigateTraitStrength Strength;
};

//Dependency: GcScanEffectData
struct GcDiscoveryDisplayComponentData
{
	NMS_GameComponents::GcScanEffectData DiscoveryScanEffect;
	float DiscoveryScale;
	float DiscoveryScalePlanets;
};

struct GcBiomeSubType
{
	enum class BiomeSubTypeEnum : uint32_t
	{
		None = 0,
		Standard = 1,
		HighQuality = 2,
		Structure = 3,
		Beam = 4,
		Hexagon = 5,
		FractCube = 6,
		Bubble = 7,
		Shards = 8,
		Contour = 9,
		Shell = 10,
		BoneSpire = 11,
		WireCell = 12,
		HydroGarden = 13,
		HugePlant = 14,
		HugeLush = 15,
		HugeRing = 16,
		HugeRock = 17,
		HugeScorch = 18,
		HugeToxic = 19,
		Variant_A = 20,
		Variant_B = 21,
		Variant_C = 22,
		Variant_D = 23,
		Infested = 24,
		Swamp = 25,
		Lava = 26,
		Worlds = 27,
		Remix_A = 28,
		Remix_B = 29,
		Remix_C = 30,
		Remix_D = 31,
	};

	NMS_GameComponents::GcBiomeSubType::BiomeSubTypeEnum BiomeSubType;
};

//Dependency: GcBiomeSubType
//Dependency: VariableSizeString
struct GcBiomeFileListOption
{
	NMS::VariableSizeString Filename;
	float PurpleSystemWeight;
	NMS_GameComponents::GcBiomeSubType SubType;
	float Weight;
};

//Dependency: NMSString0x10
struct GcCostJourneyStatLevel
{
	NMS::NMSString0x10 StatName;
	int32_t RequiredLevel;
};

//Dependency: GcLeveledStatData
struct GcLeveledStatTable
{
	std::vector<NMS_GameComponents::GcLeveledStatData> LeveledStatTable;
};

//Dependency: TkPaletteTexture
//Dependency: Colour
struct GcHeavyAirSettingValues
{
	NMS::Colour ForceColour1;
	NMS::Colour ForceColour2;
	NMS_Toolkit::TkPaletteTexture Colour1;
	NMS_Toolkit::TkPaletteTexture Colour2;
	float Alpha1;
	float Alpha2;
	float Speed;
	float Thickness;
	bool ForceColour;
	bool ReduceThicknessWithCloudCoverage;
};

//Dependency: GcHeavyAirSettingValues
struct GcHeavyAirSetting
{
	NMS_GameComponents::GcHeavyAirSettingValues Settings[5];
};

//Dependency: GcHeavyAirSetting
struct GcFogProperties
{
	NMS_GameComponents::GcHeavyAirSetting HeavyAir;
	float CloudRatio;
	float DepthOfField;
	float DepthOfFieldDistance;
	float DepthOfFieldFade;
	float FogColourMax;
	float FogColourStrength;
	float FogHeight;
	float FogMax;
	float FogStrength;
	float FullscreenEffect;
	float HeightFogFadeOutStrength;
	float HeightFogMax;
	float HeightFogOffset;
	float HeightFogStrength;
	float RainWetness;
	bool IsRaining;
};

struct GcWeaponClasses
{
	enum class WeaponStatClassEnum : uint32_t
	{
		Pistol = 0,
		Rifle = 1,
		Pristine = 2,
		Alien = 3,
		Royal = 4,
		Robot = 5,
		Atlas = 6,
		AtlasYellow = 7,
		AtlasBlue = 8,
		Staff = 9,
	};

	NMS_GameComponents::GcWeaponClasses::WeaponStatClassEnum WeaponStatClass;
};

//Dependency: GcMultitoolData
//Dependency: NMSString0x20
//Dependency: GcInventoryClass
//Dependency: GcWeaponClasses
struct GcArchivedMultitoolData
{
	NMS_GameComponents::GcMultitoolData MultitoolData;
	NMS_GameComponents::GcInventoryClass ArchivedInventoryClass;
	NMS_GameComponents::GcWeaponClasses WeaponClass;
	NMS::NMSString0x20 ArchivedName;
};

struct GcMissionConditionIsPartyPlanetUnlocked
{
	int32_t SpecificRendevousPlanetIndex;
	bool TakeIndexFromMilestoneStage;
	bool TakeIndexFromSeasonData;
};

//Dependency: GcInventoryContainer
//Dependency: Vector4f
//Dependency: GcResourceElement
//Dependency: GcInventoryLayout
//Dependency: NMSString0x20
struct GcPlayerOwnershipData
{
	NMS::Vector4f Direction;
	NMS::Vector4f Position;
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcResourceElement Resource;
	NMS_GameComponents::GcInventoryLayout InventoryLayout;
	uint64_t Location;
	NMS::NMSString0x20 Name;
};

//Dependency: GcCharacterCustomisationData
//Dependency: NMSString0x10
struct GcCharacterCustomisationSaveData
{
	NMS_GameComponents::GcCharacterCustomisationData CustomData;
	NMS::NMSString0x10 SelectedPreset;
};

//Dependency: GcPlayerOwnershipData
//Dependency: GcCharacterCustomisationSaveData
//Dependency: GcSpaceshipClasses
//Dependency: GcInventoryClass
//Dependency: NMSString0x80
struct GcArchivedShipData
{
	NMS_GameComponents::GcPlayerOwnershipData Ownership;
	NMS_GameComponents::GcCharacterCustomisationSaveData Customisation;
	NMS_GameComponents::GcSpaceshipClasses ArchivedClass;
	NMS_GameComponents::GcInventoryClass ArchivedInventoryClass;
	NMS::NMSString0x80 ArchivedName;
	bool UsesLegacyColours;
};

//Dependency: NMSString0x10
struct GcRewardSalvageShip
{
	NMS::NMSString0x10 SpecificCustomisationSlotIDs[10];
	bool RewardShipParts;
};

//Dependency: NMSString0x10
struct GcCharacterMove
{
	enum class ModeEnum : uint32_t
	{
		SetVelocity = 0,
		ApplyForce = 1,
	};

	NMS::NMSString0x10 Input;
	NMS_GameComponents::GcCharacterMove::ModeEnum Mode;
	float Strength;
};

struct GcBaseBuildingPartStyle
{
	enum class StyleEnum : uint32_t
	{
		None = 0,
		Wood = 1,
		Metal = 2,
		Concrete = 3,
		Stone = 4,
		Timber = 5,
		Fibreglass = 6,
		Builders = 7,
	};

	NMS_GameComponents::GcBaseBuildingPartStyle::StyleEnum Style;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkMagicModelData
{
	NMS::Vector3f Centre;
	std::vector<NMS::Vector3f> Vertices;
	float Radius;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBaseBuildingPartStyle
//Dependency: TkMagicModelData
//Dependency: NMSString0x20A
struct GcBaseBuildingPartData
{
	NMS_Toolkit::TkMagicModelData MagicData;
	NMS::NMSString0x20A PartID;
	uint64_t InstanceLastProfiledTimestamp;
	uint64_t LastProfiledTimestamp;
	uint32_t InstanceMeshesCost;
	uint32_t InstanceNodesCost;
	uint32_t InstanceTimeCost;
	uint32_t MeshesCost;
	uint32_t NodesCost;
	uint32_t PhysicsCost;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
	uint32_t TimeCost;
};

//Dependency: NMSString0x10
struct GcAreaDamageData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PlayerDamageId;
	float Damage;
	float DelayPerMetre;
	float Radius;
	bool DamageCreatures;
	bool DamagePlayers;
	bool InstantKill;
};

//Dependency: GcResourceElement
struct GcSelectableObjectSpawnData
{
	NMS_GameComponents::GcResourceElement Resource;
};

//Dependency: GcSelectableObjectSpawnData
//Dependency: NMSString0x10
struct GcSelectableObjectSpawnList
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcSelectableObjectSpawnData> Objects;
};

//Dependency: NMSString0x10
struct GcCreatureGenerationWeightedListDomainEntry
{
	NMS::NMSString0x10 Archetype;
	float Weight;
};

//Dependency: GcAreaDamageData
struct GcAreaDamageDataTable
{
	std::vector<NMS_GameComponents::GcAreaDamageData> Table;
};

//Dependency: Vector2f
struct GcAsteroidGenerationData
{
	NMS::Vector2f NoiseRange;
	NMS::Vector2f ScaleVariance;
	float FadeRange;
	int32_t Health;
	float NoiseScale;
	float Scale;
	float Spacing;
};

//Dependency: NMSString0x10
struct GcAtmosphereEntryComponentData
{
	NMS::NMSString0x10 FlareEffect;
	NMS::NMSString0x10 ImpactEffect;
	float EditTerrainRadius;
	float EntryOffset;
	float EntryTime;
	bool AutoEntry;
};

//Dependency: GcSolarSystemLocatorChoice
//Dependency: GcSeed
struct GcAsteroidGeneratorAssignment
{
	NMS::GcSeed Seed;
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	int32_t AsteroidCount;
	int32_t PlanetIndex;
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcCreatureFoodList
{
	NMS::NMSString0x10 DebrisEffect;
	NMS::NMSString0x10 FoodProduct;
	NMS::VariableSizeString ResourceFile;
};

struct GcTerrainControls
{
	float GridLayers[9];
	float NoiseLayers[8];
	float Features[7];
	float Caves[1];
	float HighWaterActiveFrequency;
	float RockTileFrequency;
	float SubstanceTileFrequency;
	float WaterActiveFrequency;
	bool ForceContinentalNoise;
};

struct GcCreatureHemiSphere
{
	enum class CreatureHemiSphereEnum : uint32_t
	{
		Any = 0,
		Northern = 1,
		Southern = 2,
	};

	NMS_GameComponents::GcCreatureHemiSphere::CreatureHemiSphereEnum CreatureHemiSphere;
};

struct GcRarity
{
	enum class RarityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
	};

	NMS_GameComponents::GcRarity::RarityEnum Rarity;
};

//Dependency: GcRarity
//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct GcCreatureInfo
{
	enum class AgeEnum : uint32_t
	{
		Regular = 0,
		Weird = 1,
	};

	NMS::NMSString0x20A BiomeDesc;
	NMS::NMSString0x20A DietDesc;
	NMS::NMSString0x20A NotesDesc;
	NMS::NMSString0x20A TempermentDesc;
	NMS_GameComponents::GcCreatureInfo::AgeEnum Age;
	float Height1;
	float Height2;
	NMS_GameComponents::GcRarity Rarity;
	float Weight1;
	float Weight2;
	NMS::NMSString0x80 Diet;
	NMS::NMSString0x80 Gender1;
	NMS::NMSString0x80 Gender2;
	NMS::NMSString0x80 Height1_NMSString0x80;
	NMS::NMSString0x80 Height2_NMSString0x80;
	NMS::NMSString0x80 Notes;
	NMS::NMSString0x80 Temperament;
	NMS::NMSString0x80 Weight1_NMSString0x80;
	NMS::NMSString0x80 Weight2_NMSString0x80;
};

struct GcCreatureActiveTime
{
	enum class CreatureActiveTimeEnum : uint32_t
	{
		OnlyDay = 0,
		MostlyDay = 1,
		AnyTime = 2,
		MostlyNight = 3,
		OnlyNight = 4,
	};

	NMS_GameComponents::GcCreatureActiveTime::CreatureActiveTimeEnum CreatureActiveTime;
};

struct GcCreatureRoles
{
	enum class CreatureRoleEnum : uint32_t
	{
		None = 0,
		Predator = 1,
		PlayerPredator = 2,
		Prey = 3,
		Passive = 4,
		Bird = 5,
		FishPrey = 6,
		FishPredator = 7,
		Butterfly = 8,
		Robot = 9,
		Pet = 10,
	};

	NMS_GameComponents::GcCreatureRoles::CreatureRoleEnum CreatureRole;
};

struct GcCreatureSizeClasses
{
	enum class CreatureSizeClassEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
		Huge = 3,
	};

	NMS_GameComponents::GcCreatureSizeClasses::CreatureSizeClassEnum CreatureSizeClass;
};

//Dependency: GcCreatureActiveTime
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcCreatureGenerationDensity
//Dependency: GcCreatureTypes
//Dependency: GcCreatureRoles
//Dependency: GcCreatureSizeClasses
struct GcCreatureRoleDescription
{
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 ForceID;
	NMS::NMSString0x10 RequireTag;
	NMS_GameComponents::GcCreatureActiveTime ActiveTime;
	NMS_GameComponents::GcCreatureGenerationDensity Density;
	NMS_GameComponents::GcCreatureTypes ForceType;
	float IncreasedSpawnDistance;
	int32_t MaxGroupSize;
	NMS_GameComponents::GcCreatureSizeClasses MaxSize;
	int32_t MinGroupSize;
	NMS_GameComponents::GcCreatureSizeClasses MinSize;
	float ProbabilityOfBeingEnabled;
	NMS_GameComponents::GcCreatureRoles Role;
};

struct GcTerrainTileType
{
	enum class TileTypeEnum : uint32_t
	{
		Air = 0,
		Base = 1,
		Rock = 2,
		Mountain = 3,
		Underwater = 4,
		Cave = 5,
		Dirt = 6,
		Liquid = 7,
		Substance = 8,
	};

	NMS_GameComponents::GcTerrainTileType::TileTypeEnum TileType;
};

struct GcCreatureDiet
{
	enum class DietEnum : uint32_t
	{
		Carnivore = 0,
		Omnivore = 1,
		Herbivore = 2,
		Robot = 3,
	};

	NMS_GameComponents::GcCreatureDiet::DietEnum Diet;
};

//Dependency: GcCreatureHemiSphere
//Dependency: GcCreatureInfo
//Dependency: GcCreatureRoleDescription
//Dependency: GcTerrainTileType
//Dependency: GcCreatureDiet
//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcSeed
struct GcCreatureRoleData
{
	NMS_GameComponents::GcCreatureInfo Info;
	NMS_GameComponents::GcCreatureRoleDescription Description;
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 CreatureId;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcCreatureDiet Diet;
	float GroupsPerSquareKm;
	NMS_GameComponents::GcCreatureHemiSphere HemiSphere;
	NMS_GameComponents::GcTerrainTileType TileType;
	NMS_GameComponents::GcCreatureTypes Type;
};

//Dependency: GcCreatureRoleData
struct GcCreatureRoleDataTable
{
	std::vector<NMS_GameComponents::GcCreatureRoleData> AvailableRoles;
	float MaxProportionFlying;
	float SandWormFrequency;
	bool HasSandWorms;
};

//Dependency: GcTerrainTileType
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcExternalObjectListOptions
{
	NMS::NMSString0x10 Name;
	std::vector<NMS::VariableSizeString> Options;
	NMS::NMSString0x10 ResourceHint;
	NMS::NMSString0x10 ResourceHintIcon;
	int32_t Order;
	float Probability;
	float SeasonalProbabilityOverride;
	NMS_GameComponents::GcTerrainTileType TileType;
	bool AddToFilenameHashmapWhenOptional;
	bool AllowLimiting;
	bool ChooseUsingLifeLevel;
	bool SuppressSpawn;
};

struct GcPlanetClass
{
	enum class PlanetClassEnum : uint32_t
	{
		Default = 0,
		Initial = 1,
		InInitialSystem = 2,
	};

	NMS_GameComponents::GcPlanetClass::PlanetClassEnum PlanetClass;
};

struct GcPlanetSize
{
	enum class PlanetSizeEnum : uint32_t
	{
		Large = 0,
		Medium = 1,
		Small = 2,
		Moon = 3,
		Giant = 4,
	};

	NMS_GameComponents::GcPlanetSize::PlanetSizeEnum PlanetSize;
};

//Dependency: GcTerrainControls
//Dependency: GcCreatureRoleDataTable
//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeSubType
//Dependency: GcBiomeType
//Dependency: GcPlanetClass
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlanetSize
//Dependency: VariableSizeString
//Dependency: GcSeed
struct GcPlanetGenerationIntermediateData
{
	NMS_GameComponents::GcCreatureRoleDataTable CreatureRoles;
	NMS::VariableSizeString CreatureAirFile;
	NMS::VariableSizeString CreatureCaveFile;
	NMS::VariableSizeString CreatureExtraWaterFile;
	NMS::VariableSizeString CreatureLandFile;
	NMS::VariableSizeString CreatureRobotFile;
	NMS::VariableSizeString CreatureWaterFile;
	std::vector<int32_t> ExternalObjectListIndices;
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectLists;
	NMS::GcSeed Seed;
	NMS::VariableSizeString TerrainFile;
	NMS_GameComponents::GcTerrainControls Terrain;
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcBiomeSubType BiomeSubType;
	NMS_GameComponents::GcPlanetClass Class;
	NMS_GameComponents::GcPlanetSize Size;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	int32_t TerrainSettingIndex;
	bool Prime;
};

//Dependency: GcAsteroidGeneratorAssignment
//Dependency: Vector3f
struct GcAsteroidGeneratorRing
{
	NMS::Vector3f Rotation;
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float LowerRadius;
	int32_t OffBalance;
	float PushAmount;
	float PushRadius;
	float UpperRadius;
	float USpread;
	bool FlipPush;
};

//Dependency: GcCreatureVocalSoundData
struct GcCreatureVocalData
{
	NMS_GameComponents::GcCreatureVocalSoundData AttackVocal;
	NMS_GameComponents::GcCreatureVocalSoundData DeathVocal;
	NMS_GameComponents::GcCreatureVocalSoundData FleeVocal;
	NMS_GameComponents::GcCreatureVocalSoundData IdleVocal;
	float ScaleBias;
};

//Dependency: GcAsteroidGeneratorAssignment
//Dependency: Vector3f
struct GcAsteroidGeneratorSlab
{
	NMS::Vector3f Rotation;
	NMS::Vector3f Scale;
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float NoiseApply;
	float NoiseOffset;
	float NoiseScale;
};

//Dependency: TkModelResource
struct GcObjectSpawnerComponentData
{
	NMS_Toolkit::TkModelResource Object;
	float SpawnCooldown;
	int32_t SpawnPowerCost;
};

//Dependency: GcAsteroidGeneratorAssignment
struct GcAsteroidGeneratorSurround
{
	NMS_GameComponents::GcAsteroidGeneratorAssignment Assignment;
	float LowerRadius;
	float NoiseApply;
	float NoiseOffset;
	float NoiseScale;
	float UpperRadius;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkCameraData
{
	NMS::Vector3f Offset;
	float AdjustPitch;
	float AdjustRoll;
	float AdjustYaw;
	float Angle;
	float Distance;
	float Fov;
	float HeightAngle;
};

//Dependency: TkCameraData
//Dependency: TkCameraWanderData
//Dependency: NMSString0x20A
struct TkModelResourceCameraData
{
	enum class ResourceFocusTypeEnum : uint32_t
	{
		ResourceBounds = 0,
		ResourceBoundingHeight = 1,
		NodeBoundingBox = 2,
		World = 3,
	};

	NMS_Toolkit::TkCameraData CameraData;
	NMS::NMSString0x20A FocusLocator;
	NMS_Toolkit::TkCameraWanderData Wander;
	float FocusInterpTime;
	NMS_Toolkit::TkModelResourceCameraData::ResourceFocusTypeEnum ResourceFocusType;
	bool UseWorldUp;
};

//Dependency: TkModelResourceCameraData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkModelResourceData
{
	enum class ResourceThumbnailModeEnum : uint32_t
	{
		None = 0,
		HUD = 1,
		GUI = 2,
	};

	NMS_Toolkit::TkModelResourceCameraData Camera;
	NMS::NMSString0x20A Anim;
	NMS::NMSString0x10 Id;
	float AspectRatio;
	float BlendInOffset;
	float BlendInTime;
	float HeightOffset;
	float LightPitch;
	float LightRotate;
	NMS_Toolkit::TkModelResourceData::ResourceThumbnailModeEnum ResourceThumbnailMode;
	bool CanRotateWithInput;
};

//Dependency: Vector3f
struct TkGravityComponentData
{
	NMS::Vector3f OverrideBounds;
	float FalloffRadius;
	float Strength;
	bool MoveWithParent;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcBiomeList
{
	float BiomeProbability[17];
	float PrimeBiomeProbability[17];
};

//Dependency: NMSString0x10
struct GcBuildingDistribution
{
	NMS::NMSString0x10 Name;
	int32_t MaxDistance;
	int32_t MinDistance;
};

//Dependency: GcBiomeSubType
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcAudioWwiseEvents
//Dependency: TkCurveType
//Dependency: NMSString0x20
struct GcCreatureCrystalMovementDataParams
{
	enum class SubTypeEnum : uint32_t
	{
		Crystal = 0,
		Tentacle = 1,
	};

	enum class DeathTypeEnum : uint32_t
	{
		Explode = 0,
		Drop = 1,
	};

	NMS::NMSString0x10 DustEffect;
	std::vector<NMS_GameComponents::GcBiomeSubType> ValidBiomes;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float AppearOvershoot;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	NMS_GameComponents::GcAudioWwiseEvents CreationAudio;
	float DeathFadeStart;
	float DeathFadeTime;
	NMS_GameComponents::GcCreatureCrystalMovementDataParams::DeathTypeEnum DeathType;
	float DespawnDist;
	float HideOffset;
	float IdleSpeedModifier;
	float MaxAppearTime;
	float MaxDisappearTime;
	float MaxOffset;
	float MaxOffsetZ;
	float MaxScale;
	float MaxTilt;
	float MinAppearTime;
	float MinDisappearTime;
	float MinScale;
	float MinShowTime;
	NMS_GameComponents::GcAudioWwiseEvents MoveStartAudio;
	NMS_GameComponents::GcAudioWwiseEvents MoveStopAudio;
	int32_t NumShards;
	float OffsetTilt;
	float ParticleScale;
	NMS_GameComponents::GcAudioWwiseEvents RetractAudio;
	float RunSpeedModifier;
	float ShowOffset;
	float SpawnDist;
	NMS_GameComponents::GcCreatureCrystalMovementDataParams::SubTypeEnum SubType;
	float TentacleChurnSpeed;
	float TentacleIdleLookChance;
	float TentacleMoveSwingAngle;
	float TentacleMoveTimeMax;
	float TentacleMoveTimeMin;
	float TentaclePitchRange;
	float TentacleRollRange;
	float TentacleRotationApplyBase;
	float TentacleRotationApplyTip;
	float TentacleRunSwingSpeed;
	float TentacleSpeed;
	float TentacleStretchMax;
	float TentacleStretchMin;
	float TentacleWalkSwingSpeed;
	float TentacleYawRange;
	float WalkSpeedModifier;
	NMS::NMSString0x20 TentacleEndJoint;
	NMS::NMSString0x20 TentacleStartJoint;
	bool CustomHideCurve;
	NMS_Toolkit::TkCurveType HideCurve;
	bool ScaleOnAppear;
	bool UseTerrainAngle;
};

//Dependency: GcCreatureCrystalMovementDataParams
struct GcCreatureCrystalMovementData
{
	std::vector<NMS_GameComponents::GcCreatureCrystalMovementDataParams> Params;
};

//Dependency: GcAsteroidGenerationData
struct GcAsteroidSystemGenerationData
{
	NMS_GameComponents::GcAsteroidGenerationData CommonAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData LargeAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData RareAsteroidData;
	NMS_GameComponents::GcAsteroidGenerationData RingAsteroidData;
};

//Dependency: NMSString0x20A
struct GcCostSalvageShip
{
	NMS::NMSString0x20A ShipClassStringOverride[10];
	bool CannotAffordIfStringOverrideIsNull;
	bool WillGiveShipParts;
};

//Dependency: GcCompositeCurveElementData
struct GcCompositeCurveData
{
	std::vector<NMS_GameComponents::GcCompositeCurveElementData> Elements;
	float StartValue;
};

struct GcCreatureLegIKComponentData
{
	int32_t Stuff;
};

struct GcItemQuality
{
	enum class ItemQualityEnum : uint32_t
	{
		Junk = 0,
		Common = 1,
		Rare = 2,
		Epic = 3,
		Legendary = 4,
	};

	NMS_GameComponents::GcItemQuality::ItemQualityEnum ItemQuality;
};

struct GcFishSize
{
	enum class FishSizeEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
		ExtraLarge = 3,
	};

	NMS_GameComponents::GcFishSize::FishSizeEnum FishSize;
};

struct GcFishingTime
{
	enum class FishingTimeEnum : uint32_t
	{
		Day = 0,
		Night = 1,
		Both = 2,
	};

	NMS_GameComponents::GcFishingTime::FishingTimeEnum FishingTime;
};

//Dependency: GcItemQuality
//Dependency: NMSString0x10
//Dependency: GcFishSize
//Dependency: GcFishingTime
struct GcMissionFishData
{
	std::vector<NMS::NMSString0x10> SpecificFish;
	NMS_GameComponents::GcItemQuality Quality;
	NMS_GameComponents::GcFishSize Size;
	NMS_GameComponents::GcFishingTime Time;
	bool Biome[17];
	bool NeedsStorm;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcHistoricalSeasonData
{
	NMS::NMSString0x20A SeasonName;
	NMS::NMSString0x20A SeasonNameUpper;
	NMS::NMSString0x20A UnlockedTitle;
	NMS_Toolkit::TkTextureResource MainIcon;
	NMS::NMSString0x10 FinalReward;
	int32_t DisplayNumber;
	int32_t RemixNumber;
	int32_t SeasonNumber;
	NMS::NMSString0x20 Description;
};

struct GcAtlasSendSubmitContribution
{
	int32_t Contribution;
	int32_t MissionIndex;
};

//Dependency: GcResourceElement
//Dependency: GcBuildingClassification
//Dependency: TkNoiseFlattenOptions
//Dependency: GcSeed
//Dependency: Vector3f
struct GcBuildingSpawnData
{
	NMS::Vector3f AABBMax;
	NMS::Vector3f AABBMin;
	NMS_GameComponents::GcResourceElement Resource;
	NMS::GcSeed Seed;
	int32_t ClusterLayouts[8];
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	NMS_GameComponents::GcBuildingClassification Classification;
	int32_t ClusterLayoutCount;
	float ClusterSpacing;
	float Density;
	int32_t InstanceID;
	int32_t LSystemID;
	float MaxHeight;
	float MaxXZRotation;
	float MinHeight;
	float Radius;
	float Scale;
	int32_t WFCBuildingPreset;
	int32_t WFCModuleSet;
	bool AlignToNormal;
	bool AutoCollision;
	bool BuildingSizeCalculated;
	bool GivesShelter;
	bool IgnoreParticlesAABB;
	bool LowerIntoGround;
};

//Dependency: Colour
struct GcSolarSystemSkyColourData
{
	NMS::Colour BottomColour;
	NMS::Colour BottomColourPlanet;
	NMS::Colour CloudColour;
	NMS::Colour FogColour;
	NMS::Colour FogColour2;
	NMS::Colour LightColour;
	NMS::Colour MidColour;
	NMS::Colour MidColourPlanet;
	NMS::Colour NebulaColour1;
	NMS::Colour NebulaColour2;
	NMS::Colour NebulaColour3;
	NMS::Colour TopColour;
	NMS::Colour TopColourPlanet;
};

struct GcCostCanDispatchFleetExpeditions
{
};

//Dependency: GcInputActions
struct GcPlayerControlInput
{
	std::vector<NMSTemplate> Inputs;
	std::vector<NMS_GameComponents::GcInputActions> InterceptInputBlackList;
	std::vector<NMS_GameComponents::GcInputActions> InterceptInputWhitelist;
	bool InterceptAllInputs;
};

//Dependency: GcPlayerControlInput
//Dependency: NMSString0x10
struct GcPlayerControlState
{
	NMS_GameComponents::GcPlayerControlInput OverrideInput;
	std::vector<NMSTemplate> Data;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 OverrideCamera;
	bool StickToGround;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardKey
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlayerControlInput
//Dependency: NMSString0x10
//Dependency: GcPlayerControlState
//Dependency: TkBlackboardKey
struct GcPlayerControlComponentData
{
	NMS_GameComponents::GcPlayerControlInput BaseInput;
	NMS_Toolkit::TkBlackboardKey AimDir;
	NMS_Toolkit::TkBlackboardKey CrosshairDir;
	NMS_Toolkit::TkBlackboardKey TorchDir;
	NMS::NMSString0x10 BaseCamera;
	NMS::NMSString0x10 InitialState;
	std::vector<NMS_GameComponents::GcPlayerControlState> States;
};

//Dependency: VariableSizeString
struct GcAtmosphereList
{
	std::vector<NMS::VariableSizeString> Atmospheres;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcWFCFace
{
	enum class TransformEnum : uint32_t
	{
		None = 0,
		Rotated90 = 1,
		Rotated180 = 2,
		Rotated270 = 3,
		FlippedHorizontally = 4,
	};

	std::vector<NMS::NMSString0x10> ExcludedNeighboursR0;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR1;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR2;
	std::vector<NMS::NMSString0x10> ExcludedNeighboursR3;
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcWFCFace::TransformEnum Transform;
	NMS::NMSString0x20 Connector;
	bool Incomplete;
	bool IsEntrance;
	bool Symmetric;
	bool Walkable;
};

//Dependency: TkModelResource
struct GcWeightedResource
{
	NMS_Toolkit::TkModelResource Geometry;
	float RelativeProbability;
};

struct GcWFCTerrainConstraint
{
	enum class TerrainEnum : uint32_t
	{
		RequireAbove = 0,
		RequireBelow = 1,
	};

	enum class LevelsEnum : uint32_t
	{
		Lower = 0,
		Upper = 1,
		Both = 2,
	};

	enum class DirectionEnum : uint32_t
	{
		Left = 0,
		Back = 1,
		Right = 2,
		Forward = 3,
		LeftBack = 4,
		RightBack = 5,
		RightForward = 6,
		LeftForward = 7,
		All = 8,
	};

	NMS_GameComponents::GcWFCTerrainConstraint::DirectionEnum Direction;
	NMS_GameComponents::GcWFCTerrainConstraint::LevelsEnum Levels;
	NMS_GameComponents::GcWFCTerrainConstraint::TerrainEnum Terrain;
};

//Dependency: GcWFCFace
//Dependency: GcWeightedResource
//Dependency: GcWFCTerrainConstraint
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcWFCModulePrototype
{
	enum class TerrainEditsEnum : uint32_t
	{
		None = 0,
		ClearEntireBlock = 1,
		UseScene = 2,
		UseBasebuildingEdits = 3,
	};

	enum class FreighterModuleTypeEnum : uint32_t
	{
		None = 0,
		Room = 1,
		Corridor = 2,
	};

	NMS_GameComponents::GcWFCFace Back;
	NMS_GameComponents::GcWFCFace Down;
	NMS_GameComponents::GcWFCFace Forward;
	NMS_GameComponents::GcWFCFace Left;
	NMS_GameComponents::GcWFCFace Right;
	NMS_GameComponents::GcWFCFace Up;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LayoutGroup;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	std::vector<NMS_GameComponents::GcWFCTerrainConstraint> TerrainConstraints;
	NMS_GameComponents::GcWFCModulePrototype::FreighterModuleTypeEnum FreighterModuleType;
	float RelativeProbability;
	NMS_GameComponents::GcWFCModulePrototype::TerrainEditsEnum TerrainEdits;
	NMS::NMSString0x80 Group;
	NMS::NMSString0x80 Name;
	bool DontRotateModel;
	bool ExcludeOnGround;
	bool ExcludeOnTop;
	bool ExcludeRotatedVariants;
	bool Include;
	bool Indoors;
	bool LimitToOnePerLevel;
};

struct GcPlanetLife
{
	enum class LifeSettingEnum : uint32_t
	{
		Dead = 0,
		Low = 1,
		Mid = 2,
		Full = 3,
	};

	NMS_GameComponents::GcPlanetLife::LifeSettingEnum LifeSetting;
};

//Dependency: GcTerrainTileType
//Dependency: NMSString0x10
struct GcEcosystemCreatureData
{
	NMS::NMSString0x10 Creature;
	float MaxHeight;
	float MinHeight;
	float Rarity;
	NMS_GameComponents::GcTerrainTileType TileType;
};

//Dependency: GcTerrainEdit
//Dependency: Vector3f
struct GcPersistentTerrainEdits
{
	std::vector<NMS::Vector3f> BufferAnchors;
	std::vector<int32_t> BufferSizes;
	std::vector<NMS_GameComponents::GcTerrainEdit> Edits;
	uint64_t GalacticAddress;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCreatureHealthData
{
	NMS::NMSString0x10 DeathAnim;
	NMS::NMSString0x10 DeathAudio;
	NMS::NMSString0x10 DeathEffect;
	std::vector<NMS::NMSString0x20A> DespawnOnDeathDescriptors;
	NMS::NMSString0x10 HurtAnim;
	NMS::NMSString0x10 HurtAudio;
	bool DespawnOnDeath;
};

//Dependency: NMSString0x10
struct GcBaseBuildingEntryCosts
{
	NMS::NMSString0x10 ID;
	float Active0AverageFrameTimeCost;
	float Active1AverageFrameTimeCost;
	int32_t ActivePhysicsComponents;
	int32_t ActiveTotalNodes;
	float Inactive0AverageFrameTimeCost;
	float Inactive1AverageFrameTimeCost;
	int32_t InactivePhysicsComponents;
	int32_t InactiveTotalNodes;
};

//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: NMSString0x100
struct GcSpaceStationSpawnData
{
	enum class SpawnModeEnum : uint32_t
	{
		None = 0,
		UseSeed = 1,
		UseAltID = 2,
	};

	NMS::Vector3f SpawnFacing;
	NMS::Vector3f SpawnPosition;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcSpaceStationSpawnData::SpawnModeEnum SpawnMode;
	NMS::NMSString0x100 AltId;
};

//Dependency: NMSString0x20
struct GcCustomisationDescriptorList
{
	std::vector<NMS::NMSString0x20> Descriptors;
};

struct GcWeightingCurve
{
	enum class WeightingCurveEnum : uint32_t
	{
		NoWeighting = 0,
		MaxIsUncommon = 1,
		MaxIsRare = 2,
		MaxIsSuperRare = 3,
		MinIsUncommon = 4,
		MinIsRare = 5,
		MinIsSuperRare = 6,
	};

	NMS_GameComponents::GcWeightingCurve::WeightingCurveEnum WeightingCurve;
};

//Dependency: GcStatsTypes
//Dependency: GcWeightingCurve
struct GcProceduralTechnologyStatLevel
{
	NMS_GameComponents::GcStatsTypes Stat;
	float ValueMax;
	float ValueMin;
	NMS_GameComponents::GcWeightingCurve WeightingCurve;
	bool AlwaysChoose;
};

struct GcProceduralTechnologyCategory
{
	enum class ProceduralTechnologyCategoryEnum : uint32_t
	{
		None = 0,
		Combat = 1,
		Mining = 2,
		Scanning = 3,
		Protection = 4,
	};

	NMS_GameComponents::GcProceduralTechnologyCategory::ProceduralTechnologyCategoryEnum ProceduralTechnologyCategory;
};

//Dependency: GcProceduralTechnologyStatLevel
//Dependency: GcProceduralTechnologyCategory
//Dependency: GcWeightingCurve
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcProceduralTechnologyData
{
	enum class QualityEnum : uint32_t
	{
		Normal = 0,
		Rare = 1,
		Epic = 2,
		Legendary = 3,
		Illegal = 4,
		Sentinel = 5,
		Robot = 6,
		SeaTrash = 7,
	};

	NMS::Colour Colour;
	NMS::Colour UpgradeColour;
	NMS::NMSString0x20A Group;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcProceduralTechnologyStatLevel> StatLevels;
	NMS::NMSString0x10 Template;
	NMS_GameComponents::GcProceduralTechnologyCategory Category;
	int32_t NumStatsMax;
	int32_t NumStatsMin;
	NMS_GameComponents::GcProceduralTechnologyData::QualityEnum Quality;
	NMS_GameComponents::GcWeightingCurve WeightingCurve;
	NMS::NMSString0x80 Description;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	NMS::NMSString0x80 Subtitle;
};

//Dependency: Vector3f
struct GcSmokeBotStats
{
	NMS::Vector3f MinCpuFPSFacing;
	NMS::Vector3f MinCpuFPSPos;
	NMS::Vector3f MinGpuFPSFacing;
	NMS::Vector3f MinGpuFPSPos;
	NMS::Vector3f MinMemoryFacing;
	NMS::Vector3f MinMemoryPos;
	float AvgCpuFPS;
	float AvgGpuFPS;
	int32_t FrameCount;
	float MaxCpuFPS;
	float MaxGpuFPS;
	float MinCpuFPS;
	float MinGpuFPS;
	float MinMemory;
	float TotalCpuFps;
	float TotalGpuFps;
};

//Dependency: GcSmokeBotStats
struct GcSmokeBotPlanetReport
{
	NMS_GameComponents::GcSmokeBotStats PlanetStats;
	uint64_t UA;
};

//Dependency: GcSmokeBotStats
//Dependency: GcSmokeBotPlanetReport
struct GcSmokeBotSystemReport
{
	NMS_GameComponents::GcSmokeBotStats SpaceStats;
	NMS_GameComponents::GcSmokeBotStats SystemStats;
	std::vector<NMS_GameComponents::GcSmokeBotPlanetReport> PlanetReports;
	uint64_t UA;
};

struct GcBuildingComponentData
{
};

struct GcCreatureFlockMovementData
{
	float BankTime;
	float FlockAlign;
	float FlockAvoidPredators;
	float FlockAvoidPredatorsMaxDist;
	float FlockAvoidPredatorsMinDist;
	float FlockAvoidPredatorsSpeedBoost;
	float FlockAvoidTerrain;
	float FlockAvoidTerrainMaxDist;
	float FlockAvoidTerrainMinDist;
	float FlockCohere;
	float FlockFollow;
	float FlockHysteresis;
	float FlockMoveDirectionTime;
	float FlockMoveSpeed;
	float FlockSeperate;
	float FlockSeperateMaxDist;
	float FlockSeperateMinDist;
	float FlockTurnAngle;
	float MaxBank;
	float MaxFlapSpeed;
	int32_t MaxFlockMembers;
	float MinFlapSpeed;
	int32_t MinFlockMembers;
	float MoveInFacingStrength;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcCreatureParticleEffectDataEntry
{
	NMS::VariableSizeString EffectLocator;
	NMS::NMSString0x10 EffectName;
	std::vector<NMSTemplate> Requirements;
	float Scale;
	bool Attached;
	bool DetachOnRetire;
};

struct GcCreatureParticleEffectTrigger
{
	enum class CreatureParticleEffectTriggerEnum : uint32_t
	{
		None = 0,
		Spawn = 1,
		Despawn = 2,
		Death = 4,
		Ragdoll = 8,
		Appear = 16,
	};

	NMS_GameComponents::GcCreatureParticleEffectTrigger::CreatureParticleEffectTriggerEnum CreatureParticleEffectTrigger;
};

//Dependency: GcCreatureParticleEffectDataEntry
//Dependency: GcCreatureParticleEffectTrigger
struct GcCreatureParticleEffectData
{
	std::vector<NMS_GameComponents::GcCreatureParticleEffectDataEntry> Effects;
	NMS_GameComponents::GcCreatureParticleEffectTrigger RetireTriggers;
	NMS_GameComponents::GcCreatureParticleEffectTrigger SpawnTriggers;
};

//Dependency: GcCreatureParticleEffectData
struct GcCreatureParticleEffects
{
	std::vector<NMS_GameComponents::GcCreatureParticleEffectData> ParticleEffects;
};

struct GcSolarGenerationData
{
	uint64_t SolarSeed;
};

//Dependency: GcAudioWwiseEvents
struct GcAudioAreaTriggerComponentData
{
	float EnterDistance;
	NMS_GameComponents::GcAudioWwiseEvents EventEnter;
	NMS_GameComponents::GcAudioWwiseEvents EventExit;
	float ExitDistance;
};

//Dependency: GcStatsTypes
struct GcStatsBonus
{
	float Bonus;
	int32_t Level;
	NMS_GameComponents::GcStatsTypes Stat;
};

//Dependency: GcStatsBonus
//Dependency: Colour
//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcPlayerWeaponBiomeProperties
{
	NMS::Colour UpgradeColourOverride;
	NMS::NMSString0x10 MuzzleChargedAnimId;
	NMS::NMSString0x10 MuzzleChargedParticlesId;
	NMS::NMSString0x10 MuzzleFireAnimId;
	NMS::NMSString0x10 MuzzleFireParticlesId;
	NMS::NMSString0x10 MuzzleIdleAnimId;
	NMS::NMSString0x10 MuzzleIdleParticlesId;
	NMS::NMSString0x10 Projectile;
	std::vector<NMS_GameComponents::GcStatsBonus> StatBonusesOverride;
	NMS::NMSString0x10 WeaponChargedAnimId;
	NMS::NMSString0x10 WeaponFireAnimId;
	NMS::NMSString0x10 WeaponFireParticlesId;
	NMS::NMSString0x10 WeaponIdleAnimId;
	NMS_GameComponents::GcBiomeType Biome;
};

struct GcRemoteWeapons
{
	enum class RemoteWeaponTypeEnum : uint32_t
	{
		Laser = 0,
		VehicleLaser = 1,
		AIMechLaser = 2,
		ShipLaser = 3,
		ShipLaser2 = 4,
		RailLaser = 5,
		NumLasers = 6,
		BoltCaster = 7,
		Shotgun = 8,
		Cannon = 9,
		Burst = 10,
		Flamethrower = 11,
		MineGrenade = 12,
		BounceGrenade = 13,
		StunGrenade = 14,
		VehicleCanon = 15,
		AIMechCanon = 16,
		ShipPhoton = 17,
		ShipShotgun = 18,
		ShipMinigun = 19,
		ShipPlasma = 20,
		ShipRocket = 21,
		None = 22,
	};

	NMS_GameComponents::GcRemoteWeapons::RemoteWeaponTypeEnum RemoteWeaponType;
};

struct GcPlayerWeaponClass
{
	enum class WeaponClassEnum : uint32_t
	{
		None = 0,
		Projectile = 1,
		ChargedProjectile = 2,
		Laser = 3,
		Grenade = 4,
		Utility = 5,
		TerrainEditor = 6,
		Spawner = 7,
		SpawnerAlt = 8,
		Fishing = 9,
	};

	NMS_GameComponents::GcPlayerWeaponClass::WeaponClassEnum WeaponClass;
};

//Dependency: GcPlayerWeaponBiomeProperties
//Dependency: GcStatsTypes
//Dependency: GcRemoteWeapons
//Dependency: GcPlayerWeaponClass
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcPlayerWeaponPropertiesData
{
	NMS::Colour DefaultMuzzleLightColour;
	std::vector<NMS_GameComponents::GcPlayerWeaponBiomeProperties> BiomeProperties;
	NMS::NMSString0x10 DefaultMuzzleChargedAnimId;
	NMS::NMSString0x10 DefaultMuzzleChargedParticlesId;
	NMS::NMSString0x10 DefaultMuzzleFireAnimId;
	NMS::NMSString0x10 DefaultMuzzleFireParticlesId;
	NMS::NMSString0x10 DefaultMuzzleIdleAnimId;
	NMS::NMSString0x10 DefaultMuzzleIdleParticlesId;
	NMS::NMSString0x10 DefaultProjectile;
	NMS::NMSString0x10 DefaultWeaponChargedAnimId;
	NMS::NMSString0x10 DefaultWeaponFireAnimId;
	NMS::NMSString0x10 DefaultWeaponFireParticlesId;
	NMS::NMSString0x10 DefaultWeaponIdleAnimId;
	NMS::VariableSizeString MuzzleGunResource;
	NMS::VariableSizeString MuzzleLaserResource;
	NMS::NMSString0x10 ShakeId;
	NMS::NMSString0x10 VibartionId;
	float ChargingMuzzleFlashMaxScale;
	float ChargingMuzzleFlashMinScale;
	float MuzzleFlashScale;
	float MuzzleLightIntensity;
	float ParticlesOffsetMultiplier;
	NMS_GameComponents::GcRemoteWeapons RemoteType;
	float RumbleScale;
	NMS_GameComponents::GcStatsTypes Stat;
	float VibrationScale;
	NMS_GameComponents::GcPlayerWeaponClass WeaponClass;
	bool FlashMuzzleOnProjectileFire;
	bool MuzzleLightUsesLaserColour;
	bool MuzzleLightUsesMuzzleColour;
	bool UseMuzzleLight;
	bool UsesCustomBiomeAnims;
	bool UsesCustomBiomeColour;
	bool UsesCustomBiomeFireAnims;
	bool UsesCustomBiomeFireParticles;
	bool UsesCustomBiomeMuzzleParticles;
	bool UsesCustomBiomeProjectile;
	bool UsesCustomBiomeStats;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: GcResource
struct TkMaterialResource
{
	NMS::VariableSizeString Filename;
	NMS::GcResource ResHandle;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkMaterialResource
struct GcCamouflageData
{
	NMS_Toolkit::TkMaterialResource CamouflageMaterial;
	float DissolveTime;
	float DissolveTimeVR;
	float FadeInTime;
	float FadeOutTime;
	float LowQualityBrightnessMultiplier;
	float LowQualityFresnelModifier;
};

//Dependency: GcPlayerWeaponPropertiesData
//Dependency: GcCamouflageData
struct GcPlayerWeaponPropertiesTable
{
	NMS_GameComponents::GcPlayerWeaponPropertiesData PropertiesData[20];
	NMS_GameComponents::GcCamouflageData CamouflageData;
};

//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
struct GcButtonSpawnOffset
{
	float AngleMax;
	float AngleMin;
	int32_t Count;
	float Facing;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	float Offset;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;
	float Spacing;
};

//Dependency: NMSString0x20A
struct GcMissionConditionNearScanEvent
{
	NMS::NMSString0x20A Event;
	float Distance;
	bool AllowInShip;
	bool MustMatchThisMissionIDSeed;
	bool RequiresFullFireteam;
	bool ReturnTrueIfMarkerGone;
};

//Dependency: NMSString0x80
struct GcDailyRecurrence
{
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;
};

struct GcNetworkInterpolationComponentData
{
	enum class SynchroniseScaleEnum : uint32_t
	{
		Never = 0,
		Once = 1,
		Always = 2,
	};

	NMS_GameComponents::GcNetworkInterpolationComponentData::SynchroniseScaleEnum SynchroniseScale;
	bool SupportTeleportation;
	bool UpdateWhileInactive;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimationAttachmentData
{
	NMS::NMSString0x10 AnimGroup;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20
struct GcExpeditionDebriefPunctuation
{
	float Delay;
	NMS::NMSString0x20 Punctuation;
};

//Dependency: NMSString0x20A
struct GcFrigateTraitStrengthValues
{
	NMS::NMSString0x20A StatLocID;
	int32_t StatAlteration[10];
	bool StatDisplaysPositive;
};

//Dependency: GcFrigateTraitStrengthValues
struct GcFrigateTraitStrengthByType
{
	NMS_GameComponents::GcFrigateTraitStrengthValues FrigateStatType[11];
};

struct GcFrigateStatRange
{
	int32_t Maximum;
	int32_t Minimum;
};

//Dependency: GcFrigateStatRange
//Dependency: NMSString0x10
struct GcFrigateStats
{
	NMS::NMSString0x10 InitialTrait;
	NMS_GameComponents::GcFrigateStatRange Stats[11];
};

//Dependency: GcFrigateStats
struct GcFrigateStatsByClass
{
	NMS_GameComponents::GcFrigateStats FrigateClass[10];
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcPassiveFrigateIncome
{
	NMS::NMSString0x10 IncomeId;
	int32_t AmountOfIncomeRewarded;
	int32_t ForEveryXAmountOfTheStat;
	NMS_GameComponents::GcInventoryType IncomeType;
};

//Dependency: GcPassiveFrigateIncome
struct GcPassiveFrigateIncomeArray
{
	NMS_GameComponents::GcPassiveFrigateIncome Array[10];
};

struct GcExpeditionDifficultyKeyframe
{
	float Difficulty;
	int32_t EventNumber;
};

//Dependency: NMSString0x10
struct GcExpeditionPaymentToken
{
	NMS::NMSString0x10 TokenName;
	int32_t TokenValue;
};

//Dependency: GcFrigateStatType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcExpeditionPowerup
{
	NMS::NMSString0x20A ModuleDescription;
	NMS::NMSString0x20A SelectionDescription;
	NMS::NMSString0x10 ProductId;
	NMS_GameComponents::GcFrigateStatType StatModified;
	int32_t ValueChange;
};

struct GcFrigateUITraitLines
{
	float Line0;
	float Line1;
	float Line2;
	float Line3;
	float Line4;
};

struct GcExpeditionCategoryStrength
{
	int32_t OccurranceChance[5];
};

//Dependency: GcExpeditionCategoryStrength
struct GcExpeditionEventOccurrenceRate
{
	NMS_GameComponents::GcExpeditionCategoryStrength ExpeditionCategory[5];
};

struct GcFrigateClassCost
{
	int32_t Cost[10];
};

struct GcExpeditionDurationValues
{
	int32_t Duration[5];
};

struct GcInteractionDof
{
	float FarFadeDistance;
	float FarPlane;
	float NearPlaneAdjust;
	float NearPlaneMin;
	bool IsEnabled;
	bool UseGlobals;
};

struct GcInventoryClassCostMultiplier
{
	float Multiplier[4];
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcExpeditionDebriefPunctuation
//Dependency: GcFrigateTraitStrengthByType
//Dependency: GcScanEffectData
//Dependency: GcFrigateTraitIcons
//Dependency: GcFrigateStatsByClass
//Dependency: GcPassiveFrigateIncomeArray
//Dependency: GcNumberedTextList
//Dependency: GcExpeditionDifficultyKeyframe
//Dependency: GcExpeditionPaymentToken
//Dependency: Vector3f
//Dependency: GcExpeditionPowerup
//Dependency: GcFrigateUITraitLines
//Dependency: GcExpeditionEventOccurrenceRate
//Dependency: GcFrigateClassCost
//Dependency: GcExpeditionDurationValues
//Dependency: GcInteractionDof
//Dependency: GcInventoryClassCostMultiplier
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcFleetGlobals
{
	enum class ForceDebriefEntryTypeEnum : uint32_t
	{
		None = 0,
		PrimarySuccess = 1,
		WhaleSuccess = 2,
		PrimaryFailure = 3,
		PrimaryDamage = 4,
		SecondarySuccess = 5,
		SecondaryFailure = 6,
		SecondaryDamage = 7,
		GenericSuccess = 8,
		GenericFailure = 9,
		WhaleFailure = 10,
	};

	NMS_GameComponents::GcScanEffectData CompletedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData DamagedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData DestroyedFrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData FrigateHologramScanEffect;
	NMS_GameComponents::GcScanEffectData FrigateScanEffect;
	NMS::Vector3f FreighterCustomiserSunAngleAdjust;
	NMS::Vector3f PirateFreighterCustomiserSunAngleAdjust;
	NMS_GameComponents::GcFrigateStatsByClass FrigateInitialStats;
	NMS_GameComponents::GcFrigateTraitStrengthByType FrigateTraitStrengths;
	NMS_GameComponents::GcPassiveFrigateIncomeArray PassiveIncomes;
	NMS_GameComponents::GcNumberedTextList DeepSpaceFrigateMoods[11];
	NMS_GameComponents::GcFrigateTraitIcons NegativeTraitIcons;
	NMS_GameComponents::GcFrigateTraitIcons TraitIcons;
	NMS::NMSString0x20A CivilianMPMissionGiverPuzzle;
	NMS::NMSString0x20A CommunicatorDamagePuzzleTableEntry;
	NMS::NMSString0x20A DeepSpaceFrigateActivePuzzleID;
	NMS::NMSString0x20A DeepSpaceFrigateDebriefPuzzleID;
	NMS::NMSString0x20A FleetCommunicationOSDMessage;
	NMS::NMSString0x20A FrigateDamagePuzzleTableEntry;
	NMS::NMSString0x20A FrigatePurchasePuzzleTableEntry;
	NMS::NMSString0x20A NeedAvailableExpeditionTerminalPuzzleID;
	NMS::NMSString0x20A NeedExpeditionTerminalPuzzleID;
	NMS::NMSString0x20A NeedFrigatesPuzzleID;
	NMS::NMSString0x20A NewExpeditionsAvailablePuzzleID;
	NMS::NMSString0x20A NormandyActivePuzzleID;
	NMS::NMSString0x20A NormandyDebriefPuzzleID;
	NMS::NMSString0x20A SelectExpeditionPuzzleID;
	NMS::NMSString0x20A TerminalActivePuzzleID;
	NMS::NMSString0x20A TerminalDamagePuzzleID;
	NMS::NMSString0x20A TerminalDebriefPuzzleID;
	NMS::NMSString0x20A TerminalInterventionPuzzleID;
	NMS::NMSString0x20A TerminalNeedsAssignmentPuzzleID;
	NMS_GameComponents::GcNumberedTextList FrigateBadMoods;
	NMS_GameComponents::GcNumberedTextList FrigateDamageDescriptions;
	NMS_GameComponents::GcNumberedTextList FrigateExtraNotes;
	NMS_GameComponents::GcNumberedTextList FrigateGoodMoods;
	std::vector<float> CombatSpawnDelayIncreaseByInventoryClass;
	std::vector<NMS_GameComponents::GcExpeditionDebriefPunctuation> DebriefPunctuationList;
	std::vector<NMS::NMSString0x10> DeepSpaceCommonPrimaryTraits;
	std::vector<NMS::NMSString0x10> DeepSpaceFrigateTraits;
	std::vector<int32_t> DifficultyModifier;
	std::vector<NMS_GameComponents::GcExpeditionDifficultyKeyframe> ExpeditionDifficultyKeyframes;
	std::vector<int32_t> ExpeditionRankBoundaries;
	std::vector<NMS_GameComponents::GcExpeditionPaymentToken> FreighterTokenProductIDs;
	std::vector<NMS::NMSString0x20> FrigateCaptainPuzzleIds;
	std::vector<NMS::VariableSizeString> FrigateHologramModels;
	std::vector<NMS::VariableSizeString> FrigateInteriorsToCache;
	std::vector<int32_t> FrigateLevelVictoriesRequired;
	std::vector<NMS::VariableSizeString> FrigatePlanetModels;
	std::vector<NMS::NMSString0x10> GhostShipFrigateTraits;
	std::vector<NMS::NMSString0x10> NormandyTraits;
	std::vector<NMS_GameComponents::GcExpeditionPowerup> Powerups;
	std::vector<NMS_GameComponents::GcFrigateUITraitLines> UITraitLineLengths;
	NMS_GameComponents::GcExpeditionEventOccurrenceRate EventTypeOccurrenceChance;
	NMS_GameComponents::GcFrigateClassCost FrigateBaseCost;
	NMS_GameComponents::GcFrigateClassCost FrigateCostVariance;
	NMS_GameComponents::GcExpeditionDurationValues ExpeditionDurations;
	NMS_GameComponents::GcInteractionDof FleetInteractionDepthOfField;
	NMS_GameComponents::GcInventoryClassCostMultiplier FrigateCostMultiplier;
	NMS::Vector2f PercentChanceOfDamageOnFailedEvent;
	float CameraPauseAfterStartingExpedition;
	float CombatDefenderSpawnDelay;
	float CombatFrigateSpawnAngle;
	float CombatFrigateSpawnMinRange;
	float CombatNotificationTime;
	float CombatSpawnDelay;
	float DamagedListEntryPulseRate;
	float DespawnDelay;
	float DespawnDelayIncreasePerFrigate;
	float DifficultyMultiplierForBalancedExpeditions;
	float DifficultyMultiplierForNonPrimaryEvents;
	float DistanceForPurchaseReset;
	float DistanceForSingleShipFlybyCommsReset;
	float ExpeditionDifficultyIncreaseForEachAdditionalFrigate;
	int32_t ExpeditionDifficultyVariance;
	int32_t ExplorationPointsRequiredForScan;
	int32_t FirstEventIndexWhichCanBeIntervention;
	NMS_Globals::GcFleetGlobals::ForceDebriefEntryTypeEnum ForceDebriefEntryType;
	int32_t ForcedSequentialEventsStartingIndex;
	int32_t FreighterTokenMinimumSpend;
	float FrigateDistanceMultiplierIfNoCaptialShip;
	float FrigatesPerSecondForInstantSpawn;
	float HologramSwapSpeed;
	float LevelupProgressRequiredToNotBeSadAboutDamage;
	int32_t LightYearsPerExpeditionEvent;
	int32_t LightYearsPerExpeditionEvent_Easy;
	int32_t LowDamageNumberOfExpeditions;
	int32_t MaxDiceRollWhenCalculatingExpeditionEventResult;
	int32_t MaxExpeditionStatValue;
	float MaxFrigateDistanceFromFreighter;
	int32_t MaxFrigateStatValue;
	int32_t MaxGapBetweenExpeditionLogEntries;
	int32_t MaximumSpeedDecrease;
	int32_t MaximumSpeedIncrease;
	int32_t MaxNumberOfPlayerShipsInFreighterHangar;
	float MaxPurchaseDistance;
	int32_t MinExpeditionStatValue;
	float MinFrigateDistanceFromFreighter;
	int32_t MinFrigateStatValue;
	int32_t MinGapBetweenExpeditionLogEntries;
	int32_t NextDebriefDescriptionOffset;
	float NonUrgentDamagedListEntryAlpha;
	int32_t NormandyDamageEvents;
	int32_t NormandyFailures;
	int32_t NumberOfExpeditionChoices;
	int32_t NumberOfFrigatesPurchasedToEndEasyExpeditions;
	int32_t NumberOfShipsInInitialFleet;
	int32_t NumberOfUAChangesPerExpeditionEvent;
	int32_t OverrideExpeditionSecondsPerDay;
	int32_t PercentChanceOfFrigateAdditionalSpawnedTrait;
	int32_t PercentChanceOfGenericEventDescription;
	int32_t PercentChanceOfInterventionEvent;
	int32_t PercentChanceOfPrimaryDescriptionForBalancedEvent;
	int32_t PercentChangeOfFrigateBeingPurchasable;
	float PostCombatSpawnDelay;
	float PostFreighterWarpSpawnDelayForFleetFrigates;
	float PreFreighterWarpDepawnDelayForFleetFrigates;
	float RadiusRequiredForFrigateSpawn;
	int32_t RampDamageNumberOfExpeditions;
	float SingleShipFlybyDistance;
	float SingleShipFlybyHeightOffset;
	float SingleShipFlybyMaxAngle;
	float SpawnDelayForFleetFrigates;
	float SpawnDelayForNewFrigates;
	float SpawnDelayForReturningFrigates;
	float SpawnDelayIncreasePerFrigate;
	float SpawnDelayRandomMax;
	float SpawnDelayRandomMin;
	int32_t StatPointsAwardedForLevelUp;
	float TimeBeforeDebriefLogsStart;
	float TimeBeforeHidingHangar;
	float TimeBeforePlayerAlertedToDamagedFrigates;
	float TimeBeforePlayerAlertedToInterventionEvent;
	float TimeBeforeShowingHangar;
	float TimeBetweenDebriefLettersAppearing;
	float TimeBetweenDebriefLogsAppearing;
	float TimeBetweenDebriefLogSectionsAppearing;
	int32_t TimeBetweenPassiveIncomeTicks;
	int32_t TimeTakenForExpeditionEvent;
	int32_t TimeTakenForExpeditionEvent_Easy;
	float UITraitLinesAngle;
	NMS::NMSString0x20 RacialTermForCaptain[9];
	bool DisablePlayerFleets;
	bool ExpeditionsCompleteInstantly;
	bool NewFrigatesStartDamaged;
	bool ShowMissingRewardDescriptions;
	bool ShowSeeds;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcDroneWeaponData
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Projectile;
	float ExplosionRadius;
	float FireRate;
	float FireTimeMax;
	float FireTimeMin;
	float InheritInitialVelocity;
	float MoveDistanceMax;
	float MoveDistanceMin;
	int32_t NumProjectiles;
	int32_t NumShotsMax;
	int32_t NumShotsMin;
	float ProjectileSpread;
	float Range;
	float Timeout;
	bool ChangeBarrelEachShot;
};

//Dependency: Vector2f
struct GcAudioPulseDemo
{
	NMS::Vector2f InWarp;
	NMS::Vector2f Planet;
	NMS::Vector2f Space;
	NMS::Vector2f SpaceStation;
	NMS::Vector2f Wanted;
	float MixRateSeconds;
};

struct GcRewardShowBlackHoles
{
};

struct GcAudioWwiseRTPCs
{
	enum class AkRTPCEnum : uint32_t
	{
		INVALID_RTPC = 0,
		BASE_BATTERY_CHARGING = 2081665978,
		BASE_SPHERE_ROLLSPEED = 3084205441,
		BINOCULARS_EFFECT = 1697670405,
		BURN_INTENSITY = 2334039880,
		BYTEBEAT_FX = 3691066168,
		BYTEBEAT_RMS = 2736086896,
		COMMS_CHATTER_DISTANCE = 2050431636,
		COMMS_CHATTER_FREIGHTERATTACKED = 1185036508,
		COMMS_CHATTER_PIRATES = 1424501521,
		COMMS_CHATTER_POLICE = 3578259387,
		CREATURE_EXISTENCE = 3148749219,
		CREATURES_STEP_SIZE = 3775298818,
		DOPPLER_DROID_SMALL = 520695608,
		GAMEOBJECT_DISTANCE = 2394244376,
		GLOBAL_HAZARD_LEVEL = 4258379784,
		GLOBAL_HEALTH_LEVEL = 711000894,
		GLOBAL_SHIELD_LEVEL = 3936348003,
		HG_VA_EMOTE = 404305919,
		HG_VA_GAMEOBJECTS = 2298792353,
		HG_VA_HEADBODYRATIO = 4129897572,
		HG_VA_SEED = 590314510,
		HG_VA_SIZE = 774176826,
		INTERACT_TIMER = 518502437,
		JETPACK_HEIGHT = 1890969281,
		MAP_STAR_WOOSH = 3162157229,
		MASTER_CHAT_LEVEL = 1536050791,
		MASTER_MUSIC_LEVEL = 4176915636,
		MASTER_SFX_LEVEL = 3385062136,
		MASTER_VOICE_LEVEL = 3702934039,
		MECH_IDLE = 3137477943,
		METEORITE_INCOMING = 3485432110,
		MOTION_DRIVER_A = 1932490940,
		MOTION_DRIVER_B = 1932490943,
		MUS_FISHING = 1771682885,
		NPC_SHIP_DISTANCE = 2165297203,
		NPC_SHIP_DOPPLER = 3636127990,
		NPC_SHIP_SPEED = 2455698775,
		PL_AMB_HEIGHT = 317995146,
		PL_ATLASGUN = 4051378197,
		PL_CAVE_ENCLOSED = 2571588979,
		PL_EXERTION = 2623861868,
		PL_FALL_SPEED = 1982020859,
		PL_FOLEY_CLOTHING_LOCO_SPEED = 2340579866,
		PL_HAZARD_PROTECTION = 2130060434,
		PL_SHIP_HEIGHT = 4277243060,
		PL_SHIP_LANDINGDISTANCE = 3382333075,
		PL_SHIP_SPEED = 3530269146,
		PL_SHIP_SPEED_REV = 2483547812,
		PL_SHIP_SURFACE_WATER = 3382507686,
		PL_SHIP_THRUST = 3860371139,
		PL_SHIP_VR_EXIT = 2290175096,
		PL_SHIP_YAW = 2437074298,
		PL_UNDERWATER_DEPTH = 1925728869,
		PL_WALK_SPEED = 1542514635,
		PL_WPN_LASER_RESOURCEGATHER = 1987818405,
		PL_WPN_LASERPOWER = 2568549452,
		PL_WPN_NUMBEROFBULLETS = 1022951743,
		PL_WPN_OVERHEAT = 2530555100,
		PLANET_TIME = 1275284849,
		PLAYER_VR_FOLEY_ARMS = 3126959713,
		POD_SQUISH = 1205600278,
		PROTOROLLER = 2566437297,
		PS5_HEADPHONES = 1805558639,
		PULSE_BUS01_MASTER_VOLUME = 1122126612,
		PULSE_EVENT_PANFR = 4145342657,
		PULSE_EVENT_PANLR = 18151427,
		PULSE_EVENT_PITCH = 1891889666,
		PULSE_EVENT_SENDBUS_00 = 2954454839,
		PULSE_EVENT_SENDBUS_01 = 2954454838,
		PULSE_EVENT_SENDBUS_02 = 2954454837,
		PULSE_EVENT_SENDBUS_03 = 2954454836,
		PULSE_EVENT_VOLUME = 3465058902,
		QUAD_LASERBUILDUP = 2231318707,
		RAIN_INTENSITY = 2520241501,
		RAIN_INTENSITY_BUILDING = 2209133296,
		RAIN_ROOF = 4207359364,
		RAIN_SHIP_EXTERIOR = 3413338877,
		RUMBLE_INTENSITY = 2172125472,
		SENTINEL_DETECTOR = 2169975102,
		SETTLEMENT_DISTANCE = 1266882226,
		SETTLEMENT_INTENSITY = 298514682,
		SHIP_WATER_LANDING = 320188335,
		SHORELINE = 27371874,
		SHUTTLE_THRUST = 1372956193,
		SQUADRON_SHIPS = 429575874,
		STORM = 1686739424,
		SUITVOICE_RMS = 142884387,
		THEREMIN_PITCH = 3614757816,
		THEREMIN_VOLUME = 640239972,
		UI_VR_MENU = 746511756,
		VEHICLE_EXIT = 4097279314,
		VEHICLE_IMPACTS = 2236782823,
		VEHICLE_JUMP = 505273650,
		VEHICLE_SKID = 2704293107,
		VEHICLE_SPEED = 1501155019,
		VEHICLE_SUSPENSION = 806810365,
		VEHICLE_TORQUE = 1208829996,
		WALKER_MOOD = 4212868635,
		WAVE_INTENSITY = 3308442616,
		WPN_PL_JAVELIN_CHARGE = 4031014832,
		WPN_PL_NEUTRON_CANNON_CHARGE = 1623797362,
	};

	NMS_GameComponents::GcAudioWwiseRTPCs::AkRTPCEnum AkRTPC;
};

//Dependency: GcClothPiece
struct GcClothComponentData
{
	std::vector<NMS_GameComponents::GcClothPiece> ClothPieces;
	float InitialOverSolveForConstraints;
	float InitialOverSolveForContacts;
	float MaxAngularSpeedFeltByDynamics;
	float MaxLinearSpeedFeltByDynamics;
	bool Enabled;
};

//Dependency: NMSString0x10
struct GcRewardTrigger
{
	NMS::NMSString0x10 Trigger;
	bool UseMasterModel;
};

struct GcStatDisplayType
{
	enum class StatDisplayTypeEnum : uint32_t
	{
		None = 0,
		Sols = 1,
		Distance = 2,
	};

	NMS_GameComponents::GcStatDisplayType::StatDisplayTypeEnum StatDisplayType;
};

struct GcStatTrackType
{
	enum class StatTrackTypeEnum : uint32_t
	{
		Set = 0,
		Add = 1,
		Max = 2,
		Min = 3,
	};

	NMS_GameComponents::GcStatTrackType::StatTrackTypeEnum StatTrackType;
};

//Dependency: GcStatValueData
//Dependency: GcStatDisplayType
//Dependency: GcStatType
//Dependency: GcStatTrackType
//Dependency: NMSString0x10
struct GcStatDefinition
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcStatValueData DefaultValue;
	NMS_GameComponents::GcStatDisplayType DisplayType;
	int32_t MissionMessageDecimals;
	NMS_GameComponents::GcStatTrackType TrackType;
	NMS_GameComponents::GcStatType Type;
	bool IsProgression;
	bool TelemetryUpload;
};

//Dependency: GcStatDefinition
struct GcStatDefinitionTable
{
	std::vector<NMS_GameComponents::GcStatDefinition> StatDefinitionTable;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcPulseEncounterSpawnObject
{
	NMS_Toolkit::TkModelResource Object;
	NMS::NMSString0x10 DespawnEffect;
	NMS::NMSString0x10 SpawnEffect;
	NMS::NMSString0x10 TriggerActionOnSpawn;
	float Pitch;
	float Roll;
	float SpawnScale;
	float SpawnTime;
	float UpOffset;
	float WarpInDistance;
	float Yaw;
	bool BlockAIShipAutopilot;
	bool LeaveIfAttacked;
	bool WarpIn;
};

//Dependency: GcGalaxyStarTypes
//Dependency: NMSString0x10
struct GcBackgroundSpaceEncounterSpawnConditions
{
	NMS::NMSString0x10 NeedsMissionActive;
	NMS_GameComponents::GcGalaxyStarTypes NeedsStarType;
	bool NeedsAbandonedSystem;
	bool NeedsAsteroidField;
	bool NeedsEmptySystem;
	bool NeedsNearbyCorruptWorld;
	bool NeedsPirateSystem;
	bool UseStarType;
};

//Dependency: GcPulseEncounterSpawnObject
//Dependency: GcBackgroundSpaceEncounterSpawnConditions
//Dependency: NMSString0x10
struct GcBackgroundSpaceEncounterInfo
{
	NMS_GameComponents::GcPulseEncounterSpawnObject Encounter;
	NMS_GameComponents::GcBackgroundSpaceEncounterSpawnConditions SpawnConditions;
	NMS::NMSString0x10 Id;
	float DespawnDistance;
	float MinDuration;
	float SelectionWeighting;
	float SpawnChance;
	float SpawnDistance;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceDetailMessagePoint
{
	enum class PointStateEnum : uint32_t
	{
		Statement = 0,
		ObjectiveIncomplete = 1,
		ObjectiveComplete = 2,
	};

	NMS::NMSString0x20A Text;
	NMS::NMSString0x10 InsertItemName;
	NMS_GameComponents::GcMissionSequenceDetailMessagePoint::PointStateEnum PointState;
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerTitle
{
	NMS::NMSString0x20A AlreadyUnlockedDescription;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A UnlockDescription;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RevealedBy;
	std::vector<NMS::NMSString0x10> TitleUnlocksSpecials;
	NMS::NMSString0x10 UnlockedByMission;
	NMS::NMSString0x10 UnlockedByProductRecipe;
	NMS::NMSString0x10 UnlockedByStat;
	NMS::NMSString0x10 UnlockedByTrophy;
	NMS_GameComponents::GcInteractionType UnlockedByInteraction;
	int32_t UnlockedByInteractionIndex;
	NMS_GameComponents::GcAlienRace UnlockedByInteractionRace;
	int32_t UnlockedByLeveledStatRank;
	float UnlockedByStatValue;
	bool UnlockedByInteractionOnlyTestMainRaces;
};

//Dependency: NMSString0x10
struct GcCreatureGroupProbability
{
	NMS::NMSString0x10 Group;
	float Probability;
};

struct GcEnvironmentProperties
{
	float SkyHeight[5];
	float AsteroidFadeHeightMax;
	float AsteroidFadeHeightMin;
	float AtmosphereEndHeight;
	float AtmosphereStartHeight;
	float CloudHeightMax;
	float CloudHeightMin;
	float FlightFogBlend;
	float FlightFogHeight;
	float HeavyAirHeightMax;
	float HeavyAirHeightMin;
	float HorizonBlendHeight;
	float HorizonBlendLength;
	float PlanetLodSwitch0;
	float PlanetLodSwitch0Elevation;
	float PlanetLodSwitch1;
	float PlanetLodSwitch2;
	float PlanetLodSwitch3;
	float PlanetObjectSwitch;
	float SkyAtmosphereHeight;
	float SkyColourBlendLength;
	float SkyColourHeight;
	float SkyPositionBlendLength;
	float SkyPositionHeight;
	float SolarSystemLUTBlendLength;
	float SolarSystemLUTHeight;
	float StratosphereHeight;
};

//Dependency: NMSString0x10
struct GcBaitData
{
	NMS::NMSString0x10 ProductID;
	float RarityBoosts[5];
	float SizeBoosts[4];
	float DayTimeBoost;
	float NightTimeBoost;
	float StormBoost;
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForRefuel
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;
};

struct GcMissionConditionHasGrave
{
};

//Dependency: GcBaitData
struct GcBaitTable
{
	std::vector<NMS_GameComponents::GcBaitData> Bait;
};

struct GcBaseAutoPowerSetting
{
	enum class BaseAutoPowerSettingEnum : uint32_t
	{
		UseDefault = 0,
		ForceDisabled = 1,
		ForceEnabled = 2,
	};

	NMS_GameComponents::GcBaseAutoPowerSetting::BaseAutoPowerSettingEnum BaseAutoPowerSetting;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkResourceFilterData
{
	std::vector<NMS::NMSString0x20A> FilteredResources;
	NMS::NMSString0x10 FilterName;
};

//Dependency: TkResourceFilterData
struct TkResourceFilterList
{
	std::vector<NMS_Toolkit::TkResourceFilterData> Filters;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcCreatureEggComponentData
{
	NMS::NMSString0x10 Id;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcFontTableEntry
{
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 Id;
	NMS::VariableSizeString LargeOverrideFilename;
	NMS::VariableSizeString VROverrideFilename;
	float Spacing;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLanguages
{
	enum class LanguageEnum : uint32_t
	{
		Default = 0,
		English = 1,
		USEnglish = 2,
		French = 3,
		Italian = 4,
		German = 5,
		Spanish = 6,
		Russian = 7,
		Polish = 8,
		Dutch = 9,
		Portuguese = 10,
		LatinAmericanSpanish = 11,
		BrazilianPortuguese = 12,
		Japanese = 13,
		TraditionalChinese = 14,
		SimplifiedChinese = 15,
		TencentChinese = 16,
		Korean = 17,
	};

	NMS_Toolkit::TkLanguages::LanguageEnum Language;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcFontTableEntry
//Dependency: TkLanguages
struct GcFontTable
{
	std::vector<NMS_GameComponents::GcFontTableEntry> Fonts;
	NMS_Toolkit::TkLanguages Language;
};

//Dependency: GcFontTable
struct GcLanguageFontTable
{
	std::vector<NMS_GameComponents::GcFontTable> Table;
};

//Dependency: NMSString0x10
struct GcVehicleWeaponMuzzleData
{
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 MuzzleFlashEffect;
};

//Dependency: GcBaseBuildingEntryCosts
struct GcBaseBuildingCostsTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingEntryCosts> ObjectCosts;
};

struct GcBaseBuildingObjectDecorationTypes
{
	enum class BaseBuildingDecorationTypeEnum : uint32_t
	{
		Normal = 0,
		SurfaceNormal = 1,
		Ceiling = 2,
		Terrain = 3,
		Substance = 4,
		Plant = 5,
		BuildingSurfaceNormal = 6,
		WaterSurface = 7,
	};

	NMS_GameComponents::GcBaseBuildingObjectDecorationTypes::BaseBuildingDecorationTypeEnum BaseBuildingDecorationType;
};

//Dependency: GcBaseLinkGridData
//Dependency: GcBaseBuildingEntryGroup
//Dependency: GcBiomeType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcBaseBuildingObjectDecorationTypes
//Dependency: GcBaseBuildingPartStyle
//Dependency: TkModelResource
struct GcBaseBuildingEntry
{
	enum class BaseTerrainEditShapeEnum : uint32_t
	{
		Cube = 0,
		Cylinder = 1,
	};

	NMS_GameComponents::GcBaseLinkGridData LinkGridData;
	NMS::NMSString0x20A ColourPaletteGroupId;
	NMS::NMSString0x20A DefaultColourPaletteId;
	NMS::NMSString0x20A DefaultMaterialId;
	NMS::NMSString0x20A DescriptorID;
	NMS::NMSString0x20A MaterialGroupId;
	NMS_Toolkit::TkModelResource NPCInteractionScene;
	NMS_Toolkit::TkModelResource PlacementScene;
	NMS::NMSString0x20A SinglePartID;
	std::vector<NMS::NMSString0x10> CompositePartObjectIDs;
	std::vector<NMS::NMSString0x10> FamilyIDs;
	NMS::NMSString0x10 FossilDisplayID;
	std::vector<NMS_GameComponents::GcBaseBuildingEntryGroup> Groups;
	NMS::NMSString0x10 IconOverrideProductID;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 ModularCustomisationBaseID;
	NMS::NMSString0x10 OverrideProductID;
	NMS_GameComponents::GcBaseBuildingEntry::BaseTerrainEditShapeEnum BaseTerrainEditShape;
	NMS_GameComponents::GcBiomeType Biome;
	float BuildEffectAccelerator;
	NMS_GameComponents::GcBaseBuildingObjectDecorationTypes DecorationType;
	int32_t FreighterBaseLimit;
	int32_t GhostsCountOverride;
	float MinimumDeleteDistance;
	int32_t PlanetBaseLimit;
	int32_t PlanetLimit;
	int32_t RegionLimit;
	int32_t RegionSpawnLOD;
	float SnappingDistanceOverride;
	int32_t StorageContainerIndex;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
	bool BuildableAboveWater;
	bool BuildableInShip;
	bool BuildableOnFreighter;
	bool BuildableOnPlanet;
	bool BuildableOnPlanetBase;
	bool BuildableOnPlanetWithProduct;
	bool BuildableOnSpaceBase;
	bool BuildableUnderwater;
	bool CanChangeColour;
	bool CanChangeMaterial;
	bool CanPickUp;
	bool CanRotate3D;
	bool CanScale;
	bool CanStack;
	bool CheckPlaceholderCollision;
	bool CheckPlayerCollision;
	bool CloseMenuAfterBuild;
	bool EditsTerrain;
	bool HasDescriptor;
	bool IsDecoration;
	bool IsFromModFolder;
	bool IsModularCustomisation;
	bool IsPlaceable;
	bool IsSealed;
	bool IsTemporary;
	bool RemovesAttachedDecoration;
	bool RemovesWhenUnsnapped;
	bool ShowGhosts;
	bool ShowInBuildMenu;
	bool UseProductIDOverride;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLODDistances
{
	float Distances[5];
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBaseBuildingSubGroup
{
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 Id;
};

//Dependency: GcBaseBuildingSubGroup
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBaseBuildingGroup
{
	NMS::NMSString0x20A Name;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcBaseBuildingSubGroup> SubGroups;
	int32_t DefaultColourIdx;
};

struct GcMissionFaction
{
	enum class MissionFactionEnum : uint32_t
	{
		Gek = 0,
		Korvax = 1,
		Vykeen = 2,
		TradeGuild = 3,
		WarriorGuild = 4,
		ExplorerGuild = 5,
		Nexus = 6,
		Pirates = 7,
		Builders = 8,
		None = 9,
	};

	NMS_GameComponents::GcMissionFaction::MissionFactionEnum MissionFaction;
};

//Dependency: NMSString0x10
struct GcLegacyItem
{
	NMS::NMSString0x10 ConvertID;
	NMS::NMSString0x10 ID;
	float ConvertRatio;
	bool AddNewRecipe;
	bool RemoveOldRecipe;
};

//Dependency: GcLegacyItem
struct GcLegacyItemTable
{
	std::vector<NMS_GameComponents::GcLegacyItem> Table;
};

//Dependency: GcFrigateTraitData
struct GcFrigateTraitTable
{
	std::vector<NMS_GameComponents::GcFrigateTraitData> Traits;
};

//Dependency: GcTechnologyCategory
struct GcRewardRepairTech
{
	NMS_GameComponents::GcTechnologyCategory Category;
};

//Dependency: NMSString0x10
struct GcBehaviourPlayAnimTrigger
{
	NMS::NMSString0x10 Trigger;
	int32_t Frame;
};

//Dependency: GcBehaviourPlayAnimTrigger
//Dependency: NMSString0x10
struct GcBehaviourPlayAnimData
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS_GameComponents::GcBehaviourPlayAnimTrigger> Triggers;
	float BlendInTime;
	float BlendOutAt;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcBaseBuildingMaterial
{
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A LocName;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource SwatchImage;
	int32_t MaterialIndex;
};

//Dependency: NMSString0x20
struct GcChainComponentData
{
	NMS::NMSString0x20 StartBone;
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcNGuiSpecialTextImageData
{
	NMS::NMSString0x10 Name;
	NMS::VariableSizeString Path;
	NMS::Vector2f Size;
	float HeightModifier;
	float ScaleFromFont;
	bool UseFontColour;
};

struct GcBaseBuildingMode
{
	enum class BaseBuildingModeEnum : uint32_t
	{
		Inactive = 0,
		Selection = 1,
		Placement = 2,
		Browse = 3,
		Relatives = 4,
	};

	NMS_GameComponents::GcBaseBuildingMode::BaseBuildingModeEnum BaseBuildingMode;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkSketchNodeConnections
{
	std::vector<uint32_t> Connections;
};

//Dependency: TkSketchNodeConnections
//Dependency: NMSString0x20
struct TkSketchNodeData
{
	enum class TriggerTypeEnum : uint32_t
	{
		Disabled = 0,
		Interrupt = 1,
		RunParallel = 2,
		Blocked = 3,
		QueueLatest = 4,
		QueueAll = 5,
	};

	std::vector<NMS_Toolkit::TkSketchNodeConnections> Connections;
	std::vector<int8_t> CustomData;
	int32_t PositionX;
	int32_t PositionY;
	int32_t SelectedVariant;
	NMS_Toolkit::TkSketchNodeData::TriggerTypeEnum TriggerType;
	NMS::NMSString0x20 TypeName;
};

//Dependency: VariableSizeString
struct TkMetadataFilenameList
{
	std::vector<NMS::VariableSizeString> Filenames;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcNPCNavSubgraphNodeType
//Dependency: NMSString0x10
//Dependency: Vector3f
struct GcBaseBuildingPartNavNodeData
{
	NMS::Vector3f AtDir;
	NMS::Vector3f LocalPos;
	std::vector<uint32_t> ConnectedNodeIndices;
	NMS::NMSString0x10 InteractionID;
	float ArriveDist;
	NMS_GameComponents::GcNPCNavSubgraphNodeType Type;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcBaseBuildingPartInteractionData
{
	NMS::Vector3f AtDir;
	NMS::Vector3f LocalPos;
	NMS::NMSString0x10 InteractionID;
};

//Dependency: GcBaseBuildingPartNavNodeData
//Dependency: GcBaseBuildingPartInteractionData
//Dependency: NMSString0x20A
struct GcBaseBuildingPartNavData
{
	NMS::NMSString0x20A PartID;
	std::vector<NMS_GameComponents::GcBaseBuildingPartNavNodeData> NavNodeData;
	std::vector<NMS_GameComponents::GcBaseBuildingPartInteractionData> SharedInteractions;
};

struct GcDiscoveryWorth
{
	int32_t OnScan[3];
	int32_t Record[3];
	int32_t Mission;
};

//Dependency: Colour
//Dependency: NMSString0x20A
struct GcBaseBuildingPalette
{
	enum class SwatchSecondaryColourEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Ternary = 2,
		Quaternary = 3,
	};

	enum class SwatchPrimaryColourEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Ternary = 2,
		Quaternary = 3,
	};

	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A Name;
	NMS_GameComponents::GcBaseBuildingPalette::SwatchPrimaryColourEnum SwatchPrimaryColour;
	NMS_GameComponents::GcBaseBuildingPalette::SwatchSecondaryColourEnum SwatchSecondaryColour;
};

//Dependency: GcBaseBuildingPartStyle
//Dependency: TkModelResource
struct GcBaseBuildingPartStyleModel
{
	NMS_Toolkit::TkModelResource Inactive;
	NMS_Toolkit::TkModelResource Model;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
};

//Dependency: GcBaseBuildingPartStyleModel
//Dependency: NMSString0x20A
struct GcBaseBuildingPart
{
	NMS::NMSString0x20A ID;
	std::vector<NMS_GameComponents::GcBaseBuildingPartStyleModel> StyleModels;
};

struct GcNPCTriggerTypes
{
	enum class NPCTriggerEnum : uint32_t
	{
		None = 0,
		Idle = 1,
		Greet = 2,
		Mood = 3,
		StartDead = 4,
		Talk_Start = 5,
		Talk_Stop = 6,
		Interact_Start = 7,
		Interact_Stop = 8,
		Interact_BeginHold = 9,
		Interact_CancelHold = 10,
		LookAt_Player_Start = 11,
		LookAt_Player_Stop = 12,
		SetProp = 13,
		Interact_StartFromRemote = 14,
		StartBusy = 15,
		OneShotMoodResponse = 16,
	};

	NMS_GameComponents::GcNPCTriggerTypes::NPCTriggerEnum NPCTrigger;
};

struct GcMissionConditionHasFreighter
{
	enum class FreighterInCurrentSystemEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcMissionConditionHasFreighter::FreighterInCurrentSystemEnum FreighterInCurrentSystem;
};

//Dependency: NMSString0x100
//Dependency: NMSString0x80
struct GcPresetTextureData
{
	NMS::NMSString0x100 Filename;
	NMS::NMSString0x80 Name;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcPresetTextureData
//Dependency: Colour
struct GcScratchpadGlobals
{
	std::vector<NMS_GameComponents::GcPresetTextureData> IBLMaps;
	std::vector<NMS_GameComponents::GcPresetTextureData> OverlayTextures;
	std::vector<NMS::Colour> TerrainColours;
	std::vector<NMS_GameComponents::GcPresetTextureData> TerrainTextures;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcBaseBuildingPartAudioLocationEntry
struct GcBaseBuildingPartAudioLocationTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartAudioLocationEntry> AudioLocations;
};

//Dependency: NMSString0x20A
struct GcFrigateInteractionAction
{
	enum class ActionTypeEnum : uint32_t
	{
		Repair = 0,
		UpdateDamagedComponents = 1,
		CargoPhoneCall = 2,
	};

	NMS::NMSString0x20A CommunicatorDialog;
	NMS_GameComponents::GcFrigateInteractionAction::ActionTypeEnum ActionType;
};

//Dependency: Colour
struct GcLightProperties
{
	NMS::Colour BounceColour;
	NMS::Colour LightColour;
	NMS::Colour SunColour;
};

struct GcBaseDefenceStatusType
{
	enum class BaseDefenceStatusEnum : uint32_t
	{
		AttackingTarget = 0,
		Alert = 1,
		SearchingForTarget = 2,
		Disabled = 3,
		Security = 4,
	};

	NMS_GameComponents::GcBaseDefenceStatusType::BaseDefenceStatusEnum BaseDefenceStatus;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct TkOpenVRControllerLookup
{
	NMS::VariableSizeString DeviceSpec;
	NMS::NMSString0x10 ResetVRViewLayerName;
	NMS::NMSString0x20 DeviceKeywords;
};

//Dependency: TkOpenVRControllerLookup
struct TkOpenVRControllerList
{
	std::vector<NMS_Toolkit::TkOpenVRControllerLookup> Devices;
};

struct TkBehaviourTreePriorityDecoratorData
{
	NMSTemplate Child;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcPurchaseableSpecial
{
	NMS::NMSString0x10 ID;
	int32_t MissionTier;
	int32_t ShopNumber;
	bool IsConsumable;
};

//Dependency: GcPurchaseableSpecial
struct GcPurchaseableSpecials
{
	std::vector<NMS_GameComponents::GcPurchaseableSpecial> Table;
};

//Dependency: NMSString0x10
struct GcIDPair
{
	NMS::NMSString0x10 Item1;
	NMS::NMSString0x10 Item2;
};

//Dependency: GcIDPair
//Dependency: NMSString0x20
//Dependency: GcWFCModulePrototype
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcWFCModuleSet
{
	NMS::Vector3f BlockSize;
	std::vector<NMS_GameComponents::GcIDPair> CompatibleConnectors;
	std::vector<NMS::NMSString0x20> ConnectorsOnHorizontalBoundary;
	std::vector<NMS::NMSString0x20> ConnectorsOnLowerBoundary;
	std::vector<NMS::NMSString0x20> ConnectorsOnUpperBoundary;
	std::vector<NMS::NMSString0x10> DefaultGroups;
	std::vector<NMS_GameComponents::GcWFCModulePrototype> ModulePrototypes;
	float VerticalOffset;
	NMS::NMSString0x20 Name;
	bool ApplyWallThemes;
};

//Dependency: GcSubstanceSecondary
struct GcSubstanceSecondaryBiome
{
	NMS_GameComponents::GcSubstanceSecondary SecondarySubstanceByBiome[17];
};

//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupFallbackData
{
	NMS::NMSString0x10 DescriptorGroupID;
	std::vector<NMS::NMSString0x10> FallbackPriorityList;
};

//Dependency: GcVehicleType
struct GcMissionConditionCanSummonExocraft
{
	NMS_GameComponents::GcVehicleType SummonableExocraft;
	bool SpecificExocraft;
};

//Dependency: NMSString0x10
struct GcRewardSpecificProductRecipeFromList
{
	enum class ProductListRewardOrderEnum : uint32_t
	{
		OneRandom = 0,
		InOrder = 1,
		TryAllRandom = 2,
		TryUnknownRandom = 3,
	};

	std::vector<NMS::NMSString0x10> ProductList;
	NMS_GameComponents::GcRewardSpecificProductRecipeFromList::ProductListRewardOrderEnum ProductListRewardOrder;
	bool FailIfAllKnown;
};

//Dependency: NMSString0x20A
struct GcWordGroupKnowledge
{
	NMS::NMSString0x20A Group;
	bool Races[9];
};

//Dependency: NMSString0x10
struct GcWordKnowledge
{
	NMS::NMSString0x10 Word;
	bool Races[9];
};

//Dependency: GcWordGroupKnowledge
//Dependency: GcWordKnowledge
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcKnownThingsPreset
{
	std::vector<NMS::NMSString0x10> KnownProducts;
	std::vector<NMS::NMSString0x20A> KnownRefinerRecipes;
	std::vector<NMS::NMSString0x10> KnownSpecials;
	std::vector<NMS::NMSString0x10> KnownTech;
	std::vector<NMS_GameComponents::GcWordGroupKnowledge> KnownWordGroups;
	std::vector<NMS_GameComponents::GcWordKnowledge> KnownWords;
};

//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcGalaxyMarkerSettings
{
	NMS::Colour Colours[3];
	NMS::Colour OutlineColour;
	NMS::VariableSizeString Icon;
	NMS::Vector2f IconSize;
	NMS::Vector2f TimeScaleRange;
	int32_t EdgeCount;
	float LineWidth;
	float LineWidthFade;
	float OutlineWidth;
	float RadiusBaseOffset;
	float RadiusEdge;
	float RadiusFixed;
	float RadiusMinimum;
	float RotationBase;
	float SizeScale;
	NMS::NMSString0x20 MarkerLabel;
};

//Dependency: GcBaseBuildingPartData
struct GcBaseBuildingPartsDataTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartData> PartsData;
};

struct GcChargingRequirementsDifficultyOption
{
	enum class ChargingRequirementsDifficultyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcChargingRequirementsDifficultyOption::ChargingRequirementsDifficultyEnum ChargingRequirementsDifficulty;
};

//Dependency: GcBaseBuildingPartNavData
struct GcBaseBuildingPartsNavDataTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPartNavData> Parts;
};

struct GcNGuiStyleAnimationKeyframeData
{
	std::vector<NMSTemplate> StyleProperties;
	float Position;
};

//Dependency: GcNGuiStyleAnimationKeyframeData
struct GcNGuiStyleAnimationData
{
	std::vector<NMS_GameComponents::GcNGuiStyleAnimationKeyframeData> KeyFrames;
	float Length;
	bool AnimateByDefault;
	bool Loop;
};

struct GcStatusMessageMissionMarkup
{
	enum class MissionMarkupEnum : uint32_t
	{
		KillFiend = 0,
		KillPirate = 1,
		KillSentinel = 2,
		KillHazardousPlants = 3,
		KillTraders = 4,
		KillCreatures = 5,
		KillPredators = 6,
		KillDepot = 7,
		KillWorms = 8,
		KillSpookSquids = 9,
		FeedCreature = 10,
		CollectBones = 11,
		CollectScrap = 12,
		Discover = 13,
		CollectSubstanceProduct = 14,
		Build = 15,
		Always = 16,
		None = 17,
	};

	NMS_GameComponents::GcStatusMessageMissionMarkup::MissionMarkupEnum MissionMarkup;
};

//Dependency: GcMissionConditionTest
//Dependency: GcStatusMessageMissionMarkup
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForConditions
{
	NMS::NMSString0x20A ForceAllowMissionRestartEvent;
	std::vector<NMSTemplate> Conditions;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	NMS_GameComponents::GcStatusMessageMissionMarkup StatusMessageMissionMarkup;
	bool AllowedToFormatObjectives;
	bool ForceAllowMissionRestart;
};

struct GcMechTargetSelectionWeightingSettings
{
	float CloseDistance;
	float CloseDistanceWeightFactorExponent;
	float DistanceWeightFactorBase;
	float FarDistance;
	float FarDistanceWeightFactorExponent;
	float FwdDirectionWeightFactorBase;
	float MidDistance;
	float MidDistanceWeightFactorExponent;
	float ThreatWeightFactorBase;
	float VeryCloseDistance;
	float VeryCloseDistanceWeightFactorExponent;
	float VeryFarDistanceWeightFactorExponent;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcOutpostLSystemPair
{
	NMS::VariableSizeString LSystems[9];
	NMS::NMSString0x20 Locator;
};

struct GcGenericMissionVersionProgress
{
	int32_t Progress;
	int32_t Version;
};

//Dependency: GcGenericMissionVersionProgress
struct GcGenericMissionStage
{
	NMSTemplate Stage;
	std::vector<NMS_GameComponents::GcGenericMissionVersionProgress> Versions;
};

//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcGasGiantAtmosphereSetting
{
	NMS::Colour DiscoveryPlanetColour;
	NMS::NMSString0x10 AtmosphereID;
	NMS::VariableSizeString GradientMapResource;
};

//Dependency: GcGasGiantAtmosphereSetting
//Dependency: VariableSizeString
struct GcGasGiantAtmosphereSettingsList
{
	std::vector<NMS::VariableSizeString> LookUps;
	std::vector<NMS::VariableSizeString> Normals;
	std::vector<NMS_GameComponents::GcGasGiantAtmosphereSetting> Settings;
};

//Dependency: GcBaseBuildingPart
struct GcBaseBuildingPartsTable
{
	std::vector<NMS_GameComponents::GcBaseBuildingPart> Parts;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementGiftDetails
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 Reward;
};

//Dependency: NMSString0x10
struct GcBaseBuildingProperties
{
	NMS::NMSString0x10 DefaultInBaseObject;
	NMS::NMSString0x10 DefaultInFreighterObject;
	NMS::NMSString0x10 DefaultOnTerrainObject;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkGraphicsDetailTypes
{
	enum class GraphicDetailEnum : uint32_t
	{
		Low = 0,
		Medium = 1,
		High = 2,
		Ultra = 3,
	};

	NMS_Toolkit::TkGraphicsDetailTypes::GraphicDetailEnum GraphicDetail;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkGraphicsDetailTypes
struct GcBaseBuildingSettingsAction
{
	enum class UseCorePartsOnlyEnum : uint32_t
	{
		False = 0,
		True = 1,
		DontCare = 2,
	};

	NMS_Toolkit::TkGraphicsDetailTypes MaxAffectedDetail;
	NMS_GameComponents::GcBaseBuildingSettingsAction::UseCorePartsOnlyEnum UseCorePartsOnly;
};

struct GcBehaviourLegacyData
{
	enum class LegacyBehaviourEnum : uint32_t
	{
		Riding = 0,
		Interaction = 1,
		Attracted = 2,
		Flee = 3,
		Defend = 4,
		FollowPlayer = 5,
		AvoidPlayer = 6,
		NoticePlayer = 7,
		FollowRoutine = 8,
	};

	NMS_GameComponents::GcBehaviourLegacyData::LegacyBehaviourEnum LegacyBehaviour;
};

struct GcSpawnedObjectComponentData
{
	bool CanBeTeleported;
};

//Dependency: NMSString0x20A
struct GcId256List
{
	NMS::NMSString0x20A Id;
	std::vector<NMS::NMSString0x20A> IdList;
};

//Dependency: GcBaseBuildingPalette
//Dependency: TkMaterialResource
//Dependency: GcBaseBuildingGroup
//Dependency: GcBaseBuildingMaterial
//Dependency: GcId256List
//Dependency: GcBaseBuildingProperties
//Dependency: GcBaseBuildingFamily
//Dependency: GcBaseBuildingEntry
//Dependency: TkModelResource
struct GcBaseBuildingTable
{
	NMS_GameComponents::GcBaseBuildingGroup RelativesTabSetupData;
	NMS_GameComponents::GcBaseBuildingProperties Properties;
	NMS_Toolkit::TkModelResource GhostHeart;
	NMS_Toolkit::TkModelResource GhostHeartSelected;
	NMS_Toolkit::TkModelResource LegModel;
	NMS_Toolkit::TkModelResource RotateScaleGizmo;
	NMS_Toolkit::TkModelResource WiringFirefly;
	NMS_Toolkit::TkModelResource WiringSnapPoint;
	NMS_Toolkit::TkModelResource WiringSnapSelected;
	NMS_Toolkit::TkMaterialResource BuildEffectMaterial;
	std::vector<NMS_GameComponents::GcBaseBuildingFamily> Families;
	std::vector<NMS_GameComponents::GcBaseBuildingGroup> Groups;
	std::vector<NMS_GameComponents::GcId256List> MaterialGroups;
	std::vector<NMS_GameComponents::GcBaseBuildingMaterial> Materials;
	std::vector<NMS_GameComponents::GcBaseBuildingEntry> Objects;
	std::vector<NMS_GameComponents::GcId256List> PaletteGroups;
	std::vector<NMS_GameComponents::GcBaseBuildingPalette> Palettes;
};

struct GcPlanetaryBuildingRestrictions
{
	bool RequiresCorruptSentinels;
	bool RequiresRelicWorld;
	bool RequiresWater;
};

//Dependency: GcPlanetaryBuildingRestrictions
//Dependency: TkNoiseFlattenOptions
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBuildingDefinitionData
{
	NMS::Vector3f AABBOverrideMax;
	NMS::Vector3f AABBOverrideMin;
	NMS::NMSString0x20A TextureNameHint;
	NMS::NMSString0x10 ClusterLayout;
	float Density[8];
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	float ClusterSpacing;
	float MaxHeight;
	float MinHeight;
	int32_t NumModelsToGenerate;
	int32_t NumOverridesToGenerate;
	int32_t NumOverridesToGenerateWaterworlds;
	float OverrideRadius;
	NMS_GameComponents::GcPlanetaryBuildingRestrictions PlanetRestrictions;
	bool EnabledWhenPlanetHasNoNPCs;
	bool GivesShelter;
	bool IgnoreParticlesInAABB;
};

//Dependency: GcBuildingClassification
struct GcBuildingClusterLayoutEntry
{
	NMS_GameComponents::GcBuildingClassification Building;
	int32_t Max;
	int32_t Min;
	float Probability;
	bool FacesCentre;
};

//Dependency: GcBuildingClusterLayoutEntry
//Dependency: NMSString0x10
struct GcBuildingClusterLayout
{
	std::vector<NMS_GameComponents::GcBuildingClusterLayoutEntry> ClusterBuildings;
	NMS::NMSString0x10 ID;
	float AlignmentJitter;
	int32_t AlignmentSteps;
	float RelativeProbability;
};

//Dependency: GcBuildingDefinitionData
//Dependency: GcBuildingFilenameList
//Dependency: GcBuildingClusterLayout
struct GcBuildingDefinitionTable
{
	NMS_GameComponents::GcBuildingDefinitionData BuildingPlacement[60];
	NMS_GameComponents::GcBuildingFilenameList BuildingFiles[9];
	std::vector<NMS_GameComponents::GcBuildingClusterLayout> ClusterLayouts;
};

struct GcFiendCrime
{
	enum class FiendCrimeEnum : uint32_t
	{
		None = 0,
		EggDamaged = 1,
		EggDestroyed = 2,
		EggCollected = 3,
		UnderwaterPropDamaged = 4,
		UnderwaterPropCollected = 5,
		RockTransform = 6,
		GroundPropDamage = 7,
		ShotWorm = 8,
		Carnage = 9,
		FishCarnage = 10,
		Bugs = 11,
		JellyBoss = 12,
	};

	NMS_GameComponents::GcFiendCrime::FiendCrimeEnum FiendCrime;
};

//Dependency: GcFiendCrime
struct GcFiendCrimeAction
{
	float FiendCrimeModifier;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;
};

//Dependency: GcCreatureHoverTintableEffect
//Dependency: NMSString0x20A
//Dependency: NMSString0x100
struct GcCreatureHoverMovementDataParams
{
	std::vector<NMS_GameComponents::GcCreatureHoverTintableEffect> TintableEffects;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float ElevationAvoidStrength;
	float GroundAlignTimeModifier;
	float GroundEffectHeightForMaxAlpha;
	float GroundEffectHeightForMinAlpha;
	float GroundHeightOffset;
	float HeightForMaxElevationAvoid;
	float HeightForMaxGroundAlign;
	float HeightForMaxGroundAvoid;
	float HeightForMinElevationAvoid;
	float HeightForMinGroundAlign;
	float HeightForMinGroundAvoid;
	float NavOffsetY;
	float NavOffsetZ;
	float RayCastDown;
	float RayCastUp;
	NMS::NMSString0x100 GroundEffect;
	bool CanJump;
	bool ElevationAvoid;
	bool GroundAlign;
	bool GroundAvoid;
};

//Dependency: GcCreatureHoverMovementDataParams
struct GcCreatureHoverMovementData
{
	std::vector<NMS_GameComponents::GcCreatureHoverMovementDataParams> Params;
};

//Dependency: NMSString0x10
struct GcBaseDefenceTrigger
{
	NMS::NMSString0x10 LaserEffectId;
	NMS::NMSString0x10 PerceptionId;
	bool ActiveWhenIdle;
	bool ActiveWhenSearching;
	bool ActiveWhenTargetAcquired;
};

//Dependency: GcBaseDefenceTrigger
struct GcBaseDefenceComponentData
{
	std::vector<NMS_GameComponents::GcBaseDefenceTrigger> Triggers;
	float LaserRangeAnimateTime;
	float LostUncertaintyThreshold;
	float SearchTime;
	bool PrioritiseThreats;
};

//Dependency: Colour
struct GcSpaceSkyColours
{
	NMS::Colour CloudColour;
	NMS::Colour ColourBottom;
	NMS::Colour ColourBottomPlanet;
	NMS::Colour ColourMid;
	NMS::Colour ColourMidPlanet;
	NMS::Colour ColourTop;
	NMS::Colour ColourTopPlanet;
	NMS::Colour FogColour;
	NMS::Colour FogColour2;
	NMS::Colour NebulaColour1;
	NMS::Colour NebulaColour2;
	NMS::Colour NebulaColour3;
	NMS::Colour NebulaShadowColour;
	NMS::Colour SunColour;
};

//Dependency: GcBaseDefenceStatusType
struct GcBaseDefenceStatusAction
{
	NMS_GameComponents::GcBaseDefenceStatusType TryState;
};

//Dependency: NMSString0x10
struct GcSentinelDamagedData
{
	NMS::NMSString0x10 DamageEffect;
	NMS::NMSString0x10 DamageType;
	NMS::NMSString0x10 SelfDestructEffect;
	float DamageEffectHealthPercentThreshold;
	float RangeTrigger;
	float TimeTrigger;
	bool CanSelfDestruct;
	bool UseDamageEffect;
};

//Dependency: GcCharacterCustomisationData
//Dependency: NMSString0x10
struct GcCustomisationPreset
{
	NMS_GameComponents::GcCharacterCustomisationData Data;
	NMS::NMSString0x10 Name;
};

struct GcSettlementWeaponRespawnData
{
	uint64_t InteractionSeed;
	uint64_t LastWeaponRefreshTimestamp;
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: TkBlackboardComparisonTypeEnum
//Dependency: NMSString0x10
struct GcBlackboardFloatCompareDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat CompareTo;
	NMS::NMSString0x10 Key;
	NMSTemplate OnFalse;
	NMSTemplate OnTrue;
	NMS_Toolkit::TkBlackboardComparisonTypeEnum CompareBlackboardValueType;
};

//Dependency: GcFishingRodData
//Dependency: VariableSizeString
struct GcFishingRodTable
{
	NMS::VariableSizeString FishingRodResource;
	std::vector<NMS_GameComponents::GcFishingRodData> FishingRods;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStatSeasonal
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Amount;
	bool EncouragesFighting;
	bool TakeAmountFromSeasonalData;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkAudioIDArray
{
	std::vector<NMS::NMSString0x80> Array;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x100
struct GcCreaturePetPartHider
{
	std::vector<NMS::NMSString0x20A> PartName;
	NMS::NMSString0x100 AccessorySlot;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcRewardDisguisedProduct
{
	NMS::NMSString0x10 AwardDisplayIDDuringMission;
	NMS::NMSString0x10 DisplayAs;
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool UseDisplayIDWhenInShip;
};

struct GcNPCNavSubgraphNodeTypeConnectivity
{
	float ConnectionToPOI;
	float ExternalConnection;
	float InternalConnection;
	float PathToPOI;
};

//Dependency: GcBuildingClassification
struct GcRewardBeginSettlementBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> ValidBuildings;
	bool IsUpgrade;
};

struct GcItemFilterMatchIDType
{
	enum class MatchItemIDTypeEnum : uint32_t
	{
		Exact = 0,
		Prefix = 1,
		Postfix = 2,
	};

	NMS_GameComponents::GcItemFilterMatchIDType::MatchItemIDTypeEnum MatchItemIDType;
};

struct GcPhotoPlant
{
	enum class PhotoPlantTypeEnum : uint32_t
	{
		Sodium = 0,
		Oxygen = 1,
		BluePlant = 2,
	};

	NMS_GameComponents::GcPhotoPlant::PhotoPlantTypeEnum PhotoPlantType;
};

//Dependency: TkCurveType
struct GcDiscoveryTrimScoringRules
{
	float MaxScoreValue;
	float MinScoreValue;
	NMS_Toolkit::TkCurveType Curve;
};

//Dependency: NMSString0x10
struct GcItemShopAvailabilityDifficultyOptionData
{
	std::vector<NMS::NMSString0x10> NeverSoldItems;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreaturePetAccessorySlot
{
	NMS::NMSString0x10 AccessoryGroup;
	NMS::NMSString0x100 AttachLocator;
};

//Dependency: GcCreaturePetAccessorySlot
//Dependency: NMSString0x20A
struct GcCreaturePetAccessory
{
	NMS::NMSString0x20A RequiredDescriptor;
	std::vector<NMS::NMSString0x20A> HideParts;
	std::vector<NMS_GameComponents::GcCreaturePetAccessorySlot> Slots;
};

//Dependency: NMSString0x10
struct GcBaseMiniPortalComponentData
{
	enum class DestinationSortTypeEnum : uint32_t
	{
		NearestPotal = 0,
		BaseBuildingConnection = 1,
		AbandonedFreighter = 2,
		PortalNearestPlayerShip = 3,
	};

	NMS::NMSString0x10 DestinationGroupID;
	NMS::NMSString0x10 GroupID;
	NMS_GameComponents::GcBaseMiniPortalComponentData::DestinationSortTypeEnum DestinationSortType;
	int32_t PowerCost;
	float SnapFacingAngle;
	bool AllowSpawnedObjects;
	bool AllowVehicles;
	bool DoPlayerEffects;
	bool FlipFacingDirection;
	bool SnapFacingDirection;
	bool TeleportCamera;
};

//Dependency: VariableSizeString
struct GcBaseObjectDescriptorComponentData
{
	NMS::VariableSizeString ProcSceneFile;
	bool ForceShowPickUpLabel;
};

struct GcMissionConditionCameraControlStealing
{
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct GcBasePlacementRule
{
	enum class TwinCriteriaEnum : uint32_t
	{
		None = 0,
		MoveToTwin = 1,
		StretchToTwin = 2,
		StretchToRaycast = 3,
		MoveToTwinRelative = 4,
	};

	NMS::NMSString0x20A PartID;
	std::vector<NMSTemplate> Conditions;
	NMS_GameComponents::GcBasePlacementRule::TwinCriteriaEnum TwinCriteria;
	NMS::NMSString0x80 PositionLocator;
	bool ORConditions;
};

//Dependency: GcBasePlacementRule
struct GcBasePlacementComponentData
{
	std::vector<NMS_GameComponents::GcBasePlacementRule> Rules;
};

//Dependency: GcBiomeFileListOption
struct GcBiomeFileListOptions
{
	std::vector<NMS_GameComponents::GcBiomeFileListOption> FileOptions;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimPoseBabyModifier
{
	NMS::NMSString0x10 Item;
	float Value;
	float Weight;
};

//Dependency: NMSString0x10
struct TkAnimPoseCorrelationData
{
	NMS::NMSString0x10 ItemA;
	NMS::NMSString0x10 ItemB;
	float Correlation;
};

//Dependency: NMSString0x10
struct TkAnimPoseExampleElement
{
	NMS::NMSString0x10 Anim;
	float Value;
};

//Dependency: TkAnimPoseExampleElement
struct TkAnimPoseExampleData
{
	std::vector<NMS_Toolkit::TkAnimPoseExampleElement> Elements;
};

//Dependency: TkAnimPoseBabyModifier
//Dependency: TkAnimPoseCorrelationData
//Dependency: TkAnimPoseExampleData
//Dependency: TkAnimPoseData
//Dependency: VariableSizeString
struct TkAnimPoseComponentData
{
	std::vector<NMS_Toolkit::TkAnimPoseBabyModifier> BabyModifiers;
	std::vector<float> CorrelationMat;
	std::vector<NMS_Toolkit::TkAnimPoseCorrelationData> Correlations;
	std::vector<NMS_Toolkit::TkAnimPoseExampleData> Examples;
	NMS::VariableSizeString Filename;
	std::vector<NMS_Toolkit::TkAnimPoseData> PoseAnims;
	float AdultCorrelationValue;
	bool DisableForAnimOverrides;
	bool ShouldRandomise;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcInputActions
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct GcInputActionInfo
{
	enum class InputActionInfoFlagsEnum : uint32_t
	{
		None = 0,
		HideInControlsPage = 1,
		HideInMenusMenu = 2,
		OnlyVR = 4,
	};

	NMS::NMSString0x20A ConsoleLocTag;
	NMS::NMSString0x20A LocTag;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS::VariableSizeString VirtualButtonIcon;
	NMS_GameComponents::GcInputActionInfo::InputActionInfoFlagsEnum InputActionInfoFlags;
	NMS_GameComponents::GcInputActions Pairing;
	NMS::NMSString0x80 TextTag;
	NMS::NMSString0x20 ExternalDigitalAliasId;
	NMS::NMSString0x20 ExternalId;
	NMS::NMSString0x20 ExternalLoc;
	bool Analogue;
};

//Dependency: GcInputActionInfo
struct GcInputActionInfoMap
{
	NMS_GameComponents::GcInputActionInfo ActionMap[291];
};

struct GcCreaturePetMood
{
	enum class PetMoodEnum : uint32_t
	{
		Hungry = 0,
		Lonely = 1,
	};

	NMS_GameComponents::GcCreaturePetMood::PetMoodEnum PetMood;
};

struct GcBaseSnapState
{
	enum class SnapStateEnum : uint32_t
	{
		IsSnapped = 0,
		NotSnapped = 1,
	};

	NMS_GameComponents::GcBaseSnapState::SnapStateEnum SnapState;
};

//Dependency: NMSString0x10
struct GcShipAIPlanetPatrolData
{
	NMS::NMSString0x10 Squad;
	float AlignForce;
	float AlongPathForce;
	float BrakeForce;
	float PathOffset;
	float PathSpeed;
	float PlayerFalloff;
	float PlayerOffset;
	float ToPathForce;
	float WaypointDistance;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationBoneScales
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<float> Positions;
	NMS::NMSString0x10 ScaleBoneName;
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationColourGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 GroupID;
	NMS_Toolkit::TkPaletteTexture Palette;
	bool HiddenForFirstOption;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationTextureGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 TextureOptionGroup;
};

//Dependency: GcCustomisationBoneScales
//Dependency: GcCustomisationColourGroup
//Dependency: GcCustomisationTextureGroup
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCustomisationDescriptorGroupOption
{
	std::vector<NMS_GameComponents::GcCustomisationBoneScales> BoneScales;
	std::vector<NMS_GameComponents::GcCustomisationColourGroup> ColourGroups;
	NMS::NMSString0x10 DescriptorOption;
	std::vector<NMS::NMSString0x10> HideIfGroupActive;
	std::vector<NMS::NMSString0x10> SelectingAddsGroup;
	std::vector<NMS::NMSString0x10> SelectingRemovesGroup;
	std::vector<NMS_GameComponents::GcCustomisationTextureGroup> TextureGroups;
	std::vector<NMS::NMSString0x10> UnselectingAddsGroup;
	std::vector<NMS::NMSString0x10> UnselectingRemovesGroup;
	int32_t InteractionCameraIndexOverride;
	NMS::NMSString0x20 InteracttionCameraFocusJointOverride;
	bool ForceDisableDoF;
	bool ReplaceBaseBoneScales;
	bool ReplaceBaseColours;
};

//Dependency: GcCustomisationDescriptorGroupOption
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupOptions
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupOption> DescriptorGroupOptions;
	std::vector<NMS::NMSString0x10> PrerequisiteGroup;
	bool FirstOptionIsEmpty;
};

//Dependency: NMSString0x20
struct GcCustomisationCameraData
{
	int32_t InteractionCameraIndex;
	float MaxPitch;
	float MaxYaw;
	float MinPitch;
	float MinYaw;
	NMS::NMSString0x20 InteracttionCameraFocusJoint;
};

//Dependency: GcCustomisationBoneScales
//Dependency: GcCustomisationColourGroup
//Dependency: GcCustomisationDescriptorGroupOptions
//Dependency: GcCustomisationTextureGroup
//Dependency: GcCustomisationCameraData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationGroup
{
	NMS::NMSString0x20A GroupTitle;
	std::vector<NMS_GameComponents::GcCustomisationBoneScales> BoneScales;
	std::vector<NMS_GameComponents::GcCustomisationColourGroup> ColourGroups;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupOptions> DescriptorOptions;
	NMS::NMSString0x10 GroupID;
	std::vector<NMS_GameComponents::GcCustomisationTextureGroup> TextureGroups;
	NMS_GameComponents::GcCustomisationCameraData CameraData;
	bool ForceShowAllColourOptions;
	bool IsBannerGroup;
};

//Dependency: GcCustomisationGroup
struct GcCustomisationGroups
{
	std::vector<NMS_GameComponents::GcCustomisationGroup> CustomisationGroups;
};

//Dependency: GcCustomisationGroup
//Dependency: NMSString0x10
struct GcCustomisationRace
{
	std::vector<NMS_GameComponents::GcCustomisationGroup> CustomisationGroups;
	NMS::NMSString0x10 DescriptorGroupOption;
	std::vector<NMS::NMSString0x10> Presets;
	float Scale;
	bool IsGek;
};

//Dependency: GcCustomisationGroups
//Dependency: GcCustomisationRace
//Dependency: GcCustomisationCameraData
struct GcCustomisationUI
{
	NMS_GameComponents::GcCustomisationGroups Common;
	std::vector<NMS_GameComponents::GcCustomisationRace> Races;
	NMS_GameComponents::GcCustomisationCameraData RacesCameraData;
};

//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkEqualityEnum
//Dependency: NMSString0x20A
struct GcCostDifficultySpaceCombat
{
	NMS::NMSString0x20A CostStringCantAfford;
	NMS_GameComponents::GcCombatTimerDifficultyOption SpaceCombatTimers;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: NMSString0x10
struct GcShipAIAttackData
{
	NMS::NMSString0x10 Id;
	float AttackAngle;
	float AttackApproachMaxRange;
	float AttackApproachMinRange;
	float AttackApproachOffset;
	float AttackBoostAngle;
	float AttackBoostRange;
	float AttackBoostTimeToRange;
	float AttackFlybyOffset;
	float AttackMaxPlanetHeight;
	float AttackMaxTime;
	float AttackReadyTime;
	float AttackShootTimeMax;
	float AttackShootTimeMin;
	float AttackShootWaitTime;
	float AttackTargetMaxRange;
	float AttackTargetMinRange;
	float AttackTargetOffsetMax;
	float AttackTargetOffsetMin;
	float AttackTargetSwitchTargetTime;
	float AttackTooCloseRange;
	float AttackTurnMaxMinTime;
	float AttackTurnMaxTimeRange;
	float AttackTurnMultiplier;
	float AttackTurnMultiplierMax;
	float AttackWeaponRange;
	float FleeBoost;
	float FleeBrake;
	float FleeBrakeTime;
	float FleeMaxTime;
	float FleeMinTime;
	float FleeRange;
	float FleeRepositionAngleMax;
	float FleeRepositionAngleMin;
	float FleeRepositionTime;
	float FleeRepositionUrgentAngleMax;
	float FleeRepositionUrgentAngleMin;
	float FleeRepositionUrgentTime;
	float FleeUrgentBoost;
	float FleeUrgentBrake;
	float FleeUrgentBrakeTime;
	float FleeUrgentRange;
	float GunDispersionAngle;
	float GunFireRate;
	float LaserHealthPoint;
	int32_t NumHitsBeforeBail;
	int32_t NumHitsBeforeReposition;
	float PlanetFleeHeightExtra;
};

struct GcBeenShotEvent
{
	enum class ShotByEnum : uint32_t
	{
		Player = 0,
		Anything = 1,
		PlayerOrRemotePlayer = 2,
	};

	int32_t DamageThreshold;
	float HealthThreshold;
	NMS_GameComponents::GcBeenShotEvent::ShotByEnum ShotBy;
};

struct GcSkyProperties
{
	float AtmosphereThickness;
	float DayHorizonTightness;
	float DuskHorizonMultiplier;
	float HorizonFadeSpeed;
	float HorizonMultiplier;
	float NightHorizonMultiplier;
	float SunSize;
	float SunStrength;
	float SunSurroundSize;
	float SunSurroundStrength;
	float UpperSkyFadeOffset;
	float UpperSkyFadeSpeed;
};

//Dependency: GcFogProperties
//Dependency: GcSkyProperties
struct GcPlanetSkyProperties
{
	NMS_GameComponents::GcFogProperties PlanetExtremeFog;
	NMS_GameComponents::GcFogProperties PlanetFlightFog;
	NMS_GameComponents::GcFogProperties PlanetFog;
	NMS_GameComponents::GcFogProperties PlanetStormFog;
	NMS_GameComponents::GcSkyProperties PlanetSky;
};

//Dependency: NMSString0x10
struct GcBehaviourAppearData
{
	NMS::NMSString0x10 AppearAnim;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: Vector3f
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueVector
{
	NMS::Vector3f DefaultValue;
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
};

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueId
{
	NMS::NMSString0x10 BlackboardKey;
	NMS::NMSString0x10 DefaultValue;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueVector
//Dependency: TkBlackboardDefaultValueId
//Dependency: TkBlackboardDefaultValueFloat
struct GcBehaviourApplyDamageData
{
	NMS_Toolkit::TkBlackboardDefaultValueVector Offset;
	NMS_Toolkit::TkBlackboardDefaultValueId PlayerDamageType;
	NMS_Toolkit::TkBlackboardDefaultValueFloat Radius;
};

//Dependency: NMSString0x20A
struct GcObjectiveTextFormatOptions
{
	NMS::NMSString0x20A FormattableObjective;
	NMS::NMSString0x20A FormattableObjectiveTip;
	bool ObjectivesCanBeFormattedBySequences;
};

//Dependency: GcPlayerHazardType
struct GcMissionConditionHazard
{
	NMS_GameComponents::GcPlayerHazardType Hazard;
};

struct GcBehaviourCheckDeathData
{
};

//Dependency: GcAlienRace
//Dependency: NMSString0x100
//Dependency: NMSString0x20A
struct GcDisplayText
{
	enum class HUDTextDisplayTypeEnum : uint32_t
	{
		Full = 0,
		Compact = 1,
		EyeLevel = 2,
		Prompt = 3,
		Tooltip = 4,
	};

	std::vector<NMS::NMSString0x20A> ChooseRandomTextOptions;
	NMS_GameComponents::GcDisplayText::HUDTextDisplayTypeEnum HUDTextDisplayType;
	NMS_GameComponents::GcAlienRace UseAlienLanguage;
	NMS::NMSString0x100 Subtitle1;
	NMS::NMSString0x100 Subtitle2;
	NMS::NMSString0x100 Title;
};

struct GcMissionConditionTrial
{
};

//Dependency: NMSString0x10
struct GcBehaviourCooldownBeginData
{
	NMS::NMSString0x10 Key;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkBlackboardCategory
//Dependency: NMSString0x10
struct TkBlackboardDefaultValueBool
{
	NMS::NMSString0x10 BlackboardKey;
	NMS_Toolkit::TkBlackboardCategory BlackboardCategory;
	bool DefaultValue;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkBlackboardDefaultValueBool
struct GcBehaviourDetailAnimsData
{
	NMS_Toolkit::TkBlackboardDefaultValueBool CanDetail;
};

struct GcItemShopAvailabilityDifficultyOption
{
	enum class ItemShopAvailabilityDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcItemShopAvailabilityDifficultyOption::ItemShopAvailabilityDifficultyEnum ItemShopAvailabilityDifficulty;
};

//Dependency: NMSString0x10
struct GcBehaviourFaceTargetData
{
	NMS::NMSString0x10 TargetKey;
	float ArriveAngle;
};

//Dependency: NMSString0x20A
struct GcCostAnyCookedProduct
{
	NMS::NMSString0x20A CostString;
	NMS::NMSString0x20A CostStringCantAfford;
	int32_t Index;
	bool MixRandomAndBetter;
	bool PreferBetterItems;
};

struct GcDifficultySettingEditability
{
	enum class DifficultySettingEditabilityEnum : uint32_t
	{
		FullyEditable = 0,
		IncreaseOnly = 1,
		DecreaseOnly = 2,
		LockedVisible = 3,
		LockedHidden = 4,
	};

	NMS_GameComponents::GcDifficultySettingEditability::DifficultySettingEditabilityEnum DifficultySettingEditability;
};

struct GcUniqueIdComponentData
{
};

struct GcBehaviourIdleData
{
};

struct GcNPCInteractiveObjectType
{
	enum class NPCInteractiveObjectTypeEnum : uint32_t
	{
		Idle = 0,
		Generic = 1,
		Chair = 2,
		Conversation = 3,
		WatchShip = 4,
		Shop = 5,
		Dance = 6,
		None = 7,
	};

	NMS_GameComponents::GcNPCInteractiveObjectType::NPCInteractiveObjectTypeEnum NPCInteractiveObjectType;
};

//Dependency: GcNPCInteractiveObjectType
struct GcNPCSettlementBehaviourObjectTypeWeightEntry
{
	NMS_GameComponents::GcNPCInteractiveObjectType ObjectType;
	float Weight;
};

//Dependency: NMSString0x10
struct GcBehaviourIncrementCounter
{
	NMS::NMSString0x10 Key;
};

//Dependency: GcPrimaryAxis
//Dependency: NMSString0x10
struct GcCharacterRotate
{
	NMS::NMSString0x10 Input;
	float Damping;
	NMS_GameComponents::GcPrimaryAxis RotateAxis;
	float RotateTime;
};

struct GcFleetHologramComponentData
{
};

//Dependency: NMSString0x10
struct GcRewardAction
{
	NMS::NMSString0x10 Reward;
};

//Dependency: TkBlackboardDefaultValueId
//Dependency: NMSString0x40
struct GcBehaviourLaunchProjectileData
{
	NMS_Toolkit::TkBlackboardDefaultValueId Projectile;
	int32_t Amount;
	float HorizontalDispersion;
	float VerticalDispersion;
	NMS::NMSString0x40 LaunchJoint;
};

//Dependency: NMSString0x10
struct GcRoomCountRule
{
	NMS::NMSString0x10 RoomID;
	int32_t Max;
	int32_t Min;
};

//Dependency: NMSString0x20A
struct GcRewardCrashSiteFly
{
	NMS::NMSString0x20A NPCScanEvent;
};

//Dependency: TkBlackboardDefaultValueBool
//Dependency: NMSString0x10
struct GcBehaviourLookData
{
	NMS_Toolkit::TkBlackboardDefaultValueBool CanLook;
	NMS_Toolkit::TkBlackboardDefaultValueBool FocusOnTarget;
	NMS_Toolkit::TkBlackboardDefaultValueBool RelaxedLook;
	NMS::NMSString0x10 LookTargetKey;
	bool LookWhenBeyondMaxAngle;
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcBehaviourMaintainRangeFromTargetData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat MaxDist;
	NMS_Toolkit::TkBlackboardDefaultValueFloat MinDist;
	NMS::NMSString0x10 TargetKey;
	float AvoidCreaturesStrength;
	float SpeedModifier;
	bool _2D;
	bool SucceedWhenInRange;
};

//Dependency: GcMechEffect
struct GcMechEffectTable
{
	NMS_GameComponents::GcMechEffect FootDust;
	NMS_GameComponents::GcMechEffect Jetpack;
	NMS_GameComponents::GcMechEffect JetpackLaunch;
	NMS_GameComponents::GcMechEffect JetpackLaunchGroundEffect;
	NMS_GameComponents::GcMechEffect LandingImpact;
};

struct GcRewardOpenPage
{
	enum class PageToOpenEnum : uint32_t
	{
		FreighterShipTransfer = 0,
		DisplayPortalUa = 1,
		ExpeditionSelect = 2,
		TraderInventory = 3,
		ExpeditionDetails = 4,
		ExpeditionDebrief = 5,
		BuildingPartsShop = 6,
		ExocraftShop = 7,
		NexusTechShop = 8,
		ScrapDealerShop = 9,
		BuyShip = 10,
		SettlementsOverview = 11,
		SettlementManagement = 12,
		SettlerNPCDetails = 13,
		SquadronManagement = 14,
		SquadronRecruitment = 15,
		FleetManagement = 16,
		WeaponCustomisation = 17,
		FoodUnit = 18,
		CookTrade = 19,
		ArchiveManagementShip = 20,
		BoneShop = 21,
	};

	NMS_GameComponents::GcRewardOpenPage::PageToOpenEnum PageToOpen;
	bool ReinteractWhenComplete;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForCompletionMessage
{
	NMS::NMSString0x20A MessageWhenInterstellar;
	NMS::NMSString0x20A ReturnToOptionalScanEvent;
	NMS::NMSString0x10 CompletionCost;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcBehaviourMoveToTargetData
{
	enum class BehaviourMoveSpeedEnum : uint32_t
	{
		Normal = 0,
		Fast = 1,
		Dynamic = 2,
	};

	NMS_Toolkit::TkBlackboardDefaultValueFloat ArriveDist;
	NMS::NMSString0x10 TargetKey;
	float AvoidCreaturesStrength;
	NMS_GameComponents::GcBehaviourMoveToTargetData::BehaviourMoveSpeedEnum BehaviourMoveSpeed;
	float DynamicMoveSlowdownDistMul;
	float SpeedModifier;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: NMSString0x80
struct GcCustomisationDescriptorGroup
{
	NMS::NMSString0x20A Tip;
	NMS::NMSString0x20A Title;
	std::vector<NMS::NMSString0x20> Descriptors;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 LinkedSpecialID;
	std::vector<NMS::NMSString0x20> SuffixInclusionList;
	NMS::NMSString0x80 Image;
	bool HiddenInCustomiser;
};

//Dependency: GcInventoryContainer
//Dependency: GcKnownThingsPreset
struct GcDifficultyStartWithAllItemsKnownOptionData
{
	NMS_GameComponents::GcInventoryContainer InitialShipInventory;
	NMS_GameComponents::GcInventoryContainer InitialWeaponInventory;
	NMS_GameComponents::GcKnownThingsPreset InitialKnownThings;
};

//Dependency: NMSString0x10
struct GcBehaviourRegisterAttackerData
{
	NMS::NMSString0x10 TargetKey;
};

struct GcProceduralProductCategory
{
	enum class ProceduralProductCategoryEnum : uint32_t
	{
		Loot = 0,
		Document = 1,
		BioSample = 2,
		Fossil = 3,
		Plant = 4,
		Tool = 5,
		Farm = 6,
		SeaLoot = 7,
		SeaHorror = 8,
		Salvage = 9,
		Bones = 10,
		SpaceHorror = 11,
		SpaceBones = 12,
		FreighterPassword = 13,
		FreighterCaptLog = 14,
		FreighterCrewList = 15,
		FreighterTechHyp = 16,
		FreighterTechSpeed = 17,
		FreighterTechFuel = 18,
		FreighterTechTrade = 19,
		FreighterTechCombat = 20,
		FreighterTechMine = 21,
		FreighterTechExp = 22,
		DismantleBio = 23,
		DismantleTech = 24,
		DismantleData = 25,
		MessageInBottle = 26,
		ExhibitFossil = 27,
	};

	NMS_GameComponents::GcProceduralProductCategory::ProceduralProductCategoryEnum ProceduralProductCategory;
};

//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJobGiftDetails
{
	NMS::NMSString0x20A GiftItemLoc;
	std::vector<NMS::NMSString0x10> PotentialGiftItems;
	int32_t GiftAmount;
	NMS_GameComponents::GcProceduralProductCategory ProcProductType;
	bool GiveProcProduct;
	bool GiveStanding;
	bool GiveWords;
};

//Dependency: GcSettlementJobGiftDetails
//Dependency: NMSString0x20A
//Dependency: GcSettlementStatType
struct GcSettlementJobDetails
{
	NMS_GameComponents::GcSettlementJobGiftDetails Gifts;
	NMS::NMSString0x20A InTextTitle;
	NMS::NMSString0x20A PerkTitle;
	NMS_GameComponents::GcSettlementStatType Stat;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcCreatureHarvestSubstanceList
{
	NMS::NMSString0x10 CreatureType;
	NMS::NMSString0x10 Item;
	int32_t MinBlobs;
	NMS::NMSString0x80 Desc;
};

struct GcBehaviourWaitData
{
	float Seconds;
};

//Dependency: TkCurveType
struct GcCameraAerialViewData
{
	enum class AerialViewModeEnum : uint32_t
	{
		FaceDown = 0,
		FaceOut = 1,
		FaceDownThenOut = 2,
		FaceDownThenFocus = 3,
	};

	NMS_GameComponents::GcCameraAerialViewData::AerialViewModeEnum AerialViewMode;
	float Distance;
	float FocusTargetOffsetDistance;
	float LookTime;
	float PauseTime;
	float SpeedLineDist;
	float StartTime;
	float TargetOffsetAngle;
	float Time;
	float TimeBack;
	NMS_Toolkit::TkCurveType Curve;
	NMS_Toolkit::TkCurveType CurveDown;
	bool IgnoreDistanceRestrictions;
	NMS_Toolkit::TkCurveType SlerpCurve;
};

//Dependency: GcCameraAerialViewData
//Dependency: NMSString0x10
struct GcCameraAerialViewDataTableEntry
{
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcCameraAerialViewData CameraAerialViewData;
};

//Dependency: Colour
struct GcBiomeCloudSettings
{
	NMS::Colour StormCloudBottomColour;
	NMS::Colour StormCloudTopColour;
	float MaxCover;
	float MaxCoverage;
	float MaxCoverageVariance;
	float MaxRateOfChange;
	float MaxRatio;
	float MaxVariance;
	float MinCover;
	float MinCoverage;
	float MinCoverageVariance;
	float MinRateOfChange;
	float MinRatio;
	float MinVariance;
	float TendencyTowardsBeingCloudy;
};

struct GcFonts
{
	enum class FontTypeEnum : uint32_t
	{
		Body = 0,
		Title = 1,
		Console1 = 2,
		Console2 = 3,
	};

	NMS_GameComponents::GcFonts::FontTypeEnum FontType;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: TkTextureResource
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcMultiplayerGlobals
{
	NMS_Toolkit::TkTextureResource EpicMissionIcon;
	NMS_Toolkit::TkTextureResource EpicMissionIconNotSelected;
	NMS_Toolkit::TkTextureResource EpicMissionIconSelected;
	NMS::NMSString0x10 EpicMissionRewardOverride;
	NMS::NMSString0x10 EpicMissionSecondReward;
	NMS::NMSString0x10 NexusMissionStandardReward;
	NMS::NMSString0x10 QuicksilverMissionSecondReward;
	NMS::NMSString0x10 StandardMissionSecondReward;
	NMS::NMSString0x10 WeekendMissionSecondReward;
	uint64_t AbandonedEntityWaitPeriod;
	NMS::Vector2f FullSimHandUpdateDistance;
	NMS::Vector2f FullSimHandUpdateInterval;
	float BaseHeaderBroadcastInterval;
	float BlobHeightOffset;
	float ChanceMissionEpic;
	float CharacterDirectionLerpModifier;
	float ConstantScoreDepletionRate;
	float DisconnectionDisplayTime;
	float DistanceBetweenTeleportMovementEffects;
	float EditMessageInterval;
	float EditMessageReceivedSyncBackOffTime;
	float EditMessageSentSyncBackOffTime;
	float EntityUpdateMaxRateDist;
	float EntityUpdateMinRateDist;
	float FactorScoreDepletionRate;
	float FullSimHandUpdateDisabledDistance;
	float FullSimUpdateInterval;
	float HashCheckMessageInterval;
	float HashCheckMessageOverdueDistanceDivisor;
	int32_t HashMessageSentCooldown;
	int32_t HashReceivedCooldown;
	float HostBiasScore;
	float HostOnConnectedTimeout;
	float InviteInteractionTimeout;
	float JoinInteractionTimeout;
	int32_t MaxDownloadableBases;
	int32_t MaxSyncResponsesPerHash;
	int32_t MessageQueueSize;
	int32_t MessageQueueSizeDropUnreliable;
	float MinScore;
	int32_t MissionRecurrenceTime;
	float MissionWaitOnceAllPlayersReadyTime;
	float NewBlockMessageInterval;
	float NewBlockMessageOverdueDistanceDivisor;
	int32_t NewBlockMessageSentCooldown;
	int32_t NewerHashReceivedCooldown;
	float NPCInteractionTimeout;
	float NPCReplicateEndDistance;
	float NPCReplicateStartDistance;
	float PlaceholderBroadcastInterval;
	float PlanetLocalEnitityInterestEnd;
	float PlanetLocalEnitityInterestStart;
	float PlayerInteractCooldown;
	float PlayerMarkerDisplayDistance;
	float PlayerMarkerLargeIconCloseSize;
	float PlayerMarkerLargeIconDist;
	float PlayerMarkerLargeIconFarSize;
	float PlayerMarkerMinShowDistance;
	float PlayerMarkerScreenOffsetY;
	float PlayerMarkerSmallIconSize;
	float RemoveDuplicateChatMessageTime;
	float ShipDirectionLerpModifier;
	float ShipLandShakeMaxDist;
	float ShipSyncConvervengeMultiplier;
	float StatSyncRadiusPlanet;
	float StatSyncRadiusSpace;
	float SyncMessageInterval;
	int32_t TransactionTimeout;
	float UpdateSlerpModifier;
	int32_t UsefulSyncResponseCooldown;
	float UsefulSyncResponseScore;
	int32_t UselessSyncResponseCooldown;
	float UselessSyncResponseScore;
	float VehicleStickLerpModifier;
	float VehicleThrottleLerpModifier;
	bool PlayerMarkerCenteredName;
	bool VoiceChatEnabled;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcBiomeType
struct GcBiomeCondition
{
	NMS_GameComponents::GcBiomeType BiomeType;
};

struct GcMessageSummonAndDismiss
{
	enum class SummonEventTypeEnum : uint32_t
	{
		Summon = 0,
		Dismiss = 1,
	};

	NMS_GameComponents::GcMessageSummonAndDismiss::SummonEventTypeEnum SummonEventType;
};

//Dependency: GcMissionFaction
struct GcFactionSelectOptions
{
	enum class FactionOptionEnum : uint32_t
	{
		DataDefined = 0,
		CurrentMission = 1,
		CurrentSystem = 2,
	};

	NMS_GameComponents::GcMissionFaction Faction;
	NMS_GameComponents::GcFactionSelectOptions::FactionOptionEnum FactionOption;
};

//Dependency: GcDate
//Dependency: NMSString0x10
struct GcMissionSchedulingData
{
	std::vector<NMS::NMSString0x10> MissionIDs;
	NMSTemplate RecurrenceType;
	uint64_t EarlyEndOffset;
	NMS_GameComponents::GcDate EndDate;
	NMS_GameComponents::GcDate StartDate;
	bool HasEndDate;
	bool IndependentStart;
};

struct GcRealitySubstanceCategory
{
	enum class SubstanceCategoryEnum : uint32_t
	{
		Fuel = 0,
		Metal = 1,
		Catalyst = 2,
		Stellar = 3,
		Flora = 4,
		Earth = 5,
		Exotic = 6,
		Special = 7,
		BuildingPart = 8,
	};

	NMS_GameComponents::GcRealitySubstanceCategory::SubstanceCategoryEnum SubstanceCategory;
};

//Dependency: GcRarity
//Dependency: GcRealitySubstanceCategory
struct GcMiningSubstanceData
{
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcRealitySubstanceCategory SubstanceCategory;
	bool UseRarity;
};

struct GcWaterEmissionBehaviourType
{
	enum class WaterEmissionBehaviourTypeEnum : uint32_t
	{
		None = 0,
		Constant = 1,
		Pulse = 2,
		NightOnly = 3,
	};

	NMS_GameComponents::GcWaterEmissionBehaviourType::WaterEmissionBehaviourTypeEnum WaterEmissionBehaviourType;
};

//Dependency: GcWaterEmissionBehaviourType
struct GcPlanetWaterData
{
	int32_t ColourIndex;
	NMS_GameComponents::GcWaterEmissionBehaviourType FoamEmission;
	float Murkyness;
	NMS_GameComponents::GcWaterEmissionBehaviourType WaterEmission;
};

struct GcScreenFilters
{
	enum class ScreenFilterEnum : uint32_t
	{
		Default = 0,
		DefaultStorm = 1,
		Frozen = 2,
		FrozenStorm = 3,
		Toxic = 4,
		ToxicStorm = 5,
		Radioactive = 6,
		RadioactiveStorm = 7,
		Scorched = 8,
		ScorchedStorm = 9,
		Barren = 10,
		BarrenStorm = 11,
		Weird1 = 12,
		Weird2 = 13,
		Weird3 = 14,
		Weird4 = 15,
		Weird5 = 16,
		Weird6 = 17,
		Weird7 = 18,
		Weird8 = 19,
		Vintage = 20,
		HyperReal = 21,
		Desaturated = 22,
		Amber = 23,
		GBGreen = 24,
		Apocalypse = 25,
		Diffusion = 26,
		Green = 27,
		BlackAndWhite = 28,
		Isolation = 29,
		Sepia = 30,
		Filmic = 31,
		GBGrey = 32,
		Binoculars = 33,
		Surveying = 34,
		Nexus = 35,
		SpaceStation = 36,
		Freighter = 37,
		FreighterAbandoned = 38,
		Frigate = 39,
		MissionSurvey = 40,
		NewVibrant = 41,
		NewVibrantBright = 42,
		NewVibrantWarm = 43,
		NewVintageBright = 44,
		NewVintageWash = 45,
		Drama = 46,
		MemoryBold = 47,
		Memory = 48,
		MemoryWash = 49,
		Autumn = 50,
		AutumnFade = 51,
		ClassicBright = 52,
		Classic = 53,
		ClassicWash = 54,
		BlackAndWhiteDream = 55,
		ColourTouchB = 56,
		ColourTouchC = 57,
		NegativePrint = 58,
		SepiaExtreme = 59,
		Solarise = 60,
		TwoToneStrong = 61,
		TwoTone = 62,
		Dramatic = 63,
		Fuchsia = 64,
		Violet = 65,
		Cyan = 66,
		GreenNew = 67,
		AmberNew = 68,
		Red = 69,
		HueShiftA = 70,
		HueShiftB = 71,
		HueShiftC = 72,
		HueShiftD = 73,
		WarmStripe = 74,
		NMSRetroA = 75,
		NMSRetroB = 76,
		NMSRetroC = 77,
		NMSRetroD = 78,
		NMSRetroE = 79,
		NMSRetroF = 80,
		NMSRetroG = 81,
		CorruptSentinels = 82,
		DeepWater = 83,
	};

	NMS_GameComponents::GcScreenFilters::ScreenFilterEnum ScreenFilter;
};

//Dependency: GcScreenFilters
struct GcScreenFilterOption
{
	NMS_GameComponents::GcScreenFilters Filter;
	float Weight;
};

struct GcWeatherWeightings
{
	float WeatherWeightings[17];
};

//Dependency: GcMiningSubstanceData
//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeCloudSettings
//Dependency: GcPlanetWaterData
//Dependency: GcScreenFilterOption
//Dependency: GcWeatherWeightings
//Dependency: GcTerrainControls
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcBiomeData
{
	NMS_GameComponents::GcBiomeCloudSettings CloudSettings;
	NMS::NMSString0x20A FloraLifeLocID;
	NMS::VariableSizeString ColourPaletteFile;
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectLists;
	std::vector<NMS_GameComponents::GcScreenFilterOption> FilterOptions;
	NMS::VariableSizeString LegacyColourPaletteFile;
	NMS::VariableSizeString OverlayFile;
	NMS::VariableSizeString TextureFile;
	NMS::VariableSizeString TileTypesFile;
	NMS_GameComponents::GcWeatherWeightings WeatherOptions[5];
	NMS_GameComponents::GcTerrainControls Terrain;
	NMS_GameComponents::GcPlanetWaterData Water;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance1;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance2;
	NMS_GameComponents::GcMiningSubstanceData MiningSubstance3;
	NMS::Vector2f WeatherChangeTime;
	float DarknessVariation;
	float FuelMultiplier;
};

struct GcGyroSettingsData
{
	enum class YawAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class RollAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class PitchAxisDirectionEnum : uint32_t
	{
		Disabled = 0,
		Standard = 1,
		Inverted = 2,
	};

	enum class LookStickEnabledEnum : uint32_t
	{
		None = 0,
		Disabled = 1,
		Enabled = 2,
	};

	enum class HandednessEnum : uint32_t
	{
		Left = 0,
		Right = 1,
	};

	enum class GyroRotationSpaceHandheldEnum : uint32_t
	{
		Local = 0,
		Player = 1,
	};

	enum class GyroRotationSpaceEnum : uint32_t
	{
		Local = 0,
		Player = 1,
	};

	enum class EnableGyroInBuildingFreeCamEnum : uint32_t
	{
		Never = 0,
		MatchActiveModeWhenBuilding = 1,
		Always = 2,
	};

	enum class CursorLookStickEnabledEnum : uint32_t
	{
		None = 0,
		Disabled = 1,
	};

	enum class ActiveModeWhenBuildingEnum : uint32_t
	{
		None = 0,
		BuildPlacementOnly = 1,
		SelectionModeOnly = 2,
		Always = 3,
	};

	enum class ActiveModeOnFootEnum : uint32_t
	{
		None = 0,
		ScopeOnly = 1,
		ScopeOrFiring = 2,
		Always = 3,
	};

	enum class ActiveModeInExocraftEnum : uint32_t
	{
		None = 0,
		Firing = 1,
		Always = 2,
	};

	float Acceleration;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeInExocraftEnum ActiveModeInExocraft;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeOnFootEnum ActiveModeOnFoot;
	NMS_GameComponents::GcGyroSettingsData::ActiveModeWhenBuildingEnum ActiveModeWhenBuilding;
	float AimingMultiplier;
	float BuildingMultiplier;
	NMS_GameComponents::GcGyroSettingsData::CursorLookStickEnabledEnum CursorLookStickEnabled;
	float CursorSensitivityX;
	float CursorSensitivityY;
	float CursorTighteningThreshold;
	float Deadzone;
	NMS_GameComponents::GcGyroSettingsData::EnableGyroInBuildingFreeCamEnum EnableGyroInBuildingFreeCam;
	float ExocraftMultiplier;
	NMS_GameComponents::GcGyroSettingsData::GyroRotationSpaceEnum GyroRotationSpace;
	NMS_GameComponents::GcGyroSettingsData::GyroRotationSpaceHandheldEnum GyroRotationSpaceHandheld;
	NMS_GameComponents::GcGyroSettingsData::HandednessEnum Handedness;
	NMS_GameComponents::GcGyroSettingsData::LookStickEnabledEnum LookStickEnabled;
	NMS_GameComponents::GcGyroSettingsData::PitchAxisDirectionEnum PitchAxisDirection;
	NMS_GameComponents::GcGyroSettingsData::RollAxisDirectionEnum RollAxisDirection;
	float ScopeMultiplier;
	float SensitivityX;
	float SensitivityY;
	float SmoothingThreshold;
	float SmoothingWindow;
	float Steadying;
	float TighteningThreshold;
	NMS_GameComponents::GcGyroSettingsData::YawAxisDirectionEnum YawAxisDirection;
	bool AllowWhenRidingCreatures;
	bool EnableAdvancedOptions;
	bool FilterControllerVibrations;
	bool GyroCursorEnabled;
	bool GyroEnabled;
	bool GyroEnabledHandheld;
	bool ZoomScalesSensitivity;
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcCreatureJellyBossAttackData
{
	NMS::NMSString0x10 BroodSpawnID;
	NMS::NMSString0x10 OrbAttackProjectile;
	NMS::Vector2f OrbAttackCooldownRange;
	NMS::Vector2f SpawnBroodCooldownRange;
	float DelayBetweenOrbAttacks;
	float FadeInTime;
	int32_t MaxBroodCountPreventSpawn;
	float MaxIdleRange;
	float MinIdleRange;
	float MinWaterDepth;
	int32_t OrbAttackCount;
	float OrbAttackExplosionRadius;
	float OrbAttackLaunchSpeed;
	float OrbAttackPauseTime;
	float OrbAttackPickWeight;
	int32_t OrbAttackProjectileCount;
	int32_t SpawnBroodCount;
	float SpawnBroodPauseTime;
	float SpawnBroodPickWeight;
	bool CanOrbAttack;
	bool CanSpawnBrood;
	bool ExplodeOnPlayer;
	bool IsSpooky;
};

//Dependency: GcExternalObjectListOptions
//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcExternalObjectFileList
{
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> ExternalObjectFiles;
	std::vector<int32_t> ForceOnDuringSeasons;
	NMS::NMSString0x10 Id;
	float SubBiomeProbability[32];
	int32_t MaxFilesToChoose;
	int32_t MinFilesToChoose;
	NMS_GameComponents::GcBiomeType OnlyOnBiome;
	float ProbabilityOfBeingActive;
	bool ForceOnSeasonStart;
	bool NotOnDeadPlanets;
	bool NotOnExtremePlanets;
	bool NotOnGasGiant;
	bool NotOnInfested;
	bool NotOnStartPlanets;
	bool NotOnWeirdPlanets;
	bool OnlyOnCorruptSentinels;
	bool OnlyOnDeepWater;
	bool OnlyOnExtremeSentinels;
	bool OnlyOnExtremeWeather;
	bool OnlyOnInfested;
};

//Dependency: GcBiomeFileListOptions
//Dependency: GcExternalObjectListOptions
//Dependency: GcExternalObjectFileList
//Dependency: GcBiomeType
struct GcBiomeFileList
{
	NMS_GameComponents::GcBiomeFileListOptions BiomeFiles[17];
	std::vector<NMS_GameComponents::GcExternalObjectListOptions> CommonExternalObjectLists;
	std::vector<NMS_GameComponents::GcExternalObjectFileList> OptionalExternalObjectLists;
	std::vector<NMS_GameComponents::GcBiomeType> ValidGiantPlanetBiome;
	std::vector<NMS_GameComponents::GcBiomeType> ValidPurpleMoonBiome;
	std::vector<NMS_GameComponents::GcBiomeType> ValidStartPlanetBiome;
};

//Dependency: NMSString0x10
struct GcConstructionPart
{
	NMS::NMSString0x10 Part;
	int32_t Amount;
};

//Dependency: GcBiomeList
struct GcBiomeListPerStarType
{
	NMS_GameComponents::GcBiomeList StarType[5];
	NMS_GameComponents::GcBiomeList AbandonedYellow;
	NMS_GameComponents::GcBiomeList LushYellow;
	float AbandonedLifeChance[4];
	float LifeChance[4];
	float ConvertDeadToWeird;
};

//Dependency: NMSString0x80
struct GcBirdData
{
	float FlapAccel;
	float FlapSpeed;
	float FlapSpeedForMaxScale;
	float FlapSpeedForMinScale;
	float FlapSpeedMax;
	float FlapSpeedMaxScale;
	float FlapSpeedMin;
	float FlapSpeedMinScale;
	float FlapTurn;
	NMS::NMSString0x80 CircleAttractor;
};

//Dependency: NMSString0x10
struct GcDefaultMissionSubstance
{
	NMS::NMSString0x10 Substance;
};

//Dependency: NMSString0x10
struct GcBlackboardIntModifyData
{
	enum class ModifyIntTypeEnum : uint32_t
	{
		SetValue = 0,
		IncrementValue = 1,
	};

	NMS::NMSString0x10 Key;
	NMS_GameComponents::GcBlackboardIntModifyData::ModifyIntTypeEnum ModifyIntType;
	int32_t Value;
};

//Dependency: NMSString0x10
struct GcSentinelSpawnSequenceStep
{
	std::vector<NMS::NMSString0x10> WavePool;
};

//Dependency: GcItemQuality
//Dependency: NMSString0x10
//Dependency: GcFishSize
//Dependency: GcFishingTime
//Dependency: GcSeed
struct GcFishData
{
	NMS::NMSString0x10 CatchIncrementsStat;
	NMS::GcSeed MissionSeed;
	NMS::NMSString0x10 ProductID;
	NMS::NMSString0x10 RequiresMissionActive;
	float MissionCatchChanceOverride;
	NMS_GameComponents::GcItemQuality Quality;
	NMS_GameComponents::GcFishSize Size;
	NMS_GameComponents::GcFishingTime Time;
	bool Biome[17];
	bool MissionMustAlsoBeSelected;
	bool NeedsStorm;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
//Dependency: NMSString0x10
struct TkBlackboardValueVector
{
	NMS::Vector3f Value;
	NMS::NMSString0x10 Key;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcBlackboardValueDecoratorData
{
	NMSTemplate Child;
	NMS::NMSString0x10 Key;
	bool ClearOnSuccess;
};

//Dependency: GcMechMeshPart
//Dependency: GcMechMeshType
//Dependency: GcAudioWwiseEvents
struct GcMechPartAudioEventOverride
{
	NMS_GameComponents::GcMechMeshPart MeshPart;
	NMS_GameComponents::GcMechMeshType MeshType;
	NMS_GameComponents::GcAudioWwiseEvents OverrideEvent;
};

//Dependency: GcMechPartAudioEventOverride
//Dependency: GcAudioWwiseEvents
struct GcMechAudioEvent
{
	std::vector<NMS_GameComponents::GcMechPartAudioEventOverride> MeshPartOverrides;
	NMS_GameComponents::GcAudioWwiseEvents DefaultEvent;
};

//Dependency: GcMechAudioEvent
struct GcMechAudioEventTable
{
	NMS_GameComponents::GcMechAudioEvent JetpackLP;
	NMS_GameComponents::GcMechAudioEvent JetpackLPEnd;
	NMS_GameComponents::GcMechAudioEvent JetpackRetrigger;
	NMS_GameComponents::GcMechAudioEvent JetpackTrigger;
	NMS_GameComponents::GcMechAudioEvent JumpLanding;
	NMS_GameComponents::GcMechAudioEvent JumpLandingSkid;
	NMS_GameComponents::GcMechAudioEvent MechEnter;
	NMS_GameComponents::GcMechAudioEvent MechExit;
	NMS_GameComponents::GcMechAudioEvent StepRun;
	NMS_GameComponents::GcMechAudioEvent StepWalk;
	NMS_GameComponents::GcMechAudioEvent TitanFallLanding;
	NMS_GameComponents::GcMechAudioEvent TitanFallPoseIntro;
};

struct GcMissionConditionExpeditionNearlyOver
{
	uint64_t RemainingTimeToStartWarning;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkDynamicResScalingSettings
{
	enum class DynamicResScalingAggressivenessEnum : uint32_t
	{
		Moderate = 0,
		Balanced = 1,
		Aggressive = 2,
	};

	NMS_Toolkit::TkDynamicResScalingSettings::DynamicResScalingAggressivenessEnum DynamicResScalingAggressiveness;
	float FrametimeHeadroomProportion;
	float LowestDynamicResScalingFactor;
};

//Dependency: TkDynamicResScalingSettings
//Dependency: TkGraphicsDetailTypes
struct TkGraphicsDetailPreset
{
	enum class XESSQualityEnum : uint32_t
	{
		UltraPerformance = 0,
		Performance = 1,
		Balanced = 2,
		Quality = 3,
		UltraQuality = 4,
		UltraQualityPlus = 5,
		Native = 6,
	};

	enum class UIQualityEnum : uint32_t
	{
		Normal = 0,
		_4K = 1,
	};

	enum class NVIDIAReflexLowLatencyEnum : uint32_t
	{
		On = 0,
		Off = 1,
		OnWithBoost = 2,
	};

	enum class MetalFXQualityEnum : uint32_t
	{
		UltraQuality = 0,
		Quality = 1,
		Balanced = 2,
		Performance = 3,
	};

	enum class MetalFXModeEnum : uint32_t
	{
		Off = 0,
		Spatial = 1,
		Temporal = 2,
	};

	enum class FFXSRQualityEnum : uint32_t
	{
		Off = 0,
		UltraQuality = 1,
		Quality = 2,
		Balanced = 3,
		Performance = 4,
	};

	enum class FFXSR2QualityEnum : uint32_t
	{
		UltraPerformance = 0,
		Performance = 1,
		Balanced = 2,
		Quality = 3,
		Native = 4,
	};

	enum class DLSSQualityEnum : uint32_t
	{
		MaxPerformance = 0,
		Balanced = 1,
		MaxQuality = 2,
		UltraPerformance = 3,
		UltraQuality = 4,
	};

	enum class DLSSFrameGenerationEnum : uint32_t
	{
		On = 0,
		Off = 1,
	};

	enum class AntiAliasingEnum : uint32_t
	{
		None = 0,
		TAA_LOW = 1,
		TAA = 2,
		FXAA = 3,
		FFXSR2 = 4,
		DLSS = 5,
		DLAA = 6,
		XESS = 7,
		MetalFXSpatial = 8,
		MetalFXTemporal = 9,
	};

	enum class AnisotropyLevelEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_4 = 2,
		_8 = 3,
		_16 = 4,
	};

	enum class AmbientOcclusionEnum : uint32_t
	{
		Off = 0,
		GTAO_Low = 1,
		GTAO_Medium = 2,
		GTAO_High = 3,
		GTAO_Ultra = 4,
		HBAO_Low = 5,
		HBAO_High = 6,
	};

	NMS_Toolkit::TkDynamicResScalingSettings DynamicResScalingSettings;
	NMS_Toolkit::TkGraphicsDetailPreset::AmbientOcclusionEnum AmbientOcclusion;
	NMS_Toolkit::TkGraphicsDetailTypes AnimationQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::AnisotropyLevelEnum AnisotropyLevel;
	NMS_Toolkit::TkGraphicsDetailPreset::AntiAliasingEnum AntiAliasing;
	NMS_Toolkit::TkGraphicsDetailTypes BaseQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::DLSSFrameGenerationEnum DLSSFrameGeneration;
	NMS_Toolkit::TkGraphicsDetailPreset::DLSSQualityEnum DLSSQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::FFXSR2QualityEnum FFXSR2Quality;
	NMS_Toolkit::TkGraphicsDetailPreset::FFXSRQualityEnum FFXSRQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::MetalFXModeEnum MetalFXMode;
	NMS_Toolkit::TkGraphicsDetailPreset::MetalFXQualityEnum MetalFXQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::NVIDIAReflexLowLatencyEnum NVIDIAReflexLowLatency;
	NMS_Toolkit::TkGraphicsDetailTypes PlanetQuality;
	NMS_Toolkit::TkGraphicsDetailTypes PostProcessingEffects;
	NMS_Toolkit::TkGraphicsDetailTypes ReflectionsQuality;
	NMS_Toolkit::TkGraphicsDetailTypes ShadowQuality;
	NMS_Toolkit::TkGraphicsDetailTypes TerrainTessellation;
	NMS_Toolkit::TkGraphicsDetailTypes TextureQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::UIQualityEnum UIQuality;
	NMS_Toolkit::TkGraphicsDetailTypes VolumetricsQuality;
	NMS_Toolkit::TkGraphicsDetailTypes WaterQuality;
	NMS_Toolkit::TkGraphicsDetailPreset::XESSQualityEnum XESSQuality;
};

//Dependency: TkGraphicsDetailPreset
//Dependency: NMSString0x100
struct TkGraphicsSettings
{
	enum class VsyncExEnum : uint32_t
	{
		Off = 0,
		On = 1,
		Adaptive = 2,
		Triple = 3,
	};

	enum class TextureStreamingVkEnum : uint32_t
	{
		Off = 0,
		On = 1,
		Auto = 2,
		NonDynamic = 3,
	};

	enum class HDRModeEnum : uint32_t
	{
		Off = 0,
		HDR400 = 1,
		HDR600 = 2,
		HDR1000 = 3,
	};

	std::vector<NMS::NMSString0x100> MonitorNames;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetail;
	int32_t AdapterIndex;
	int32_t Brightness;
	float FoVInShip;
	float FoVOnFoot;
	NMS_Toolkit::TkGraphicsSettings::HDRModeEnum HDRMode;
	int32_t MaxframeRate;
	int32_t Monitor;
	float MotionBlurStrength;
	float MouseClickSpeedMultiplier;
	int32_t NumGraphicsThreadsBeta;
	int32_t NumHighThreads;
	int32_t NumLowThreads;
	int32_t ResolutionHeight;
	float ResolutionScale;
	int32_t ResolutionWidth;
	float RetinaScaleIOS;
	NMS_Toolkit::TkGraphicsSettings::TextureStreamingVkEnum TextureStreamingVk;
	int32_t Version;
	NMS_Toolkit::TkGraphicsSettings::VsyncExEnum VsyncEx;
	NMS::NMSString0x100 AdapterName;
	bool Borderless;
	bool FullScreen;
	bool RemoveBaseBuildingRestrictions;
	bool ShowRequirementsWarnings;
	bool UseArbSparseTexture;
	bool UseTerrainTextureCache;
	bool VignetteAndScanlines;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcBlockedUser
{
	NMS::NMSString0x40 UserId;
	NMS::NMSString0x40 Username;
	NMS::NMSString0x20 Platform;
};

//Dependency: NMSString0x80
struct GcBlockedMessage
{
	NMS::NMSString0x80 MessageId;
};

//Dependency: GcBlockedUser
//Dependency: GcBlockedMessage
struct GcBlockListPersistence
{
	int32_t ListSize;
	int32_t MessageListSize;
	int32_t MessageNextSlot;
	int32_t NextSlot;
	NMS_GameComponents::GcBlockedUser BlockedUserArray[50];
	NMS_GameComponents::GcBlockedMessage BlockedMessageArray[50];
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkEmitterWindDrift
{
	float CurveBlendMidpoint;
	float CurveEndValue;
	float CurveMidValue;
	float CurveStartValue;
	float Speed;
	float Strength;
	NMS_Toolkit::TkCurveType Curve1Shape;
	NMS_Toolkit::TkCurveType Curve2Shape;
	bool LimitEmitterLifetime;
	bool LimitEmitterSpeed;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMetaBallComponentData
{
	NMS::Vector3f MaxSize;
	NMS::Vector3f MinSize;
	NMS::VariableSizeString File;
	float Radius;
	NMS::NMSString0x20 Root;
};

struct GcBoidData
{
	float Alignment;
	float Coherence;
	float DirectionBrake;
	float Follow;
	float InitFacingOffset;
	float InitOffset;
	float InitTime;
	float LeadTime;
	float MaxSpeed;
	float Separation;
	float Spacing;
};

struct GcMessageRequestTakeOff
{
	float Delay;
	bool ImmediatelyDissolveNPC;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: NMSString0x80
struct TkAudioAnimTrigger
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x20A> OnlyValidWithParts;
	int32_t FrameStart;
	NMS::NMSString0x80 Sound;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x100
struct GcBootLogoData
{
	float DisplayTime[4];
	NMS::NMSString0x100 Textures[4];
};

//Dependency: GcAtlasSendSubmitContribution
//Dependency: NMSString0x10
struct GcRewardCommunityContribution
{
	enum class SubmitTypeEnum : uint32_t
	{
		Value = 0,
		Stat = 1,
		StatsDiff = 2,
	};

	NMS::NMSString0x10 OtherStat;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcAtlasSendSubmitContribution Contribution;
	NMS_GameComponents::GcRewardCommunityContribution::SubmitTypeEnum SubmitType;
	bool AutosaveOnHandIn;
};

//Dependency: GcAIShipSpawnData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcBountySpawnInfo
{
	NMS_GameComponents::GcAIShipSpawnData Data;
	NMS::NMSString0x20A Label;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 AttackData;
	NMS::NMSString0x10 Id;
};

//Dependency: GcStatsTypes
struct GcBreakTechByStatData
{
	NMS_GameComponents::GcStatsTypes DamageTechWithStat;
	bool IncludeStatChildren;
};

//Dependency: NMSString0x10
struct GcDefaultMissionProduct
{
	NMS::NMSString0x10 Product;
};

struct GcFireSimpleInteractionAction
{
};

struct GcRewardSwapMultiTool
{
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCustomisationDescriptorVisualEffect
{
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x20 AttachTo;
};

//Dependency: GcCustomisationDescriptorVisualEffect
//Dependency: NMSString0x20A
struct GcCustomisationDescriptorVisualEffects
{
	NMS::NMSString0x20A DescriptorId;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorVisualEffect> Effects;
};

struct GcBreakTechOnDamageDifficultyOption
{
	enum class BreakTechOnDamageProbabilityEnum : uint32_t
	{
		None = 0,
		Low = 1,
		High = 2,
	};

	NMS_GameComponents::GcBreakTechOnDamageDifficultyOption::BreakTechOnDamageProbabilityEnum BreakTechOnDamageProbability;
};

struct GcSentinelTypes
{
	enum class SentinelTypeEnum : uint32_t
	{
		PatrolDrone = 0,
		CombatDrone = 1,
		MedicDrone = 2,
		SummonerDrone = 3,
		CorruptedDrone = 4,
		Quad = 5,
		SpiderQuad = 6,
		SpiderQuadMini = 7,
		Mech = 8,
		Walker = 9,
		FriendlyDrone = 10,
		StoneMech = 11,
		StoneFloater = 12,
	};

	NMS_GameComponents::GcSentinelTypes::SentinelTypeEnum SentinelType;
};

//Dependency: GcSentinelTypes
struct GcSentinelSpawnData
{
	int32_t MaxAmount;
	int32_t MinAmount;
	NMS_GameComponents::GcSentinelTypes Type;
};

struct GcCostCargo
{
	int32_t Slots;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVertexStream
{
	std::vector<int8_t> VertexStream;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPlayerStickData
{
	float Accelerate;
	float AccelerateAngle;
	float AcceleratorMinTime;
	float AcceleratorStickPoint;
	float StickyFactor;
	float Turn;
	float TurnFast;
};

//Dependency: TkTextureResource
struct GcBuildMenuIconSet
{
	NMS_Toolkit::TkTextureResource Glow;
	NMS_Toolkit::TkTextureResource Normal;
};

struct GcNPCPopulationDifficultyOption
{
	enum class NPCPopulationDifficultyEnum : uint32_t
	{
		Full = 0,
		Abandoned = 1,
	};

	NMS_GameComponents::GcNPCPopulationDifficultyOption::NPCPopulationDifficultyEnum NPCPopulationDifficulty;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkImGuiWindowData
{
	int32_t WindowH;
	int32_t WindowMinH;
	int32_t WindowMinW;
	int32_t WindowScroll;
	int32_t WindowTab;
	int32_t WindowW;
	int32_t WindowX;
	int32_t WindowY;
	NMS::NMSString0x80 Type;
	bool WindowMinimised;
	bool WindowOpen;
	bool WindowResize;
	bool WindowUsed;
};

//Dependency: TkImGuiWindowData
//Dependency: VariableSizeString
struct TkImGuiData
{
	NMS::VariableSizeString RecentToolbox[10];
	NMS_Toolkit::TkImGuiWindowData WindowTable[128];
	NMS_Toolkit::TkImGuiWindowData MainWindow;
	int32_t DimensionX;
	int32_t DimensionY;
	int32_t WindowCount;
	bool Maximised;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMessageRequestWarp
{
	float Delay;
};

struct GcBuilderPadType
{
	enum class BuilderPadTypeEnum : uint32_t
	{
		NoBuild = 0,
		ExclusivelyBuild = 1,
		Hybrid = 2,
	};

	NMS_GameComponents::GcBuilderPadType::BuilderPadTypeEnum BuilderPadType;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardUnlockSeasonReward
{
	NMS::NMSString0x20A EncryptedText;
	NMS::NMSString0x10 ProductID;
	bool MarkAsClaimedInShop;
	bool Silent;
	bool UniqueInventoryItem;
	bool UseSpecialFormatting;
};

//Dependency: NMSString0x10
struct GcBuildingBlueprint
{
	NMS::NMSString0x10 ProductID;
	int32_t GroupId;
};

struct GcRewardDeactivateFiends
{
};

struct GcBuildingDensity
{
	float BuildingSpacing;
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcTechnologyRequirement
{
	NMS::NMSString0x10 ID;
	int32_t Amount;
	NMS_GameComponents::GcInventoryType Type;
};

struct GcItemPriceModifiers
{
	float BuyBaseMarkup;
	float BuyMarkupMod;
	float HighPriceMod;
	float LowPriceMod;
	float SpaceStationMarkup;
};

struct GcFossilCategory
{
	enum class FossilCategoryEnum : uint32_t
	{
		None = 0,
		Head = 1,
		Body = 2,
		Limb = 3,
		Tail = 4,
	};

	NMS_GameComponents::GcFossilCategory::FossilCategoryEnum FossilCategory;
};

struct GcScannerIconTypes
{
	enum class ScanIconTypeEnum : uint32_t
	{
		None = 0,
		Health = 1,
		Shield = 2,
		Hazard = 3,
		LifeSupport = 4,
		Tech = 5,
		BluePlant = 6,
		CaveSubstance = 7,
		LaunchCrystals = 8,
		Power = 9,
		Carbon = 10,
		CarbonPlus = 11,
		Oxygen = 12,
		Mineral = 13,
		Sodium = 14,
		SodiumPlus = 15,
		Crate = 16,
		Artifact = 17,
		Plant = 18,
		HazardPlant = 19,
		ArtifactCrate = 20,
		BuriedTech = 21,
		BuriedRare = 22,
		Drone = 23,
		CustomMarker = 24,
		SignalBooster = 25,
		Refiner = 26,
		Grave = 27,
		Rare1 = 28,
		Rare2 = 29,
		Rare3 = 30,
		Pearl = 31,
		RareEgg = 32,
		HazardEgg = 33,
		FishFiend = 34,
		Clam = 35,
		CaveStone = 36,
		StormCrystal = 37,
		BiomeTrophy = 38,
		PowerHotspot = 39,
		MineralHotspot = 40,
		GasHotspot = 41,
		HarvestPlant = 42,
		Cooker = 43,
		CreaturePoop = 44,
		FreighterTeleporter = 45,
		FreighterDoor = 46,
		FreighterTerminal = 47,
		FreighterHeater = 48,
		FreighterDataPad = 49,
		LandedPilot = 50,
		PetEgg = 51,
		Sandworm = 52,
		FriendlyDrone = 53,
		CorruptedCrystal = 54,
		CorruptedMachine = 55,
		RobotHead = 56,
		HiddenCrystal = 57,
		SpaceDestrutibleSmall = 58,
		SpaceDestrutibleLarge = 59,
		ShieldGenerator = 60,
		FreighterEngine = 61,
		FreighterWeakPoint = 62,
		FreighterTrenchEntrance = 63,
		Terrain = 64,
		FuelAsteroid = 65,
		Grub = 66,
		FishPlatform = 67,
		FishPot = 68,
		RuinBeacon = 69,
		SeaGlass = 70,
		LocalWeatherHazard = 71,
		StoneEnemy = 72,
		BuriedFossil = 73,
		BuriedFossilHazard = 74,
	};

	NMS_GameComponents::GcScannerIconTypes::ScanIconTypeEnum ScanIconType;
};

struct GcTradeCategory
{
	enum class TradeCategoryEnum : uint32_t
	{
		Mineral = 0,
		Tech = 1,
		Commodity = 2,
		Component = 3,
		Alloy = 4,
		Exotic = 5,
		Energy = 6,
		None = 7,
		SpecialShop = 8,
	};

	NMS_GameComponents::GcTradeCategory::TradeCategoryEnum TradeCategory;
};

struct GcProductCategory
{
	enum class ProductCategoryEnum : uint32_t
	{
		Component = 0,
		Consumable = 1,
		Tradeable = 2,
		Curiosity = 3,
		BuildingPart = 4,
		Procedural = 5,
		Emote = 6,
		CustomisationPart = 7,
		CreatureEgg = 8,
		Fish = 9,
		ExhibitBone = 10,
	};

	NMS_GameComponents::GcProductCategory::ProductCategoryEnum ProductCategory;
};

//Dependency: GcLegality
//Dependency: GcTechnologyRequirement
//Dependency: GcRealitySubstanceCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcFossilCategory
//Dependency: GcStatsTypes
//Dependency: GcScannerIconTypes
//Dependency: GcRarity
//Dependency: GcTradeCategory
//Dependency: GcProductCategory
//Dependency: TkModelResource
//Dependency: TkTextureResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcProductData
{
	enum class WikiCategoryEnum : uint32_t
	{
		NotEnabled = 0,
		Crafting = 1,
		Tech = 2,
		Construction = 3,
		Trade = 4,
		Curio = 5,
		Cooking = 6,
	};

	NMS::Colour Colour;
	NMS_Toolkit::TkModelResource DebrisFile;
	NMS::NMSString0x20A Hint;
	NMS::NMSString0x20A PinObjective;
	NMS::NMSString0x20A PinObjectiveMessage;
	NMS::NMSString0x20A PinObjectiveTip;
	NMS_Toolkit::TkTextureResource HeroIcon;
	NMS_Toolkit::TkTextureResource Icon;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> AltRequirements;
	NMS::NMSString0x10 DeploysInto;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 GiveRewardOnSpecialPurchase;
	NMS::NMSString0x10 GroupID;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> Requirements;
	NMS::VariableSizeString Subtitle;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	int32_t BaseValue;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	int32_t ChargeValue;
	float CookingValue;
	int32_t CraftAmountMultiplier;
	int32_t CraftAmountStepSize;
	int32_t DefaultCraftAmount;
	float EconomyInfluenceMultiplier;
	NMS_GameComponents::GcStatsTypes FoodBonusStat;
	float FoodBonusStatAmount;
	NMS_GameComponents::GcFossilCategory FossilCategory;
	NMS_GameComponents::GcLegality Legality;
	int32_t Level;
	float NormalisedValueOffWorld;
	float NormalisedValueOnWorld;
	NMS_GameComponents::GcScannerIconTypes PinObjectiveScannableType;
	NMS_GameComponents::GcRarity Rarity;
	int32_t RecipeCost;
	int32_t StackMultiplier;
	NMS_GameComponents::GcTradeCategory TradeCategory;
	NMS_GameComponents::GcProductCategory Type;
	NMS_GameComponents::GcProductData::WikiCategoryEnum WikiCategory;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	bool CanSendToOtherPlayers;
	bool Consumable;
	bool CookingIngredient;
	bool EggModifierIngredient;
	bool GoodForSelling;
	bool IsCraftable;
	bool IsTechbox;
	bool NeverPinnable;
	bool PinObjectiveEasyToRefine;
	bool SpecificChargeOnly;
};

//Dependency: GcProductData
//Dependency: GcBaseBuildingEntry
//Dependency: NMSString0x40
struct GcModBasePart
{
	NMS_GameComponents::GcProductData ProductData;
	NMS_GameComponents::GcBaseBuildingEntry PartData;
	NMS::NMSString0x40 ID;
};

struct GcMissionConditionHasLegacyBasePending
{
};

struct GcRewardClosePortal
{
};

struct GcQuickMenuActions
{
	enum class QuickMenuActionsEnum : uint32_t
	{
		None = 0,
		CallFreighter = 1,
		DismissFreighter = 2,
		SummonNexus = 3,
		CallShip = 4,
		CallSquadron = 5,
		SummonVehicleSubMenu = 6,
		SummonBuggy = 7,
		SummonBike = 8,
		SummonTruck = 9,
		SummonWheeledBike = 10,
		SummonHovercraft = 11,
		SummonSubmarine = 12,
		SummonMech = 13,
		VehicleAIToggle = 14,
		VehicleScan = 15,
		VehicleScanSelect = 16,
		VehicleRestartRace = 17,
		Torch = 18,
		GalaxyMap = 19,
		PhotoMode = 20,
		ChargeMenu = 21,
		Charge = 22,
		ChargeSubMenu = 23,
		Repair = 24,
		BuildMenu = 25,
		CommunicatorReceive = 26,
		CommunicatorInitiate = 27,
		ThirdPersonCharacter = 28,
		ThirdPersonShip = 29,
		ThirdPersonVehicle = 30,
		EconomyScan = 31,
		EmoteMenu = 32,
		Emote = 33,
		UtilitySubMenu = 34,
		SummonSubMenu = 35,
		SummonShipSubMenu = 36,
		ChangeSecondaryWeaponMenu = 37,
		ChangeSecondaryWeapon = 38,
		ChooseCreatureFoodMenu = 39,
		ChooseCreatureFood = 40,
		EmergencyWarp = 41,
		SwapMultitool = 42,
		SwapMultitoolSubMenu = 43,
		CreatureSubMenu = 44,
		SummonPet = 45,
		SummonPetSubMenu = 46,
		WarpToNexus = 47,
		PetUI = 48,
		ByteBeatSubMenu = 49,
		ByteBeatPlay = 50,
		ByteBeatStop = 51,
		ByteBeatLibrary = 52,
		ReportBase = 53,
		CargoShield = 54,
		CallRocket = 55,
		SummonSkiff = 56,
		FishBaitBox = 57,
		FoodUnit = 58,
		SettlementOverview = 59,
		Invalid = 60,
	};

	NMS_GameComponents::GcQuickMenuActions::QuickMenuActionsEnum QuickMenuActions;
};

//Dependency: GcInventoryIndex
//Dependency: GcQuickMenuActions
//Dependency: NMSString0x10
struct GcQuickMenuActionSaveData
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcInventoryIndex InventoryIndex;
	NMS_GameComponents::GcQuickMenuActions Action;
	int32_t Number;
};

struct GcBuildingDensityLevels
{
	enum class BuildingDensityEnum : uint32_t
	{
		Dead = 0,
		Low = 1,
		Mid = 2,
		Full = 3,
		Weird = 4,
		HalfWeird = 5,
		Waterworld = 6,
		GasGiant = 7,
	};

	NMS_GameComponents::GcBuildingDensityLevels::BuildingDensityEnum BuildingDensity;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcCreatureStupidName
{
	NMS::NMSString0x10 Id;
	std::vector<NMS::NMSString0x80> Names;
	int32_t Count;
};

struct GcCombatEffectsProperties
{
	float DamageMultiplier;
	float DurationMultiplier;
	bool IgnoreFromOtherPlayers;
	bool IgnoreFromSelf;
	bool IsAffected;
};

struct GcDifficultySettingType
{
	enum class DifficultySettingTypeEnum : uint32_t
	{
		Toggle = 0,
		OptionList = 1,
	};

	NMS_GameComponents::GcDifficultySettingType::DifficultySettingTypeEnum DifficultySettingType;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLODSettingsData
{
	int32_t ImposterOverrideRange[6];
	int32_t MaxObjectDistanceOverride[6];
	int32_t RegionLODHiddenRanges[6];
	int32_t RegionLODRadius[6];
	float LODAdjust[5];
	int32_t AsteroidCountMultiplier;
	int32_t AsteroidDividerMultiplier;
	float AsteroidFadeRangeMultiplier;
	int32_t ImposterResolutionMultiplier;
	int32_t MaxAsteroidGenerationPerFrame;
	int32_t MaxAsteroidGenerationPerFramePulseJump;
	int32_t NumberOfImposterViews;
	bool EnableOctahedralImposters;
	bool ViewImpostersFromSpace;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPaletteData
//Dependency: GcCustomisationColourPaletteExtraData
//Dependency: GcCustomisationBannerImageData
struct GcCustomisationBannerGroup
{
	NMS_GameComponents::GcPaletteData BackgroundColours;
	NMS_GameComponents::GcPaletteData MainColours;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData BackgroundColoursExtraData;
	NMS_GameComponents::GcCustomisationColourPaletteExtraData MainColoursExtraData;
	std::vector<NMS_GameComponents::GcCustomisationBannerImageData> BannerImages;
};

//Dependency: GcPlanetSize
struct GcPlanetaryMappingValues
{
	NMS_GameComponents::GcPlanetSize PlanetSize;
	uint16_t PolesPerSection;
	uint16_t SectionPerSide;
};

struct GcRewardAtlasPathProgress
{
	enum class AtlasPathProgressTypeEnum : uint32_t
	{
		IncrementPathProgress = 0,
		FinalStoryAtlas = 1,
		StoreLoopingCompleteStations = 2,
	};

	NMS_GameComponents::GcRewardAtlasPathProgress::AtlasPathProgressTypeEnum AtlasPathProgressType;
};

//Dependency: Vector3f
//Dependency: GcSeed
struct GcBuildingOverrideData
{
	NMS::Vector3f Position;
	NMS::GcSeed Seed;
	int32_t Index;
};

//Dependency: NMSString0x20A
struct GcRewardScanEvent
{
	enum class ScanEventTableEnum : uint32_t
	{
		Space = 0,
		Planet = 1,
		Missions = 2,
		Tutorial = 3,
		MissionsCreative = 4,
		NPCPlanetSite = 5,
	};

	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A FailureOSD;
	NMS_GameComponents::GcRewardScanEvent::ScanEventTableEnum ScanEventTable;
	float StartDelay;
	bool DoAerialScan;
	bool ForceSilentFailure;
	bool UseMissionSeedForEvent;
	bool UseStartDelayWhenNoAerialScan;
};

//Dependency: NMSString0x10
struct GcObjectSpawnDataVariant
{
	NMS::NMSString0x10 ID;
	float LodDistances[5];
	float Coverage;
	float FadeOutEndDistance;
	float FadeOutOffsetDistance;
	float FadeOutStartDistance;
	float FlatDensity;
	int32_t MaxImposterRadius;
	int32_t MaxRegionRadius;
	float SlopeDensity;
	float SlopeMultiplier;
};

//Dependency: GcObjectSpawnDataVariant
//Dependency: GcTerrainTileType
//Dependency: GcResourceElement
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcObjectSpawnData
{
	enum class TypeEnum : uint32_t
	{
		Instanced = 0,
		Single = 1,
	};

	enum class PlacementPriorityEnum : uint32_t
	{
		Low = 0,
		Normal = 1,
		High = 2,
	};

	enum class OverlapStyleEnum : uint32_t
	{
		None = 0,
		SameSeed = 1,
		All = 2,
	};

	enum class LargeObjectCoverageEnum : uint32_t
	{
		DoNotPlace = 0,
		DoNotPlaceIgnoreFootprint = 1,
		DoNotPlaceClose = 2,
		DoNotPlaceAnywhereNear = 3,
		OnlyPlaceAround = 4,
		OnlyPlaceAroundIgnoreFootprint = 5,
		AlwaysPlace = 6,
	};

	enum class GroundColourIndexEnum : uint32_t
	{
		Auto = 0,
		Main = 1,
		Patch = 2,
	};

	NMS_GameComponents::GcObjectSpawnDataVariant QualityVariantData;
	NMS_GameComponents::GcResourceElement Resource;
	std::vector<NMS_GameComponents::GcResourceElement> AltResources;
	NMS::NMSString0x10 DebugName;
	NMS::NMSString0x10 DestroyedByVehicleEffect;
	std::vector<NMS_GameComponents::GcTerrainTileType> ExtraTileTypes;
	NMS::NMSString0x10 Placement;
	std::vector<NMS_GameComponents::GcObjectSpawnDataVariant> QualityVariants;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcObjectSpawnData::GroundColourIndexEnum GroundColourIndex;
	NMS_GameComponents::GcObjectSpawnData::LargeObjectCoverageEnum LargeObjectCoverage;
	float MaxAngle;
	float MaxHeight;
	float MaxLower;
	float MaxRaise;
	float MaxScale;
	float MaxScaleY;
	float MaxXZRotation;
	float MaxYRotation;
	float MinAngle;
	float MinHeight;
	float MinScale;
	float MinScaleY;
	int32_t Order;
	NMS_GameComponents::GcObjectSpawnData::OverlapStyleEnum OverlapStyle;
	float PatchEdgeScaling;
	NMS_GameComponents::GcObjectSpawnData::PlacementPriorityEnum PlacementPriority;
	float ShearWindStrength;
	float SlopeScaling;
	NMS_GameComponents::GcObjectSpawnData::TypeEnum Type;
	bool AlignToNormal;
	bool AutoCollision;
	bool CollideWithPlayer;
	bool CollideWithPlayerVehicle;
	bool CreaturesCanEat;
	bool DestroyedByPlayerShip;
	bool DestroyedByPlayerVehicle;
	bool DestroyedByTerrainEdit;
	bool InvisibleToCamera;
	bool IsFloatingIsland;
	bool MatchGroundColour;
	bool MoveToGroundOnUpgrade;
	bool RelativeToSeaLevel;
	bool SupportsScanToReveal;
	bool SwapPrimaryForRandomColour;
	bool SwapPrimaryForSecondaryColour;
};

struct GcModularCustomisationResourceType
{
	enum class ModularCustomisationResourceTypeEnum : uint32_t
	{
		MultiToolStaff = 0,
		Fighter = 1,
		Dropship = 2,
		Scientific = 3,
		Shuttle = 4,
		Sail = 5,
		ExhibitTRex = 6,
		ExhibitWorm = 7,
		ExhibitGrunt = 8,
		ExhibitQuadruped = 9,
		ExhibitBird = 10,
	};

	NMS_GameComponents::GcModularCustomisationResourceType::ModularCustomisationResourceTypeEnum ModularCustomisationResourceType;
};

//Dependency: GcModularCustomisationResourceType
struct GcExhibitAssemblyComponentData
{
	NMS_GameComponents::GcModularCustomisationResourceType ExhibitType;
};

//Dependency: GcPersistentBaseTypes
struct GcBuildingPartSearchType
{
	enum class BuildPartSearchTypeEnum : uint32_t
	{
		Base = 0,
		Freighter = 1,
		AllPlayerOwned = 2,
		OtherPlayerBase = 3,
	};

	std::vector<NMS_GameComponents::GcPersistentBaseTypes> BaseSearchFilters;
	NMS_GameComponents::GcBuildingPartSearchType::BuildPartSearchTypeEnum BuildPartSearchType;
	bool IncludeGlobalBaseObjects;
	bool IncludeOnlyOverlappingBases;
};

//Dependency: NMSString0x20A
struct GcFriendlyDroneVocabularyEntry
{
	NMS::NMSString0x20A GenericFallback;
};

//Dependency: GcStatusMessageMissionMarkup
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStatusMessageDefinition
{
	enum class ReplicateToEnum : uint32_t
	{
		None = 0,
		Fireteam = 1,
		Fireteam_SameUA = 2,
		Global = 3,
		Global_Distance = 4,
		Fireteam_Distance = 5,
		Fireteam_Global_Distance = 6,
		Not_Fireteam = 7,
	};

	NMS::NMSString0x20A CustomPrefixLocID;
	NMS::NMSString0x20A Message;
	NMS::NMSString0x10 Id;
	float DisplayDurationMultiplier;
	float Distance;
	NMS_GameComponents::GcStatusMessageMissionMarkup MissionMarkup;
	NMS_GameComponents::GcStatusMessageDefinition::ReplicateToEnum ReplicateTo;
	bool AddFriendlyDronePrefix;
	bool AddPetNamePrefix;
	bool AddPlayerNamePrefix;
	bool IncludePlayerName;
	bool OnlyInMultiplayer;
	bool OnlyOnFireteam;
	bool PostLocally;
};

//Dependency: GcPetVocabularyEntry
//Dependency: GcFriendlyDroneVocabularyEntry
//Dependency: GcStatusMessageDefinition
//Dependency: Colour
struct GcStatusMessageDefinitions
{
	NMS::Colour MissionMarkupColour;
	NMS_GameComponents::GcPetVocabularyEntry PetChatTemplates[21];
	NMS_GameComponents::GcPetVocabularyEntry PetVocabulary[15];
	NMS_GameComponents::GcFriendlyDroneVocabularyEntry FriendlyDroneChatTemplates[5];
	std::vector<NMS_GameComponents::GcStatusMessageDefinition> Messages;
};

struct GcItemFilterData
{
	NMSTemplate Root;
};

//Dependency: GcItemFilterData
//Dependency: NMSString0x10
struct GcItemFilterDataTableEntry
{
	NMS_GameComponents::GcItemFilterData Filter;
	NMS::NMSString0x10 ID;
};

//Dependency: NMSString0x100
struct GcCreatureWeirdMovementData
{
	enum class MoveModeEnum : uint32_t
	{
		Roll = 0,
		Float = 1,
		Drill = 2,
	};

	std::vector<NMS::NMSString0x100> FeetNames;
	float BobAmount;
	float BobSpeed;
	float JumpAngle;
	NMS_GameComponents::GcCreatureWeirdMovementData::MoveModeEnum MoveMode;
	float SpinSpeed;
	NMS::NMSString0x100 Node;
};

//Dependency: GcPersistentBaseTypes
struct GcMissionConditionBaseClaimed
{
	enum class IsOnCurrentSystemEnum : uint32_t
	{
		DontCare = 0,
		Yes = 1,
		No = 2,
	};

	NMS_GameComponents::GcPersistentBaseTypes Base;
	NMS_GameComponents::GcMissionConditionBaseClaimed::IsOnCurrentSystemEnum IsOnCurrentSystem;
	int32_t MinParts;
	bool Claimed;
	bool MustBeInBase;
};

struct GcCostPoliceCargoBribe
{
	int32_t Amount;
	bool IncludeNipNip;
	bool OnlyCargoProbeInventories;
};

//Dependency: VariableSizeString
struct GcHUDMarkerData
{
	NMS::VariableSizeString Distance;
	NMS::VariableSizeString Icon;
	NMS::VariableSizeString IconBehind;
};

struct GcCostFossilComponent
{
};

struct GcCostCreatureCanLayEggs
{
};

//Dependency: Vector4f
struct GcInteractionData
{
	NMS::Vector4f Position;
	uint64_t GalacticAddress;
	uint64_t Value;
};

struct GcPlayerWeaponComponentData
{
};

struct GcBuildingPlacementErrorTypes
{
	enum class InvalidPlacementReasonEnum : uint32_t
	{
		Offline = 0,
		InvalidBiome = 1,
		InvalidAboveWater = 2,
		InvalidUnderwater = 3,
		PlanetLimitReached = 4,
		BaseLimitReached = 5,
		RegionLimitReached = 6,
		InvalidMaxBasesReached = 7,
		InvalidOverlappingAnyBase = 8,
		InvalidOverlappingSettlement = 9,
		InvalidOverlappingBase = 10,
		OutOfBaseRange = 11,
		OutOfConnectionRange = 12,
		LinkGridMismatch = 13,
		InsufficientResources = 14,
		ComplexityLimitReached = 15,
		SubstanceOnly = 16,
		InvalidPosition = 17,
		InvalidSnap = 18,
		MustPlaceOnTerrain = 19,
		Collision = 20,
		ShipInside = 21,
		PlayerInside = 22,
	};

	NMS_GameComponents::GcBuildingPlacementErrorTypes::InvalidPlacementReasonEnum InvalidPlacementReason;
};

//Dependency: GcHand
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcGrabbableData
{
	enum class GrabTypeEnum : uint32_t
	{
		Default = 0,
		EjectHandle = 1,
		ControlStickLeft = 2,
		ControlStickRight = 3,
	};

	NMS::NMSString0x10 HandPose;
	NMS::Vector2f RotationLimits;
	float AttachTime;
	float DetachTime;
	float GrabRadius;
	NMS_GameComponents::GcGrabbableData::GrabTypeEnum GrabType;
	NMS_GameComponents::GcHand Hand;
	float MovementMaxSpeed;
	float MovementRequiredForActivation;
	float MovementReturnSpeed;
	float ReleaseRadius;
	float ToggleGrabTime;
	NMS::NMSString0x20 LocatorName;
	NMS::NMSString0x20 MovementEndLocator;
	NMS::NMSString0x20 MovementStartLocator;
	bool AllowOtherWayUp;
	bool AutoGrab;
};

//Dependency: NMSString0x10
struct GcInteractionBaseBuildingState
{
	NMS::NMSString0x10 TriggerAction;
	int32_t Time;
};

struct GcInventorySortOptions
{
	enum class InventorySortEnum : uint32_t
	{
		None = 0,
		Value = 1,
		Type = 2,
		Name = 3,
		Colour = 4,
	};

	NMS_GameComponents::GcInventorySortOptions::InventorySortEnum InventorySort;
};

struct GcBuildingSpawnSlot
{
	int32_t BuildingDataIndex;
	float Probability;
	bool HasBuilding;
};

//Dependency: NMSString0x100
struct GcIkPistonData
{
	NMS::NMSString0x100 Joint1Name;
	NMS::NMSString0x100 Joint2Name;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCreatureVocalTestData
{
	NMS::NMSString0x10 Id;
	float Size;
	float Squawk;
	NMS::NMSString0x20 Genus;
};

struct GcBuildingSystemTypeEnum
{
	enum class BuildingSystemTypeEnum : uint32_t
	{
		Normal = 0,
		AbandonedSystem = 1,
	};

	NMS_GameComponents::GcBuildingSystemTypeEnum::BuildingSystemTypeEnum BuildingSystemType;
};

struct GcDeathConsequencesDifficultyOption
{
	enum class DeathConsequencesDifficultyEnum : uint32_t
	{
		None = 0,
		ItemGrave = 1,
		DestroyItems = 2,
		DestroySave = 3,
	};

	NMS_GameComponents::GcDeathConsequencesDifficultyOption::DeathConsequencesDifficultyEnum DeathConsequencesDifficulty;
};

struct GcDamageReceivedDifficultyOption
{
	enum class DamageReceivedDifficultyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcDamageReceivedDifficultyOption::DamageReceivedDifficultyEnum DamageReceivedDifficulty;
};

struct GcScannerRechargeDifficultyOption
{
	enum class ScannerRechargeDifficultyEnum : uint32_t
	{
		VeryFast = 0,
		Fast = 1,
		Normal = 2,
		Slow = 3,
	};

	NMS_GameComponents::GcScannerRechargeDifficultyOption::ScannerRechargeDifficultyEnum ScannerRechargeDifficulty;
};

struct GcCurrencyCostDifficultyOption
{
	enum class CurrencyCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Cheap = 1,
		Normal = 2,
		Expensive = 3,
	};

	NMS_GameComponents::GcCurrencyCostDifficultyOption::CurrencyCostDifficultyEnum CurrencyCostDifficulty;
};

struct GcEnergyDrainDifficultyOption
{
	enum class EnergyDrainDifficultyEnum : uint32_t
	{
		Slow = 0,
		Normal = 1,
		Fast = 2,
	};

	NMS_GameComponents::GcEnergyDrainDifficultyOption::EnergyDrainDifficultyEnum EnergyDrainDifficulty;
};

struct GcFishingDifficultyOption
{
	enum class FishingDifficultyEnum : uint32_t
	{
		AutoCatch = 0,
		LongCatchWindow = 1,
		NormalCatchWindow = 2,
		ShortCatchWindow = 3,
	};

	NMS_GameComponents::GcFishingDifficultyOption::FishingDifficultyEnum FishingDifficulty;
};

struct GcHazardDrainDifficultyOption
{
	enum class HazardDrainDifficultyEnum : uint32_t
	{
		Slow = 0,
		Normal = 1,
		Fast = 2,
	};

	NMS_GameComponents::GcHazardDrainDifficultyOption::HazardDrainDifficultyEnum HazardDrainDifficulty;
};

struct GcInventoryStackLimitsDifficultyOption
{
	enum class InventoryStackLimitsDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcInventoryStackLimitsDifficultyOption::InventoryStackLimitsDifficultyEnum InventoryStackLimitsDifficulty;
};

struct GcSubstanceCollectionDifficultyOption
{
	enum class SubstanceCollectionDifficultyEnum : uint32_t
	{
		High = 0,
		Normal = 1,
		Low = 2,
	};

	NMS_GameComponents::GcSubstanceCollectionDifficultyOption::SubstanceCollectionDifficultyEnum SubstanceCollectionDifficulty;
};

struct GcSprintingCostDifficultyOption
{
	enum class SprintingCostDifficultyEnum : uint32_t
	{
		Free = 0,
		Low = 1,
		Full = 2,
	};

	NMS_GameComponents::GcSprintingCostDifficultyOption::SprintingCostDifficultyEnum SprintingCostDifficulty;
};

//Dependency: GcDeathConsequencesDifficultyOption
//Dependency: GcDamageReceivedDifficultyOption
//Dependency: GcActiveSurvivalBarsDifficultyOption
//Dependency: GcBreakTechOnDamageDifficultyOption
//Dependency: GcScannerRechargeDifficultyOption
//Dependency: GcChargingRequirementsDifficultyOption
//Dependency: GcDamageGivenDifficultyOption
//Dependency: GcCreatureHostilityDifficultyOption
//Dependency: GcCurrencyCostDifficultyOption
//Dependency: GcNPCPopulationDifficultyOption
//Dependency: GcEnergyDrainDifficultyOption
//Dependency: GcFishingDifficultyOption
//Dependency: GcFuelUseDifficultyOption
//Dependency: GcCombatTimerDifficultyOption
//Dependency: GcHazardDrainDifficultyOption
//Dependency: GcInventoryStackLimitsDifficultyOption
//Dependency: GcItemShopAvailabilityDifficultyOption
//Dependency: GcSubstanceCollectionDifficultyOption
//Dependency: GcLaunchFuelCostDifficultyOption
//Dependency: GcReputationGainDifficultyOption
//Dependency: GcSprintingCostDifficultyOption
struct GcDifficultySettingsData
{
	NMS_GameComponents::GcActiveSurvivalBarsDifficultyOption ActiveSurvivalBars;
	NMS_GameComponents::GcBreakTechOnDamageDifficultyOption BreakTechOnDamage;
	NMS_GameComponents::GcChargingRequirementsDifficultyOption ChargingRequirements;
	NMS_GameComponents::GcCreatureHostilityDifficultyOption CreatureHostility;
	NMS_GameComponents::GcCurrencyCostDifficultyOption CurrencyCost;
	NMS_GameComponents::GcDamageGivenDifficultyOption DamageGiven;
	NMS_GameComponents::GcDamageReceivedDifficultyOption DamageReceived;
	NMS_GameComponents::GcDeathConsequencesDifficultyOption DeathConsequences;
	NMS_GameComponents::GcEnergyDrainDifficultyOption EnergyDrain;
	NMS_GameComponents::GcFishingDifficultyOption Fishing;
	NMS_GameComponents::GcFuelUseDifficultyOption FuelUse;
	NMS_GameComponents::GcCombatTimerDifficultyOption GroundCombatTimers;
	NMS_GameComponents::GcHazardDrainDifficultyOption HazardDrain;
	NMS_GameComponents::GcInventoryStackLimitsDifficultyOption InventoryStackLimits;
	NMS_GameComponents::GcItemShopAvailabilityDifficultyOption ItemShopAvailability;
	NMS_GameComponents::GcLaunchFuelCostDifficultyOption LaunchFuelCost;
	NMS_GameComponents::GcNPCPopulationDifficultyOption NPCPopulation;
	NMS_GameComponents::GcReputationGainDifficultyOption ReputationGain;
	NMS_GameComponents::GcScannerRechargeDifficultyOption ScannerRecharge;
	NMS_GameComponents::GcCombatTimerDifficultyOption SpaceCombatTimers;
	NMS_GameComponents::GcSprintingCostDifficultyOption SprintingCost;
	NMS_GameComponents::GcSubstanceCollectionDifficultyOption SubstanceCollection;
	bool AllSlotsUnlocked;
	bool BaseAutoPower;
	bool CraftingIsFree;
	bool InventoriesAlwaysInRange;
	bool SettingsLocked;
	bool StartWithAllItemsKnown;
	bool TutorialEnabled;
	bool WarpDriveRequirements;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCavesEnum
{
	enum class CaveTypesEnum : uint32_t
	{
		Underground = 0,
	};

	NMS_Toolkit::TkCavesEnum::CaveTypesEnum CaveTypes;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcEncounterType
{
	enum class EncounterTypeEnum : uint32_t
	{
		FactoryGuards = 0,
		HarvesterGuards = 1,
		ScrapHeap = 2,
		Reward = 3,
		CorruptedDroneInteract = 4,
		GroundWorms = 5,
		DroneHiveGuards = 6,
		CorruptDronePillar = 7,
		Fossil = 8,
	};

	NMS_GameComponents::GcEncounterType::EncounterTypeEnum EncounterType;
};

//Dependency: GcEncounterType
//Dependency: NMSString0x10
struct GcEncounterComponentData
{
	std::vector<NMS::NMSString0x10> InteractMissionTable;
	NMS_GameComponents::GcEncounterType EncounterType;
};

//Dependency: GcEncounterComponentData
struct GcPerformanceGuard
{
	NMS_GameComponents::GcEncounterComponentData Encounter;
	float Radius;
};

struct GcBuoyancyComponentData
{
	float AirborneSpringTime;
	float AnchorArrivalTime;
	float MaximumAnchorForce;
	float MaximumForce;
	float MinimumForce;
	float SelfRightingStrength;
	float TargetHeightBufferFactor;
	float TargetSurfaceHeightCalm;
	float TargetSurfaceHeightRough;
	float UnderwaterSpringTime;
	float UpwardRotationFactor;
	float WaveRotationFactor;
	bool SetAnchorOnPrepare;
};

//Dependency: NMSString0x10
struct GcRewardMissionOverride
{
	NMS::NMSString0x10 ForceLocalMissionSelection;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 Reward;
};

//Dependency: GcRewardMissionOverride
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryUtilityOverride
{
	NMS::NMSString0x20A Name;
	NMS::NMSString0x10 Reward;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> SpecificRewardOverrideTable;
};

//Dependency: GcInteractionActivationCost
//Dependency: GcAlienPuzzleMissionOverride
//Dependency: GcStoryUtilityOverride
//Dependency: GcAlienRace
//Dependency: GcAdditionalOptionMissionOverride
//Dependency: TkModelRendererData
//Dependency: GcInteractionDof
//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcInteractionComponentData
{
	enum class OverrideInteriorExteriorMarkerEnum : uint32_t
	{
		No = 0,
		Interior = 1,
		Exterior = 2,
	};

	enum class InteractionActionEnum : uint32_t
	{
		PressButton = 0,
		HoldButton = 1,
		Shoot = 2,
	};

	NMS_Toolkit::TkModelRendererData Renderer;
	NMS_Toolkit::TkModelRendererData RendererAlt;
	NMS_GameComponents::GcInteractionActivationCost ActivationCost;
	NMS_GameComponents::GcInteractionActivationCost SecondaryActivationCost;
	NMS_GameComponents::GcStoryUtilityOverride StoryUtilityOverrideData;
	std::vector<NMS_GameComponents::GcAdditionalOptionMissionOverride> AdditionalOptionsOverrideTable;
	std::vector<NMS_Toolkit::TkModelRendererData> EventRenderers;
	std::vector<NMS_Toolkit::TkModelRendererData> EventRenderersAlt;
	std::vector<NMS_GameComponents::GcInteractionDof> EventRenderersDoF;
	NMSTemplate InteractionSpecificData;
	std::vector<NMS_GameComponents::GcAlienPuzzleMissionOverride> PuzzleMissionOverrideTable;
	NMS::NMSString0x10 StartMissionOnUse;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 TriggerActionOnPrepare;
	NMS_GameComponents::GcInteractionDof DepthOfField;
	float AttractDistanceSq;
	float BlendFromCameraTime;
	float BlendToCameraTime;
	float InteractAngle;
	float InteractDistance;
	NMS_GameComponents::GcInteractionComponentData::InteractionActionEnum InteractionAction;
	NMS_GameComponents::GcInteractionType InteractionType;
	float InWorldUIForcedOffset;
	float InWorldUIForcedOffsetV2;
	float InWorldUIMinDistOverride;
	float InWorldUIMinDistOverrideV2;
	float InWorldUIScaler;
	NMS_GameComponents::GcInteractionComponentData::OverrideInteriorExteriorMarkerEnum OverrideInteriorExteriorMarker;
	NMS_GameComponents::GcAlienRace Race;
	float SecondaryCameraTransitionTime;
	NMS_GameComponents::GcInteractionType SecondaryInteractionType;
	bool AllowMissionUnderwater;
	bool BroadcastTriggerAction;
	bool InteractInvertFace;
	bool InWorldUIUseCameraUp;
	bool OnlyAvailableInAbandonedMode;
	bool RepeatInteraction;
	bool ReseedAfterRewardSuccess;
	bool SecondaryMeshAlwaysVisible;
	bool UseInteractCamera;
	bool UseIntermediateUI;
	bool UsePersonalPersistentBuffer;
	bool UseUnlockedInteractionIfMaintDone;
};

//Dependency: NMSString0x10
struct GcRewardForgetSpecificProductRecipe
{
	std::vector<NMS::NMSString0x10> ProductList;
};

//Dependency: GcButtonSpawnOffset
//Dependency: TkInputEnum
struct GcButtonSpawn
{
	enum class EventEnum : uint32_t
	{
		None = 0,
		Pirates = 1,
		Police = 2,
		Traders = 3,
		Walker = 4,
	};

	NMS_GameComponents::GcButtonSpawnOffset Offset;
	NMS_Toolkit::TkInputEnum Button;
	NMS_GameComponents::GcButtonSpawn::EventEnum Event;
};

//Dependency: GcButtonSpawn
struct GcButtonSpawnTable
{
	std::vector<NMS_GameComponents::GcButtonSpawn> ButtonSpawns;
};

//Dependency: GcPlayerCommunicatorMessage
struct GcPlayerCommunicatorMessageWeighted
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Message;
	int32_t Weight;
};

//Dependency: NMSString0x10
struct GcByteBeatJukeboxData
{
	NMS::NMSString0x10 Playlist[16];
	bool Playing;
	bool Shuffle;
};

//Dependency: NMSString0x10
struct GcDestroyAction
{
	NMS::NMSString0x10 PlayEffect;
	bool DestroyAll;
	bool UseDestructables;
};

//Dependency: NMSString0x10
struct GcRewardSetCurrentMission
{
	NMS::NMSString0x10 Mission;
	bool Seeded;
	bool Silent;
};

//Dependency: VariableSizeString
struct GcMissionSequenceShowSeasonTimeWarning
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	float TimeToShow;
};

struct GcCreatureAttractorComponentData
{
	enum class AttractorTypeEnum : uint32_t
	{
		Food = 0,
		Harvester = 1,
	};

	float ArriveDist;
	NMS_GameComponents::GcCreatureAttractorComponentData::AttractorTypeEnum AttractorType;
	bool Static;
	bool Universal;
};

//Dependency: TkTextureResource
struct GcByteBeatIcons
{
	NMS_Toolkit::TkTextureResource Icons[18];
	NMS_Toolkit::TkTextureResource SawTooth;
	NMS_Toolkit::TkTextureResource Sine;
	NMS_Toolkit::TkTextureResource Square;
	NMS_Toolkit::TkTextureResource Triangle;
};

struct GcMessageTitanFall
{
};

//Dependency: GcByteBeatSong
//Dependency: NMSString0x10
struct GcByteBeatLibraryData
{
	NMS_GameComponents::GcByteBeatSong MySongs[8];
	NMS::NMSString0x10 Playlist[16];
	bool AutoplayInShip;
	bool AutoplayInVehicle;
	bool AutoplayOnFoot;
	bool Shuffle;
};

//Dependency: TkCurveType
struct GcPlayerSpaceshipWarpData
{
	float EntryTime;
	float ExitTime;
	float TravelTunnelTime;
	NMS_Toolkit::TkCurveType EntryTunnelCurve;
	NMS_Toolkit::TkCurveType ExitTunnelCurve;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x800
//Dependency: NMSString0x80
struct GcIDLookupPath
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x800 Path;
	NMS::NMSString0x80 DescriptionField;
	NMS::NMSString0x80 ImageField;
	NMS::NMSString0x80 NameField;
	NMS::NMSString0x80 SubTitleField;
	bool GlobalSort;
};

//Dependency: GcIDLookupPath
struct GcIDLookupPaths
{
	std::vector<NMS_GameComponents::GcIDLookupPath> Paths;
};

struct GcMissionConditionSeasonNumber
{
	std::vector<int32_t> IncludeOtherSeasons;
	int32_t ActiveSeason;
	bool IncludeRemix;
};

struct GcSentinelPounceBalance
{
	float MaxAngle;
	float MaxFireRateScore;
	float MaxRange;
	float MinFireRateScore;
	float MinRange;
	float MinTimeBetweenPounces;
	float OtherPounceTimeMultiplier;
	float PounceTimeFireRateScoreExtra;
};

//Dependency: NMSString0x10
struct GcProductToCollect
{
	NMS::NMSString0x10 Product;
	int32_t Amount;
};

struct GcByteBeatPlayerComponentData
{
	enum class ByteBeatPlayerTypeEnum : uint32_t
	{
		Player = 0,
		Settlement = 1,
	};

	NMS_GameComponents::GcByteBeatPlayerComponentData::ByteBeatPlayerTypeEnum ByteBeatPlayerType;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcDroneGun
{
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x20> RequiredDestructibles;
	NMS::NMSString0x20 Locator;
	bool LaunchDuringAnim;
	bool MirrorAnim;
};

struct GcPlayerConflictData
{
	enum class ConflictLevelEnum : uint32_t
	{
		Low = 0,
		Default = 1,
		High = 2,
		Pirate = 3,
	};

	NMS_GameComponents::GcPlayerConflictData::ConflictLevelEnum ConflictLevel;
};

struct GcByteBeatSwitchComponentData
{
	float Temp;
};

struct GcDroneControlData
{
	float DirectionBrake;
	float HeightAdjustDownStrength;
	float HeightAdjustStrength;
	float LeanInMoveDirStrength;
	float LookStrength;
	float LookStrengthVertical;
	float MaxHeight;
	float MaxPitch;
	float MaxSpeed;
	float MinHeight;
	float RepelForce;
	float RepelRange;
	float StopTime;
	float Strength;
};

struct GcMissionConditionSystemHasRuinsPlanet
{
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificProduct
{
	NMS::NMSString0x20A SeasonRewardListFormat;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RequiresTech;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool ForceSpecialMessage;
	bool HideAmountInMessage;
	bool HideInSeasonRewards;
	bool Silent;
};

//Dependency: NMSString0x20A
struct GcRewardDummyLocID
{
	NMS::NMSString0x20A LocID;
	int32_t AmountMax;
	int32_t AmountMin;
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcCustomisationBackpackData
{
	NMS::Vector3f ActiveJetOffset;
	NMS::NMSString0x20 NodeName;
};

struct GcCostCanFreighterMegaWarp
{
};

//Dependency: GcAlienRace
struct GcNPCRaceProbabilityModifierData
{
	float Modifier;
	NMS_GameComponents::GcAlienRace Race;
};

//Dependency: GcNPCRaceProbabilityModifierData
//Dependency: NMSString0x10
struct GcNPCProbabilityReactionData
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcNPCRaceProbabilityModifierData> RaceModifiers;
	float Probability;
};

//Dependency: NMSString0x10
struct GcCostItemListIndexed
{
	enum class ItemOutOfBoundsBehaviourEnum : uint32_t
	{
		NoCost = 0,
		UseFirst = 1,
		UseLast = 2,
	};

	enum class ItemIndexProviderEnum : uint32_t
	{
		None = 0,
		Biome = 1,
		SubBiome = 2,
	};

	std::vector<NMS::NMSString0x10> Costs;
	int32_t Amount;
	NMS_GameComponents::GcCostItemListIndexed::ItemIndexProviderEnum ItemIndexProvider;
	NMS_GameComponents::GcCostItemListIndexed::ItemOutOfBoundsBehaviourEnum ItemOutOfBoundsBehaviour;
	bool AssertIfOutOfBounds;
};

//Dependency: NMSString0x20A
struct GcCostHasActiveScanEvent
{
	NMS::NMSString0x20A OptionalEventID;
	NMS::NMSString0x20A Text;
};

struct GcStateTimeEvent
{
	float RandomSeconds;
	float Seconds;
	bool UseMissionClock;
};

struct GcHologramType
{
	enum class HologramTypeEnum : uint32_t
	{
		Mesh = 0,
		PlayerCharacter = 1,
		PlayerShip = 2,
		PlayerMultiTool = 3,
	};

	NMS_GameComponents::GcHologramType::HologramTypeEnum HologramType;
};

struct GcHologramState
{
	enum class HologramStateEnum : uint32_t
	{
		Hologram = 0,
		Attract = 1,
		Explode = 2,
		Disabled = 3,
	};

	NMS_GameComponents::GcHologramState::HologramStateEnum HologramState;
};

struct GcHologramPivotType
{
	enum class HologramPivotTypeEnum : uint32_t
	{
		Origin = 0,
		CentreBounds = 1,
	};

	NMS_GameComponents::GcHologramPivotType::HologramPivotTypeEnum HologramPivotType;
};

//Dependency: GcHologramType
//Dependency: GcHologramState
//Dependency: GcHologramPivotType
//Dependency: Colour
struct GcHologramComponentData
{
	NMS::Colour HologramColour;
	float AttractDistance;
	NMS_GameComponents::GcHologramType HologramType;
	float MaxSize;
	float MinSize;
	NMS_GameComponents::GcHologramState OnInteractState;
	float RotateTime;
	NMS_GameComponents::GcHologramPivotType xPivot;
	NMS_GameComponents::GcHologramPivotType yPivot;
	NMS_GameComponents::GcHologramPivotType zPivot;
	bool DisableOnInteract;
	bool DisableWhenNotInteracting;
	bool ScaleInAndOut;
	bool UseStationLightColour;
};

struct GcRewardFrigateDamageResponse
{
	enum class ResponseEnum : uint32_t
	{
		StayOut = 0,
		ReturnHome = 1,
		CheckForMoreDamage = 2,
		ShowDamagedCaptain = 3,
		ShowExpeditionCaptain = 4,
		AbortExpedition = 5,
	};

	NMS_GameComponents::GcRewardFrigateDamageResponse::ResponseEnum Response;
};

//Dependency: Vector3f
struct GcDebugPlanetPos
{
	NMS::Vector3f Position;
	bool OverridePosition;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcCreatureDebugWaypoint
{
	enum class WaypointTypeEnum : uint32_t
	{
		Move = 0,
		MoveAlt = 1,
		Idle = 2,
	};

	NMS::Vector3f Position;
	NMS::NMSString0x10 Anim;
	float Time;
	NMS_GameComponents::GcCreatureDebugWaypoint::WaypointTypeEnum WaypointType;
};

//Dependency: GcCreatureDebugWaypoint
//Dependency: GcCreatureTypes
struct GcCreatureDebugSpawnData
{
	enum class OnCompleteEnum : uint32_t
	{
		Hold = 0,
		Loop = 1,
		Destroy = 2,
	};

	std::vector<NMS_GameComponents::GcCreatureDebugWaypoint> Waypoints;
	int32_t CreatureIndex;
	int32_t CurrentWaypoint;
	float InitialDelay;
	NMS_GameComponents::GcCreatureDebugSpawnData::OnCompleteEnum OnComplete;
	float SmoothTime;
	float SmoothTimer;
	NMS_GameComponents::GcCreatureTypes SpecialCreatureType;
	float Timer;
	bool ArrivedAtCurrentWaypoint;
	bool EcosystemCreature;
};

//Dependency: NMSString0x40
struct GcDiscoveryOwner
{
	int32_t Timestamp;
	NMS::NMSString0x40 LocalID;
	NMS::NMSString0x40 OnlineID;
	NMS::NMSString0x40 Platform;
	NMS::NMSString0x40 Username;
};

//Dependency: GcDiscoveryOwner
//Dependency: GcSeed
//Dependency: NMSString0x20
//Dependency: GcBiomeType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcCreatureTypes
struct GcPetData
{
	NMS::NMSString0x20A CustomSpeciesName;
	NMS::GcSeed BoneScaleSeed;
	NMS::GcSeed ColourBaseSeed;
	NMS::NMSString0x10 CreatureID;
	NMS::GcSeed CreatureSecondarySeed;
	NMS::GcSeed CreatureSeed;
	std::vector<NMS::NMSString0x20A> Descriptors;
	uint64_t BirthTime;
	uint64_t GenusSeed;
	uint64_t LastEggTime;
	uint64_t LastTrustDecreaseTime;
	uint64_t LastTrustIncreaseTime;
	uint64_t SpeciesSeed;
	uint64_t UA;
	NMS_GameComponents::GcDiscoveryOwner SenderData;
	float Traits[3];
	float Moods[2];
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	float Scale;
	float Trust;
	NMS::NMSString0x20 CustomName;
	bool AllowUnmodifiedReroll;
	bool EggModified;
	bool HasBeenSummoned;
	bool HasFur;
	bool Predator;
};

struct GcPetBehaviours
{
	enum class PetBehaviourEnum : uint32_t
	{
		None = 0,
		Idle = 1,
		Eat = 2,
		Poop = 3,
		LayEgg = 4,
		FollowPlayer = 5,
		AdoptedFollowPlayer = 6,
		ScanForResource = 7,
		FindResource = 8,
		FindHazards = 9,
		AttackHazard = 10,
		FindBuilding = 11,
		Fetch = 12,
		Explore = 13,
		Emote = 14,
		GestureReact = 15,
		OrderedToPos = 16,
		ComeHere = 17,
		Mine = 18,
		Summoned = 19,
		Adopted = 20,
		Hatched = 21,
		PostInteract = 22,
		Rest = 23,
		Attack = 24,
		Watch = 25,
		Greet = 26,
		TeleportToPlayer = 27,
	};

	NMS_GameComponents::GcPetBehaviours::PetBehaviourEnum PetBehaviour;
};

//Dependency: NMSString0x10
struct GcCameraFollowSettings
{
	NMS::NMSString0x10 Name;
	float AvoidCollisionLRSpeed;
	float AvoidCollisionPushSpeed;
	float AvoidCollisionUDSpeed;
	float BackMaxDistance;
	float BackMinDistance;
	float BackSlopeAdjust;
	float BackSlopeRotationAdjust;
	float CenterBlendTime;
	float CenterMaxSpeed;
	float CenterMaxSpring;
	float CenterStartSpeed;
	float CenterStartTime;
	float CustomBlendTime;
	float DistSpeed;
	float DistSpeedOutsideMainRange;
	float DistStiffness;
	float HorizRotationAngleMaxPerFrame;
	float LeftMaxDistance;
	float LeftMinDistance;
	float LookStickLimitAngle;
	float LRProbesRadius;
	float LRProbesRange;
	float MinMoveVelToTriggerSpring;
	float MinSpeed;
	int32_t NumLRProbes;
	int32_t NumUDProbes;
	float OffsetX;
	float OffsetY;
	float OffsetYAlt;
	float OffsetYExtraMaxDistance;
	float OffsetYSlopeExtra;
	float OffsetZFlat;
	float PanFar;
	float PanNear;
	float ProbeCenterX;
	float ProbeCenterY;
	float PushForwardDropoffLR;
	float PushForwardDropoffUD;
	float SpeedRange;
	float SpringSpeed;
	float UDProbesRange;
	float UpGamma;
	float UpMaxDistance;
	float UpMinDistance;
	float UpSlopeAdjust;
	float UpWaveAdjust;
	float UpWaveAdjustMaxHeight;
	float VelocityAnticipate;
	float VelocityAnticipateSpringSpeed;
	float VertMaxSpring;
	float VertRotationMax;
	float VertRotationMin;
	float VertRotationOffset;
	float VertRotationOffsetMaxAngle;
	float VertRotationOffsetMinAngle;
	float VertRotationSpeed;
	bool AvoidCollisionLRUseStickDelay;
	bool AvoidCollisionUDUseStickDelay;
	bool EnableCollisionDetection;
	bool LockToObjectOnIdle;
	bool UseCustomBlendTime;
	bool UseSpeedBasedSpring;
	bool VertStartLookingDown;
};

//Dependency: GcCharacterCustomisationSaveData
struct GcPetCustomisationData
{
	NMS_GameComponents::GcCharacterCustomisationSaveData Data[3];
};

//Dependency: Vector3f
struct GcDebugCameraEntry
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	float Distance;
	float FOV;
	float SpeedModifier;
};

//Dependency: GcDebugCameraEntry
struct GcDebugCamera
{
	std::vector<NMS_GameComponents::GcDebugCameraEntry> Waypoints;
	float BaseSpeed;
	int32_t CurrentWaypoint;
	float CurrentWaypointProgress;
	float Smoothing;
};

//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: GcResource
struct GcDebugObjectDecoration
{
	NMS::Vector3f Facing;
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
	NMS::Vector3f Up;
	NMS::VariableSizeString Filename;
	NMS::GcSeed Seed;
	NMS::GcResource Resource;
};

//Dependency: GcCharacterCustomisationSaveData
//Dependency: Vector3f
struct GcMechDebugSpawnData
{
	NMS::Vector3f Destination;
	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS_GameComponents::GcCharacterCustomisationSaveData CustomisatonData;
	float MoveDelay;
	float TitanFallDelay;
	bool Running;
	bool UseCustomisation;
};

//Dependency: GcPetData
//Dependency: GcPetCustomisationData
//Dependency: GcResourceElement
//Dependency: GcAlienRace
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcNPCDebugSpawnData
{
	enum class DebugNPCBehaviourEnum : uint32_t
	{
		None = 0,
		Fishing = 1,
	};

	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS_GameComponents::GcPetData Pet;
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation;
	NMS_GameComponents::GcResourceElement PropResource;
	std::vector<NMS::NMSString0x10> Idles;
	NMS::GcSeed PropSeed;
	NMS::GcSeed Seed;
	std::vector<NMS::Vector3f> Waypoints;
	NMS_GameComponents::GcNPCDebugSpawnData::DebugNPCBehaviourEnum DebugNPCBehaviour;
	float InitialDelay;
	float PetFollowOffset;
	NMS_GameComponents::GcAlienRace Race;
	bool AddPetAccessories;
	bool FollowWaypoints;
	bool PlayIdles;
	bool RidePet;
	bool Run;
};

//Dependency: GcExperienceDebugTriggerActionTypes
struct GcExperienceDebugTriggerAction
{
	NMS_GameComponents::GcExperienceDebugTriggerActionTypes Action;
	int32_t IntParameter;
};

//Dependency: GcExperienceDebugTriggerAction
struct GcExperienceDebugTriggerInput
{
	enum class KeyPressEnum : uint32_t
	{
		_1 = 0,
		_2 = 1,
		_3 = 2,
		_4 = 3,
		_5 = 4,
		_6 = 5,
		_7 = 6,
		_8 = 7,
		_9 = 8,
		PadUp = 9,
		PadDown = 10,
		PadLeft = 11,
		PadRight = 12,
	};

	std::vector<NMS_GameComponents::GcExperienceDebugTriggerAction> Actions;
	NMS_GameComponents::GcExperienceDebugTriggerInput::KeyPressEnum KeyPress;
};

//Dependency: GcDebugPlanetPos
//Dependency: GcCreatureDebugSpawnData
//Dependency: GcPetData
//Dependency: GcPetBehaviours
//Dependency: GcCameraFollowSettings
//Dependency: GcPetCustomisationData
//Dependency: GcDebugCamera
//Dependency: GcDebugObjectDecoration
//Dependency: GcAIShipDebugSpawnData
//Dependency: GcMechDebugSpawnData
//Dependency: GcNPCDebugSpawnData
//Dependency: GcDebugShipTravelLine
//Dependency: GcExperienceDebugTriggerInput
//Dependency: GcSentinelTypes
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: Vector2f
struct GcDebugScene
{
	NMS_GameComponents::GcDebugPlanetPos PlanetPositions[6];
	NMS::Vector3f DebugDroneSpawn;
	NMS::Vector3f DebugDroneTarget;
	NMS::Vector3f DebugFlybyDir;
	NMS::Vector3f DebugFlybyTarget;
	NMS::Vector3f DebugFrigateFlybySpawnPos;
	NMS::Vector3f DebugQueenSpawn;
	NMS::Vector3f DebugShipSpawnFacing;
	NMS::Vector3f DebugShipSpawnPos;
	NMS::Vector3f DebugShipSpawnUp;
	NMS::Vector3f DebugSpaceBattleSpawnPosOffset;
	NMS::Vector3f DebugSpaceBattleSpawnRotOffset;
	NMS::Vector3f DebugWalkerSpawn;
	NMS::Vector3f DebugWalkerTarget;
	NMS::Vector3f ForcedSunPosition;
	NMS::Vector3f SandwormSpawnPos;
	NMS_GameComponents::GcPetData Pets[18];
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation[18];
	NMS_GameComponents::GcCameraFollowSettings VehicleCameraOverride[7];
	NMS::NMSString0x10 BackgroundSpaceEncounter;
	std::vector<NMS_GameComponents::GcDebugCamera> DebugCameraPaths;
	std::vector<NMS_GameComponents::GcCreatureDebugSpawnData> DebugCreatureSpawns;
	std::vector<NMS_GameComponents::GcDebugObjectDecoration> DebugDecorations;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugEnemyShipSpawns;
	NMS::NMSString0x10 DebugExperienceCamShake;
	NMS::GcSeed DebugFlybySeed;
	std::vector<NMS_GameComponents::GcMechDebugSpawnData> DebugMechSpawns;
	std::vector<NMS_GameComponents::GcNPCDebugSpawnData> DebugNPCSpawns;
	std::vector<NMS_GameComponents::GcDebugShipTravelLine> DebugShipPaths;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugShipSpawns;
	std::vector<NMS::NMSString0x10> DefaultNPCIdles;
	NMS::NMSString0x10 GhostShipReward;
	NMS::NMSString0x10 LivingFrigateReward;
	NMS::NMSString0x10 NormandyReward;
	std::vector<NMS::Vector3f> PetRideWayPoints;
	NMS::NMSString0x10 PulseEncounter;
	std::vector<NMS_GameComponents::GcExperienceDebugTriggerInput> TriggerActions;
	NMS::Vector2f CloudStratosphereWindOffset;
	NMS::Vector2f CloudWindOffset;
	float CameraSpinDistanceOffset;
	float CameraSpinRevolutions;
	float CameraSpinTime;
	float CameraSpinVerticalOffset;
	float CloudAnimScale;
	float CloudCover;
	float CustomShipDockedTime;
	NMS_GameComponents::GcSentinelTypes DebugDroneType;
	float DebugFlybyRange;
	float DebugFrigateFlybyHeightOffset;
	float DebugFrigateFlybyRotation;
	int32_t DebugNumDrones;
	float FlyCamSmoothFactor;
	float FlyCamSpeedModifier;
	float NPCIdleMaxDelay;
	float NPCIdleMinDelay;
	NMS_GameComponents::GcPetBehaviours PetForceBehaviour;
	int32_t PetRideIndex;
	float PlayerWalkSpeed;
	float ShipSpawningMultiplier;
	bool Active;
	bool AllowOverrideWaterSettings;
	bool AutoCreateDecorations;
	bool AutoSave;
	bool BusyShips;
	NMS_Toolkit::TkCurveType CameraSpinEasing;
	bool ControlClouds;
	bool DebugDraw;
	bool DebugDroneScanPlayer;
	bool FlyCamSmooth;
	bool ForcePlayerWalk;
	bool ForceSunPosition;
	bool LoadPetsFromDebugScene;
	bool PulseEncountersAlwaysPersist;
	bool ResetMoodsOnSummon;
	bool ShowAccessoryMoods;
	bool UpdatePetMoods;
};

//Dependency: TkModelResource
struct GcCameraAnimationData
{
	NMS_Toolkit::TkModelResource CameraAnimation;
};

struct GcMissionConditionCanRenameDiscovery
{
	bool ValueToReturnWhileSearchActive;
};

//Dependency: Vector4f
struct GcCameraAnomalySetupData
{
	NMS::Vector4f CameraAt;
	NMS::Vector4f CameraOffset;
	NMS::Vector4f CameraUp;
	NMS::Vector4f SunDirection;
};

//Dependency: VariableSizeString
struct GcSelectableObjectData
{
	NMS::VariableSizeString Filename;
};

//Dependency: GcSelectableObjectData
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcSelectableObjectList
{
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcSelectableObjectData> Options;
	NMS_GameComponents::GcAlienRace Race;
};

//Dependency: TkCurveType
//Dependency: Vector2f
struct GcCameraFocusBuildingControlSettings
{
	NMS::Vector2f ClampRange;
	float MaxStepRate;
	float MaxStepRateAccumulatedInput;
	float MinStepRate;
	float SmoothTime;
	float StepSize;
	bool Clamp;
	NMS_Toolkit::TkCurveType StepRateCurve;
};

//Dependency: GcResourceElement
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcSpawnComponentOption
{
	NMS_GameComponents::GcResourceElement SpecificModel;
	NMS::NMSString0x10 Name;
	NMS::GcSeed Seed;
};

//Dependency: GcResourceElement
//Dependency: VariableSizeString
//Dependency: GcSpawnComponentOption
//Dependency: GcAISpaceshipTypes
//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcCreatureSpawnComponentData
{
	enum class SpawnerModeEnum : uint32_t
	{
		Hidden = 0,
		Visible = 1,
		HideOnSpawn = 2,
		HiddenTimer = 3,
	};

	NMS_GameComponents::GcResourceElement SpecificModel;
	NMS::NMSString0x10 Creature;
	NMS::VariableSizeString Model;
	NMS::GcSeed Seed;
	std::vector<NMS_GameComponents::GcSpawnComponentOption> SpawnOptionList;
	NMS::NMSString0x10 TriggerID;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	int32_t FunctionKey;
	float Scale;
	NMS_GameComponents::GcAISpaceshipTypes ShipAIOverride;
	NMS_GameComponents::GcCreatureSpawnComponentData::SpawnerModeEnum SpawnerMode;
	float StartTimeMax;
	float StartTimeMin;
	float TriggerDistance;
	bool SpawnAlert;
};

//Dependency: NMSString0x10
struct GcMissionConditionHasBait
{
	NMS::NMSString0x10 SpecificID;
	bool OnlyPrimaryBait;
	bool RequireInBaitBox;
	bool TakeSpecificBaitIDFromSeasonData;
};

//Dependency: NMSString0x10
struct GcCameraShakeAction
{
	NMS::NMSString0x10 Shake;
	float FalloffMax;
	float FalloffMin;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCommunityResearchTier
{
	int32_t CompletedTiers;
	int32_t MissionIndex;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeTierFromSeasonData;
};

struct GcCameraShakeCapturedData
{
	float ShakeFrequency;
	float ShakeStrength;
	float VibrateFrequency;
	float VibrateStrength;
	bool Active;
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: VariableSizeString
struct GcMissionSequenceCommunicatorOnTakeOff
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: NMSString0x10
struct GcCameraShakeComponentData
{
	NMS::NMSString0x10 ShakeID;
	float FalloffDistanceMax;
	float FalloffDistanceMin;
};

//Dependency: NMSString0x10
struct GcRewardMissionMessage
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastInMultiplayer;
};

//Dependency: Vector3f
struct GcCameraShakeMechanicalData
{
	NMS::Vector3f ExtraShakeFrequency;
	NMS::Vector3f ExtraVibrateFrequency;
	NMS::Vector3f ShakeFrequency;
	NMS::Vector3f ShakeStrength;
	NMS::Vector3f VibrateFrequency;
	NMS::Vector3f VibrateStrength;
	bool Active;
};

//Dependency: GcCameraShakeMechanicalData
//Dependency: NMSString0x10
//Dependency: GcCameraShakeCapturedData
struct GcCameraShakeData
{
	NMS_GameComponents::GcCameraShakeMechanicalData MechanicalData;
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcCameraShakeCapturedData CapturedData;
	float DecayRate;
	float FovFrequency;
	float FovStrength;
	float StrengthScale;
	float ThirdPersonDamp;
	float TimeStart;
	float TotalTime;
	float VRStrength;
};

struct GcCostSalvageTool
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: VariableSizeString
struct TkSpeedLineData
{
	enum class LinesPositionEnum : uint32_t
	{
		Absolute = 0,
		Relative = 1,
	};

	NMS::Colour ColourEnd;
	NMS::Colour ColourOrigin;
	NMS::VariableSizeString Material;
	float Alpha;
	float FadeTime;
	float Length;
	float Lifetime;
	NMS_Toolkit::TkSpeedLineData::LinesPositionEnum LinesPosition;
	float MaxVisibleSpeed;
	float MinVisibleSpeed;
	int32_t NumberOfParticles;
	float Radius;
	float RemoveCylinderRadius;
	float Speed;
	float Width;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcCostInteractionNeedsMaintenance
{
	NMS::NMSString0x20A CantAffordLocID;
};

//Dependency: GcOutpostLSystemPair
//Dependency: NMSString0x10
struct GcOutpostComponentData
{
	NMS::NMSString0x10 Door;
	std::vector<NMS_GameComponents::GcOutpostLSystemPair> LSystems;
	float ApproachAngle;
	float ApproachNodeTargetOffset;
	float ApproachRange;
	float ApproachSpeed;
	float CircleRadius;
	float DockingAttractConeAngle;
	float DockingAttractFacingAngle;
	float DockingAttractRange;
	float LandingHeight;
	float LandingSpeed;
	float PlayerAutoLandRange;
	float PostTakeOffExtraPlayerHeight;
	float PostTakeOffExtraPlayerSpeed;
	float TakeOffAlignTime;
	float TakeOffBoost;
	float TakeOffExtraAIHeight;
	float TakeOffFwdDist;
	float TakeOffHeight;
	float TakeOffProgressForExtraHeight;
	float TakeOffSpeed;
	float TakeOffTime;
	bool AIDestination;
	bool Anomaly;
	bool CheckLandingAreaClear;
	bool Frigate;
	bool HasDoors;
	bool HasOwnGravity;
	bool NexusExterior;
	bool NexusInterior;
	bool RotateToDock;
	bool SpaceStation;
};

struct GcMissionDifficulty
{
	enum class MissionDifficultyEnum : uint32_t
	{
		Easy = 0,
		Normal = 1,
		Hard = 2,
	};

	NMS_GameComponents::GcMissionDifficulty::MissionDifficultyEnum MissionDifficulty;
};

struct GcMissionConditionExocraftMoving
{
};

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcPlayerHazardData
{
	NMS::NMSString0x10 Damage;
	NMS::Vector2f DamageRate;
	NMS::Vector2f ProtectionTime;
	NMS::Vector2f WoundRate;
	float CapValue;
	float CriticalValue;
	float OutputMaxAddition;
	float OutputMinAddition;
	float OutputMultiplier;
	float ProtectionInitialTime;
	float RechargeInitialTime;
	float RechargeTime;
	float TriggerValue;
	NMS_Toolkit::TkCurveType DisplayCurve;
	bool Increases;
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcMissionConditionIsTechnologyRepaired
{
	NMS::NMSString0x10 SpecificComponent;
	NMS::NMSString0x10 Technology;
	int32_t RepairedComponents;
	NMS_GameComponents::GcStatsTypes TechStat;
	bool CountAsRepairIfTechMissing;
};

//Dependency: GcConstructionPart
struct GcConstructionPartGroup
{
	std::vector<NMS_GameComponents::GcConstructionPart> ValidParts;
};

struct GcDifficultyInventoryStackSizeOptionData
{
	int32_t MaxProductStackSizes[13];
	int32_t MaxSubstanceStackSizes[13];
	int32_t ProductStackLimit;
	int32_t SubstanceStackLimit;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcCameraShakeTriggerData
{
	NMS::NMSString0x10 Anim;
	int32_t FrameStart;
	NMS::NMSString0x20 Shake;
};

struct GcRewardSetFirstPurpleSystemUA
{
};

//Dependency: NMSString0x10
struct GcRewardInstallTech
{
	enum class InventoryToInstallInEnum : uint32_t
	{
		Personal = 0,
		PersonalTech = 1,
		Ship = 2,
		ShipTech = 3,
		Freighter = 4,
		Vehicle = 5,
		Weapon = 6,
	};

	NMS::NMSString0x10 ReplaceExistingTech;
	NMS::NMSString0x10 TechId;
	NMS_GameComponents::GcRewardInstallTech::InventoryToInstallInEnum InventoryToInstallIn;
	int32_t SeedOffset;
	bool InstallBroken;
	bool Silent;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcCreatureFilename
{
	NMS::VariableSizeString ExtraFilename;
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 ID;
};

struct GcShipAIDeathData
{
	float BrakeForce;
	float DroneDeathBoomTotalTime;
	float DroneDeathForce;
	float DroneDeathOffset;
	float DroneDeathTime;
	float DroneDeathTimeout;
	int32_t DroneNumDeathBooms;
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMultiSpecificItemEntry
{
	enum class MultiItemRewardTypeEnum : uint32_t
	{
		Product = 0,
		Substance = 1,
		ProcTech = 2,
		ProcProduct = 3,
		InventorySlot = 4,
		InventorySlotShip = 5,
		InventorySlotWeapon = 6,
		CommunityTierProduct = 7,
	};

	NMS::NMSString0x20A CustomRewardLocID;
	NMS::NMSString0x20A ProcTechGroup;
	std::vector<NMS::NMSString0x10> CommunityTierProductList;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 SeasonRewardListFormat;
	int32_t Amount;
	NMS_GameComponents::GcMultiSpecificItemEntry::MultiItemRewardTypeEnum MultiItemRewardType;
	NMS_GameComponents::GcRarity ProcProdRarity;
	NMS_GameComponents::GcProceduralProductCategory ProcProdType;
	int32_t ProcTechQuality;
	bool AlsoTeachTechBoxRecipe;
	bool HideInSeasonRewards;
	bool IllegalProcTech;
	bool SentinelProcTech;
};

//Dependency: GcMultiSpecificItemEntry
struct GcRewardMultiSpecificItems
{
	std::vector<NMS_GameComponents::GcMultiSpecificItemEntry> Items;
	bool Silent;
};

//Dependency: TkCurveType
struct GcCameraWarpSettings
{
	float FocusPointDist;
	float OffsetXFrequency;
	float OffsetXPhase;
	float OffsetXRange;
	float OffsetYBias;
	float OffsetYFrequency_1;
	float OffsetYFrequency_2;
	float OffsetYPhase_1;
	float OffsetYPhase_2;
	float OffsetYRange;
	float OffsetYStartBias;
	float OffsetZBias;
	float OffsetZFrequency_1;
	float OffsetZFrequency_2;
	float OffsetZPhase_1;
	float OffsetZPhase_2;
	float OffsetZRange;
	float OffsetZStartBias;
	float RollRange;
	float YawnRange;
	NMS_Toolkit::TkCurveType OffsetXCurve;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkGridLayersEnum
{
	enum class GridLayerTypesEnum : uint32_t
	{
		Small = 0,
		Large = 1,
		Resources_Heridium = 2,
		Resources_Iridium = 3,
		Resources_Copper = 4,
		Resources_Nickel = 5,
		Resources_Aluminium = 6,
		Resources_Gold = 7,
		Resources_Emeril = 8,
	};

	NMS_Toolkit::TkGridLayersEnum::GridLayerTypesEnum GridLayerTypes;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCatalogueGroups
{
	enum class CatalogueGroupEnum : uint32_t
	{
		MaterialsAndItems = 0,
		CraftingAndTechnology = 1,
		Buildables = 2,
		Recipes = 3,
		Wonders = 4,
	};

	NMS_GameComponents::GcCatalogueGroups::CatalogueGroupEnum CatalogueGroup;
};

struct GcHazardValues
{
	float Extreme;
	float Normal;
};

//Dependency: Colour
struct GcColourModifier
{
	NMS::Colour ForceColourTo;
	float MultiplySaturation;
	float MultiplyValue;
	float OffsetSaturation;
	float OffsetValue;
	bool ForceColour;
};

//Dependency: GcColourModifier
struct GcWeatherColourModifiers
{
	NMS_GameComponents::GcColourModifier HeavyAirColour[5];
	NMS_GameComponents::GcColourModifier CloudColour1;
	NMS_GameComponents::GcColourModifier CloudColour2;
	NMS_GameComponents::GcColourModifier FogColour;
	NMS_GameComponents::GcColourModifier HeightFogColour;
	NMS_GameComponents::GcColourModifier HorizonColour;
	NMS_GameComponents::GcColourModifier LightColour;
	NMS_GameComponents::GcColourModifier SkyColour;
	NMS_GameComponents::GcColourModifier SkyUpperColour;
	NMS_GameComponents::GcColourModifier SunColour;
};

//Dependency: GcWeatherColourModifiers
//Dependency: GcFogProperties
//Dependency: Vector2f
struct GcStormProperties
{
	NMS_GameComponents::GcWeatherColourModifiers ColourModifiers;
	NMS_GameComponents::GcFogProperties Fog;
	NMS::Vector2f HazardModifiers[6];
	float Weighting;
};

//Dependency: Colour
struct GcLightShaftProperties
{
	NMS::Colour LightShaftColourBottom;
	NMS::Colour LightShaftColourTop;
	float LightShaftBottom;
	float LightShaftScattering;
	float LightShaftStrength;
	float LightShaftTop;
};

//Dependency: VariableSizeString
//Dependency: GcHazardValues
//Dependency: GcStormProperties
//Dependency: GcWeatherColourModifiers
//Dependency: GcFogProperties
//Dependency: GcScreenFilters
//Dependency: GcLightShaftProperties
//Dependency: GcSkyProperties
//Dependency: NMSString0x10
struct GcWeatherProperties
{
	NMS_GameComponents::GcWeatherColourModifiers ExtremeColourModifiers;
	NMS_GameComponents::GcFogProperties ExtremeFog;
	NMS_GameComponents::GcFogProperties FlightFog;
	NMS_GameComponents::GcFogProperties Fog;
	NMS_GameComponents::GcFogProperties StormFog;
	NMS_GameComponents::GcLightShaftProperties LightShaftProperties;
	NMS_GameComponents::GcLightShaftProperties StormLightShaftProperties;
	std::vector<NMS::VariableSizeString> HeavyAir;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcScreenFilters> StormFilterOptions;
	std::vector<NMS_GameComponents::GcStormProperties> Storms;
	std::vector<NMS::NMSString0x10> WeatherEffectsIds;
	std::vector<NMS::NMSString0x10> WeatherHazardsIds;
	NMS_GameComponents::GcHazardValues LifeSupportDrain[6];
	NMS_GameComponents::GcHazardValues Radiation[6];
	NMS_GameComponents::GcSkyProperties Sky;
	NMS_GameComponents::GcHazardValues SpookLevel[6];
	NMS_GameComponents::GcHazardValues Temperature[6];
	NMS_GameComponents::GcHazardValues Toxicity[6];
	float RainbowChance[4];
	float ExtremeWeatherChance;
	float HighStormsChance;
	float LowStormsChance;
	float MaxStormFilterBlend;
	bool OverrideRadiation;
	bool OverrideSpookLevel;
	bool OverrideTemperature;
	bool OverrideToxicity;
	bool UseLightShaftProperties;
	bool UseStormLightShaftProperties;
	bool UseWeatherFog;
	bool UseWeatherSky;
};

//Dependency: GcCombatEffectType
struct GcImpactCombatEffectData
{
	NMS_GameComponents::GcCombatEffectType CombatEffectType;
	float CurrentDuration;
	float DamagePerSeccond;
	float TotalDuration;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryEntryBranch
{
	NMS::NMSString0x20A Entry;
	NMS::NMSString0x10 RequiresMission;
	bool ConditionMissionComplete;
};

//Dependency: NMSString0x10
struct GcRewardIncrementStat
{
	NMS::NMSString0x10 Stat;
	int32_t Amount;
};

//Dependency: VariableSizeString
struct GcWeightedFilename
{
	NMS::VariableSizeString Filename;
	float Weight;
};

struct GcChairComponentData
{
};

//Dependency: TkEqualityEnum
struct GcMissionConditionIsPlayerWanted
{
	int32_t Level;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: GcCombatEffectsProperties
struct GcCombatEffectsComponentData
{
	NMS_GameComponents::GcCombatEffectsProperties EffectsProperties[6];
};

//Dependency: NMSString0x10
struct GcCharacterAlternateAnimation
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Replacement;
};

struct GcRewardPoliceScanSignal
{
	bool Attack;
};

//Dependency: NMSString0x80
struct GcModSettingsInfo
{
	std::vector<uint64_t> Dependencies;
	uint64_t AuthorID;
	uint64_t ID;
	uint64_t LastUpdated;
	uint16_t ModPriority;
	NMS::NMSString0x80 Author;
	NMS::NMSString0x80 Name;
	bool Enabled;
	bool EnabledVR;
};

//Dependency: GcModSettingsInfo
struct GcModSettings
{
	std::vector<NMS_GameComponents::GcModSettingsInfo> Data;
	bool DisableAllMods;
};

struct GcRewardHazard
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool Silent;
};

//Dependency: NMSString0x10
struct GcCreatureBehaviourTreeData
{
	NMS::NMSString0x10 Id;
	std::vector<NMSTemplate> Nodes;
};

//Dependency: GcCreatureBehaviourTreeData
struct GcCreatureBehaviourTrees
{
	std::vector<NMS_GameComponents::GcCreatureBehaviourTreeData> BehaviourTree;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkRandomComponentData
{
	int32_t Seed;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostTableEntry
{
	NMS::NMSString0x20A CannotAffordOSDMsg;
	NMS::NMSString0x20A CommunityContributionCapLocID;
	NMSTemplate Cost;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 MissionMessageWhenCharged;
	int32_t CommunityContributionValue;
	bool DisplayCost;
	bool DisplayOnlyCostIfCantAfford;
	bool DontCharge;
	bool HideCostStringIfCanAfford;
	bool HideOptionAndDisplayCostOnly;
	bool InvertCanAffordOutcome;
	bool MustAffordInCreative;
	bool RemoveOptionIfCantAfford;
};

//Dependency: GcCostTableEntry
struct GcCostTable
{
	std::vector<NMS_GameComponents::GcCostTableEntry> AtlasPathCosts;
	std::vector<NMS_GameComponents::GcCostTableEntry> InteractionTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> ItemCostsTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> SimpleInteractionTable;
	std::vector<NMS_GameComponents::GcCostTableEntry> UnusedCostsTable;
};

//Dependency: NMSString0x10
struct GcMissionConditionIsMissionInProgress
{
	NMS::NMSString0x10 MissionID;
	bool MustBeSelectedMission;
};

//Dependency: GcMaintenanceOverride
struct GcMaintenanceOverrideTable
{
	std::vector<NMS_GameComponents::GcMaintenanceOverride> Table;
};

//Dependency: GcStoryEntryBranch
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcStoryEntry
{
	NMS::NMSString0x20A AlienText;
	NMS::NMSString0x20A Entry;
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcStoryEntryBranch> BranchedEntries;
	NMS_GameComponents::GcAlienRace AlienTextForceRace;
	bool AutoPrefixWithAlienText;
};

struct GcCharacterInterfaceComponentData
{
};

struct GcPortalComponentData
{
	float Temp;
};

struct GcMissionSequenceSuppressMarkers
{
	bool Suppressed;
	bool SuppressedAfterNextWarp;
};

struct GcPhysicsCollisionGroups
{
	enum class CollisionGroupEnum : uint32_t
	{
		Normal = 0,
		Terrain = 1,
		TerrainInstance = 2,
		TerrainActivated = 3,
		Water = 4,
		Substance = 5,
		Asteroid = 6,
		Player = 7,
		NetworkPlayer = 8,
		NPC = 9,
		Ragdoll = 10,
		Vehicle = 11,
		Vehicle_Piloted = 12,
		Creature = 13,
		Spaceship = 14,
		Spaceship_Landing = 15,
		Debris = 16,
		Shield = 17,
		Loot = 18,
		Trigger = 19,
		CollidesWithNothing = 20,
		CollidesWithEverything = 21,
		DefaultRaycast = 22,
		Raycast = 23,
		Raycast_Camera = 24,
		Raycast_SampleCollisionWithCamera = 25,
		Raycast_PlayerInteract = 26,
		Raycast_PlayerInteract_Shoot = 27,
		Raycast_Projectile = 28,
		Raycast_LaserBeam = 29,
		Raycast_WeaponOfPlayer = 30,
		Raycast_WeaponOfAgent = 31,
		Raycast_Binoculars = 32,
		Raycast_TerrainEditingBeam = 33,
		Raycast_TerrainEditing_OverlappingObjects = 34,
		Raycast_PlayerClimb = 35,
		Raycast_PlayerAim = 36,
		Raycast_PlayerThrow = 37,
		Raycast_PlayerSpawn = 38,
		Raycast_ObjectPlacement = 39,
		Raycast_DroneControl = 40,
		Raycast_PlanetHeightTest = 41,
		Raycast_PlanetHeightTestIncludingStructures = 42,
		Raycast_LineOfSight = 43,
		Raycast_VehicleCanDriveOn = 44,
		Raycast_SpaceshipAvoidance = 45,
		Raycast_SpaceshipAvoidanceOnLeaving = 46,
		Raycast_HudPing = 47,
		Raycast_HudPingNoTerrain = 48,
		Raycast_ObstacleToAgentMovement = 49,
		Raycast_DebugEditor = 50,
		Raycast_PlayerIk = 51,
		Raycast_MechIk = 52,
		Raycast_CreatureIk = 53,
		Raycast_CreatureIk_Indoors = 54,
		Raycast_NavigationLink = 55,
		Raycast_AiShipAtack = 56,
		Raycast_AiShipTravel = 57,
		Raycast_ObstructionQuery = 58,
		Raycast_GeometryProbe = 59,
		Raycast_DroneTargetSensing_Friendly = 60,
		Raycast_DroneTargetSensing_Unfriendly = 61,
		Raycast_DroneTargetSensing_Friendly_NoShield = 62,
		Raycast_DroneTargetSensing_Unfriendly_NoShield = 63,
		Raycast_ObjectPlacementAddObject = 64,
		Raycast_CatchCreatures = 65,
		Raycast_CatchNormal = 66,
		Raycast_CatchTerrain = 67,
		Raycast_CatchTerrainAndNormal = 68,
		Raycast_CatchCreatureObstacles = 69,
	};

	NMS_GameComponents::GcPhysicsCollisionGroups::CollisionGroupEnum CollisionGroup;
};

//Dependency: GcPhysicsCollisionGroups
struct GcPhysicsCollisionGroupCollidesWith
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroups> CollidesWith;
	NMS_GameComponents::GcPhysicsCollisionGroups Group;
};

//Dependency: GcPhysicsCollisionGroupCollidesWith
struct GcCollisionTable
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroupCollidesWith> CollisionTable;
};

struct GcRainbowType
{
	enum class RainbowTypeEnum : uint32_t
	{
		Always = 0,
		Occasional = 1,
		Storm = 2,
		None = 3,
	};

	NMS_GameComponents::GcRainbowType::RainbowTypeEnum RainbowType;
};

struct GcStyleProp_Font
{
	int32_t FontIndex;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: Vector2f
struct TkPlatformButtonPair
{
	NMS::NMSString0x10 ButtonId;
	NMS::NMSString0x10 PlatformId;
	NMS::Vector2f Size;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCreaturePetTraitRange
{
	float Max;
	float Min;
};

//Dependency: NMSString0x20
struct GcObjectPlacementComponentData
{
	enum class ActivationTypeEnum : uint32_t
	{
		GroupNode = 0,
		Locator = 1,
	};

	NMS_GameComponents::GcObjectPlacementComponentData::ActivationTypeEnum ActivationType;
	float FractionOfNodesActive;
	int32_t MaxGroupsActivated;
	int32_t MaxNodesActivated;
	NMS::NMSString0x20 GroupNodeName;
	bool UseNodeParent;
	bool UseRaycast;
};

//Dependency: VariableSizeString
//Dependency: GcSeed
struct GcExactResource
{
	NMS::VariableSizeString Filename;
	NMS::GcSeed GenerationSeed;
};

struct GcProjectileImpactType
{
	enum class ImpactEnum : uint32_t
	{
		Default = 0,
		Terrain = 1,
		Substance = 2,
		Rock = 3,
		Asteroid = 4,
		Shield = 5,
		Creature = 6,
		Robot = 7,
		Freighter = 8,
		Cargo = 9,
		Ship = 10,
		Plant = 11,
		NeedsTech = 12,
		Player = 13,
		OtherPlayer = 14,
		SentinelShield = 15,
		SpaceshipShield = 16,
		FreighterShield = 17,
	};

	NMS_GameComponents::GcProjectileImpactType::ImpactEnum Impact;
};

//Dependency: GcProjectileImpactType
//Dependency: NMSString0x10
struct GcProjectileImpactData
{
	enum class ImpactAttachmentEnum : uint32_t
	{
		World = 0,
		HitBody = 1,
	};

	enum class ImpactAlignmentEnum : uint32_t
	{
		ImpactNormal = 0,
		ImpactReflected = 1,
		GravityUp = 2,
	};

	NMS::NMSString0x10 Effect;
	NMS_GameComponents::GcProjectileImpactType Impact;
	NMS_GameComponents::GcProjectileImpactData::ImpactAlignmentEnum ImpactAlignment;
	NMS_GameComponents::GcProjectileImpactData::ImpactAttachmentEnum ImpactAttachment;
};

//Dependency: Colour
struct GcColourPaletteData
{
	NMS::Colour Colours[5];
	int32_t ColourIndices[5];
};

//Dependency: Colour
struct GcColouriseComponentData
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemRuleTemplate
{
	NMS::VariableSizeString LSystem;
	NMS::NMSString0x20 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcShieldComponentData
{
	int32_t Type;
};

//Dependency: Colour
struct GcColourisePalette
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
};

//Dependency: NMSString0x10
struct GcSpaceshipTravelData
{
	NMS::NMSString0x10 Id;
	float AvoidTime;
	float BoostSpeed;
	float DirectionBrake;
	float Falloff;
	float Force;
	float MaxSpeed;
	float MaxSpeedBrake;
	float MinHeight;
	float MinSpeed;
	float MinSpeedForce;
	float Roll;
	float TurnMax;
	float TurnMin;
	bool Hovering;
};

//Dependency: GcCombatEffectData
struct GcCombatEffectsTable
{
	NMS_GameComponents::GcCombatEffectData EffectsData[6];
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasEndpointForEvent
{
	NMS::NMSString0x20A EventID;
	float MaxDistance;
};

//Dependency: GcMaintenanceComponentData
struct GcEggMachineComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumInputs;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkIndexStream
{
	std::vector<int32_t> IndexStream;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostSpecificCreatureBait
{
};

//Dependency: GcRewardMissionOverride
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcConsumableItem
{
	NMS::NMSString0x20A CustomOSD;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 RequiresMissionActive;
	NMS::NMSString0x10 RewardID;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TutorialRewardID;
	NMS_GameComponents::GcAudioWwiseEvents AudioEventOnOpen;
	NMS::NMSString0x40 ButtonLocID;
	NMS::NMSString0x40 ButtonSubLocID;
	NMS::NMSString0x40 RewardFailedLocID;
	bool AddCommunityTierClassIcon;
	bool CloseInventoryWhenUsed;
	bool DestroyItemWhenConsumed;
	bool OverrideMissionMustBeSelected;
	bool SuppressResourceMessage;
};

//Dependency: GcWeaponClasses
//Dependency: NMSString0x20A
struct GcCostMultiTool
{
	NMS::NMSString0x20A CostString;
	NMS_GameComponents::GcWeaponClasses WeaponClass;
};

//Dependency: GcConsumableItem
struct GcConsumableItemTable
{
	std::vector<NMS_GameComponents::GcConsumableItem> Table;
};

//Dependency: TkBlackboardDefaultValueFloat
//Dependency: NMSString0x10
struct GcCooldownDecoratorData
{
	NMS_Toolkit::TkBlackboardDefaultValueFloat CooldownTime;
	NMSTemplate Child;
	NMS::NMSString0x10 Key;
};

//Dependency: NMSString0x10
struct GcItemCostData
{
	NMS::NMSString0x10 ID;
	float ChangePerSale;
	float Cost;
	float MaxCost;
	float MinCost;
};

//Dependency: GcItemCostData
struct GcItemCostTable
{
	std::vector<NMS_GameComponents::GcItemCostData> Items;
};

struct GcCustomiseShipInteractionData
{
	bool IsSettlementPad;
};

//Dependency: NMSString0x10
struct GcCostAdvanceSettlementBuilding
{
	NMS::NMSString0x10 Id;
	int32_t Amount;
};

//Dependency: GcBuildingCostPartCount
//Dependency: NMSString0x20A
struct GcCostBuildingParts
{
	NMS::NMSString0x20A Description;
	std::vector<NMS_GameComponents::GcBuildingCostPartCount> RequiredParts;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcGeneratedBaseStructuralTemplate
{
	NMS_Toolkit::TkModelResource TemplateScene;
	NMS::NMSString0x10 Id;
};

struct GcSentinelCoverState
{
	enum class SentinelCoverStateEnum : uint32_t
	{
		Deploying = 0,
		Deployed = 1,
		ShuttingDown = 2,
		ShutDown = 3,
	};

	NMS_GameComponents::GcSentinelCoverState::SentinelCoverStateEnum SentinelCoverState;
};

struct GcCostCanAdoptCreature
{
};

//Dependency: NMSString0x10
struct GcPlayerNearbyEvent
{
	enum class RequirePlayerActionEnum : uint32_t
	{
		None = 0,
		Fire = 1,
		InShip = 2,
		OnFoot = 3,
		OnFootOutside = 4,
		Upload = 5,
	};

	enum class DistanceCheckTypeEnum : uint32_t
	{
		Radius = 0,
		BoundingBox = 1,
	};

	NMS::NMSString0x10 MustAffordCostID;
	float Angle;
	float AngleMinDistance;
	float AngleOffset;
	float Distance;
	NMS_GameComponents::GcPlayerNearbyEvent::DistanceCheckTypeEnum DistanceCheckType;
	NMS_GameComponents::GcPlayerNearbyEvent::RequirePlayerActionEnum RequirePlayerAction;
	bool AnglePlayerRelative;
	bool AngleReflected;
	bool IncludeAllPhysics;
	bool IncludeMobileNPCs;
	bool Inverse;
	bool OnlyForLocalPlayer;
	bool TeleporterCountsAsPlayer;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct TkNGuiLayoutListData
{
	NMS::VariableSizeString Default;
	NMS::VariableSizeString Filename;
	NMS::NMSString0x80 Name;
	bool Autosave;
	bool CanBeDeleted;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkCurveType
//Dependency: NMSString0x10
struct GcTradeData
{
	std::vector<NMS::NMSString0x10> AlwaysConsideredBarterProducts;
	std::vector<NMS::NMSString0x10> AlwaysPresentProducts;
	std::vector<NMS::NMSString0x10> AlwaysPresentSubstances;
	std::vector<NMS::NMSString0x10> OptionalProducts;
	std::vector<NMS::NMSString0x10> OptionalSubstances;
	int32_t MaxAmountOfProductAvailable[4];
	int32_t MaxAmountOfSubstanceAvailable[4];
	int32_t MaxExtraSystemProducts[4];
	int32_t MinAmountOfProductAvailable[4];
	int32_t MinAmountOfSubstanceAvailable[4];
	int32_t MinExtraSystemProducts[4];
	float TradeProductsPriceImprovements[4];
	float BarterItemPreferenceFloor;
	float BarterPriceMultiplier;
	float BuyPriceDecreaseGreenThreshold;
	float BuyPriceIncreaseRedThreshold;
	int32_t MaxItemsForSale;
	int32_t MinItemsForSale;
	float PercentageOfItemsAreProducts;
	float SellPriceDecreaseRedThreshold;
	float SellPriceIncreaseGreenThreshold;
	NMS_Toolkit::TkCurveType BarterAcceptanceCurve;
	bool ShowSeasonRewards;
	bool UseBarterForBuy;
};

//Dependency: GcMissionFaction
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcMissionDifficulty
//Dependency: GcMissionType
struct GcMissionBoardOptions
{
	enum class DefaultItemTypeForInitialWarpEnum : uint32_t
	{
		None = 0,
		PrimaryProduct = 1,
		PrimarySubstance = 2,
		SecondaryProduct = 3,
		SecondarySubstance = 4,
	};

	NMS::NMSString0x20A MultiplayerMissionInitialWarpScanEvent;
	std::vector<NMS::NMSString0x10> BasePartBlueprints;
	std::vector<NMS::NMSString0x20A> DefaultItemInitialWarpScanEvents;
	std::vector<NMS_GameComponents::GcMissionFaction> Faction;
	NMS::NMSString0x10 RewardPenaltyOnAbandon;
	NMS_GameComponents::GcMissionBoardOptions::DefaultItemTypeForInitialWarpEnum DefaultItemTypeForInitialWarp;
	NMS_GameComponents::GcMissionDifficulty Difficulty;
	int32_t MinRank;
	NMS_GameComponents::GcMissionType Type;
	int32_t Weighting;
	bool CloseMissionGiver;
	bool IgnoreCalculatedObjective;
	bool IsGuildShopMission;
	bool IsMultiplayerEventMission;
	bool IsPlanetProcMission;
};

//Dependency: GcDefaultMissionProduct
//Dependency: GcDefaultMissionSubstance
struct GcDefaultMissionItemsTable
{
	std::vector<NMS_GameComponents::GcDefaultMissionProduct> PrimaryProducts;
	std::vector<NMS_GameComponents::GcDefaultMissionSubstance> PrimarySubstances;
	std::vector<NMS_GameComponents::GcDefaultMissionProduct> SecondaryProducts;
	std::vector<NMS_GameComponents::GcDefaultMissionSubstance> SecondarySubstances;
	int32_t AmountMax;
	int32_t AmountMin;
	bool AmountShouldBeRoundNumber;
};

//Dependency: VariableSizeString
struct GcRewardTableItem
{
	NMS::VariableSizeString LabelID;
	NMSTemplate Reward;
	float PercentageChance;
};

//Dependency: GcRewardTableItem
//Dependency: NMSString0x10
struct GcRewardTableItemList
{
	enum class RewardChoiceEnum : uint32_t
	{
		GiveAll = 0,
		Select = 1,
		SelectAlways = 2,
		TryEach = 3,
		TryEachSilent = 4,
		SelectSilent = 5,
		GiveAllSilent = 6,
		TryFirst_ThenSelectAlways = 7,
		GiveFirst_ThenAlsoSelectAlwaysFromRest = 8,
		SelectFromSuccess = 9,
		SelectAlwaysSilent = 10,
		SelectFromSuccessSilent = 11,
	};

	NMS::NMSString0x10 IncrementStat;
	std::vector<NMS_GameComponents::GcRewardTableItem> List;
	NMS_GameComponents::GcRewardTableItemList::RewardChoiceEnum RewardChoice;
	bool OverrideZeroSeed;
	bool UseInventoryChoiceOverride;
};

//Dependency: GcRewardTableItemList
//Dependency: NMSString0x10
struct GcGenericRewardTableEntry
{
	NMS_GameComponents::GcRewardTableItemList List;
	NMS::NMSString0x10 Id;
};

struct GcTradingClass
{
	enum class TradingClassEnum : uint32_t
	{
		Mining = 0,
		HighTech = 1,
		Trading = 2,
		Manufacturing = 3,
		Fusion = 4,
		Scientific = 5,
		PowerGeneration = 6,
	};

	NMS_GameComponents::GcTradingClass::TradingClassEnum TradingClass;
};

struct GcWealthClass
{
	enum class WealthClassEnum : uint32_t
	{
		Poor = 0,
		Average = 1,
		Wealthy = 2,
		Pirate = 3,
	};

	NMS_GameComponents::GcWealthClass::WealthClassEnum WealthClass;
};

//Dependency: GcTradingClass
//Dependency: GcWealthClass
struct GcPlanetTradingData
{
	NMS_GameComponents::GcTradingClass TradingClass;
	NMS_GameComponents::GcWealthClass WealthClass;
};

//Dependency: GcPlanetTradingData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcBiomeSubType
//Dependency: GcBiomeType
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlayerConflictData
//Dependency: GcGalaxyStarAnomaly
//Dependency: GcAlienRace
struct GcScanEventSolarSystemLookup
{
	NMS::NMSString0x20A SamePlanetAsEvent;
	NMS::NMSString0x10 NeedsResourceHint;
	NMS::NMSString0x10 SystemNeedsResourceHint;
	NMS_GameComponents::GcPlanetTradingData TradingData;
	int32_t MinPlanets;
	NMS_GameComponents::GcBiomeType NeedsBiomeType;
	int32_t SamePlanetAsSeasonParty;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	NMS_GameComponents::GcGalaxyStarAnomaly UseAnomaly;
	NMS_GameComponents::GcBiomeSubType UseBiomeSubType;
	NMS_GameComponents::GcPlayerConflictData UseConflict;
	NMS_GameComponents::GcAlienRace UseRace;
	bool AllowedToBePurpleWithoutAccess;
	bool AllowUnsafeMatches;
	bool AnyBiomeNotWeirdOrDead;
	bool AnyInfestedBiome;
	bool AnyRGBBiome;
	bool NeedsAbandonedSystem;
	bool NeedsBiome;
	bool NeedsCorruptSentinelPlanet;
	bool NeedsDeepWaterPlanet;
	bool NeedsEmptySystem;
	bool NeedsExtremeHazardPlanet;
	bool NeedsExtremeSentinelPlanet;
	bool NeedsExtremeWeatherPlanet;
	bool NeedsPrimePlanet;
	bool NeedsSentinels;
	bool NeedsWaterPlanet;
	bool NeverAllowAbandoned;
	bool NeverAllowEmpty;
	bool NeverAllowExtremeSentinelPlanet;
	bool NeverAllowExtremeWeatherPlanet;
	bool NeverAllowGasGiantSystem;
	bool RequireUndiscovered;
	bool SuitableForCreatureDiscovery;
	bool SuitableForCreatureTaming;
	bool SuitableForRobotCreatureDiscovery;
	bool SuitableForWeirdCreatureDiscovery;
	bool SystemNeedsCorruptSentinelPlanet;
	bool SystemNeedsExtremeStormPlanet;
	bool SystemNeedsGasGiant;
	bool SystemNeedsInfestedPlanet;
	bool SystemNeedsWater;
	bool SystemNeedsWeirdPlanet;
	bool UseStarType;
	bool UseTrading;
	bool UseWealth;
};

struct GcScannerIconHighlightTypes
{
	enum class ScannerIconHighlightTypeEnum : uint32_t
	{
		Diamond = 0,
		Hexagon = 1,
		Tag = 2,
		Octagon = 3,
		Circle = 4,
	};

	NMS_GameComponents::GcScannerIconHighlightTypes::ScannerIconHighlightTypeEnum ScannerIconHighlightType;
};

//Dependency: NMSString0x10
struct GcScanEventTriggers
{
	std::vector<NMS::NMSString0x10> Triggers;
	float Range;
	bool AllowRetrigger;
};

//Dependency: GcScanEventSolarSystemLookup
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcInteractionType
//Dependency: GcResourceElement
//Dependency: GcBuildingClassification
//Dependency: GcAlienRace
//Dependency: GcScannerIconHighlightTypes
//Dependency: GcScanEventTriggers
//Dependency: GcTechnologyCategory
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcScanEventData
{
	enum class SolarSystemLocationEnum : uint32_t
	{
		Local = 0,
		Near = 1,
		LocalOrNear = 2,
		NearWithNoExpeditions = 3,
		FromList = 4,
		SeasonParty = 5,
		FirstPurpleSystemUA = 6,
	};

	enum class SearchTypeEnum : uint32_t
	{
		Any = 0,
		AnyShelter = 1,
		AnyNPC = 2,
		FindBuildingClass = 3,
		SpaceStation = 4,
		SpaceAnomaly = 5,
		Atlas = 6,
		Freighter = 7,
		FreighterBase = 8,
		ExternalPlanetBase = 9,
		PlanetBaseTerminal = 10,
		Expedition = 11,
		ExpeditionLeader = 12,
		TutorialShelter = 13,
		MPMissionFreighter = 14,
		Nexus = 15,
		InitialDistressSignal = 16,
		SpaceMarker = 17,
		NexusEggMachine = 18,
		PhotoTarget = 19,
		SettlementConstruction = 20,
		UnownedSettlement = 21,
		NPC_HideOut = 22,
		FriendlyDrone = 23,
		AnyRobotSite = 24,
		UnownedSettlement_Builders = 25,
		OwnedSettlementHub = 26,
	};

	enum class EventStartTypeEnum : uint32_t
	{
		None = 0,
		Special = 1,
		Discovered = 2,
		Timer = 3,
		ObjectScan = 4,
		LeaveBuilding = 5,
	};

	enum class EventPriorityEnum : uint32_t
	{
		Regular = 0,
		High = 1,
	};

	enum class EventEndTypeEnum : uint32_t
	{
		None = 0,
		Proximity = 1,
		Interact = 2,
		EnterBuilding = 3,
		TimedInteract = 4,
	};

	enum class BuildingLocationEnum : uint32_t
	{
		Nearest = 0,
		AllNearest = 1,
		Random = 2,
		RandomOnNearPlanet = 3,
		RandomOnFarPlanet = 4,
		PlanetSearch = 5,
		PlayerSettlement = 6,
	};

	NMS_GameComponents::GcScanEventSolarSystemLookup SolarSystemAttributes;
	NMS_GameComponents::GcScanEventSolarSystemLookup SolarSystemAttributesFallback;
	NMS_GameComponents::GcResourceElement ResourceOverride;
	NMS::NMSString0x20A ForceInteraction;
	NMS::NMSString0x20A MustMatchStoryUtilityPuzzle;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A NextOption;
	NMS::NMSString0x20A PlanetLabelText;
	NMS::NMSString0x20A SurveyDiscoveryOSDMessage;
	NMS::NMSString0x20A SurveyHUDName;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMS_GameComponents::GcScanEventTriggers TriggerActions;
	NMS::NMSString0x10 ForceOverrideEncounter;
	NMS::NMSString0x10 HasReward;
	NMS::VariableSizeString InterstellarOSDMessage;
	NMS::VariableSizeString MarkerLabel;
	NMS::NMSString0x10 MissionMessageOnInteract;
	NMS::VariableSizeString OSDMessage;
	NMS::NMSString0x10 ReplacementMaintData;
	NMS::VariableSizeString TooltipMessage;
	std::vector<NMS::VariableSizeString> UAsList;
	NMS_GameComponents::GcScanEventData::BuildingLocationEnum BuildingLocation;
	float BuildingPreventionRadius;
	NMS_GameComponents::GcScanEventData::EventEndTypeEnum EventEndType;
	NMS_GameComponents::GcScanEventData::EventPriorityEnum EventPriority;
	NMS_GameComponents::GcScanEventData::EventStartTypeEnum EventStartType;
	NMS_GameComponents::GcInteractionType ForceInteractionType;
	float IconTime;
	NMS_GameComponents::GcAudioWwiseEvents MessageAudio;
	float MessageDisplayTime;
	float MessageTime;
	NMS_GameComponents::GcScannerIconHighlightTypes MissionMarkerHighlightStyleOverride;
	NMS_GameComponents::GcAlienRace OverrideInteractionRace;
	NMS_GameComponents::GcAlienRace RequireInteractionRace;
	NMS_GameComponents::GcScanEventData::SearchTypeEnum SearchType;
	NMS_GameComponents::GcScanEventData::SolarSystemLocationEnum SolarSystemLocation;
	NMS_GameComponents::GcBuildingClassification SpecificBuildingClass;
	float StartTime;
	float SurveyDistance;
	NMS_GameComponents::GcTechnologyCategory TechShopType;
	float TooltipTime;
	bool AllowFriendsBases;
	bool AllowOverriddenBuildings;
	bool AlwaysShow;
	bool BlockStartedOnUseEvents;
	bool CanEndFromOutsideMission;
	bool ClearForcedInteractionOnCompletion;
	bool DisableMultiplayerSync;
	bool ForceBroken;
	bool ForceFixed;
	bool ForceOverridesAll;
	bool ForceReplaceStoryPortalSeed;
	bool ForceResetPortal;
	bool ForceRestartInteraction;
	bool ForceWideRandom;
	bool IsCommunityPortalOverride;
	bool MustFindSystem;
	bool NeverShow;
	bool NPCReactsToPlayer;
	bool ReplaceEventIfAlreadyActive;
	bool ShowEndTooltip;
	bool ShowOnlyIfSequenceTarget;
	bool TargetMustMatchMissionSeed;
	bool TooltipRepeats;
	bool UseBuildingFromRendezvousStage;
	bool UseMissionTradingDataOverride;
	bool UseSeasonDataAsInteraction;
};

struct GcMissionCategory
{
	enum class MissionCategoryEnum : uint32_t
	{
		Info = 0,
		SelectableHint = 1,
		Mission = 2,
		Danger = 3,
		Urgent = 4,
	};

	NMS_GameComponents::GcMissionCategory::MissionCategoryEnum MissionCategory;
};

struct GcMissionPageHint
{
	enum class MissionPageHintEnum : uint32_t
	{
		None = 0,
		Suit = 1,
		Ship = 2,
		Weapon = 3,
		Vehicle = 4,
		Freighter = 5,
		Wiki = 6,
		Catalogue = 7,
		MissionLog = 8,
		Discovery = 9,
		Journey = 10,
		Expedition = 11,
		Options = 12,
	};

	NMS_GameComponents::GcMissionPageHint::MissionPageHintEnum MissionPageHint;
};

//Dependency: GcTradeData
//Dependency: GcGenericMissionVersionProgress
//Dependency: GcMissionBoardOptions
//Dependency: GcSeasonalLogOverrides
//Dependency: GcAlienPuzzleTable
//Dependency: GcDefaultMissionItemsTable
//Dependency: GcNumberedTextList
//Dependency: GcCostTableEntry
//Dependency: NMSString0x20
//Dependency: GcGenericRewardTableEntry
//Dependency: GcScanEventData
//Dependency: GcGenericMissionStage
//Dependency: GcMissionConditionTest
//Dependency: GcMissionCategory
//Dependency: GcMissionPageHint
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcGenericMissionSequence
{
	enum class MissionClassEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		ChainedSecondary = 2,
		Guide = 3,
		Wiki = 4,
		Seasonal = 5,
		Milestone = 6,
		Atlas = 7,
		BlackHole = 8,
		FleetSupport = 9,
		Settlement = 10,
	};

	enum class MessageStartEnum : uint32_t
	{
		Default = 0,
		Always = 1,
		Never = 2,
	};

	enum class MessageCompleteEnum : uint32_t
	{
		Default = 0,
		Always = 1,
		Never = 2,
	};

	enum class AutoStartEnum : uint32_t
	{
		None = 0,
		AllModes = 1,
		Seasonal = 2,
		OnSelected = 3,
	};

	NMS::Colour MissionColourOverride;
	NMS_GameComponents::GcTradeData TradingDataOverride;
	NMS_GameComponents::GcMissionBoardOptions MissionBoardOptions;
	NMS_GameComponents::GcSeasonalLogOverrides SeasonalLogTextOverrides;
	NMS_GameComponents::GcDefaultMissionItemsTable DefaultItems;
	NMS::NMSString0x20A MissionPageLocID;
	NMS::NMSString0x20A SettlementAbandonOSD;
	NMS_GameComponents::GcNumberedTextList MissionDescriptions;
	NMS_Toolkit::TkTextureResource MissionIcon;
	NMS_Toolkit::TkTextureResource MissionIconNotSelected;
	NMS_Toolkit::TkTextureResource MissionIconSelected;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionA;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionB;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionC;
	NMS_GameComponents::GcNumberedTextList MissionProcDescriptionHeader;
	NMS_GameComponents::GcNumberedTextList MissionSubtitles;
	NMS_GameComponents::GcNumberedTextList MissionTitles;
	std::vector<NMSTemplate> CancelingConditions;
	std::vector<NMS_GameComponents::GcCostTableEntry> Costs;
	NMS_GameComponents::GcAlienPuzzleTable Dialog;
	std::vector<NMS_GameComponents::GcGenericMissionVersionProgress> FinalStageVersions;
	NMS::NMSString0x10 MissionBuildMenuHint;
	NMS::NMSString0x10 MissionID;
	NMS::NMSString0x10 NextMissionHint;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> Rewards;
	std::vector<NMS_GameComponents::GcScanEventData> ScanEvents;
	std::vector<NMS_GameComponents::GcGenericMissionStage> Stages;
	std::vector<NMSTemplate> StartingConditions;
	NMS::NMSString0x10 UseCommunityMissionForLog;
	std::vector<int32_t> WikiMissionBlockedBySeasons;
	NMS_GameComponents::GcGenericMissionSequence::AutoStartEnum AutoStart;
	int32_t BeginCheckFrequency;
	NMS_GameComponents::GcMissionConditionTest CancelConditionTest;
	NMS_GameComponents::GcGenericMissionSequence::MessageCompleteEnum MessageComplete;
	NMS_GameComponents::GcGenericMissionSequence::MessageStartEnum MessageStart;
	NMS_GameComponents::GcMissionCategory MissionCategory;
	NMS_GameComponents::GcGenericMissionSequence::MissionClassEnum MissionClass;
	NMS_GameComponents::GcMissionPageHint MissionPageHint;
	int32_t MissionPriority;
	NMS_GameComponents::GcMissionConditionTest StartConditionTest;
	NMS::NMSString0x20 MissionDescSwitchOverride;
	NMS::NMSString0x20 MissionObjective;
	bool BlocksPinning;
	bool CancelSetsComplete;
	bool CanRenounce;
	bool ForcesBuildMenuHint;
	bool ForcesPageHint;
	bool IsLegacy;
	bool IsProceduralAllowed;
	bool IsRecurring;
	bool MissionHasColourOverride;
	bool MissionIsCritical;
	bool PrefixTitle;
	bool RequiresSettlement;
	bool RestartOnCompletion;
	bool StartIsCancel;
	bool TakeCommunityMissionIDFromSeasonData;
	bool TelemetryUpload;
	bool UseFirstPurpleSystemDetailsInLogInfo;
	bool UseScanEventDetailsInLogInfo;
	bool UseSeasonTitleOverride;
};

struct GcMissionConditionAimingTeleporter
{
};

struct GcCostCanCustomiseCreature
{
};

//Dependency: GcCreatureIkType
//Dependency: NMSString0x100
struct GcCreatureIkData
{
	NMS_GameComponents::GcCreatureIkType Type;
	NMS::NMSString0x100 JointName;
};

//Dependency: GcCreatureIkData
//Dependency: GcIkPistonData
struct GcCreatureFullBodyIKComponentData
{
	std::vector<NMS_GameComponents::GcCreatureIkData> JointData;
	std::vector<NMS_GameComponents::GcIkPistonData> PistonData;
	float BodyMassWeight;
	float FootAngleSpeed;
	float FootPlantSpringTime;
	float MaxFootAngle;
	float MaxHeadPitch;
	float MaxHeadRoll;
	float MaxHeadYaw;
	float MovementDamp;
	float Omega;
	float OmegaDropOff;
	bool Mech;
	bool UseFootAngle;
	bool UseFootGlue;
	bool UseFootRaycasts;
	bool UsePistons;
};

struct GcCostCanMilkCreature
{
};

struct GcCostCanRideCreature
{
};

struct GcMissionConditionOnMultiplayerMission
{
};

struct GcDiscoveryType
{
	enum class DiscoveryTypeEnum : uint32_t
	{
		Unknown = 0,
		SolarSystem = 1,
		Planet = 2,
		Animal = 3,
		Flora = 4,
		Mineral = 5,
		Sector = 6,
		Building = 7,
		Interactable = 8,
		Sentinel = 9,
		Starship = 10,
		Artifact = 11,
		Mystery = 12,
		Treasure = 13,
		Control = 14,
		HarvestPlant = 15,
		FriendlyDrone = 16,
	};

	NMS_GameComponents::GcDiscoveryType::DiscoveryTypeEnum DiscoveryType;
};

//Dependency: GcDiscoveryType
//Dependency: NMSString0x20A
struct GcCostDiscovery
{
	NMS::NMSString0x20A CostString;
	NMS_GameComponents::GcDiscoveryType DiscoveryType;
	int32_t Index;
};

//Dependency: GcFrigateClass
struct GcCostFleetStoredIncome
{
	NMS_GameComponents::GcFrigateClass Class;
	int32_t RequiredAmount;
};

//Dependency: GcResourceElement
//Dependency: NMSString0x10
struct GcPulseEncounterSpawnSpaceHostiles
{
	NMS_GameComponents::GcResourceElement CustomShipResource;
	NMS::NMSString0x10 AttackDefinition;
	int32_t NumberOfShips;
};

//Dependency: NMSString0x10
struct GcFreighterRoomNPCData
{
	NMS::NMSString0x10 RoomID;
	float POISelectionWeight[5];
	float SpawnCapacity[5];
};

struct GcCostHasFireteamMember
{
	int32_t Index;
	bool BlockIfCannotAccessTheirPurpleSystem;
};

struct GcLandingHelperComponentData
{
	float ActiveDistanceMax;
	float ActiveDistanceMin;
	bool LandPoint;
};

struct GcCostHealth
{
	int32_t HealthUnits;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20
struct TkMaterialShaderMillConnect
{
	int32_t Count;
	NMS::NMSString0x20 Name;
	bool Expanded;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCustomisationComponentData
{
	enum class CustomisationDataTypeEnum : uint32_t
	{
		Player = 0,
		Vehicle = 1,
		Weapon = 2,
		Ship_01 = 3,
		Ship_02 = 4,
		Ship_03 = 5,
		Ship_04 = 6,
		Ship_05 = 7,
		Ship_06 = 8,
		Vehicle_Bike = 9,
		Vehicle_Truck = 10,
		Vehicle_WheeledBike = 11,
		Vehicle_Hovercraft = 12,
		Vehicle_Submarine = 13,
		Vehicle_Mech = 14,
		Freighter = 15,
		Pet = 16,
		Ship_07 = 17,
		Ship_08 = 18,
		Ship_09 = 19,
		Ship_10 = 20,
		Ship_11 = 21,
		Ship_12 = 22,
		PirateFreighter = 23,
		Skiff = 24,
		FishingRod = 25,
	};

	NMS_GameComponents::GcCustomisationComponentData::CustomisationDataTypeEnum CustomisationDataType;
};

//Dependency: NMSString0x20
struct GcLookAtComponentData
{
	enum class LookAtTypeEnum : uint32_t
	{
		Player = 0,
	};

	NMS_GameComponents::GcLookAtComponentData::LookAtTypeEnum LookAtType;
	float MinRotationRateDegrees;
	float RotationRateFactor;
	NMS::NMSString0x20 NodeName;
};

//Dependency: NMSString0x10
struct GcCreatureFootParticleSingleData
{
	enum class MoveSpeedEnum : uint32_t
	{
		Always = 0,
		Walk = 1,
		Run = 2,
	};

	NMS::NMSString0x10 EffectName;
	float MaxCreatureSize;
	float MinCreatureSize;
	NMS_GameComponents::GcCreatureFootParticleSingleData::MoveSpeedEnum MoveSpeed;
	float Scale;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkPlatformButtonPair
//Dependency: TkInputEnum
//Dependency: NMSString0x10
struct TkActionButtonMap
{
	NMS::NMSString0x10 ActionId;
	std::vector<NMS_Toolkit::TkPlatformButtonPair> Platforms;
	NMS_Toolkit::TkInputEnum PadButtonId;
	bool ScaleToFitFont;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostPirateTribute
{
	float CargoValuePercent;
	int32_t MinimumValue;
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcCostInteractionIndex
{
	NMS::NMSString0x20A CantAffordLocID;
	int32_t Index;
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;
	bool AffordIfGreaterThanIndex;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkPaletteTexture
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
struct TkProceduralTexture
{
	enum class TextureGameplayUseEnum : uint32_t
	{
		IgnoreName = 0,
		MatchName = 1,
		DoNotMatchName = 2,
	};

	NMS::Colour AverageColour;
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString TextureName;
	NMS_Toolkit::TkPaletteTexture Palette;
	float Probability;
	NMS_Toolkit::TkProceduralTexture::TextureGameplayUseEnum TextureGameplayUse;
	bool Multiply;
	bool OverrideAverageColour;
};

//Dependency: TkProceduralTexture
//Dependency: NMSString0x10
struct TkProceduralTextureLayer
{
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Name;
	std::vector<NMS_Toolkit::TkProceduralTexture> Textures;
	float Probability;
	bool SelectToMatchBase;
};

//Dependency: TkProceduralTextureLayer
struct TkProceduralTextureList
{
	NMS_Toolkit::TkProceduralTextureLayer Layers[8];
	bool AlwaysEnableUnnamedTextureLayers;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcCreatureRoleFilename
{
	NMS::VariableSizeString File;
	float BiomeProbability[4];
};

//Dependency: GcCreatureRoleFilename
struct GcCreatureRoleFilenameList
{
	std::vector<NMS_GameComponents::GcCreatureRoleFilename> Options;
};

//Dependency: GcCreatureRoleFilenameList
struct GcCreatureRoleFilenameTable
{
	NMS_GameComponents::GcCreatureRoleFilenameList WeirdBiomeFiles[32];
	NMS_GameComponents::GcCreatureRoleFilenameList BiomeFiles[17];
	NMS_GameComponents::GcCreatureRoleFilenameList AirFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList CaveFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList RobotFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList UnderwaterFiles;
	NMS_GameComponents::GcCreatureRoleFilenameList UnderwaterFilesExtra;
	float LifeChance[4];
	float RoleFrequencyModifiers[4];
};

struct GcInteractionMissionState
{
	enum class InteractionMissionStateEnum : uint32_t
	{
		Unused = 0,
		Unlocked = 1,
		MonoCorrupted = 2,
		GiftGiven = 3,
	};

	NMS_GameComponents::GcInteractionMissionState::InteractionMissionStateEnum InteractionMissionState;
};

//Dependency: GcInteractionMissionState
//Dependency: GcInteractionType
//Dependency: NMSString0x20A
struct GcCostInteractionMissionState
{
	NMS::NMSString0x20A CanAffordLocID;
	NMS::NMSString0x20A CantAffordLocID;
	NMS_GameComponents::GcInteractionMissionState RequiredState;
	NMS_GameComponents::GcInteractionType ThisInteractionClassInMyBuilding;
	bool AlsoAcceptMaintenanceDone;
	bool TestThisInteraction;
};

//Dependency: GcGenericRewardTableEntry
struct GcExpeditionRewardTable
{
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> Table;
};

//Dependency: NMSString0x10
struct GcCostItemFromList
{
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t Amount;
	int32_t Index;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostItemFromListOfValue
{
	NMS::NMSString0x20A CostText;
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t UnitValue;
	bool UseDefaultAmount;
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
struct GcHUDStartup
{
	NMS::NMSString0x10 RequiresTechBroken;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	float Time;
};

//Dependency: NMSString0x10
struct GcCostJourneyMilestone
{
	NMS::NMSString0x10 RequiredMilestone;
};

//Dependency: NMSString0x20A
struct GcCostLocalMissionAvailable
{
	NMS::NMSString0x20A TextOverride;
};

struct GcExpeditionDuration
{
	enum class ExpeditionDurationEnum : uint32_t
	{
		VeryShort = 0,
		Short = 1,
		Medium = 2,
		Long = 3,
		VeryLong = 4,
	};

	NMS_GameComponents::GcExpeditionDuration::ExpeditionDurationEnum ExpeditionDuration;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationBobbleHead
{
	NMS_Toolkit::TkModelResource BobbleHead;
	NMS::NMSString0x10 LinkedTechId;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostMissionComplete
{
	NMS::NMSString0x20A TextOverride;
	NMS::NMSString0x10 Cost;
	bool HideIfCompleted;
};

//Dependency: GcCurrency
struct GcCostMoney
{
	int32_t Cost;
	NMS_GameComponents::GcCurrency CostCurrency;
};

//Dependency: NMSString0x10
struct GcMechMeshPartTypeData
{
	NMS::NMSString0x10 DescriptorGroupID;
	std::vector<NMS::NMSString0x10> RequiredTechs;
};

//Dependency: GcMechMeshPartTypeData
struct GcMechMeshPartData
{
	NMS_GameComponents::GcMechMeshPartTypeData MeshTypes[4];
};

//Dependency: NMSString0x10
struct GcItemAmountCostPair
{
	NMS::NMSString0x10 ItemId;
	int32_t Amount;
};

//Dependency: GcItemAmountCostPair
//Dependency: NMSString0x20A
struct GcCostMultiItem
{
	NMS::NMSString0x20A DisplayLocID;
	std::vector<NMS_GameComponents::GcItemAmountCostPair> ItemList;
	bool OnlyTakeIfCanAfford;
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
struct GcCostProcProduct
{
	int32_t FreighterPasswordIndex;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcProceduralProductCategory Type;
	bool CareAboutRarity;
};

struct GcCostSentinelBlockStatus
{
	bool CanAffordIfSentinelsDisabled;
};

struct GcCostOwnSettlement
{
	int8_t NumRequired;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableSeasonReward
{
	NMS::NMSString0x20A SpecificMilestoneLoc;
	NMS::NMSString0x10 ID;
	std::vector<int32_t> SeasonIds;
	std::vector<int32_t> StageIds;
	bool MustBeUnlocked;
	bool SwitchExclusive;
	bool UniqueInventoryItem;
};

//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcEasyRagdollSetUpBodyDimensions
{
	NMS::Vector3f Centre;
	NMS::Vector3f Size;
	NMS::NMSString0x20 Joint;
};

//Dependency: GcEasyRagdollSetUpBodyDimensions
//Dependency: NMSString0x20
struct GcEasyRagdollSetUpData
{
	std::vector<NMS::NMSString0x20> ChainEnds;
	std::vector<NMS::NMSString0x20> ExcludeJoints;
	std::vector<NMS_GameComponents::GcEasyRagdollSetUpBodyDimensions> ForceBodyDimensions;
};

//Dependency: GcEasyRagdollSetUpData
//Dependency: GcRagdollBone
//Dependency: NMSString0x40
struct GcRagdollComponentData
{
	NMS_GameComponents::GcEasyRagdollSetUpData EasySetUpData;
	std::vector<NMS::NMSString0x40> OtherKnownAnimations;
	std::vector<NMS_GameComponents::GcRagdollBone> RagdollBones;
	float AnimationSpeedOverride;
	float BlendIntoStartPoseDuration;
	float InertiaScale;
	float JointFriction;
	float KineticEnergyForRest;
	float MaxDamping;
	float MaxWaitForRest;
	float MinWaitForRest;
	float ModelScaleAtCreation;
	float OverallDurationScale;
	float PhasingOutRagdollDuration;
	float PlayAnimationDuration;
	float WholeBodyMass;
	NMS::NMSString0x40 FallAnimation_Back;
	NMS::NMSString0x40 FallAnimation_Front;
	NMS::NMSString0x40 FallAnimation_Left;
	NMS::NMSString0x40 FallAnimation_Right;
	NMS::NMSString0x40 GetUpAnimation_Back;
	NMS::NMSString0x40 GetUpAnimation_Front;
	NMS::NMSString0x40 GetUpAnimation_Left;
	NMS::NMSString0x40 GetUpAnimation_Right;
	NMS::NMSString0x40 Name;
	bool EasySetUp;
	bool Enabled;
};

struct GcGalacticAddressData
{
	int32_t PlanetIndex;
	int32_t SolarSystemIndex;
	int32_t VoxelX;
	int32_t VoxelY;
	int32_t VoxelZ;
};

//Dependency: GcGalacticAddressData
struct GcUniverseAddressData
{
	NMS_GameComponents::GcGalacticAddressData GalacticAddress;
	int32_t RealityIndex;
};

//Dependency: GcUniverseAddressData
//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcTeleportEndpoint
{
	enum class TeleporterTypeEnum : uint32_t
	{
		Base = 0,
		Spacestation = 1,
		Atlas = 2,
		PlanetAwayFromShip = 3,
		ExternalBase = 4,
		EmergencyGalaxyFix = 5,
		OnNexus = 6,
		SpacestationFixPosition = 7,
		Settlement = 8,
		Freighter = 9,
		Frigate = 10,
	};

	NMS::Vector3f Facing;
	NMS::Vector3f Position;
	NMS_GameComponents::GcUniverseAddressData UniverseAddress;
	NMS_GameComponents::GcTeleportEndpoint::TeleporterTypeEnum TeleporterType;
	NMS::NMSString0x40 Name;
	bool CalcWarpOffset;
	bool IsFavourite;
	bool IsFeatured;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcCostProduct
{
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool TakeIDFromSeasonData;
	bool UseDefaultAmount;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostProductOnlyTakeIfCanAfford
{
	NMS::NMSString0x20A AltCostLocID;
	NMS::NMSString0x10 Id;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
};

//Dependency: GcSentinelSpawnSequenceStep
//Dependency: NMSString0x10
struct GcSentinelSpawnNamedSequence
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcSentinelSpawnSequenceStep> Waves;
};

//Dependency: GcPetData
struct GcRewardSpecificPetEgg
{
	NMS_GameComponents::GcPetData EggData;
	bool ImmediatelyHatchable;
};

//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcCostRaceItemCombo
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcAlienRace AlienRace;
	int32_t Amount;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkModelResource
struct TkLODModelResource
{
	NMS_Toolkit::TkModelResource LODModel;
	float Distance;
	float SwapThreshold;
};

//Dependency: TkLODModelResource
struct TkLODComponentData
{
	std::vector<NMS_Toolkit::TkLODModelResource> LODModels;
	float CrossFadeOverlap;
	float CrossFadeTime;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCostSettlementBuildingUpgrade
{
	int32_t LevelRequired;
};

//Dependency: GcSettlementTowerPower
struct GcCostSettlementTowerReward
{
	NMS_GameComponents::GcSettlementTowerPower Power;
};

//Dependency: NMSString0x10
struct GcRewardSpecificSeasonalSubstance
{
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	float ChanceToUse;
	int32_t SeasonNumber;
};

//Dependency: GcAlienRace
struct GcCostStanding
{
	NMS_GameComponents::GcAlienRace Race;
	int32_t RequiredStanding;
	bool UseCurrentRankString;
};

struct GcDoShipFlybyIntercept
{
	float Speed;
	float Time;
};

struct GcMissionConditionGunOut
{
};

struct GcMissionCommunityMissionData
{
	bool ShowTimeToDeadline;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: VariableSizeString
struct TkEmitterData
{
	NMS::VariableSizeString Particle;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostStat
{
	NMS::NMSString0x20A CostAsString;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Value;
};

struct GcMovementDirection
{
	enum class MovementDirectionEnum : uint32_t
	{
		WorldRelative = 0,
		BodyRelative = 1,
		HeadRelative = 2,
		NotSet = 3,
	};

	NMS_GameComponents::GcMovementDirection::MovementDirectionEnum MovementDirection;
};

//Dependency: GcMissionConditionTest
struct GcMissionConditionGroup
{
	std::vector<NMSTemplate> Conditions;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	bool OnlyUsedForTextFormatting;
	bool ValueToReturnForTextFormatting;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCostStatCompare
{
	NMS::NMSString0x20A CostStringCanAfford;
	NMS::NMSString0x20A CostStringCantAfford;
	NMS::NMSString0x10 CanAffordIfMissionActive;
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;
};

struct GcWaterEmissionData
{
	float FoamEmissionSelectionWeights[4];
	float WaterEmissionSelectionWeights[4];
	bool OverrideDefault;
};

//Dependency: GcWaterEmissionData
struct GcWaterEmissionBiomeData
{
	NMS_GameComponents::GcWaterEmissionData SubBiomeOverrides[32];
};

//Dependency: NMSString0x10
struct GcCustomSpaceStormComponentData
{
	NMS::NMSString0x10 StormId;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcGroundWormComponentData
{
	NMS::NMSString0x10 AttackDamageType;
	NMS::NMSString0x10 EmergeEffect;
	NMS::NMSString0x10 EmergeShake;
	NMS::NMSString0x10 RoarShake;
	NMS::NMSString0x10 SpitProjectile;
	NMS::NMSString0x10 SubmergeEffect;
	float AttackAngle;
	float AttackCooldown;
	float AttackDamageRadius;
	float AttackDistMax;
	float AttackDistMin;
	float CollisionBodySize;
	float EmergeDist;
	float EmergeEffectTime;
	float EmergeLookBlendEnd;
	float EmergeLookBlendStart;
	float EmergeTime;
	float FlinchAngleMax;
	float FlinchAngleMin;
	float FlinchSmooth;
	float FlinchTime;
	float LungeAngleBase;
	float LungeAngleHead;
	float LungeBeginTime;
	float LungeBlendInSpeed;
	float LungeBlendOutSpeed;
	float LungeEndTime;
	float LungeStrength;
	float RearUpBeginDist;
	float RearUpEndDist;
	float RestTime;
	float RoarCooldown;
	float RumbleTime;
	float SpitCooldown;
	int32_t SpitCount;
	float SubmergeDepth;
	float SubmergeDist;
	float TrackTime;
	float TurnSpeed;
	float WindUpAngleBase;
	float WindUpAngleHead;
	float WindUpStrength;
	NMS::NMSString0x100 GrabJoint;
	NMS::NMSString0x100 LookJoint;
};

//Dependency: GcAlienRace
struct GcCostWordKnowledge
{
	enum class RequirementEnum : uint32_t
	{
		CanLearn = 0,
		CanSpeak = 1,
	};

	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcCostWordKnowledge::RequirementEnum Requirement;
};

struct GcFontTypesEnum
{
	enum class FontEnum : uint32_t
	{
		Impact = 0,
		Bebas = 1,
		GeosansLightWide = 2,
		GeosansLight = 3,
		GeosansLightMedium = 4,
		GeosansLightSmall = 5,
		Segoeuib = 6,
		Segoeui32 = 7,
	};

	NMS_GameComponents::GcFontTypesEnum::FontEnum Font;
};

//Dependency: NMSString0x80
struct GcTexturePrefetchData
{
	std::vector<NMS::NMSString0x80> Textures;
};

//Dependency: NMSString0x10
struct GcRewardSystemSpecificProductFromList
{
	std::vector<NMS::NMSString0x10> ProductList;
	int32_t AmountMax;
	int32_t AmountMin;
	bool ForceSpecialMessage;
};

struct GcMissionConditionWaterPlanet
{
};

//Dependency: NMSString0x10
struct GcCreatureBaitComponentData
{
	std::vector<NMS::NMSString0x10> AttractList;
	float BaitRadius;
	float BaitStrength;
	bool Debug;
	bool InducesRage;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureEffectTrigger
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Effect;
	std::vector<NMS::NMSString0x100> JointName;
	int32_t Frame;
	float Scale;
	bool GroundTint;
};

//Dependency: GcAlienMood
//Dependency: NMSString0x10
struct GcNPCInteractiveObjectStateTransition
{
	enum class RequireModeEnum : uint32_t
	{
		Seated = 0,
		Standing = 1,
		None = 2,
	};

	std::vector<NMS::NMSString0x10> ExcludeTags;
	std::vector<NMS_GameComponents::GcAlienMood> ForceIfMood;
	NMS::NMSString0x10 NewState;
	NMS::NMSString0x10 RequireEvent;
	NMS::NMSString0x10 RequireLocator;
	float Probability;
	NMS_GameComponents::GcNPCInteractiveObjectStateTransition::RequireModeEnum RequireMode;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkJointBindingData
{
	float InvBindMatrix[16];
	float BindRotate[4];
	float BindScale[3];
	float BindTranslate[3];
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceStartPartyEventForStage
{
	NMS::VariableSizeString DebugText;
};

//Dependency: GcCreaturePetAccessory
struct GcCreaturePetData
{
	std::vector<NMS_GameComponents::GcCreaturePetAccessory> AccessorySlots;
};

struct GcStyleProp_Size
{
	float FontSize;
};

struct GcMissionConditionAllSystemPlanetsDiscovered
{
	int32_t DisplayNumberOffset;
};

struct GcSettlementJudgementType
{
	enum class SettlementJudgementTypeEnum : uint32_t
	{
		None = 0,
		StrangerVisit = 1,
		Policy = 2,
		NewBuilding = 3,
		BuildingChoice = 4,
		Conflict = 5,
		Request = 6,
		BlessingPerkRelated = 7,
		JobPerkRelated = 8,
		ProcPerkRelated = 9,
		UpgradeBuilding = 10,
		UpgradeBuildingChoice = 11,
	};

	NMS_GameComponents::GcSettlementJudgementType::SettlementJudgementTypeEnum SettlementJudgementType;
};

//Dependency: GcSettlementJudgementType
struct GcRewardSettlementJudgement
{
	std::vector<NMS_GameComponents::GcSettlementJudgementType> JudgementTypes;
	bool Silent;
};

struct GcCreatureRarity
{
	enum class CreatureRarityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
		SuperRare = 3,
	};

	NMS_GameComponents::GcCreatureRarity::CreatureRarityEnum CreatureRarity;
};

//Dependency: GcCreatureRarity
//Dependency: NMSString0x10
struct GcCreatureTagAndRarity
{
	NMS::NMSString0x10 Tag;
	NMS_GameComponents::GcCreatureRarity RarityOverride;
};

struct GcCreatureRoleFrequencyModifier
{
	enum class CreatureRoleFrequencyModifierEnum : uint32_t
	{
		Never = 0,
		Low = 1,
		Normal = 2,
		High = 3,
	};

	NMS_GameComponents::GcCreatureRoleFrequencyModifier::CreatureRoleFrequencyModifierEnum CreatureRoleFrequencyModifier;
};

//Dependency: GcCreatureTagAndRarity
//Dependency: GcCreatureTypes
//Dependency: GcCreatureRoleFrequencyModifier
//Dependency: GcCreatureRarity
//Dependency: NMSString0x10
struct GcCreatureData
{
	enum class MoveAreaEnum : uint32_t
	{
		Ground = 0,
		Water = 1,
		Air = 2,
		Space = 3,
	};

	std::vector<NMSTemplate> Data;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 KillingBlowMessageID;
	NMS::NMSString0x10 KillStatID;
	std::vector<NMS_GameComponents::GcCreatureTagAndRarity> Tags;
	NMS_GameComponents::GcCreatureTypes ForceType;
	float FurChance;
	float FurLengthModifierAtMaxScale;
	float FurLengthModifierAtMinScale;
	NMS_GameComponents::GcCreatureRoleFrequencyModifier HerbivoreProbabilityModifier;
	float MaxScale;
	float MinScale;
	NMS_GameComponents::GcCreatureData::MoveAreaEnum MoveArea;
	NMS_GameComponents::GcCreatureRoleFrequencyModifier PredatorProbabilityModifier;
	NMS_GameComponents::GcCreatureRarity Rarity;
	NMS_GameComponents::GcCreatureTypes RealType;
	bool CanBeFemale;
	bool EcoSystemCreature;
	bool OnlySpawnWhenIdIsForced;
};

struct GcInventoryValueData
{
	float BaseCostPerSlot;
	float BaseMaxValue;
	float BaseMinValue;
	float ExponentialValue;
	float SlotExponentialValue;
	float SlotsPerLevel;
	float ValueToCost;
};

//Dependency: GcItemFilterDataTableEntry
struct GcItemFilterDataTable
{
	std::vector<NMS_GameComponents::GcItemFilterDataTableEntry> Filters;
};

//Dependency: NMSString0x10
struct GcCreatureMoveAnimData
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 AnimLeft;
	NMS::NMSString0x10 AnimRight;
	float AnimMoveSpeed;
	float AnimSpeed;
	float MaxPetSpeedScale;
	float MaxPredatorSpeedScale;
	float MaxSpeedScale;
	float MinPetSpeedScale;
	float MinSpeedScale;
	bool AnimMoveSpeedCached;
};

//Dependency: GcCreatureData
struct GcCreatureDataTable
{
	std::vector<NMS_GameComponents::GcCreatureData> Table;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStatMilestone
{
	enum class MilestoneEnum : uint32_t
	{
		Bronze = 0,
		Silver = 1,
		Gold = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcMissionSequenceWaitForStatMilestone::MilestoneEnum Milestone;
	bool EveryMilestone;
};

//Dependency: NMSString0x10
struct GcNPCPlacementComponentData
{
	std::vector<NMS::NMSString0x10> PlacementInfosToApply;
	bool PlaceInAbandonedSystems;
	bool SearchPlacementFromMaster;
	bool WaitToPlace;
};

struct GcMissionConditionWristMenuOpen
{
	bool GunHandOnly;
	bool InventoryOnly;
	bool LeftHandOnly;
	bool QuickMenuOnly;
};

//Dependency: NMSString0x10
struct GcCreatureSubstanceList
{
	NMS::NMSString0x10 CreatureType;
	NMS::NMSString0x10 Item;
};

//Dependency: GcSentinelTypes
//Dependency: NMSString0x10
struct GcSentinelRobotComponentData
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcSentinelTypes Type;
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcLootComponentData
{
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 TimeOutEffect;
	NMS::Vector2f Timed;
	float FlashPercent;
	int32_t NumFlashes;
	bool DeathPoint;
	bool KeepUpright;
	bool PhysicsControlled;
};

//Dependency: GcBuildingPartSearchType
//Dependency: NMSString0x10
struct GcMissionConditionBasePartBuilt
{
	enum class PartInCurrentBaseEnum : uint32_t
	{
		DontCare = 0,
		YesAllPlayerOwned = 1,
	};

	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::NMSString0x10 PartID;
	int32_t Count;
	NMS_GameComponents::GcMissionConditionBasePartBuilt::PartInCurrentBaseEnum PartInCurrentBase;
	bool TakeIDFromSeasonData;
};

//Dependency: GcCreatureEffectTrigger
struct GcCreatureEffectComponentData
{
	std::vector<NMS_GameComponents::GcCreatureEffectTrigger> AnimTriggers;
};

struct GcCreatureEffectTriggerRequirementCreatureSize
{
	float MaxCreatureSize;
	float MinCreatureSize;
};

//Dependency: NMSString0x20A
struct GcRewardSettlementParty
{
	NMS::NMSString0x20A OSD;
	float FireworksDuration;
	float FireworksFrequency;
};

//Dependency: GcCreatureFilename
struct GcCreatureFilenameTable
{
	std::vector<NMS_GameComponents::GcCreatureFilename> Table;
};

//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcNPCProbabilityAnimationData
{
	enum class AnimationIntensityEnum : uint32_t
	{
		Low = 0,
		Medium = 1,
		High = 2,
		None = 3,
	};

	std::vector<NMS_GameComponents::GcAlienRace> ExcludeRace;
	NMS::NMSString0x10 Name;
	std::vector<NMS::NMSString0x10> Tags;
	NMS_GameComponents::GcNPCProbabilityAnimationData::AnimationIntensityEnum AnimationIntensity;
	float Probability;
};

struct GcNPCSeatedPosture
{
	enum class NPCSeatedPostureEnum : uint32_t
	{
		Sofa = 0,
		Sit = 1,
	};

	NMS_GameComponents::GcNPCSeatedPosture::NPCSeatedPostureEnum NPCSeatedPosture;
};

//Dependency: GcNPCProbabilityAnimationData
//Dependency: NMSString0x10
//Dependency: GcNPCInteractiveObjectStateTransition
//Dependency: GcNPCPropType
//Dependency: GcNPCSeatedPosture
//Dependency: NMSString0x40
struct GcNPCInteractiveObjectState
{
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> Animations;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcNPCInteractiveObjectStateTransition> Transitions;
	float BlendTime;
	float EarlyOutTime;
	int32_t MaxAnims;
	float MaxTime;
	int32_t MinAnims;
	float MinTime;
	NMS_GameComponents::GcNPCPropType Prop;
	NMS_GameComponents::GcNPCSeatedPosture SeatedPosture;
	float SpineAdjustAmount;
	NMS::NMSString0x40 LookAtNode;
	bool CanConverse;
	bool FaceInvNodeDir;
	bool FaceLookAt;
	bool FaceNodeDir;
	bool FaceSpawnDir;
	bool LookAtModel;
	bool MaintainLookAt;
	bool PlayIdles;
};

//Dependency: GcNPCInteractiveObjectState
//Dependency: GcNPCInteractiveObjectType
struct GcNPCInteractiveObjectComponentData
{
	std::vector<NMS_GameComponents::GcNPCInteractiveObjectState> States;
	float DurationMax;
	float DurationMin;
	NMS_GameComponents::GcNPCInteractiveObjectType InteractiveObjectType;
	int32_t MaxCapacity;
};

//Dependency: GcCreatureFootParticleSingleData
struct GcCreatureFootParticleData
{
	std::vector<NMS_GameComponents::GcCreatureFootParticleSingleData> ParticleData;
};

struct GcMissionConsequenceSetMissionStat
{
	int32_t ValueToAdd;
	int32_t ValueToSet;
};

//Dependency: GcCreatureGenerationDomainTable
struct GcCreatureGenerationArchetypes
{
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> AirArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> CaveArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> GroundArchetypes;
	std::vector<NMS_GameComponents::GcCreatureGenerationDomainTable> WaterArchetypes;
};

//Dependency: GcCreatureGenerationWeightedListDomainEntry
struct GcCreatureGenerationWeightedList
{
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Air;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Cave;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Ground;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> Water;
};

//Dependency: GcCreatureGenerationWeightedList
struct GcCreatureGenerationOptionalWeightedList
{
	NMS_GameComponents::GcCreatureGenerationWeightedList Archetypes;
	float Probability;
	bool OverrideAllDomains;
};

//Dependency: GcCreatureGenerationOptionalWeightedList
//Dependency: GcCreatureGenerationWeightedList
//Dependency: GcCreatureGenerationWeightedListDomainEntry
struct GcCreatureGenerationData
{
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList SubBiomeSpecific[32];
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList BiomeSpecific[17];
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList AbandonedSystemSpecific;
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList EmptySystemSpecific;
	NMS_GameComponents::GcCreatureGenerationOptionalWeightedList PurpleSystemSpecific;
	NMS_GameComponents::GcCreatureGenerationWeightedList Generic;
	std::vector<NMS_GameComponents::GcCreatureGenerationWeightedListDomainEntry> AirArchetypesForEmptyGround;
	float SandwormPresenceChance[17];
	float AirGroupsPerKm[4];
	float CaveGroupsPerKm[4];
	float DensityModifiers[4];
	float GroundGroupsPerKm[4];
	float LifeChance[4];
	float LifeLevelDensityModifiers[4];
	float RarityFrequencyModifiers[4];
	float RoleFrequencyModifiers[4];
	float WaterGroupsPerKm[4];
	float HerdCreaturePenalty;
};

struct GcRewardRepairWholeInventory
{
	enum class InventoryToRepairEnum : uint32_t
	{
		Personal = 0,
		PersonalTech = 1,
		Ship = 2,
		ShipTech = 3,
		Freighter = 4,
		Vehicle = 5,
		AttachedAbandonedShip = 6,
		Weapon = 7,
	};

	NMS_GameComponents::GcRewardRepairWholeInventory::InventoryToRepairEnum InventoryToRepair;
};

//Dependency: Vector3f
struct GcSquadronHologramComponentData
{
	NMS::Vector3f SpawnOffset;
	float HologramRotationSpeedDegPerSec;
	float PilotScale;
	float SpawnRotation;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkCoordinateOrientation
{
	enum class CoordinateOrientationEnum : uint32_t
	{
		None = 0,
		Random = 1,
	};

	NMS_Toolkit::TkCoordinateOrientation::CoordinateOrientationEnum CoordinateOrientation;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcLodAction
{
	int32_t LodOverride;
};

struct GcMissionConditionExpeditionProgress
{
};

struct GcMissionConditionFirstPurpleSystemValid
{
	bool CheckDistance;
};

struct GcItemFilterStageDataStageGroup
{
	enum class FilterStageGroupOperatorEnum : uint32_t
	{
		AND = 0,
		OR = 1,
	};

	std::vector<NMSTemplate> Children;
	NMS_GameComponents::GcItemFilterStageDataStageGroup::FilterStageGroupOperatorEnum FilterStageGroupOperator;
};

struct GcMissionConditionWaitForTime
{
	uint64_t WaitTimeInSeconds;
	bool ThisConditionWillSetMissionUserDataIsThatOk;
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionCombinedStatLevel
{
	std::vector<NMS::NMSString0x10> Stats;
	int32_t Amount;
	int32_t Modulo;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: NMSString0x10
struct GcCreatureGroupDescription
{
	NMS::NMSString0x10 Group;
	float GroupsPerSquareKm;
	int32_t MaxGroupSize;
	int32_t MinGroupSize;
};

struct GcJourneyCategoryType
{
	enum class CategoryTypeEnum : uint32_t
	{
		Journey = 0,
		SeasonHistory = 1,
		Race = 2,
		Guild = 3,
	};

	NMS_GameComponents::GcJourneyCategoryType::CategoryTypeEnum CategoryType;
};

//Dependency: GcJourneyMedal
//Dependency: GcMissionFaction
//Dependency: NMSString0x20A
//Dependency: GcGameMode
//Dependency: GcJourneyCategoryType
//Dependency: TkTextureResource
struct GcJourneyCategory
{
	NMS::NMSString0x20A DescriptionID;
	NMS::NMSString0x20A NameIDLower;
	NMS::NMSString0x20A NameIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS_GameComponents::GcJourneyMedal> Medals;
	NMS_GameComponents::GcMissionFaction Faction;
	NMS_GameComponents::GcGameMode GameModeRestriction;
	NMS_GameComponents::GcJourneyCategoryType Type;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionBoolData
{
	NMS::NMSString0x10 Parameter;
	bool CompareValue;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcCreatureGroups
{
	enum class CreatureGroupEnum : uint32_t
	{
		Solo = 0,
		Couple = 1,
		Group = 2,
		Herd = 3,
	};

	NMS_GameComponents::GcCreatureGroups::CreatureGroupEnum CreatureGroup;
};

//Dependency: GcBiomeType
//Dependency: GcPlayerHazardType
struct GcMissionConditionSystemPlanetTest
{
	NMS_GameComponents::GcBiomeType PlanetBiomeRequirement;
	NMS_GameComponents::GcPlayerHazardType PlanetWeatherRequirement;
	bool RequiresExtremePlanet;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationThrusterJet
{
	NMS_Toolkit::TkModelResource JetMesh;
	NMS_Toolkit::TkModelResource Trail;
	NMS::NMSString0x10 Effect;
	NMS::NMSString0x10 LocatorPrefix;
};

//Dependency: GcMaintenanceComponentData
struct GcCreatureHarvesterComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumSlots;
};

//Dependency: NMSString0x10
struct GcRepShopDonation
{
	std::vector<NMS::NMSString0x10> AltIDs;
	NMS::NMSString0x10 ProductID;
	int32_t DonationValue;
	int32_t MaxDonations;
	bool ValidProcProdCategories[28];
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcRepShopItem
{
	std::vector<NMS::NMSString0x10> AltIDs;
	NMS::NMSString0x10 ProductID;
	int32_t AmountForSale;
	NMS_GameComponents::GcCurrency Currency;
	float PriceMul;
	int32_t RepLevelRequired;
};

//Dependency: GcRepShopDonation
//Dependency: GcRepShopItem
struct GcRepShopData
{
	std::vector<NMS_GameComponents::GcRepShopDonation> DonatableItems;
	std::vector<NMS_GameComponents::GcRepShopItem> RepItems;
};

//Dependency: GcCutSceneData
struct GcCutSceneComponentData
{
	NMS_GameComponents::GcCutSceneData CutSceneData;
};

//Dependency: GcFrigateClass
//Dependency: GcInventoryClass
//Dependency: GcAlienRace
//Dependency: NMSString0x100
//Dependency: GcSeed
//Dependency: NMSString0x10
struct GcFleetFrigateSaveData
{
	NMS::GcSeed ForcedTraitsSeed;
	NMS::GcSeed HomeSystemSeed;
	NMS::GcSeed ResourceSeed;
	std::vector<int32_t> Stats;
	std::vector<NMS::NMSString0x10> TraitIDs;
	uint64_t TimeOfLastIncomeCollection;
	int32_t DamageTaken;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	NMS_GameComponents::GcInventoryClass InventoryClass;
	int32_t NumberOfTimesDamaged;
	NMS_GameComponents::GcAlienRace Race;
	int32_t RepairsMade;
	int32_t TotalNumberOfExpeditions;
	int32_t TotalNumberOfFailedEvents;
	int32_t TotalNumberOfSuccessfulEvents;
	NMS::NMSString0x100 CustomName;
};

struct GcMissionConditionBuildMenuOpen
{
};

struct GcScanType
{
	enum class ScanTypeEnum : uint32_t
	{
		Tool = 0,
		Beacon = 1,
		RadioTower = 2,
		Observatory = 3,
		DistressSignal = 4,
		Waypoint = 5,
		Ship = 6,
		DebugPlanet = 7,
		DebugSpace = 8,
		VisualOnly = 9,
		VisualOnlyAerial = 10,
	};

	NMS_GameComponents::GcScanType::ScanTypeEnum ScanType;
};

//Dependency: GcScanType
//Dependency: NMSString0x10
struct GcScanData
{
	enum class CameraEventTypeEnum : uint32_t
	{
		None = 0,
		AerialView = 1,
		LookAt = 2,
	};

	enum class CameraEventFocusTargetTypeEnum : uint32_t
	{
		None = 0,
		ScanEventBuilding = 1,
		RevealedNPC = 2,
	};

	NMS::NMSString0x10 CameraEventId;
	NMS_GameComponents::GcScanData::CameraEventFocusTargetTypeEnum CameraEventFocusTargetType;
	NMS_GameComponents::GcScanData::CameraEventTypeEnum CameraEventType;
	float ChargeTime;
	float PulseRange;
	float PulseTime;
	float ScanRevealDelay;
	NMS_GameComponents::GcScanType ScanType;
	bool AddMarkers;
	bool PlayAudioOnMarkers;
};

//Dependency: GcScanData
//Dependency: NMSString0x10
struct GcScanDataTableEntry
{
	NMS_GameComponents::GcScanData ScanData;
	NMS::NMSString0x10 ID;
};

//Dependency: GcScanDataTableEntry
struct GcScanDataTable
{
	std::vector<NMS_GameComponents::GcScanDataTableEntry> ScanData;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCreatureSlots
{
	int32_t CreatureSlots;
	NMS_Toolkit::TkEqualityEnum Test;
	bool OnlyCountFreeSlots;
};

//Dependency: GcSentinelSpawnSequenceStep
struct GcSentinelSpawnSequence
{
	std::vector<NMS_GameComponents::GcSentinelSpawnSequenceStep> Waves;
};

//Dependency: VariableSizeString
struct GcMissionSequenceGetInShip
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: GcCreatureMoveAnimData
struct GcCreatureMovementData
{
	std::vector<NMS_GameComponents::GcCreatureMoveAnimData> Anims;
	float HeightMax;
	float HeightMin;
	float HeightRangeMax;
	float HeightRangeMin;
	float HeightTime;
	float MoveRange;
	float MoveSpeedScale;
	float TurnRadiusScale;
	bool Herd;
	bool IgnoreRotationInPounce;
	bool LimitHeightRange;
};

//Dependency: GcCustomisationUI
struct GcCustomisationUIData
{
	NMS_GameComponents::GcCustomisationUI CustomisationUIData[26];
};

//Dependency: GcBlockListPersistence
//Dependency: GcGyroSettingsData
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcHand
//Dependency: GcMovementDirection
//Dependency: TkLanguages
//Dependency: NMSString0x80
struct GcUserSettingsData
{
	enum class UIColourSchemeEnum : uint32_t
	{
		Default = 0,
		Protanopia = 1,
		Deuteranopia = 2,
		Tritanopia = 3,
	};

	enum class TurnModeEnum : uint32_t
	{
		Smooth = 0,
		Snap = 1,
	};

	enum class TemperatureUnitEnum : uint32_t
	{
		Invalid = 0,
		C = 1,
		F = 2,
		K = 3,
	};

	enum class SuitVoiceEnum : uint32_t
	{
		Off = 0,
		High = 1,
		Low = 2,
	};

	enum class SpaceCombatFollowModeEnum : uint32_t
	{
		Disabled = 0,
		Hold = 1,
		Toggle = 2,
	};

	enum class PS4FixedFPSEnum : uint32_t
	{
		Invalid = 0,
		True = 1,
		False = 2,
		MaxPerformance = 3,
	};

	enum class PlayerVoiceEnum : uint32_t
	{
		Off = 0,
		High = 1,
		Low = 2,
		Alien = 3,
	};

	enum class MovementModeEnum : uint32_t
	{
		Teleporter = 0,
		Smooth = 1,
	};

	enum class HighResVRUIEnum : uint32_t
	{
		High = 0,
		Low = 1,
	};

	enum class EyeTrackingFlagsEnum : uint32_t
	{
		None = 0,
		BaseBuilding = 1,
		WristMenus = 2,
	};

	enum class ConsoleHFREnum : uint32_t
	{
		False = 0,
		True = 1,
	};

	enum class BaseSharingModeEnum : uint32_t
	{
		Undecided = 0,
		On = 1,
		Off = 2,
	};

	std::vector<NMS::NMSString0x10> SeenProducts;
	std::vector<NMS::NMSString0x10> SeenSubstances;
	std::vector<NMS::NMSString0x10> SeenTechnologies;
	std::vector<NMS::NMSString0x20A> SeenWikiTopics;
	std::vector<NMS::NMSString0x10> UnlockedPlatformRewards;
	std::vector<NMS::NMSString0x10> UnlockedSeasonRewards;
	std::vector<NMS::NMSString0x10> UnlockedSpecials;
	std::vector<NMS::NMSString0x10> UnlockedTitles;
	std::vector<NMS::NMSString0x10> UnlockedTwitchRewards;
	std::vector<NMS::NMSString0x20A> UnlockedWikiTopics;
	std::vector<NMS::NMSString0x80> UpgradedUsers;
	NMS_GameComponents::GcBlockListPersistence BlockList;
	NMS_GameComponents::GcGyroSettingsData GyroSettings;
	NMS_GameComponents::GcUserSettingsData::BaseSharingModeEnum BaseSharingMode;
	int32_t CamerShakeStrength;
	NMS_GameComponents::GcUserSettingsData::ConsoleHFREnum ConsoleHFR;
	float CrossSavesUploadTimeout;
	int32_t CursorSensitivityMode1;
	int32_t CursorSensitivityMode2;
	NMS_GameComponents::GcHand DominantHand;
	NMS_GameComponents::GcUserSettingsData::EyeTrackingFlagsEnum EyeTrackingFlags;
	int32_t Filter;
	int32_t FireteamSessionCount;
	int32_t FlightSensitivityMode1;
	int32_t FlightSensitivityMode2;
	float FrontendZoom;
	float HazardEffectsStrength;
	int32_t HeadsetVibrationStrength;
	NMS_GameComponents::GcUserSettingsData::HighResVRUIEnum HighResVRUI;
	float HUDZoom;
	NMS_Toolkit::TkLanguages Language;
	int32_t LastSeenCommunityMission;
	int32_t LastSeenCommunityMissionTier;
	int32_t LookSensitivityMode1;
	int32_t LookSensitivityMode2;
	int32_t MotionBlurAmount;
	int32_t MouseSpringSmoothing;
	NMS_GameComponents::GcMovementDirection MovementDirectionHands;
	NMS_GameComponents::GcMovementDirection MovementDirectionPad;
	NMS_GameComponents::GcUserSettingsData::MovementModeEnum MovementMode;
	int32_t MusicVolume;
	float PlayerHUDVROffset;
	NMS_GameComponents::GcUserSettingsData::PlayerVoiceEnum PlayerVoice;
	NMS_GameComponents::GcUserSettingsData::PS4FixedFPSEnum PS4FixedFPS;
	float PS4FOVFoot;
	float PS4FOVShip;
	int32_t ScreenBrightness;
	int32_t SfxVolume;
	float ShipHUDVROffset;
	NMS_GameComponents::GcUserSettingsData::SpaceCombatFollowModeEnum SpaceCombatFollowMode;
	NMS_GameComponents::GcUserSettingsData::SuitVoiceEnum SuitVoice;
	NMS_GameComponents::GcUserSettingsData::TemperatureUnitEnum TemperatureUnit;
	int32_t TriggerFeedbackStrength;
	NMS_GameComponents::GcUserSettingsData::TurnModeEnum TurnMode;
	NMS_GameComponents::GcUserSettingsData::UIColourSchemeEnum UIColourScheme;
	int32_t VibrationStrength;
	int32_t VoiceVolume;
	float VRVignetteStrength;
	bool AccessibleText;
	bool AllowWhiteScreenTransitions;
	bool AutoRotateThirdPersonPlayerCamera;
	bool AutoScanDiscoveries;
	bool BaseBuildingShowOptionsFromVision;
	bool BaseComplexityLimitsEnabled;
	bool CrossPlatform;
	bool CrossSaves;
	bool CrossSavesAutoUploads;
	bool CrossSavesSuppressAutoUploadTimeoutPopup;
	bool DamageNumbers;
	bool EnableControllerCursorInVR;
	bool EnableLargeLobbies;
	bool EnableModdingConsole;
	bool HeadBob;
	bool HighlightInteractableObjects;
	bool HUDHidden;
	bool IncreaseMissionTextContrast;
	bool InstantUIDelete;
	bool InstantUIInputs;
	bool InvertFlightControls;
	bool InvertLookControls;
	bool InvertVRInWorldFlightControls;
	bool MoveableWristMenus;
	bool Multiplayer;
	bool PlaceJumpSwap;
	bool PS4VignetteAndScanlines;
	bool QuickMenuBuildMenuSwap;
	bool SpeechToText;
	bool SpookHazardSkySpin;
	bool SprintScanSwap;
	bool Translate;
	bool UseAutoTorch;
	bool UseCharacterHeightForCamera;
	bool UseOldMouseFlight;
	bool UseShipAutoControlVignette;
	bool Vibration;
	bool VoiceChat;
	bool VRHandControllerEnableTwist;
	bool VRHandControllerSwapYawAndRoll;
	bool VRHeadBob;
	bool VRShowBody;
	bool VRVehiclesUseWorldControls;
	bool XboxOneXHighResolutionMode;
};

//Dependency: NMSString0x10
struct GcMissionConditionMissionSelected
{
	NMS::NMSString0x10 MissionID;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcProductCategory
//Dependency: GcItemNeedPurpose
//Dependency: NMSString0x10
struct GcMissionConditionHasProduct
{
	NMS::NMSString0x10 Product;
	NMS::NMSString0x10 UseAmountToAffordRecipe;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	NMS_GameComponents::GcProductCategory ProductCategory;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool AllowedToSetInventoryHint;
	bool DependentOnSeasonMilestone;
	bool DoNotFormatText;
	bool ForceInventoryHintAtAllTimes;
	bool ForceSearchFreighterAndChests;
	bool MustBeImmediatelyAccessible;
	bool SearchCookingIngredients;
	bool SearchEveryShip;
	bool SearchGrave;
	bool SyncWithMissionFireteam;
	bool TakeAffordRecipeFromSeasonData;
	bool TakeAmountFromSeasonData;
	bool TakeIdFromSeasonData;
	bool TeachIfNotKnown;
	bool UseAffordRecipeForTextFormatting;
	bool UseDefaultAmount;
	bool UseProductCategory;
	bool UseProductIconAsMissionIcon;
};

//Dependency: GcAudioWwiseEvents
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x100
struct GcGrabPlayerComponentData
{
	NMS::Vector3f GrabOffset;
	NMS::NMSString0x10 DamageType;
	NMS::NMSString0x10 DefendAnim;
	NMS::NMSString0x10 GrabAnim;
	NMS::NMSString0x10 HitReactAnim;
	NMS::NMSString0x10 HoldAnim;
	NMS::NMSString0x10 IdleAnim;
	NMS::NMSString0x10 PlayerGrabbedAnim;
	NMS::Vector2f HitReactAngles;
	NMS::Vector2f LookAroundAngles;
	NMS::Vector2f LookAroundAnglesFine;
	NMS::Vector2f LookAroundTime;
	NMS::Vector2f LookAroundTrackTime;
	NMS::Vector2f LookAtPlayerTime;
	NMS::Vector2f SleepTime;
	float ActivateRange;
	float BodgeInputAngle;
	float BodgeOutputAngle;
	float CooldownTime;
	float DamageTime;
	float EjectImpulse;
	float FocusRange;
	float GrabAttachStrength;
	NMS_GameComponents::GcAudioWwiseEvents GrabBeginAudioEvent;
	float GrabBlendTime;
	NMS_GameComponents::GcAudioWwiseEvents GrabEndAudioEvent;
	float GrabRadius;
	float HitReactAnimChance;
	float HoldTime;
	float LookAroundFineModifier;
	float LookAtPlayerChance;
	float LungeRadius;
	float MaxLookAngle;
	float RestTime;
	float SleepChance;
	float TrackTime;
	float TriggerRange;
	NMS::NMSString0x100 GrabJoint;
	NMS::NMSString0x100 LookJoint;
};

struct GcMissionConditionMissionMessageWarp
{
};

//Dependency: TkModelRendererData
struct GcModelViewCollection
{
	NMS_Toolkit::TkModelRendererData ModelViewData[49];
};

//Dependency: GcSeasonalRingData
struct GcSeasonalRingArray
{
	std::vector<NMS_GameComponents::GcSeasonalRingData> SeasonalRingData;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
struct TkNGuiTreeViewTemplate
{
	NMS::Colour FilteredTextColour;
	NMS::Colour HighlightColour;
	NMS::Colour InactiveTextColour;
	NMS::Colour LineColour;
	NMS::Colour TextColour;
	float ElementHeight;
	float IconMargin;
	float IconPad;
	float IconWidth;
	float LineWidth;
	float NestIndent;
	float VerticalSplitPad;
	float VerticalSplitWidth;
	bool AllowVerticalSplit;
	bool FilteringHidesElements;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWonderCategoryConfig
{
	enum class WonderCategoryComparisonTypeEnum : uint32_t
	{
		Max = 0,
		Min = 1,
	};

	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 StatID;
	float ThresholdValue;
	NMS_GameComponents::GcWonderCategoryConfig::WonderCategoryComparisonTypeEnum WonderCategoryComparisonType;
};

//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector2f
struct GcHUDEffectRewardData
{
	NMS::Colour BoxColourEnd;
	NMS::Colour BoxColourStart;
	NMS::Vector2f BoxSizeEnd;
	NMS::Vector2f BoxSizeStart;
	float BoxAnimTime;
	float BoxAnimTimeBetweenBoxes;
	float BoxRotate;
	float BoxThicknessEnd;
	float BoxThicknessStart;
	int32_t NumBoxes;
	NMS_Toolkit::TkCurveType BoxAnimTimeCurve;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkNGuiRectanglePulseEffect
{
	float PulseOffset;
	float PulseRate;
	float PulseWidth;
	NMS_Toolkit::TkCurveType PulseAlphaCurve;
	NMS_Toolkit::TkCurveType PulseSizeCurve;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: Colour
struct GcSpaceMapObjectData
{
	NMS::Colour Colour;
	float DistanceMin;
	float DistanceRange;
	float Radius;
	float ScaleMagnitude;
	float ScaleMin;
	float ScaleRange;
	bool Orient;
	bool TintModel;
};

//Dependency: GcHUDStartup
struct GcHUDStartupTable
{
	enum class HUDStartupEnum : uint32_t
	{
		WaitingForInit = 0,
		Startup = 1,
		Booting = 2,
		LifeSupport = 3,
		Shield = 4,
		ShieldEffect = 5,
		Scanner = 6,
		Jetpack = 7,
		Weapon = 8,
		Finishing = 9,
		DiscoverPlanet = 10,
		Done = 11,
		Inactive = 12,
	};

	NMS_GameComponents::GcHUDStartup HUDStartup[13];
	float BackgroundAlpha;
	float ButtonFlashAlpha;
	float ButtonFlashRate;
	float FadeInFlashTime;
	float LookSpeed;
	float StartHoldTime;
};

//Dependency: GcAudioWwiseEvents
//Dependency: TkCurveType
struct GcInventorySlotActionData
{
	NMS_GameComponents::GcAudioWwiseEvents ActionAudio;
	float ScaleAtMax;
	float ScaleAtMin;
	NMS_GameComponents::GcAudioWwiseEvents SuitAudio;
	float Time;
	NMS_Toolkit::TkCurveType AnimCurve;
	bool Disabled;
	bool Glows;
	bool Loops;
	bool Scales;
};

struct GcWorldUISettings
{
	float GameModeSelectorQuadOffset;
	float GameModeSelectorQuadOffsetV2;
	float HUDDefWorldQuadOffset;
	float HUDDefWorldQuadOffsetV2;
	float HUDDefWorldQuadShipAddOffset;
	float HUDDefWorldQuadShipAddOffsetV2;
	float HUDInterpSpeed;
	float HUDThresholdHorz;
	float HUDThresholdVert;
	float HUDWorldQuadScale;
	float HUDWorldQuadShipScale;
	float UIWorldQuadOffset;
	float UIWorldQuadOffsetBuildMenu;
	float UIWorldQuadOffsetBuildMenuV2;
	float UIWorldQuadOffsetV2;
	float UIWorldQuadScale;
	float UIWorldQuadShipAddOffset;
	float UIWorldQuadShipAddOffsetV2;
	float UIWorldQuadShipScale;
	float UIWorldQuadSideOffset;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkInOutCurve
{
	float Midpoint;
	NMS_Toolkit::TkCurveType InCurve;
	NMS_Toolkit::TkCurveType OutCurve;
};

//Dependency: TkInOutCurve
struct TkHitCurveData
{
	NMS_Toolkit::TkInOutCurve Curve;
	float Time;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcModelViewCollection
//Dependency: GcScanEffectData
//Dependency: GcSeasonalRingArray
//Dependency: GcDiscoveryHelperTimings
//Dependency: TkNGuiTreeViewTemplate
//Dependency: GcWonderCategoryConfig
//Dependency: GcHUDEffectRewardData
//Dependency: TkNGuiRectanglePulseEffect
//Dependency: GcSpaceMapObjectData
//Dependency: GcHUDStartupTable
//Dependency: GcInventorySlotActionData
//Dependency: GcWorldUISettings
//Dependency: GcInteractionDof
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: TkModelRendererData
//Dependency: TkTextureResource
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: NMSString0x100
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector4f
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcUIGlobals
{
	NMS_GameComponents::GcModelViewCollection ModelViews;
	NMS_Toolkit::TkModelRendererData ShipThumbnailRenderSettings[10];
	NMS_Toolkit::TkModelRendererData HoverShipThumbnailModelView;
	NMS_Toolkit::TkModelRendererData LargeMultitoolThumbnailModelView;
	NMS_Toolkit::TkModelRendererData MultitoolThumbnailModelView;
	NMS_Toolkit::TkModelRendererData PetThumbnailModelView;
	NMS_Toolkit::TkModelRendererData RepairBackpackCamera;
	NMS_Toolkit::TkModelRendererData RepairCamera;
	NMS_Toolkit::TkModelRendererData RepairShipCameraInWorld;
	NMS_Toolkit::TkModelRendererData RepairShipCameraModelView;
	NMS_Toolkit::TkModelRendererData RepairShipCameraVR;
	NMS_Toolkit::TkModelRendererData RepairWeaponCamera;
	NMS_Toolkit::TkModelRendererData SpookShipThumbnailModelView;
	NMS_Toolkit::TkNGuiTreeViewTemplate FileBrowserTreeViewTemplate;
	NMS_Toolkit::TkNGuiTreeViewTemplate SceneInfoTreeViewTemplate;
	NMS_Toolkit::TkNGuiTreeViewTemplate SkeletonToolsTreeViewTemplate;
	NMS_GameComponents::GcScanEffectData DebugEditorPreviewEffect;
	NMS_GameComponents::GcScanEffectData FreighterSummonScanEffect;
	NMS_GameComponents::GcHUDEffectRewardData OSDEpicItemRewardEffect;
	NMS_GameComponents::GcHUDEffectRewardData OSDRareItemRewardEffect;
	NMS::Colour SystemHooverLEDColours[5];
	NMS::Colour SystemHooverStatusBarColours[5];
	NMS_GameComponents::GcScanEffectData TargetDisplayScanEffect;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapAtlasData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapBlackHoleData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapFreighterData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapMarkerData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapNexusData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapPlanetData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapPulseEncounterData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapShipData;
	NMS_GameComponents::GcSpaceMapObjectData SpaceMapStationData;
	NMS::Colour AltimeterBandColour1;
	NMS::Colour AltimeterBandColour2;
	NMS::Colour AltimeterColour1;
	NMS::Colour AltimeterColour2;
	NMS::Colour BaseComplexityDangerColour;
	NMS::Colour BaseComplexityDefaultColour;
	NMS::Colour BaseComplexityWarningColour;
	NMS::Vector3f BinocularPanelLinePointOffset;
	NMS::Colour BuildMenuErrorTextColour;
	NMS::Colour BuildMenuErrorTextFlashColour;
	NMS::Colour BuildMenuErrorTextOutlineColour;
	NMS::Colour BuildMenuErrorTextOutlineFlashColour;
	NMS::Colour BuildMenuInfoTextColour;
	NMS::Colour BuildMenuInfoTextOutlineColour;
	NMS::Colour BuildMenuPassiveErrorTextColour;
	NMS::Colour BuildMenuPassiveErrorTextOutlineColour;
	NMS::Colour ByteBeatArpGridActiveColour;
	NMS::Colour ByteBeatArpGridInactiveColour;
	NMS::Colour ByteBeatArpPipActiveColour;
	NMS::Colour ByteBeatArpPipInactiveColour;
	NMS::Colour ByteBeatRhythmColour0Active;
	NMS::Colour ByteBeatRhythmColour0Inactive;
	NMS::Colour ByteBeatRhythmColour1Active;
	NMS::Colour ByteBeatRhythmColour1Inactive;
	NMS::Colour ByteBeatRhythmColour2Active;
	NMS::Colour ByteBeatRhythmColour2Inactive;
	NMS::Colour ByteBeatSequencerBGColourActive;
	NMS::Colour ByteBeatSequencerBGColourInactive;
	NMS::Colour ByteBeatSequencerHighlightColour;
	NMS::Colour ByteBeatSequencerRimColourActive;
	NMS::Colour ByteBeatSequencerRimColourInactive;
	NMS::Colour ByteBeatSequencerUnpoweredTint;
	NMS::Colour ByteBeatSliderFGColour;
	NMS::Colour ByteBeatSliderTextActiveColour;
	NMS::Colour ByteBeatSliderTextInactiveColour;
	NMS::Colour ByteBeatTreeLineColour;
	NMS::Colour ByteBeatVisGridColour;
	NMS::Colour ByteBeatVisLineColour;
	NMS::Colour CommunicatorMessageColour;
	NMS::Colour CrosshairColour;
	NMS::Colour CrosshairLeadPassiveColour;
	NMS::Colour CrosshairLeadThreatColour;
	NMS::Colour CursorColour;
	NMS::Colour CursorConfirmColour;
	NMS::Colour CursorDeleteColour;
	NMS::Colour CursorTransferUploadColour;
	NMS::Colour DamageNumberCriticalColour;
	NMS::Colour DamageNumberIneffectiveColour;
	NMS::Colour DamageNumberIneffectiveWarningColour;
	NMS::Colour DeathMessageColour;
	NMS::Colour DebugEditorAxisColourAtActive;
	NMS::Colour DebugEditorAxisColourAtInactive;
	NMS::Colour DebugEditorAxisColourRightActive;
	NMS::Colour DebugEditorAxisColourRightInactive;
	NMS::Colour DebugEditorAxisColourUpActive;
	NMS::Colour DebugEditorAxisColourUpInactive;
	NMS::Vector3f DefaultRefinerOffsetIn;
	NMS::Vector3f DefaultRefinerOffsetOut;
	NMS::Colour EnergyBgColour;
	NMS::Colour EnergyBgPulseColour;
	NMS::Vector3f FaceLockedScreenOffset;
	NMS::Colour FreighterSummonScanEffectColourBlocked;
	NMS::Colour FreighterSummonScanEffectColourHighlight;
	NMS::Colour FrontendCursorBackgroundColour;
	NMS::Colour FuelBgColour;
	NMS::Colour GridBackgroundNegativeColour;
	NMS::Colour GridBackgroundNeutralColour;
	NMS::Colour GridBackgroundPositiveColour;
	NMS::Colour GridDisconnectedColour;
	NMS::Colour GridOfflineColour;
	NMS::Colour GridOnlineColour;
	NMS::Colour HazardBgPulseColour;
	NMS::Colour HazardDamagePulseColour;
	NMS::Vector3f HmdFramerateScreenOffset;
	NMS::Colour HUDMarkerColour;
	NMS::Colour HUDNotifyColour;
	NMS::Colour HUDOutpostColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowHullHitMaxColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowHullHitMinColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowShieldHitMaxColour;
	NMS::Colour HUDPlayerTrackArrowDamageGlowShieldHitMinColour;
	NMS::Colour HUDPlayerTrackArrowDotColour;
	NMS::Colour HUDPlayerTrackArrowDotColourPirate;
	NMS::Colour HUDPlayerTrackArrowDotColourPolice;
	NMS::Colour HUDPlayerTrackArrowDotColourTrader;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldDepletedGlowMaxColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldDepletedGlowMinColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldLowColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldStartChargeGlowMaxColour;
	NMS::Colour HUDPlayerTrackArrowEnergyShieldStartChargeGlowMinColour;
	NMS::Colour HUDPlayerTrackArrowTextColour;
	NMS::Colour HUDRelicMarkerColourDiscovered;
	NMS::Colour HUDRelicMarkerColourUnknown;
	NMS::Colour HUDSpaceshipColour;
	NMS::Colour HUDWarningColour;
	NMS::Colour IconGlowColourActive;
	NMS::Colour IconGlowColourError;
	NMS::Colour IconGlowColourHighlight;
	NMS::Colour IconGlowColourNeutral;
	NMS::Colour InteractionLabelCostColour;
	NMS::Colour InteractionLabelPickupColour;
	NMS::Colour InteractionLabelPickupFillColour;
	NMS::Colour InvSlotGradientBaseColour;
	NMS::Vector3f InWorldInteractLabelCentreOffset;
	NMS::Vector3f InWorldInteractLabelLineOffset;
	NMS::Vector3f InWorldInteractLabelTopOffset;
	NMS::Vector3f InWorldNGuiScreenRotation;
	NMS::Vector3f InWorldStaffBinocsScreenOffset;
	NMS::Colour ItemSlotColourPartiallyInstalled;
	NMS::Colour ItemSlotColourProduct;
	NMS::Colour ItemSlotColourSubstance;
	NMS::Colour ItemSlotColourTech;
	NMS::Colour ItemSlotColourTechCharge;
	NMS::Colour ItemSlotColourTechDamage;
	NMS::Colour ItemSlotTextColourProduct;
	NMS::Colour ItemSlotTextColourSubstance;
	NMS::Colour ItemSlotTextColourTech;
	NMS::Colour JoaoBoxCompletedObjectiveColour;
	NMS::Colour LockOnMarkerActiveColour;
	NMS::Vector3f LowerHelmetScreenOffset;
	NMS::Colour MarkerRingBGColour;
	NMS::Colour MissionOSDMessageBarColour;
	NMS::Colour MultiplayerMissionParticipantsColour;
	NMS::Colour NetworkPopupTextDisabledColour;
	NMS::Colour NetworkPopupTextEnabledColour;
	NMS::Vector3f NGuiModelTranslationFactors;
	NMS::Vector3f NGuiModelTranslationFactorsInteraction;
	NMS::Vector3f NGuiThumbnailModelTranslationFactors;
	NMS::Colour NotificationDangerColour;
	NMS::Colour NotificationDefaultColour;
	NMS::Colour NotificationInfoColour;
	NMS::Colour NotificationUrgentColour;
	NMS::Colour PhotoModeSelectedColour;
	NMS::Colour PhotoModeUnselectedColour;
	NMS::Colour PickedItemBorderColour;
	NMS::Colour PinnedRecipeBorder;
	NMS::Colour ProcProductColourCommon;
	NMS::Colour ProcProductColourRare;
	NMS::Colour ProcProductColourUncommon;
	NMS::Colour PulseAlertColour;
	NMS::Colour PulseDamageColour;
	NMS::Colour QuickMenuSelectedItemColour1;
	NMS::Colour QuickMenuSelectedItemColour2;
	NMS::Colour RadialMenuInnerColourDisabled;
	NMS::Colour RadialMenuInnerColourSelected;
	NMS::Colour RadialMenuInnerColourUnselected;
	NMS::Colour RadialMenuOuterColourDisabled;
	NMS::Colour RadialMenuOuterColourSelected;
	NMS::Colour RadialMenuOuterColourUnselected;
	NMS::Colour RefinerBackgroundColour;
	NMS::Colour RefinerErrorBackgroundColour;
	NMS::Colour RemappedControlColour;
	NMS::Colour SelectedControlColour;
	NMS::Colour SettlementStatBackgroundColour;
	NMS::Colour SettlementStatColour;
	NMS::Colour ShieldBgColour;
	NMS::Colour ShieldColour;
	NMS::Colour ShieldDamageBgColour;
	NMS::Colour ShieldDamageColour;
	NMS::Colour ShipBuilderLineColour;
	NMS::Colour ShipBuilderLineColourHologram;
	NMS::Colour ShipHUDAimTargetColour;
	NMS::Colour ShipHUDAimTargetCritColour;
	NMS::Colour ShipHUDTargetArrowsColourLocal;
	NMS::Colour ShipHUDTargetArrowsColourOutOfRange;
	NMS::Colour ShipHUDTargetArrowsColourThreat;
	NMS::Colour SpaceEnemyShipLineColour;
	NMS::Colour SpaceFriendlyShipLineColour;
	NMS::Colour SpaceMapAttackColour;
	NMS::Vector3f SpaceMapCockpitOffset;
	NMS::Colour SpaceMapDeathPointColour;
	NMS::Colour SpaceMapNeutralColour;
	NMS::Colour SpaceMapOtherPlayerColour;
	NMS::Vector3f SpaceMapPosScaler;
	NMS::Colour SpaceMapSquadronColour;
	NMS::Colour SpaceMapThreatColour;
	NMS::Colour SpookMeterColour;
	NMS::Colour StoreDialFillColour;
	NMS::Colour SuperchargeGradientBaseColour;
	NMS::Colour SuperchargeGradientBlendColour;
	NMS::Colour SuperchargeGradientTechColour;
	NMS::Colour SuperchargePopupColour;
	NMS::Vector3f TargetDisplayShipOffset;
	NMS::Vector3f TargetDisplayTorpedoOffset;
	NMS::Colour TargetMarkerColour;
	NMS::Colour TargetMarkerHighlightColour;
	NMS::Colour TouchButtonChargeIndicatorColour;
	NMS::Colour TransferSendPopupColour;
	NMS::Colour TravelLineColour;
	NMS::Colour TravelLineInvalidColour;
	NMS::Colour TravelLineNotAllowedColour;
	NMS::Colour TravelLineTooFarColour;
	NMS::Colour TravelLineTooSteepColour;
	NMS::Colour TravelTargetColour;
	NMS::Colour UnseenItemColour;
	NMS::Colour WantedColour;
	NMS::Colour WristMenuDefaultBorderColour;
	NMS::Colour WristMenuRepositionableBorderColour;
	NMS_GameComponents::GcWonderCategoryConfig WonderCreatureCategoryConfig[15];
	NMS_GameComponents::GcWonderCategoryConfig WonderTreasureCategoryConfig[13];
	NMS_GameComponents::GcWonderCategoryConfig WonderCustomCategoryConfig[12];
	NMS_GameComponents::GcWonderCategoryConfig WonderPlanetCategoryConfig[11];
	NMS_GameComponents::GcWonderCategoryConfig WonderWeirdBasePartCategoryConfig[11];
	NMS::NMSString0x20A BuildMenuOnActionDisabledLocIDs[16];
	NMS::NMSString0x20A BuildMenuOnActionErrorLocIDs[16];
	NMS::NMSString0x20A BuildMenuOnActionLocIDs[16];
	NMS_GameComponents::GcWonderCategoryConfig WonderFloraCategoryConfig[8];
	NMS_GameComponents::GcWonderCategoryConfig WonderMineralCategoryConfig[8];
	NMS_GameComponents::GcHUDStartupTable IntroTiming;
	NMS_GameComponents::GcHUDStartupTable IntroTimingFreighter;
	NMS_GameComponents::GcHUDStartupTable IntroTimingFreighterRepaired;
	NMS::NMSString0x20A SettlementStatFormatLoc[8];
	NMS::NMSString0x20A SettlementStatLoc[8];
	NMS_Toolkit::TkTextureResource SettlementStatBasicImages[8];
	NMS_Toolkit::TkTextureResource SettlementStatNegativeImages[8];
	NMS_Toolkit::TkTextureResource SettlementStatPositiveImages[8];
	NMS_Toolkit::TkTextureResource WonderTypeIcons[7];
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridExpandableIcon;
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridExpandedIcon;
	NMS_Toolkit::TkTextureResource BaseBuildingPartsGridRetractableIcon;
	NMS_Toolkit::TkTextureResource RefinerPopupEmptyOutputIcon;
	NMS::VariableSizeString CamoNormalTexture;
	NMS::VariableSizeString CamoTexture;
	NMS::NMSString0x10 DebugInventoryHint;
	NMS::NMSString0x10 ExplorationLogMissionID;
	std::vector<NMS::Vector4f> HazardDistortionParams;
	std::vector<NMS::VariableSizeString> HazardHeightmaps;
	std::vector<NMS::VariableSizeString> HazardHeightmapsVR;
	std::vector<NMS::VariableSizeString> HazardNormalMaps;
	std::vector<NMS::VariableSizeString> HazardNormalMapsVR;
	std::vector<NMS::VariableSizeString> HazardTextures;
	std::vector<NMS::VariableSizeString> HazardTexturesVR;
	std::vector<NMS::Vector2f> InventoryIconPositions;
	NMS::NMSString0x10 MultiplayerMissionInteractEndTrigger;
	NMS::NMSString0x10 MultiplayerMissionInteractStartTrigger;
	std::vector<NMS_GameComponents::GcSeasonalRingArray> SeasonalRingTable;
	std::vector<NMS::Colour> ShipHUDTargetArrowsColour;
	NMS::NMSString0x10 ShowStatWithDeathQuote;
	std::vector<NMS::VariableSizeString> StatIcons;
	std::vector<NMS_Toolkit::TkModelRendererData> VehicleTypeRepairCamera;
	float CrosshairTargetLockSizeSpecific[20];
	NMS_GameComponents::GcWorldUISettings WorldUISettings;
	float WonderValueModifiersCreature[15];
	float WonderValueModifiersPlanet[11];
	float WonderValueModifiersFlora[8];
	float WonderValueModifiersMineral[8];
	NMS_GameComponents::GcInventorySlotActionData BuildProductSlotAction;
	NMS_GameComponents::GcInventorySlotActionData ChargeSlotAction;
	NMS_GameComponents::GcInventorySlotActionData InstallTechSlotAction;
	NMS_GameComponents::GcInventorySlotActionData InventoryHintAction;
	NMS_GameComponents::GcInventorySlotActionData InventoryHintActionNoGlow;
	NMS_GameComponents::GcInventorySlotActionData NewSlotPulseAction;
	NMS_GameComponents::GcInventorySlotActionData NewSlotRevealAction;
	NMS_GameComponents::GcInventorySlotActionData RepairSlotAction;
	NMS_GameComponents::GcInteractionDof InteractionDOFDisabled;
	NMS_Toolkit::TkNGuiRectanglePulseEffect PulseBarData;
	NMS_Toolkit::TkNGuiRectanglePulseEffect PulseIconData;
	NMS_Toolkit::TkHitCurveData CrosshairLeadHitCurve;
	NMS_GameComponents::GcDiscoveryHelperTimings DiscoveryHelperTimings;
	NMS_Toolkit::TkHitCurveData ShootableHitCurve;
	NMS::Vector2f BinocularEdgeFade;
	NMS::Vector2f BinocularsDiscoveryPos;
	NMS::Vector2f CompassCentre;
	NMS::Vector2f CursorlessDialogPageCursorOffset;
	NMS::Vector2f DamageNumberSideSpeed;
	NMS::Vector2f DialogPageCursorOffset;
	NMS::Vector2f HUDMarkerCompassPrimaryIndicatorOffset;
	NMS::Vector2f HUDMarkerPrimaryIndicatorOffset;
	NMS::Vector2f HUDPlayerSentinelPulseFreq;
	NMS::Vector2f HUDPlayerSentinelPulseSize;
	NMS::Vector2f HUDPlayerTrackArrowDamageGlowSize;
	NMS::Vector2f HUDPlayerTrackArrowEnergyShieldGlowSize;
	NMS::Vector2f HUDPlayerTrackArrowEnergyShieldSize;
	NMS::Vector2f HUDPlayerTrackArrowHealthSize;
	NMS::Vector2f HUDPlayerTrackArrowIconPulseSize;
	NMS::Vector2f HUDPlayerTrackIconOffset;
	NMS::Vector2f HUDTargetHealthIconOffset;
	NMS::Vector2f HUDTargetHealthOffset;
	NMS::Vector2f HUDTargetHealthSize;
	NMS::Vector2f InteractionLabelOffset;
	NMS::Vector2f InteractionLabelOffset_1;
	NMS::Vector2f InteractionLabelScreenMax;
	NMS::Vector2f InteractionLabelScreenMin;
	NMS::Vector2f InteractionLabelSize;
	NMS::Vector2f InteractionLabelTouchAreaMax;
	NMS::Vector2f InteractionLabelTouchAreaMin;
	NMS::Vector2f InteractionWorldParallax;
	NMS::Vector2f IntermediateInteractionPageCursorOffset;
	NMS::Vector2f InWorldGameGuiAlignment;
	NMS::Vector2f InWorldInteractLabelAlignment;
	NMS::Vector2f InWorldNGuiParallax;
	NMS::Vector2f MainMenuSaveIconPosition;
	NMS::Vector2f MarkerDistanceVRAlignment;
	NMS::Vector2f ModelViewWorldParallax;
	NMS::Vector2f NGuiMax2DParallax;
	NMS::Vector2f NGuiMin2DParallax;
	NMS::Vector2f NGuiModelParallax;
	NMS::Vector2f NGuiShipInteractParallax;
	NMS::Vector2f NGuiTouchPadSensitivity;
	NMS::Vector2f NotificationMissionHintPauseTime;
	NMS::Vector2f NotificationMissionHintPauseTimeCritical;
	NMS::Vector2f NotificationMissionHintPauseTimeSecondary;
	NMS::Vector2f PersonalRefinerInputPos;
	NMS::Vector2f PersonalRefinerOutputPos;
	NMS::Vector2f PickingCursorOffset;
	NMS::Vector2f PlanetLabelOffset;
	NMS::Vector2f PlanetLineOffset;
	NMS::Vector2f PlanetMeasureOffset;
	NMS::Vector2f RefinerParallax;
	NMS::Vector2f SaveIconPosition;
	NMS::Vector2f ScanLabelOffset;
	NMS::Vector2f TargetScreenCamOffset;
	NMS::Vector2f TrackCriticalHitOffset;
	NMS::Vector2f TrackTypeIconOffset;
	int32_t AbandonedFreighterAirlockRoomNumber;
	float AccessibleUIHUDPopupScale;
	float AccessibleUIPopupScale;
	float AlignmentRequiredToDisableFrostedGlass;
	float AltimeterLineSpacing;
	float AltimeterMax;
	float AltimeterMin;
	float AltimeterMinValue;
	float AltimeterResolution;
	float AltimeterTextSize;
	float AltimeterWidth;
	float AlwaysOnHazardMultiplierCold;
	float AlwaysOnHazardMultiplierHeat;
	float AlwaysOnHazardMultiplierRad;
	float AlwaysOnHazardMultiplierSpook;
	float AlwaysOnHazardMultiplierTox;
	float AlwaysOnHazardStrengthCold;
	float AlwaysOnHazardStrengthHeat;
	float AlwaysOnHazardStrengthRad;
	float AlwaysOnHazardStrengthSpook;
	float AlwaysOnHazardStrengthTox;
	float AlwaysOnHazardThreshold;
	float AlwaysShowIconFadeDistance;
	float AlwaysShowIconFadeRange;
	float AmbientModeFadeTime;
	float ArrowBounceLeftRate1;
	float ArrowBounceLeftRate2;
	float ArrowBounceLeftRate3;
	float ArrowBounceLength;
	float ArrowBounceRate;
	float ArrowBounceRightRate1;
	float ArrowBounceRightRate2;
	float AsteroidMarkerMinDisplayAngleDegrees;
	float AsteroidMarkerMinDisplayDistance;
	float BaseBuildingFreeRotateDelayBeforeAudioStops;
	float BaseBuildingFreeRotateDelayBeforeReset;
	float BaseBuildingFreeRotateSpeedPadMultiplier;
	float BaseBuildingInputHighlightAlpha;
	float BaseBuildingInputHighlightDuration;
	float BaseBuildingMaxFreeRotateSpeed;
	float BaseBuildingMinFreeRotateSpeed;
	float BaseBuildingPartsGridBreadcrumbFlashDuration;
	float BaseBuildingPartsGridMaxCursorRestorationTime;
	float BaseBuildingPartsGridMinVisibilityForActive;
	float BaseBuildingPartsGridPopupDelay;
	float BaseBuildingPartsGridScrollSpeed;
	float BaseBuildingPinHighlightDuration;
	float BaseBuildingRotationResetRate;
	float BaseBuildingScaleSpeed;
	float BaseBuildingTimeToMaxRotationSpeed;
	float BaseBuildingUIAdjustTime;
	float BaseBuildingUIErrorFadeTime;
	float BaseBuildingUIHorizontalSafeArea;
	float BaseBuildingUIVerticalOffset;
	float BaseBuildingUIVerticalOffsetEdit;
	float BaseBuildingUIVerticalOffsetFromBB;
	float BaseBuildingUIVerticalPosWiring;
	float BaseBuildingUIVerticalSafeArea;
	float BaseComplexityDangerFactor;
	float BaseComplexityWarningFactor;
	float BattleHUDBarInterpTime;
	float BeaconHUDMarkerOffset;
	float BinocularMarkerSideAngle;
	float BinocularMarkerUpAngle;
	float BinocularsAltUIRescaleFactor;
	float BinocularScreenOffset;
	float BinocularScreenScale;
	float BinocularsFarIconDist;
	float BinocularsFarIconFadeDist;
	float BinocularsFarIconOpacity;
	float BinocularsMidIconOpacity;
	float BinocularsNearIconDist;
	float BinocularsNearIconFadeDist;
	float BinocularsNearIconOpacity;
	float BountyMarkerOffset;
	int32_t BuildingShopMaxItems;
	float BuildMenuActionMessageDuration;
	float BuildMenuItemNavAnimTime;
	float BuildMenuItemNextNavAnimTime;
	float BuildMenuItemNextNavAnimWait;
	float ByteBeatArpLineWidth;
	float ByteBeatArpPad;
	float ByteBeatArpRadius;
	float ByteBeatIconLineWidth;
	float ByteBeatIconPad;
	float ByteBeatPartSequencerPad;
	float ByteBeatRhythmBeatPad;
	float ByteBeatRhythmSequencerActiveSaturation;
	float ByteBeatRhythmSequencerInactiveSaturation;
	float ByteBeatSequencerActiveSaturation;
	float ByteBeatSequencerCornerRadius;
	float ByteBeatSequencerHighlightLineWidth;
	float ByteBeatSequencerInactiveSaturation;
	float ByteBeatSequencerLineWidth;
	float ByteBeatSequencerPad;
	float ByteBeatSequencerUnpoweredTintStrength;
	float ByteBeatSliderCornerRadius;
	float ByteBeatSliderLineWidth;
	float ByteBeatSliderPad;
	float ByteBeatSwitchPanelAlpha;
	float ByteBeatSwitchPanelSplit;
	float ByteBeatTreeLineWidth;
	float ByteBeatVisLineWidth;
	float ClosestDoorMarkerBuffer;
	float CockpitGlassDefrostTime;
	float CockpitGlassFrostTime;
	float CommunicatorMessageTime;
	float CompassAngleClamp;
	float CompassAngleClampSpace;
	float CompassAngleFade;
	float CompassDistanceMarkerMinScale;
	float CompassDistanceMaxAngle;
	float CompassDistanceScale;
	float CompassDistanceScaleMin;
	float CompassDistanceScaleRange;
	float CompassDistanceShipMinScale;
	float CompassDistanceSpaceScaleMin;
	float CompassDistanceSpaceScaleRange;
	float CompassDistanceYOffset;
	float CompassHeight;
	float CompassIconOffsetVR;
	float CompassLineContractionEndAngle;
	float CompassLineContractionStartAngle;
	float CompassLineContractionTargetAngle;
	float CompassLineNotchAngleRange;
	float CompassLineNotchLength;
	float CompassLineNotchThickness;
	int32_t CompassLineNumNotches;
	float CompassLineOffset;
	float CompassLineThickness;
	int32_t CompassScreenHeight;
	int32_t CompassScreenWidth;
	float CompassWidth;
	float ConsoleTextSpeed;
	float ConsoleTextTimeMax;
	float ConsoleTextTimeMin;
	float ControlScrollDistance;
	int32_t ControlScrollSteps;
	float CreatureDistanceAlpha;
	float CreatureDistanceDisplayAngle;
	float CreatureDistanceFadeTime;
	float CreatureDistanceOffsetY;
	float CreatureDistanceShadowOffset;
	float CreatureDistanceSize;
	float CreatureIconMergeAngle;
	float CreatureIconOffset;
	float CreatureIconOffsetPhysics;
	float CreatureInteractLabelOffsetY;
	float CreatureReticuleScale;
	float CreatureRoutineMarkerTime;
	int32_t CreatureRoutineRegionsPerFrame;
	float CriticalMessageTime;
	float CrosshairAimOffTime;
	float CrosshairAimTime;
	float CrosshairInnerMinFade;
	float CrosshairInnerMinFadeRange;
	float CrosshairInterceptAlpha;
	float CrosshairInterceptBaseSize;
	float CrosshairInterceptCentreBaseSize;
	float CrosshairInterceptLockRange;
	float CrosshairInterceptSize;
	float CrosshairInterceptSpringTime;
	float CrosshairLeadCornerOffset;
	float CrosshairLeadFadeRange;
	float CrosshairLeadFadeSize;
	float CrosshairLeadInDelay;
	float CrosshairLeadInTime;
	float CrosshairLeadPulseSize;
	float CrosshairLeadScaleIn;
	float CrosshairLeadSpring;
	float CrosshairLeadSpringOff;
	float CrosshairLeadTopLock;
	float CrosshairLeadTopOffset;
	float CrosshairOffsetHmd;
	float CrosshairOffsetHmdUp;
	float CrosshairScaleHmd;
	int32_t CrosshairScreenHeight;
	int32_t CrosshairScreenWidth;
	float CrosshairSpringAimTime;
	float CrosshairSpringTime;
	float CrosshairTargetLockSize;
	float CursorHoverSlowFactor;
	float CursorHoverSlowFactorMin;
	float CursorHoverSlowFixedValue;
	float DamageDirectionIndicatorOnScreenRadiusMultiplier;
	float DamageImpactMergeTime;
	float DamageImpactMinDistance;
	float DamageImpactTimeBetweenNumbers;
	float DamageNumberBlackAlpha;
	float DamageNumberFadeIn;
	float DamageNumberFadeOut;
	float DamageNumberLaserMaxDamage;
	float DamageNumberLaserMinDamage;
	float DamageNumberOffsetX;
	float DamageNumberOffsetY;
	float DamageNumberOutline;
	float DamageNumberOutline2;
	float DamageNumberSize;
	float DamageNumberSizeCritMultiplier;
	float DamageNumberSizeInShip;
	float DamageNumberSizeLaserMultiplier;
	float DamageNumberTime;
	float DamageNumberUpOffset;
	float DamagePerSecondSampleTime;
	float DamageScannableHighlightTime;
	float DamageTrackArrowTime;
	float DeathMessageSwitchTime;
	float DeathMessageTotalTime;
	int32_t DebugMedalRank;
	float DeepSeaHazardMultiplierCold;
	float DeepSeaHazardMultiplierHeat;
	float DeepSeaHazardMultiplierRad;
	float DeepSeaHazardMultiplierTox;
	float DelayBeforeHidingHangarAfterGalaxyMap;
	float DelayBeforeShowingHangarIntoGalaxyMap;
	float DescriptionTextDelay;
	float DescriptionTextSpeed;
	float DescriptionTextSpeedProgressive;
	float DescriptionTextTimeMax;
	float DescriptionTextTimeMin;
	float DetailMessageDismissTime;
	float DroneIndicatorCentreRadiusMax;
	float DroneIndicatorCentreRadiusMin;
	float DroneIndicatorFadeRange;
	float DroneIndicatorRadius;
	float EggModifiyAnimLoopTime;
	float EggModifiyAnimMaxSize;
	float EndOfSeasonAlertDelay;
	float ExocraftHUDMarkerHideDistance;
	float ExocraftHUDMarkerOffset;
	float ExpeditionStageChangeTime;
	float EyeTrackingCursorBlendRate;
	float EyeTrackingCursorBlendRateGameModeSelect;
	float EyeTrackingPopupLookAwayTime;
	float EyeTrackingStickyHoverTime;
	float EyeTrackingTimeBeforePopupsActivate;
	float FeedFrigateAnimAlphaChange;
	int32_t FeedFrigateAnimNumPeriods;
	float FeedFrigateAnimPeriod;
	float FeedFrigateAnimScaleChange;
	int32_t ForceOpenHazardProtInventoryThreshold;
	float FreighterCommanderMarkerMinDistance;
	float FreighterEntranceOffset;
	float FreighterHighlightRange;
	float FreighterLeaderIconDistance;
	float FreighterMegaWarpTransitionTime;
	float FreighterSummonDelay;
	float FreighterSummonGridSize;
	float FreighterSummonLookTime;
	float FreighterSummonOffset;
	float FreighterSummonOffsetPulse;
	float FreighterSummonPitch;
	float FreighterSummonPlanetOffset;
	float FreighterSummonPulseFadeAmount;
	float FreighterSummonPulseRate;
	float FreighterSummonTurn;
	float FreighterSummonTurnAngleIncrement;
	int32_t FreighterSummonTurnNumTries;
	float FreighterSurfaceMinAngle;
	float FrigateDamageIconVisibilityDistance;
	float FrigateIconOffset;
	float FrigatePurchaseNotificationResetDistanceMultiplier;
	float FrontendActivateSplit;
	float FrontendActivateTime;
	float FrontendBGAlpha;
	float FrontendBootBarTime;
	float FrontendBootTime;
	float FrontendConfirmTime;
	float FrontendConfirmTimeFast;
	float FrontendConfirmTimeMouseMultiplier;
	float FrontendConfirmTimeSlow;
	float FrontendCursorOffset;
	float FrontendCursorSize;
	float FrontendCursorWidth;
	float FrontendDeactivateSplit;
	float FrontendDeactivateTime;
	float FrontendDoFBlurMultiplier;
	float FrontendDoFFarPlaneFadeMax;
	float FrontendDoFFarPlaneFadeMin;
	float FrontendDoFFarPlaneMax;
	float FrontendDoFFarPlaneMin;
	float FrontendDoFNearPlaneMax;
	float FrontendDoFNearPlaneMin;
	float FrontendOffsetVR;
	float FrontendShineSpeed;
	float FrontendStatCircleWidth;
	float FrontendStatCircleWidthExtra;
	float FrontendTitleFontSpacing;
	float FrontendToolbarTextHeight;
	float FrontendToolbarTextHeightSelected;
	float FrontendTouchConfirmTimeFastMultiplier;
	float FrontendWaitFadeProgressiveDialogOut;
	float FrontendWaitFadeTextFrameOut;
	float FrontendWaitFadeTextOut;
	float FrontendWaitInitial;
	float FrontendWaitInitialTerminal;
	float FrontendWaitResponse;
	float FrontendWaitResponseOffset;
	float GalaxyMapRadialBorder;
	float GalaxyMapRadialTargetDist;
	float GalmapDiscoveryOffsetVR;
	float GameModeSelectColourFadeTime;
	float GridDecayRateSwitchValue;
	float GridFlickerAmp;
	float GridFlickerBaseAlpha;
	float GridFlickerFreq;
	float HandButtonClickTime;
	float HandButtonCursorScale;
	float HandButtonDotRadius;
	float HandButtonFrontendCursorScale;
	float HandButtonNearDistance;
	float HandButtonPostClickTime;
	float HandButtonPulseRadius;
	float HandButtonPulseThickness;
	float HandButtonPushDistance;
	float HandButtonRadius;
	float HandButtonRadiusClick;
	float HandButtonRadiusTouch;
	float HandButtonRadiusTouchNear;
	float HandButtonRadiusTouchNearActive;
	float HandButtonReleaseThreshold;
	float HandButtonReleaseThresholdInit;
	float HandButtonThickness;
	float HandButtonTouchReturnTime;
	float HandControlButtonSize;
	float HandControlMenuAngle;
	float HandControlMenuCursorScale;
	float HandControlMenuDepth;
	float HandControlMenuMoveActionDistance;
	float HandControlMenuMoveDistance;
	float HandControlMenuMoveDistanceScroll;
	float HandControlMenuMoveDistanceVertical;
	float HandControlMenuSelectRadius;
	float HandControlMenuSelectRadius1;
	float HandControlMenuSelectRadius2;
	float HandControlMenuSurfaceOffset;
	float HandControlPointActiveMargin;
	float HandControlPointMargin;
	float HandControlTopMenuSelectRadius;
	float HandheldZoomFactor;
	float HandScreenGraphicsHeight;
	float HandScreenGraphicsWidth;
	int32_t HandScreenHeight;
	float HandScreenNearActivateDistance;
	int32_t HandScreenWeaponHeight;
	int32_t HandScreenWeaponWidth;
	int32_t HandScreenWidth;
	float HatchAlphaBase;
	float HatchAlphaCursor;
	float HatchAlphaMain;
	int32_t HatchCount;
	float HatchCursorRadius;
	float HatchPulsePauseTime;
	float HatchPulseSpeed;
	float HatchPulseWidth;
	float HazardArrowsLevel2Threshold;
	float HazardArrowsLevel3Threshold;
	float HazardBarPulseTime;
	float HazardPainPulseStrength;
	float HazardPulseRate;
	float HazardScreenEffectPulseRate;
	float HazardScreenEffectPulseTime;
	float HazardScreenEffectStrength;
	float HazardWarningPulseStrength;
	float HazardWarningPulseTime;
	float HitMarkerPulseSize;
	float HitMarkerPulseSizeStatic;
	float HitMarkerPulseTime;
	float HmdFramerateScreenPitch;
	float HoldTimerResetTime;
	float HoverOffscreenBorder;
	float HoverOffscreenBorderXVR;
	float HoverOffscreenBorderYAltUI;
	float HoverPopAnimDuration;
	float HoverPopScaleModification;
	float HUDDisplayTime;
	float HUDDroneCombatPulse;
	float HUDDroneHealingPulse;
	float HUDDroneSummoningPulse;
	float HUDElementsOffsetHMDBottom;
	float HUDElementsOffsetHMDSide;
	float HUDElementsOffsetHMDTop;
	float HUDElementsOffsetX_0;
	float HUDElementsOffsetX_1;
	float HUDElementsOffsetX_2;
	float HUDElementsOffsetX_3;
	float HUDElementsOffsetX_4;
	float HUDElementsOffsetX_5;
	float HUDElementsOffsetY_0;
	float HUDElementsOffsetY_1;
	float HUDElementsOffsetY_2;
	float HUDElementsOffsetY_3;
	float HUDElementsOffsetY_4;
	float HUDElementsOffsetY_5;
	float HUDMarkerActiveTime;
	float HUDMarkerAlpha;
	float HUDMarkerAnimLoopTime;
	float HUDMarkerAnimOffset;
	float HUDMarkerAnimScale;
	float HUDMarkerAnimSpeed;
	float HUDMarkerDistanceOrTimeDistance;
	float HUDMarkerFarDistance;
	float HUDMarkerFarFadeRange;
	float HUDMarkerHorizonBlendRange;
	float HUDMarkerHoverAngleTestGround;
	float HUDMarkerHoverAngleTestGroundHmd;
	float HUDMarkerHoverAngleTestShip;
	float HUDMarkerHoverShowLargeAngleTest;
	float HUDMarkerIconHoverMinScale;
	float HUDMarkerLabelArriveDistance;
	float HUDMarkerLabelBaseWidth;
	float HUDMarkerLabelDisplayDistance;
	float HUDMarkerLabelWidthMultiplier;
	float HUDMarkerModelFadeMinHeight;
	float HUDMarkerModelFadeRange;
	float HUDMarkerNearFadeDistance;
	float HUDMarkerNearFadeRange;
	float HUDMarkerNonActiveMissionAlpha;
	float HUDMarkerObjectMinScreenDistance;
	float HUDMarkerOffset;
	float HUDMarkerPrimaryIndicatorSize;
	float HUDMarkerScalerMin;
	float HUDMarkerScalerRange;
	float HUDMarkerScalerSizeMax;
	float HUDMarkerScalerSizeMin;
	float HUDMarkerShipOffsetMaxDist;
	float HUDMarkerShipOffsetMinDist;
	float HUDMarkerShowActualIconDistance;
	float HUDMarkerShowActualSpaceIconDistance;
	float HUDMarkerWideHoverAngleTest;
	float HUDMarkerWideHoverAngleTestHmd;
	float HUDNetworkMarkerHoverAngleTestGround;
	float HUDNetworkMarkerHoverAngleVRMul;
	float HUDNetworkMarkerHoverShowLargeAngleTest;
	float HUDPetCentreScreenAngle;
	float HUDPetMarkerAngleTest;
	float HUDPetMarkerAngleVRMul;
	float HUDPlayerPhonePulseScanFreq;
	float HUDPlayerSentinelPulseScanFreq;
	float HUDPlayerSentinelPulseWidth;
	float HUDPlayerSentinelRangeFactor;
	float HUDPlayerTrackArrowArrowSize;
	float HUDPlayerTrackArrowDamageGlowHullHitCriticalOpacityScale;
	float HUDPlayerTrackArrowDamageGlowHullHitOpacityScale;
	float HUDPlayerTrackArrowDamageGlowOffset;
	float HUDPlayerTrackArrowDamageGlowShieldHitCriticalOpacityScale;
	float HUDPlayerTrackArrowDamageGlowShieldHitOpacityScale;
	float HUDPlayerTrackArrowDotSize;
	float HUDPlayerTrackArrowEnergyShieldDepletedGlowOpacityScale;
	float HUDPlayerTrackArrowEnergyShieldDepletedTime;
	float HUDPlayerTrackArrowEnergyShieldGlowOffset;
	float HUDPlayerTrackArrowEnergyShieldLowThreshold;
	float HUDPlayerTrackArrowEnergyShieldOffset;
	float HUDPlayerTrackArrowEnergyShieldStartChargeGlowOpacityScale;
	float HUDPlayerTrackArrowEnergyShieldStartChargeTime;
	float HUDPlayerTrackArrowFadeRange;
	float HUDPlayerTrackArrowGlowBaseOpacity;
	float HUDPlayerTrackArrowHealthOffset;
	float HUDPlayerTrackArrowIconBorderReducerShip;
	float HUDPlayerTrackArrowIconFadeDist;
	float HUDPlayerTrackArrowIconFadeDistDrone;
	float HUDPlayerTrackArrowIconFadeDistShip;
	float HUDPlayerTrackArrowIconFadeRange;
	float HUDPlayerTrackArrowIconFadeRangeShip;
	float HUDPlayerTrackArrowIconFadeTime;
	float HUDPlayerTrackArrowIconPulse2Alpha;
	float HUDPlayerTrackArrowIconPulseTime;
	float HUDPlayerTrackArrowIconPulseWidth1;
	float HUDPlayerTrackArrowIconPulseWidth2;
	float HUDPlayerTrackArrowIconShowTime;
	float HUDPlayerTrackArrowIconSize;
	float HUDPlayerTrackArrowMinFadeDist;
	float HUDPlayerTrackArrowOffset;
	float HUDPlayerTrackArrowPulseOffset;
	float HUDPlayerTrackArrowPulseRate;
	float HUDPlayerTrackArrowScreenBorder;
	float HUDPlayerTrackArrowShipLabelOffset;
	float HUDPlayerTrackArrowSize;
	float HUDPlayerTrackArrowSizeMax;
	float HUDPlayerTrackArrowSizeMin;
	float HUDPlayerTrackArrowSmallIconSize;
	float HUDPlayerTrackArrowTargetDist;
	float HUDPlayerTrackArrowTargetDistShip;
	float HUDPlayerTrackArrowTextExtraHeight;
	float HUDPlayerTrackArrowTextExtraOffsetX;
	float HUDPlayerTrackArrowTextExtraOffsetY;
	float HUDPlayerTrackArrowTextHeight;
	float HUDPlayerTrackArrowTextOffset;
	float HUDPlayerTrackDangerPulse;
	float HUDPlayerTrackNoSightPulse;
	float HUDPlayerTrackTimerEnd;
	float HUDPlayerTrackTimerPulseRate;
	float HUDPlayerTrackTimerStart;
	float HUDPlayerTrackTimerStartFade;
	float HUDTargetHealthDangerTime;
	float HUDTargetHealthIconSize;
	float HUDTargetIconOffset;
	float HUDTargetIconSize;
	float HUDTargetMarkerOffset;
	float HUDTargetMarkerSize;
	float IconBackgroundAlpha;
	float IconGlowStrengthActive;
	float IconGlowStrengthError;
	float IconGlowStrengthHighlight;
	float IconGlowStrengthNeutral;
	float IconPulseRate;
	float InfoPortalGuideCycleTime;
	float InfoPortalMilestonesCycleTime;
	float InteractionIconInnerRadius;
	float InteractionIconOuterRadius;
	float InteractionInWorldMinScreenDistance;
	float InteractionInWorldMinScreenDistanceV2;
	float InteractionInWorldPitchDistance;
	float InteractionInWorldSeatedNPCHeightAdjust;
	float InteractionInWorldSeatedNPCHeightAdjustV2;
	float InteractionLabelHeight;
	float InteractionLabelHorizontalLineLength;
	float InteractionLabelLineAlpha;
	float InteractionLabelPixelHeightMax;
	float InteractionLabelPixelHeightMin;
	float InteractionLabelRadiusScaler;
	float InteractionLabelSpeedClose;
	float InteractionLabelSpeedOpen;
	float InteractionScanDisplayTime;
	float InteractionScanMinTime;
	float InteractionScanScanTime;
	float InteractionScanSlapOverallTime;
	float InteractionScanSlapScale;
	float InteractionScanSlapTime;
	float InventoryFullMessageRepeatTime;
	float InventoryIconTime;
	float InvSlotGradientFactor;
	float InvSlotGradientFactorMin;
	float InvSlotGradientTime;
	float InWorldInteractionScreenScale;
	float InWorldInteractLabelFarDistance;
	float InWorldInteractLabelFarRange;
	int32_t InWorldInteractLabelHeight;
	float InWorldInteractLabelMinHeadOffset;
	float InWorldInteractLabelNearDistance;
	float InWorldInteractLabelNearRange;
	float InWorldInteractLabelScale;
	float InWorldInteractLabelScaleV2;
	int32_t InWorldInteractLabelWidth;
	float InWorldNGuiScreenScale;
	float InWorldNPCInteractionScreenScale;
	float InWorldScreenForwardOffset;
	float InWorldScreenMinScreenDistance;
	float InWorldScreenScaleDistance;
	float InWorldUIInteractionDistanceWithEyeTrackingEnabled;
	float ItemReceivedMessageTimeToAdd;
	float ItemSlotColourTechChargeRate;
	float KeepHazardBarActiveTime;
	float KeepSecondHazardBarActiveTime;
	float LandNotifyHeightThreshold;
	float LandNotifySpeedThreshold;
	float LandNotifyTimeThreshold;
	float LargeSpaceIconSize;
	float LoadFadeInDefaultTime;
	float LoadingScreenTime;
	float LoadingScreenTravelSpeed;
	float LoadingTravelDistance;
	float LockOnMarkerSize;
	float LockOnMarkerSizeLock;
	float LowerHelmetScreenPitch;
	float LowerHelmetScreenScale;
	float LowHealthShieldFactor;
	float LowHealthShieldMin;
	float MaintenanceIconFadeStart;
	float MaintenanceIconFadeTime;
	float ManualNotificationPauseTime;
	float ManualScrollChangePerInputMax;
	float ManualScrollChangePerInputMin;
	float MarkerComponentOffset;
	float MarkerHorizonApproachAngle;
	float MarkerHorizonMinOffset;
	float MarkerHorizonOffPlanetLightBeamAngle;
	float MarkerHorizonOffsetAngle;
	float MarkerHorizonShipApproachOffset;
	float MarkerOffsetTypeAngle;
	float MarkerOffsetTypeAngleAsteroid;
	float MarkerOffsetTypeAngleBattle;
	float MarkerOffsetTypeAngleBounty;
	float MarkerOffsetTypeAnglePlayerShip;
	float MarkerRingInnerRadius;
	float MarkerRingOuterRadius;
	float MarkerTagAppearDelay;
	int32_t MaxDialogCharSizeIdeographic;
	int32_t MaxDialogCharSizeRoman;
	int32_t MaxNumMessageBeaconIcons;
	float MaxProjectorDistanceFromDefault;
	float MaxProjectorGrabDistance;
	int32_t MaxSubstanceMaxAmountForAmountFraction;
	float MessageNotificationTime;
	float MessageTimeQuick;
	float MilestoneStingDisplayTime;
	float MinimumHoldFill;
	float MinSeasonPlayTimeInDays;
	float MissileCentreOffset;
	float MissileIconAttackPulseAmount;
	float MissileIconAttackPulseTime;
	float MissionCompassIconScaler;
	float MissionDetailsPageBaseHeight;
	int32_t MissionLoopCount;
	int32_t MissionLoopCountPirate;
	float MissionMarkerSize;
	float MissionObjectiveBaseHeight;
	float MissionObjectiveDoneHeight;
	float MissionObjectiveScrollingExtra;
	int32_t MissionSeedOffset;
	int32_t MissionSpecificMissionPercent;
	float MissionStartEndOSDTime;
	float MissionStartEndOSDTimeProcedural;
	float MissionStartEndTime;
	float ModularCustomisationApplyTime;
	float MouseRotateCameraSensitivity;
	float MultiplayerTeleportEffectAppearTime;
	float MultiplayerTeleportEffectDisappearTime;
	float NGuiActiveAreaOffsetTime;
	float NGuiAltPlacementDistanceScrollSpeed;
	float NGuiCursorOffsetMultiplier;
	float NGuiHmdOffset;
	float NGuiModelRotationDegreesX;
	float NGuiModelRotationDegreesY;
	float NGuiModelRotationDegreesZ;
	float NGuiModelViewCdSmoothTime;
	float NGuiModelViewDistanceDiscoveryPage;
	float NGuiModelViewDistanceGlobal;
	float NGuiModelViewDistanceShipPage;
	float NGuiModelViewDistanceSuitPage;
	float NGuiModelViewDistanceWeaponPage;
	float NGuiModelViewFadeInAfterRenderTime;
	float NGuiModelViewFov;
	float NGuiModelViewFractionOfBBHeightAboveReflectivePlane;
	float NGuiMouseSensitivity;
	float NGuiPadSensitivity;
	float NGuiPlacementAngleScrollSpeed;
	float NGuiThumbnailModelRotationDegreesY;
	float NGuiThumbnailModelViewDistance;
	float NotificationBackgroundGradientAlphaInShip;
	float NotificationBackgroundGradientEndOffsetPercentInShip;
	float NotificationBridgeReachDistance;
	float NotificationBuildHintStartTime;
	float NotificationCantFireTime;
	float NotificationDangerTime;
	float NotificationDeviceIdleTime;
	float NotificationDiscoveryIdleTime;
	float NotificationFinalMissionWait;
	float NotificationGoToSpaceStationWait;
	float NotificationHazardMinTimeAfterRecharge;
	float NotificationHazardSafeThreshold;
	float NotificationHazardTimer;
	float NotificationInfoIdleTime;
	float NotificationInteractHintStartTime;
	float NotificationJetpackTime;
	float NotificationMaxPageHintTime;
	float NotificationMessageCycleTime;
	float NotificationMinVisibleTime;
	float NotificationMissionHintTime;
	float NotificationMissionHintTimeCritical;
	float NotificationMissionHintTimeSecondary;
	float NotificationMonolithMissionWait;
	float NotificationNewTechIdleTime;
	float NotificationScanEventMissionIdleTime;
	float NotificationScanTime;
	float NotificationScanTimeCutoff;
	float NotificationShieldTime;
	float NotificationShipBoostMinTime;
	float NotificationShipBoostReminderTime;
	float NotificationShipBoostReminderTimeTutorial;
	float NotificationShipBoostTime;
	float NotificationShipBoostTimeVR;
	float NotificationShipJumpMinTime;
	float NotificationShipJumpReminderTime;
	float NotificationShipJumpReminderTutorial;
	int32_t NotificationsResourceExtractHintCount;
	float NotificationStaminaHintDistanceWalked;
	float NotificationTimeBeforeHeridiumMarker;
	float NotificationUrgentMessageTime;
	float NotificationWaypointReachDistance;
	int32_t NumDeathQuotes;
	float OnFootDamageDirectionIndicatorFadeRange;
	float OnFootDamageDirectionIndicatorRadius;
	float OSDMessagePauseOffscreenAngle;
	int32_t OSDMessageQueueMax;
	int32_t OSDMessageQueueMin;
	float OSDMessageQueueSpeedMultiplier;
	float PadCursorAcceleration;
	float PadCursorMaxSpeedModifier;
	float PadCursorUICurveStrength;
	float PadRotateCameraSensitivity;
	float PageTurnTime;
	float ParagraphAutoScrollSpeed;
	float PauseMenuHoldTime;
	float PetHoverIconSize;
	float PetHUDMarkerExtraFollowInfoDistance;
	float PetHUDMarkerHideDistance;
	float PetHUDMarkerHideDistanceShort;
	float PetHUDMarkerOffset;
	float PetIconSize;
	float PetMoodMarkerOffset;
	float PetSlotUnlockBounceTime;
	float PhotoModeTimeofDayChange;
	float PhotoModeValueAlpha;
	float PirateAttackIndicatorRadius;
	float PirateAttackIndicatorWidth;
	float PirateAttackProbeDisplayFinishFactor;
	float PirateCountdownTime;
	float PirateFreighterSummonAtOffset;
	float PirateFreighterSummonOffset;
	float PirateFreighterSummonOffsetPulse;
	float PlacedMarkerFadeTime;
	float PlanetDataExtraRadius;
	float PlanetLabelAngle;
	float PlanetLabelTime;
	float PlanetPoleEastWestDistanceFromPlayer;
	float PlanetPoleMaxDotProduct;
	float PlanetRaidMarkerOffset;
	float PlanetScanDelayTime;
	float PopupActivateTime;
	float PopupDeactivateTime;
	float PopupDebounceTime;
	float PopupSlotWidthOffset;
	float PopupTitleGradientFactor;
	float PopupValueSectionBaseHeight;
	float PopupValueSectionHeight;
	float PopupXClampOffset;
	float PopupXClampOffsetRightAligned;
	float ProjectorGrabBorderPercent;
	float ProjectorGrabDistanceBias;
	float ProjectorGrabResetTime;
	float ProjectorScale;
	float QuickMenuAlpha;
	float QuickMenuCentrePos;
	float QuickMenuCentreSideOffset;
	float QuickMenuCloseTime;
	float QuickMenuCursorScale;
	float QuickMenuErrorTime;
	float QuickMenuHighlightRate;
	float QuickMenuHoldNavTime;
	float QuickMenuInteractAdjustX;
	float QuickMenuInteractAdjustY;
	int32_t QuickMenuScreenHeight;
	int32_t QuickMenuScreenWidth;
	float QuickMenuSideOffset;
	float QuickMenuSwipeHeightMax;
	float QuickMenuSwipeHeightMin;
	float RadialMenuInnerRadius;
	float RadialMenuInnerRadiusCursor;
	float RadialMenuWedgeOffset;
	float RefinerAutoCloseTime;
	float RefinerBeginDialInnerRadius;
	float RefinerPadStartDecayTime;
	float RefinerPadStartTime;
	float RefinerProgressDialInnerRadius;
	float RepairTechLabelOffset;
	float RepairTechRepairedMessageTime;
	float RepairTechRepairedWaitTime1;
	float RepairTechRepairedWaitTime2;
	float ReportBaseFlashDelay;
	float ReportBaseFlashIntensity;
	float ReportBaseFlashTime;
	float ReportCameraSpeed;
	float ScanEventArrowOffsetMultiplier;
	float ScanEventArrowOffsetMultiplierFresh;
	float ScanEventArrowOffsetMultiplierLerpTime;
	float ScanEventArrowOffsetMultiplierOneEvent;
	float ScanEventArrowPlayerFadeDistance;
	float ScanEventArrowPlayerFadeRange;
	float ScanEventArrowSecondaryAlpha;
	float ScanEventArrowShipFadeDistance;
	float ScanEventArrowShipFadeRange;
	NMS_GameComponents::GcAudioWwiseEvents ScanEventIconAudio;
	float ScannableIconMergeAngle;
	float ScanTime;
	float SeasonalRingChangeTime;
	float SeasonalRingMultiplier;
	float SeasonalRingPulseTime;
	float SeasonEndAutoHighlightDuration;
	float SeasonEndAutoHighlightDurationMilestone;
	NMS_GameComponents::GcAudioWwiseEvents SeasonEndAutoHighlightSFX;
	float SeasonEndRewardsMaxScrollRate;
	float SeasonEndRewardsPageOpenDelayTime;
	int32_t SeasonFinalStageIndex;
	float SeasonMessageDelayTime;
	float SentinelsDisabledHUDMessageTime;
	float SettlementStatFlashSpeed;
	float SettlementStatInnerRadius;
	float SettlementStatOuterRadius;
	float ShieldHazardPulseRate;
	float ShieldHazardPulseThreshold;
	float ShieldPulseTime;
	float ShieldSpringTime;
	float ShipBuilderBarTime;
	float ShipBuilderEndCircleRadius;
	float ShipBuilderLineLengthFadeMax;
	float ShipBuilderLineLengthFadeMin;
	float ShipBuilderLineMinFade;
	float ShipBuilderLineWidth;
	float ShipBuilderSlotDropLength;
	float ShipBuilderSlotLineDefaultWidthFactor;
	float ShipBuilderSlotLineMaxFactor;
	float ShipBuilderSlotLineMinFactor;
	float ShipBuilderSlotStartOffset;
	float ShipBuilderStartCircleRadius;
	float ShipDamageDirectionIndicatorFadeRange;
	float ShipDamageDirectionIndicatorRadius;
	float ShipDesatDamper;
	float ShipFullscreenDamper;
	float ShipFullscreenDamperMin;
	float ShipHeadsUpDisplayDistance;
	float ShipHeadsUpLineFadeTime;
	float ShipHologramInWorldUIHeightAdjust;
	float ShipHologramInWorldUIHeightAdjustV2;
	float ShipHUDHitPointSize;
	float ShipHUDHitPointTime;
	float ShipHUDMarkerHideDistance;
	float ShipHUDMarkerOffset;
	float ShipHUDMaxOffscreenTargetDist;
	float ShipHUDMissileLockSizeMax;
	float ShipHUDMissileLockSizeMin;
	float ShipHUDMissileLockSpringFast;
	float ShipHUDMissileLockSpringSlow;
	float ShipHUDTargetAlpha;
	float ShipHUDTargetArrowLength;
	float ShipHUDTargetArrowsRotationRate;
	float ShipHUDTargetMinDist;
	float ShipHUDTargetRadius;
	float ShipHUDTargetRange;
	float ShipHUDTargetScale;
	float ShipHUDTargetTriangleRadius;
	float ShipOverheatSwitchMessageTime;
	float ShipOverheatSwitchMessageWait;
	float ShipScreenTexScale;
	float ShipSideScreenHeight;
	float ShopInteractionInWorldForcedOffset;
	float ShopInteractionInWorldForcedOffsetV2;
	int32_t ShowDaysIfLessThan;
	int32_t ShowHoursIfLessThan;
	int32_t ShowWeeksIfLessThan;
	float SmallSpaceIconSize;
	float SolidPointerLengthScale;
	float SolidPointerMaxLength;
	float SolidPointerScale;
	float SpaceMapActionScale;
	float SpaceMapAnomalyScale;
	float SpaceMapAspectRatio;
	float SpaceMapCamAngle;
	float SpaceMapCamDistance;
	float SpaceMapCamHeight;
	float SpaceMapCockpitAngle;
	float SpaceMapCockpitScale;
	float SpaceMapCockpitScaleAdjustAlien;
	float SpaceMapCockpitScaleAdjustDropShip;
	float SpaceMapCockpitScaleAdjustFighter;
	float SpaceMapCockpitScaleAdjustRobot;
	float SpaceMapCockpitScaleAdjustRoyal;
	float SpaceMapCockpitScaleAdjustSail;
	float SpaceMapCockpitScaleAdjustScientific;
	float SpaceMapCockpitScaleAdjustShuttle;
	float SpaceMapDistance;
	float SpaceMapDistanceLogScaler;
	float SpaceMapDistanceMultiplier;
	float SpaceMapDistanceScale;
	float SpaceMapFadeAngleMax;
	float SpaceMapFadeAngleMin;
	float SpaceMapFoV;
	float SpaceMapFreighterScale;
	float SpaceMapHorizonThickness;
	float SpaceMapLightPitch;
	float SpaceMapLightYaw;
	float SpaceMapLineBaseFade;
	float SpaceMapLineBaseScale;
	float SpaceMapLineWidth;
	float SpaceMapMarkerScale;
	float SpaceMapMaxTraderDistance;
	float SpaceMapMoonScale;
	float SpaceMapObjectScale;
	float SpaceMapPirateFreighterScale;
	float SpaceMapPirateFrigateScale;
	float SpaceMapPlanetLineOffset;
	float SpaceMapPlanetScale;
	float SpaceMapScaleMin;
	float SpaceMapScaleRangeMax;
	float SpaceMapScaleRangeMin;
	float SpaceMapShipCombineDistance;
	float SpaceMapShipScale;
	float SpaceMapShipScaleMin;
	float SpaceMapStationScale;
	float SpaceMarkersBattleOffset;
	float SpaceMarkersOffset;
	float StackSizeChangeMaxRate;
	float StackSizeChangeMinRate;
	float StackSizeRateChangeRate;
	float StageStingDisplayTime;
	float StandingRewardOSDTime;
	float StatsMessageDelayTime;
	float StoreDialDecayTime;
	float StoreDialHoldTime;
	float StoreDialInnerRadius;
	float StoreDialOuterRadius;
	float SuperchargeGradientFactor;
	float SuperchargeGradientFactorMin;
	float SuperchargeGradientTime;
	float SurveyObjectArrowOffsetMultiplier;
	float TakeoffFuelMessageTime;
	float TalkBoxAlienTextSpeed;
	float TalkBoxAlienTextTimeMax;
	float TalkBoxAlienTextTimeMin;
	float TargetDisplayDamageFlashTime;
	float TargetDisplayScale;
	float TargetDisplayShipScale;
	float TargetDisplayTorpedoScale;
	float TargetMarkerFadeAngleMin;
	float TargetMarkerFadeAngleRange;
	float TargetMarkerScaleEnd;
	float TargetMarkerScaleStart;
	float TargetParallaxMaintenancePageMultiplier;
	float TargetParallaxMouseMultiplier;
	float TargetScreenDistance;
	float TargetScreenFoV;
	float TechDisplayDelayTime;
	float TechPopupBuildLayerHeight;
	float TechPopupInstallLayerHeight;
	float TechPopupRepairLayerHeight;
	float TechPopupRequirementHeight;
	float TextChatMaxDisplayTime;
	float TextChatStayBigAfterTextInput;
	float TextPrintoutMultiplier;
	float TextPrintoutMultiplierAlien;
	float TextTouchScrollCap;
	float ThirdPersonCrosshairCircle1Distance;
	float ThirdPersonCrosshairCircle2Distance;
	float ThirdPersonCrosshairDistance;
	float TimedEventLookTime;
	float TooltipTime;
	float TouchScrollChangePageThreshold;
	float TouchScrollMaxDelta;
	float TouchScrollSpeedMul;
	float TrackCriticalHitSize;
	float TrackCriticalPulseTime;
	float TrackLeadTargetInScale;
	float TrackMissileTargetPulseRate;
	float TrackPoliceFreighterCentreOffset;
	float TrackPrimaryCentreOffset;
	float TrackReticuleAngle;
	float TrackReticuleInactiveTime;
	float TrackReticuleInTime;
	float TrackReticuleRandomDelay;
	float TrackReticuleRandomTime;
	float TrackReticuleScale;
	float TrackScaleCritical;
	float TrackScaleHit;
	float TrackTimerAlpha;
	float TrackTimerIconExclaimRadius;
	float TrackTimerIconInnerRadius;
	float TrackTimerIconOuterRadius;
	float TrackTimerRadarPulseSize;
	float TrackTypeIconSize;
	float TradePageNotifyOffset;
	float TransferPopupCursorOffsetFactor;
	float TransferSendOffscreenBorder;
	float TransitionOffset;
	float TravelLineThickness;
	float TravelTargetRadius;
	float TrialUpsellDeclineDecayTimeQuick;
	float TrialUpsellDeclineDecayTimeSlow;
	float TrialUpsellDeclineDialInnerRadius;
	float TrialUpsellDeclineDialOuterRadius;
	float TrialUpsellDeclineHoldTimeQuick;
	float TrialUpsellDeclineHoldTimeSlow;
	int32_t UnknownWordsToShowInCatalogue;
	float UseZoomedOutBuildCamRadius;
	int32_t VRFaceLockedScreenHeight;
	int32_t VRFaceLockedScreenWidth;
	float WantedDetectMessageTime;
	float WantedDetectMinTimeout;
	float WantedLevelScanAlpha;
	float WantedLevelScannedRate;
	float WantedLevelTimeoutPulseRate;
	float WantedLevelWitnessAlpha;
	float WantedLevelWitnessOffset;
	float WantedLevelWitnessPulseRate;
	float ZoomFactorOverride;
	float ZoomHUDElementsOffsetX;
	float ZoomHUDElementsOffsetY;
	float ZoomHUDElementTime;
	NMS::NMSString0x100 HUDCircleAnimIcon;
	NMS::NMSString0x100 HUDDeathPointIcon;
	NMS::NMSString0x100 HUDHexAnimIcon;
	NMS::NMSString0x100 HUDMarkerColourIcon;
	NMS::NMSString0x100 HUDMarkerIcon;
	NMS::NMSString0x100 HUDMarkerPrimaryIndicatorIcon;
	NMS::NMSString0x100 HUDPointIcon;
	NMS::NMSString0x100 HUDSaveIcon;
	NMS::NMSString0x100 HUDSpaceshipIcon;
	NMS::NMSString0x20 DistanceUnitKM;
	NMS::NMSString0x20 DistanceUnitM;
	NMS::NMSString0x20 DistanceUnitMpS;
	NMS::NMSString0x20 MaxDialogCharSizeIdeographicString;
	NMS::NMSString0x20 MaxDialogCharSizeRomanString;
	NMS::NMSString0x20 VRDistanceWarningUIFile;
	bool BuildMenuUseSmallIconOnPad[16];
	bool AllowInventorySorting;
	bool AllowInWorldDebugBorders;
	bool AllowProjectorRepositioning;
	bool AlwaysCloseQuickMenu;
	NMS_Toolkit::TkCurveType ArrowBounceLeftCurve;
	NMS_Toolkit::TkCurveType ArrowBounceRightCurve;
	bool AutoScrollParagraphs;
	bool BaseBuildingSmoothMenuWhileSnapped;
	bool BigPicking;
	bool BigPickingUsesNumbers;
	bool BinocularScanScreen;
	NMS_Toolkit::TkCurveType CompassCurve;
	bool CreatureInteractLabelUseBB;
	NMS_Toolkit::TkCurveType CreatureReticuleAlphaCurve;
	NMS_Toolkit::TkCurveType CreatureReticuleScaleCurve;
	NMS_Toolkit::TkCurveType CrosshairLeadScaleCurve;
	NMS_Toolkit::TkCurveType CrosshairTargetLockAlphaCurve;
	NMS_Toolkit::TkCurveType CrosshairTargetLockCurve;
	NMS_Toolkit::TkCurveType DamageNumberUpCurve;
	bool DebugInventoryIndices;
	bool DebugMarkerLabels;
	bool DebugMissionLogText;
	bool DebugPopupSizes;
	bool DebugShowMaintenanceScreenCentre;
	bool EnableAccessibleUIOnSwitch;
	bool EnableBlackouts;
	bool EnableBuilderRobotGreekConversion;
	bool EnableCraftingTree;
	bool EnableHandMenuButtons;
	bool EnableHandMenuDebug;
	bool EnableKanaConversion;
	bool EnablePopupUses;
	bool FixedInventoryIconPositions;
	NMS_Toolkit::TkCurveType FrontendBootBarCurve;
	NMS_Toolkit::TkCurveType FrontendConfirmCurve;
	NMS_Toolkit::TkCurveType FrontendDoFCurve;
	bool FrontendDoFEnableBokeh;
	bool HideExtremePlanetNotifications;
	bool HideQuickMenuControls;
	NMS_Toolkit::TkCurveType HUDMarkerActiveCurve;
	NMS_Toolkit::TkCurveType HUDMarkerAnimAlphaCurve;
	NMS_Toolkit::TkCurveType HUDMarkerAnimCurve;
	NMS_Toolkit::TkCurveType HUDPlayerTrackArrowEnergyShieldDepletedCurve;
	NMS_Toolkit::TkCurveType HUDPlayerTrackArrowEnergyShieldStartChargeCurve;
	bool InteractionInWorldPlayerCamAlways;
	NMS_Toolkit::TkCurveType InteractionScanSlapCurve;
	bool LeadTargetEnabled;
	bool ModelRendererBGPass;
	bool ModelRendererPass1;
	bool ModelRendererPass2;
	NMS_Toolkit::TkCurveType NGuiModelViewFadeInAfterRenderCurve;
	bool NGuiUseSeparateLayersForModelAndReflection;
	bool OnlyShowEjectHandlesInVR;
	NMS_Toolkit::TkCurveType PadCursorUICurve;
	NMS_Toolkit::TkCurveType PageTurnCurve;
	NMS_Toolkit::TkCurveType PageTurnFadeCurve;
	NMS_Toolkit::TkCurveType PopupActivateCurve1;
	NMS_Toolkit::TkCurveType PopupActivateCurve2;
	bool ProgressiveDialogStyle;
	bool QuickMenuAllowCycle;
	bool QuickMenuEnableSwipe;
	bool RepairTechUseTechIcon;
	bool ReplaceItemBarWithNumbers;
	bool ShieldHUDAlwaysOn;
	bool ShowDamageNumbers;
	bool ShowDifficultyForBases;
	bool ShowJetpackNotificationForNonTerrain;
	bool ShowOnscreenPredatorMarkers;
	bool ShowPadlockForLockedSettings;
	bool ShowVRDistanceWarning;
	bool SkipShopIntro;
	NMS_Toolkit::TkCurveType SpaceMapDistanceCurve;
	bool SpaceMapShowAnomaly;
	bool SpaceMapShowAnomalyLines;
	bool SpaceMapShowFrieghterLines;
	bool SpaceMapShowFrieghters;
	bool SpaceMapShowNexus;
	bool SpaceMapShowNexusLines;
	bool SpaceMapShowPlanetLines;
	bool SpaceMapShowPlanets;
	bool SpaceMapShowPulseEncounterLines;
	bool SpaceMapShowPulseEncounters;
	bool SpaceMapShowShipLines;
	bool SpaceMapShowShips;
	bool SpaceMapShowStation;
	bool SpaceMapShowStationLines;
	bool SpaceOnlyLeadTargetEnabled;
	bool TechBoxesCanStack;
	NMS_Toolkit::TkCurveType TrackCritCurve;
	NMS_Toolkit::TkCurveType TrackReticuleInAngleCurve;
	NMS_Toolkit::TkCurveType TrackReticuleInCurve;
	bool UseCursorHoverSlowFixedValue;
	bool UseIntermediateMissionGiverOptions;
	bool UseNamesOnShipHUD;
	bool UseSquareSlots;
	bool UseWorldNodesForRepair;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcDamageType
{
	enum class DamageTypeEnum : uint32_t
	{
		Gun = 0,
		Laser = 1,
		Shotgun = 2,
		Burst = 3,
		Rail = 4,
		Cannon = 5,
		Explosion = 6,
		Melee = 7,
		ShipGun = 8,
		ShipLaser = 9,
		ShipShotgun = 10,
		ShipMinigun = 11,
		ShipRockets = 12,
		ShipPlasma = 13,
		VehicleGun = 14,
		VehicleLaser = 15,
		SentinelLaser = 16,
		PlayerDamage = 17,
		PlayerWeapons = 18,
		ShipWeapons = 19,
		VehicleWeapons = 20,
		CombatEffects = 21,
		Fiend = 22,
		FreighterLaser = 23,
		FreighterTorpedo = 24,
	};

	NMS_GameComponents::GcDamageType::DamageTypeEnum DamageType;
};

//Dependency: GcDamageType
struct GcDamageMultiplier
{
	float Multiplier;
	NMS_GameComponents::GcDamageType Type;
};

//Dependency: GcDamageMultiplier
//Dependency: NMSString0x10
struct GcDamageMultiplierLookup
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcDamageMultiplier> Multipliers;
	float Default;
};

//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcCustomisationHeadToRace
{
	NMS::NMSString0x20A HeadDescriptor;
	NMS_GameComponents::GcAlienRace HeadAnimationRace;
	NMS_GameComponents::GcAlienRace Race;
};

struct GcCreaturePetRewardActions
{
	enum class PetActionEnum : uint32_t
	{
		Tickle = 0,
		Treat = 1,
		Ride = 2,
		Customise = 3,
		Abandon = 4,
		LayEgg = 5,
		Adopt = 6,
		Milk = 7,
		HarvestSpecial = 8,
	};

	NMS_GameComponents::GcCreaturePetRewardActions::PetActionEnum PetAction;
};

//Dependency: GcCreaturePetTraitRange
struct GcCreaturePetTraitRanges
{
	NMS_GameComponents::GcCreaturePetTraitRange TraitRanges[3];
};

struct GcMissionConditionIsPlayerWeak
{
	enum class ProgressTypeEnum : uint32_t
	{
		ShipOrWeapon = 0,
		Ship = 1,
		Weapon = 2,
	};

	NMS_GameComponents::GcMissionConditionIsPlayerWeak::ProgressTypeEnum ProgressType;
};

//Dependency: NMSString0x10
struct GcCreatureRidingAnimation
{
	NMS::NMSString0x10 MovementAnim;
	NMS::NMSString0x10 RidingAnim;
};

//Dependency: GcCreatureRidingAnimation
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureRidingPartModifier
{
	NMS::Vector3f Offset;
	NMS::Vector3f RotationOffset;
	NMS::Vector3f VROffset;
	NMS::NMSString0x20A PartName;
	NMS::NMSString0x10 DefaultRidingAnim;
	NMS::NMSString0x10 IdleRidingAnim;
	std::vector<NMS_GameComponents::GcCreatureRidingAnimation> RidingAnims;
	float HeadCounterRotation;
	float LegSpreadOffset;
	float MaxScale;
	float MinScale;
	NMS::NMSString0x100 AdditionalScaleJoint;
	NMS::NMSString0x100 JointName;
	bool BreakIfNotSelected;
	bool OverrideAnims;
	bool RelativeOffset;
};

//Dependency: GcCreatureRidingPartModifier
//Dependency: GcCreatureRidingAnimation
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcCreatureRidingData
{
	NMS::Vector3f Offset;
	NMS::Vector3f RotationOffset;
	NMS::Vector3f VROffset;
	NMS::NMSString0x10 DefaultRidingAnim;
	NMS::NMSString0x10 IdleRidingAnim;
	std::vector<NMS_GameComponents::GcCreatureRidingPartModifier> PartModifiers;
	std::vector<NMS_GameComponents::GcCreatureRidingAnimation> RidingAnims;
	float HeadCounterRotation;
	float ScaleForMaxLegSpread;
	float ScaleForMinLegSpread;
	float ScaleForNeutralLegSpread;
	float UprightStrength;
	NMS::NMSString0x100 AdditionalScaleJoint;
	NMS::NMSString0x100 JointName;
	bool LegSpread;
	bool RequiresMatchingPartModifier;
};

struct GcMissionGalacticPoint
{
	enum class GalacticPointEnum : uint32_t
	{
		Atlas = 0,
		BlackHole = 1,
	};

	NMS_GameComponents::GcMissionGalacticPoint::GalacticPointEnum GalacticPoint;
};

//Dependency: GcCreatureRoleDescription
//Dependency: GcPlanetLife
//Dependency: GcTerrainTileType
struct GcCreatureRoleDescriptionTable
{
	std::vector<NMS_GameComponents::GcCreatureRoleDescription> RoleDescription;
	NMS_GameComponents::GcPlanetLife LifeLevel;
	float MaxScaleVariance;
	float MinScaleVariance;
	NMS_GameComponents::GcTerrainTileType TileType;
};

//Dependency: GcInteractionData
struct GcInteractionBuffer
{
	std::vector<NMS_GameComponents::GcInteractionData> Interactions;
	int32_t CurrentPos;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionFrigateCount
{
	int32_t FrigateCount;
	NMS_Toolkit::TkEqualityEnum Test;
};

struct GcMissionConditionNearRobotSite
{
	float Distance;
	bool RequireNPCs;
	bool RequireRevealTech;
};

//Dependency: GcResourceElement
//Dependency: GcCreatureRoles
//Dependency: GcCreatureTypes
//Dependency: GcCreatureHemiSphere
//Dependency: GcRarity
//Dependency: GcTerrainTileType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCreatureSpawnData
{
	NMS_GameComponents::GcResourceElement ExtraResource;
	NMS_GameComponents::GcResourceElement FemaleResource;
	NMS_GameComponents::GcResourceElement Resource;
	NMS::NMSString0x20A Filter;
	NMS::NMSString0x10 CreatureID;
	float CreatureActiveInDayChance;
	float CreatureActiveInNightChance;
	float CreatureDespawnDistance;
	float CreatureGroupsPerSquareKm;
	int32_t CreatureMaxGroupSize;
	int32_t CreatureMinGroupSize;
	NMS_GameComponents::GcCreatureRoles CreatureRole;
	float CreatureSpawnDistance;
	NMS_GameComponents::GcCreatureTypes CreatureType;
	NMS_GameComponents::GcCreatureHemiSphere HemiSphere;
	float MaxScale;
	float MinScale;
	NMS_GameComponents::GcRarity Rarity;
	int32_t RoleDataIndex;
	NMS_GameComponents::GcTerrainTileType TileType;
	bool AllowFur;
	bool Herd;
	bool SwapPrimaryForRandomColour;
	bool SwapPrimaryForSecondaryColour;
};

//Dependency: GcBuildingClassification
struct GcNPCSettlementBehaviourBuildingClassCapacityEntry
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	int32_t Capacity;
};

struct GcCreatureSpawnEnum
{
	enum class IncrementorEnum : uint32_t
	{
		None = 0,
		Resource = 1,
		ResourceAway = 2,
		HeavyAir = 3,
		Drone = 4,
		Deer = 5,
		DeerScan = 6,
		DeerWords = 7,
		DeerWordsAway = 8,
		Diplo = 9,
		DiploScan = 10,
		DiploWords = 11,
		DiploWordsAway = 12,
		Flyby = 13,
		Beast = 14,
		Wingmen = 15,
		Scouts = 16,
		Fleet = 17,
		Attackers = 18,
		AttackersFromBehind = 19,
		Flee = 20,
		RemoveFleet = 21,
		Fighters = 22,
		PostFighters = 23,
		Escape = 24,
		Warp = 25,
	};

	NMS_GameComponents::GcCreatureSpawnEnum::IncrementorEnum Incrementor;
};

//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcCreatureSpookFiendAttackData
{
	NMS::NMSString0x10 SpitAttackAnim;
	NMS::Vector2f FollowDistanceOscillationRange;
	NMS::Vector2f FollowHeightOscillationRange;
	NMS::Vector2f FollowSpeedOscillationRange;
	NMS::Vector2f HideDuration;
	NMS::Vector2f KamikazeCooldown;
	NMS::Vector2f KamikazePickWeightRange;
	NMS::Vector2f KamikazeThreatLevelRange;
	NMS::Vector2f NullAttackCooldown;
	NMS::Vector2f PostAttackMinVisibleDuration;
	NMS::Vector2f RevealDuration;
	NMS::Vector2f SpitAttackCooldown;
	NMS::Vector2f SpitPickWeightRange;
	NMS::Vector2f SpitThreatLevelRange;
	NMS::Vector2f ThreatLevelHealthScale;
	NMS::Vector2f ThreatLevelTimeAliveScale;
	float ApproachDistance;
	float FadeTime;
	float FollowDistanceOscillationPeriod;
	float FollowHeightOscillationPeriod;
	float FollowSpeedOscillationPeriod;
	NMS_GameComponents::GcAudioWwiseEvents KamikazeAudioEventBegin;
	NMS_GameComponents::GcAudioWwiseEvents KamikazeAudioEventEnd;
	int32_t MaxSimultaneousKamikaze;
	float NullAttackWeight;
	float ReapproachDistance;
	int32_t SpitAttackAnimFrame;
	float SpitAttackPauseTime;
	float ThreatLevelHealthWeight;
	float ThreatLevelSpookWeight;
	float ThreatLevelTimeAliveWeight;
};

//Dependency: NMSString0x20A
struct GcSavedInteractionDialogData
{
	NMS::NMSString0x20A Dialog;
	uint64_t Hash;
};

//Dependency: GcCreatureStupidName
//Dependency: NMSString0x80
struct GcCreatureStupidNameTable
{
	std::vector<NMS_GameComponents::GcCreatureStupidName> Table;
	NMS::NMSString0x80 StupidUserName;
};

//Dependency: GcDebrisData
//Dependency: GcAudioWwiseEvents
//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x10
struct GcExplosionData
{
	NMS::Colour AddedLightColour;
	NMS_Toolkit::TkModelResource Model;
	std::vector<NMS_GameComponents::GcDebrisData> Debris;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ShakeId;
	float AddedLightIntensity;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float CamShakeCustomMaxDistance;
	float DistanceScale;
	float DistanceScaleMax;
	float Life;
	float LightFadeInTime;
	float LightFadeOutTime;
	float MaxSpawnDistance;
	float Scale;
	float ShakeStrengthModifier;
	bool AddLight;
	bool AllowDestructableDebris;
	bool AllowShootableDebris;
	bool AllowTriggerActionOnDebris;
	bool CamShake;
	bool CamShakeSpaceScale;
};

//Dependency: GcExplosionData
//Dependency: NMSString0x80
struct GcExplosionDataTable
{
	std::vector<NMS_GameComponents::GcExplosionData> Table;
	NMS::NMSString0x80 Name;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcCreatureSwarmDataParams
{
	NMS::NMSString0x10 AnimThrustCycleAnim;
	std::vector<NMS::NMSString0x20A> ValidDescriptors;
	float Alignment;
	float AlignTime;
	float AnimThrustCycleEnd;
	float AnimThrustCycleMax;
	float AnimThrustCycleMin;
	float AnimThrustCyclePeak;
	float AnimThrustCycleStart;
	float BankingTime;
	float Coherence;
	float FaceMoveDirStrength;
	float FlyTimeMax;
	float FlyTimeMin;
	float Follow;
	float LandAdjustDist;
	float LandClampBegin;
	float LandIdleTimeMax;
	float LandIdleTimeMin;
	float LandSlowDown;
	float LandTimeMax;
	float LandTimeMin;
	float LandWalkTimeMax;
	float LandWalkTimeMin;
	float MaxBankingAmount;
	float MaxPitchAmount;
	float MaxSpeed;
	float MinPitchAmount;
	float SeparateStrength;
	float Spacing;
	float SpeedForMaxPitch;
	float SpeedForMinPitch;
	float SteeringSpringSmoothTime;
	float SwimAnimSpeedMax;
	float SwimAnimSpeedMin;
	float SwimFastSpeedMul;
	float SwimMaxAcceleration;
	float SwimTurn;
	float TakeOffStartSpeed;
	float TakeOffTime;
	float TakeOffUpwardBoost;
	float TurnRequiredForMaxBanking;
	float UpwardMovementForMaxPitch;
	float WalkSpeed;
	float WalkTurnTime;
	bool ApplyScaleToSpeed;
	bool ApplyScaleToSteeringSmoothTime;
	bool CanLand;
	bool CanWalk;
	bool FaceMoveDirYawOnly;
	bool UseAnimThrustCycle;
};

//Dependency: GcCreatureSwarmDataParams
struct GcCreatureSwarmData
{
	enum class SwarmMovementTypeEnum : uint32_t
	{
		None = 0,
		Circle = 1,
		Random = 2,
		Search = 3,
		FollowPlayer = 4,
		FollowPlayerLimited = 5,
	};

	std::vector<NMS_GameComponents::GcCreatureSwarmDataParams> Params;
	int32_t MaxCount;
	int32_t MinCount;
	float SwarmMovementRadius;
	float SwarmMovementSpeed;
	NMS_GameComponents::GcCreatureSwarmData::SwarmMovementTypeEnum SwarmMovementType;
};

struct GcMissionConditionIsSurveying
{
	enum class ForHotspotTypeEnum : uint32_t
	{
		Any = 0,
		Power = 1,
		Gas = 2,
		Minerals = 3,
	};

	NMS_GameComponents::GcMissionConditionIsSurveying::ForHotspotTypeEnum ForHotspotType;
	bool RequireAlreadyAnalysed;
};

//Dependency: GcNPCTriggerTypes
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcNodeID
struct GcMessageNPCBehaviourEvent
{
	NMS::Vector3f Position;
	NMS::NMSString0x10 BehaviourEvent;
	NMS::NMSString0x10 UserData;
	int32_t InteractionSubType;
	NMS_GameComponents::GcNPCTriggerTypes InteractionTrigger;
	NMS::GcNodeID SourceNode;
};

//Dependency: GcSolarSystemSkyColourData
struct GcSpaceSkyColourSettingList
{
	std::vector<NMS_GameComponents::GcSolarSystemSkyColourData> Settings;
};

//Dependency: Vector3f
struct GcExpeditionHologramComponentData
{
	NMS::Vector3f SpawnOffset;
	float CaptainScale;
	float FrigateScale;
	float HologramRotationSpeedDegPerSec;
};

struct GcMechWeaponLocation
{
	enum class MechWeaponLocationEnum : uint32_t
	{
		TurretExocraft = 0,
		TurretSentinel = 1,
		ArmLeft = 2,
		ArmRight = 3,
		FlameThrower = 4,
	};

	NMS_GameComponents::GcMechWeaponLocation::MechWeaponLocationEnum MechWeaponLocation;
};

//Dependency: GcVehicleWeaponMuzzleData
//Dependency: GcMechWeaponLocation
//Dependency: NMSString0x10
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: Vector3f
struct GcSentinelMechWeaponData
{
	enum class SentinelMechWeaponTypeEnum : uint32_t
	{
		Projectile = 0,
		Laser = 1,
	};

	NMS::Colour LaserLightColour;
	NMS::Vector3f LaserLightOffset;
	NMS_GameComponents::GcVehicleWeaponMuzzleData MuzzleData;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 LaserID;
	NMS::NMSString0x10 Projectile;
	float AttackAngle;
	float ChargeTime;
	float CooldownTimeMax;
	float CooldownTimeMin;
	float IdealRange;
	float LaserFireTimeMax;
	float LaserFireTimeMin;
	float LaserLightAttackIntensity;
	float LaserLightChargeIntensity;
	float LaserSpringTimeMax;
	float LaserSpringTimeMin;
	float MaxRange;
	float MinRange;
	float ProjectileExplosionRadius;
	float ProjectileFireInterval;
	float ProjectileInheritInitialVelocity;
	int32_t ProjectileNumShotsMax;
	int32_t ProjectileNumShotsMin;
	int32_t ProjectilesPerShot;
	float ProjectileSpread;
	NMS_GameComponents::GcSentinelMechWeaponData::SentinelMechWeaponTypeEnum SentinelMechWeaponType;
	NMS_GameComponents::GcMechWeaponLocation ShootLocation;
	NMS_GameComponents::GcAudioWwiseEvents StartFireAudioEvent;
	NMS_GameComponents::GcAudioWwiseEvents StopFireAudioEvent;
};

struct GcTerrainEditing
{
	float EditSizes[8];
	float SubtractSizes[3];
	float BaseEditSizes[2];
	float UndoEditSizes[2];
	float DensityBlendDistanceMultiplier;
	float EditEffectScale;
	float EditPlaneMaxAdditiveOffsetFactor;
	float EditPlaneMaxSubtractiveOffsetFactor;
	float EditPlaneMinAdditiveOffsetFactor;
	float EditPlaneMinSubtractiveOffsetFactor;
	float FlatteningSizes[1];
	float MinimumSubstancePresence;
	float RegionEditAreaMultiplier;
	float RegionMapSearchRadiusMultiplier;
	float TerrainBlocksSearchRadiusMultiplier;
	float TerrainEditBaseDistanceTolerance;
	float TerrainEditBeamAddInterpolationStepFactor;
	float TerrainEditBeamMaxRange;
	float TerrainEditBeamSpherecastRadius;
	float TerrainEditBeamSubtractInterpolationStepFactor;
	float TerrainEditsNormalCostFactor;
	float TerrainEditsSurvivalCostFactor;
	float TerrainUndoBaseDistanceTolerance;
	float UndoBaseEditEffectiveScale;
	float UndoEditToleranceFactor;
	float VoxelsDeletedAffectCostFactor;
	bool EditGunBeamEnabled;
	bool EditGunParticlesEnabled;
	bool SubtractGunBeamEnabled;
	bool SubtractGunParticlesEnabled;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcTerrainEditing
//Dependency: GcTerrainOverlayColours
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcTerrainGlobals
{
	NMS::Colour TerrainBeamLightColour;
	NMS::NMSString0x10 MiningSubstanceBiome[17];
	std::vector<NMS::NMSString0x10> MiningSubstanceRare;
	std::vector<NMS::NMSString0x10> MiningSubstanceStar;
	std::vector<NMS::NMSString0x10> MiningSubstanceStarExtreme;
	NMS::VariableSizeString RegionHotspotsTable;
	NMS_GameComponents::GcTerrainEditing TerrainEditing;
	NMS_GameComponents::GcTerrainOverlayColours HueOverlay;
	NMS_GameComponents::GcTerrainOverlayColours SaturationOverlay;
	NMS_GameComponents::GcTerrainOverlayColours ValueOverlay;
	float HeightBlend;
	float MaxHighWaterLevel;
	float MaxHighWaterRatio;
	float MaxWaterRatio;
	float MinHighWaterLevel;
	float MinHighWaterRatio;
	float MinHighWaterRegionRatio;
	float MinWaterRatio;
	float MouseWheelRotatePlaneSensitivity;
	int32_t NumGeneratorCalls;
	int32_t NumPolygoniseCalls;
	int32_t NumPostPolygoniseCalls;
	float PurpleSystemMaxHighWaterChance;
	float RegisterTerrainMinDistance;
	float SeaLevelGasGiant;
	float SeaLevelHigh;
	float SeaLevelMoon;
	float SeaLevelStandard;
	float SeaLevelWaterWorld;
	float SmoothStepAbove;
	float SmoothStepBelow;
	float SmoothStepStrength;
	float SubtractEditFrequency;
	float SubtractEditLength;
	float SubtractEditOffset;
	float TerrainBeamDefaultRadius;
	float TerrainBeamHologramTimeout;
	float TerrainBeamLightIntensity;
	float TerrainBeamUndoRangeFromLastAdd;
	int32_t TerrainPrimeIndexStart;
	int32_t TerrainPurpleSystemIndexStart;
	float TerrainUndoCubesAlpha;
	float TerrainUndoCubesNoiseFactor;
	float TerrainUndoCubesNoiseThreshold;
	float TerrainUndoCubesRange;
	float TerrainUndoFadeDepthConstant;
	float TerrainUndoFadeDepthScalar;
	float TextureBlendOffset;
	float TextureBlendScale0;
	float TextureBlendScale1;
	float TextureBlendScale2;
	float TextureFadeDistance;
	float TextureFadePower;
	float TextureScaleMultiplier;
	float TextureScalePower;
	float TileBlendMultiplier;
	float UseMax;
	bool DebugFlattenAllTerrain;
	bool DebugLockTerrainSettingsIndex;
	bool DebugNoFlattenForBuildings;
	bool DebugRegionHotspots;
	bool ForcePurpleSystemHighWater;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcRewardStartSettlementExpedition
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNGuiEditorIcons
//Dependency: NMSString0x20
struct TkNGuiLayoutShortcut
{
	NMS_Toolkit::TkNGuiEditorIcons EditorIcon;
	NMS::NMSString0x20 Name;
	bool Available;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkEqualityEnum
struct GcMissionConditionCreatureTrust
{
	NMS_Toolkit::TkEqualityEnum Test;
	float Trust;
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventActive
{
	NMS::NMSString0x20A Event;
	bool MustMatchThisMissionIDSeed;
};

struct GcHazardModifiers
{
	enum class HazardModifierEnum : uint32_t
	{
		Temperature = 0,
		Toxicity = 1,
		Radiation = 2,
		LifeSupportDrain = 3,
		Gravity = 4,
		SpookLevel = 5,
	};

	NMS_GameComponents::GcHazardModifiers::HazardModifierEnum HazardModifier;
};

//Dependency: NMSString0x10
struct GcInventoryTechProbability
{
	enum class DesiredTechProbabilityEnum : uint32_t
	{
		Never = 0,
		Rare = 1,
		Common = 2,
		Always = 3,
	};

	NMS::NMSString0x10 Tech;
	NMS_GameComponents::GcInventoryTechProbability::DesiredTechProbabilityEnum DesiredTechProbability;
};

//Dependency: GcInventoryTechProbability
//Dependency: NMSString0x10
struct GcCustomInventoryComponentData
{
	std::vector<NMS_GameComponents::GcInventoryTechProbability> DesiredTechs;
	NMS::NMSString0x10 Size;
	bool Cool;
};

struct GcCustomNotifyTimerOptions
{
	float NotifyDisplayTime;
	float NotifyPauseTime;
	bool HasCustomNotifyTimer;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcProductDescriptionOverride
{
	NMS::NMSString0x20A NewDescription;
	NMS::NMSString0x10 MissionID;
	NMS::NMSString0x10 ProductID;
};

struct GcRewardUploadBase
{
};

//Dependency: NMSString0x10
struct GcSpookFiendSpawnData
{
	NMS::NMSString0x10 SpawnID;
	int32_t MaxNumSpawns;
	float SpawnChance;
	float ThresholdSpookLevel;
	float TimerAccelerator;
};

struct GcMarkerType
{
	enum class MarkerTypeEnum : uint32_t
	{
		Default = 0,
		PlanetPoleNorth = 1,
		PlanetPoleSouth = 2,
		PlanetPoleEast = 3,
		PlanetPoleWest = 4,
		BaseBuildingMarkerBeacon = 5,
		TerrainResource = 6,
		Object = 7,
		Tagged = 8,
		TaggedPlanet = 9,
		Unknown = 10,
		Ship = 11,
		Freighter = 12,
		NetworkPlayerFireTeamFreighter = 13,
		FreighterBase = 14,
		PlayerFreighter = 15,
		PlayerSettlement = 16,
		DamagedFrigate = 17,
		Bounty = 18,
		PlanetRaid = 19,
		Battle = 20,
		SpaceSignal = 21,
		BlackHole = 22,
		SpaceAnomalySignal = 23,
		SpaceAtlasSignal = 24,
		GenericIcon = 25,
		NetworkPlayerFireTeam = 26,
		NetworkPlayerFireTeamShip = 27,
		NetworkPlayer = 28,
		NetworkPlayerShip = 29,
		NetworkPlayerVehicle = 30,
		Monument = 31,
		PlayerBase = 32,
		EditingBase = 33,
		MessageBeacon = 34,
		ExternalBase = 35,
		PlanetBaseTerminal = 36,
		Vehicle = 37,
		VehicleCheckpoint = 38,
		VehicleGarage = 39,
		Pet = 40,
		DeathPoint = 41,
		Signal = 42,
		Portal = 43,
		PurchasableFrigate = 44,
		Expedition = 45,
		Building = 46,
		ActiveNetworkMarker = 47,
		CustomMarker = 48,
		PlacedMarker = 49,
		Nexus = 50,
		PowerHotspot = 51,
		MineralHotspot = 52,
		GasHotspot = 53,
		NPC = 54,
		SettlementNPC = 55,
		FishPot = 56,
		CreatureCurious = 57,
		CreatureAction = 58,
		CreatureTame = 59,
		CreatureDanger = 60,
		CreatureFiend = 61,
		CreatureMilk = 62,
		FuelAsteroid = 63,
		PulseEncounter = 64,
		FrigateFlyby = 65,
		ShipExperienceSpawn = 66,
		FriendlyDrone = 67,
		ImportantNPC = 68,
	};

	NMS_GameComponents::GcMarkerType::MarkerTypeEnum MarkerType;
};

//Dependency: GcCustomisationDescriptorGroup
//Dependency: NMSString0x10
struct GcCustomisationDescriptorGroupSet
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroup> DescriptorGroups;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 RequiresGroup;
	bool GroupsAreMutuallyExclusive;
};

//Dependency: GcCustomisationDescriptorVisualEffects
//Dependency: GcCustomisationDescriptorGroupSet
//Dependency: GcCustomisationHeadToRace
struct GcCustomisationDescriptorGroups
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorVisualEffects> DescriptorVisualEffects;
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupSet> DescriptorGroupSets;
	std::vector<NMS_GameComponents::GcCustomisationHeadToRace> HeadRaces;
};

//Dependency: GcRewardTableItemList
struct GcRewardTableCategory
{
	NMS_GameComponents::GcRewardTableItemList Sizes[3];
};

struct GcMissionConditionCreatureReadyToHatch
{
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGatherForBuild
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 GatherResource;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 TargetTech;
};

//Dependency: GcCustomisationDescriptorGroupFallbackData
//Dependency: GcCustomisationPreset
struct GcCustomisationPresets
{
	std::vector<NMS_GameComponents::GcCustomisationDescriptorGroupFallbackData> DescriptorGroupFallbackMap;
	std::vector<NMS_GameComponents::GcCustomisationPreset> Presets;
};

//Dependency: GcCustomisationBobbleHead
struct GcCustomisationShipBobbleHeads
{
	std::vector<NMS_GameComponents::GcCustomisationBobbleHead> BobbleHeads;
};

struct GcPhotoBuilding
{
	enum class PhotoBuildingTypeEnum : uint32_t
	{
		Shelter = 0,
		Abandoned = 1,
		Shop = 2,
		Outpost = 3,
		RadioTower = 4,
		Observatory = 5,
		Depot = 6,
		Monolith = 7,
		Factory = 8,
		Portal = 9,
		Ruin = 10,
		MissionTower = 11,
		LargeBuilding = 12,
	};

	NMS_GameComponents::GcPhotoBuilding::PhotoBuildingTypeEnum PhotoBuildingType;
};

//Dependency: GcPhotoBuilding
struct GcPhotoBuildings
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoBuilding BuildingType;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcCustomisationShipTrails
{
	NMS_Toolkit::TkModelResource Trails;
	NMS::NMSString0x10 LinkedTechID;
};

struct GcSizeIndicator
{
	enum class SizeIndicatorEnum : uint32_t
	{
		Small = 0,
		Medium = 1,
		Large = 2,
	};

	NMS_GameComponents::GcSizeIndicator::SizeIndicatorEnum SizeIndicator;
};

//Dependency: GcCustomisationThrusterJet
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcCustomisationThrusterEffect
{
	NMS::Colour LightColour;
	NMS::NMSString0x20A Tip;
	std::vector<NMS_GameComponents::GcCustomisationThrusterJet> Jets;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 Name;
	bool AllowedInSeasonalDefaults;
	bool HiddenInCustomiser;
};

//Dependency: GcCustomisationBackpackData
//Dependency: GcCustomisationFreighterEngineEffect
//Dependency: GcCustomisationThrusterEffect
//Dependency: GcCustomisationShipTrails
struct GcCustomisationThrusterEffects
{
	std::vector<NMS_GameComponents::GcCustomisationBackpackData> BackpackData;
	std::vector<NMS_GameComponents::GcCustomisationFreighterEngineEffect> FreighterEngineEffects;
	std::vector<NMS_GameComponents::GcCustomisationThrusterEffect> JetpackEffects;
	std::vector<NMS_GameComponents::GcCustomisationShipTrails> ShipEffects;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcWeatherHazardLightningData
{
	NMS_Toolkit::TkModelResource IndicatorDecal;
	NMS_Toolkit::TkModelResource StaticDecal;
	NMS::NMSString0x10 DamageID;
	NMS::NMSString0x10 ImpactParticle;
	NMS::NMSString0x10 ShakeID;
	float DamageRadius;
	float DecalFullGrowthProgress;
	float EarliestImpact;
	float EarliestImpactFirstInstance;
	float FlashStartProgress;
	float FullDamageRadius;
	float MaxRadius;
	int32_t MaxStrikes;
	float MinRadius;
	int32_t MinStrikes;
	float NumFlashes;
	float StormDuration;
};

struct GcRewardPirateProbeSignal
{
	bool Attack;
};

struct GcPlanetHazardData
{
	float LifeSupportDrain[6];
	float Radiation[6];
	float SpookLevel[6];
	float Temperature[6];
	float Toxicity[6];
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcSentinelCoverComponentData
{
	NMS::NMSString0x10 CoverStateAnims[4];
	NMS::NMSString0x10 DestroyEffectId;
	NMS::NMSString0x10 SpawnEffectId;
	float HealthPercLostPerSecMax;
	float HealthPercLostPerSecMin;
	NMS::NMSString0x20 EffectLocator;
};

//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct GcDeathQuote
{
	NMS::NMSString0x80 QuoteLine1;
	NMS::NMSString0x80 QuoteLine2;
	NMS::NMSString0x20 Author;
};

//Dependency: GcBaseSnapState
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcOutSnapSocketCondition
{
	NMS::NMSString0x10 ObjectId;
	int32_t OutSocketIndex;
	int32_t SnapPointIndex;
	NMS_GameComponents::GcBaseSnapState SnapState;
	NMS::NMSString0x80 OutSocket;
	NMS::NMSString0x80 SnapPoint;
};

struct GcMessageUpdateFrigateSpeed
{
	float StartSpeed;
	float TargetSpeed;
};

//Dependency: GcFontTypesEnum
//Dependency: Colour
struct GcTextPreset
{
	NMS::Colour Colour;
	NMSTemplate Style;
	NMS_GameComponents::GcFontTypesEnum Font;
	float Height;
};

//Dependency: GcTextPreset
//Dependency: GcDeathQuote
struct GcDeathStateData
{
	NMS_GameComponents::GcTextPreset AuthorFont;
	NMS_GameComponents::GcTextPreset QuoteFont;
	NMS_GameComponents::GcTextPreset ReasonFont;
	std::vector<NMS_GameComponents::GcDeathQuote> Quotes;
};

//Dependency: NMSString0x10
struct GcHUDComponent
{
	enum class AlignEnum : uint32_t
	{
		Center = 0,
		TopLeft = 1,
		TopRight = 2,
		BottomLeft = 3,
		BottomRight = 4,
	};

	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcHUDComponent::AlignEnum Align;
	int32_t Height;
	int32_t PosX;
	int32_t PosY;
	int32_t Width;
};

struct GcSettlementStatStrength
{
	enum class SettlementStatStrengthEnum : uint32_t
	{
		PositiveWide = 0,
		PositiveLarge = 1,
		PositiveMedium = 2,
		PositiveSmall = 3,
		NegativeSmall = 4,
		NegativeMedium = 5,
		NegativeLarge = 6,
	};

	NMS_GameComponents::GcSettlementStatStrength::SettlementStatStrengthEnum SettlementStatStrength;
};

//Dependency: GcSettlementStatType
//Dependency: GcSettlementStatStrength
struct GcSettlementStatChange
{
	NMS_GameComponents::GcSettlementStatType Stat;
	NMS_GameComponents::GcSettlementStatStrength Strength;
	bool DirectlyChangePopulation;
};

//Dependency: GcSettlementStatChange
struct GcSettlementStatChangeArray
{
	std::vector<NMS_GameComponents::GcSettlementStatChange> Stats;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
struct GcMissionConditionDefaultItem
{
	NMS::NMSString0x10 ID;
	NMS_GameComponents::GcDefaultMissionProductEnum ProductType;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum SubstanceType;
};

//Dependency: GcScanEventData
struct GcScanEventTable
{
	std::vector<NMS_GameComponents::GcScanEventData> Events;
};

struct GcDecorationComponentData
{
	float MaxTestRange;
	float StartOffset;
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: NMSString0x10
struct GcMissionConditionProductKnown
{
	NMS::NMSString0x10 Product;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	bool DependentOnSeasonMilestone;
	bool TakeProductFromSeasonData;
};

//Dependency: Colour
struct GcNPCColourGroup
{
	NMS::Colour Primary;
	std::vector<NMS::Colour> Secondary;
	float Rarity;
};

//Dependency: GcNPCColourGroup
struct GcNPCColourTable
{
	std::vector<NMS_GameComponents::GcNPCColourGroup> Groups;
};

struct GcPlanetSentinelLevel
{
	enum class SentinelLevelEnum : uint32_t
	{
		Low = 0,
		Default = 1,
		Aggressive = 2,
		Corrupt = 3,
	};

	NMS_GameComponents::GcPlanetSentinelLevel::SentinelLevelEnum SentinelLevel;
};

//Dependency: GcPlanetSentinelLevel
//Dependency: Vector2f
struct GcPlanetGroundCombatData
{
	NMS::Vector2f FlybyTimer;
	NMS::Vector2f SentinelTimer;
	int32_t MaxActiveDrones;
	NMS_GameComponents::GcPlanetSentinelLevel SentinelLevel;
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: NMSString0x20A
struct GcRewardCommunicatorMessage
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::NMSString0x20A FailureMessageBusy;
	NMS::NMSString0x20A FailureMessageNotInShip;
};

//Dependency: GcFrigateClass
struct GcFrigateFlybyOption
{
	NMS_GameComponents::GcFrigateClass FrigateClass;
	int32_t MaxCount;
	int32_t MinCount;
	float Weight;
};

//Dependency: GcFrigateFlybyOption
//Dependency: GcFrigateFlybyType
struct GcFrigateFlybyLayout
{
	std::vector<NMS_GameComponents::GcFrigateFlybyOption> Frigates;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	float InitialSpeed;
	float InterestDistance;
	float InterestTime;
	float TargetSpeed;
};

//Dependency: GcFrigateFlybyLayout
struct GcFrigateFlybyTable
{
	std::vector<NMS_GameComponents::GcFrigateFlybyLayout> Entries;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkLSystemRestrictionData
{
	enum class RestrictionEnum : uint32_t
	{
		NoMoreThan = 0,
		AtLeast = 1,
		AtLeastIfICan = 2,
	};

	int32_t Amount;
	NMS_Toolkit::TkLSystemRestrictionData::RestrictionEnum Restriction;
};

//Dependency: TkLSystemRestrictionData
//Dependency: VariableSizeString
struct TkLSystemLocatorEntry
{
	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemRestrictionData> Restrictions;
	float Probability;
};

//Dependency: TkLSystemLocatorEntry
//Dependency: NMSString0x20
struct TkLSystemInnerRule
{
	enum class MergeProbabilityOptionsEnum : uint32_t
	{
		Balance = 0,
		Prioritize = 1,
		Replace = 2,
	};

	std::vector<NMS_Toolkit::TkLSystemLocatorEntry> Entries;
	NMS_Toolkit::TkLSystemInnerRule::MergeProbabilityOptionsEnum MergeProbabilityOptions;
	NMS::NMSString0x20 LocatorType;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardRequirementsForRecipe
{
	NMS::NMSString0x10 RecipeID;
	bool RewardInCreative;
};

//Dependency: NMSString0x10
struct GcMissionIDEpochPair
{
	NMS::NMSString0x10 MissionID;
	uint64_t RecurrenceDeadline;
};

//Dependency: GcBuildingClassification
//Dependency: NMSString0x10
struct GcSettlementProductionSlotData
{
	NMS::NMSString0x10 ElementId;
	uint64_t LastChangeTimestamp;
	int32_t Amount;
	int32_t ProductionAccumulationCap;
	float ProductionAmountMultiplier;
	float ProductionTimeMultiplier;
	int32_t RequiredSettlementBuildingLevel;
	NMS_GameComponents::GcBuildingClassification RequiredSettlementBuildingType;
};

//Dependency: GcAlienRace
//Dependency: GcBuildingClassification
//Dependency: GcSettlementProductionSlotData
//Dependency: GcSettlementWeaponRespawnData
//Dependency: GcDiscoveryOwner
//Dependency: Vector3f
//Dependency: GcSettlementJudgementType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcSettlementState
{
	NMS::Vector3f Position;
	uint64_t LastBuildingUpgradesTimestamps[48];
	NMS_GameComponents::GcSettlementProductionSlotData ProductionState[2];
	NMS::NMSString0x10 LastJudgementPerkID;
	std::vector<NMS_GameComponents::GcSettlementWeaponRespawnData> LastWeaponRefreshTime;
	NMS::NMSString0x10 PendingCustomJudgementID;
	std::vector<NMS::NMSString0x10> Perks;
	uint64_t DbTimestamp;
	uint64_t LastAlertChangeTime;
	uint64_t LastBugAttackChangeTime;
	uint64_t LastDebtChangeTime;
	uint64_t LastJudgementTime;
	uint64_t LastPopulationChangeTime;
	uint64_t LastUpkeepDebtCheckTime;
	uint64_t MiniMissionSeed;
	uint64_t MiniMissionStartTime;
	uint64_t NextBuildingUpgradeSeedValue;
	uint64_t SeedValue;
	uint64_t UniverseAddress;
	NMS_GameComponents::GcDiscoveryOwner Owner;
	int32_t BuildingStates[48];
	int32_t Stats[8];
	int32_t DbVersion;
	NMS_GameComponents::GcBuildingClassification NextBuildingUpgradeClass;
	int32_t NextBuildingUpgradeIndex;
	NMS_GameComponents::GcSettlementJudgementType PendingJudgementType;
	NMS_GameComponents::GcAlienRace Race;
	uint16_t Population;
	NMS::NMSString0x40 DbResourceId;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 UniqueId;
	bool IsReported;
};

struct GcWonderRecord
{
	uint64_t GenerationID[2];
	float WonderStatValue;
	bool SeenInFrontend;
};

//Dependency: GcResourceElement
//Dependency: Vector4f
//Dependency: GcSeed
struct GcNPCWorkerData
{
	NMS::Vector4f BaseOffset;
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::GcSeed InteractionSeed;
	uint64_t BaseUA;
	bool FreighterBase;
	bool HiredWorker;
};

//Dependency: NMSString0x10
struct GcTelemetryStat
{
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 Type;
	int32_t Value;
};

//Dependency: Vector4f
struct GcPlayerSpawnStateData
{
	enum class LastKnownPlayerStateEnum : uint32_t
	{
		OnFoot = 0,
		InShip = 1,
		InStation = 2,
		AboardFleet = 3,
		InNexus = 4,
		AbandonedFreighter = 5,
		InShipLanded = 6,
		InVehicle = 7,
	};

	NMS::Vector4f AbandonedFreighterPositionInSystem;
	NMS::Vector4f AbandonedFreighterTransformAt;
	NMS::Vector4f AbandonedFreighterTransformUp;
	NMS::Vector4f FreighterPositionInSystem;
	NMS::Vector4f FreighterTransformAt;
	NMS::Vector4f FreighterTransformUp;
	NMS::Vector4f PlayerDeathRespawnPositionInSystem;
	NMS::Vector4f PlayerDeathRespawnTransformAt;
	NMS::Vector4f PlayerPositionInSystem;
	NMS::Vector4f PlayerTransformAt;
	NMS::Vector4f ShipPositionInSystem;
	NMS::Vector4f ShipTransformAt;
	NMS_GameComponents::GcPlayerSpawnStateData::LastKnownPlayerStateEnum LastKnownPlayerState;
};

//Dependency: Vector4f
struct GcSkiffSaveData
{
	NMS::Vector4f Direction;
	NMS::Vector4f Position;
	uint64_t Location;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcPersistentBBObjectData
{
	NMS::Vector3f At;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::NMSString0x10 ObjectID;
	uint64_t GalacticAddress;
	uint64_t RegionSeed;
	uint64_t Timestamp;
	uint64_t UserData;
};

//Dependency: GcSeed
struct GcPortalSaveData
{
	NMS::GcSeed PortalSeed;
	uint64_t LastPortalUA;
	bool IsStoryPortal;
};

//Dependency: GcDifficultySettingsData
//Dependency: GcDifficultyPresetType
struct GcDifficultyStateData
{
	NMS_GameComponents::GcDifficultySettingsData Settings;
	NMS_GameComponents::GcDifficultyPresetType EasiestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType HardestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType Preset;
};

//Dependency: GcQuickMenuActionSaveData
struct GcHotActionsSaveData
{
	NMS_GameComponents::GcQuickMenuActionSaveData KeyActions[10];
};

//Dependency: GcResourceElement
struct GcSquadronPilotData
{
	NMS_GameComponents::GcResourceElement NPCResource;
	NMS_GameComponents::GcResourceElement ShipResource;
	uint64_t TraitsSeed;
	uint16_t PilotRank;
};

struct GcSettlementHistory
{
	uint64_t SeedValue;
	int32_t BugAttackCount;
	int32_t GiftsRecieved;
	int32_t InitialBuildingCount;
	int32_t InitialHappiness;
	int32_t InitialPopulation;
	int32_t InitialProductivity;
	int32_t InitialUpkeepCost;
	int32_t JudgementsSettled;
	float LastWentIntoDebtTime;
	float LastWentIntoProfitTime;
	float LongestDebtStretch;
	float LongestProfitStretch;
	float PlayerClaimedTime;
	int32_t PlayerKillCount;
	int32_t SentinelAttackCount;
	int32_t SettlerDeathCount;
};

//Dependency: GcStatValueData
//Dependency: NMSString0x10
struct GcPlayerStat
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcStatValueData Value;
};

//Dependency: GcPlayerStat
//Dependency: NMSString0x10
struct GcPlayerStatsGroup
{
	NMS::NMSString0x10 GroupId;
	std::vector<NMS_GameComponents::GcPlayerStat> Stats;
	uint64_t Address;
};

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcSyncBufferSaveData
{
	uint64_t SpaceAddress;
	uint32_t BufferVersion;
	uint32_t ItemsCount;
	NMS::NMSString0x40 OwnerOnlineId;
	NMS::NMSString0x20 OwnerPlatformId;
};

//Dependency: GcSyncBufferSaveData
struct GcSyncBufferSaveDataArray
{
	std::vector<NMS_GameComponents::GcSyncBufferSaveData> Data;
};

//Dependency: GcPlayerMissionParticipant
//Dependency: NMSString0x10
struct GcPlayerMissionProgress
{
	NMS_GameComponents::GcPlayerMissionParticipant Participants[13];
	NMS::NMSString0x10 Mission;
	uint64_t Data;
	uint64_t Seed;
	uint64_t Stat;
	int32_t Progress;
};

struct GcStoryPageSeenData
{
	int32_t LastSeenEntryIdx;
	int32_t PageIdx;
};

//Dependency: GcStoryPageSeenData
struct GcStoryPageSeenDataArray
{
	std::vector<NMS_GameComponents::GcStoryPageSeenData> PagesData;
};

//Dependency: GcExpeditionEventSaveData
//Dependency: NMSString0x10
//Dependency: GcExpeditionCategory
//Dependency: GcExpeditionDuration
//Dependency: Vector3f
//Dependency: GcSeed
//Dependency: NMSString0x100
struct GcFleetExpeditionSaveData
{
	NMS::Vector3f SpawnPosition;
	NMS::Vector3f TerminalPosition;
	std::vector<int32_t> ActiveFrigateIndices;
	std::vector<int32_t> AllFrigateIndices;
	std::vector<int32_t> DamagedFrigateIndices;
	std::vector<int32_t> DestroyedFrigateIndices;
	std::vector<NMS_GameComponents::GcExpeditionEventSaveData> Events;
	NMS::NMSString0x10 InterventionEventMissionID;
	std::vector<NMS::NMSString0x10> Powerups;
	NMS::GcSeed Seed;
	uint64_t PauseTime;
	uint64_t StartTime;
	uint64_t TimeOfLastUAChange;
	uint64_t UA;
	NMS_GameComponents::GcExpeditionCategory ExpeditionCategory;
	NMS_GameComponents::GcExpeditionDuration ExpeditionDuration;
	int32_t NextEventToTrigger;
	int32_t NumberOfFailedEventsThisExpedition;
	int32_t NumberOfSuccessfulEventsThisExpedition;
	float SpeedMultiplier;
	NMS::NMSString0x100 CustomName;
	bool InterventionPhoneCallActivated;
};

//Dependency: GcGalacticAddressData
//Dependency: GcGalaxyWaypointTypes
//Dependency: NMSString0x20A
struct GcGalaxyWaypoint
{
	NMS::NMSString0x20A EventId;
	NMS_GameComponents::GcGalacticAddressData Address;
	int32_t RealityIndex;
	NMS_GameComponents::GcGalaxyWaypointTypes Type;
};

//Dependency: GcInventoryContainer
struct GcMaintenanceContainer
{
	NMS_GameComponents::GcInventoryContainer InventoryContainer;
	std::vector<float> AmountAccumulators;
	std::vector<float> DamageTimers;
	uint64_t LastBrokenTimestamp;
	uint64_t LastCompletedTimestamp;
	uint64_t LastUpdateTimestamp;
	uint16_t Flags;
};

//Dependency: GcBuildingClassification
//Dependency: GcPlayerMissionParticipantType
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
struct GcScanEventSave
{
	NMS::Vector3f BuildingLocation;
	NMS::NMSString0x20A Event;
	NMS::GcSeed BuildingSeed;
	NMS::NMSString0x10 MissionID;
	uint64_t GalacticAddress;
	uint64_t MissionSeed;
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	NMS_GameComponents::GcPlayerMissionParticipantType ParticipantType;
	int32_t Table;
	float Time;
};

//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcTradingSupplyData
{
	NMS::NMSString0x10 Product;
	uint64_t GalacticAddress;
	uint64_t Timestamp;
	float Demand;
	NMS_GameComponents::GcInteractionType InteractionType;
	float Supply;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct GcPersistentBaseEntry
{
	NMS::Vector3f At;
	NMS::Vector3f Position;
	NMS::Vector3f Up;
	NMS::NMSString0x10 ObjectID;
	uint64_t Timestamp;
	uint64_t UserData;
	NMS::NMSString0x40 Message;
};

//Dependency: GcPersistentBaseEntry
//Dependency: GcGameMode
//Dependency: GcBaseAutoPowerSetting
//Dependency: GcDiscoveryOwner
//Dependency: GcPersistentBaseDifficultyData
//Dependency: NMSString0x40
//Dependency: GcPersistentBaseTypes
//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcPersistentBase
{
	NMS::Vector3f Forward;
	NMS::Vector3f Position;
	NMS::Vector3f ScreenshotAt;
	NMS::Vector3f ScreenshotPos;
	std::vector<NMS_GameComponents::GcPersistentBaseEntry> Objects;
	uint64_t GalacticAddress;
	uint64_t LastUpdateTimestamp;
	uint64_t UserData;
	NMS_GameComponents::GcDiscoveryOwner Owner;
	NMS_GameComponents::GcPersistentBaseDifficultyData Difficulty;
	NMS_GameComponents::GcBaseAutoPowerSetting AutoPowerSetting;
	NMS_GameComponents::GcPersistentBaseTypes BaseType;
	int32_t BaseVersion;
	NMS_GameComponents::GcGameMode GameMode;
	int32_t OriginalBaseVersion;
	NMS::NMSString0x40 LastEditedById;
	NMS::NMSString0x40 LastEditedByUsername;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 RID;
	NMS::NMSString0x20 PlatformToken;
	bool IsFeatured;
	bool IsReported;
};

//Dependency: Vector3f
struct GcMaintenanceSaveKey
{
	NMS::Vector3f Position;
	int32_t Location;
};

//Dependency: GcMaintenanceContainer
//Dependency: GcInventoryIndex
struct GcRepairTechData
{
	NMS_GameComponents::GcMaintenanceContainer MaintenanceContainer;
	NMS_GameComponents::GcInventoryIndex InventoryIndex;
	int32_t InventorySubIndex;
	int32_t InventoryType;
};

struct GcSettlementTowerPowerTimestamps
{
	uint64_t TimeStamps[4];
	int8_t ClusterIndex;
};

//Dependency: GcByteBeatJukeboxData
//Dependency: GcSettlementTowerPowerTimestamps
struct GcSettlementLocalSaveData
{
	uint64_t BuildingSeeds[48];
	NMS_GameComponents::GcByteBeatJukeboxData ByteBeatJukebox;
	NMS_GameComponents::GcSettlementTowerPowerTimestamps TowerPowerTimeStamps[3];
	uint64_t Seed;
	int32_t Buildings[48];
	bool HasScannedToReveal;
	bool RequiresStatConversion;
};

//Dependency: NMSString0x100
struct GcSavedEntitlement
{
	NMS::NMSString0x100 EntitlementId;
};

struct GcSavedInteractionRaceData
{
	int32_t SavedRaceIndicies[9];
	bool HasLoopedIndicies[9];
};

struct GcWonderType
{
	enum class WonderTypeEnum : uint32_t
	{
		Treasure = 0,
		WeirdBasePart = 1,
		Planet = 2,
		Creature = 3,
		Flora = 4,
		Mineral = 5,
		Custom = 6,
	};

	NMS_GameComponents::GcWonderType::WonderTypeEnum WonderType;
};

//Dependency: GcWonderType
//Dependency: NMSString0x40
struct GcWonderRecordCustomData
{
	NMS_GameComponents::GcWonderType ActualType;
	NMS::NMSString0x40 CustomName;
};

//Dependency: GcPlayerOwnershipData
//Dependency: GcTerrainEditsBuffer
//Dependency: GcArchivedShipData
//Dependency: GcMissionIDEpochPair
//Dependency: GcSettlementState
//Dependency: GcWonderRecord
//Dependency: GcNPCWorkerData
//Dependency: NMSString0x80
//Dependency: GcArchivedMultitoolData
//Dependency: GcTelemetryStat
//Dependency: GcMultitoolData
//Dependency: GcSeed
//Dependency: GcPlayerSpawnStateData
//Dependency: GcTeleportEndpoint
//Dependency: GcSkiffSaveData
//Dependency: GcPersistentBBObjectData
//Dependency: GcInteractionData
//Dependency: GcPetData
//Dependency: GcFishingRecord
//Dependency: GcSavedInteractionDialogData
//Dependency: GcPetCustomisationData
//Dependency: GcPortalSaveData
//Dependency: GcCharacterCustomisationSaveData
//Dependency: GcDifficultyStateData
//Dependency: GcHotActionsSaveData
//Dependency: GcSquadronPilotData
//Dependency: GcSettlementHistory
//Dependency: GcPlayerStatsGroup
//Dependency: GcInventoryContainer
//Dependency: GcSyncBufferSaveDataArray
//Dependency: GcCharacterCustomisationData
//Dependency: GcInteractionBuffer
//Dependency: GcPlayerMissionProgress
//Dependency: GcStoryPageSeenDataArray
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: GcResourceElement
//Dependency: GcExactResource
//Dependency: GcInventoryLayout
//Dependency: GcFleetExpeditionSaveData
//Dependency: GcFleetFrigateSaveData
//Dependency: GcGalaxyWaypoint
//Dependency: GcWordGroupKnowledge
//Dependency: GcInWorldUIScreenData
//Dependency: GcWordKnowledge
//Dependency: GcMaintenanceContainer
//Dependency: GcScanEventSave
//Dependency: GcTradingSupplyData
//Dependency: GcPersistentBase
//Dependency: GcMaintenanceSaveKey
//Dependency: GcRepairTechData
//Dependency: GcSettlementLocalSaveData
//Dependency: GcSavedEntitlement
//Dependency: GcUniverseAddressData
//Dependency: GcSavedInteractionRaceData
//Dependency: GcWonderRecordCustomData
//Dependency: GcPlayerWeapons
//Dependency: Vector3f
//Dependency: Vector4f
//Dependency: NMSString0x20
struct GcPlayerStateData
{
	NMS_GameComponents::GcTerrainEditsBuffer TerrainEditData;
	NMS_GameComponents::GcSettlementState SettlementStatesV2[100];
	NMS_GameComponents::GcArchivedShipData ArchivedShipOwnership[18];
	NMS_GameComponents::GcPlayerOwnershipData ShipOwnership[12];
	NMS_GameComponents::GcArchivedMultitoolData ArchivedMultitools[18];
	NMS_GameComponents::GcPlayerOwnershipData VehicleOwnership[7];
	NMS_GameComponents::GcMultitoolData Multitools[6];
	NMS_GameComponents::GcNPCWorkerData NPCWorkers[5];
	NMS::Vector3f PlanetPositions[16];
	NMS_GameComponents::GcPlayerSpawnStateData MultiplayerSpawn;
	NMS_GameComponents::GcTeleportEndpoint OtherSideOfPortalReturnBase;
	NMS_GameComponents::GcSkiffSaveData SkiffData;
	NMS_GameComponents::GcInteractionData HoloExplorerInteraction;
	NMS_GameComponents::GcInteractionData HoloNooneInteraction;
	NMS_GameComponents::GcInteractionData HoloScepticInteraction;
	NMS::Vector4f AnomalyPositionOverride;
	NMS::Vector4f FirstShipPosition;
	NMS::Vector4f FirstSpawnPosition;
	NMS::Vector3f FreighterMatrixAt;
	NMS::Vector3f FreighterMatrixPos;
	NMS::Vector3f FreighterMatrixUp;
	NMS::Vector4f GraveMatrixLookAt;
	NMS::Vector4f GraveMatrixUp;
	NMS::Vector4f GravePosition;
	NMS::Vector3f NexusMatrixAt;
	NMS::Vector3f NexusMatrixPos;
	NMS::Vector3f NexusMatrixUp;
	NMS::Vector4f PortalMarkerPosition_Local;
	NMS::Vector4f PortalMarkerPosition_Offset;
	NMS::Vector4f StartGameShipPosition;
	NMS_GameComponents::GcPetData Eggs[18];
	NMS_GameComponents::GcPetData Pets[18];
	NMS_GameComponents::GcFishingRecord FishingRecord;
	NMS_GameComponents::GcPetCustomisationData PetAccessoryCustomisation[18];
	NMS_GameComponents::GcCharacterCustomisationSaveData CharacterCustomisationData[26];
	NMS_GameComponents::GcHotActionsSaveData HotActions[3];
	NMS_GameComponents::GcSquadronPilotData SquadronPilots[4];
	NMS_GameComponents::GcWonderRecord WonderCreatureRecords[15];
	NMS_GameComponents::GcInventoryContainer Chest10Inventory;
	NMS_GameComponents::GcInventoryContainer Chest1Inventory;
	NMS_GameComponents::GcInventoryContainer Chest2Inventory;
	NMS_GameComponents::GcInventoryContainer Chest3Inventory;
	NMS_GameComponents::GcInventoryContainer Chest4Inventory;
	NMS_GameComponents::GcInventoryContainer Chest5Inventory;
	NMS_GameComponents::GcInventoryContainer Chest6Inventory;
	NMS_GameComponents::GcInventoryContainer Chest7Inventory;
	NMS_GameComponents::GcInventoryContainer Chest8Inventory;
	NMS_GameComponents::GcInventoryContainer Chest9Inventory;
	NMS_GameComponents::GcInventoryContainer ChestMagic2Inventory;
	NMS_GameComponents::GcInventoryContainer ChestMagicInventory;
	NMS_GameComponents::GcInventoryContainer CookingIngredientsInventory;
	NMS_GameComponents::GcInventoryContainer FishBaitBoxInventory;
	NMS_GameComponents::GcInventoryContainer FishPlatformInventory;
	NMS_GameComponents::GcInventoryContainer FoodUnitInventory;
	NMS_GameComponents::GcInventoryContainer FreighterInventory;
	NMS_GameComponents::GcInventoryContainer FreighterInventory_Cargo;
	NMS_GameComponents::GcInventoryContainer FreighterInventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer GraveInventory;
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer RocketLockerInventory;
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS_GameComponents::GcWonderRecord WonderTreasureRecords[13];
	NMS_GameComponents::GcSettlementHistory SettlementHistory[4];
	NMS_GameComponents::GcWonderRecord WonderCustomRecords[12];
	NMS_GameComponents::GcCharacterCustomisationData Outfits[3];
	NMS_GameComponents::GcInteractionBuffer StoredInteractions[11];
	NMS_GameComponents::GcWonderRecord WonderPlanetRecords[11];
	NMS_GameComponents::GcWonderRecord WonderWeirdBasePartRecords[11];
	NMS::GcSeed PlanetSeeds[16];
	NMS_GameComponents::GcWonderRecord WonderFloraRecords[8];
	NMS_GameComponents::GcWonderRecord WonderMineralRecords[8];
	NMS_GameComponents::GcStoryPageSeenDataArray SeenStories[9];
	NMS_GameComponents::GcResourceElement CurrentFreighter;
	NMS_GameComponents::GcResourceElement CurrentFreighterNPC;
	NMS_GameComponents::GcResourceElement CurrentShip;
	NMS_GameComponents::GcSyncBufferSaveDataArray SyncBuffersData[4];
	NMS_GameComponents::GcExactResource CurrentWeapon;
	NMS_GameComponents::GcPortalSaveData VisitedPortal;
	NMS_GameComponents::GcInventoryLayout Chest10Layout;
	NMS_GameComponents::GcInventoryLayout Chest1Layout;
	NMS_GameComponents::GcInventoryLayout Chest2Layout;
	NMS_GameComponents::GcInventoryLayout Chest3Layout;
	NMS_GameComponents::GcInventoryLayout Chest4Layout;
	NMS_GameComponents::GcInventoryLayout Chest5Layout;
	NMS_GameComponents::GcInventoryLayout Chest6Layout;
	NMS_GameComponents::GcInventoryLayout Chest7Layout;
	NMS_GameComponents::GcInventoryLayout Chest8Layout;
	NMS_GameComponents::GcInventoryLayout Chest9Layout;
	NMS_GameComponents::GcInventoryLayout ChestMagic2Layout;
	NMS_GameComponents::GcInventoryLayout ChestMagicLayout;
	NMS_GameComponents::GcInventoryLayout CookingIngredientsLayout;
	NMS_GameComponents::GcInventoryLayout FishBaitBoxLayout;
	NMS_GameComponents::GcInventoryLayout FishPlatformLayout;
	NMS_GameComponents::GcInventoryLayout FoodUnitLayout;
	NMS_GameComponents::GcInventoryLayout FreighterCargoLayout;
	NMS_GameComponents::GcInventoryLayout FreighterLayout;
	NMS_GameComponents::GcInventoryLayout RocketLockerLayout;
	NMS_GameComponents::GcInventoryLayout ShipLayout;
	NMS_GameComponents::GcInventoryLayout WeaponLayout;
	NMS::NMSString0x10 BannerTitleId;
	std::vector<NMS_GameComponents::GcPersistentBBObjectData> BaseBuildingObjects;
	NMS::GcSeed CurrentFreighterHomeSystemSeed;
	NMS::NMSString0x10 CurrentMissionID;
	std::vector<uint64_t> ExpeditionSeedsSelectedToday;
	std::vector<NMS_GameComponents::GcFleetExpeditionSaveData> FleetExpeditions;
	std::vector<NMS_GameComponents::GcFleetFrigateSaveData> FleetFrigates;
	NMS::GcSeed FleetSeed;
	NMS::NMSString0x10 FoodUnitItem;
	NMS::NMSString0x10 FreighterEngineEffect;
	std::vector<NMS_GameComponents::GcGalaxyWaypoint> GalaxyWaypoints;
	std::vector<NMS::NMSString0x20A> InteractionProgressTable;
	NMS::NMSString0x10 JetpackEffect;
	std::vector<NMS::NMSString0x10> KnownProducts;
	std::vector<NMS::NMSString0x20A> KnownRefinerRecipes;
	std::vector<NMS::NMSString0x10> KnownSpecials;
	std::vector<NMS::NMSString0x10> KnownTech;
	std::vector<NMS_GameComponents::GcWordGroupKnowledge> KnownWordGroups;
	std::vector<NMS_GameComponents::GcWordKnowledge> KnownWords;
	std::vector<NMS_GameComponents::GcPortalSaveData> LastPortal;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> MaintenanceInteractions;
	std::vector<NMS_GameComponents::GcScanEventSave> MarkerStack;
	std::vector<NMS_GameComponents::GcPlayerMissionProgress> MissionProgress;
	std::vector<NMS_GameComponents::GcMissionIDEpochPair> MissionRecurrences;
	std::vector<NMS_GameComponents::GcScanEventSave> NewMPMarkerStack;
	std::vector<NMS_GameComponents::GcPersistentBase> PersistentPlayerBases;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> PersonalMaintenanceInteractions;
	NMS::NMSString0x10 PreviousMissionID;
	std::vector<NMS::NMSString0x10> RedeemedPlatformRewards;
	std::vector<NMS::NMSString0x10> RedeemedSeasonRewards;
	std::vector<NMS::NMSString0x10> RedeemedTwitchRewards;
	std::vector<NMS_GameComponents::GcMaintenanceContainer> RefinerBufferData;
	std::vector<NMS_GameComponents::GcMaintenanceSaveKey> RefinerBufferKeys;
	std::vector<NMS_GameComponents::GcRepairTechData> RepairTechBuffer;
	std::vector<NMS_GameComponents::GcSavedInteractionDialogData> SavedInteractionDialogTable;
	std::vector<NMS::NMSString0x10> SeenBaseBuildingObjects;
	std::vector<NMS_GameComponents::GcSettlementLocalSaveData> SettlementLocalSaveData;
	std::vector<NMS_GameComponents::GcPlayerStatsGroup> Stats;
	std::vector<NMS::Vector3f> SurveyedEventPositions;
	std::vector<NMS_GameComponents::GcTelemetryStat> TelemetryStats;
	std::vector<NMS_GameComponents::GcTeleportEndpoint> TeleportEndpoints;
	std::vector<NMS_GameComponents::GcTradingSupplyData> TradingSupplyData;
	std::vector<NMS_GameComponents::GcSavedEntitlement> UsedEntitlements;
	std::vector<NMS_GameComponents::GcUniverseAddressData> VisitedAtlasStationsData;
	std::vector<uint64_t> VisitedSystems;
	std::vector<NMS_GameComponents::GcInWorldUIScreenData> WristScreenData;
	uint64_t ActiveSpaceBattleUA;
	uint64_t CurrentMissionSeed;
	uint64_t FirstPurpleSystemUA;
	uint64_t FreighterLastSpawnTime;
	uint64_t HazardTimeAlive;
	uint64_t LastCheckedForStatResetsTime;
	uint64_t LastKnownDay;
	uint64_t LastUABeforePortalWarp;
	uint64_t MiniStationUA;
	uint64_t MultiplayerLobbyID;
	uint64_t MultiplayerPrivileges;
	uint64_t PreviousMissionSeed;
	uint64_t StoryPortalSeed;
	uint64_t SunTimer;
	uint64_t TaggedPlanetUA;
	uint64_t TimeAlive;
	uint64_t TimeLastMiniStation;
	uint64_t TimeLastSpaceBattle;
	uint64_t TimeStamp;
	NMS_GameComponents::GcSavedInteractionRaceData SavedInteractionIndicies[149];
	NMS_GameComponents::GcWonderRecordCustomData WonderCustomRecordsExtraData[12];
	NMS_GameComponents::GcUniverseAddressData CompletedAtlasAddresses[11];
	NMS_GameComponents::GcUniverseAddressData NewAtlasStationAdressData[11];
	NMS_GameComponents::GcUniverseAddressData AtlasStationAdressData[10];
	NMS_GameComponents::GcDifficultyStateData DifficultyState;
	float Hazard[7];
	NMS_GameComponents::GcUniverseAddressData FreighterUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData GameStartAddress1;
	NMS_GameComponents::GcUniverseAddressData GameStartAddress2;
	NMS_GameComponents::GcUniverseAddressData GraveUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData MultiplayerUA;
	NMS_GameComponents::GcUniverseAddressData NexusUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData PreviousUniverseAddress;
	NMS_GameComponents::GcUniverseAddressData UniverseAddress;
	int32_t ActiveMultioolIndex;
	int32_t ActiveSpaceBattleLevel;
	int32_t BannerBackgroundColour;
	int32_t BannerIcon;
	int32_t BannerMainColour;
	int32_t BoltAmmo;
	int32_t Energy;
	float FoodUnitAccumulator;
	int32_t Health;
	int32_t HomeRealityIteration;
	int32_t KnownPortalRunes;
	int32_t LaserAmmo;
	int32_t MissionVersion;
	int32_t Nanites;
	int32_t NextSurveyedEventPositionIndex;
	int32_t PostMissionIndex;
	int32_t PrimaryPlanet;
	int32_t PrimaryShip;
	int32_t PrimaryVehicle;
	int32_t ProcTechIndex;
	int32_t ProgressionLevel;
	int32_t PulseAmmo;
	int32_t ScatterAmmo;
	int32_t SettlementStateRingBufferIndexV2;
	int32_t Shield;
	int32_t ShipHealth;
	int32_t ShipShield;
	int32_t Specials;
	NMS_GameComponents::GcPlayerWeapons StartingPrimaryWeapon;
	int32_t StartingSeasonNumber;
	NMS_GameComponents::GcPlayerWeapons StartingSecondaryWeapon;
	int32_t TelemetryUploadVersion;
	int32_t TradingSupplyDataIndex;
	int32_t Units;
	float VRCameraOffset;
	int32_t WarpsLastMiniStation;
	int32_t WarpsLastSpaceBattle;
	uint16_t ShopNumber;
	uint16_t ShopTier;
	NMS::NMSString0x80 SaveSummary;
	NMS::NMSString0x20 PlayerFreighterName;
	bool UnlockedPetSlots[18];
	bool GalacticMapRequests[16];
	bool ShipUsesLegacyColours[12];
	bool SquadronUnlockedPilotSlots[4];
	bool BuildersKnown;
	bool FirstAtlasStationDiscovered;
	bool FreighterDismissed;
	bool HasAccessToNexus;
	bool HasDiscoveredPurpleSystems;
	bool HasGalacticMapRequestAllPurples;
	bool HasGalacticMapRequestFirstPurple;
	bool IsNew;
	bool MultiShipEnabled;
	bool NextLoadSpawnsWithFreshStart;
	bool OnOtherSideOfPortal;
	bool RestartAllInactiveSeasonalMissions;
	bool RevealBlackHoles;
	bool ShipNeedsTerrainPositioning;
	bool SpaceGrave;
	bool SpawnGrave;
	bool UseSmallerBlackholeJumps;
	bool VehicleAIControlEnabled;
};

//Dependency: GcPlayerStateData
//Dependency: GcPlayerSpawnStateData
struct GcDefaultSaveData
{
	NMS_GameComponents::GcPlayerStateData State;
	NMS_GameComponents::GcPlayerSpawnStateData Spawn;
};

//Dependency: NMSString0x80
struct GcDeprecatedAssetsTable
{
	std::vector<NMS::NMSString0x80> Table;
};

//Dependency: GcRealitySubstanceCategory
//Dependency: NMSString0x10
//Dependency: GcRarity
struct GcSubstanceAmount
{
	NMS::NMSString0x10 Specific;
	NMS::NMSString0x10 SpecificSecondary;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	NMS_GameComponents::GcRarity Rarity;
};

struct GcStatsEnum
{
	enum class StatEnumEnum : uint32_t
	{
		None = 0,
		DEPOTS_BROKEN = 1,
		FPODS_BROKEN = 2,
		PLANTS_PLANTED = 3,
		SALVAGE_LOOTED = 4,
		TREASURE_FOUND = 5,
		QUADS_KILLED = 6,
		WALKERS_KILLED = 7,
		FLORA_KILLED = 8,
		PLANTS_GATHERED = 9,
		BONES_FOUND = 10,
		C_SENT_KILLS = 11,
		STORM_CRYSTALS = 12,
		BURIED_PROPS = 13,
		MINIWORM_KILL = 14,
		POOP_COLLECTED = 15,
		GRAVBALLS = 16,
		EGG_PODS = 17,
		CORRUPT_PILLAR = 18,
		DRONE_SHARDS = 19,
		MECHS_KILLED = 20,
		SPIDERS_KILLED = 21,
		SM_SPIDER_KILLS = 22,
		SEAGLASS = 23,
		RUINS_LOOTED = 24,
		STONE_KILLS = 25,
	};

	NMS_GameComponents::GcStatsEnum::StatEnumEnum StatEnum;
};

//Dependency: TkModelResource
struct GcLootProbability
{
	NMS_Toolkit::TkModelResource LootModel;
	float Probability;
};

//Dependency: GcSubstanceAmount
//Dependency: GcStatsEnum
//Dependency: GcLootProbability
//Dependency: GcRewardMissionOverride
//Dependency: GcFiendCrime
//Dependency: TkModelResource
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcDestructableComponentData
{
	NMS::NMSString0x10 RarityLocators[3];
	NMS_Toolkit::TkModelResource DestroyedModel;
	NMS::NMSString0x20A OverrideRewardLoc;
	NMS::NMSString0x10 AreaDamage;
	NMS::NMSString0x10 DestroyedModelSpawnNode;
	NMS::NMSString0x10 DestroyEffect;
	NMS::NMSString0x10 DestroyEffectPoint;
	NMS::NMSString0x10 Explosion;
	NMS::NMSString0x10 GivesReward;
	std::vector<NMS_GameComponents::GcSubstanceAmount> GivesSubstances;
	std::vector<NMS_GameComponents::GcLootProbability> LootItems;
	NMS::NMSString0x10 LootReward;
	NMS::NMSString0x10 PirateSystemAltReward;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 UnderwaterExplosion;
	NMS::NMSString0x10 VehicleDestroyEffect;
	int32_t StandingChangeOnDeath[10];
	float DestroyEffectTime;
	float DestroyForce;
	float DestroyForceRadius;
	float ExplosionScale;
	int32_t IncreaseCorruptSentinelWanted;
	NMS_GameComponents::GcFiendCrime IncreaseFiendCrime;
	float IncreaseFiendWantedChance;
	int32_t IncreaseWanted;
	int32_t LootRewardAmountMax;
	int32_t LootRewardAmountMin;
	int32_t OverrideChipAmount;
	float ShowInteractRange;
	NMS_GameComponents::GcStatsEnum StatToTrack;
	float UnderwaterExplosionScale;
	bool ActivateLocatorsFromRarity;
	bool BlockDestructionIfRewardFails;
	bool CanDestroyFromStoredInteraction;
	bool DamagesParentWhenDestroyed;
	bool DestroyedModelCollidesWithEverything;
	bool DestroyedModelUsesScale;
	bool DestroyEffectMatrices;
	bool DestroyEffectOnSurface;
	bool ExplosionScaleToBounds;
	bool GrenadeSingleHit;
	bool HideInteractWhenAllArmourDestroyed;
	bool HideInteractWhenShielded;
	bool HideModel;
	bool HideReward;
	bool IncreaseFiendWanted;
	bool NoConsequencesDuringPirateBattle;
	bool NotifyEncounter;
	bool OnlyExplodeSelf;
	bool RemoveModel;
	bool RewardIfDestroyedByOther;
	bool ShowInteract;
	bool UseSystemColorsForTexture;
};

struct GcScannerBuildingIconTypes
{
	enum class ScanBuildingIconTypeEnum : uint32_t
	{
		None = 0,
		Generic = 1,
		Shelter = 2,
		Relic = 3,
		Factory = 4,
		Unknown = 5,
		Distress = 6,
		Beacon = 7,
		Waypoint = 8,
		SpaceStation = 9,
		TechResource = 10,
		FuelResource = 11,
		MineralResource = 12,
		SpaceAnomaly = 13,
		SpaceAtlas = 14,
		ExternalBase = 15,
		PlanetBaseTerminal = 16,
		Nexus = 17,
		AbandonedFreighter = 18,
		Telescope = 19,
		Outpost = 20,
		UpgradePod = 21,
		Cog = 22,
		Ruins = 23,
		Portal = 24,
		Library = 25,
		Abandoned = 26,
		SmallBuilding = 27,
		StoryGlitch = 28,
		GraveInCave = 29,
		HoloHub = 30,
		Settlement = 31,
		DroneHive = 32,
		SentinelDistress = 33,
		AbandonedRobotCamp = 34,
	};

	NMS_GameComponents::GcScannerBuildingIconTypes::ScanBuildingIconTypeEnum ScanBuildingIconType;
};

//Dependency: GcDifficultySettingEditability
//Dependency: GcDifficultySettingType
//Dependency: NMSString0x20A
struct GcDifficultySettingCommonData
{
	NMS::NMSString0x20A DescriptionLocID;
	NMS::NMSString0x20A TitleLocID;
	NMS::NMSString0x20A ToggleDisabledLocID;
	NMS::NMSString0x20A ToggleEnabledLocID;
	NMS_GameComponents::GcDifficultySettingEditability EditabilityInOptionsMenu;
	NMS_GameComponents::GcDifficultySettingType SettingType;
	bool IsAscendingDifficulty;
};

//Dependency: GcDifficultyFuelUseTechOverride
struct GcDifficultyFuelUseOptionData
{
	std::vector<NMS_GameComponents::GcDifficultyFuelUseTechOverride> TechOverrides;
	float Multiplier;
};

//Dependency: GcDifficultySettingsData
//Dependency: GcItemShopAvailabilityDifficultyOptionData
//Dependency: GcDifficultySettingCommonData
//Dependency: GcDifficultyStartWithAllItemsKnownOptionData
//Dependency: GcDifficultyFuelUseOptionData
//Dependency: GcDifficultyOptionUIGroup
//Dependency: GcDifficultyInventoryStackSizeOptionData
//Dependency: GcDifficultyCurrencyCostOptionData
//Dependency: NMSString0x20A
struct GcDifficultyConfig
{
	NMS_GameComponents::GcDifficultySettingCommonData CommonSettingsData[30];
	NMS_GameComponents::GcDifficultyStartWithAllItemsKnownOptionData StartWithAllItemsKnownDisabledData;
	NMS_GameComponents::GcDifficultyStartWithAllItemsKnownOptionData StartWithAllItemsKnownEnabledData;
	NMS::NMSString0x20A PresetOptionLocIds[7];
	NMS_GameComponents::GcDifficultyOptionUIGroup UILayout[4];
	NMS::NMSString0x20A ActiveSurvivalBarsOptionLocIds[4];
	NMS::NMSString0x20A ChargingRequirementsOptionLocIds[4];
	NMS::NMSString0x20A CurrencyCostOptionLocIds[4];
	NMS::NMSString0x20A DamageReceivedOptionLocIds[4];
	NMS::NMSString0x20A DeathConsequencesOptionLocIds[4];
	NMS::NMSString0x20A FishingOptionLocIds[4];
	NMS::NMSString0x20A FuelUseOptionLocIds[4];
	NMS::NMSString0x20A GroundCombatOptionLocIds[4];
	NMS::NMSString0x20A LaunchFuelCostOptionLocIds[4];
	NMS::NMSString0x20A ReputationGainOptionLocIds[4];
	NMS::NMSString0x20A ScannerRechargeOptionLocIds[4];
	NMS::NMSString0x20A SpaceCombatOptionLocIds[4];
	NMS::NMSString0x20A BreakTechOnDamageOptionLocIds[3];
	NMS::NMSString0x20A CreatureHostilityOptionLocIds[3];
	NMS::NMSString0x20A DamageGivenOptionLocIds[3];
	NMS::NMSString0x20A EnergyDrainOptionLocIds[3];
	NMS_GameComponents::GcDifficultyFuelUseOptionData FuelUseOptionData[4];
	NMS::NMSString0x20A HazardDrainOptionLocIds[3];
	NMS::NMSString0x20A InventoryStackLimitsOptionLocIds[3];
	NMS::NMSString0x20A ItemShopAvailabilityOptionLocIds[3];
	NMS::NMSString0x20A SprintingOptionLocIds[3];
	NMS::NMSString0x20A SubstanceCollectionOptionLocIds[3];
	NMS::NMSString0x20A NPCPopulationOptionLocIds[2];
	NMS_GameComponents::GcItemShopAvailabilityDifficultyOptionData ItemShopAvailabilityOptionData[3];
	NMS::NMSString0x20A PresetLocId;
	NMS_GameComponents::GcDifficultySettingsData Presets[7];
	NMS_GameComponents::GcDifficultyInventoryStackSizeOptionData InventoryStackLimitsOptionData[3];
	NMS_GameComponents::GcDifficultyCurrencyCostOptionData CurrencyCostOptionData[4];
	NMS_GameComponents::GcDifficultySettingsData PermadeathMinSettings;
	float ChargingRequirementsMultipliers[4];
	int32_t DamageReceivedAIMechTechDamageHits[4];
	float DamageReceivedMultipliers[4];
	float FishingCatchWindowMultipliers[4];
	float GroundCombatMultipliers[4];
	float LaunchFuelCostMultipliers[4];
	float ReputationGainMultipliers[4];
	float ScannerRechargeMultipliers[4];
	float SentinelTimeOutMultipliers[4];
	float ShipSummoningFuelCostMultipliers[4];
	float SpaceCombatDifficultyMultipliers[4];
	float SpaceCombatMultipliers[4];
	float BreakTechOnDamageMultipliers[3];
	float DamageGivenMultipliers[3];
	float EnergyDrainMultipliers[3];
	float HazardDrainMultipliers[3];
	float SprintingCostMultipliers[3];
	int32_t SubstanceCollectionLaserAmount[3];
	float SubstanceCollectionMultipliers[3];
	int32_t AllSlotsUnlockedStartingShipSlots;
	int32_t AllSlotsUnlockedStartingShipTechSlots;
	int32_t AllSlotsUnlockedStartingSuitSlots;
	int32_t AllSlotsUnlockedStartingSuitTechSlots;
	int32_t AllSlotsUnlockedStartingWeaponSlots;
};

//Dependency: NMSString0x20
struct GcInputActionMapping2
{
	NMS::NMSString0x20 Action;
	NMS::NMSString0x20 ActionSet;
	NMS::NMSString0x20 Axis;
	NMS::NMSString0x20 Button;
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
struct GcMissionConditionHasLocalSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocation;
	int32_t Amount;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;
};

struct GcDifficultyOptionGroups
{
	enum class DifficultyOptionGroupEnum : uint32_t
	{
		Survival = 0,
		Crafting = 1,
		Combat = 2,
		Ease = 3,
	};

	NMS_GameComponents::GcDifficultyOptionGroups::DifficultyOptionGroupEnum DifficultyOptionGroup;
};

//Dependency: GcBaseSearchFilter
struct GcMissionConditionBaseQuery
{
	NMS_GameComponents::GcBaseSearchFilter BaseSearchFilter;
	int32_t MaxBasesFound;
	int32_t MinBasesFound;
	float SearchDistanceLimit;
	bool TakeSpecificPartIdFromSeasonData;
};

struct GcFishableAreaComponentData
{
	float Radius;
	bool SourceFishBasedOnSettlementBuildingLevel;
};

//Dependency: GcNGuiLayoutData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiPresetGraphic
{
	NMS_GameComponents::GcNGuiLayoutData Layout;
	NMS::VariableSizeString Image;
	NMS::NMSString0x10 PresetID;
	NMS_Toolkit::TkNGuiGraphicStyle Style;
};

//Dependency: NMSString0x20A
struct GcDifficultySettingLocData
{
	NMS::NMSString0x20A DescriptionLocID;
	NMS::NMSString0x20A TitleLocID;
};

struct GcPetActionMoodModifier
{
	float MoodModifiers[2];
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: NMSString0x80
struct TkNGuiEditorStyleColour
{
	NMS::Colour Colour;
	NMS::NMSString0x80 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcProductToCollect
//Dependency: VariableSizeString
struct GcMissionSequenceCollectMultiProducts
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	std::vector<NMS_GameComponents::GcProductToCollect> Products;
	bool SearchCookingIngredients;
	bool WaitForSelected;
};

struct GcVROverride_Text
{
	enum class VROverride_TextEnum : uint32_t
	{
		FontHeight = 0,
		FontIndex = 1,
	};

	float FloatValue;
	int32_t IntValue;
	NMS_GameComponents::GcVROverride_Text::VROverride_TextEnum VROverride_Text;
};

//Dependency: GcNGuiElementData
//Dependency: GcAccessibleOverride_Text
//Dependency: VariableSizeString
//Dependency: GcVROverride_Text
//Dependency: TkNGuiTextStyle
//Dependency: TkNGuiGraphicStyle
struct GcNGuiTextData
{
	NMS_GameComponents::GcNGuiElementData ElementData;
	std::vector<NMS_GameComponents::GcAccessibleOverride_Text> AccessibleOverrides;
	NMS::VariableSizeString Image;
	NMS::VariableSizeString Text;
	std::vector<NMS_GameComponents::GcVROverride_Text> VROverrides;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyle;
	NMS_Toolkit::TkNGuiTextStyle Style;
	float ForcedOffset;
	bool BlockSpecialStyles;
	bool ForcedAllowScroll;
	bool Special;
};

//Dependency: GcDifficultyPresetType
struct GcDifficultySettingsReplicatedState
{
	NMS_GameComponents::GcDifficultyPresetType EasiestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType HardestUsedPreset;
	NMS_GameComponents::GcDifficultyPresetType Preset;
	NMS_GameComponents::GcDifficultyPresetType RoundedDownPreset;
	bool IsLocked;
	bool IsPermadeath;
};

struct GcMissionConditionPlanetAttackPiratesActive
{
};

//Dependency: NMSString0x10
struct GcSentinelSpawnSequenceGroupList
{
	std::vector<NMS::NMSString0x10> CorruptSequences;
	std::vector<NMS::NMSString0x10> ExtremeSequences;
	std::vector<NMS::NMSString0x10> Sequences;
};

//Dependency: GcCreatureHealthData
//Dependency: GcDroneGun
//Dependency: GcPrimaryAxis
//Dependency: NMSString0x10
//Dependency: NMSString0x100
struct GcDroneComponentData
{
	NMS_GameComponents::GcCreatureHealthData Health;
	std::vector<NMS_GameComponents::GcDroneGun> Guns;
	NMS::NMSString0x10 Id;
	std::vector<NMS::NMSString0x10> ProjectileChoices;
	NMS_GameComponents::GcPrimaryAxis Axis;
	float HeadLookIdleTime;
	float HeadLookTime;
	float MaxHeadPitch;
	float MaxHeadRoll;
	float MaxHeadYaw;
	float Scaler;
	NMS::NMSString0x100 HeadJointName;
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
//Dependency: GcItemNeedPurpose
struct GcMissionConditionHasSubstance
{
	NMS::NMSString0x10 Substance;
	int32_t Amount;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool MustBeImmediatelyAccessible;
	bool TakeAmountFromSeasonData;
	bool UseDefaultAmount;
};

//Dependency: NMSString0x10
struct GcRewardMissionSeeded
{
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 MissionNoGroundCombat;
	NMS::NMSString0x10 MissionNoSpaceCombat;
	bool ForceUseConversationSeed;
	bool InheritActiveMultiplayerMissionSeed;
	bool SelectMissionAsLocalMissionBoard;
};

struct GcMissionConditionFeedingCreatures
{
	int32_t MinCreatures;
	bool TakeNumFromSeasonData;
};

struct GcNameGeneratorTypes
{
	enum class MarkovSelectorEnum : uint32_t
	{
		Generic = 0,
		Mineral = 1,
		Region_NO = 2,
		Region_RU = 3,
		Region_CH = 4,
		Region_JP = 5,
		Region_LT = 6,
		Region_FL = 7,
	};

	NMS_GameComponents::GcNameGeneratorTypes::MarkovSelectorEnum MarkovSelector;
};

struct GcDiscoveryTrimGroup
{
	enum class DiscoveryTrimGroupEnum : uint32_t
	{
		System = 0,
		Planet = 1,
		Interesting = 2,
		Boring = 3,
	};

	NMS_GameComponents::GcDiscoveryTrimGroup::DiscoveryTrimGroupEnum DiscoveryTrimGroup;
};

struct GcSynchronisedBufferType
{
	enum class SyncBufferTypeEnum : uint32_t
	{
		Refiner = 0,
		Example1 = 1,
		Example2 = 2,
		Example3 = 3,
	};

	NMS_GameComponents::GcSynchronisedBufferType::SyncBufferTypeEnum SyncBufferType;
};

struct GcDiscoveryTrimScoringCategory
{
	enum class DiscoveryTrimScoringCategoryEnum : uint32_t
	{
		IsNamedSystem = 0,
		RecentlyVisitedSystem = 1,
		RecentDiscoveryInSystem = 2,
		NumDiscoveredPlanetsInSystem = 3,
		IsNamedPlanet = 4,
		NumBasesOnPlanet = 5,
		NumWondersOnPlanet = 6,
		NumNamedDiscoveries = 7,
	};

	NMS_GameComponents::GcDiscoveryTrimScoringCategory::DiscoveryTrimScoringCategoryEnum DiscoveryTrimScoringCategory;
};

//Dependency: GcBaseSearchFilter
//Dependency: GcDiscoveryTrimScoringRules
struct GcDiscoveryTrimSettings
{
	NMS_GameComponents::GcBaseSearchFilter BaseSearchFilter;
	NMS_GameComponents::GcDiscoveryTrimScoringRules DiscoveryTrimScoringRules[8];
	float DiscoveryTrimScoringWeights[8];
	int32_t DiscoveryTrimGroupMaxCounts[4];
};

//Dependency: NMSString0x10
struct GcModularCustomisationDescriptorGroupData
{
	NMS::NMSString0x10 ActivatedDescriptorGroupID;
};

//Dependency: GcModularCustomisationDescriptorGroupData
//Dependency: GcCreatureDiet
//Dependency: GcInventoryClass
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcModularCustomisationSlotItemData
{
	enum class DescriptorGroupSalvageRuleEnum : uint32_t
	{
		All = 0,
		Any = 1,
	};

	std::vector<NMS_GameComponents::GcModularCustomisationDescriptorGroupData> DescriptorGroupData;
	NMS::NMSString0x10 ItemID;
	NMS::VariableSizeString SpecificLocID;
	NMS_GameComponents::GcCreatureDiet CreatureDiet;
	NMS_GameComponents::GcModularCustomisationSlotItemData::DescriptorGroupSalvageRuleEnum DescriptorGroupSalvageRule;
	NMS_GameComponents::GcInventoryClass InventoryClass;
	bool SetInventoryClass;
	bool UseAltCamera;
};

//Dependency: GcModularCustomisationSlotItemData
struct GcModularCustomisationSlotItemDataTable
{
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> Table;
};

struct GcDissolveEffectComponentData
{
	float DissolveBeginHeight;
	float DissolveEndHeight;
};

//Dependency: GcItemFilterMatchIDType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcItemFilterStageDataMatchID
{
	NMS::NMSString0x20A DisabledMessage;
	std::vector<NMS::NMSString0x10> ValidIds;
	NMS_GameComponents::GcItemFilterMatchIDType MatchType;
};

//Dependency: GcImpactCombatEffectData
//Dependency: GcPlayerHazardType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcHazardZoneComponentData
{
	NMS::NMSString0x20A OSDOnEntry;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnEntry;
	NMS::NMSString0x10 DamageOnEntry;
	float HazardStrength;
	NMS_GameComponents::GcPlayerHazardType HazardType;
	float Radius;
};

struct GcMissionConditionNexusNearby
{
	float Distance;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkVirtualBindingAltLayer
{
	NMS::NMSString0x10 HudLayerID;
	NMS::NMSString0x10 ID;
};

//Dependency: GcInputActions
//Dependency: TkVirtualBindingAltLayer
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct TkVirtualBinding
{
	NMS::NMSString0x20A CustomLocID;
	std::vector<NMS_Toolkit::TkVirtualBindingAltLayer> AltHudLayerIDs;
	NMS::NMSString0x10 HudLayerID;
	std::vector<NMS_GameComponents::GcInputActions> TogglableActions;
	NMS_GameComponents::GcInputActions BottomAction;
	NMS_GameComponents::GcInputActions LeftAction;
	NMS_GameComponents::GcInputActions RightAction;
	NMS_GameComponents::GcInputActions TopAction;
	bool Active;
	bool DefaultActive;
	bool DirectionalActions;
	bool SupportsJoystick;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcInputActions
//Dependency: TkVirtualBinding
//Dependency: TkInputAxisEnum
//Dependency: TkInputEnum
struct GcInputBinding
{
	NMS_Toolkit::TkVirtualBinding VirtualBinding;
	NMS_GameComponents::GcInputActions Action;
	NMS_Toolkit::TkInputAxisEnum Axis;
	NMS_Toolkit::TkInputEnum Button;
};

//Dependency: GcInputBinding
//Dependency: GcActionSetType
struct GcInputBindingSet
{
	std::vector<NMS_GameComponents::GcInputBinding> InputBindings;
	NMS_GameComponents::GcActionSetType Type;
};

//Dependency: GcInputBindingSet
struct GcInputBindings
{
	std::vector<NMS_GameComponents::GcInputBindingSet> InputBindingSets;
};

struct GcDoShipClearCommunication
{
};

struct GcMissionConditionCanMakeFossil
{
	float NearbyDisplayDistance;
	bool ConsiderItemsInNearbyDisplays;
};

//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
//Dependency: GcAISpaceshipTypes
struct GcDoShipEscort
{
	NMS_GameComponents::GcRealityCommonFactions EscortTargetShipFaction;
	NMS_GameComponents::GcAISpaceshipRoles EscortTargetShipRole;
	NMS_GameComponents::GcAISpaceshipTypes EscortTargetShipType;
	float MaxSearchDistance;
	bool MatchFaction;
	bool MatchRole;
	bool MatchType;
};

//Dependency: GcPlayerSpawnStateData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcSceneSettings
{
	NMS_GameComponents::GcPlayerSpawnStateData PlayerState;
	NMS::VariableSizeString PlanetFiles[5];
	std::vector<NMSTemplate> Events;
	NMS::VariableSizeString NextSettingFile;
	std::vector<NMS::VariableSizeString> PlanetSceneFiles;
	std::vector<NMSTemplate> PostWarpEvents;
	NMS::VariableSizeString SceneFile;
	std::vector<NMS::VariableSizeString> ShipPreloadFiles;
	NMS::VariableSizeString SolarSystemFile;
	NMS::NMSString0x10 SpawnerOptionId;
	bool SpawnInsideShip;
	bool SpawnShip;
};

struct GcDoShipFlybyClose
{
	float LockOffset;
	float LockSpread;
	float LockTime;
	bool HailingBehaviour;
	bool StayCloseAtLowSpeed;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
struct TkPhysRelVectorData
{
	NMS::Vector3f Local;
	NMS::Vector3f Offset;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcCameraFocusBuildingControlSettings
//Dependency: GcCameraFollowSettings
//Dependency: TkModelRendererData
//Dependency: GcCameraShakeData
//Dependency: GcCameraAnimationData
//Dependency: GcCameraAerialViewDataTableEntry
//Dependency: GcCameraWarpSettings
//Dependency: TkModelResource
//Dependency: TkPhysRelVectorData
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcCameraGlobals
{
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseBack;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseDefault;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseFront;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseLeft;
	NMS_Toolkit::TkModelRendererData CameraCreatureCustomiseRight;
	NMS_Toolkit::TkModelRendererData CameraNPCShipInteraction;
	NMS_Toolkit::TkModelRendererData CameraNPCShopInteraction;
	NMS_Toolkit::TkModelRendererData FreighterCustomisationStandardCamera;
	NMS_Toolkit::TkModelRendererData FreighterCustomisationStandardCameraAlt;
	NMS::Vector3f FirstPersonCamOffset[9];
	NMS::Vector3f BuildingModeInitialOffset;
	NMS::Vector3f FirstPersonInShipCamOffset;
	NMS::Vector3f InteractionHailingFocusOffset;
	NMS::Vector3f InteractionOffset;
	NMS::Vector3f InteractionOffsetCronus;
	NMS::Vector3f InteractionOffsetDefault;
	NMS::Vector3f InteractionOffsetExtraVR;
	NMS::Vector3f InteractionOffsetExtraVRSeated;
	NMS::Vector3f InteractionOffsetGek;
	NMS::Vector3f InteractionOffsetRecruitment;
	NMS::Vector3f InteractionOffsetSpiderman;
	NMS::Vector3f InteractionShipFocusOffset;
	NMS::Colour MiniportalFlashColour;
	NMS::Vector3f ModelViewOffset;
	NMS::Vector3f OffsetCamOffset;
	NMS::Vector3f OffsetCamRotation;
	NMS::Vector3f OffsetForFleetInteraction;
	NMS::Vector3f OffsetForFrigateInteraction;
	NMS::Vector3f PhotoModeShipOffset;
	NMS::Vector3f PhotoModeVRFPOffset;
	NMS::Vector3f ShopInteractionOffsetExtraVR;
	NMS::Vector3f ShopInteractionOffsetExtraVRSeated;
	NMS::Colour VehicleExitFlashColour;
	NMS_GameComponents::GcCameraFollowSettings AlienShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BikeFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BuggyFollowCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingIndoorsCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingOutdoorsCam;
	NMS_GameComponents::GcCameraFollowSettings BuildingUnderwaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAbandCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAbandCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAirborneCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterAirborneCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterFallingCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterFishingCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterGrabbedCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterIndoorCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterMeleeBoostCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterMiningCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterNexusCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamHuge;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamLarge;
	NMS_GameComponents::GcCameraFollowSettings CharacterRideCamMedium;
	NMS_GameComponents::GcCameraFollowSettings CharacterRocketBootsCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRocketBootsChargeCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterRunCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSitCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSpaceCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSteepSlopeCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterSurfaceWaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnarmedCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUndergroundCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterCombatCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterJetpackAscentCam;
	NMS_GameComponents::GcCameraFollowSettings CharacterUnderwaterJetpackCam;
	NMS_GameComponents::GcCameraFollowSettings DropshipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings HovercraftFollowCam;
	NMS_GameComponents::GcCameraFollowSettings MechCombatCam;
	NMS_GameComponents::GcCameraFollowSettings MechFirstPersonCam;
	NMS_GameComponents::GcCameraFollowSettings MechFollowCam;
	NMS_GameComponents::GcCameraFollowSettings MechJetpackCam;
	NMS_GameComponents::GcCameraFollowSettings RobotShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings RoyalShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SailShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings ScienceShipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings ShuttleFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SpaceshipFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SubmarineFollowCam;
	NMS_GameComponents::GcCameraFollowSettings SubmarineFollowCamSurface;
	NMS_GameComponents::GcCameraFollowSettings TruckFollowCam;
	NMS_GameComponents::GcCameraFollowSettings VehicleCam;
	NMS_GameComponents::GcCameraFollowSettings VehicleCamHmd;
	NMS_GameComponents::GcCameraFollowSettings WheeledBikeFollowCam;
	NMS_GameComponents::GcCameraAnimationData AmbientCameraAnimations;
	NMS_Toolkit::TkModelResource AmbientDroneAnimations;
	std::vector<NMS_GameComponents::GcCameraAerialViewDataTableEntry> AerialViewDataTable;
	NMS::VariableSizeString CameraAmbientAnimationsData;
	std::vector<NMS_GameComponents::GcCameraFollowSettings> Cameras;
	std::vector<NMS_GameComponents::GcCameraShakeData> CameraShakeTable;
	std::vector<NMS::Vector3f> SavedCameraFacing;
	std::vector<NMS_Toolkit::TkPhysRelVectorData> SavedCameraPositions;
	NMS_GameComponents::GcCameraWarpSettings FreighterWarpSettings;
	NMS_GameComponents::GcCameraWarpSettings PirateFreighterWarpSettings;
	NMS_GameComponents::GcCameraWarpSettings WarpSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeDistanceControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModePitchControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModePlanarControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeVerticalControlSettings;
	NMS_GameComponents::GcCameraFocusBuildingControlSettings FocusBuildingModeYawControlSettings;
	NMS::Vector2f ModelViewFocusOffset;
	NMS::Vector2f PitchForFrigateInteraction;
	NMS::Vector2f RotationForFrigateInteraction;
	float AerialViewBackTime;
	float AerialViewBlendTime;
	float AerialViewDownDistance;
	float AerialViewPause;
	float AerialViewStartTime;
	float BinocularFlashStrength;
	float BinocularFlashTime;
	float BobAmount;
	float BobAmountAbandFreighter;
	float BobFactor;
	float BobFactorAbandFreighter;
	float BobFocus;
	float BobFwdAmount;
	float BobRollAmount;
	float BobRollFactor;
	float BobRollOffset;
	float BuildingModeMaxDistance;
	float CameraAmbientAutoSwitchMaxTime;
	float CameraAmbientAutoSwitchMinTime;
	float CamSeed1;
	float CamSeed2;
	float CamWander1Amplitude;
	float CamWander1Phase;
	float CamWander2Amplitude;
	float CamWander2Phase;
	float CharCamAutoDirStartTime;
	float CharCamDeflectSpeed;
	float CharCamFocusHeight;
	float CharCamHeight;
	float CharCamLookOffset;
	float CharCamLookOffsetFactor;
	float CharCamMaxDistance;
	float CharCamMinDistance;
	float CharCamMinSpeed;
	float CharCamOffsetTime;
	float CharCamRightStickX;
	float CharCamRightStickY;
	float CloseFactorSpring;
	float CreatureInteractionCamSpring;
	float CreatureInteractionDistMulMax;
	float CreatureInteractionDistMulMin;
	float CreatureInteractionDownhillPitchTransfer;
	float CreatureInteractionFoVMax;
	float CreatureInteractionFoVMin;
	float CreatureInteractionFoVSplitSize;
	float CreatureInteractionHeadHeightSpring;
	float CreatureInteractionMaxDownhillPitchAroundPlayer;
	float CreatureInteractionMaxUphillPitchAroundPlayer;
	float CreatureInteractionMinDist;
	float CreatureInteractionPitchMax;
	float CreatureInteractionPitchMin;
	float CreatureInteractionPitchSplit;
	float CreatureInteractionPushCameraDownAmount;
	float CreatureInteractionPushCameraDownForCreatureBiggerThan;
	float CreatureInteractionUphillPitchTransfer;
	float CreatureInteractionYawMax;
	float CreatureInteractionYawMin;
	float CreatureSizeMax;
	float CreatureSizeMin;
	float DebugAICamAt;
	float DebugAICamUp;
	float DebugCameraFastFactor;
	float DebugCameraHeightForAccelerateBegin;
	float DebugCameraHeightForAccelerateEnd;
	float DebugCameraMaxSpeed;
	float DebugCameraSlowFactor;
	float DebugCameraSpaceFastFactor;
	float DebugCameraSpeedAtPlanetThreshold;
	float DebugMoveCamHeight;
	float DebugMoveCamSpeed;
	float DebugPlanetJumpFarHeight;
	float DebugPlanetJumpNearHeight;
	float DebugSpaceStationTeleportOffset;
	float DistanceForFleetInteraction;
	float DistanceForFrigateInteraction;
	float DistanceForFrigatePurchaseInteraction;
	float FirstPersonCamHeight;
	float FirstPersonFoV;
	float FirstPersonSlerpAway;
	float FirstPersonSlerpTowards;
	float FirstPersonZoom1FoV;
	float FirstPersonZoom2FoV;
	float FleetUIOrbitRate;
	float FleetUIVerticalMotionAmplitude;
	float FleetUIVerticalMotionDuration;
	float FlybyInVehicleDamper;
	float FlybyMinRange;
	float FlybyMinRelativeSpeed;
	float FlybyRange;
	float FlybyRelativeSpeedRange;
	float FocusBuildingModeMaxFOV;
	float FocusBuildingModeMinFOV;
	float FocusBuildingModeStartDistance;
	float FoVAdjust;
	float FoVSpring;
	float FoVSpringSights;
	float FoVSpringSightsPassive;
	float FrigateCaptainLateralShiftAmount;
	float FrontendModelCameraSpringTime;
	float HmdEyeExtraTurnAngle;
	float HmdEyeExtraTurnHeadAngleRange;
	float HmdEyeExtraTurnMinHeadAngle;
	float HmdEyeLookAngle;
	float IndoorCamShakeDamper;
	float InteractionHeadHeightCronus;
	float InteractionHeadHeightDefault;
	float InteractionHeadHeightGek;
	float InteractionHeadHeightSpiderman;
	float InteractionHeadHeightVykeen;
	float InteractionHeadPosHeightAdjust;
	float InteractionHeadPosHeightAdjustCronus;
	float InteractionHeadPosHeightAdjustSpiderman;
	float InteractionHeadPosHeightAdjustVykeen;
	float InteractionModeBlendTime;
	float InteractionModeFocusCamBlend;
	float InteractionModeFoV;
	float InteractionPitchAdjustDeadZone;
	float InteractionPitchAdjustStrength;
	float InteractionPitchAdjustTime;
	float LocalMissionBoardLateralShiftAmount;
	float MaxCreatureRidingYaw;
	float MaxFirstPersonCameraPitch;
	float MechCameraArmShootOffsetY;
	float MechCameraCombatFakeSpeed;
	float MechCameraExtraYPostLandingBlendTime;
	float MechCameraNoExtraYTimeAfterLand;
	float MechCamSpringStrengthMax;
	float MechCamSpringStrengthMin;
	float MeleeBoostedFoV;
	float MeleeFoV;
	float MinFirstPersonCameraPitch;
	float MinInteractFocusAngle;
	float MiniportalFlashStrength;
	float MiniportalFlashTime;
	float ModelViewDefaultPitch;
	float ModelViewDefaultYaw;
	float ModelViewDistSpeed;
	float ModelViewFlashTime;
	float ModelViewInterpTime;
	float ModelViewMaxDist;
	float ModelViewMinDist;
	float ModelViewMouseMoveSpeed;
	float ModelViewMouseRotateSnapStrength;
	float ModelViewMouseRotateSpeed;
	float ModelViewRotateSpeed;
	float MouseSensitivity;
	float NoControlCamShakeDamper;
	float NPCTradeLateralShiftAmount;
	float NPCTradeLateralShiftTime;
	float ObjectFocusTime;
	float OffsetCamFOV;
	float OffsetCombatCameraHorizontalAngle;
	float PainShakeTime;
	float PhotoModeCollisionRadius;
	float PhotoModeFlashDuration;
	float PhotoModeFlashIntensity;
	float PhotoModeMaxDistance;
	float PhotoModeMaxDistanceClampBuffer;
	float PhotoModeMaxDistanceClampForce;
	float PhotoModeMaxDistanceSpace;
	float PhotoModeMoveSpeed;
	float PhotoModeRollSpeed;
	float PhotoModeTurnSpeed;
	float PhotoModeVelocitySmoothTime;
	float PilotDetailsLateralShiftAmount;
	float RecruitmentLateralShiftAmount;
	float RevealedNPCHeadOffset;
	float RunningFoVAdjust;
	float ScanCameraLookAtTime;
	float SClassLandingShakeMultiplier;
	float ScreenshotBackDistance;
	float ScreenshotBendDownAmount;
	float ScreenshotHorizonFaceFactor;
	float ScreenshotHorizonHeight;
	float ScreenshotInTime;
	float ScreenshotOutTime;
	float ScreenshotRightDistance;
	float ShipBuilderFoV;
	float ShipCamAimFOV;
	float ShipCamLookInterp;
	float ShipCamMinReturnTime;
	float ShipCamMotionInterp;
	float ShipCamMotionMaxLagPitchAngle;
	float ShipCamMotionMaxLagTurnAngle;
	float ShipCamMotionPitch;
	float ShipCamMotionPitchMod;
	float ShipCamMotionTurn;
	float ShipCamPitch;
	float ShipCamPitchMod;
	float ShipCamReturnTime;
	float ShipCamRollAmountMax;
	float ShipCamRollAmountMin;
	float ShipCamRollSpeedScaler;
	float ShipCamSpringStrengthMax;
	float ShipCamSpringStrengthMin;
	float ShipCamTurn;
	float ShipFirstPersonBlendOffset;
	float ShipFirstPersonBlendTime;
	float ShipFoVBoost;
	float ShipFoVMax;
	float ShipFoVMax3rdPerson;
	float ShipFoVMin;
	float ShipFoVMin2;
	float ShipFoVMin3rdPerson;
	float ShipFoVMiniJump;
	float ShipFoVSpring;
	float ShipMiniJumpFoVSpring;
	float ShipShakeDamper;
	float ShipThirdPersonBlendOffset;
	float ShipThirdPersonBlendOutOffset;
	float ShipThirdPersonBlendOutTime;
	float ShipThirdPersonBlendTime;
	float ShipThirdPersonBlendWithOffsetTime;
	float ShipThirdPersonEnterBlendOffset;
	float ShipThirdPersonEnterBlendTime;
	float ShipWarpFoV;
	float SpecialVehicleMouseRecentreTime;
	float SpecialVehicleMouseRecentreWeaponTime;
	float ThirdPersonAfterIntroCamBlendTime;
	float ThirdPersonBlendInTime;
	float ThirdPersonBlendOutTime;
	float ThirdPersonCameraChangeBlendTime;
	float ThirdPersonCameraChangeMinimumBlend;
	float ThirdPersonCloseDistance;
	float ThirdPersonCloseDistanceX;
	float ThirdPersonClosePitch;
	float ThirdPersonCollisionPushOffsetReducerStart;
	float ThirdPersonCombatFoV;
	float ThirdPersonDownhillAdjustMaxAngle;
	float ThirdPersonDownhillAdjustMaxAnglePrime;
	float ThirdPersonDownhillAdjustMinAngle;
	float ThirdPersonDownhillAdjustMinAnglePrime;
	float ThirdPersonDownhillAdjustSpringTimeMax;
	float ThirdPersonDownhillAdjustSpringTimeMin;
	float ThirdPersonFoV;
	float ThirdPersonOffsetSpringTime;
	float ThirdPersonRotationBackAdjustAngleMax;
	float ThirdPersonRotationBackAdjustAngleMin;
	float ThirdPersonSkipIntroCamBlendTime;
	float ThirdPersonUphillAdjustCrossSlopeMaxAngle;
	float ThirdPersonUphillAdjustCrossSlopeMinAngle;
	float ThirdPersonUphillAdjustMaxAngle;
	float ThirdPersonUphillAdjustMaxAnglePrime;
	float ThirdPersonUphillAdjustMinAngle;
	float ThirdPersonUphillAdjustMinAnglePrime;
	float ThirdPersonUphillAdjustSpringTimeMax;
	float ThirdPersonUphillAdjustSpringTimeMin;
	float TogglePerspectiveBlendTime;
	float UnderwaterCameraExtraVertOffset;
	float VehicleExitFlashStrength;
	float VehicleExitFlashTime;
	float VehicleFirstPersonFoV;
	float VehicleFirstToThirdExitOffsetY;
	float VehicleFirstToThirdExitOffsetZ;
	float VehicleThirdPersonShootOffsetBlendOutTime;
	float VehicleThirdPersonShootOffsetReturnTime;
	float VRShakeMultiplier;
	NMS_Toolkit::TkCurveType AerialViewCurve;
	bool CreatureInteractionInterpolateDuringHold;
	bool DebugAICam;
	bool DebugMoveCam;
	bool FollowDrawCamProbes;
	bool LockFollowSpring;
	bool MaxBob;
	bool OffsetCombatCameraHorizontal;
	bool PauseThirdPersonCamInPause;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcUnlockableItemTreeGroups
{
	enum class UnlockableItemTreeEnum : uint32_t
	{
		Test = 0,
		BasicBaseParts = 1,
		BasicTechParts = 2,
		BaseParts = 3,
		SpecialBaseParts = 4,
		SuitTech = 5,
		ShipTech = 6,
		WeapTech = 7,
		ExocraftTech = 8,
		CraftProducts = 9,
		FreighterTech = 10,
		S9BaseParts = 11,
		S9ExoTech = 12,
		S9ShipTech = 13,
	};

	NMS_GameComponents::GcUnlockableItemTreeGroups::UnlockableItemTreeEnum UnlockableItemTree;
};

//Dependency: GcUnlockableItemTreeGroups
struct GcRewardOpenUnlockTree
{
	int32_t PageIndexOverride;
	NMS_GameComponents::GcUnlockableItemTreeGroups TreeToOpen;
};

struct GcDoShipFlybyMineAsteroids
{
	float Time;
};

struct GcNetworkPlayerMarkerComponentData
{
};

struct GcDoShipFlybyOverhead
{
	float Length;
	float Offset;
};

struct GcDoShipLandNextToPlayer
{
	float Length;
	float Offset;
};

struct GcDoShipReceiveHail
{
};

struct GcShipMessage
{
	enum class MessageTypeEnum : uint32_t
	{
		Leave = 0,
		Fight = 1,
	};

	NMS_GameComponents::GcShipMessage::MessageTypeEnum MessageType;
};

//Dependency: GcShipMessage
struct GcDoShipReceiveMessage
{
	NMS_GameComponents::GcShipMessage ShipMessage;
};

//Dependency: VariableSizeString
struct GcSentinelResource
{
	NMS::VariableSizeString Resource;
	int32_t BaseHealth;
	int32_t HealthIncreasePerLevel;
	float RepairThreshold;
	float RepairTime;
	float Scale;
};

//Dependency: GcSentinelResource
//Dependency: GcDroneControlData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: NMSString0x10
struct GcDroneData
{
	NMS::Colour EyeColourAlert;
	NMS::Colour EyeColourPatrol;
	NMS::Colour EyeColourSearch;
	NMS_GameComponents::GcSentinelResource CoverResource;
	NMS::NMSString0x10 DamageEffect;
	NMS::NMSString0x10 MeleeAttackDamageType;
	NMS::NMSString0x10 SpinAttackDamageType;
	NMS_GameComponents::GcDroneControlData Attack;
	NMS_GameComponents::GcDroneControlData Friendly;
	NMS_GameComponents::GcDroneControlData FriendlyFast;
	NMS_GameComponents::GcDroneControlData MeleeAttack;
	NMS_GameComponents::GcDroneControlData Patrol;
	NMS_GameComponents::GcDroneControlData Repair;
	NMS_GameComponents::GcDroneControlData Scan;
	NMS_GameComponents::GcDroneControlData Search;
	NMS_GameComponents::GcDroneControlData Stun;
	NMS_GameComponents::GcDroneControlData Summon;
	NMS_GameComponents::GcDroneControlData ToCover;
	float AttackActivateTime;
	float AttackAlertFailTime;
	float AttackAngle;
	float AttackBobAmount;
	float AttackBobRotation;
	float AttackMaxDistanceFromAlert;
	float AttackMinSpeed;
	float AttackMoveAngle;
	float AttackMoveLookDistanceMin;
	float AttackMoveLookDistanceRange;
	float AttackMoveMinChoiceTime;
	float BaseAnimationSpeed;
	float CollisionAvoidOffset;
	float CoverPlacementActivateTime;
	float CoverPlacementActivateTimeMaxRandomExtra;
	float CoverPlacementCooldownTime;
	int32_t CoverPlacementMaxActiveCover;
	float CoverPlacementMaxDistanceFromSelf;
	float CoverPlacementMinDistanceFromSelf;
	float CoverPlacementMinDistanceFromTarget;
	float CoverPlacementUpOffset;
	float DamageEffectHealthPercentThreshold;
	float DroneAlertTime;
	float DronePatrolDistanceMax;
	float DronePatrolDistanceMin;
	int32_t DronePatrolHonkProbability;
	float DronePatrolHonkRadius;
	float DronePatrolHonkTime;
	float DronePatrolInspectDistanceMax;
	float DronePatrolInspectDistanceMin;
	float DronePatrolInspectRadius;
	float DronePatrolInspectSwitchTime;
	float DronePatrolInspectTargetTime;
	float DronePatrolRepelDistance;
	float DronePatrolRepelStrength;
	float DronePatrolTargetDistance;
	float DroneScanPlayerTime;
	float DroneSearchCriminalScanRadius;
	float DroneSearchCriminalScanRadiusInShip;
	float DroneSearchCriminalScanRadiusWanted;
	float DroneSearchPauseTime;
	float DroneSearchRadius;
	float DroneSearchTime;
	float EngineDirAngleMax;
	float EngineDirSpeedMin;
	float EyeAngleMax;
	float EyeFocusTime;
	int32_t EyeNumRandomsMax;
	int32_t EyeNumRandomsMin;
	float EyeOffset;
	float EyeTimeMax;
	float EyeTimeMin;
	float HideBehindCoverHealthPercentThreshold;
	float HideBehindCoverSearchRadius;
	float LeanAmount;
	float LeanSpeedMin;
	float LeanSpeedRange;
	float MeleeAttackDamageRadius;
	float MeleeAttackHomingStrength;
	float MeleeAttackMaxTime;
	float MeleeAttackWindUpTime;
	float SpinAttackCooldown;
	float SpinAttackDamageRadius;
	float SpinAttackDuration;
	float SpinAttackHomingStrength;
	float SpinAttackRange;
	float SpinAttackRevolutions;
	bool EnableCoverPlacement;
	NMS_Toolkit::TkCurveType SpinAttackRevolutionCurve;
};

//Dependency: GcDroneData
//Dependency: NMSString0x10
struct GcDroneDataWithId
{
	NMS_GameComponents::GcDroneData Data;
	NMS::NMSString0x10 Id;
};

struct GcMissionConditionBasePowerGenerated
{
	int32_t Amount;
	bool MustBeSpare;
	bool TakeAmountFromSeasonData;
};

//Dependency: VariableSizeString
struct GcDroneResource
{
	NMS::VariableSizeString Resource;
};

//Dependency: NMSString0x10
struct GcUnlockablePlatformReward
{
	NMS::NMSString0x10 ProductId;
	NMS::NMSString0x10 RewardId;
};

//Dependency: GcUnlockablePlatformReward
struct GcUnlockablePlatformRewards
{
	std::vector<NMS_GameComponents::GcUnlockablePlatformReward> Table;
};

struct GcDroneTypes
{
	enum class DroneTypeEnum : uint32_t
	{
		Patrol = 0,
		Combat = 1,
		Corrupted = 2,
	};

	NMS_GameComponents::GcDroneTypes::DroneTypeEnum DroneType;
};

//Dependency: Vector4f
struct GcPhotoModeSettings
{
	enum class DepthOfFieldSettingEnum : uint32_t
	{
		Off = 0,
		Mid = 1,
		On = 2,
		Macro = 3,
	};

	NMS::Vector4f SunDir;
	float Bloom;
	float CloudAmount;
	float DepthOfFieldDistance;
	float DepthOfFieldDistanceSpace;
	float DepthOfFieldPhysAperture;
	float DepthOfFieldPhysConvergence;
	NMS_GameComponents::GcPhotoModeSettings::DepthOfFieldSettingEnum DepthOfFieldSetting;
	int32_t Filter;
	float Fog;
	float FoV;
	float HalfFocalPlaneDepth;
	float HalfFocalPlaneDepthSpace;
	float Vignette;
};

//Dependency: GcMissionSequenceDetailMessagePoint
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceDetailMessage
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Image;
	NMS::NMSString0x20A Title;
	NMS::VariableSizeString DebugText;
	std::vector<NMS_GameComponents::GcMissionSequenceDetailMessagePoint> Points;
	NMS::NMSString0x10 TakeImageFromItemIcon;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool TakeDataFromSeason;
};

//Dependency: GcInventoryLayout
//Dependency: NMSString0x10
struct GcSeasonTransferInventoryConfig
{
	NMS_GameComponents::GcInventoryLayout Layout;
	std::vector<NMS::NMSString0x10> SlotItemFilterIDs;
	int32_t Width;
};

//Dependency: GcBiomeType
//Dependency: NMSString0x10
struct GcSeasonPetConstraints
{
	NMS::NMSString0x10 CreatureId;
	uint64_t TimeSinceBirth;
	uint64_t TimeSinceLastEgg;
	NMS_GameComponents::GcBiomeType Biome;
	float MaxRelativeScale;
	float MinRelativeScale;
	float StartingTrust;
	bool SpecificBiome;
};

struct GcSandwormTimerAndFrequencyOverride
{
	uint64_t PackedUA;
	float SpawnChance;
	float Timer;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSeasonalMilestoneEncryption
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Subtitle;
	NMS::NMSString0x20A TitleUpper;
	NMS_Toolkit::TkTextureResource HoverPopupIcon;
	NMS_Toolkit::TkTextureResource Patch;
	NMS::NMSString0x10 DecryptMissionId;
	int32_t DecryptMissionSeed;
	bool IsEncrypted;
};

//Dependency: GcSeasonalMilestoneEncryption
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x200
struct GcSeasonalMilestone
{
	NMS_GameComponents::GcSeasonalMilestoneEncryption Encryption;
	NMS::NMSString0x20A CantRewardMessage;
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A DescriptionDone;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x20A TitleUpper;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource IconGrey;
	NMS_Toolkit::TkTextureResource MissionIcon;
	NMS_Toolkit::TkTextureResource MissionIconNotSelected;
	NMS_Toolkit::TkTextureResource MissionIconSelected;
	NMS::NMSString0x10 IdToUseInMissionData;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 RewardSwitchAlt;
	float Amount;
	int32_t BlockRendezvousMilestoneSeed;
	int32_t MilestoneIndex;
	int32_t RendezvousIndex;
	int32_t StageIndex;
	NMS::NMSString0x200 CantClaimRewardDescription;
	NMS::NMSString0x200 RewardDescription;
	bool DontAttemptFallbackTextSubs;
	bool GreyIfCantStart;
	bool IsOptional;
	bool IsRendezvous;
	bool IsStageControl;
};

//Dependency: GcSeasonalMilestone
//Dependency: NMSString0x20A
struct GcSeasonalStage
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Title;
	std::vector<NMS_GameComponents::GcSeasonalMilestone> Milestones;
};

//Dependency: NMSString0x10
struct GcPersistedStatData
{
	NMS::NMSString0x10 GroupId;
	NMS::NMSString0x10 StatId;
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcLegality
//Dependency: TkTextureResource
//Dependency: GcTradeCategory
//Dependency: GcScannerIconTypes
//Dependency: GcRarity
//Dependency: TkModelResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcRealitySubstanceData
{
	NMS::Colour Colour;
	NMS::Colour WorldColour;
	NMS_Toolkit::TkModelResource DebrisFile;
	NMS::NMSString0x20A PinObjective;
	NMS::NMSString0x20A PinObjectiveMessage;
	NMS::NMSString0x20A PinObjectiveTip;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 ID;
	NMS::VariableSizeString Subtitle;
	NMS::NMSString0x10 WikiMissionID;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	int32_t BaseValue;
	NMS_GameComponents::GcRealitySubstanceCategory Category;
	int32_t ChargeValue;
	float EconomyInfluenceMultiplier;
	NMS_GameComponents::GcLegality Legality;
	float NormalisedValueOffWorld;
	float NormalisedValueOnWorld;
	NMS_GameComponents::GcScannerIconTypes PinObjectiveScannableType;
	NMS_GameComponents::GcRarity Rarity;
	int32_t StackMultiplier;
	NMS_GameComponents::GcTradeCategory TradeCategory;
	NMS::NMSString0x20 Name;
	NMS::NMSString0x20 NameLower;
	NMS::NMSString0x20 Symbol;
	bool CookingIngredient;
	bool EasyToRefine;
	bool EggModifierIngredient;
	bool GoodForSelling;
	bool OnlyFoundInPurpleSytems;
	bool WikiEnabled;
};

struct GcTechnologyRarity
{
	enum class TechnologyRarityEnum : uint32_t
	{
		Normal = 0,
		VeryCommon = 1,
		Common = 2,
		Rare = 3,
		VeryRare = 4,
		Impossible = 5,
		Always = 6,
	};

	NMS_GameComponents::GcTechnologyRarity::TechnologyRarityEnum TechnologyRarity;
};

//Dependency: GcTechnologyRequirement
//Dependency: GcStatsBonus
//Dependency: GcRealitySubstanceCategory
//Dependency: GcTechnologyCategory
//Dependency: GcItemPriceModifiers
//Dependency: GcAlienRace
//Dependency: GcStatsTypes
//Dependency: GcTechnologyRarity
//Dependency: TkTextureResource
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcTechnology
{
	NMS::Colour Colour;
	NMS::Colour LinkColour;
	NMS::Colour UpgradeColour;
	NMS::NMSString0x20A FocusLocator;
	NMS::NMSString0x20A Group;
	NMS::NMSString0x20A HintEnd;
	NMS::NMSString0x20A HintStart;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 AmmoId;
	std::vector<NMS::NMSString0x10> ChargeBy;
	NMS::VariableSizeString DamagedDescription;
	NMS::VariableSizeString Description;
	NMS::NMSString0x10 ID;
	NMS::NMSString0x10 ParentTechId;
	NMS::NMSString0x10 RequiredTech;
	std::vector<NMS_GameComponents::GcTechnologyRequirement> Requirements;
	NMS::NMSString0x10 RewardGroup;
	std::vector<NMS_GameComponents::GcStatsBonus> StatBonuses;
	NMS::VariableSizeString Subtitle;
	NMS_GameComponents::GcItemPriceModifiers Cost;
	NMS_GameComponents::GcStatsTypes BaseStat;
	int32_t BaseValue;
	NMS_GameComponents::GcTechnologyCategory Category;
	int32_t ChargeAmount;
	float ChargeMultiplier;
	NMS_GameComponents::GcRealitySubstanceCategory ChargeType;
	NMS_GameComponents::GcAlienRace DispensingRace;
	int32_t FragmentCost;
	int32_t Level;
	NMS_GameComponents::GcTechnologyRarity Rarity;
	int32_t RequiredLevel;
	int32_t RequiredRank;
	NMS_GameComponents::GcTechnologyRarity TechShopRarity;
	float Value;
	NMS::NMSString0x80 Name;
	NMS::NMSString0x80 NameLower;
	bool BrokenSlotTech;
	bool BuildFullyCharged;
	bool Chargeable;
	bool Core;
	bool ExclusivePrimaryStat;
	bool IsTemplate;
	bool NeverPinnable;
	bool PrimaryItem;
	bool Procedural;
	bool RepairTech;
	bool Teach;
	bool Upgrade;
	bool UsesAmmo;
	bool WikiEnabled;
};

//Dependency: GcInventoryContainer
//Dependency: GcPetData
//Dependency: GcInventoryLayout
//Dependency: GcTradeData
//Dependency: GcSpaceshipClasses
//Dependency: GcProductData
//Dependency: GcMissionSequenceDetailMessage
//Dependency: GcScanEventTable
//Dependency: NMSString0x200
//Dependency: GcSeasonTransferInventoryConfig
//Dependency: GcSeasonPetConstraints
//Dependency: GcSandwormTimerAndFrequencyOverride
//Dependency: GcSeasonalStage
//Dependency: GcDifficultySettingsData
//Dependency: GcPersistedStatData
//Dependency: GcRealitySubstanceData
//Dependency: GcTechnology
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcBuildingClassification
//Dependency: GcDifficultyPresetType
//Dependency: GcAlienRace
//Dependency: GcGameMode
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: NMSString0x20
struct GcSeasonalGameModeData
{
	NMS_GameComponents::GcPetData SpecificPets[18];
	NMS_GameComponents::GcInventoryContainer Inventory;
	NMS_GameComponents::GcInventoryContainer Inventory_Cargo;
	NMS_GameComponents::GcInventoryContainer Inventory_TechOnly;
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS_GameComponents::GcTradeData SeasonalUAStationTradeData;
	NMS_GameComponents::GcMissionSequenceDetailMessage InitialJoaoBox;
	NMS_GameComponents::GcMissionSequenceDetailMessage InitialJoaoBoxNoMainSave;
	NMS_GameComponents::GcSeasonTransferInventoryConfig SeasonTransferInventoryConfig;
	NMS::NMSString0x20A CommunityProgressTitle;
	NMS::NMSString0x20A CommunityTierCompleteLabel;
	NMS::NMSString0x20A CommunityTierLabel;
	NMS::NMSString0x20A CommunityTierProgressLabel;
	NMS::NMSString0x20A FinalCantRewardMessage;
	NMS::NMSString0x20A FinalStageTitle;
	NMS::NMSString0x20A MainMissionMessage;
	NMS::NMSString0x20A MainMissionTitle;
	NMS::NMSString0x20A MilestoneWithStageLocId;
	NMS::NMSString0x20A SeasonName;
	NMS::NMSString0x20A SeasonNameUpper;
	NMS_Toolkit::TkTextureResource MainIcon;
	NMS_GameComponents::GcInventoryLayout ShipInventoryLayout;
	NMS_GameComponents::GcInventoryLayout ShipTechInventoryLayout;
	NMS_GameComponents::GcInventoryLayout WeaponInventoryLayout;
	std::vector<NMS::NMSString0x10> AdditionalTradeProducts;
	NMS::NMSString0x10 CreateContextSaveDataMask;
	NMS::NMSString0x10 FinalReward;
	NMS::NMSString0x10 FinalRewardSwitchAlt;
	std::vector<NMS::NMSString0x10> ForgottenProducts;
	NMS::VariableSizeString FreighterBaseOverrideFilename;
	NMS::NMSString0x10 IntroSequencePOI;
	std::vector<NMS::NMSString0x10> NeverLearnableTech;
	std::vector<NMS::NMSString0x10> NeverTradeProducts;
	NMS::VariableSizeString OverrideMTFilename;
	std::vector<NMS_GameComponents::GcProductData> ProductTable;
	std::vector<NMS_GameComponents::GcSeasonPetConstraints> RandomPetConstraints;
	std::vector<NMS_GameComponents::GcSandwormTimerAndFrequencyOverride> SandwormOverrides;
	NMS_GameComponents::GcScanEventTable ScanEventTable;
	NMS::GcSeed ShipSeed;
	std::vector<NMS_GameComponents::GcSeasonalStage> Stages;
	NMS::NMSString0x10 StartPlanetRareSubstanceOverride;
	std::vector<NMS_GameComponents::GcPersistedStatData> StatsToPersistOnReset;
	std::vector<NMS_GameComponents::GcRealitySubstanceData> SubstanceTable;
	NMS::NMSString0x10 SwitchContextSaveDataMask;
	std::vector<NMS_GameComponents::GcTechnology> TechnologyTable;
	std::vector<NMS_GameComponents::GcBuildingClassification> ValidSpawnBuildings;
	NMS::GcSeed WeaponSeed;
	uint64_t EndTimeUTC;
	uint64_t Hash;
	uint64_t StartTimeUTC;
	uint64_t UAOverrideValue;
	NMS_GameComponents::GcDifficultySettingsData DifficultyMinimums;
	float AbandonedFreighterHazardProtectionMul;
	float BuildingRadiusShipOffsetMultiplier;
	NMS_GameComponents::GcDifficultyPresetType DifficultySettingPreset;
	int32_t DisplayNumber;
	float DistanceFromShipAtStartOfGame;
	float EnergyDrainMultiplier;
	float FarmPlantsTimerMul;
	int32_t FreighterBattleEarlyWarpsOverride;
	NMS_GameComponents::GcAlienRace FreighterRace;
	NMS_GameComponents::GcGameMode GameMode;
	float HazardProtectionDrainMultiplier;
	int32_t QuestSubstanceReducer;
	int32_t RemixNumber;
	float SandwormGlobalOverrideSpawnChance;
	float SandwormGlobalOverrideTimer;
	int32_t SeasonId;
	int32_t SeasonNumber;
	NMS_GameComponents::GcAudioWwiseEvents SeasonStartMusicOverride;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	int32_t StartingPetSlots;
	int32_t StartingSuitCargoSlots;
	int32_t StartingSuitSlots;
	int32_t StartingSuitTechSlots;
	int32_t TechCostMultiplier;
	NMS::NMSString0x200 FinalRewardDescription;
	NMS::NMSString0x20 Description;
	NMS::NMSString0x20 SeasonalUAOverride;
	NMS::NMSString0x20 Subtitle;
	NMS::NMSString0x20 Summary;
	NMS::NMSString0x20 Title;
	bool AllowMissionDetailMessages;
	bool AlwaysStormy;
	bool AlwaysUseSeasonalStationTradeData;
	bool BlockAggressiveSentinelsInStartSystem;
	bool BlockExtremeWeatherInStartSystem;
	bool BlockFirstSpaceMusic;
	bool BlockStormsAtStart;
	bool CarnageMode;
	bool CompatibleWithState;
	bool DefaultToPvPOff;
	bool DoCommunityMissionTextSubstitutions;
	bool ForceAllSystemsAbandoned;
	bool ForceDeepSpaceAmbientFrigatesOnInfested;
	bool ForceStartSystemAbandoned;
	bool ForceStartSystemTernary;
	bool HasBeenConverted;
	bool IncreaseXClassTechOddsWithCommTier;
	bool MustCraftInBases;
	bool PlayStartMusicInIntro;
	bool PurpleSystemsUnlocked;
	bool ResetSaveOnDeath;
	bool SandwormGlobalOverride;
	bool ShipIsAtDifferentBuildingToPlayer;
	bool ShipStartsDamaged;
	bool StartAboardFreighter;
	bool StartNextToShip;
	bool StartWithFreighter;
	bool TrashInventoryOnGalaxyTravel;
	bool UseDefaultAppearance;
	bool UseRandomPet;
	bool UseSeasonalUAStationTradeData;
	bool UseSpookHazardOnly;
	bool UseStartPlanetObjectListOverrides;
};

//Dependency: GcProtectedLocation
struct GcUAProtectedLocations
{
	std::vector<NMS_GameComponents::GcProtectedLocation> ProtectedLocations;
	uint64_t UA;
};

struct GcSeasonEndRewardsRedemptionState
{
	enum class SeasonEndRewardsRedemptionStateEnum : uint32_t
	{
		None = 0,
		Available = 1,
		PendingRedemption = 2,
		Redeemed = 3,
	};

	NMS_GameComponents::GcSeasonEndRewardsRedemptionState::SeasonEndRewardsRedemptionStateEnum SeasonEndRewardsRedemptionState;
};

struct GcSeasonSaveStateOnDeath
{
	enum class SeasonSaveStateOnDeathEnum : uint32_t
	{
		Standard = 0,
		ResetAndQuit = 1,
		ResetPosSaveAndQuit = 2,
		SaveAndQuit = 3,
	};

	NMS_GameComponents::GcSeasonSaveStateOnDeath::SeasonSaveStateOnDeathEnum SeasonSaveStateOnDeath;
};

//Dependency: GcInventoryContainer
//Dependency: GcUAProtectedLocations
//Dependency: GcPlayerMissionParticipant
//Dependency: GcSeasonEndRewardsRedemptionState
//Dependency: GcSeasonSaveStateOnDeath
struct GcSeasonStateData
{
	NMS_GameComponents::GcInventoryContainer SeasonTransferInventory;
	std::vector<float> MilestoneValues;
	std::vector<NMS_GameComponents::GcUAProtectedLocations> ProtectedEvents;
	std::vector<NMS_GameComponents::GcPlayerMissionParticipant> RendezvousParticipants;
	std::vector<uint64_t> RendezvousUAs;
	std::vector<int16_t> RewardCollected;
	NMS_GameComponents::GcSeasonEndRewardsRedemptionState EndRewardsRedemptionState;
	int32_t PinnedMilestone;
	int32_t PinnedStage;
	NMS_GameComponents::GcSeasonSaveStateOnDeath StateOnDeath;
	bool HasCollectedFinalReward;
};

//Dependency: GcSeasonTransferInventoryData
//Dependency: GcPhotoModeSettings
//Dependency: NMSString0x20
//Dependency: GcDiscoveryOwner
//Dependency: GcSeasonalGameModeData
//Dependency: GcByteBeatLibraryData
//Dependency: GcSeasonStateData
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcPlayerCommonStateData
{
	NMS_GameComponents::GcPhotoModeSettings PhotoModeSettings;
	NMS_GameComponents::GcSeasonalGameModeData SeasonData;
	NMS_GameComponents::GcByteBeatLibraryData ByteBeatLibrary;
	NMS_GameComponents::GcSeasonStateData SeasonState;
	NMS_GameComponents::GcSeasonTransferInventoryData SeasonTransferInventoryData;
	std::vector<NMS::NMSString0x10> EarnedSeasonSpecialRewards;
	std::vector<NMS_GameComponents::GcDiscoveryOwner> UsedDiscoveryOwnersV2;
	std::vector<NMS::NMSString0x20> UsedPlatforms;
	uint64_t SaveUniversalId;
	uint64_t TotalPlayTime;
	NMS::NMSString0x80 SaveName;
	bool UsesThirdPersonCharacterCam;
	bool UsesThirdPersonShipCam;
	bool UsesThirdPersonVehicleCam;
};

//Dependency: NMSString0x20A
struct GcRewardWantedLevel
{
	NMS::NMSString0x20A Message;
	int32_t Level;
};

struct GcRewardSetAtlasMissionActive
{
};

//Dependency: GcEcosystemCreatureData
struct GcEcosystemSpawnData
{
	std::vector<NMS_GameComponents::GcEcosystemCreatureData> Creatures;
	float CreatureMaxNoise;
	float CreatureMinNoise;
};

struct GcEncounterStateComponentData
{
};

//Dependency: GcInventoryType
//Dependency: NMSString0x20A
struct GcItemFilterStageDataIsType
{
	NMS::NMSString0x20A DisabledMessage;
	NMS_GameComponents::GcInventoryType Type;
};

struct GcMissionConditionSettlementBuildingsAllStarted
{
};

//Dependency: VariableSizeString
struct GcFontData
{
	NMS::VariableSizeString File;
	int32_t MinCharWidth;
};

//Dependency: GcDiscoveryType
struct GcEncyclopediaComponentData
{
	NMS_GameComponents::GcDiscoveryType Type;
};

struct GcEngineComponentData
{
	int32_t Type;
};

//Dependency: GcCreatureSpawnData
//Dependency: GcObjectSpawnData
//Dependency: GcSelectableObjectSpawnList
struct GcEnvironmentSpawnData
{
	std::vector<NMS_GameComponents::GcCreatureSpawnData> Creatures;
	std::vector<NMS_GameComponents::GcObjectSpawnData> DetailObjects;
	std::vector<NMS_GameComponents::GcObjectSpawnData> DistantObjects;
	std::vector<NMS_GameComponents::GcObjectSpawnData> Landmarks;
	std::vector<NMS_GameComponents::GcObjectSpawnData> Objects;
	std::vector<NMS_GameComponents::GcSelectableObjectSpawnList> SelectableObjects;
};

struct GcPlayerSpaceshipEngineData
{
	float BalanceTimeMax;
	float BalanceTimeMin;
	float BoostFalloff;
	float BoostingTurnDamp;
	float BoostMaxSpeed;
	float BoostThrustForce;
	float DirectionBrake;
	float DirectionBrakeMin;
	float Falloff;
	float FollowDerivativeGain;
	float FollowDerivativeLimit;
	float FollowIntegralDecay;
	float FollowIntegralGain;
	float FollowIntegralLimit;
	float FollowProportionalGain;
	float FollowProportionalLimit;
	float LowSpeedTurnDamper;
	float MaxSpeed;
	float MinSpeed;
	float MinSpeedForce;
	float OverspeedBrake;
	float ReverseBrake;
	float RollAmount;
	float RollAutoTime;
	float RollForce;
	float ThrustForce;
	float TurnBrakeMax;
	float TurnBrakeMin;
	float TurnStrength;
};

//Dependency: GcPlayerSpaceshipEngineData
//Dependency: TkCurveType
struct GcPlayerSpaceshipControlData
{
	NMS_GameComponents::GcPlayerSpaceshipEngineData AtmosCombatEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData CombatEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData PlanetEngine;
	NMS_GameComponents::GcPlayerSpaceshipEngineData SpaceEngine;
	float AngularFactor;
	float ExitAngleMax;
	float ExitAngleMin;
	float ExitHeightFactorMax;
	float ExitHeightFactorMin;
	float ExitHeightFactorPlungeMax;
	float ExitHeightFactorPlungeMin;
	float ExitLeaveAngle;
	float MaxTorque;
	float ShipMinHeightForce;
	float ShipPlanetBrakeAlignMaxTime;
	float ShipPlanetBrakeAlignMinTime;
	float ShipPlanetBrakeForce;
	float ShipPlanetBrakeMaxHeight;
	float ShipPlanetBrakeMaxSpeed;
	float ShipPlanetBrakeMinHeight;
	float ShipPlanetBrakeMinSpeed;
	NMS_Toolkit::TkCurveType ExitCurve;
	NMS_Toolkit::TkCurveType ExitDownCurve;
};

//Dependency: GcMechWeaponLocation
//Dependency: NMSString0x10
struct GcExoMechWeaponData
{
	NMS::NMSString0x10 MuzzleFlashDataID[5];
	std::vector<NMS_GameComponents::GcMechWeaponLocation> LocationPriority;
	float AngleToleranceForArmAiming;
	float AttackAngle;
	float CooldownTimeMax;
	float CooldownTimeMin;
	float MaintainFireLocationMinTime;
	float MaxRange;
	float MinRange;
	float SelectionWeight;
};

struct GcRewardTriggerSettlementJudgement
{
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcFrigateFlybyType
//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnFrigateFlyby
{
	NMS_GameComponents::GcPlayerCommunicatorMessage CommunicatorMessage;
	NMS::NMSString0x20A CommunicatorOSDLocId;
	NMS_GameComponents::GcFrigateFlybyType FlybyType;
	float RangeOverride;
};

struct GcPlanetSectionData
{
	uint64_t DiscovererUID;
	uint8_t DiscovererPlatform[2];
	bool DiscoveredState;
};

//Dependency: GcPlanetSectionData
struct GcPlanetaryMappingData
{
	std::vector<NMS_GameComponents::GcPlanetSectionData> SectionsData;
	uint64_t UA;
};

struct GcMissionConditionDiscoveryPendingUpload
{
};

//Dependency: GcNumberedTextList
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcExpeditionEventData
{
	NMS::NMSString0x20A ID;
	NMS_GameComponents::GcNumberedTextList DamageDescriptionList;
	NMS_GameComponents::GcNumberedTextList FailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericFailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericFailureWhaleDescriptionList;
	NMS_GameComponents::GcNumberedTextList GenericSuccessDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryDamageDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryDescriptionList;
	NMS_GameComponents::GcNumberedTextList SecondaryFailureDescriptionList;
	NMS_GameComponents::GcNumberedTextList SuccessDescriptionList;
	NMS_GameComponents::GcNumberedTextList SuccessWhaleDescriptionList;
	NMS::NMSString0x10 EasySuccessReward;
	NMS::NMSString0x10 FailureReward;
	NMS::NMSString0x10 SuccessReward;
	NMS::NMSString0x10 WhaleReward;
	float StatContribution[5];
	int32_t AdditionalShipDifficultyIncrease;
	int32_t DifficultyModifier;
	int32_t DifficultyVarianceModifier;
};

//Dependency: GcExpeditionEventData
//Dependency: GcExpeditionInterventionEventData
struct GcExpeditionEventTable
{
	std::vector<NMS_GameComponents::GcExpeditionEventData> Events;
	std::vector<NMS_GameComponents::GcExpeditionInterventionEventData> InterventionEvents;
};

//Dependency: NMSString0x10
struct GcMissionConsequenceBroadcastMessage
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastToActiveMultiplayerMission;
	bool CanSendToInactive;
	bool Multiplayer;
	bool Seeded;
	bool SendToAllMatchingSeeds;
};

//Dependency: NMSString0x10
//Dependency: Vector2f
struct GcPlayerExperienceAsteroidCreatureSpawnData
{
	NMS::NMSString0x10 ID;
	NMS::Vector2f LargeMinMax;
	NMS::Vector2f MediumMinMax;
	NMS::Vector2f SmallMinMax;
	float Weight;
};

//Dependency: GcPlayerExperienceAsteroidCreatureSpawnData
struct GcPlayerExperienceAsteroidCreatureSpawnTable
{
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> LargeAsteroidSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> MediumAsteroidSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnData> SmallAsteroidSpawns;
	float LargeAsteroidSpawnPercent;
	float MediumAsteroidSpawnPercent;
	float SmallAsteroidSpawnPercent;
};

//Dependency: NMSString0x10
struct GcSentinelWaveGroup
{
	std::vector<NMS::NMSString0x10> ExtremeWaves;
	std::vector<NMS::NMSString0x10> Waves;
};

struct GcRealityGameIcons
{
	enum class GameIconsEnum : uint32_t
	{
		Stamina = 0,
		NoStamina = 1,
		EnergyCharge = 2,
		Scanner = 3,
		NoScanner = 4,
		Grave = 5,
		Resources = 6,
		Inventory = 7,
		InventoryFull = 8,
		RareItems = 9,
		Pirates = 10,
		PirateScan = 11,
		Drone = 12,
		Quad = 13,
		Mech = 14,
		Walker = 15,
		Spider = 16,
		DroneOff = 17,
		Police = 18,
		PoliceFreighter = 19,
		AtlasStation = 20,
		BlackHole = 21,
		SaveGame = 22,
		SaveInventory = 23,
		Jetpack = 24,
		JetpackEmpty = 25,
		VehicleBoost = 26,
		VehicleBoostRecharge = 27,
		Fuel = 28,
		FuelEmpty = 29,
		GekStanding = 30,
		VykeenStanding = 31,
		KorvaxStanding = 32,
		GekDiamondStanding = 33,
		VykeenDiamondStanding = 34,
		KorvaxDiamondStanding = 35,
		TradeGuildStanding = 36,
		WarGuildStanding = 37,
		ExplorationGuildStanding = 38,
		TradeGuildDiamondStanding = 39,
		WarGuildDiamondStanding = 40,
		ExplorationGuildDiamondStanding = 41,
		GMPathToCentre = 42,
		GMAtlas = 43,
		GMBlackHole = 44,
		GMUserWaypoint = 45,
		GMUserMission = 46,
		GMSeasonal = 47,
		TransferPersonal = 48,
		TransferPersonalCargo = 49,
		TransferShip = 50,
		TransferBike = 51,
		TransferBuggy = 52,
		TransferTruck = 53,
		TransferWheeledBike = 54,
		TransferHovercraft = 55,
		TransferSubmarine = 56,
		TransferMech = 57,
		TransferFreighter = 58,
		TransferBase = 59,
		TransferCooker = 60,
		TransferSkiff = 61,
		HazardIndicatorHot = 62,
		HazardIndicatorCold = 63,
		HazardIndicatorRadiation = 64,
		HazardIndicatorToxic = 65,
		TerrainAdd = 66,
		TerrainRemove = 67,
		TerrainFlatten = 68,
		TerrainUndo = 69,
		SpacePhone = 70,
		GarageMarkerBuggy = 71,
		GarageMarkerBike = 72,
		GarageMarkerTruck = 73,
		GarageMarkerWheeledBike = 74,
		GarageMarkerHovercraft = 75,
		CorruptedDrone = 76,
		AncientGuardian = 77,
		HandHold = 78,
		ShipThumbnailBG = 79,
		CClass = 80,
		BClass = 81,
		AClass = 82,
		SClass = 83,
		NoSaveWarning = 84,
		ExploreMissionPlanetIcon = 85,
		ExploreMissionSystemIcon = 86,
		PetThumbnailBG = 87,
		SettlementOSD = 88,
		SettlementUpgradeOSD = 89,
		Stealth = 90,
		StealthEmpty = 91,
		DefenceForce = 92,
		SummonSquadron = 93,
		CookShop = 94,
		HazardIndicatorSpook = 95,
		BioShip = 96,
		CargoShip = 97,
		ExoticShip = 98,
		FighterShip = 99,
		ScienceShip = 100,
		SentinelShip = 101,
		ShuttleShip = 102,
		SailShip = 103,
		PistolWeapon = 104,
		RifleWeapon = 105,
		PristineWeapon = 106,
		AlienWeapon = 107,
		RoyalWeapon = 108,
		RobotWeapon = 109,
		AtlasWeapon = 110,
		StaffWeapon = 111,
	};

	NMS_GameComponents::GcRealityGameIcons::GameIconsEnum GameIcons;
};

//Dependency: GcRealityGameIcons
//Dependency: GcEncounterType
//Dependency: GcAudioWwiseEvents
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSentinelEncounterOverride
{
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A OSDOnDefeat;
	NMS::NMSString0x20A OSDOnWaveStart;
	NMS::NMSString0x10 ExtremeSpawnID;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 SpawnID;
	NMS::NMSString0x10 StatusMessage;
	NMS_GameComponents::GcRealityGameIcons CustomOSDIcon;
	NMS_GameComponents::GcEncounterType EncounterTypeOverride;
	NMS_GameComponents::GcAudioWwiseEvents OSDOnWaveStartAudio;
	float SummonRadius;
	bool EncounterBlocksWantedSpawns;
	bool EncounterClearsWantedOnDefeat;
	bool IgnoreBuildingCrimesOnDefeat;
	bool SpawnsAreAggressive;
	bool UseCustomOSDIcon;
	bool UseEncounterTypeOverride;
};

//Dependency: GcCreatureTypes
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnArchetypeData
{
	NMS::NMSString0x10 AppearAnim;
	std::vector<NMSTemplate> BehaviourOverrides;
	NMS::NMSString0x10 BehaviourTreeOverride;
	std::vector<NMSTemplate> BlackboardValues;
	NMS::NMSString0x10 DamageOverride;
	NMS::NMSString0x10 DamageReceivedMultiplier;
	NMS::NMSString0x10 GenerateResource;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 KillingBlowMessageIDOverride;
	NMS::NMSString0x10 KillStatIDOverride;
	float DespawnDistOverride;
	int32_t HealthOverride;
	float Scale;
	float ScaleVariation;
	float SpawnDistOverride;
	float SpeedMultiplier;
	NMS_GameComponents::GcCreatureTypes Type;
	bool AllowSpawnInAir;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnData
{
	enum class FaceDirEnum : uint32_t
	{
		Random = 0,
		TowardsPlayer = 1,
		SpawnerAt = 2,
		InFrontOfPlayer = 3,
	};

	NMS::NMSString0x20A SpawnLocatorScanEvent;
	NMS::NMSString0x10 AppearAnim;
	NMS::NMSString0x10 Archetype;
	NMS::NMSString0x10 SpawnLocator;
	int32_t MaxNum[4];
	int32_t MinNum[4];
	float ActiveTime;
	NMS_GameComponents::GcPlayerExperienceSpawnData::FaceDirEnum FaceDir;
	float MaxDist;
	float MinDist;
	float PlayerFacingOffsetMax;
};

//Dependency: GcPlayerExperienceSpawnData
//Dependency: NMSString0x10
struct GcPlayerExperienceSpawnTable
{
	enum class ExperienceSpawnTypeEnum : uint32_t
	{
		Freighter = 0,
		Mission = 1,
	};

	NMS::NMSString0x10 Event;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnData> Spawns;
	NMS_GameComponents::GcPlayerExperienceSpawnTable::ExperienceSpawnTypeEnum ExperienceSpawnType;
	float InitialDelay;
	float PerSpawnDelay;
	float ResponseRate;
	bool Destroy;
};

//Dependency: GcAIShipSpawnData
struct GcPoliceSpawnWaveData
{
	NMS_GameComponents::GcAIShipSpawnData ShipData;
	int32_t MaxCountsForFireteamSize[4];
};

//Dependency: NMSString0x10
struct GcPulseEncounterSpawnConditions
{
	NMS::NMSString0x10 RequiresMissionActive;
	NMS::NMSString0x10 RequiresMissionComplete;
	NMS::NMSString0x10 RequiresMissionNotActive;
	NMS::NMSString0x10 RequiresMissionNotComplete;
	NMS::NMSString0x10 RequiresProduct;
	bool AllowedBeyondPortals;
	bool AllowedDuringTutorial;
	bool AllowedInCreative;
	bool AllowedInEmptySystem;
	bool AllowedWhileOnMPMission;
	bool MissionEncounter;
	bool RequiresAlienShip;
	bool RequiresNearbyCorruptWorld;
	bool StandardEncounter;
};

//Dependency: GcPulseEncounterSpawnConditions
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPulseEncounterInfo
{
	NMS::Colour CustomNotifyColour;
	NMS_GameComponents::GcPulseEncounterSpawnConditions SpawnConditions;
	NMS::NMSString0x20A ChatMessageName;
	NMS::NMSString0x20A CustomNotify;
	NMS::NMSString0x20A CustomNotifyOSD;
	NMS::NMSString0x20A CustomNotifyTitle;
	NMS::NMSString0x20A MarkerLabel;
	NMS_Toolkit::TkTextureResource MarkerIcon;
	NMSTemplate Encounter;
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float SpawnChance;
	float SpawnDistance;
	bool HasColourOverride;
	bool Silent;
	bool UseMarkerIconInOSD;
};

//Dependency: GcSentinelSpawnData
//Dependency: NMSString0x10
struct GcSentinelSpawnWave
{
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcSentinelSpawnData> Spawns;
	int32_t ReinforceAt;
};

//Dependency: GcAIShipSpawnData
//Dependency: GcSentinelSpawnSequenceGroupList
//Dependency: GcPlayerExperienceAsteroidCreatureSpawnTable
//Dependency: GcSentinelWaveGroup
//Dependency: GcSentinelEncounterOverride
//Dependency: GcBackgroundSpaceEncounterInfo
//Dependency: GcPlayerExperienceSpawnArchetypeData
//Dependency: GcPlayerExperienceSpawnTable
//Dependency: GcBountySpawnInfo
//Dependency: GcPoliceSpawnWaveData
//Dependency: GcPulseEncounterInfo
//Dependency: GcSentinelSpawnNamedSequence
//Dependency: GcSentinelSpawnWave
struct GcExperienceSpawnTable
{
	NMS_GameComponents::GcAIShipSpawnData BattleReinforcingPirateFrigateSpawn;
	NMS_GameComponents::GcSentinelSpawnSequenceGroupList EncounterSpawns[9];
	NMS_GameComponents::GcSentinelSpawnSequenceGroupList WantedLevelSpawns[6];
	NMS_GameComponents::GcPlayerExperienceAsteroidCreatureSpawnTable AsteroidCreatureSpawns;
	NMS_GameComponents::GcSentinelWaveGroup SummonerSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> AbandonedFreighterSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> AmbientSpawns;
	std::vector<NMS_GameComponents::GcBackgroundSpaceEncounterInfo> BackgroundSpaceEncounters;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleInitialPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleInitialStandardSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattlePirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleRecurringPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleSecondaryPirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> BattleSpawns;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnArchetypeData> CreatureSpawnArchetypes;
	std::vector<NMS_GameComponents::GcPlayerExperienceSpawnTable> CreatureSpawnTable;
	std::vector<NMS_GameComponents::GcSentinelEncounterOverride> EncounterOverrides;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> FlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> FrigateFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> MiningFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> OutpostSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PirateBattleSpawns;
	std::vector<NMS_GameComponents::GcBountySpawnInfo> PirateBountySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PirateSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PlanetaryPirateFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> PlanetaryPirateRaidSpawns;
	std::vector<NMS_GameComponents::GcPoliceSpawnWaveData> PoliceSpawns;
	std::vector<NMS_GameComponents::GcPulseEncounterInfo> PulseEncounters;
	std::vector<NMS_GameComponents::GcSentinelSpawnNamedSequence> SentinelSequences;
	std::vector<NMS_GameComponents::GcSentinelSpawnWave> SentinelSpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> SpaceFlybySpawns;
	std::vector<NMS_GameComponents::GcAIShipSpawnData> TraderSpawns;
};

struct GcShipDialogueTreeEnum
{
	enum class DialogueTreeEnum : uint32_t
	{
		Bribe = 0,
		Beg = 1,
		Ambush = 2,
		Trade = 3,
		Help = 4,
		Goods = 5,
		Hostile = 6,
	};

	NMS_GameComponents::GcShipDialogueTreeEnum::DialogueTreeEnum DialogueTree;
};

//Dependency: Vector2f
struct GcExperienceTimers
{
	NMS::Vector2f High;
	NMS::Vector2f Low;
	NMS::Vector2f Normal;
	int32_t HighChance;
	int32_t LowChance;
};

struct GcMissionConditionSettlementMatchesSeed
{
};

//Dependency: GcJourneyCategory
struct GcJourney
{
	std::vector<NMS_GameComponents::GcJourneyCategory> Categories;
};

//Dependency: GcEnvironmentSpawnData
struct GcExternalObjectList
{
	NMS_GameComponents::GcEnvironmentSpawnData Objects;
};

//Dependency: GcFossilCategory
struct GcMissionConditionHasFossilComponent
{
	NMS_GameComponents::GcFossilCategory SpecificCategory;
};

//Dependency: GcCreatureTypes
struct GcFiendCrimeSpawnData
{
	int32_t MaxNum[4];
	int32_t MinNum[4];
	float MaxDist;
	float MinDist;
	NMS_GameComponents::GcCreatureTypes Type;
};

//Dependency: GcInventoryClass
//Dependency: GcSpaceshipClasses
struct GcMissionConditionHasShip
{
	NMS_GameComponents::GcInventoryClass ShipInventoryClass;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	bool BetterClassMatches;
	bool CheckAllShips;
	bool DontCheckType;
	bool TakeValueFromSeasonData;
};

//Dependency: NMSString0x10
struct GcPlayerCharacterStateData
{
	NMS::NMSString0x10 AimTree1HPitch;
	NMS::NMSString0x10 AimTree1HYaw;
	NMS::NMSString0x10 AimTree2HPitch;
	NMS::NMSString0x10 AimTree2HYaw;
	NMS::NMSString0x10 AimTreeFishingPitch;
	NMS::NMSString0x10 AimTreeFishingYaw;
	NMS::NMSString0x10 AimTreeStaffPitch;
	NMS::NMSString0x10 AimTreeStaffYaw;
	NMS::NMSString0x10 HitReact0H;
	NMS::NMSString0x10 HitReact1H;
	NMS::NMSString0x10 HitReact2H;
	NMS::NMSString0x10 HitReactStaff;
	NMS::NMSString0x10 Locomotion0H;
	NMS::NMSString0x10 Locomotion1H;
	NMS::NMSString0x10 Locomotion2H;
	NMS::NMSString0x10 LocomotionStaff;
	bool KeepHeadForward;
};

//Dependency: GcFiendCrimeSpawnData
//Dependency: GcFiendCrime
struct GcFiendCrimeSpawnTable
{
	std::vector<NMS_GameComponents::GcFiendCrimeSpawnData> Spawns;
	NMS_GameComponents::GcFiendCrime Crime;
	float ResponseRate;
};

//Dependency: GcPlayerCharacterStateData
struct GcPlayerCharacterStateTable
{
	NMS_GameComponents::GcPlayerCharacterStateData CharacterStates[19];
};

struct GcFishSizeProbability
{
	int32_t BaseWeight;
	int32_t DepthModifier;
	int32_t DepthRangeMax;
	int32_t DepthRangeMin;
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceCollectLocalSubstance
{
	NMS::NMSString0x20A UseScanEventToDetermineLocation;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool FromNow;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;
	bool WaitForSelected;
};

//Dependency: GcMechWeaponLocation
struct GcMechWeaponLocationPriority
{
	std::vector<NMS_GameComponents::GcMechWeaponLocation> MechWeaponLocationPriority;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: LinkableNMSTemplate
struct TkAttachmentData
{
	std::vector<NMSTemplate> AdditionalData;
	std::vector<NMS::LinkableNMSTemplate> Components;
	float LodDistances[5];
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcFishSizeProbability
//Dependency: GcBiomeType
struct GcFishSizeProbabilityBiomeOverride
{
	NMS_GameComponents::GcFishSizeProbability SizeWeights[4];
	NMS_GameComponents::GcBiomeType Biome;
};

struct GcMissionConsequenceResetPulseEncounterOverride
{
};

//Dependency: GcProceduralTechnologyCategory
struct GcRewardProceduralTechnology
{
	NMS_GameComponents::GcProceduralTechnologyCategory Type;
};

//Dependency: GcFishData
struct GcFishTable
{
	std::vector<NMS_GameComponents::GcFishData> Fish;
};

struct GcMissionConditionHasSeasonalReward
{
};

//Dependency: NMSString0x20A
struct GcRewardProcTechProduct
{
	NMS::NMSString0x20A Group;
	int32_t WeightedChanceEpic;
	int32_t WeightedChanceLegendary;
	int32_t WeightedChanceNormal;
	int32_t WeightedChanceRare;
	bool AllowAnyGroup;
	bool ForceQualityRelevant;
	bool ForceRelevant;
};

//Dependency: GcHistoricalSeasonData
struct GcHistoricalSeasonDataTable
{
	std::vector<NMS_GameComponents::GcHistoricalSeasonData> Table;
};

//Dependency: GcProductData
struct GcProductTable
{
	std::vector<NMS_GameComponents::GcProductData> Table;
};

//Dependency: GcAudioWwiseEvents
//Dependency: GcAudioWwiseRTPCs
struct GcGalaxyAudioSetupData
{
	NMS_GameComponents::GcAudioWwiseEvents EventAddWaypoint;
	NMS_GameComponents::GcAudioWwiseEvents EventMapEnter;
	NMS_GameComponents::GcAudioWwiseEvents EventMapExit;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodeChange;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodeChangeFailed;
	NMS_GameComponents::GcAudioWwiseEvents EventNavmodePathMove;
	NMS_GameComponents::GcAudioWwiseEvents EventPlanetRumble;
	NMS_GameComponents::GcAudioWwiseEvents EventRemoveWaypoint;
	NMS_GameComponents::GcAudioWwiseEvents EventRouteLines;
	NMS_GameComponents::GcAudioWwiseEvents EventSystemDeselect;
	NMS_GameComponents::GcAudioWwiseEvents EventSystemSelect;
	NMS_GameComponents::GcAudioWwiseEvents EventTextAppear;
	NMS_GameComponents::GcAudioWwiseEvents EventWaypointError;
	NMS_GameComponents::GcAudioWwiseEvents EventWaypointLoop;
	NMS_GameComponents::GcAudioWwiseRTPCs RTPCStarWhoosh;
	float WhooshClip;
	float WhooshMultiplier;
};

struct GcFlyingSnakeData
{
	float AirThickness;
	float AltitudeSinAmp;
	float AltitudeSinPeriod;
	float ApproachBaitSpeed;
	float AscendDescendSpeed;
	float BarrelRollCount;
	float BarrelRollSpawnDelay;
	float BarrelRollSpeed;
	float CircleSpeed;
	float DefaultCircleDistance;
	float RiseDelay;
	float RiseHeight;
	float RiseTime;
	float TailStiffness;
	float TwistLimit;
	float WindForce;
};

//Dependency: GcBiomeType
struct GcMissionConditionRequestedPhoto
{
	NMS_GameComponents::GcBiomeType Biome;
};

struct GcFoliageComponentData
{
	float Radius;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationNotify
{
	NMSTemplate Data;
	float EndFrame;
	float StartFrame;
	int32_t Track;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlayerMissionProgressMapEntry
struct GcPlayerMissionProgressMapTable
{
	std::vector<NMS_GameComponents::GcPlayerMissionProgressMapEntry> MissionProgressTable;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcFreighterBaseRoom
{
	NMS::NMSString0x20A Palette;
	NMS::NMSString0x10 Name;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector2f
struct TkAnim2dBlendNodeData
{
	NMS::Vector2f Position;
	NMSTemplate BlendChild;
};

//Dependency: TkCurveType
//Dependency: TkAnim2dBlendNodeData
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnim2dBlendNode
{
	enum class BlendOpEnum : uint32_t
	{
		Blend = 0,
		Add = 1,
	};

	enum class CoordinatesEnum : uint32_t
	{
		Polar = 0,
		Cartesian = 1,
	};

	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 PositionIn;
	float PositionRangeBegin;
	float PositionRangeEnd;
	float PositionSpringTime;
	NMS_Toolkit::TkCurveType PositionCurve;
	bool SelectBlend;
	float SelectBlendSpring;
	bool PolarInputInterpolation;
	float PolarInputLimitCentre;
	float PolarInputLimitExtent;
	NMS_Toolkit::TkAnim2dBlendNode::CoordinatesEnum Coordinates;
	NMS_Toolkit::TkAnim2dBlendNode::BlendOpEnum BlendOp;
	std::vector<NMS_Toolkit::TkAnim2dBlendNodeData> BlendChildren;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcFreighterCargoOption
{
	NMS::NMSString0x10 ID;
	int32_t MaxAmount;
	int32_t MinAmount;
	int32_t PercentChance;
};

//Dependency: GcProceduralTechnologyData
struct GcProceduralTechnologyTable
{
	std::vector<NMS_GameComponents::GcProceduralTechnologyData> Table;
};

//Dependency: NMSString0x10
struct GcRewardInterventionResponse
{
	enum class ResponseTypeEnum : uint32_t
	{
		DontIntervene = 0,
		InterveneWithMission = 1,
		MissionSuccess = 2,
		MissionFailure = 3,
		MissionAvoid = 4,
		MissionChance = 5,
	};

	NMS::NMSString0x10 InterveneWithMissionID;
	int32_t BasePercentOfMissionChanceSuccess;
	NMS_GameComponents::GcRewardInterventionResponse::ResponseTypeEnum ResponseType;
};

//Dependency: GcFreighterDungeonParams
struct GcFreighterDungeonsTable
{
	std::vector<NMS_GameComponents::GcFreighterDungeonParams> Dungeons;
};

struct GcFreighterNPCSpawnPriority
{
	std::vector<float> PriorityScale;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkWeightedAnim
{
	NMS::NMSString0x10 Anim;
	float Weight;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcFreighterNPCType
{
	enum class FreighterNPCTypeEnum : uint32_t
	{
		SquadronPilot = 0,
		FrigateCaptain = 1,
		WorkerBio = 2,
		WorkerTech = 3,
		WorkerIndustry = 4,
	};

	NMS_GameComponents::GcFreighterNPCType::FreighterNPCTypeEnum FreighterNPCType;
};

//Dependency: NMSString0x10
struct GcFreighterRoomNPCSpawnCapacityEntry
{
	NMS::NMSString0x10 RoomID;
	float SpawnCapacity;
};

//Dependency: GcFreighterRoomNPCSpawnCapacityEntry
struct GcFreighterRoomNPCSpawnCapacities
{
	std::vector<NMS_GameComponents::GcFreighterRoomNPCSpawnCapacityEntry> RoomSpawnCapacities;
};

struct GcSynchronisedBufferData
{
	std::vector<uint64_t> Data;
};

struct GcMissionConditionSettlementsHaveEverBeenDisabled
{
};

//Dependency: VariableSizeString
struct GcOverlayTexture
{
	NMS::VariableSizeString OverlayDiffuse;
	NMS::VariableSizeString OverlayMasks;
	NMS::VariableSizeString OverlayNormal;
	int32_t OverlayMaskIdx;
};

struct GcFreighterSyncComponentData
{
	bool Dummy;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcScreenFilterData
{
	NMS::NMSString0x20A LocText;
	NMS::VariableSizeString Filename;
	float FadeDistance;
	float HdrAreaAdjust;
	bool SelectableInPhotoMode;
};

struct GcFriendlyDroneChatType
{
	enum class FriendlyDroneChatTypeEnum : uint32_t
	{
		Summoned = 0,
		Unsummoned = 1,
		BecomeWanted = 2,
		LoseWanted = 3,
		Idle = 4,
	};

	NMS_GameComponents::GcFriendlyDroneChatType::FriendlyDroneChatTypeEnum FriendlyDroneChatType;
};

//Dependency: NMSString0x20A
struct GcItemFilterStageDataTechPack
{
	NMS::NMSString0x20A DisabledMessage;
};

//Dependency: VariableSizeString
struct GcMissionSequenceLeaveNexusMP
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageNoWarp;
	uint64_t Timeout;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMissionSequenceWaitForPortalWarp
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString SpecificOverrideUA;
	NMS::NMSString0x20 CommunityOverrideUA;
	bool PartOfAtlasStory;
	bool WarpToRendezvousForThisStage;
	bool WarpToSpace;
};

struct GcRewardStationTeleportEndpoint
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimJointLODData
{
	std::vector<NMS::NMSString0x40> JointNames;
	int32_t LOD;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcShipFlareComponentData
{
	enum class FlareTypeEnum : uint32_t
	{
		Default = 0,
	};

	NMS_GameComponents::GcShipFlareComponentData::FlareTypeEnum FlareType;
};

struct GcGroupCondition
{
	std::vector<NMSTemplate> Conditions;
	bool ORConditions;
};

struct GcRewardTimeWarp
{
};

struct GcMultitoolPoolType
{
	enum class MultiToolPoolTypeEnum : uint32_t
	{
		Standard = 0,
		Exotic = 1,
		Sentinel = 2,
		Atlas = 3,
		SettlementRotational = 4,
	};

	NMS_GameComponents::GcMultitoolPoolType::MultiToolPoolTypeEnum MultiToolPoolType;
};

//Dependency: GcMultitoolPoolType
//Dependency: VariableSizeString
struct GcMultitoolPoolData
{
	NMS::VariableSizeString File;
	int32_t MaxDraw;
	int32_t MinDraw;
	float PoolProbability;
	NMS_GameComponents::GcMultitoolPoolType PoolType;
};

//Dependency: NMSString0x10
struct GcRewardSpecificTechFromList
{
	enum class TechListRewardOrderEnum : uint32_t
	{
		OneRandom = 0,
		InOrder = 1,
		TryAllRandom = 2,
	};

	std::vector<NMS::NMSString0x10> TechList;
	NMS_GameComponents::GcRewardSpecificTechFromList::TechListRewardOrderEnum TechListRewardOrder;
	bool FailIfAllKnown;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkInputHandEnum
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkButtonPathMapping
{
	NMS::NMSString0x20A Name;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS_Toolkit::TkInputHandEnum Hand;
	NMS_Toolkit::TkInputEnum Id;
	NMS::NMSString0x20 OpenVROriginNames;
};

//Dependency: TkButtonPathMapping
struct TkButtonImageLookup
{
	std::vector<NMS_Toolkit::TkButtonPathMapping> Lookup;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionSystemHasCorruptedPlanet
{
	bool AllowNexus;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkJointExtentData
{
	float JointExtentCenter[3];
	float JointExtentMax[3];
	float JointExtentMin[3];
	float JointExtentStdDev[3];
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceFreighterEngage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageEngage;
	NMS::VariableSizeString MessageGetToSpace;
	NMS::NMSString0x10 TimeoutMessage;
	NMS::VariableSizeString TimeoutOSDMessage;
	float EngageDistance;
	float EngageTime;
	float TimeAfterWarp;
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector3f
//Dependency: Vector2f
struct GcGalaxyGenerationSetupData
{
	NMS::Colour InnerSectorColours[10];
	NMS::Vector4f InnerFieldScales;
	NMS::Vector3f SpiralPull;
	NMS::Vector2f StarSize[5];
	NMS::Vector2f BaseSize;
	NMS::Vector2f ConnectionAttractorMax;
	NMS::Vector2f ConnectionAttractorMin;
	NMS::Vector2f ConnectionDistortion;
	NMS::Vector2f SpiralFlex;
	NMS::Vector2f SpiralInclusion;
	NMS::Vector2f SpiralSizeScale;
	NMS::Vector2f StarHighlightAlpha;
	NMS::Vector2f StarHighlightSize;
	float BaseGenerationThreshold;
	float BaseTurbulenceGain;
	float BaseTurbulenceLac;
	float BaseTurbulenceScale;
	float ColourBaseBlendOnSize;
	float ConnectionDistanceLimit;
	float ConnectionDistortionTMult;
	float FieldGenerationThreshold;
	float FieldAlphaBase;
	float FieldAlphaField1Inf;
	float FieldAlphaField2SqInf;
	float RareSunChance;
	float SizeField4Inf;
	float SizeNoisePower;
	float SizeNoiseScale;
	float SpiralFormChance;
	float SpiralTwistMult;
	float StarGenerationThreshold;
	float StarHighlightChance;
};

//Dependency: TkTextureResource
struct GcGalaxyInfoIcons
{
	NMS_Toolkit::TkTextureResource RaceIcons[9];
	NMS_Toolkit::TkTextureResource EconomyIcons[7];
	NMS_Toolkit::TkTextureResource ConflictIcons[4];
	NMS_Toolkit::TkTextureResource WealthIcons[4];
	NMS_Toolkit::TkTextureResource ConflictTechNotInstalledIcon;
	NMS_Toolkit::TkTextureResource EconomyTechNotInstalledIcon;
	NMS_Toolkit::TkTextureResource WarpErrorIcon;
	NMS_Toolkit::TkTextureResource WarpIcon;
	NMS_Toolkit::TkTextureResource WarpTechNotInstalledIcon;
};

struct GcLadderComponentData
{
};

struct GcGalaxyMarkerTypes
{
	enum class GalaxyMarkerTypeEnum : uint32_t
	{
		StartingLocation = 0,
		Home = 1,
		Waypoint = 2,
		Contact = 3,
		Blackhole = 4,
		AtlasStation = 5,
		Selection = 6,
		PlanetBase = 7,
		Visited = 8,
		ScanEvent = 9,
		Expedition = 10,
		NetworkPlayer = 11,
		Freighter = 12,
		PathIcon = 13,
		SeasonParty = 14,
		Settlement = 15,
	};

	NMS_GameComponents::GcGalaxyMarkerTypes::GalaxyMarkerTypeEnum GalaxyMarkerType;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshBuildParams
{
	float AgentHeight;
	float AgentMaxSlopeDegrees;
	float AgentMaxStepHeight;
	float AgentRadius;
	float ContourMaxError;
	float ContourMaxLength;
	float DetailMeshMaxError;
	float DetailMeshSampleDistance;
	int32_t RegionMinCellCount;
	bool BuildAsync;
	bool BuildDetailMesh;
	bool BuildPolyBVH;
	bool ErodeWalkableAreas;
	bool FilterLedgeSpans;
	bool FilterLowHangingObstacles;
	bool FilterWalkableLowHeightSpans;
	bool KeepIntermediateRecastData;
	bool MedianFilterWalkableAreas;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkNavMeshBuildParams
struct GcPlanetaryNavMeshBuildParams
{
	NMS_Toolkit::TkNavMeshBuildParams BaseParams;
	int32_t CellsPerVoxelHeight;
	int32_t CellsPerVoxelWidth;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNavMeshBuildParams
//Dependency: Vector3f
struct TkVolumeNavMeshBuildParams
{
	NMS::Vector3f BoundsMax;
	NMS::Vector3f BoundsMin;
	NMS_Toolkit::TkNavMeshBuildParams BaseParams;
	float CellsPerUnitHeight;
	float CellsPerUnitWidth;
	int32_t NumBorderCells;
	float TileSize;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcPlanetaryNavMeshBuildParams
//Dependency: TkVolumeNavMeshBuildParams
struct GcNavigationGlobals
{
	NMS_Toolkit::TkVolumeNavMeshBuildParams FreighterBaseNavMeshBuildParams;
	NMS_Toolkit::TkVolumeNavMeshBuildParams NexusNavMeshBuildParams;
	NMS_Toolkit::TkVolumeNavMeshBuildParams SpaceStationNavMeshBuildParams;
	NMS_GameComponents::GcPlanetaryNavMeshBuildParams PlanetaryNavMeshBuildParams;
	int32_t MaxAsyncTileBuildsInFlight;
	int32_t PlanetaryNavMeshLod;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcMissionConditionHasIncompleteOptionalMilestones
{
	int32_t ForStageIndex;
};

//Dependency: Colour
struct GcGalaxyRenderAnostreakData
{
	NMS::Colour InnerColour;
	NMS::Colour OuterColour;
	float Contrast;
	float HorizontalScale;
	float VerticalCompression;
};

//Dependency: Colour
//Dependency: Vector4f
//Dependency: Vector2f
struct GcGalaxyRenderSetupData
{
	NMS::Colour MapLargeAreaPrimaryDefaultColours[10];
	NMS::Colour MapLargeAreaPrimaryHighContrastColours[10];
	NMS::Colour MapLargeAreaSecondaryDefaultColours[10];
	NMS::Colour MapLargeAreaSecondaryHighContrastColours[10];
	NMS::Vector4f CompositionControlB_S_C_G;
	NMS::Colour LensFlareColour;
	NMS::Vector4f LensFlareSpread;
	NMS::Colour SunCoreColour;
	NMS::Vector2f LensFlareExpandTowards;
	NMS::Vector2f NebulaeTraceStepRange;
	float BGCellHorizonInfluence;
	float BGCellMoveScale;
	float BGCellTraceScale;
	float BGColourCellBlend;
	float BGColourPow;
	float BGColourStage1;
	float BGColourStage2;
	float BGColourStage3;
	float BGColourStage4;
	float CompositionSaturationIncreaseError;
	float CompositionSaturationIncreaseFilter;
	float CompositionSaturationIncreaseSelected;
	float LensFlareBase;
	float NebulaeAlphaPow;
	float NebulaeTraceDensity;
	float NebulaeTraceDensityCutoff;
	float NebulaeTraceScale;
	float NebulaeTraceValueMult;
	float StarFieldBlendAmount;
	float SunCoreBGContrib;
	float SunCoreFGContrib;
	float SunCoreLarger;
	float SunCoreSmaller;
	float VignetteBase;
	float VignetteSize;
	float VignetteSizeIncreaseError;
	float VignetteSizeIncreaseFilter;
	float VignetteSizeIncreaseSelected;
};

struct GcMissionConditionTotalWarpsNumber
{
	int32_t WarpsNumber;
};

//Dependency: GcGalaxySolarSystemOrbitParams
struct GcGalaxySolarSystemParams
{
	NMS_GameComponents::GcGalaxySolarSystemOrbitParams MoonParameters;
	NMS_GameComponents::GcGalaxySolarSystemOrbitParams PlanetParameters;
	float PlanetRadii[5];
	float DefaultDistance;
	float NonVisitedPlanetAlpha;
	float SystemTilt;
	float VisitedPlanetAlpha;
};

//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcPlanetWeatherColourData
{
	NMS::Colour CloudColour1;
	NMS::Colour CloudColour2;
	NMS::Colour FogColour;
	NMS::Colour HeightFogColour;
	NMS::Colour HorizonColour;
	NMS::Colour LightColour;
	NMS::Colour LightColourUnderground;
	NMS::Colour SkyColour;
	NMS::Vector3f SkyGradientSpeed;
	NMS::Colour SkySolarColour;
	NMS::Colour SkyUpperColour;
	NMS::Colour SunColour;
	NMS::NMSString0x10 GasGiantAtmosphereID;
	float CirrusCloudDensity;
	float SelectionWeighting;
};

//Dependency: GcPlanetSize
//Dependency: GcGalaxyStarTypes
//Dependency: GcPlanetTradingData
//Dependency: GcGalaxyStarAnomaly
//Dependency: GcPlayerConflictData
//Dependency: GcAlienRace
//Dependency: GcSeed
struct GcGalaxyStarAttributesData
{
	NMS::GcSeed PlanetSeeds[16];
	int32_t PlanetParentIndices[16];
	NMS_GameComponents::GcPlanetSize PlanetSizes[16];
	NMS_GameComponents::GcPlanetTradingData TradingData;
	NMS_GameComponents::GcGalaxyStarAnomaly Anomaly;
	NMS_GameComponents::GcPlayerConflictData ConflictData;
	int32_t NumberOfPlanets;
	int32_t NumberOfPrimePlanets;
	NMS_GameComponents::GcAlienRace Race;
	NMS_GameComponents::GcGalaxyStarTypes Type;
	bool AbandonedSystem;
	bool IsGasGiantSystem;
	bool IsGiantSystem;
	bool IsPirateSystem;
	bool IsSystemSafe;
};

//Dependency: GcVehicleType
struct GcMissionConditionPrimaryExocraft
{
	NMS_GameComponents::GcVehicleType ExocraftType;
	bool MustBeSummonedNearby;
};

//Dependency: Vector2f
struct GcGalaxyVoxelAttributesData
{
	int32_t AtlasStationIndices[12];
	int32_t BlackholeIndices[12];
	NMS::Vector2f TransitPopulationDistanceRange;
	int32_t AtlasStationCount;
	int32_t BlackholeCount;
	int32_t GuideStarMinimumCount;
	int32_t GuideStarRenegadeCount;
	int32_t PurpleSystemsCount;
	int32_t PurpleSystemsStart;
	float RegionColourValue;
	float TransitPopulationPerpDistance;
	float UnitDistanceFromGoalEdge;
	bool InsideGoalGap;
};

struct GcMissionConditionNearPole
{
	enum class PoleConditionEnum : uint32_t
	{
		North = 0,
		South = 1,
	};

	float Distance;
	NMS_GameComponents::GcMissionConditionNearPole::PoleConditionEnum PoleCondition;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkSaveID
{
	uint64_t Value;
};

//Dependency: TkSaveID
struct TkUniqueID
{
	uint64_t Address;
	uint64_t Index;
	NMS_Toolkit::TkSaveID OwnerID;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardUnlockTitle
{
	NMS::NMSString0x10 TitleID;
	bool NoMusic;
	bool ShowEvenIfAlreadyUnlocked;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGetUnitsToBuyItem
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Item;
	NMS::VariableSizeString Message;
};

struct GcGaussianCurveData
{
	float Mean;
	float StdDev;
};

//Dependency: NMSString0x10
struct GcSpaceshipShieldComponentData
{
	NMS::NMSString0x10 ShieldID;
	bool IgnoreHitsWhenPlayerAimingElsewhere;
	bool RotateOnHit;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcGeneratedBaseDecorationTemplate
{
	enum class DecorationLayerEnum : uint32_t
	{
		Stairs = 0,
		Corridor = 1,
		Room = 2,
		Door = 3,
		Decoration1 = 4,
		Decoration2 = 5,
		Decoration3 = 6,
		DecorationCorridor = 7,
	};

	NMS_Toolkit::TkModelResource TemplateScene;
	NMS::NMSString0x10 Id;
	std::vector<int32_t> InvalidRoomIndexes;
	NMS_GameComponents::GcGeneratedBaseDecorationTemplate::DecorationLayerEnum DecorationLayer;
	int32_t MaxPerRoom;
	float Probability;
};

//Dependency: NMSString0x10
struct GcGeneratedBaseLockDoorPair
{
	NMS::NMSString0x10 Door;
	NMS::NMSString0x10 Lock;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct TkTrophyEntry
{
	NMS::NMSString0x10 TrophyId;
	int32_t Ps4Id;
	NMS::NMSString0x40 PCId;
	NMS::NMSString0x20 XboxOneId;
};

//Dependency: TkTrophyEntry
struct TkTrophyData
{
	std::vector<NMS_Toolkit::TkTrophyEntry> Trophies;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcGeneratedBasePruningRule
{
	NMS::NMSString0x10 NodeName;
	std::vector<NMS::NMSString0x10> RoomFilters;
	NMS::NMSString0x10 RuleId;
	int32_t MaxPerDungeon;
	int32_t MaxPerRoom;
};

//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcGeneratedBaseRoomTemplate
{
	NMS::Colour PrimaryColour;
	NMS::Colour QuaternaryColour;
	NMS::Colour SecondaryColour;
	NMS::Colour TernaryColour;
	NMS::NMSString0x20A LocId;
	std::vector<NMS::NMSString0x10> DecorationThemes;
	NMS::NMSString0x10 Name;
	int32_t MaxPathLength;
	int32_t MinContiguousDepth;
	int32_t MinContiguousHeight;
	int32_t MinContiguousWidth;
	int32_t MinPathLength;
	float ShrinkFactor;
};

struct GcJourneyMedalType
{
	enum class MedalTypeEnum : uint32_t
	{
		Standings = 0,
		Missions = 1,
		Words = 2,
		Systems = 3,
		Sentinels = 4,
		Pirates = 5,
		Plants = 6,
		Units = 7,
		RaceCreatures = 8,
		DistanceWarped = 9,
	};

	NMS_GameComponents::GcJourneyMedalType::MedalTypeEnum MedalType;
};

//Dependency: NMSString0x10
struct GcGeneratedBaseThemeTemplate
{
	std::vector<NMS::NMSString0x10> DecorationTemplates;
	NMS::NMSString0x10 Name;
};

//Dependency: GcGeneratedBaseDecorationTemplate
//Dependency: GcGeneratedBasePruningRule
//Dependency: GcGeneratedBaseRoomTemplate
//Dependency: GcGeneratedBaseThemeTemplate
struct GcGeneratedBaseTemplatesTable
{
	std::vector<NMS_GameComponents::GcGeneratedBaseDecorationTemplate> DecorationTemplates;
	std::vector<NMS_GameComponents::GcGeneratedBasePruningRule> PruningRules;
	std::vector<NMS_GameComponents::GcGeneratedBaseRoomTemplate> RoomTemplates;
	std::vector<NMS_GameComponents::GcGeneratedBaseThemeTemplate> ThemeTemplates;
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveCommunicatorTakeOffMessage
{
	NMS::NMSString0x20A Comms;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceStartMission
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 MissionID;
	bool Forced;
	bool MakeCurrent;
	bool Restart;
};

struct GcHeightAdjustComponentData
{
	float HeightOffset;
};

struct GcGeneratedShipCounts
{
	int32_t Counts[7];
};

//Dependency: GcMaintenanceComponentData
//Dependency: NMSString0x10
struct GcGeneratorUnitComponentData
{
	enum class GeneratorUnitTypeEnum : uint32_t
	{
		MiningUnit = 0,
		GasHarvester = 1,
		SystemHoover = 2,
		SeaHarvester = 3,
	};

	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	NMS::NMSString0x10 BiomeGasRewards[17];
	NMS_GameComponents::GcGeneratorUnitComponentData::GeneratorUnitTypeEnum GeneratorUnitType;
	int32_t ResourceMaintenanceSlotOverride;
};

struct GcGenericIconTypes
{
	enum class GenericIconTypeEnum : uint32_t
	{
		None = 0,
		Interaction = 1,
		SpaceStation = 2,
		SpaceAnomaly = 3,
		SpaceAtlas = 4,
		Nexus = 5,
	};

	NMS_GameComponents::GcGenericIconTypes::GenericIconTypeEnum GenericIconType;
};

//Dependency: GcPetBehaviours
//Dependency: GcCreaturePetTraits
struct GcPetFollowUpBehaviour
{
	NMS_GameComponents::GcPetBehaviours Behaviour;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;
	float WeightMax;
	float WeightMin;
	bool TraitBased;
};

//Dependency: GcBroadcastLevel
//Dependency: NMSString0x10
struct GcGoToStateAction
{
	NMS::NMSString0x10 State;
	NMS_GameComponents::GcBroadcastLevel BroadcastLevel;
	bool Broadcast;
};

//Dependency: GcGrabbableData
struct GcGrabbableComponentData
{
	std::vector<NMS_GameComponents::GcGrabbableData> GrabbableDataArray;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
struct TkImGuiSettings
{
	NMS::Colour ActiveTextColour;
	NMS::Colour ActiveWindowBackgroundColour;
	NMS::Colour ActiveWindowTitleColour;
	NMS::Colour BackgroundColour;
	NMS::Colour ButtonColour;
	NMS::Colour ButtonHighlightColour;
	NMS::Colour ButtonPressedColour;
	NMS::Colour CloseButtonClickColour;
	NMS::Colour CloseButtonColour;
	NMS::Colour CloseButtonHighlightColour;
	NMS::Colour EditBoxActiveColour;
	NMS::Colour EditBoxColour;
	NMS::Colour EditBoxSelectedColour;
	NMS::Colour MinimiseButtonClickColour;
	NMS::Colour MinimiseButtonColour;
	NMS::Colour MinimiseButtonHighlightColour;
	NMS::Colour TaskBarColour;
	NMS::Colour TaskBarShadow;
	NMS::Colour TextColour;
	NMS::Colour TextDisabledColour;
	NMS::Colour TextShadowColour;
	NMS::Colour WindowBackgroundColour;
	NMS::Colour WindowHighlight;
	NMS::Colour WindowTitleColour;
	float AltPlacementDistanceScrollSpeed;
	float ScrollSpeed;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceFindPurpleSystem
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: NMSString0x10
struct GcSettlementJudgementPerkOption
{
	NMS::NMSString0x10 Perk;
	float PerkChance;
};

//Dependency: GcSettlementJudgementPerkOption
//Dependency: GcSettlementStatChange
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJudgementOption
{
	enum class JudgementOptionStandingEnum : uint32_t
	{
		None = 0,
		Positive = 1,
		Negative = 2,
	};

	NMS::NMSString0x20A OptionText;
	std::vector<NMS::NMSString0x10> AdditionalRewards;
	std::vector<NMS::NMSString0x20A> AltOptionText;
	NMS::NMSString0x10 ChainedJudgementID;
	std::vector<NMS_GameComponents::GcSettlementJudgementPerkOption> Perks;
	std::vector<NMS_GameComponents::GcSettlementStatChange> StatChanges;
	NMS_GameComponents::GcSettlementJudgementOption::JudgementOptionStandingEnum JudgementOptionStanding;
	bool HidePerkInJudgement;
	bool OptionIsPositiveForNPC;
	bool UseGiftReward;
	bool UsePolicyPerk;
	bool UsePolicyStat;
	bool UseTechPerk;
};

//Dependency: Colour
struct GcPlanetWaterColourData
{
	NMS::Colour CausticsColour;
	NMS::Colour EmissionColour;
	NMS::Colour FoamColour;
	NMS::Colour FoamEmission;
	NMS::Colour ScatterColour;
	NMS::Colour TransmittanceColour;
	float MaxScatterDistance;
	float MaxTransmittanceDistance;
	float MinScatterDistance;
	float MinTransmittanceDistance;
	float SelectionWeighting;
	float SubsurfaceBoost;
	float SurfaceAbsorptionMultiplier;
};

//Dependency: GcPlanetWaterColourData
//Dependency: GcWaterEmissionBiomeData
struct GcWaterColourSettingList
{
	std::vector<NMS_GameComponents::GcPlanetWaterColourData> Settings;
	NMS_GameComponents::GcWaterEmissionBiomeData EmissionTypeSelection[17];
};

//Dependency: Colour
struct GcHeavyAirColourData
{
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Colour ExtremeColour1;
	NMS::Colour ExtremeColour2;
};

//Dependency: GcHUDComponent
//Dependency: Colour
//Dependency: VariableSizeString
struct GcHUDImageData
{
	NMS::Colour Colour;
	NMS_GameComponents::GcHUDComponent Data;
	NMS::VariableSizeString Image;
};

//Dependency: GcHUDComponent
struct GcHUDLayerData
{
	NMS_GameComponents::GcHUDComponent Data;
	std::vector<NMSTemplate> Children;
};

//Dependency: GcTextPreset
//Dependency: TkCurveType
struct GcHUDManagerData
{
	NMS_GameComponents::GcTextPreset SubtitleFont;
	NMS_GameComponents::GcTextPreset SubtitleFontSmall;
	NMS_GameComponents::GcTextPreset TitleFont;
	int32_t ModelRenderDisplayBorder;
	float ModelRenderDisplayMove;
	float ModelRenderDisplayOffset;
	int32_t ModelRenderDisplaySize;
	int32_t ModelRenderTextureSize;
	float OSDBaseBandY;
	float OSDBaseTextY;
	float OSDBorderY;
	float OSDCoreAlpha;
	float OSDCoreSize;
	float OSDEdgeMergeAlpha;
	float OSDFadeSpeed;
	float OSDFullSize;
	float OSDTextAppearRate;
	float OSDTextFadeRate;
	float OSDTextWaitOnAlpha;
	float OSDUnderlineWidth;
	float PopUpBGFadeInRate;
	float PopUpBGFadeOutRate;
	float PopUpBGTriggerFG;
	float PopUpCoreAlpha;
	float PopUpCoreSize;
	float PopUpFadeRate;
	float PopUpFullSize;
	float PopUpY;
	float PopUpYMidLock;
	float PromptLine1Y;
	float PromptLine2Y;
	NMS_Toolkit::TkCurveType ModelRenderDisplayAlphaCurve;
	NMS_Toolkit::TkCurveType ModelRenderDisplayMoveCurve;
};

//Dependency: GcTextPreset
//Dependency: GcHUDComponent
//Dependency: NMSString0x80
struct GcHUDTextData
{
	NMS_GameComponents::GcTextPreset Preset;
	NMS_GameComponents::GcHUDComponent Data;
	NMS::NMSString0x80 Text;
};

struct GcHarvestPlantAction
{
	float Radius;
};

//Dependency: GcPlayerHazardType
struct GcHazardAction
{
	NMS_GameComponents::GcPlayerHazardType Hazard;
	float Radius;
	float Strength;
	bool RadiusBasedStrength;
};

struct GcMissionConditionAlienPodAggroed
{
	float Threshold;
};

struct GcHazardValueTypes
{
	enum class HazardValueEnum : uint32_t
	{
		Ambient = 0,
		Water = 1,
		Cave = 2,
		Storm = 3,
		Night = 4,
		DeepWater = 5,
	};

	NMS_GameComponents::GcHazardValueTypes::HazardValueEnum HazardValue;
};

//Dependency: TkCurveType
struct GcPhotoModeAdjustData
{
	float AdjustMax;
	float AdjustMaxRange;
	float AdjustMin;
	NMS_Toolkit::TkCurveType AdjustMaxCurve;
	NMS_Toolkit::TkCurveType AdjustMinCurve;
	bool Inverted;
};

//Dependency: VariableSizeString
struct GcHeavyAirList
{
	std::vector<NMS::VariableSizeString> Options;
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: GcMissionCategory
//Dependency: NMSString0x10
struct GcMissionSequenceShowMessage
{
	enum class OSDMessageStyleEnum : uint32_t
	{
		Standard = 0,
		Fancy = 1,
		Stats = 2,
		Settlement = 3,
		Spook = 4,
	};

	NMS::Colour OSDMessageColour;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString OSDMessage;
	NMS::VariableSizeString OSDMessageSubtitle;
	NMS::NMSString0x10 StatusMessageDefinition;
	std::vector<NMSTemplate> UseConditionsForTextFormatting;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	NMS_GameComponents::GcMissionCategory Category;
	NMS_GameComponents::GcMissionSequenceShowMessage::OSDMessageStyleEnum OSDMessageStyle;
	float OSDTime;
	float Time;
	bool DisableIcon;
	bool DisableTitlePrefix;
	bool OSDUseMissionIcon;
};

struct GcRewardEnableSentinels
{
};

struct GcHotActionMenuTypes
{
	enum class HotActionMenuTypesEnum : uint32_t
	{
		OnFoot = 0,
		InShip = 1,
		InExocraft = 2,
	};

	NMS_GameComponents::GcHotActionMenuTypes::HotActionMenuTypesEnum HotActionMenuTypes;
};

//Dependency: GcObjectSpawnData
//Dependency: GcTerrainTileType
struct GcObjectSpawnDataArray
{
	std::vector<NMS_GameComponents::GcObjectSpawnData> Objects;
	int32_t MaxObjectsToSpawn;
	NMS_GameComponents::GcTerrainTileType TileType;
};

//Dependency: NMSString0x10
struct GcIDEnum
{
	std::vector<NMS::NMSString0x10> Values;
};

struct GcMissionConditionPlatform
{
	enum class MissionPlatformEnum : uint32_t
	{
		Undefined = 0,
		NintendoSwitch = 1,
	};

	NMS_GameComponents::GcMissionConditionPlatform::MissionPlatformEnum MissionPlatform;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkSketchNodeData
struct TkSketchComponentData
{
	std::vector<NMS_Toolkit::TkSketchNodeData> Nodes;
	float GraphPosX;
	float GraphPosY;
	float GraphZoom;
	float UpdateRateMultiplier;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcInputActionMapping
{
	int32_t RemappedKey;
	int32_t RemappedPad;
};

//Dependency: GcNameGeneratorWord
//Dependency: TkTextureResource
struct GcProductProceduralOnlyData
{
	NMS_GameComponents::GcNameGeneratorWord Description;
	NMS_Toolkit::TkTextureResource HeroIcon;
	NMS_Toolkit::TkTextureResource Icon;
	int32_t AgeMax;
	int32_t AgeMin;
	int32_t BaseValueMax;
	int32_t BaseValueMin;
	int32_t DropWeight;
};

//Dependency: GcProductData
//Dependency: GcProductProceduralOnlyData
//Dependency: GcProceduralProductWord
//Dependency: GcNameGeneratorWord
//Dependency: GcBiomeList
//Dependency: NMSString0x20
struct GcProceduralProductData
{
	NMS_GameComponents::GcProductData Product;
	NMS_GameComponents::GcProductProceduralOnlyData ProceduralData[3];
	NMS_GameComponents::GcNameGeneratorWord NameGeneratorBase;
	std::vector<NMS_GameComponents::GcProceduralProductWord> NameGeneratorWordList;
	NMS_GameComponents::GcBiomeList PerBiomeDropWeights;
	int32_t NameGeneratorLegacyRolls;
	NMS::NMSString0x20 DeployableProductID;
	bool RecordsStat;
};

struct GcRewardCleanUpPulseEncounter
{
};

//Dependency: NMSString0x10
struct GcPlayerWeaponData
{
	NMS::NMSString0x10 Reticle;
};

//Dependency: NMSString0x10
struct GcModularCustomisationProductLookupList
{
	std::vector<NMS::NMSString0x10> ProductLookupList;
};

struct GcResourceOrigin
{
	enum class ResourceOriginEnum : uint32_t
	{
		Terrain = 0,
		Crystal = 1,
		Asteroid = 2,
		Robot = 3,
		Depot = 4,
	};

	NMS_GameComponents::GcResourceOrigin::ResourceOriginEnum ResourceOrigin;
};

//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcRobotLaserData
{
	NMS::Colour LaserColour;
	NMS::Vector3f LaserLightOffset;
	NMS::NMSString0x10 LaserID;
	float LaserActiveSpringTime;
	float LaserChargeTime;
	float LaserLightAttackSize;
	float LaserLightChargeSize;
	int32_t LaserMiningDamage;
	float LaserSpringTime;
	float LaserTime;
};

//Dependency: GcBuildingColourPalette
//Dependency: GcWeightedColourId
struct GcSettlementColourUpgradeData
{
	std::vector<NMS_GameComponents::GcBuildingColourPalette> BuildingPalettes;
	std::vector<NMS_GameComponents::GcWeightedColourId> DefaultPalettes;
};

struct GcInventoryFilterOptions
{
	enum class InventoryFilterEnum : uint32_t
	{
		All = 0,
		Substance = 1,
		HighValue = 2,
		Consumable = 3,
		Deployable = 4,
	};

	NMS_GameComponents::GcInventoryFilterOptions::InventoryFilterEnum InventoryFilter;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x40
struct GcWikiPage
{
	NMS::NMSString0x20A PageID;
	NMS_Toolkit::TkTextureResource ContentImage;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x40 Content;
	NMS::NMSString0x40 VRAnyHandControlContent;
	NMS::NMSString0x40 VRContent;
	NMS::NMSString0x40 VRMoveControllerContent;
};

//Dependency: GcMissionSchedulingData
struct GcMissionSchedulesTable
{
	std::vector<NMS_GameComponents::GcMissionSchedulingData> Schedules;
};

//Dependency: GcFiendCrime
//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessageFiendCrime
{
	NMS::Vector3f Position;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;
	float Value;
	NMS::GcNodeID Victim;
};

struct GcInventoryStoreBalance
{
	float DeconstructRefundPercentage;
	int32_t PlayerPersonalInventoryCargoHeight;
	int32_t PlayerPersonalInventoryCargoWidth;
	int32_t PlayerPersonalInventoryTechHeight;
	int32_t PlayerPersonalInventoryTechWidth;
};

struct GcMissionConditionVisorActive
{
};

struct GcItemFilterStageDataAcceptAll
{
};

struct GcItemFilterStageDataNegation
{
	NMSTemplate Child;
};

//Dependency: GcProductCategory
//Dependency: NMSString0x20A
struct GcItemFilterStageDataProductCategory
{
	NMS::NMSString0x20A DisabledMessage;
	NMS_GameComponents::GcProductCategory Category;
};

//Dependency: NMSString0x10
struct GcRealitySubstanceCraftingMix
{
	NMS::NMSString0x10 ID;
	int32_t Ratio;
};

//Dependency: GcRealitySubstanceCraftingMix
//Dependency: NMSString0x10
struct GcRealityCraftingRecipeData
{
	NMS_GameComponents::GcRealitySubstanceCraftingMix Inputs[3];
	NMS::NMSString0x10 OutputID;
};

//Dependency: GcRealityCraftingRecipeData
//Dependency: GcRealitySubstanceData
struct GcSubstanceTable
{
	std::vector<NMS_GameComponents::GcRealityCraftingRecipeData> Crafting;
	std::vector<NMS_GameComponents::GcRealitySubstanceData> Table;
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
struct GcModularCustomisationColourGroup
{
	NMS::NMSString0x20A Title;
	std::vector<NMS_Toolkit::TkPaletteTexture> Palettes;
	int32_t DefaultColourIndex;
};

//Dependency: GcModularCustomisationColourGroup
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationColourData
{
	NMS::NMSString0x20A RequiredTextureOption;
	std::vector<NMS_GameComponents::GcModularCustomisationColourGroup> ColourGroups;
	NMS::NMSString0x10 PaletteID;
	NMS::NMSString0x10 RequiredTextureGroup;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcJourneyMilestoneData
{
	NMS::NMSString0x20A JourneyMilestoneTitle;
	NMS::NMSString0x20A JourneyMilestoneTitleLower;
	NMS::NMSString0x10 JourneyMilestoneId;
	int32_t PointsToUnlock;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceShowMissionUpdateMessage
{
	enum class PlayMusicStingEnum : uint32_t
	{
		None = 0,
		Start = 1,
		End = 2,
		Corrupted = 3,
	};

	enum class MissionUpdateMessageEnum : uint32_t
	{
		Start = 0,
		End = 1,
	};

	NMS::NMSString0x20A CustomMessageLocID;
	NMS::NMSString0x20A CustomObjectiveLocID;
	NMS::VariableSizeString DebugText;
	NMS_GameComponents::GcMissionSequenceShowMissionUpdateMessage::MissionUpdateMessageEnum MissionUpdateMessage;
	NMS_GameComponents::GcMissionSequenceShowMissionUpdateMessage::PlayMusicStingEnum PlayMusicSting;
	bool SetMissionSelected;
	bool ShowChangeMissionNotify;
	bool SuppressNotificationsNotFromThisMission;
	bool WaitForMessageOver;
};

//Dependency: GcJourneyMilestoneData
struct GcJourneyMilestoneTable
{
	std::vector<NMS_GameComponents::GcJourneyMilestoneData> JourneyMilestoneTable;
};

//Dependency: GcCreaturePetMood
struct GcPetBehaviourMoodModifier
{
	float CooldownModifierMax;
	float CooldownModifierMin;
	NMS_GameComponents::GcCreaturePetMood Mood;
	float MoodMax;
	float MoodMin;
	float WeightModifierMax;
	float WeightModifierMin;
};

//Dependency: GcCombatEffectDamageMultiplier
//Dependency: GcImpactCombatEffectData
//Dependency: GcDamageType
//Dependency: GcProjectileImpactData
//Dependency: VariableSizeString
//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcLaserBeamData
{
	NMS::Colour Colour;
	NMS::Vector3f ImpactOffset;
	NMS::Colour LightColour;
	NMS::VariableSizeString BeamCoreFile;
	NMS::VariableSizeString BeamFile;
	NMS::VariableSizeString BeamTipFile;
	std::vector<NMS_GameComponents::GcCombatEffectDamageMultiplier> CombatEffectDamageMultipliers;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnImpact;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 ImpactEffect;
	std::vector<NMS_GameComponents::GcProjectileImpactData> Impacts;
	NMS::NMSString0x10 PlayerDamage;
	NMS_GameComponents::GcAudioWwiseEvents AudioOverheat;
	NMS_GameComponents::GcAudioWwiseEvents AudioStart;
	NMS_GameComponents::GcAudioWwiseEvents AudioStop;
	float CriticalHitModifier;
	NMS_GameComponents::GcDamageType DamageType;
	int32_t DefaultDamage;
	float DroneImpulse;
	float EndTime;
	float ExtraPlayerDamage;
	float HitRate;
	float HitWidth;
	float ImpactPusherPulseOffset;
	float ImpactPusherPulseSpeed;
	float ImpactPusherRadius;
	float ImpactPusherWeight;
	float LightIntensity;
	float MiningHitRate;
	float PhysicsPush;
	float PiercingDamagePercentage;
	float PulseAmplitude;
	float PulseFrequency;
	float RagdollPush;
	float Speed;
	float StartTime;
	float Width;
	bool ApplyCombatLevelMultipliers;
	bool CanMine;
	bool CreatesImpactPusher;
	bool HasLight;
	bool SingleHit;
};

struct GcMissionConditionSystemHasGasGiant
{
};

struct GcMissionConditionNearFossilDisplay
{
	float Distance;
	bool MustBeComplete;
};

//Dependency: NMSString0x20A
struct GcRewardDisableSentinels
{
	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x20A WantedBarMessage;
	float Duration;
};

//Dependency: GcInventoryType
//Dependency: NMSString0x10
struct GcMaintenanceGroupEntry
{
	NMS::NMSString0x10 Id;
	float OverrideAmount;
	float ProbabilityWeighting;
	NMS_GameComponents::GcInventoryType Type;
};

//Dependency: GcMaintenanceGroupEntry
struct GcMaintenanceGroup
{
	std::vector<NMS_GameComponents::GcMaintenanceGroupEntry> Table;
};

//Dependency: GcInventoryClass
//Dependency: GcWeaponClasses
struct GcMissionConditionHasMultiTool
{
	NMS_GameComponents::GcInventoryClass InventoryClass;
	NMS_GameComponents::GcWeaponClasses WeaponClass;
	bool BetterClassMatches;
	bool CheckAllTools;
	bool MustMatchWeaponClass;
	bool TakeValueFromSeasonData;
};

struct GcMissionConditionCurrentPlanetVisited
{
	bool JustTestSeasonStartPlanetHack;
};

struct GcWikiTopicType
{
	enum class WikiTopicTypeEnum : uint32_t
	{
		Substances = 0,
		CustomSubstanceList = 1,
		Products = 2,
		CustomProductList = 3,
		CustomItemList = 4,
		Technologies = 5,
		CustomTechnologyList = 6,
		BuildableTech = 7,
		Construction = 8,
		TradeCommodities = 9,
		Curiosities = 10,
		Cooking = 11,
		Fish = 12,
		StoneRunes = 13,
		Words = 14,
		RecipesAll = 15,
		RecipesCooker = 16,
		RecipesRefiner1 = 17,
		RecipesRefiner2 = 18,
		RecipesRefiner3 = 19,
		Guide = 20,
		Stories = 21,
		TreasureWonders = 22,
		WeirdBasePartWonders = 23,
		PlanetWonders = 24,
		CreatureWonders = 25,
		FloraWonders = 26,
		MineralWonders = 27,
		CustomWonders = 28,
		ExhibitBones = 29,
		DebugSweep = 30,
	};

	NMS_GameComponents::GcWikiTopicType::WikiTopicTypeEnum WikiTopicType;
};

//Dependency: GcStoryEntry
//Dependency: GcInteractionType
//Dependency: GcWikiTopicType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcStoryPage
{
	NMS::NMSString0x20A ID;
	NMS_Toolkit::TkTextureResource Icon;
	std::vector<NMS_GameComponents::GcStoryEntry> Entries;
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcWikiTopicType WikiGridType;
	bool StatIsBitmask;
	bool UseGridType;
};

//Dependency: GcMaintenanceGroup
struct GcMaintenanceGroupsTable
{
	NMS_GameComponents::GcMaintenanceGroup Groups[10];
};

struct GcMissionConditionHasIllegalGoods
{
	bool IncludeNipNip;
};

//Dependency: GcRealityGameIcons
//Dependency: GcGenericIconTypes
//Dependency: NMSString0x20A
struct GcMarkerComponentData
{
	enum class DisplayModeEnum : uint32_t
	{
		Always = 0,
		SpaceOnly = 1,
		PlanetOnly = 2,
	};

	NMS::NMSString0x20A CustomName;
	NMS_GameComponents::GcRealityGameIcons CustomIcon;
	NMS_GameComponents::GcMarkerComponentData::DisplayModeEnum DisplayMode;
	NMS_GameComponents::GcGenericIconTypes Icon;
	float Radius;
	bool ShipScannable;
	bool UseCustomIcon;
};

//Dependency: GcSolarSystemLocatorChoice
struct GcSolarSystemEventWarpPlayer
{
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	float Time;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

struct GcSmokeTestOptions
{
	float CameraFastHeight;
	float CameraFastMoveSpeed;
	float CameraHeight;
	float CameraMoveSpeed;
	float CameraPitchAngleDeg;
	float CameraPitchSpeedRange;
	float CameraRotateSpeed;
	int32_t GifFrames;
	float GifTimeBetweenKeyframes;
	float InitialPause;
	float PlanetFlightTime;
	float PlanetFlightTimeout;
	int32_t SmokeBotNumWalksBeforeWarp;
	float SmokeBotTurnAngle;
	float SmokeTestFlashTimeDuration;
	bool GifMode;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcMechMeshPartData
struct GcMechMeshPartTable
{
	NMS_GameComponents::GcMechMeshPartData Parts[5];
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcShipAICombatDefinition
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 Behaviour;
	NMS::NMSString0x10 DamageMultiplier;
	NMS::NMSString0x10 Engine;
	NMS::NMSString0x10 Gun;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PlanetBehaviour;
	NMS::NMSString0x10 PlanetEngine;
	NMS::NMSString0x10 Reward;
	NMS::NMSString0x10 Shield;
	int32_t Health;
	int32_t LaserDamageLevel;
	int32_t LevelledExtraHealth;
	int32_t RewardCount;
	bool UsesFuelRods;
	bool UsesShieldGenerators;
};

//Dependency: NMSString0x10
struct GcPlayerMissionUpgradeMapEntry
{
	std::vector<NMS::NMSString0x10> CompletedMissions;
	NMS::NMSString0x10 Mission;
	NMS::NMSString0x10 NewMission;
	int32_t CompletePoint;
	int32_t MinProgress;
};

//Dependency: GcPlayerMissionUpgradeMapEntry
struct GcPlayerMissionUpgradeMapTable
{
	std::vector<NMS_GameComponents::GcPlayerMissionUpgradeMapEntry> MissionProgressTable;
};

//Dependency: GcPetBehaviours
//Dependency: GcAlienMood
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector3f
//Dependency: GcNodeID
struct GcMessagePetBehaviourEvent
{
	NMS::Vector3f Direction;
	NMS::Vector3f Position;
	NMS::NMSString0x20A UserData;
	NMS::NMSString0x10 BehaviourEvent;
	NMS_GameComponents::GcPetBehaviours ForceBehaviour;
	NMS_GameComponents::GcAlienMood Mood;
	NMS::GcNodeID SourceNode;
};

//Dependency: GcImpactCombatEffectData
//Dependency: GcCombatEffectDamageMultiplier
//Dependency: GcDamageType
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: GcNodeID
struct GcMessageProjectileImpact
{
	enum class HitTypeEnum : uint32_t
	{
		Shootable = 0,
		Terrain = 1,
		Generic = 2,
	};

	NMS::Vector3f PosLocal;
	NMS::Vector3f PosOffset;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffects;
	std::vector<NMS_GameComponents::GcCombatEffectDamageMultiplier> DamageMultipliers;
	NMS::NMSString0x10 Id;
	int32_t Damage;
	NMS_GameComponents::GcMessageProjectileImpact::HitTypeEnum HitType;
	NMS::GcNodeID Node;
	NMS_GameComponents::GcDamageType Type;
	bool Critical;
	bool Ineffective;
	bool LaserHeatBoost;
};

//Dependency: GcUnlockableSeasonReward
struct GcUnlockableSeasonRewards
{
	std::vector<NMS_GameComponents::GcUnlockableSeasonReward> Table;
};

struct GcMessageProjectileLaunch
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector2f
struct TkInputFrame
{
	NMS::Vector2f LeftStick;
	NMS::Vector2f RightStick;
	float LeftTrigger;
	float RightTrigger;
	int16_t Buttons;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcMessageSubstanceMined
{
	NMS::NMSString0x10 Substance;
	int32_t Amount;
};

struct GcMinMaxFloat
{
	float Max;
	float Min;
};

//Dependency: NMSString0x10
struct GcMinimumUseConstraint
{
	NMS::NMSString0x10 Group;
	std::vector<NMS::NMSString0x10> Modules;
	int32_t MinUses;
};

//Dependency: GcMissionCommunityMissionData
//Dependency: NMSString0x10
struct GcMissionCommunityData
{
	std::vector<NMS_GameComponents::GcMissionCommunityMissionData> CommunityMissionsData;
	std::vector<NMS::NMSString0x10> CommunityMissionsIDs;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceProductAmountNeeded
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Item;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 ToBuild;
	bool IsRepair;
};

//Dependency: TkCurveType
struct GcProjectileLineData
{
	float BulletGlowWidthMax;
	float BulletGlowWidthMin;
	float BulletGlowWidthTime;
	float BulletLength;
	float BulletMaxScaleDistance;
	float BulletMinScaleDistance;
	float BulletScaler;
	float BulletScalerMaxDist;
	float BulletScalerMinDist;
	NMS_Toolkit::TkCurveType BulletGlowWidthCurve;
};

//Dependency: Colour
//Dependency: GcAudioWwiseEvents
//Dependency: GcResourceElement
//Dependency: GcImpactCombatEffectData
//Dependency: GcDamageType
//Dependency: GcProjectileLineData
//Dependency: GcProjectileImpactData
//Dependency: Vector3f
//Dependency: NMSString0x10
struct GcProjectileData
{
	enum class ClassEnum : uint32_t
	{
		Player = 0,
		PlayerShip = 1,
		Ship = 2,
		Robot = 3,
	};

	enum class BehaviourFlagsEnum : uint32_t
	{
		None = 0,
		DestroyTerrain = 1,
		DestroyAsteroids = 2,
		GatherResources = 4,
		Homing = 8,
		HomingLaser = 16,
		ScareCreatures = 32,
	};

	NMS::Colour Colour;
	NMS::Vector3f ImpactOffset;
	NMS::Colour LightColour;
	NMS_GameComponents::GcResourceElement Model;
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffectsOnImpact;
	NMS::NMSString0x10 CriticalImpact;
	NMS::NMSString0x10 DefaultImpact;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcProjectileImpactData> Impacts;
	NMS::NMSString0x10 PlayerDamage;
	NMS_GameComponents::GcProjectileLineData CustomBulletData;
	NMS_GameComponents::GcProjectileData::BehaviourFlagsEnum BehaviourFlags;
	float BounceDamping;
	float BounceFinalStopTime;
	float BounceMaxSpeed;
	float CapsuleHeight;
	NMS_GameComponents::GcAudioWwiseEvents ChargedFireAudioEvent;
	NMS_GameComponents::GcProjectileData::ClassEnum Class;
	float CriticalHitModifier;
	float DamageImpactMergeTime;
	float DamageImpactMinDistance;
	float DamageImpactTimeBetweenNumbers;
	NMS_GameComponents::GcDamageType DamageType;
	int32_t DefaultBounces;
	int32_t DefaultDamage;
	float DefaultSpeed;
	float DroneImpulse;
	float ExtraPlayerDamage;
	NMS_GameComponents::GcAudioWwiseEvents FireAudioEvent;
	float Gravity;
	float HomingDelay;
	float HomingDelayAcceleration;
	float HomingDuration;
	float Life;
	float MaxHomingAcceleration;
	float MaxHomingTargetAngleLower;
	float MaxHomingTargetAngleLowerDistance;
	float MaxHomingTargetAngleUpper;
	float MaxHomingTargetAngleUpperDistance;
	float Offset;
	NMS_GameComponents::GcAudioWwiseEvents OverheatAudioEvent;
	float PhysicsPush;
	float PiercingDamagePercentage;
	float PusherForce;
	float PusherImpactDuration;
	float PusherImpactForce;
	float PusherImpactRadius;
	float PusherRadius;
	float Radius;
	float RagdollPush;
	float Scale;
	bool ApplyCombatLevelMultipliers;
	bool HitOnBounce;
	bool IsAutonomous;
	bool OverrideLightColour;
	bool ShootableCanOverrideImpact;
	bool UseCustomBulletData;
	bool UseDamageNumberData;
	bool UsePersistentAudio;
	bool UsePusherForImpact;
	bool UsePusherForProjectile;
};

//Dependency: GcLaserBeamData
//Dependency: GcProjectileData
struct GcProjectileDataTable
{
	std::vector<NMS_GameComponents::GcLaserBeamData> Lasers;
	std::vector<NMS_GameComponents::GcProjectileData> Table;
};

struct GcMissionConditionAbandonedFreighterExplored
{
	int32_t TargetRooms;
};

//Dependency: Vector3f
//Dependency: NMSString0x40
struct GcSpringLink
{
	enum class PivotAnchorsToEnum : uint32_t
	{
		Itself = 0,
		Parent = 1,
		Node = 2,
		NodeWithAnchor = 3,
	};

	enum class ApplyMotionScaleInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyMotionLimitsInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyAngularMotionScaleInEnum : uint32_t
	{
		Disabled = 0,
		Uniform = 1,
		Itself = 2,
		Parent = 3,
		Component = 4,
	};

	enum class ApplyAngularLimitsInEnum : uint32_t
	{
		Disabled = 0,
		Itself = 1,
		Parent = 2,
		Component = 3,
	};

	NMS::Vector3f AngularLimitMaxDeg;
	NMS::Vector3f AngularLimitMinDeg;
	NMS::Vector3f AngularMotionLimitBounciness;
	NMS::Vector3f AngularMotionScale;
	NMS::Vector3f CentreOfMassLocal;
	NMS::Vector3f MotionLimitBounciness;
	NMS::Vector3f MotionLimitMax;
	NMS::Vector3f MotionLimitMin;
	NMS::Vector3f MotionScale;
	NMS::Vector3f PivotAnchorLocal;
	NMS::Vector3f PivotLocal;
	std::vector<NMS::NMSString0x40> NodeNames;
	float AirSpeedFromMovementSpeedScale;
	float AngularDampingCriticality;
	float AngularMotionScale_Uniform;
	float AngularNaturalFrequency;
	NMS_GameComponents::GcSpringLink::ApplyAngularLimitsInEnum ApplyAngularLimitsIn;
	NMS_GameComponents::GcSpringLink::ApplyAngularMotionScaleInEnum ApplyAngularMotionScaleIn;
	float ApplyAngularSpringInMovingFrame;
	float ApplyGameGravity;
	float ApplyGameWind;
	float ApplyInfluenceOfTranslationInMovingFrame;
	NMS_GameComponents::GcSpringLink::ApplyMotionLimitsInEnum ApplyMotionLimitsIn;
	NMS_GameComponents::GcSpringLink::ApplyMotionScaleInEnum ApplyMotionScaleIn;
	float DampingCriticality;
	float DistanceWhereRotationMatchesLinear;
	float InfluenceOfTranslation;
	float MotionLimit_MaxDetachmentDistance;
	float MotionScale_Uniform;
	float NaturalFrequency;
	NMS_GameComponents::GcSpringLink::PivotAnchorsToEnum PivotAnchorsTo;
	float SpringHangsDown;
	NMS::NMSString0x40 Name;
	NMS::NMSString0x40 PivotAnchorNode;
	bool AngularSpringEnabled;
	bool ApplySpringInMovingFrame;
	bool Enabled;
	bool PositionalSpringEnabled;
	bool SpringCollides;
	bool SpringPivots;
};

//Dependency: GcCollisionCapsule
//Dependency: GcSpringLink
//Dependency: NMSString0x40
struct GcSpringComponentData
{
	std::vector<NMS_GameComponents::GcCollisionCapsule> CollisionCapsules;
	std::vector<NMS_GameComponents::GcSpringLink> SpringLinks;
	NMS::NMSString0x40 Name;
	bool Enabled;
};

struct GcMissionConditionAbandonedMode
{
	bool Enabled;
};

struct GcMissionConditionAbandonedOrEmptySystem
{
	enum class MissionSystemTypeEnum : uint32_t
	{
		Either = 0,
		Empty = 1,
		Abandoned = 2,
		SeasonForcedAbandoned = 3,
	};

	NMS_GameComponents::GcMissionConditionAbandonedOrEmptySystem::MissionSystemTypeEnum MissionSystemType;
};

struct GcMissionConditionAllMilestonesComplete
{
	int32_t ForStage;
	bool UseSeasonOverrideMessage;
};

struct GcMissionConditionAutoPowerEnabled
{
	bool Enabled;
};

//Dependency: NMSString0x10
struct GcMissionConditionBasePartNear
{
	NMS::NMSString0x10 PartID;
	float Distance;
	bool TakeIDFromSeasonData;
};

//Dependency: GcInWorldUIScreenData
//Dependency: Vector2f
struct GcProjectorOffsetData
{
	NMS_GameComponents::GcInWorldUIScreenData Active;
	NMS_GameComponents::GcInWorldUIScreenData Inactive;
	NMS::Vector2f ScreenScale;
	float Scale;
};

struct GcMissionConditionBaseRequiresPower
{
	int32_t MinNumPowerUsingParts;
};

struct GcMissionConditionBinocsActive
{
};

struct GcMissionConditionBlackHolesRevealed
{
};

//Dependency: NMSString0x10
struct GcMissionConditionCanMakeItem
{
	NMS::NMSString0x10 TargetItem;
	int32_t Amount;
};

struct GcRewardNexus
{
	bool Allow;
};

//Dependency: NMSString0x10
struct GcMissionConditionCanPayCost
{
	NMS::NMSString0x10 CostID;
};

//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcMissionConditionHasFuel
{
	NMS::NMSString0x10 SpecificTechID;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;
	bool FormatTextAsPercentage;
};

//Dependency: GcInteractionMissionState
//Dependency: NMSString0x20A
struct GcMissionConditionCheckScanEventMissionState
{
	NMS::NMSString0x20A Event;
	NMS_GameComponents::GcInteractionMissionState RequiredState;
	bool AlsoAcceptMaintenanceDone;
};

struct GcMissionConditionConvertedFromSeason
{
	int32_t Season;
};

struct GcMissionConditionCreatureSummoned
{
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardActivateEncounterSentinels
{
	NMS::NMSString0x20A EncounterComponentScanEvent;
	NMS::NMSString0x10 EncounterOverride;
};

//Dependency: GcPlayerHazardType
struct GcRewardRefreshHazProt
{
	float Amount;
	NMS_GameComponents::GcPlayerHazardType SpecificHazard;
	bool SetNotAdd;
	bool Silent;
};

struct GcMissionConditionCriticalMissionsDone
{
	bool OnlyCheckSeasonalCriticals;
	bool Warped;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionCurrentSlope
{
	float SlopeAngle;
	NMS_Toolkit::TkEqualityEnum Test;
	bool Abs;
};

struct GcMissionConditionDamagedFrigateAtHome
{
};

//Dependency: NMSString0x20A
struct GcMissionConditionRefinerActive
{
	NMS::NMSString0x20A ActiveRecipe;
	int32_t AmountToMake;
	bool HasFuel;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkPhysicsData
{
	float AngularDamping;
	float Friction;
	float Gravity;
	float LinearDamping;
	float Mass;
	float RollingFriction;
};

//Dependency: TkAnimationAction
//Dependency: TkAnimationGameData
//Dependency: NMSString0x40
//Dependency: TkAnimationNotify
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkAnimationData
{
	enum class CreatureSizeEnum : uint32_t
	{
		AllSizes = 0,
		SmallOnly = 1,
		LargeOnly = 2,
	};

	enum class AnimTypeEnum : uint32_t
	{
		Loop = 0,
		OneShot = 1,
		OneShotBlendable = 2,
		Control = 3,
	};

	NMS::NMSString0x20A Mask;
	std::vector<NMS_Toolkit::TkAnimationAction> Actions;
	NMS::NMSString0x10 AdditiveBaseAnim;
	NMS::NMSString0x10 Anim;
	std::vector<NMS::NMSString0x40> ExtraStartNodes;
	NMS::VariableSizeString Filename;
	std::vector<NMS_Toolkit::TkAnimationNotify> Notifies;
	NMS_Toolkit::TkAnimationGameData GameData;
	float ActionFrame;
	float ActionStartFrame;
	float AdditiveBaseFrame;
	NMS_Toolkit::TkAnimationData::AnimTypeEnum AnimType;
	NMS_Toolkit::TkAnimationData::CreatureSizeEnum CreatureSize;
	float Delay;
	int32_t FrameEnd;
	int32_t FrameEndGame;
	int32_t FrameStart;
	float OffsetMax;
	float OffsetMin;
	int32_t Priority;
	float Speed;
	NMS::NMSString0x40 StartNode;
	bool Active;
	bool Additive;
	bool AnimGroupOverride;
	bool Has30HzFrames;
	bool Mirrored;
};

//Dependency: TkAnimationData
//Dependency: NMSString0x10
struct TkAnimationOverrideList
{
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	NMS::NMSString0x10 Name;
};

//Dependency: TkAnimationData
//Dependency: TkAnimationOverrideList
//Dependency: TkBlendTreeLibrary
struct TkAnimationLibrary
{
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	std::vector<NMS_Toolkit::TkAnimationOverrideList> Overrides;
	NMS_Toolkit::TkBlendTreeLibrary Trees;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionHasGrabbableTarget
{
};

struct GcMissionConditionSettlementsEnabled
{
};

//Dependency: NMSString0x10
struct GcRewardRechargeTech
{
	NMS::NMSString0x10 TechID;
	bool Silent;
};

struct GcMissionConditionEggMachinePageOpen
{
};

struct GcMissionConditionElevation
{
	float HeightAboveSea;
	bool AllowInShip;
	bool TakeAmountFromSeasonData;
};

//Dependency: NMSString0x10
struct GcMissionConditionExpeditionContainsReward
{
	NMS::NMSString0x10 RewardID;
};

//Dependency: NMSString0x80
struct GcWFCDecorationFace
{
	enum class CanWalkEnum : uint32_t
	{
		None = 0,
		RequireCanWalk = 1,
		RequireCanNotWalk = 2,
	};

	NMS_GameComponents::GcWFCDecorationFace::CanWalkEnum CanWalk;
	NMS::NMSString0x80 RequiredFace;
};

//Dependency: GcWeightedResource
//Dependency: GcWFCDecorationFace
//Dependency: NMSString0x10
struct GcWFCDecorationItem
{
	enum class LevelEnum : uint32_t
	{
		Everywhere = 0,
		GroundLevelOnly = 1,
		AboveGroundOnly = 2,
	};

	enum class InsideOutsideEnum : uint32_t
	{
		Both = 0,
		InteriorOnly = 1,
		ExteriorOnly = 2,
	};

	std::vector<NMS::NMSString0x10> ApplicableModules;
	NMS::NMSString0x10 Group;
	NMS::NMSString0x10 Name;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	NMS_GameComponents::GcWFCDecorationFace Back;
	NMS_GameComponents::GcWFCDecorationFace Down;
	NMS_GameComponents::GcWFCDecorationFace Forward;
	NMS_GameComponents::GcWFCDecorationFace Left;
	NMS_GameComponents::GcWFCDecorationFace Right;
	NMS_GameComponents::GcWFCDecorationFace Up;
	NMS_GameComponents::GcWFCDecorationItem::InsideOutsideEnum InsideOutside;
	NMS_GameComponents::GcWFCDecorationItem::LevelEnum Level;
	int32_t MaxPerBuilding;
	int32_t MinPerBuilding;
	float NoSceneProbability;
	float RelativeProbability;
	bool DecorationThemes[5];
	bool Include;
	bool IsRoof;
	bool RequireAboveTerrain;
	bool RequireReachable;
	bool Rotate;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionExpeditionCount
{
	int32_t ExpeditionCount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool ActiveExpeditionsCountAsFueled;
	bool OnlyCountAwaitingDebrief;
	bool OnlyCountIfActive;
	bool OnlyCountIfActiveWithRemainingEvents;
	bool OnlyCountIfFueled;
};

struct GcMissionConditionExtraSuitSlots
{
	int32_t Count;
};

//Dependency: GcMissionFaction
struct GcMissionConditionFactionRank
{
	NMS_GameComponents::GcMissionFaction Faction;
	int32_t Rank;
	bool UseSystemRace;
};

struct GcMissionConditionPirateFreighterSurrendered
{
};

struct GcMissionConditionForceHideMultiplayer
{
};

struct GcMissionConditionHasActiveDetailMessage
{
};

struct GcMissionConditionHasActiveStatsMessage
{
};

struct GcMissionConditionHasAnySettlementBuildingInProgress
{
	bool IgnoreIfTimerActive;
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasCommunicatorSignal
{
	NMS::NMSString0x20A SpecificSignalID;
	bool CallMustBePending;
	bool SpecificSignalIsCurrentIntervention;
};

struct GcMissionConditionHasCreatureEggItem
{
	enum class EggItemTypeEnum : uint32_t
	{
		Egg = 0,
		ValidCatalyst = 1,
	};

	NMS_GameComponents::GcMissionConditionHasCreatureEggItem::EggItemTypeEnum EggItemType;
	bool IncludeEggMachineInventoryInSearch;
};

//Dependency: NMSString0x10
struct GcMissionConditionUnclaimedStageReward
{
	NMS::NMSString0x10 OptionalSpecificProductID;
};

//Dependency: NMSString0x10
struct GcMissionConditionHasEntitlement
{
	NMS::NMSString0x10 Entitlement;
};

//Dependency: GcGalaxyStarTypes
struct GcMissionConditionSystemStarClass
{
	NMS_GameComponents::GcGalaxyStarTypes Class;
};

//Dependency: GcFishData
//Dependency: TkEqualityEnum
struct GcMissionConditionHasFish
{
	NMS_GameComponents::GcFishData TargetFishInfo;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum QualityTest;
	NMS_Toolkit::TkEqualityEnum SizeTest;
	bool TakeAmountFromSeasonData;
};

struct GcMissionConditionHasFuelForTakeoff
{
	bool FormatTextAsPercentage;
};

struct GcRewardTriggerStorm
{
	float Duration;
};

//Dependency: GcMaintenanceElementGroups
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionConditionHasIngredientsForItem
{
	NMS::NMSString0x20A TakeTargetItemsFromScanEvent;
	std::vector<NMS::NMSString0x10> TargetItems;
	int32_t ExpectedTargetItemsFromScanEvent;
	int32_t HorribleJustFormatTargetAmount;
	NMS_GameComponents::GcMaintenanceElementGroups ScanEventTargetGroup;
	bool FormatTextOneReqAtATime;
	bool NeverReturnTrueOnlyUseForFormatting;
	bool Repair;
	bool TakeTargetFromSeasonData;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificTechRecipes
{
	NMS::NMSString0x20A SetName;
	NMS::NMSString0x10 DisplayTechId;
	std::vector<NMS::NMSString0x10> TechIds;
	bool Silent;
};

//Dependency: NMSString0x10
struct GcMissionConditionHasItemFromListOfValue
{
	std::vector<NMS::NMSString0x10> ItemList;
	int32_t UnitValue;
	bool UseDefaultAmount;
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasMessageWithTitle
{
	NMS::NMSString0x20A TitleLocId;
};

struct GcMissionConditionUsingThirdPersonCamera
{
	enum class UsingCameraModeEnum : uint32_t
	{
		OnFoot = 0,
		Ship = 1,
		Vehicle = 2,
	};

	NMS_GameComponents::GcMissionConditionUsingThirdPersonCamera::UsingCameraModeEnum UsingCameraMode;
};

//Dependency: NMSString0x10
struct GcMissionConditionHasMilestoneThatCouldRewardItem
{
	NMS::NMSString0x10 Item;
	NMS::NMSString0x10 Recipe;
};

//Dependency: NMSString0x10
struct GcMissionConditionHasPendingSettlementJudgement
{
	NMS::NMSString0x10 SpecificID;
};

//Dependency: GcMissionFaction
struct GcMissionConditionHasProcMissionForFaction
{
	NMS_GameComponents::GcMissionFaction Faction;
};

//Dependency: GcProceduralProductCategory
//Dependency: GcModularCustomisationResourceType
struct GcMissionConditionHasProcProduct
{
	NMS_GameComponents::GcProceduralProductCategory ProcProduct;
	NMS_GameComponents::GcModularCustomisationResourceType SpecificFossilType;
	bool ForceSearchFreighterAndChests;
	bool SearchEveryShip;
};

//Dependency: NMSString0x20A
struct GcMissionConditionHasProcTechnology
{
	NMS::NMSString0x20A ProcTechGroupID;
	int32_t Count;
};

struct GcModelViews
{
	enum class ModelViewsEnum : uint32_t
	{
		Suit = 0,
		SplitSuit = 1,
		SuitWithCape = 2,
		Weapon = 3,
		Ship = 4,
		SpookShip = 5,
		Vehicle = 6,
		DiscoveryMain = 7,
		DiscoveryThumbnail = 8,
		WonderThumbnail = 9,
		WonderThumbnailCreatureSmall = 10,
		WonderThumbnailCreatureMed = 11,
		WonderThumbnailCreatureLarge = 12,
		WonderThumbnailFloraSmall = 13,
		WonderThumbnailFloraLarge = 14,
		WonderThumbnailMineralSmall = 15,
		WonderThumbnailMineralLarge = 16,
		ToolboxMain = 17,
		ToolboxThumbnail = 18,
		TradeSuit = 19,
		TradeShip = 20,
		TradeCompareShips = 21,
		TradeCompareWeapons = 22,
		HUDThumbnail = 23,
		Interaction = 24,
		Freighter = 25,
		TradeFreighter = 26,
		TradeChest = 27,
		TradeCapsule = 28,
		TradeFrigate = 29,
		TerrainBall = 30,
		FreighterChest = 31,
		Submarine = 32,
		TradeCooker = 33,
		SuitRefiner = 34,
		SuitRefinerWithCape = 35,
		FreighterRepair = 36,
		DiscoveryPlanetaryMapping = 37,
		Mech = 38,
		PetThumbnail = 39,
		PetThumbnailUI = 40,
		PetLarge = 41,
		SquadronPilotLarge = 42,
		SquadronPilotThumbnail = 43,
		SquadronSpaceshipThumbnail = 44,
		VehicleRefiner = 45,
		FishingFloat = 46,
		ModelViewer = 47,
		None = 48,
	};

	NMS_GameComponents::GcModelViews::ModelViewsEnum ModelViews;
};

//Dependency: GcCurrency
//Dependency: GcInventoryContainer
//Dependency: GcCharacterCustomisationData
//Dependency: GcResourceElement
//Dependency: GcSpaceshipClasses
//Dependency: GcInventoryLayout
//Dependency: GcInventoryLayoutSizeType
//Dependency: GcModelViews
//Dependency: NMSString0x20A
struct GcRewardSpecificShip
{
	NMS_GameComponents::GcInventoryContainer ShipInventory;
	NMS_GameComponents::GcCharacterCustomisationData Customisation;
	NMS_GameComponents::GcResourceElement ShipResource;
	NMS::NMSString0x20A NameOverride;
	NMS_GameComponents::GcInventoryLayout ShipLayout;
	int32_t CostAmount;
	NMS_GameComponents::GcCurrency CostCurrency;
	NMS_GameComponents::GcModelViews ModelViewOverride;
	NMS_GameComponents::GcInventoryLayoutSizeType OverrideSizeType;
	NMS_GameComponents::GcSpaceshipClasses ShipType;
	bool FormatAsSeasonal;
	bool IsGift;
	bool IsRewardShip;
	bool UseOverrideSizeType;
};

//Dependency: GcBuildingClassification
struct GcMissionConditionHasSettlementBuilding
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	bool RequireComplete;
};

struct GcMissionConditionHasSettlementProductPending
{
};

struct GcMissionConditionHasSpareProcTech
{
};

//Dependency: NMSString0x10
struct GcMissionConditionHasTechnology
{
	NMS::NMSString0x10 Technology;
	bool AllowPartiallyInstalled;
	bool TakeTechFromSeasonData;
	bool TeachIfNotKnown;
};

struct GcMissionConditionHasTwitchReward
{
};

//Dependency: NMSString0x10
struct GcRewardSpecificTech
{
	NMS::NMSString0x10 TechId;
	bool AutoPin;
	bool HideInSeasonRewards;
	bool Silent;
};

struct GcSaveContextQuery
{
	enum class SaveContextQueryEnum : uint32_t
	{
		DontCare = 0,
		Season = 1,
		Main = 2,
		NoSeason = 3,
		NoMain = 4,
	};

	NMS_GameComponents::GcSaveContextQuery::SaveContextQueryEnum SaveContextQuery;
};

//Dependency: GcSaveContextQuery
struct GcMissionConditionHasValidSaveContext
{
	NMS_GameComponents::GcSaveContextQuery CurrentContext;
	NMS_GameComponents::GcSaveContextQuery DesiredContext;
};

struct GcMissionConditionHasWeapons
{
	enum class WeaponTestEnum : uint32_t
	{
		CombatPrimaryEquipped = 0,
		CombatSecondaryEquipped = 1,
		CombatPrimaryInstalled = 2,
		CombatSecondaryInstalled = 3,
		ExocraftCombatInstalled = 4,
		ExocraftCombatActive = 5,
	};

	int32_t CountForInstalledTests;
	NMS_GameComponents::GcMissionConditionHasWeapons::WeaponTestEnum WeaponTest;
};

//Dependency: GcPlayerHazardType
//Dependency: TkEqualityEnum
struct GcMissionConditionHazardLevel
{
	int32_t Level;
	NMS_GameComponents::GcPlayerHazardType SpecificHazard;
	NMS_Toolkit::TkEqualityEnum Test;
};

struct GcMissionConditionHazardsEnabled
{
	bool Enabled;
};

//Dependency: NMSString0x20A
struct GcMissionConditionInCombat
{
	enum class CombatTypeEnum : uint32_t
	{
		GroundCombat = 0,
		SpaceCombat = 1,
		FiendCombat = 2,
		BigFishFiendCombat = 3,
		CorruptedSentinelCombat = 4,
		GroundWormCombat = 5,
		RewardEncounter = 6,
		BugQueen = 7,
		JellyBoss = 8,
	};

	NMS::NMSString0x20A OverrideOSDMessage;
	NMS_GameComponents::GcMissionConditionInCombat::CombatTypeEnum CombatType;
	bool CheckAllFireteamMembers;
	bool EncouragesFightingSentinels;
	bool SpaceCombatTextCountsPirates;
	bool SpaceCombatTextCountsSentinels;
};

struct GcMissionConditionInMultiplayer
{
	bool MustBeInFireteam;
};

//Dependency: GcProceduralProductData
struct GcProceduralProductTable
{
	NMS_GameComponents::GcProceduralProductData Table[28];
};

struct GcMissionConditionInSeasonalUA
{
	int32_t SpecificRendevousPlanetIndex;
	bool CompleteIfRendezvousDone;
	bool SpecificIndexOnlyNeedsToMatchSystem;
	bool TakeIndexFromMilestoneStage;
	bool TakeIndexFromSeasonData;
};

//Dependency: NMSString0x100
struct GcMissionConditionInUA
{
	NMS::NMSString0x100 UA;
};

//Dependency: VariableSizeString
struct GcMissionSequenceExploreAbandonedFreighter
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Timer;
	bool RequireAllRoomsDone;
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcMissionConditionInteractionIndexChanged
{
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;
};

struct GcMissionConditionInventoryOpen
{
};

//Dependency: TkEqualityEnum
struct GcMissionConditionInventorySlots
{
	enum class SlotTypeEnum : uint32_t
	{
		FreeSlot = 0,
		BrokenSlot = 1,
	};

	enum class InventoryTestEnum : uint32_t
	{
		Current = 0,
		Personal = 1,
		Ship = 2,
		Vehicle = 3,
		Weapon = 4,
	};

	NMS_GameComponents::GcMissionConditionInventorySlots::InventoryTestEnum InventoryTest;
	int32_t SlotsFree;
	NMS_GameComponents::GcMissionConditionInventorySlots::SlotTypeEnum SlotType;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TestAllSlotsUnlocked;
	bool TestOnlyMainInventory;
};

struct GcMissionConditionIsAbandFreighterDoorOpen
{
	enum class AbandonedFreighterDoorStatusEnum : uint32_t
	{
		DungeonNotReady = 0,
		Locked = 1,
		Opening = 2,
		Open = 3,
	};

	NMS_GameComponents::GcMissionConditionIsAbandFreighterDoorOpen::AbandonedFreighterDoorStatusEnum AbandonedFreighterDoorStatus;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkProceduralModelList
{
	NMS::NMSString0x10 Id;
	std::vector<NMS::VariableSizeString> List;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcTradeData
struct GcTradeSettings
{
	NMS_GameComponents::GcTradeData BoneShop;
	NMS_GameComponents::GcTradeData BuilderShop;
	NMS_GameComponents::GcTradeData ExpShip;
	NMS_GameComponents::GcTradeData IllegalProds;
	NMS_GameComponents::GcTradeData LoneExp;
	NMS_GameComponents::GcTradeData LoneTra;
	NMS_GameComponents::GcTradeData LoneWar;
	NMS_GameComponents::GcTradeData MapShop;
	NMS_GameComponents::GcTradeData NexusTechSpecialist;
	NMS_GameComponents::GcTradeData PirateTech;
	NMS_GameComponents::GcTradeData PirateVisitor;
	NMS_GameComponents::GcTradeData Scrap;
	NMS_GameComponents::GcTradeData SeasonRewardsShop;
	NMS_GameComponents::GcTradeData Ship;
	NMS_GameComponents::GcTradeData ShipTechSpecialist;
	NMS_GameComponents::GcTradeData Shop;
	NMS_GameComponents::GcTradeData SmugglerStation;
	NMS_GameComponents::GcTradeData SpaceStation;
	NMS_GameComponents::GcTradeData SuitTechSpecialist;
	NMS_GameComponents::GcTradeData TechShop;
	NMS_GameComponents::GcTradeData TraShip;
	NMS_GameComponents::GcTradeData VehicleTechSpecialist;
	NMS_GameComponents::GcTradeData WarShip;
	NMS_GameComponents::GcTradeData WeapTechSpecialist;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcRealityIcon
{
	NMS::NMSString0x20A ID;
	NMS_Toolkit::TkTextureResource Texture;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcPlanetResourceIconLookup
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource IconBinocs;
	NMS::NMSString0x10 ID;
};

//Dependency: GcRealityIcon
//Dependency: GcPlanetResourceIconLookup
//Dependency: TkTextureResource
struct GcRealityIconTable
{
	NMS_Toolkit::TkTextureResource GameIcons[112];
	NMS_Toolkit::TkTextureResource BinocularDiscoveryIcons[17];
	NMS_Toolkit::TkTextureResource ProductCategoryIcons[11];
	NMS_Toolkit::TkTextureResource MissionFactionIcons[10];
	NMS_Toolkit::TkTextureResource DiscoveryPageRaceIcons[9];
	NMS_Toolkit::TkTextureResource SubstanceCategoryIcons[9];
	NMS_Toolkit::TkTextureResource DifficultyPresetIcons[7];
	NMS_Toolkit::TkTextureResource DiscoveryPageTradingIcons[7];
	NMS_Toolkit::TkTextureResource HazardIcons[7];
	NMS_Toolkit::TkTextureResource HazardIconsHUD[7];
	NMS_Toolkit::TkTextureResource OptionsUIHeaderIcons[6];
	NMS_Toolkit::TkTextureResource InventoryFilterIcons[5];
	NMS_Toolkit::TkTextureResource DifficultyUIOptionIcons[4];
	NMS_Toolkit::TkTextureResource DiscoveryPageConflictIcons[4];
	std::vector<NMS_GameComponents::GcRealityIcon> MissionDetailIcons;
	NMS_Toolkit::TkTextureResource DiscoveryPageConflictUnknown;
	NMS_Toolkit::TkTextureResource DiscoveryPageRaceUnknown;
	NMS_Toolkit::TkTextureResource DiscoveryPageTradingUnknown;
	std::vector<NMS_GameComponents::GcPlanetResourceIconLookup> PlanetResourceIconLookups;
	std::vector<NMS_Toolkit::TkTextureResource> RepairTechIcons;
	std::vector<NMS_GameComponents::GcPlanetResourceIconLookup> TerrainIconLookups;
};

//Dependency: GcRemoteWeapons
//Dependency: GcStatsTypes
//Dependency: NMSString0x10
struct GcShipWeaponData
{
	NMS::NMSString0x10 Projectile;
	NMS::NMSString0x10 Reticle;
	float AutoAimAngle;
	float AutoAimExtraAngle;
	float CoolRate;
	float OverheatCoolTime;
	NMS_GameComponents::GcRemoteWeapons RemoteType;
	NMS_GameComponents::GcStatsTypes Stat;
	bool IsProjectile;
	bool ShowOverheatSwitch;
};

//Dependency: NMSString0x10
struct GcTechList
{
	std::vector<NMS::NMSString0x10> AvailableTech;
};

//Dependency: GcStatsTypes
//Dependency: Colour
//Dependency: NMSString0x10
struct GcStatsEntry
{
	NMS::Colour Colour;
	NMS::NMSString0x10 BaseTechID;
	float RangeMax;
	float RangeMin;
	NMS_GameComponents::GcStatsTypes Type;
	bool LessIsBetter;
};

//Dependency: GcStatsEntry
//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcStatsGroup
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcStatsEntry> StatIds;
};

//Dependency: GcStatsGroup
struct GcStats
{
	std::vector<NMS_GameComponents::GcStatsGroup> Stats;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkIdArray
{
	std::vector<NMS::NMSString0x10> Array;
};

struct TkRawID
{
	uint64_t Value0;
	uint64_t Value1;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcRepShopData
//Dependency: GcPlayerWeaponData
//Dependency: GcTradeSettings
//Dependency: GcFiendCrimeSpawnTable
//Dependency: GcRealityIconTable
//Dependency: GcNumberedTextList
//Dependency: GcSubstanceSecondaryBiome
//Dependency: GcShipWeaponData
//Dependency: GcTechList
//Dependency: GcStats
//Dependency: GcAlienPuzzleTableIndex
//Dependency: GcInventoryLayout
//Dependency: TkCurveType
//Dependency: GcRewardMissionOverride
//Dependency: GcFreighterCargoOption
//Dependency: GcDamageMultiplierLookup
//Dependency: GcIDPair
//Dependency: GcSubstanceSecondaryLookup
//Dependency: GcMinMaxFloat
//Dependency: VariableSizeString
//Dependency: GcDiscoveryWorth
//Dependency: TkTextureResource
//Dependency: TkIdArray
//Dependency: TkRawID
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRealityManagerData
{
	enum class StatsEnum : uint32_t
	{
		Suit = 0,
		Weapon = 1,
		Ship = 2,
		Freighter = 3,
		Vehicle = 4,
	};

	NMS::Colour SubstanceCategoryColours[9];
	NMS::Colour HazardColours[7];
	NMS::Colour RarityColours[3];
	NMS_GameComponents::GcTradeSettings TradeSettings;
	NMS_GameComponents::GcRealityIconTable Icons;
	NMS_Toolkit::TkTextureResource StatCategoryIcons[203];
	NMS_Toolkit::TkTextureResource StatTechPackageIcons[203];
	NMS_GameComponents::GcNumberedTextList MissionNameAdjectives[23];
	NMS_GameComponents::GcNumberedTextList MissionNameFormats[23];
	NMS_GameComponents::GcNumberedTextList MissionNameNouns[23];
	NMS_GameComponents::GcSubstanceSecondaryBiome SubstanceSecondaryBiome;
	NMS_GameComponents::GcShipWeaponData ShipWeapons[7];
	NMS::NMSString0x20A FactionNames[10];
	NMS_GameComponents::GcPlayerWeaponData PlayerWeapons[20];
	NMS_GameComponents::GcRepShopData RepShops[10];
	NMS_GameComponents::GcTechList PlanetTechShops[17];
	NMS_GameComponents::GcNumberedTextList FactionClients[10];
	NMS_Toolkit::TkTextureResource SubstanceChargeIcons[9];
	NMS_Toolkit::TkIdArray MissionBoardRewardOptions[11];
	NMS::NMSString0x10 FactionStandingIDs[10];
	NMS_Toolkit::TkIdArray DefaultVehicleLoadout[7];
	NMS::VariableSizeString Catalogues[5];
	NMS_GameComponents::GcStats Stats[5];
	NMS::VariableSizeString ProductTables[3];
	NMS_GameComponents::GcInventoryLayout ShipCargoOnlyStartingLayout;
	NMS_GameComponents::GcInventoryLayout ShipStartingLayout;
	NMS_GameComponents::GcInventoryLayout ShipTechOnlyStartingLayout;
	NMS_GameComponents::GcInventoryLayout SuitCargoStartingSlotLayout;
	NMS_GameComponents::GcInventoryLayout SuitStartingSlotLayout;
	NMS_GameComponents::GcInventoryLayout SuitTechOnlyStartingSlotLayout;
	std::vector<NMS::VariableSizeString> AlienPuzzleTables;
	NMS::VariableSizeString AlienWordsTable;
	NMS::VariableSizeString BaitDataTable;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> BuilderMissionRewardOverrides;
	NMS::VariableSizeString CombatEffectsTable;
	NMS::VariableSizeString ConsumableItemTable;
	NMS::VariableSizeString CostTable;
	std::vector<NMS_GameComponents::GcDamageMultiplierLookup> DamageMultiplierTable;
	NMS::VariableSizeString DamageTable;
	NMS::VariableSizeString DialogClearanceTable;
	NMS::VariableSizeString DiscoveryRewardTable;
	std::vector<NMS_GameComponents::GcFiendCrimeSpawnTable> FiendCrimeSpawnTable;
	NMS::VariableSizeString FishDataTable;
	std::vector<NMS_GameComponents::GcIDPair> FreighterBaseItemPairs;
	std::vector<NMS_GameComponents::GcFreighterCargoOption> FreighterCargoOptions;
	NMS::VariableSizeString HistoricalSeasonDataTable;
	NMS::VariableSizeString InventoryTable;
	NMS::VariableSizeString LegacyItemConversionTable;
	std::vector<NMS_Toolkit::TkRawID> LegacyRepairTable;
	NMS::VariableSizeString MaintenanceGroupsTable;
	NMS::VariableSizeString MaintenanceOverrideTable;
	std::vector<NMS::NMSString0x10> NeverOfferedForSale;
	std::vector<NMS::NMSString0x10> NeverSellableItems;
	std::vector<NMS::NMSString0x10> PirateStationExtraProds;
	NMS::VariableSizeString PlayerWeaponPropertiesTable;
	NMS::VariableSizeString ProceduralProductTable;
	NMS::VariableSizeString ProceduralTechnologyTable;
	NMS::VariableSizeString ProductDescriptionOverrideTable;
	NMS::VariableSizeString PurchaseableBuildingBlueprintsTable;
	NMS::VariableSizeString PurchaseableSpecialsTable;
	NMS::VariableSizeString RecipeTable;
	NMS::VariableSizeString RewardTable;
	NMS::VariableSizeString SettlementPerksTable;
	NMS_GameComponents::GcTechList StationTechShops;
	NMS::VariableSizeString StatRewardsTable;
	NMS::VariableSizeString StoriesTable;
	std::vector<NMS_GameComponents::GcSubstanceSecondaryLookup> SubstanceSecondaryLookups;
	NMS::VariableSizeString SubstanceTable;
	std::vector<int32_t> SuitCargoUpgradePrices;
	std::vector<int32_t> SuitTechOnlyUpgradePrices;
	std::vector<int32_t> SuitUpgradePrices;
	NMS::VariableSizeString TechBoxTable;
	NMS::VariableSizeString TechnologyTable;
	NMS::VariableSizeString TradingClassDataTable;
	NMS::VariableSizeString TradingCostTable;
	NMS::VariableSizeString UnlockableItemTrees;
	NMS::VariableSizeString UnlockablePlatformRewardsTable;
	NMS::VariableSizeString UnlockableSeasonRewardsTable;
	NMS::VariableSizeString UnlockableTwitchRewardsTable;
	NMS_GameComponents::GcMinMaxFloat FoodStatValues[203];
	NMS_GameComponents::GcAlienPuzzleTableIndex InteractionPuzzlesIndexTypes[149];
	NMS_GameComponents::GcDiscoveryWorth DiscoveryWorth[17];
	float NormalisedPriceLimits[5];
	float CreatureDiscoverySizeMultiplier[4];
	float WeightedTextWeights[3];
	uint16_t HomeRealityIteration;
	uint16_t RealityIteration;
	bool LoopInteractionPuzzles[149];
	NMS_Toolkit::TkCurveType WeightingCurves[7];
};

struct GcMissionConditionIsCurrentMission
{
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsDepotDestroyed
{
	NMS::NMSString0x20A ControllingScanEvent;
};

struct GcMissionConditionIsFirstPurpleSystemLocal
{
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForAbandFreighterDoorOpen
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageOvertime;
	float MinTime;
};

struct GcMissionConditionIsFishing
{
	float MinimumDepth;
	bool TakeDepthFromSeasonData;
};

//Dependency: VariableSizeString
struct GcMissionSequenceDiscoverOnPlanet
{
	enum class DiscoverTargetOnThisPlanetEnum : uint32_t
	{
		Animal = 0,
		Vegetable = 1,
		Mineral = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionSequenceDiscoverOnPlanet::DiscoverTargetOnThisPlanetEnum DiscoverTargetOnThisPlanet;
	float PercentToDiscover;
};

struct GcRewardJourneyThroughCentre
{
	enum class CentreJourneyDestinationEnum : uint32_t
	{
		Next = 0,
		Abandoned = 1,
		Vicious = 2,
		Lush = 3,
		Balanced = 4,
	};

	NMS_GameComponents::GcRewardJourneyThroughCentre::CentreJourneyDestinationEnum CentreJourneyDestination;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMission
{
	NMS::NMSString0x20A AlreadyActiveFailureMessage;
	NMS::NMSString0x10 Mission;
	bool FailRewardIfMissionActive;
	bool Restart;
	bool SetAsSelected;
};

//Dependency: GcFrigateFlybyType
struct GcMissionConditionIsFrigateFlybyActive
{
	NMS_GameComponents::GcFrigateFlybyType FrigateFlybyType;
};

struct GcMissionConditionIsGrabbed
{
};

struct GcMissionConditionIsLookingAtAnomaly
{
	float FOV;
	float MaxDistance;
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventLocal
{
	NMS::NMSString0x20A Event;
	bool BlockMissionRestart;
	bool RequiresFullFireteam;
};

struct GcTracerData
{
	float DamageMax;
	float DamageMaxDistance;
	float DamageMin;
	float DamageMinDistance;
	float Length;
	float Speed;
};

struct GcResourceCollectEffect
{
	float OffsetMax;
	float OffsetMin;
	float PlayerOffset;
	float RotateMax;
	float RotateMin;
	float SizeMax;
	float SizeMin;
	float StartOffsetMax;
	float StartOffsetMin;
	float StartSpeedMax;
	float StartSpeedMin;
	float TimeMax;
	float TimeMin;
};

//Dependency: VariableSizeString
struct GcShipHUDTargetIconData
{
	NMS::VariableSizeString Corner;
	NMS::VariableSizeString GlowCorner;
	NMS::VariableSizeString GlowLineHorizontal;
	NMS::VariableSizeString GlowLineVertical;
	NMS::VariableSizeString LineHorizontal;
	NMS::VariableSizeString LineVertical;
};

//Dependency: GcShipHUDTargetIconData
//Dependency: Colour
//Dependency: VariableSizeString
struct GcShipHUDTargetData
{
	NMS::Colour BaseColour;
	NMS::Colour LockColour;
	NMS::Colour PoliceColour1;
	NMS::Colour PoliceColour2;
	NMS::Colour ThreatColour;
	NMS_GameComponents::GcShipHUDTargetIconData IconData;
	NMS::VariableSizeString Arrow;
	float ActivateTime;
	float ActiveDistance;
	float ArrowFadeRange;
	float ArrowMaxSize;
	float ArrowMinFadeDist;
	float ArrowMinSize;
	float ArrowOffset;
	float ArrowScale;
	float GlowAlpha;
	float HighlightTime;
	float HitPulse;
	float HitPulseTime;
	float HitWhiteOut;
	float IconMaxSize;
	float IconMinSize;
	float IconSizeIn;
	float IconSizeScale;
	float PoliceColourFreq;
};

struct GcZoomData
{
	enum class ZoomTypeEnum : uint32_t
	{
		None = 0,
		Far = 1,
		Mid = 2,
		Close = 3,
	};

	float EffectStrength;
	float FoV;
	float MaxScanDistance;
	float MinScanDistance;
	float MoveSpeed;
	float WalkSpeed;
	NMS_GameComponents::GcZoomData::ZoomTypeEnum ZoomType;
};

struct GcPortalData
{
	float RuneRotateTime;
	bool KnowAllRunes;
	bool SkipRuneEntry;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcTracerData
//Dependency: GcResourceCollectEffect
//Dependency: NMSString0x20
//Dependency: GcDiscoveryTrimSettings
//Dependency: GcShipHUDTargetData
//Dependency: GcScanEffectData
//Dependency: GcExperienceTimers
//Dependency: GcScanToRevealComponentData
//Dependency: GcZoomData
//Dependency: GcPortalData
//Dependency: GcBuildingClassification
//Dependency: GcInteractionType
//Dependency: TkModelResource
//Dependency: GcPlayerHazardType
//Dependency: GcTechnologyCategory
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcGameplayGlobals
{
	NMS_GameComponents::GcDiscoveryTrimSettings DiscoveryTrimSettings;
	NMS_GameComponents::GcShipHUDTargetData HUDTarget;
	NMS_GameComponents::GcScanEffectData BaseBuildingDeleteScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorAboveWaterScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorBelowWaterScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorCollisionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorImpossibleScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorInsideScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingErrorUnaffordableScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingGhostScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingPreviewSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingRemotePlayerSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingRemotePlayerValidScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingSelectionScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingSpawnStaticEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingValidScanEffect;
	NMS_GameComponents::GcScanEffectData BaseBuildingVisionScanEffect;
	NMS_GameComponents::GcScanEffectData BinocularScanEffect;
	NMS_GameComponents::GcScanEffectData BinocularSelectedEffect;
	NMS_GameComponents::GcScanEffectData BlankScanEffect;
	NMS_GameComponents::GcScanEffectData BuildingScanEffect;
	NMS_GameComponents::GcScanEffectData CreatureScanEffect;
	NMS_GameComponents::GcScanEffectData DeconstructEffect;
	NMS_GameComponents::GcScanEffectData HitEffect;
	NMS_GameComponents::GcScanEffectData HitEffectCritical;
	NMS_GameComponents::GcScanEffectData HUDShipScanEffect;
	NMS_GameComponents::GcScanEffectData ObjectsScanEffect;
	NMS_GameComponents::GcScanEffectData PassiveScanEffect;
	NMS_GameComponents::GcScanEffectData ShipBuilderNullScanEffect;
	NMS_GameComponents::GcScanEffectData ShipBuilderScanEffect;
	NMS_GameComponents::GcScanEffectData ShipSalvageScanEffect;
	NMS_GameComponents::GcScanEffectData TargetShipScanEffect;
	NMS_GameComponents::GcScanEffectData VRGhostScanEffect;
	NMS::Colour BinocularScanTargetColour;
	NMS::Colour BinocularSelectedColour;
	NMS::Colour BinocularSelectedUnknownColour;
	NMS::Colour BulletTraceLineColour;
	NMS::Vector3f CommunicatorShipSpawnOffset;
	NMS::Colour HUDDamageSplatPainColour;
	NMS::Colour HUDDamageSplatShieldColour;
	NMS::Colour OverHeatBarColour;
	NMS::Colour OverHeatColour;
	NMS::Colour PainColour;
	NMS::Colour PlayerAmbientSpotLightColour;
	NMS::Colour RefinerColour1A;
	NMS::Colour RefinerColour1B;
	NMS::Colour RefinerColour1C;
	NMS::Colour RefinerColour1D;
	NMS::Colour ScannerColour1;
	NMS::Colour ScannerColour2;
	NMS::Colour TorchColour;
	NMS_GameComponents::GcScanToRevealComponentData CaveGraveRevealData;
	NMS::NMSString0x10 SalvageTechList[5];
	NMS::NMSString0x10 SalvageTechListMultiTool[5];
	NMS::NMSString0x10 SalvageRewardsDropship[4];
	NMS::NMSString0x10 SalvageRewardsFighter[4];
	NMS::NMSString0x10 SalvageRewardsScience[4];
	NMS::NMSString0x10 SalvageRewardsShuttle[4];
	NMS::NMSString0x20A CommunicatorFireteamNexusExitDialog;
	NMS::NMSString0x20A CommunicatorNexusExitAbandonWarningDialog;
	NMS_Toolkit::TkModelResource WeaponSpawnAltObject;
	NMS_Toolkit::TkModelResource WeaponSpawnObject;
	NMS::VariableSizeString BaseBuildingTable;
	NMS::NMSString0x10 BeaconScan;
	NMS::NMSString0x10 BioShipTerrainResource;
	NMS::NMSString0x10 BuildersWordReward;
	std::vector<NMS_GameComponents::GcScanEffectData> CommunicatorEffectTable;
	NMS::NMSString0x10 DebugScanPlanet;
	NMS::NMSString0x10 DebugScanSpace;
	NMS::NMSString0x10 DefaultAnim;
	NMS::NMSString0x10 DistressSignalScan;
	NMS::NMSString0x10 FreeShipSlotID;
	NMS::NMSString0x10 FreeSuitSlotID;
	NMS::NMSString0x10 FreeWeapSlotID;
	std::vector<NMS::NMSString0x10> FreighterHyperdriveAccess;
	std::vector<NMS::NMSString0x10> HyperdriveAccess;
	NMS::VariableSizeString InitialDebrisScene;
	NMS::VariableSizeString LegacyBaseBuildingTable;
	NMS::NMSString0x10 MissionSurveyBugsID;
	NMS::NMSString0x10 MissionSurveyWormID;
	NMS::NMSString0x10 NexusRecipeCostType;
	NMS::NMSString0x10 ObservatoryScan;
	std::vector<float> PirateEarlySpawnChances;
	NMS::NMSString0x10 PirateMissionPrimaryReward;
	NMS::NMSString0x10 PirateMissionSecondReward;
	NMS::NMSString0x10 RadioTowerScan;
	NMS::NMSString0x10 ResourceDirtSubstanceID;
	NMS::VariableSizeString ResourceParticleFile;
	NMS::NMSString0x10 ResourceUnderwaterSubstanceID;
	std::vector<NMS::NMSString0x10> SalvageProdsList;
	std::vector<NMS::NMSString0x10> SalvageSubstancesList;
	NMS::NMSString0x10 SandwormTerrainResource;
	NMS::NMSString0x10 SeaTrashDeployID;
	NMS::NMSString0x10 ShipScan;
	NMS::NMSString0x10 ToolScan;
	NMS::NMSString0x10 ToolScanHardMode;
	NMS::NMSString0x10 VisualScan;
	NMS::NMSString0x10 WaypointScan;
	std::vector<NMS_GameComponents::GcZoomData> ZoomLevels;
	uint64_t CookingRefreshTimeInSeconds;
	uint64_t NPCWorkerInteractionCooldown;
	NMS_GameComponents::GcResourceCollectEffect AsteroidResourceCollect;
	int32_t AlienShipEvolveCosts[8];
	NMS_GameComponents::GcExperienceTimers FlybyTimers;
	int32_t FreighterTechQualityWeightings[8];
	NMS_GameComponents::GcExperienceTimers FreighterTimers;
	NMS_GameComponents::GcExperienceTimers PlanetPirateTimers;
	NMS_GameComponents::GcExperienceTimers PoliceTimers;
	NMS_GameComponents::GcExperienceTimers SentinelTimersLow;
	NMS_GameComponents::GcExperienceTimers SentinelTimersNormal;
	NMS_GameComponents::GcExperienceTimers SpaceFlybyTimers;
	NMS_GameComponents::GcExperienceTimers SpacePirateTimers;
	NMS_GameComponents::GcTracerData BulletTracer;
	NMS_GameComponents::GcTracerData ShipTracer;
	float ChanceOfPirateFreighterBattleOnWarpToSystem[4];
	float MissionSubstanceDifficultyMultipliers[3];
	int32_t PirateInterestLevels[3];
	int32_t PirateInterestLevelsSurvival[3];
	int32_t PoliceInterestLevels[3];
	int32_t PoliceInterestLevelsSurvival[3];
	NMS::Vector2f FrigateFlybyTimer;
	NMS::Vector2f HUDDamageSize;
	NMS::Vector2f HUDDamageSplatSize;
	NMS_GameComponents::GcPortalData Portal;
	NMS::Vector2f SaveContextTransferShipCostScaleNanites;
	NMS::Vector2f SaveContextTransferShipCostScaleUnits;
	NMS::Vector2f SaveContextTransferWeaponCostScaleNanites;
	NMS::Vector2f SaveContextTransferWeaponCostScaleUnits;
	float AggressiveSentinelProbability;
	float AggressiveSentinelProbabilitySurvival;
	float AirLockDoorRange;
	float AlienPodThreshold1;
	float AlienPodThreshold2;
	float AllRecipesKnownNanitesMax;
	float AllRecipesKnownNanitesMin;
	float AngleFromBaseComputerWhenTeleporting;
	float AsteroidCarveRadius;
	float AsteroidHitForce;
	int32_t AsteroidResourceReducer;
	int32_t AsteroidScanMaxShown;
	float AsteroidScanRange;
	float AsteroidScanTime;
	float AsteroidTorqueForce;
	float AtlasGunCurrencyConversion;
	float AtmosphereEntryErrorTime;
	float AtmosphereEntryFadeTimeFactor;
	float AtmosphereEntryOffset;
	float AtmosphereEntryTime;
	float AutoTranslateWordChance;
	float BackgroundSpaceEncounterCheckTimer;
	float BarrelOffset;
	float BaseBuildingHoverTimeToKnowPart;
	float BaseBuildingRemotePlayerErrorAlphaScanEffect;
	float BaseFoodDuration;
	float BaseLaserHeatTime;
	float BeaconInteractRange;
	float BinocCreatureScanTime;
	float BinocMinScanTime;
	float BinocScanTime;
	float BinocTimeBeforeScan;
	float BinocularScanTargetFadeTime;
	float BinocularScanTargetHeightRange;
	float BinocularScanTargetInitialFadeTime;
	float BinocularScanTargetLineWidth;
	float BinocularScanTargetMinHeight;
	float BinocularScanTargetScaler;
	float BlackHoleJumpVoxelDist;
	float BlackHoleJumpVoxelVariation;
	float BonusChildTypeElementsAdd;
	float BonusChildTypeElementsMultiply;
	float BonusSameTypeElementsAdd;
	float BonusSameTypeElementsMultiply;
	int32_t BugFiendCap;
	float BuildingBeamDistance;
	float BuildingPlayerBaseIconOffset;
	float BulletTraceLineWidth;
	float CargoShieldStrength;
	float CockpitScale;
	float CombatLevelBaseValueBoltcaster;
	float CombatLevelBaseValueCannon;
	float CombatLevelBaseValueGrenade;
	float CombatLevelBaseValueRailgun;
	float CombatLevelBaseValueShotgun;
	float CombatLevelBaseValueSMG;
	float CombatLevelBestWeaponBias;
	float CombatLevelSClassValue;
	float CombatSpeedReadoutMultiplier;
	int32_t CommonProductEffectiveness;
	float CommunicatorCargoScanDroneAtOffsetFallback;
	float CommunicatorCargoScanDronePitch;
	float CommunicatorCargoScanDroneRoll;
	float CommunicatorCargoScanDroneScale;
	float CommunicatorCargoScanDroneScaleFallback;
	float CommunicatorCargoScanDroneUpOffset;
	float CommunicatorCargoScanDroneUpOffsetFallback;
	float CommunicatorCargoScanDroneYaw;
	float CommunicatorFadeTime;
	float CommunicatorSpawnHeightOffset;
	float CommunicatorSpawnOffset;
	float CommunicatorSpawnRotation;
	float CommunicatorSpawnScale;
	float CorruptSentinelProbability;
	float CreatureMinScanTime;
	float CreatureScanAngle;
	float CreatureScanStickyDecay;
	int32_t CreaturesToBaitForTutorial;
	int32_t CreaturesToFeedForTutorial;
	int32_t CritDamage;
	float CriticalHitMultiplier;
	float CritScale;
	int32_t CronusNaniteDonationMul;
	float DeadPlanetGravityFactor;
	int32_t DeathMoneyPenalty;
	NMS_GameComponents::GcBuildingClassification DebugScanForceBuildingType;
	float DeepWaterJellyCrimeModMax;
	float DeepWaterResourceMulMax;
	float DerelictPulseEncounterAtmosphericEffectChance;
	float DestroyEffectHeight;
	float DestroyEffectMaxScale;
	float DistanceFromBaseComputerWhenTeleporting;
	float DockNodeBuyRadius;
	int32_t EarlyPiratesToBeKilled;
	float EmergencyBuildingScanEventDistance;
	float EmergencyBuildingScanEventTime;
	float EventTargetSpeed;
	float ExcitingNearRange;
	float ExcitingViewAngle;
	float ExcitingViewRange;
	float ExplosionForce;
	float ExplosionForceMaxForceRadius;
	float ExplosionRadiusMultiplier;
	int32_t FourthRaceSpawnPercentage;
	float FreighterBattleRadius;
	float FreighterCargoPodHealthFraction;
	float FreighterFuelRodHealthFraction;
	int32_t FreighterStartPecent;
	float GasGiantGravityFactor;
	float GoalGapVoxelDist;
	int32_t GPSRandomChangeTimeBuilderCorruption;
	int32_t GPSRandomChangeTimeMid;
	int32_t GPSRandomChangeTimeNarrow;
	int32_t GPSRandomChangeTimeWide;
	float GrabPlayerCooldownTime;
	int32_t GuildStockReplenishTime;
	int32_t GuildStockReplenishTimeSubstance;
	float GunDownAngle;
	float GunOffsetAggressiveX;
	float GunOffsetAggressiveY;
	float GunOffsetAggressiveZ;
	float GunOffsetX;
	float GunOffsetY;
	float GunOffsetZ;
	float GunUpAngle;
	int32_t HardModeTechDamageHighPercent;
	int32_t HardModeTechDamageMidNum;
	int32_t HardModeTechDamageMidPercent;
	float HeatAlertTime;
	float HeatDamageBoost;
	float HeatMaxPowerPoint;
	float HeatWidthBoost;
	float HeatWidthBoostAlt;
	float HitEffectMinTime;
	float HitOffset;
	float HmdInteractionRangeMinDistance;
	float HmdInteractionRangeMinRange;
	float HmdInteractionRangeMultiplier;
	float HoursBetweenBattles;
	float HoursBetweenMiniStation;
	float HoverTimeToScan;
	float HoverTimeToScanCreatures;
	int32_t HoverVisiblePointsNeeded;
	float HUDArrowPrimaryScaler;
	float HUDDamageOffset;
	float HUDDamageRadius;
	float HUDDamageScaler;
	float HUDLabelAngle;
	float HUDLabelAngleOffset;
	float HUDLabelOffsetX;
	float HUDLabelOffsetY;
	float HUDLabelOffsetZ;
	float HUDLabelScale;
	float HUDLabelTime;
	float HUDLockOnAudioTime;
	float HUDReticuleMoveAim;
	float HUDReticuleMoveBack;
	float HUDScaleAdd;
	float HUDScaleFarTarget;
	float HUDScaleMax;
	float HUDScaleMin;
	float HUDScaleMinAim;
	float HUDScaleRadius;
	float HUDStoreFlashTime;
	float IllegalTechProductTradingMod;
	float InfestedPlanetDeepSpaceFlybyMultiplier;
	float InitialLocationProtectionRadiusMultiplier;
	float InteractionAttractTime;
	float InteractionComponentUpdateDistance;
	float InteractionDescriptionTextTime;
	float InteractionMessageModuleDisplayTime;
	float InteractionMinTimeBeforeHighlightedOptionSelection;
	float InteractionMinTimeBetweenStickOptionHighlights;
	float InteractionMinTimeForResponseText;
	NMS_GameComponents::GcInteractionType InteractionOverrideFrom;
	NMS_GameComponents::GcInteractionType InteractionOverrideTo;
	float InteractionPickupAngle;
	float InteractionPickupRadius;
	float InteractionStickOptionStrength;
	float InteractionTorchFoV;
	float InteractionTorchStrength;
	float JumpToCenterFuelCost;
	float LaserExplosionForce;
	float LaserExplosionForceMaxForceRadius;
	float LaserExplosionForceRadius;
	int32_t LaserRechargeHintThresholdEarly;
	int32_t LaserRechargeHintThresholdLate;
	float LightStrength;
	float LineWidth;
	float LockOffFactor;
	float LowSentinelProbability;
	float LowSentinelProbabilitySurvival;
	float MapFOV;
	float MapHeight;
	float MapOffset;
	float MapRadius;
	float MapTargetOffset;
	int32_t MaxActiveWeatherHazardGifts;
	int32_t MaxCookingRank;
	float MaxDistanceForLadderTeleport;
	int32_t MaxDronesAggressive;
	int32_t MaxDronesAggressiveSurvival;
	int32_t MaxDronesLow;
	int32_t MaxDronesLowSurvival;
	int32_t MaxDronesNormal;
	int32_t MaxDronesNormalSurvival;
	float MaxMeteorSurfaceAngle;
	int32_t MaxNumMissionsFromMissionGiver;
	int32_t MaxNumSameGroupTech;
	float MaxPossibleShipDamagePotential;
	int32_t MaxResourceCrystalBlobSize;
	float MaxRespawnOnGroundHeight;
	float MaxSpawnTime;
	float MaxStandingTechDiscount;
	int32_t MaxTorpedoesInFlight;
	int32_t MeleeHintThresholdEarly;
	int32_t MeleeHintThresholdLate;
	int32_t MinCookingRank;
	float MissileApproachTime;
	float MissileBrakeForceMax;
	float MissileBrakeForceMin;
	float MissileBrakeTime;
	float MissileForceMax;
	float MissileForceMin;
	float MissileHitRadius;
	float MissileLockTime;
	float MissileMaxSpeed;
	float MissileMaxTurnAngle;
	float MissileMinCircleTime;
	float MissileOffset;
	float MissileReloadTime;
	float MissileRotateMax;
	float MissileRotateMin;
	float MissileRotateSpeed;
	float MissileThreatTime;
	float MissionEventAllowResetDistance;
	float MissionSurveyAutoScanDistance;
	float MissionSurveyAutoScanFlattenRadiusMul;
	float MissionSurveyBeginScanPercentageEvent;
	float MissionSurveyBeginScanPercentageScannable;
	float MissionSurveyInShipArrivedDistance;
	float MissionSurveyMarkerAutoHideTime;
	float MissionSurveyMaxAngleOffset;
	float MissionSurveyMaxGuidanceDistance;
	float MissionSurveyMaxGuidanceDistanceWorms;
	float MissionSurveyMaxScanAngle;
	float MissionSurveyMaxScanAngleScannableComp;
	float MissionSurveyMaxSignalConeAngle;
	float MissionSurveyRevealWithoutScanDistance;
	float MissionSurveyScanRangeMultiplier;
	float MissionSurveyScanSpeed;
	float MissionSurveyScanSpeedScannableComp;
	float MissionSurveySonarMaxPulseSpeed;
	float MissionSurveySonarMinPulseSpeed;
	float MissionSurveySonarPulseSpeedBandCount;
	float MouseSensitivity;
	float MouseSensitivityShip;
	float MouseSensitivityVehicle;
	float MultidimensionalFadeTime;
	float NewDiscoveryDisplayTime;
	int32_t NexusRecipeCostNaniteMultiplier;
	float NonAggressiveLushSurvivalProbabability;
	int32_t NonDominantRaceSpawnPercentage;
	int32_t NonDominantRaceSpawnPercentagePirate;
	float NonNaturalCostMul;
	float NormalModeHeatBonus;
	float NPCNavNodeSearchUpDistScaling;
	float NPCWaitWhenRevealedTime;
	int32_t NumMissionsPerSolarSystem;
	float OffscreenFadeDistance;
	float OffscreenMinDot;
	float OverheatDecay;
	float OverheatGenerosity;
	float PainTime;
	float PartyPlanetSearchDistance;
	int32_t PersonalInventoryMinHeightMax;
	int32_t PersonalInventoryMinWidthMax;
	int32_t PersonalTechInventoryMinHeightMax;
	int32_t PersonalTechInventoryMinWidthMax;
	float PirateEarlySpawnTime;
	float PirateFreighterBattleNoTargetLeaderTime;
	float PirateFreighterBeginFleeHealthFraction;
	int32_t PirateFreighterFrigateCountForReinforce;
	float PirateFreighterRewardDelayTime;
	float PirateFreighterRewardDelayTimeEscaped;
	float PirateFreighterRewardMessageDelayTime;
	float PirateFreighterRewardMessageDelayTimeEscaped;
	float PirateFreighterWarpChargeTime;
	float PirateFreighterWarpChargeTimeToAddPerBrokenEngine;
	float PirateGroundAccelerator;
	float PirateGroundInventoryAccelerator;
	float PirateInterestDistance;
	float PirateInterestDistanceMPMission;
	int32_t PirateInterestOverride;
	float PirateRaidAccelerator;
	int32_t PlanetPirateFlybyMaxRepeatCounter;
	float PlayerAmbientSpotLightIntensity;
	float PlayerAmbientSpotLightOffsetY;
	float PlayerAmbientSpotLightOffsetZ;
	float PoliceAcceleratorNoCargoNormal;
	float PoliceAcceleratorNoCargoSkipScanOdds;
	float PoliceAcceleratorNoCargoWealthy;
	float PoliceAcceleratorPulseExtra;
	int32_t PoliceAcceleratorSmugglingItemsMax;
	float PoliceAcceleratorSmugglingMulMax;
	float PoliceAcceleratorStationLockOn;
	float PoliceInterestDistance;
	float PoliceInterestDistanceMPMission;
	int32_t PoliceInterestOverride;
	int32_t ProductItemStockDecayTime;
	int32_t ProductItemStockReplenishTime;
	float ProjectileLightIntensity;
	float ProjectileSpeedBoost;
	float PulseEncounterChance;
	float PulseEncounterChanceBlue;
	float PulseEncounterChanceGreen;
	float PulseEncounterChanceRed;
	float PulseEncounterChanceStandard;
	float PulseEncounterCheckTimer;
	float PulseEncounterStopPower;
	float PulseEncounterStopSpeed;
	int32_t RareProductEffectiveness;
	int32_t RareSubstanceEffectiveness;
	int32_t RefinerProductsMadeInTime;
	int32_t RefinerProductsMadeInTimeSurvival;
	int32_t RefinerSubsMadeInTime;
	int32_t RefinerSubsMadeInTimeSurvival;
	int32_t ResourceCommonMaxAmount;
	int32_t ResourceCommonMinAmount;
	int32_t ResourceCommonReducer;
	int32_t ResourceDirtMaxAmount;
	int32_t ResourceDirtMinAmount;
	int32_t ResourceDirtReducer;
	int32_t ResourceMaxAmount;
	int32_t ResourceMinAmount;
	int32_t ResourceParticleMaxNum;
	int32_t ResourceParticleMinNum;
	float ResourceParticleSpeed;
	float ResourceParticleSpread;
	int32_t ResourceReducer;
	int32_t RocketLockerFuelUse;
	float SalvageShipExplodeShipDistance;
	float SalvageShipExplodeSpeed;
	float SalvageShipHeightOffset;
	float SalvageShipOneRevolutionTime;
	float SalvageShipPitch;
	float SalvageShipShowShipDistance;
	float SalvageShipShowShipSpeed;
	float SalvageShipShowShipSpeedSwitching;
	int32_t SalvageSubstanceValueThreshold;
	float SalvageValueAsProds;
	float SalvageWeaponHeightOffset;
	float SalvageWeaponMaxSize;
	float SalvageWeaponPitch;
	float SalvageWeaponScale;
	float ScanAngle;
	float ScanAngleCutoff;
	float ScannableComponentMarkerOffset;
	float ScannableComponentPlaceMarkerOffset;
	float ScannerAnalyzeFXRate;
	float ScannerIconsClumpRadius;
	float ScannerMarkerFadeTime;
	float ScannerPhysicsProbeAABBSize;
	float ScannerSmallMarkerFadeTime;
	float ScannerSubstanceTimePerTrigger;
	float ScannerTuningA;
	float ScannerTuningB;
	float ScannerTuningC;
	float ScannerTuningD;
	float ScannerTuningResourceOffset1;
	float ScannerTuningResourceOffset2;
	float ScannerTuningSmoothStepAmount;
	float ScannerTuningTrailingEdge;
	float ScanStartTimeDelayMinDist;
	float ScanStartTimeDelayRange;
	float ScanStartTimeDistanceDelayTime;
	float ScanStickyDecay;
	float ScanToRevealDelayOverride;
	float ScanToRevealVFXBaseScalingSize;
	float ScrapDroneProbability;
	float SeasonalMessageModuleAttractDistanceMul;
	int32_t SentinelsHigh;
	int32_t SentinelsLow;
	float ShipBulletTraceLineWidth;
	float ShipDisplayDamageMultiplier;
	float ShipInteractRadius;
	float ShipInterestAcceleratorInAsteroidField;
	int32_t ShipInventoryMinHeightMax;
	int32_t ShipInventoryMinWidthMax;
	float ShipMiningMul;
	float ShipScanOffset;
	float ShipScanOffsetGap;
	float ShipScanPlanetRechargeMultiplier;
	float ShipScanSpaceRechargeMultiplier;
	int32_t ShipTechInventoryMinHeightMax;
	int32_t ShipTechInventoryMinWidthMax;
	float ShootableAggroForgetTime;
	float ShootableAggroMinStartTime;
	float ShootableArmourHighlightHitTime;
	float SimpleInteractionMessageTime;
	float SimpleInteractionPickupAngle;
	float SimpleInteractionPickupRadius;
	float SmugglerSellingMarkup;
	float SpaceBattleAnyHostileShipsRadius;
	int32_t SpaceBattleMaxTorpedosTargetingLeaderShip;
	int32_t SpaceBattleMaxTorpedosTargetingNonLeaderShip;
	float SpaceBattleRadius;
	float SpaceCombatRadius;
	float SpaceSpeedReadoutMultiplier;
	float SpawnerWeaponRange;
	int32_t SpecialMiningAmount;
	float SpecialMiningTime;
	float SpecialTechSlotBonus;
	float SpeedReadoutMultiplier;
	float SpookMessageChance;
	float SpookMessageCooldown;
	float SpookMessageThreshold;
	float StormBonusJetpackMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusJetpackWeather;
	float StormBonusMiningAmountMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusMiningAmountWeather;
	float StormBonusMiningHeatMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusMiningHeatWeather;
	float StormBonusSprintMod;
	NMS_GameComponents::GcPlayerHazardType StormBonusSprintWeather;
	float StormGravityChangeTime;
	int32_t SubstanceItemStockDecayTime;
	int32_t SubstanceItemStockReplenishTime;
	float SurveyBeginScanPercentage;
	float SurveyMaxDistance;
	float SurveyScanMaxSpeed;
	float SurveyScanMinSpeed;
	float SurveySonarMaxPulseSpeed;
	float SurveySonarMiddleRangeMax;
	float SurveySonarMiddleRangeMin;
	float SurveySonarMinPulseSpeed;
	float SurveySonarPulseSpeedBandCount;
	float TapInteractionDecay;
	float TapInteractionIncreaseAmount;
	float TechDamageChanceShieldedMax;
	float TechDamageChanceShieldLevelMax;
	float TechDamageChanceShieldLevelMin;
	float TechDamageChanceToSelectPrimary;
	NMS_GameComponents::GcTechnologyCategory TechnologyOverrideForSmuggler;
	float TeleporterDistanceTravelledMultiplier;
	float TerrainResourceCompassRange;
	float TerrainResourceScanRange;
	float TerrainResourceScanTime;
	float TimeToDisplayScanResults;
	int32_t TorchCookieIndex;
	int32_t TorchDimCookieIndex;
	float TorchDimFoV;
	float TorchDimStrength;
	float TorchFollowCameraPitch;
	float TorchFollowCameraTime;
	float TorchFoV;
	float TorchHandOffsetX;
	float TorchHandOffsetY;
	float TorchHandOffsetZ;
	float TorchOffsetX;
	float TorchOffsetY;
	float TorchOffsetZ;
	float TorchOffsetZMin;
	float TorchOffsetZMinSpeed;
	float TorchOffsetZSpeedRange;
	float TorchRotation;
	float TorchStaffOffsetY;
	float TorchStaffOffsetZ;
	float TorchStaffOffsetZMin;
	float TorchStrength;
	float TorpedoCooldown;
	float TorpedoCooldownRandomExtra;
	float TorpedoInitialWait;
	float TorpedoLaunchWarning;
	int32_t TunnelStatReducer;
	float TurretAITargetingDistanceFactor;
	float TurretAITargetingFocusPlayerFactor;
	float TurretAITargetingLastHitFactor;
	float TurretAITargetingPitchAngleFactor;
	float TurretAITargetingYawAngleFactor;
	float UndergroundTorchFoV;
	float UndergroundTorchStrength;
	float UnderwaterAmbientLightStrength;
	float UnderwaterLightningDamageDistanceMultiplier;
	float UnderwaterTorchFoV;
	float UnderwaterTorchStrengthMax;
	float UnderwaterTorchVolumetricStrength;
	float VehicleAllIconScanTime;
	int32_t VehicleInventoryMinHeightMax;
	int32_t VehicleInventoryMinWidthMax;
	float ViciousSentinelProbability;
	float ViciousStormProbability;
	float ViciousWeatherProbability;
	float VoxelAsteroidResourceChance;
	int32_t WarpsBetweenBattles;
	int32_t WarpsBetweenMiniStation;
	float WaterLandingDamageMultiplier;
	float WaypointScanTime;
	int32_t WeaponInventoryMinHeightMax;
	int32_t WeaponInventoryMinWidthMax;
	float WeatherHazardGiftLifeTime;
	float WeatherHazardGiftMaxDistance;
	float ZoomFindBuildingRange;
	NMS::NMSString0x20 DepotResource;
	NMS::NMSString0x20 RobotResource;
	bool AllowBinocularMarker;
	bool AllowDeconstruct;
	bool AllowSpaceScanEvents;
	NMS_Toolkit::TkCurveType AtmosphereEntryCurve;
	bool Autolevel;
	bool BinocsDisplayUnknownCreatures;
	NMS_Toolkit::TkCurveType BinocularScanTargetHeightCurve;
	bool CanMoveTechnology;
	bool ChangePricesLocally;
	bool DebugDrawTriggerBoxes;
	bool DebugPrintShootables;
	bool DebugScanForceBuilding;
	bool DisableAnomalyAmbientSpawn;
	bool DisableBasePowerHUDOverlay;
	bool DisableGalaxyMapInQuickMenu;
	bool DisableNexusInQuickMenu;
	bool EnableShootHitEffect;
	bool EnableTechPackaging;
	bool EnableTeleporters;
	bool EveryMaintenanceIsBroken;
	bool FailToFindBuildings;
	bool FreighterRequiresRGBHyperdriveUpgrades;
	bool HUDUpdateFromData;
	bool InstallTechWithInteraction;
	bool InteractionOverride;
	bool KeepAttackingMaxWantedLevel;
	bool MissionSurveySuggestSurveyForNearScannables;
	NMS_Toolkit::TkCurveType OverheatColourCurve;
	NMS_Toolkit::TkCurveType OverheatColourCurveShip;
	NMS_Toolkit::TkCurveType OverheatCurve;
	NMS_Toolkit::TkCurveType PainCurve;
	bool PlayHitEffectsOnZeroDamage;
	bool RewardInventoryClassItemFromShipSalvage;
	bool ScanToRevealIgnoreRequirements;
	bool ScanToRevealNPCsAlwaysTriggersCameraEvent;
	NMS_Toolkit::TkCurveType ShipScanCurve;
	bool ShowPriceMarkupsAsPercentages;
	bool SpawnResourceBlobsOnPartDelete;
	bool TechMustBeInTechInventory;
	bool TorchDisabledInTheDay;
	bool UseCustomSaveDirectory;
	bool UseDebugScan;
	bool UseMultiplierBonus;
	bool UseOverheatColour;
	bool UseSecondaryBiomeSubstances;
	bool UseTradingCostTable;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcMissionConditionIsScanEventLocal
struct GcMissionConditionIsScanEventLocalOrNear
{
	NMS_GameComponents::GcMissionConditionIsScanEventLocal Local;
	float MaxDistance;
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventOnCurrentPlanet
{
	NMS::NMSString0x20A Event;
	bool AllowInShip;
};

//Dependency: NMSString0x20A
struct GcMissionConditionIsScanEventRepaired
{
	NMS::NMSString0x20A Event;
	bool CheckForAllRepairsInBuilding;
	bool OnlyCheckRequiresEmptySlotTypes;
};

//Dependency: GcItemNeedPurpose
struct GcMissionConditionItemCostsEnabled
{
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool Enabled;
};

struct GcMissionConditionLocalScanActive
{
};

struct GcMissionConditionLocalSystemHasTradeSurgeGoods
{
};

struct GcMissionConditionMessageBeaconsQuery
{
	int32_t MaxPartsFound;
	int32_t MinPartsFound;
	float SearchDistanceLimit;
};

//Dependency: NMSString0x10
struct GcMissionConditionMissionCompleted
{
	NMS::NMSString0x10 MissionID;
	int32_t CalculateSeasonalSeedFromStageIndexOffset;
	int32_t SeasonalMissionSeed;
	bool CalculateTextMissionTargetFromStageIndex;
	bool TakeIDFromSeasonData;
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionConditionMissionMessage
{
	NMS::NMSString0x10 Message;
	NMS::VariableSizeString MessageToFormatSeasonalIDInto;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcNodeActivationAction
{
	enum class NodeActiveStateEnum : uint32_t
	{
		Activate = 0,
		Deactivate = 1,
		Toggle = 2,
		Add = 3,
		Remove = 4,
		RemoveChildren = 5,
	};

	NMS::VariableSizeString SceneToAdd;
	NMS_GameComponents::GcNodeActivationAction::NodeActiveStateEnum NodeActiveState;
	NMS::NMSString0x80 Name;
	bool AffectModels;
	bool IncludeChildPhysics;
	bool IncludePhysics;
	bool NotifyNPC;
	bool RestartEmitters;
	bool UseLocalNode;
	bool UseMasterModel;
};

struct GcMissionConditionMissionMessagePortal
{
};

//Dependency: TkEqualityEnum
struct GcMissionConditionMissionStatValue
{
	uint64_t MissionStatValue;
	NMS_Toolkit::TkEqualityEnum Test;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAnimationNotify
struct TkAnimationNotifies
{
	std::vector<NMS_Toolkit::TkAnimationNotify> Notifies;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionMultiplayerFreighterAvailable
{
};

//Dependency: GcSmokeBotSystemReport
struct GcSmokeBotReport
{
	std::vector<NMS_GameComponents::GcSmokeBotSystemReport> Systems;
	uint64_t StartingUA;
};

struct GcMissionConditionNearObject
{
	enum class MissionObjectEnum : uint32_t
	{
		PlayerShip = 0,
		PlayerVehicle = 1,
		PlayerSubmarine = 2,
		StoryPortal = 3,
		OpenStoryPortal = 4,
		OpenStandardPortal = 5,
	};

	float Distance;
	NMS_GameComponents::GcMissionConditionNearObject::MissionObjectEnum MissionObject;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForSuitUpgrade
{
	NMS::VariableSizeString DebugText;
};

struct GcMissionConditionNearSettlement
{
	float Distance;
	bool AllowBuildersSettlement;
	bool MustMatchThisMissionSeed;
};

//Dependency: GcBuildingClassification
//Dependency: GcInteractionType
struct GcMissionConditionNearestBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> AdditionalBuildings;
	NMS_GameComponents::GcBuildingClassification Building;
	float Distance;
	NMS_GameComponents::GcInteractionType RequireIncompleteInteraction;
};

struct GcMissionConditionNexusEnabled
{
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumAtlasStationsVisited
{
	int32_t Count;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionNumBrokenSlots
{
	enum class InventoryToTestEnum : uint32_t
	{
		Ship = 0,
		ShipTech = 1,
		Weapon = 2,
	};

	NMS_GameComponents::GcMissionConditionNumBrokenSlots::InventoryToTestEnum InventoryToTest;
	int32_t NumberOfBrokenSlots;
	NMS_Toolkit::TkEqualityEnum Test;
};

struct GcMissionConditionOnFootCombatEnabled
{
	bool Enabled;
};

struct GcMissionConditionOnOtherSideOfPortal
{
	bool TestForRegularPortal;
	bool TestForStoryPortal;
};

struct GcMissionConditionOnPlanetWithSandwormsOverriden
{
	bool AcceptMatchingSystem;
	bool AllowInShip;
};

struct GcRewardFreeStamina
{
	float Duration;
};

struct GcMissionConditionPadActive
{
};

struct GcMissionConditionPercentageChance
{
	int32_t Percent;
	bool OverrideMissionSeedWithRandomSeed;
	bool OverrideZeroSeed;
	bool Seeded;
};

//Dependency: GcBuildingClassification
struct GcNPCSettlementBehaviourBuildingClassWeightEntry
{
	NMS_GameComponents::GcBuildingClassification BuildingClass;
	float EntryWeight;
	float ExitWeight;
};

//Dependency: GcCurrency
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcUnlockableTreeCostType
{
	enum class TypeOfCostEnum : uint32_t
	{
		Currency = 0,
		Substance = 1,
		Product = 2,
	};

	NMS::NMSString0x20A CantAffordString;
	NMS::NMSString0x10 CostTypeID;
	NMS::NMSString0x10 TypeID;
	NMS_GameComponents::GcCurrency CurrencyType;
	NMS_GameComponents::GcUnlockableTreeCostType::TypeOfCostEnum TypeOfCost;
};

//Dependency: GcUnlockableItemTrees
//Dependency: GcUnlockableTreeCostType
struct GcUnlockableTrees
{
	NMS_GameComponents::GcUnlockableItemTrees Trees[14];
	std::vector<NMS_GameComponents::GcUnlockableTreeCostType> CostTypes;
};

//Dependency: GcAlienPuzzleOption
struct GcRewardSecondaryInteractionOptions
{
	std::vector<NMS_GameComponents::GcAlienPuzzleOption> Options;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkBlackboardValueInteger
{
	NMS::NMSString0x10 Key;
	int32_t Value;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionPirateSystem
{
};

struct GcMissionConditionPlanetCorruptSentinelGeneration
{
};

//Dependency: TkEqualityEnum
struct GcMissionConditionPlanetCreatureRoles
{
	int32_t NumRoles;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeNumFromSeasonData;
};

//Dependency: GcDiscoveryType
struct GcMissionConditionPlanetDiscoveries
{
	NMS_GameComponents::GcDiscoveryType DiscoveryType;
	float PercentDiscovered;
	bool DeepSearchDoneDiscos;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceOpenSettlementBuildingWithScanEvent
{
	NMS::NMSString0x20A ScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageWhenDistant;
	NMS::VariableSizeString UpgradeMessage;
	NMS::VariableSizeString UpgradeMessageWhenDistant;
};

//Dependency: GcBuildingClassification
struct GcMissionConditionPlanetHasBuilding
{
	std::vector<NMS_GameComponents::GcBuildingClassification> AdditionalBuildings;
	NMS_GameComponents::GcBuildingClassification Building;
};

//Dependency: GcLocalSubstanceType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionConditionPlanetResourceHint
{
	NMS::NMSString0x20A UseScanEventToDetermineLocalResource;
	NMS::NMSString0x10 ResourceHint;
	NMS_GameComponents::GcLocalSubstanceType LocalSubstanceType;
	bool AllowInShip;
	bool AllowNexus;
	bool TestAllPlanetsInSystem;
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionPlanetStatLevel
{
	NMS::NMSString0x10 Stat;
	uint64_t SpecificUA;
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool CalculateUAFromMilestoneIndex;
	bool CalculateUAFromSeasonData;
	bool TakeAmountFromSeasonData;
	bool UseCurrentUA;
};

//Dependency: NMSString0x10
struct GcMissionConditionPulseEncounterActive
{
	enum class TestEncounterTypeEnum : uint32_t
	{
		AnyEncounter = 0,
		AnyObject = 1,
		SpecificObject = 2,
		Trader = 3,
		AbandonedFreighter = 4,
		AnyEncounterOtherThanTheNamedOne = 5,
		SpecificID = 6,
	};

	NMS::NMSString0x10 SpecificObjectID;
	NMS_GameComponents::GcMissionConditionPulseEncounterActive::TestEncounterTypeEnum TestEncounterType;
	bool RequireFullySpawned;
};

struct GcMissionConditionPulseEncounterOverriden
{
};

//Dependency: GcInputActions
//Dependency: GcCharacterControlOutputSpace
//Dependency: GcCharacterControlInputValidity
//Dependency: NMSString0x10
struct GcPlayerControlInputAxis
{
	NMS::NMSString0x10 Output;
	NMS::NMSString0x10 OutputLength;
	NMS_GameComponents::GcInputActions InputX;
	NMS_GameComponents::GcInputActions InputY;
	NMS_GameComponents::GcCharacterControlOutputSpace OutputSpace;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;
};

struct GcMissionConditionReadyToSpawnPirates
{
};

//Dependency: NMSString0x10
struct GcMissionConditionRefinerHasInput
{
	NMS::NMSString0x10 InputProduct;
	int32_t InputAmount;
	bool MustBeCooker;
};

//Dependency: NMSString0x10
struct GcMissionConditionRefinerHasOutput
{
	NMS::NMSString0x10 OutputProduct;
	int32_t OutputAmount;
	bool MustBeCooker;
	bool UseDefaultAmount;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkTextureResource
struct TkReplacementResource
{
	NMS_Toolkit::TkTextureResource Original;
	NMS_Toolkit::TkTextureResource Replacement;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionRidingCreature
{
};

struct GcMissionConditionSeasonAvailable
{
};

//Dependency: NMSString0x10
struct GcRewardTableEntitlementItem
{
	NMS::NMSString0x10 EntitlementId;
	NMSTemplate Reward;
	NMS::NMSString0x10 RewardId;
};

//Dependency: GcSaveContextQuery
//Dependency: GcSeasonEndRewardsRedemptionState
struct GcMissionConditionSeasonRewardRedemptionState
{
	NMS_GameComponents::GcSaveContextQuery CurrentContext;
	NMS_GameComponents::GcSeasonEndRewardsRedemptionState RewardRedempionState;
};

struct GcRewardTraderFlyby
{
	int32_t ExperienceSpawnIndex;
};

//Dependency: NMSString0x10
struct GcMissionConditionSeasonRewardUnlocked
{
	NMS::NMSString0x10 SpecialID;
};

//Dependency: GcSettlementJudgementOption
//Dependency: GcSettlementJudgementType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementJudgementData
{
	enum class NPCsEnum : uint32_t
	{
		None = 0,
		One = 1,
		Two = 2,
		ExistingPerkJob = 3,
	};

	NMS::NMSString0x20A DilemmaText;
	NMS::NMSString0x20A HeaderOverride;
	NMS::NMSString0x20A NPC1CustomName;
	NMS::NMSString0x20A NPC2CustomName;
	NMS::NMSString0x20A NPCTitle;
	NMS::NMSString0x20A QuestionText;
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 NPC1CustomId;
	NMS::NMSString0x10 NPC1HoloEffect;
	NMS::NMSString0x10 NPC2CustomId;
	NMS::NMSString0x10 NPC2HoloEffect;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option1List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option2List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option3List;
	std::vector<NMS_GameComponents::GcSettlementJudgementOption> Option4List;
	NMS_GameComponents::GcSettlementJudgementType JudgementType;
	NMS_GameComponents::GcSettlementJudgementData::NPCsEnum NPCs;
	float Weighting;
	bool DilemmaTextIsAlien;
	bool UseAltResearchLoc;
	bool UseResearchLoc;
};

//Dependency: NMSString0x10
struct GcMissionConditionSeasonRewardsRecipe
{
	NMS::NMSString0x10 RecipeID;
};

struct GcTerrainTextureSettings
{
	float Brightness;
	float Contrast;
	float Specular;
};

struct GcMissionConditionSentinelLevel
{
	enum class RequiredSentinelLevelEnum : uint32_t
	{
		None = 0,
		Low = 1,
		Default = 2,
		Aggressive = 3,
		Corrupt = 4,
	};

	NMS_GameComponents::GcMissionConditionSentinelLevel::RequiredSentinelLevelEnum RequiredSentinelLevel;
};

struct GcMissionConditionSentinelsDisabled
{
};

//Dependency: GcSettlementStatType
//Dependency: TkEqualityEnum
struct GcMissionConditionSettlementStatLevel
{
	float NormalisedLevel;
	NMS_GameComponents::GcSettlementStatType Stat;
	NMS_Toolkit::TkEqualityEnum Test;
};

struct GcMissionConditionShieldDown
{
	bool RequireOnFoot;
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcRewardIncrementInteractionIndex
{
	NMS_GameComponents::GcInteractionType InteractionToIncrement;
	NMS_GameComponents::GcAlienRace Race;
};

struct GcMissionConditionShipEngineStatus
{
	enum class EngineStatusEnum : uint32_t
	{
		Thrusting = 0,
		Braking = 1,
		Landing = 2,
		Landed = 3,
		Boosting = 4,
		Pulsing = 5,
		LowFlight = 6,
		Inverted = 7,
		EnginesRepaired = 8,
		PulsingToPlanet = 9,
	};

	NMS_GameComponents::GcMissionConditionShipEngineStatus::EngineStatusEnum EngineStatus;
};

struct GcMissionConsequenceResetStoryPortal
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkInputValidation
{
	enum class InputValidationEnum : uint32_t
	{
		Held = 0,
		Pressed = 1,
		HeldConfirm = 2,
		Released = 3,
		HeldOver = 4,
	};

	NMS_Toolkit::TkInputValidation::InputValidationEnum InputValidation;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcMissionConditionSpaceCombatEnabled
{
	bool Enabled;
};

//Dependency: NMSString0x10
struct GcMissionConditionSpecialKnown
{
	NMS::NMSString0x10 SpecialID;
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: GcSeasonSaveStateOnDeath
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcRewardDeath
{
	NMS::Colour InitialFadeColour;
	NMS::NMSString0x20A DeathAuthor;
	NMS::NMSString0x20A DeathQuote;
	NMS::NMSString0x10 CameraShake;
	NMS::NMSString0x10 PlayerDamage;
	NMS::Vector2f DeathSpinPitch;
	NMS::Vector2f DeathSpinRoll;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float BlackScreenBeforeQuote;
	float FadeDuration;
	NMS_GameComponents::GcSeasonSaveStateOnDeath SetSeasonSaveState;
	float TimeToSpendDead;
	NMS_Toolkit::TkCurveType FadeCurve;
	bool OverrideShipSpin;
};

struct GcRocketLockerComponentData
{
	int32_t NumSlots;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionSquadronPilotsOwned
{
	int32_t Amount;
	NMS_Toolkit::TkEqualityEnum Test;
	bool TakeNumberFromSeasonData;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionSquadronSlots
{
	int32_t PilotSlots;
	NMS_Toolkit::TkEqualityEnum Test;
	bool OnlyCountFreeSlots;
	bool TakeNumberFromSeasonData;
};

struct GcMissionConditionStartWithAllPartsKnown
{
};

//Dependency: NMSString0x10
struct GcMissionConditionStatChange
{
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
struct GcMissionConditionStatDiff
{
	NMS::NMSString0x10 CurrentStat;
	NMS::NMSString0x10 TargetStat;
	int32_t AmountPastTarget;
	NMS_Toolkit::TkEqualityEnum Test;
};

//Dependency: TkEqualityEnum
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionConditionStatLevel
{
	NMS::NMSString0x10 CompareStat;
	NMS::NMSString0x10 FormatItemNameIntoText;
	NMS::VariableSizeString FormatStatStyle;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t DisplayMilestoneNumber;
	int32_t Level;
	int32_t LevelledStatRank;
	NMS_Toolkit::TkEqualityEnum Test;
	bool ForceIgnoreLevelledStat;
	bool MulAmountBySeasonTier;
	bool TakeLevelFromSeasonData;
	bool TakeStatFromSeasonData;
};

struct GcMissionConditionSystemHasInfestedPlanet
{
};

struct GcMissionConditionSystemHasRobotCreatures
{
	bool RequireOnPlanet;
};

//Dependency: GcAlienRace
struct GcMissionConditionSystemRace
{
	NMS_GameComponents::GcAlienRace Race;
};

//Dependency: NMSString0x10
struct GcMissionConditionTakingDamage
{
	NMS::NMSString0x10 DamageID;
	bool RequireShieldDown;
};

//Dependency: NMSString0x10
struct GcMissionConditionTechnologyKnown
{
	NMS::NMSString0x10 Technology;
	bool DependentOnSeasonMilestone;
	bool TakeTechFromSeasonData;
};

struct GcMissionConditionThisMissionStageIndex
{
	int32_t StageIndex;
};

struct GcMissionConditionTouchControlled
{
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshInclusionType
{
	enum class NavMeshInclusionTypeEnum : uint32_t
	{
		Auto = 0,
		Ignore = 1,
		Obstacle = 2,
		Walkable = 3,
	};

	NMS_Toolkit::TkNavMeshInclusionType::NavMeshInclusionTypeEnum NavMeshInclusionType;
};

struct TkNavMeshAreaType
{
	enum class NavMeshAreaTypeEnum : uint32_t
	{
		Null = 0,
		Grass = 1,
		Rock = 2,
		Snow = 3,
		Mud = 4,
		Sand = 5,
		Cave = 6,
		Forest = 7,
		Wetlands = 8,
		Mistlands = 9,
		GrassAlt = 10,
		RockAlt = 11,
		ForestAlt = 12,
		MudAlt = 13,
		Soil = 14,
		Resource = 15,
		TerrainInstance = 16,
		Normal = 17,
		Water = 18,
		Auto = 19,
		UseCollisionTileType = 20,
	};

	NMS_Toolkit::TkNavMeshAreaType::NavMeshAreaTypeEnum NavMeshAreaType;
};

//Dependency: TkNavMeshInclusionType
//Dependency: TkNavMeshAreaType
struct TkNavMeshInclusionParams
{
	float InclusionMinSize;
	NMS_Toolkit::TkNavMeshInclusionType InclusionType;
	NMS_Toolkit::TkNavMeshAreaType AreaType;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcMissionConditionTradeSurge
{
	enum class SurgeTestTypeEnum : uint32_t
	{
		Timer = 0,
		Collection = 1,
		Delivery = 2,
	};

	NMS::NMSString0x20A ControllingScanEvent;
	NMS_GameComponents::GcMissionConditionTradeSurge::SurgeTestTypeEnum SurgeTestType;
	int32_t TimeToCompleteInMinutes;
};

struct GcMissionConditionTutorialEnabled
{
	bool Enabled;
};

struct GcMissionConditionUnderwaterDepth
{
	float Depth;
	bool InBaseCanCountAsUnderwater;
	bool ReturnTrueIfWaterBelowIsAtDepth;
	bool TakeAmountFromSeasonData;
};

//Dependency: GcInteractionType
//Dependency: GcAlienRace
struct GcMissionConditionUsingInteraction
{
	NMS_GameComponents::GcInteractionType InteractionType;
	NMS_GameComponents::GcAlienRace Race;
	bool MustBeSelectedMission;
};

struct GcMissionConditionUsingPortal
{
	enum class PortalTypeEnum : uint32_t
	{
		Any = 0,
		Story = 1,
		NotStory = 2,
	};

	NMS_GameComponents::GcMissionConditionUsingPortal::PortalTypeEnum PortalType;
};

//Dependency: TkEqualityEnum
struct GcMissionConditionWaitForPirates
{
	int32_t LivingPirates;
	NMS_Toolkit::TkEqualityEnum Test;
	bool CareAboutAttackingPlayer;
	bool CheckAllFireteamMembers;
	bool CompleteOnlyInSpace;
	bool CountHostileTraders;
};

struct GcMissionConditionWarping
{
};

struct GcScanEventGPSHint
{
	enum class ScanEventGPSHintEnum : uint32_t
	{
		None = 0,
		Accurate = 1,
		OffsetNarrow = 2,
		OffsetMid = 3,
		OffsetWide = 4,
		Obfuscated = 5,
		PartObfuscated = 6,
		BuilderCorruption = 7,
	};

	NMS_GameComponents::GcScanEventGPSHint::ScanEventGPSHintEnum ScanEventGPSHint;
};

//Dependency: GcScanEventGPSHint
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceGetToScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A NexusMessage;
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString GalaxyMapMessageNotSpace;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float Distance;
	float Timeout;
	NMS_GameComponents::GcScanEventGPSHint UseGPSInText;
	bool AlwaysAllowInShip;
	bool CanFormatObjectives;
	bool DistanceTimeout;
	bool EndEventWhenReached;
};

struct GcMissionConditionWaterInSystem
{
	bool WaterworldSpecific;
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
struct GcMissionConditionWordCategoryKnown
{
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	NMS_GameComponents::GcAlienRace Race;
};

//Dependency: GcAudioWwiseEvents
struct GcMissionConsequenceAudioEvent
{
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	bool UseFrontendAudioObject;
};

//Dependency: GcFiendCrime
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardActivateFiends
{
	NMS::NMSString0x20A ActiveFailureOSD;
	NMS::NMSString0x20A WaterFailureOSD;
	NMS::NMSString0x10 SpawnID;
	NMS_GameComponents::GcFiendCrime CrimeType;
	bool AllowInWater;
	bool FailIfAlreadyActive;
};

//Dependency: GcSettlementStatValueRange
struct GcSettlementBuildingContribution
{
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Base;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade1;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade2;
	std::vector<NMS_GameComponents::GcSettlementStatValueRange> Upgrade3;
};

struct GcMissionConsequenceClearDetailMessages
{
};

struct GcPulseEncounterSpawnPirates
{
};

//Dependency: NMSString0x10
struct GcMissionConsequenceGiveReward
{
	NMS::NMSString0x10 Reward;
};

//Dependency: GcPersistencyMissionOverride
//Dependency: GcInteractionActivationCost
//Dependency: GcInteractionBaseBuildingState
//Dependency: GcRewardMissionOverride
//Dependency: GcDiscoveryType
//Dependency: GcFiendCrime
//Dependency: GcRarity
//Dependency: GcSizeIndicator
//Dependency: GcStatsEnum
//Dependency: NMSString0x10
//Dependency: NMSString0x20A
struct GcSimpleInteractionComponentData
{
	enum class SimpleInteractionTypeEnum : uint32_t
	{
		Interact = 0,
		Treasure = 1,
		Beacon = 2,
		Scan = 3,
		Save = 4,
		CallShip = 5,
		CallVehicle = 6,
		Word = 7,
		Tech = 8,
		GenericReward = 9,
		Feed = 10,
		Ladder = 11,
		ClaimBase = 12,
		TeleportStartPoint = 13,
		TeleportEndPoint = 14,
		Portal = 15,
		Chest = 16,
		ResourceHarvester = 17,
		BaseCapsule = 18,
		Hologram = 19,
		NPCTerminalMessage = 20,
		VehicleBoot = 21,
		BiomeHarvester = 22,
		FreighterGalacticMap = 23,
		FreighterChest = 24,
		Collectable = 25,
		Chair = 26,
		BaseTreasureChest = 27,
		SpawnObject = 28,
		NoiseBox = 29,
		AbandFreighterTeleporter = 30,
		PetEgg = 31,
		SubstancePickup = 32,
		FreighterTeleport = 33,
		MiniPortalTrigger = 34,
		SuperDoopaScanner = 35,
	};

	NMS_GameComponents::GcInteractionActivationCost ActivationCost;
	NMS::NMSString0x10 RarityLocators[3];
	NMS::NMSString0x20A ForceSubtitle;
	NMS::NMSString0x20A Name;
	NMS::NMSString0x20A ScanData;
	NMS::NMSString0x20A ScanType;
	NMS::NMSString0x20A TerminalHeading;
	NMS::NMSString0x20A TerminalMessage;
	NMS::NMSString0x20A VRInteractMessage;
	std::vector<NMS_GameComponents::GcInteractionBaseBuildingState> BaseBuildingTriggerActions;
	NMS::NMSString0x10 Id;
	std::vector<NMS_GameComponents::GcPersistencyMissionOverride> PersistencyBufferOverride;
	std::vector<NMS_GameComponents::GcRewardMissionOverride> RewardOverrideTable;
	NMS::NMSString0x10 TriggerAction;
	NMS::NMSString0x10 TriggerActionOnPrepare;
	NMS::NMSString0x10 TriggerActionToggle;
	float DeactivateSimilarInteractionsNearbyRadius;
	float Delay;
	int32_t IncreaseCorruptSentinelWanted;
	int32_t InteractCrimeLevel;
	float InteractDistance;
	float InteractFiendCrimeChance;
	NMS_GameComponents::GcFiendCrime InteractFiendCrimeType;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcDiscoveryType ScanIcon;
	NMS_GameComponents::GcSimpleInteractionComponentData::SimpleInteractionTypeEnum SimpleInteractionType;
	NMS_GameComponents::GcSizeIndicator Size;
	NMS_GameComponents::GcStatsEnum StatToTrack;
	bool ActivateLocatorsFromRarity;
	bool BroadcastTriggerAction;
	bool CanCollectInMech;
	bool HideContents;
	bool InteractIsCrime;
	bool MustBeVisibleToInteract;
	bool NeedsStorm;
	bool NotifyEncounter;
	bool ReseedOnRewardSuccess;
	bool StartsBuried;
	bool Use2dInteractDistance;
	bool UsePersonalPersistentBuffer;
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveCommunicatorMessage
{
	NMS::NMSString0x20A Comms;
};

//Dependency: NMSString0x20A
struct GcMissionConsequenceRemoveScanEvent
{
	NMS::NMSString0x20A Event;
};

//Dependency: GcModularCustomisationSlotItemData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: Vector2f
struct GcModularCustomisationSlotConfig
{
	NMS_GameComponents::GcModularCustomisationSlotItemData SlotEmptyFinalCustomisation;
	NMS_GameComponents::GcModularCustomisationSlotItemData SlotEmptyPreviewCustomisation;
	NMS::NMSString0x20A LabelLocID;
	std::vector<NMS::NMSString0x10> AdditionalSlottableItemLists;
	std::vector<NMS::NMSString0x20> AssociatedNonProcNodes;
	NMS::NMSString0x10 SlotID;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> SlottableItems;
	NMS::NMSString0x10 UISlotGraphicLayer;
	NMS::Vector2f UISlotPosition;
	float UILineLengthFactor;
	float UILineMaxAngle;
	NMS::NMSString0x20 UILocatorName;
	bool IncludeInSeed;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationTextureGroup
{
	NMS::NMSString0x20A Title;
	NMS::NMSString0x10 TextureOptionGroup;
};

//Dependency: GcExactResource
//Dependency: TkModelRendererData
//Dependency: GcModularCustomisationColourData
//Dependency: GcModularCustomisationEffectsData
//Dependency: NMSString0x20A
//Dependency: GcModularCustomisationSlotConfig
//Dependency: GcModularCustomisationTextureGroup
struct GcModularCustomisationConfig
{
	NMS_Toolkit::TkModelRendererData InteractionCameraData;
	NMS_Toolkit::TkModelRendererData ModelRenderData;
	NMS_GameComponents::GcExactResource BaseResource;
	NMS::NMSString0x20A SubtitleApplyingLocId;
	NMS::NMSString0x20A SubtitleLocId;
	NMS::NMSString0x20A SubtitleSlotsBlockedLocId;
	NMS::NMSString0x20A SubtitleSlotsFullLocId;
	NMS::NMSString0x20A TitleLocId;
	std::vector<NMS_GameComponents::GcModularCustomisationColourData> ColourDataPriorityList;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotConfig> Slots;
	std::vector<NMS_GameComponents::GcModularCustomisationTextureGroup> TextureData;
	NMS_GameComponents::GcModularCustomisationEffectsData Effects;
	float HologramOffset;
	float HologramScale;
	bool IsEnabled;
	bool OverrideInteractionCamera;
};

//Dependency: GcModularCustomisationSlotItemData
//Dependency: NMSString0x10
struct GcModularCustomisationSlottableItemList
{
	NMS::NMSString0x10 ListID;
	std::vector<NMS_GameComponents::GcModularCustomisationSlotItemData> SlottableItems;
};

//Dependency: GcModularCustomisationConfig
//Dependency: GcModularCustomisationProductLookupList
//Dependency: GcModularCustomisationSlottableItemList
struct GcModularCustomisationDataTable
{
	NMS_GameComponents::GcModularCustomisationConfig ModularCustomisationConfigs[11];
	NMS_GameComponents::GcModularCustomisationProductLookupList ProductLookupLists[11];
	std::vector<NMS_GameComponents::GcModularCustomisationSlottableItemList> SharedSlottableItemLists;
};

//Dependency: GcBuildingClassification
//Dependency: GcSettlementStatChange
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementPerkData
{
	NMS::NMSString0x20A Description;
	NMS::NMSString0x20A Name;
	std::vector<NMS_GameComponents::GcBuildingClassification> AssociatedBuildings;
	NMS::NMSString0x10 ID;
	std::vector<NMS_GameComponents::GcSettlementStatChange> StatChanges;
	bool IsBlessing;
	bool IsJob;
	bool IsNegative;
	bool IsProc;
	bool IsStarter;
};

//Dependency: GcSettlementPerkData
struct GcSettlementPerksTable
{
	std::vector<NMS_GameComponents::GcSettlementPerkData> Table;
};

struct GcWonderCustomCategory
{
	enum class WonderCustomCategoryEnum : uint32_t
	{
		Custom01 = 0,
		Custom02 = 1,
		Custom03 = 2,
		Custom04 = 3,
		Custom05 = 4,
		Custom06 = 5,
		Custom07 = 6,
		Custom08 = 7,
		Custom09 = 8,
		Custom10 = 9,
		Custom11 = 10,
		Custom12 = 11,
	};

	NMS_GameComponents::GcWonderCustomCategory::WonderCustomCategoryEnum WonderCustomCategory;
};

//Dependency: GcWFCDecorationItem
struct GcWFCDecorationSet
{
	std::vector<NMS_GameComponents::GcWFCDecorationItem> Items;
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceBounty
{
	NMS::NMSString0x10 Bounty;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageDestroy;
	NMS::VariableSizeString MessageEngage;
	NMS::VariableSizeString MessageGetToSpace;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceBroadcastMessage
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 MessageID;
	bool BroadcastToActiveMultiplayerMission;
	bool CanSendToInactive;
	bool Multiplayer;
	bool Seeded;
	bool SendToAllMatchingSeeds;
};

//Dependency: GcBuildingPartSearchType
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceBuild
{
	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Part;
	bool TakePartFromSeasonData;
	bool TeachIfNotKnown;
};

struct GcMissionSequenceClearInventoryHistory
{
};

//Dependency: GcCurrency
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCollectMoney
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForItemID;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcCurrency CollectCurrency;
	int32_t ForItemQuantity;
	bool ApplyDifficultyScaling;
	bool DiscountAlreadyAcquiredForItems;
	bool TakeAmountFromSeasonData;
};

//Dependency: GcStoryPage
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
struct GcStoryCategory
{
	NMS::NMSString0x20A CategoryID;
	NMS::NMSString0x20A CategoryIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS_GameComponents::GcStoryPage> Pages;
};

//Dependency: GcStoryCategory
struct GcStoriesTable
{
	NMS_GameComponents::GcStoryCategory Table[9];
};

//Dependency: GcDefaultMissionProductEnum
//Dependency: GcItemNeedPurpose
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCollectProduct
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForBuild;
	NMS::NMSString0x10 ForRepair;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Product;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionProductEnum Default;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool DependentOnSeasonMilestone;
	bool FromNow;
	bool HintAtCraftTree;
	bool SearchCookingIngredients;
	bool TakeAmountFromSeasonData;
	bool TeachIfNotKnown;
	bool UseDefaultValue;
	bool WaitForSelected;
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
//Dependency: GcItemNeedPurpose
//Dependency: VariableSizeString
struct GcMissionSequenceCollectSubstance
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 ForBuild;
	NMS::NMSString0x10 ForRepair;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Substance;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	float DefaultValueMultiplier;
	NMS_GameComponents::GcItemNeedPurpose Purpose;
	bool CanFormatObjectives;
	bool CanSetIcon;
	bool FromNow;
	bool SearchCookingIngredients;
	bool TakeAmountFromSeasonData;
	bool UseDefaultValue;
	bool WaitForSelected;
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcMissionSequenceCommunicator
{
	NMS_GameComponents::GcPlayerCommunicatorMessage Comms;
	NMS::NMSString0x20A OptionalWaitMessage;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString OSDMessage;
	NMS::VariableSizeString VRMessage;
	float MinTimeInSpaceBeforeCall;
	NMS::NMSString0x20 FormatDialogIDWithSeasonData;
	bool AutoOpen;
	bool UsePulseEncounterObjectAsAttachment;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceCompleteMission
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 Mission;
	bool UseSeed;
};

struct GcMissionSequenceCompleteSeasonalMilestone
{
};

//Dependency: GcMissionConditionTest
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceConditionalReward
{
	std::vector<NMSTemplate> Conditions;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 RewardIfFalse;
	NMS::NMSString0x10 RewardIfTrue;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
};

//Dependency: GcBuildingPartSearchType
//Dependency: GcConstructionPartGroup
//Dependency: GcConstructionPart
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceConstruct
{
	NMS::NMSString0x20A NexusNeedPartsScanEvent;
	NMS::NMSString0x20A NoBaseInSystemScanEvent;
	NMS_GameComponents::GcBuildingPartSearchType Type;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageInNexusAndNeedParts;
	NMS::VariableSizeString MessageNoBaseInSystem;
	NMS::VariableSizeString MessageNoBaseInSystemAndNoStation;
	NMS::VariableSizeString MessageOutsideBase;
	std::vector<NMS_GameComponents::GcConstructionPartGroup> PotentialPartGroups;
	std::vector<NMS_GameComponents::GcConstructionPart> PotentialParts;
	int32_t NumUniquePartsRequired;
	bool HideCompletedPartsOutOfBase;
	bool HideOtherPartsWhenBuyingBlueprints;
	bool OnlyPickFromKnown;
	bool ShuffleParts;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceConstructSettlementBuildingWithScanEvent
{
	NMS::NMSString0x20A ScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageWhenDistant;
	NMS::VariableSizeString MessageWhileBuilding;
	NMS::VariableSizeString MessageWithItemsGathered;
	NMS::VariableSizeString UpgradeMessageWithItemsGathered;
	float ForceCompleteSequenceAtStagePercentage;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceCraftProduct
{
	NMS::NMSString0x20A MessageCanCraft;
	NMS::NMSString0x20A MessageLearnPreReqs;
	NMS::NMSString0x20A MessageLearnRecipe;
	NMS::NMSString0x20A MessageNoIngreds;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 TargetProductID;
	int32_t TargetAmount;
	bool CanSetIcon;
	bool TakeAmountFromSeasonData;
	bool TakeIDFromSeasonData;
	bool TeachIfNotKnown;
	bool WaitForSelected;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceCreateSpecificPulseEncounter
{
	NMS::NMSString0x20A ShipHUDOverrideWhenReady;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageEncounterReady;
	NMS::VariableSizeString MessageNoShip;
	NMS::VariableSizeString MessageNotPulsing;
	NMS::VariableSizeString MessageSignalBlocked;
	NMS::NMSString0x10 PulseEncounterID;
	float MinTimeInPulse;
	bool AllowAnyEncounter;
	bool AllowOutsideShip;
	bool EnsureClearOfSolarSystemObjects;
	bool Silent;
	bool TakeEncounterIDFromSeasonData;
};

//Dependency: VariableSizeString
struct GcMissionSequenceDiscover
{
	enum class DiscoverTargetEnum : uint32_t
	{
		Animal = 0,
		Vegetable = 1,
		Mineral = 2,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcMissionSequenceDiscover::DiscoverTargetEnum DiscoverTarget;
	bool PerPlanet;
	bool TakeAmountFromSeasonalData;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
struct TkHeavyAirSystem
{
	NMS::Vector3f AmplitudeMax;
	NMS::Vector3f AmplitudeMin;
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f FadeSpeedRange;
	NMS::Vector3f MajorDirection;
	NMS::Vector3f RotationSpeedRange;
	NMS::Vector3f ScaleRange;
	NMS::Vector3f TwinkleRange;
	NMS::VariableSizeString Material;
	float Colour1Alpha;
	float Colour2Alpha;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceDisplaySeasonRewardReminder
{
	NMS::VariableSizeString DebugText;
	float Time;
};

//Dependency: GcFactionSelectOptions
//Dependency: VariableSizeString
struct GcMissionSequenceDoMissionsForFaction
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcFactionSelectOptions SelectFrom;
	int32_t AmountMax;
	int32_t AmountMin;
};

//Dependency: GcNPCPropInfo
struct GcNPCPropTable
{
	NMS_GameComponents::GcNPCPropInfo Props[15];
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceExplorationLogSpecial
{
	NMS::NMSString0x20A CustomPlanetLog;
	NMS::NMSString0x20A CustomPlanetMessage;
	NMS::NMSString0x20A CustomSystemLog;
	NMS::NMSString0x20A CustomSystemMessage;
	NMS::VariableSizeString DebugText;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

struct GcAtlasGlobals
{
	int32_t ChanceOfDisconnect;
	int32_t TimeoutSecConnection;
	int32_t TimeoutSecNameResolution;
	int32_t TimeoutSecSendRecv;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
struct GcMissionSequenceFeed
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMin;
	bool RequireSpecificBait;
};

//Dependency: VariableSizeString
struct GcMissionSequenceFinishSummonAnomaly
{
	NMS::VariableSizeString DebugText;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkLocalisationEntry
{
	NMS::NMSString0x20A Id;
	NMS::VariableSizeString BrazilianPortuguese;
	NMS::VariableSizeString Dutch;
	NMS::VariableSizeString English;
	NMS::VariableSizeString French;
	NMS::VariableSizeString German;
	NMS::VariableSizeString Italian;
	NMS::VariableSizeString Japanese;
	NMS::VariableSizeString Korean;
	NMS::VariableSizeString LatinAmericanSpanish;
	NMS::VariableSizeString Polish;
	NMS::VariableSizeString Portuguese;
	NMS::VariableSizeString Russian;
	NMS::VariableSizeString SimplifiedChinese;
	NMS::VariableSizeString Spanish;
	NMS::VariableSizeString TencentChinese;
	NMS::VariableSizeString TraditionalChinese;
	NMS::VariableSizeString USEnglish;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcMissionFishData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceFish
{
	NMS_GameComponents::GcMissionFishData TargetFishInfo;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 FormatStatIntoText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageAvailableNearby;
	NMS::VariableSizeString MessageNoFishLaserEquipped;
	NMS::VariableSizeString MessageNoFishLaserInstalled;
	NMS::VariableSizeString MessageNoneInSystem;
	int32_t Amount;
	float DepthToFormatIntoText;
	bool FromNow;
	bool Multiplayer;
	bool NeverCompleteSequence;
	bool QualityTestIsEqualOrGreater;
	bool SizeTestIsEqualOrGreater;
	bool TakeAmountFromDefaultNumber;
	bool TakeAmountFromSeasonData;
	bool TakeDepthFromSeasonData;
};

//Dependency: NMSString0x100
struct GcNGuiFileBrowserRecents
{
	NMS::NMSString0x100 Recents[10];
};

//Dependency: VariableSizeString
struct GcMissionSequenceFreighterDefend
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: GcDefaultMissionSubstanceEnum
//Dependency: NMSString0x10
struct GcRewardSpecificSubstance
{
	NMS::NMSString0x10 ID;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcDefaultMissionSubstanceEnum Default;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool Silent;
	bool UseFuelMultiplier;
	bool UseMissionBoardDifficultyScale;
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceGatherForRefuel
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
	NMS_GameComponents::GcStatsTypes TargetStat;
};

//Dependency: NMSString0x10
struct GcPainAction
{
	NMS::NMSString0x10 Damage;
	float Radius;
	float RetriggerTime;
	bool AffectsPlayer;
	bool RadiusBasedDamage;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: VariableSizeString
//Dependency: Vector3f
struct GcSceneOptions
{
	NMS::VariableSizeString AtmosphereFile;
	NMS::VariableSizeString BiomeFile;
	NMS::VariableSizeString CaveBiomeFile;
	std::vector<NMS::Vector3f> ForceResource;
	NMS::VariableSizeString TerrainFile;
	NMS::VariableSizeString WaterBiomeFile;
	float ForceResourceSize;
	int32_t RecentToolboxIndex;
	int32_t SelectedToolboxIndex;
	bool OverrideAtmosphere;
	bool OverrideBiome;
	bool OverrideCaveBiome;
	bool OverrideTerrain;
	bool OverrideWaterBiome;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceGatherForRepair
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 GatherResource;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcStatsTypes TargetStat;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceGetToExpedition
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float CompletionDistance;
	float Timeout;
};

//Dependency: VariableSizeString
struct GcMissionSequenceGetUnits
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
};

//Dependency: GcMissionGalacticPoint
//Dependency: VariableSizeString
struct GcMissionSequenceGoToGalacticPoint
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionGalacticPoint Target;
};

//Dependency: GcNPCProbabilityAnimationData
struct GcNPCAnimationList
{
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> Animations;
};

//Dependency: GcNPCAnimationList
//Dependency: GcNPCProbabilityAnimationData
//Dependency: NMSString0x10
struct GcNPCAnimationSetData
{
	NMS_GameComponents::GcNPCAnimationList MoodAnims[10];
	NMS::NMSString0x10 MoodLoops[10];
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> ChatterAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> GreetAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> IdleAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> IdleFlavourAnimations;
	std::vector<NMS_GameComponents::GcNPCProbabilityAnimationData> ListenAnimations;
};

//Dependency: GcNPCAnimationSetData
struct GcNPCAnimationsData
{
	NMS_GameComponents::GcNPCAnimationSetData SittingAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData SittingIPadAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingIPadAnimatons;
	NMS_GameComponents::GcNPCAnimationSetData StandingStaffAnimatons;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcTargetMissionSurveyOptions
{
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::NMSString0x10 TargetMissionSurveyDefinitelyExistsWithResourceHint;
	NMS::NMSString0x10 TargetMissionSurveyId;
	bool ForceSurveyTextForAllSequencesInThisGroup;
	bool TargetMissionSurveyDefinitelyExists;
};

//Dependency: GcMissionConditionTest
//Dependency: GcCustomNotifyTimerOptions
//Dependency: GcTargetMissionSurveyOptions
//Dependency: GcMissionCategory
//Dependency: GcSeasonalObjectiveOverrides
//Dependency: GcGenericMissionStage
//Dependency: GcObjectiveTextFormatOptions
//Dependency: GcMissionPageHint
//Dependency: Colour
//Dependency: TkTextureResource
//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceGroup
{
	enum class RepeatLogicEnum : uint32_t
	{
		None = 0,
		Loop = 1,
		RestartOnConditionFail = 2,
	};

	enum class IconStyleEnum : uint32_t
	{
		Default = 0,
		Large = 1,
		Square = 2,
		NoFrame = 3,
	};

	enum class GalMapPathOverrideEnum : uint32_t
	{
		None = 0,
		BlackHole = 1,
		Atlas = 2,
	};

	NMS::Colour ColourOverride;
	NMS_GameComponents::GcTargetMissionSurveyOptions SurveyTarget;
	NMS_GameComponents::GcSeasonalObjectiveOverrides SeasonalObjectiveOverrides;
	NMS_GameComponents::GcObjectiveTextFormatOptions ObjectiveFormatting;
	NMS::NMSString0x20A ObjectiveID;
	NMS::NMSString0x20A ObjectiveTipID;
	NMS::NMSString0x20A PageDataLocID;
	NMS::NMSString0x20A PrefixTitleText;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 BuildMenuHint;
	std::vector<NMSTemplate> Conditions;
	std::vector<NMSTemplate> Consequences;
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 FoodTarget;
	NMS::NMSString0x10 InventoryHint;
	std::vector<NMS_GameComponents::GcGenericMissionStage> Stages;
	NMS::NMSString0x10 TerrainTarget;
	NMS_GameComponents::GcCustomNotifyTimerOptions CustomNotifyTimers;
	NMS_GameComponents::GcMissionConditionTest ConditionTest;
	NMS_GameComponents::GcMissionSequenceGroup::GalMapPathOverrideEnum GalMapPathOverride;
	NMS_GameComponents::GcMissionSequenceGroup::IconStyleEnum IconStyle;
	NMS_GameComponents::GcMissionCategory OverrideCategory;
	NMS_GameComponents::GcMissionPageHint PageHint;
	NMS_GameComponents::GcMissionSequenceGroup::RepeatLogicEnum RepeatLogic;
	NMS_Toolkit::TkInputEnum SpecialButtonIcon;
	bool AutoPinRepairs;
	bool BlockPinning;
	bool BlockSpaceBattles;
	bool DoConsequencesIfNeverActivated;
	bool HasCategoryOverride;
	bool HasColourOverride;
	bool HideFromLogIfConditionsMet;
	bool PrefixTitle;
	bool Silent;
};

//Dependency: VariableSizeString
struct GcMissionSequenceKill
{
	enum class KillTargetEnum : uint32_t
	{
		Robots = 0,
		Drones = 1,
		Quads = 2,
		Walkers = 3,
		Predators = 4,
		Creatures = 5,
		Pirates = 6,
		Traders = 7,
		Fiends = 8,
		Queens = 9,
		HazardousFlora = 10,
		Worms = 11,
		CorruptSentinels = 12,
		SpiderSentinels = 13,
		SmallSpiderSentinels = 14,
		HostilesWhileInMech = 15,
		CorruptPillars = 16,
		Mechs = 17,
		SpookSquids = 18,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t AmountMax;
	int32_t AmountMaxNoMP;
	int32_t AmountMin;
	int32_t AmountMinNoMP;
	NMS_GameComponents::GcMissionSequenceKill::KillTargetEnum KillTarget;
	int32_t OverrideMissionStageIDForMPProgress;
	bool AddToMissionBoardObjective;
	bool UseDefaultAmount;
	bool WriteProgressToMissionStat;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceKillEncounter
{
	NMS::NMSString0x20A EncounterComponentScanEvent;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	bool AllowedToEscape;
};

//Dependency: VariableSizeString
struct GcMissionSequenceLearnWords
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
};

//Dependency: GcStatModifyType
//Dependency: NMSString0x10
struct GcMissionSequenceModifyStat
{
	NMS::NMSString0x10 Stat;
	int32_t Amount;
	NMS_GameComponents::GcStatModifyType ModifyType;
};

//Dependency: NMSString0x10
struct GcMissionSequencePinProductSurrogate
{
	NMS::NMSString0x10 ProductID;
	bool TakeProductFromSeasonData;
};

//Dependency: VariableSizeString
struct GcMissionSequenceStop
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequencePirates
{
	enum class PirateSpawnTypeEnum : uint32_t
	{
		CargoAttackStart = 0,
		ProbeSuccess = 1,
		PlanetaryRaidStart = 2,
	};

	NMS::NMSString0x20A RewardMessageOverride;
	NMS::NMSString0x10 AttackDefinition;
	NMS::VariableSizeString DebugText;
	float DistanceOverride;
	int32_t NumSquads;
	NMS_GameComponents::GcMissionSequencePirates::PirateSpawnTypeEnum PirateSpawnType;
	bool ForceSpawn;
	bool Silent;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkLSystemRestrictionData
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemGlobalRestriction
{
	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemRestrictionData> Restrictions;
	NMS::NMSString0x20 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct GcMissionSequenceQuickWarp
{
	NMS::NMSString0x20A ScanEventToWarpTo;
	NMS::NMSString0x10 CameraShakeID;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageCannotWarp;
	NMS::VariableSizeString MessageWarping;
	float EffectTime;
	float SequenceTime;
	bool DoCameraShake;
	bool DoWhiteout;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceRepairTech
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	std::vector<NMS::NMSString0x10> TechsToRepair;
};

//Dependency: VariableSizeString
struct GcMissionSequenceRestorePurpleSystemStats
{
	NMS::VariableSizeString DebugText;
};

//Dependency: GcPlayerEmotePropData
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcResource
struct GcPlayerEmote
{
	NMS_GameComponents::GcPlayerEmotePropData PropData;
	NMS::NMSString0x20A ChatText;
	NMS::NMSString0x20A PetCommandTitle;
	NMS::NMSString0x20A Title;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource PetCommandIcon;
	NMS::NMSString0x10 AnimationName;
	NMS::NMSString0x10 EmoteID;
	NMS::NMSString0x10 GekAnimationName;
	NMS::NMSString0x10 GekLoopAnimUntilMove;
	NMS::NMSString0x10 LinkedSpecialID;
	NMS::NMSString0x10 LoopAnimUntilMove;
	NMS::NMSString0x10 RidingAnimationName;
	NMS::GcResource IconPetCommandResource;
	NMS::GcResource IconResource;
	bool AvailableUnderwater;
	bool ChatUsesPrefix;
	bool CloseMenuOnSelect;
	bool IsPetCommand;
	bool MoveToCancel;
	bool NeverShowInMenu;
};

//Dependency: GcPlayerEmote
struct GcPlayerEmoteList
{
	std::vector<NMS_GameComponents::GcPlayerEmote> Emotes;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceReward
{
	enum class RewardInventoryOverrideEnum : uint32_t
	{
		None = 0,
		Suit = 1,
		Ship = 2,
		Vehicle = 3,
		Freighter = 4,
	};

	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Reward;
	NMS_GameComponents::GcMissionSequenceReward::RewardInventoryOverrideEnum RewardInventoryOverride;
	bool DoMissionBoardOverride;
	bool Silent;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceScan
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 ScanOverrideData;
	float WaitTime;
	bool ScanTypesToOverride[11];
	bool BlockTimedScans;
	bool RequiresMissionActive;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcMissionSequenceSendChatMessage
{
	NMS::NMSString0x20A CustomText;
	NMS::NMSString0x10 StatusMessageId;
};

//Dependency: NMSString0x10
struct GcRewardPirateAttack
{
	NMS::NMSString0x10 AttackDefinition;
	int32_t NumSquads;
	bool Instant;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceSetCurrentMission
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 MissionID;
	bool FirstIncompleteMilestone;
	bool Silent;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceShowHintMessage
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 InventoryHint;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessagePadControl;
	NMS::VariableSizeString MessageTitle;
	std::vector<NMSTemplate> UseConditionsForTextFormatting;
	float HighPriorityTime;
	float InitialWaitTime;
	float SecondaryWaitTime;
	bool AllowedWhileInDanger;
};

//Dependency: GcSolarSystemLocatorTypes
//Dependency: Vector3f
//Dependency: NMSString0x20
struct GcSolarSystemLocator
{
	NMS::Vector3f Direction;
	NMS::Vector3f Position;
	float Radius;
	NMS_GameComponents::GcSolarSystemLocatorTypes Type;
	NMS::NMSString0x20 Name;
};

struct GcNPCSettlementBehaviourAreaProperty
{
	enum class NPCSettlementBehaviourAreaPropertyEnum : uint32_t
	{
		ContainsPlayer = 0,
		ContainsNPCs = 1,
	};

	NMS_GameComponents::GcNPCSettlementBehaviourAreaProperty::NPCSettlementBehaviourAreaPropertyEnum NPCSettlementBehaviourAreaProperty;
};

//Dependency: GcNPCSettlementBehaviourAreaProperty
struct GcNPCSettlementBehaviourAreaPropertyWeightEntry
{
	NMS_GameComponents::GcNPCSettlementBehaviourAreaProperty AreaProperty;
	float EntryWeight;
	float ExitWeight;
};

//Dependency: GcMissionGalacticPoint
//Dependency: VariableSizeString
struct GcMissionSequenceSignalGalacticPoint
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcMissionGalacticPoint Target;
};

//Dependency: GcBaseSnapState
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct GcSnapPointCondition
{
	NMS::NMSString0x10 ObjectId;
	int32_t SnapPointIndex;
	NMS_GameComponents::GcBaseSnapState SnapState;
	NMS::NMSString0x80 SnapPoint;
};

struct GcScanEventTableType
{
	enum class ScanTableEnum : uint32_t
	{
		Space = 0,
		Planet = 1,
		Missions = 2,
		Tutorial = 3,
		MissionsCreative = 4,
		Vehicle = 5,
		NPCPlanetSite = 6,
		Seasonal = 7,
	};

	NMS_GameComponents::GcScanEventTableType::ScanTableEnum ScanTable;
};

//Dependency: GcPlayerMissionParticipantType
//Dependency: VariableSizeString
//Dependency: GcScanEventTableType
//Dependency: NMSString0x20A
struct GcMissionSequenceStartScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	int32_t InSystemRerolls;
	NMS_GameComponents::GcPlayerMissionParticipantType Participant;
	NMS_GameComponents::GcScanEventTableType Table;
	float Time;
	bool AllowOtherPlayersBase;
	bool DoAerialScan;
	bool IgnoreIfAlreadyActive;
};

//Dependency: GcPlayerMissionParticipant
//Dependency: VariableSizeString
//Dependency: NMSString0x20A
struct GcMissionSequenceStartScanEventSpecific
{
	NMS_GameComponents::GcPlayerMissionParticipant Participant;
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	float Time;
	bool AllowOtherPlayersBase;
	bool IMeantThisAndKnowWhatItDoes;
};

//Dependency: NMSString0x10
struct GcRewardSpecificCommunityTierProduct
{
	std::vector<NMS::NMSString0x10> ProductList;
	NMS::NMSString0x10 RequiresTech;
	int32_t AmountMax;
	int32_t AmountMin;
	bool ForceSpecialMessage;
};

//Dependency: VariableSizeString
struct GcMissionSequenceSummonNexus
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	bool IgnorePlanetRadiusAndForceSpawn;
};

struct GcTeleporterType
{
	enum class TeleporterDestinationTypeEnum : uint32_t
	{
		Base = 0,
		Spacestation = 1,
		Atlas = 2,
		PlanetAwayFromShip = 3,
		ExternalBase = 4,
		EmergencyGalaxyFix = 5,
		OnNexus = 6,
		SpacestationFixPosition = 7,
		Settlement = 8,
		Freighter = 9,
	};

	NMS_GameComponents::GcTeleporterType::TeleporterDestinationTypeEnum TeleporterDestinationType;
};

//Dependency: GcTeleporterType
//Dependency: VariableSizeString
struct GcMissionSequenceTeleport
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	float EffectTime;
	float SequenceTime;
	NMS_GameComponents::GcTeleporterType TeleporterType;
	bool DoCameraShake;
	bool DoWhiteout;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceVehicleScan
{
	NMS::NMSString0x20A ScanEventID;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
};

//Dependency: NMSString0x10
struct GcRewardCompleteMission
{
	NMS::NMSString0x10 Mission;
};

//Dependency: GcBiomeType
//Dependency: VariableSizeString
struct GcMissionSequenceVisitPlanets
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageOnIncompletePlanet;
	std::vector<NMS_GameComponents::GcBiomeType> PlanetTypesToWatch;
	int32_t NumberOfEachToDiscover;
	bool MustAlsoDiscover;
	bool MustAlsoTakePhoto;
	bool TakeNumberFromSeasonalData;
};

struct GcRewardUpgradeWeaponClass
{
	bool MatchClassToCommunityTier;
	bool Silent;
	bool SilentlyMoveOnAtMaxClass;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWait
{
	NMS::VariableSizeString DebugText;
	float Time;
	bool MultiplyTimeBySeasonValue;
	bool SuppressMessages;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForBuild
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 TargetTech;
};

//Dependency: GcFactionSelectOptions
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFactionStanding
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcFactionSelectOptions SelectFrom;
	int32_t AmountMax;
	int32_t AmountMin;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForFriendlyDroneScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString MessageCantSummon;
	NMS::VariableSizeString MessageNotAvailable;
	NMS::VariableSizeString MessageSummoned;
	NMS::VariableSizeString MessageUnsummoned;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcMissionSequenceWaitForMessage
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 SetIconWithID;
	NMS::NMSString0x10 WaitMessageID;
	NMS::NMSString0x20 FormatMessageWithSeasonData;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcNPCPropType
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: NMSString0x10
struct GcCharacterGlobals
{
	NMS::VariableSizeString CharacterFile;
	NMS::GcSeed CharacterSeedOverride;
	NMS::NMSString0x10 LadderClimbDown;
	NMS::NMSString0x10 LadderClimbIdle;
	NMS::NMSString0x10 LadderClimbUp;
	NMS::NMSString0x10 LadderDismountBottom;
	NMS::NMSString0x10 LadderDismountTop;
	NMS::NMSString0x10 LadderMountBottom;
	NMS::NMSString0x10 LadderMountTop;
	NMS::NMSString0x10 NPCStaffPropTag;
	NMS::NMSString0x10 WaterEffectBodyID;
	NMS::NMSString0x10 WaterEffectLeftHandID;
	NMS::NMSString0x10 WaterEffectRightHandID;
	float AimPitchAnimScale;
	float AimPitchInterpSpeed;
	float AimYawAnimScale;
	float BankingMaxStrength;
	float BankingMinimumSpeed;
	float BankingSpeedForMaxStrength;
	float BlendToNewFeetSpeed;
	float CharacterJetpackTurnAimSpeed;
	float CharacterJetpackTurnSpeed;
	float CharacterRotationOffsetY;
	float CharacterRoughHeadHeight;
	float CharacterRunTurnSpeed;
	float CharacterSwimmingTurnAimSpeed;
	float CharacterSwimmingTurnSpeed;
	float CharacterTurnAimSpeed;
	float CharacterTurnSpeed;
	float DontShowCharacterWithinCameraDistance;
	float FeetShiftOnTurnMaxSpeed;
	float FeetShiftOnTurnSpeed;
	float FootPlantedTolerance;
	float FootPlantSpring;
	float GunRotationSpeed;
	float HoldWeaponAsPropXRotationDegrees;
	float IkBlendStrengthSpeed;
	float IKLegStretchStrength;
	float JetpackSwimmingPitchRotation;
	float LadderCooldownAfterBeforeAutoClimb;
	float LadderDistanceToAutoMount;
	float MaxAnkleRotationAngle;
	float MaxSwimmingPitchRotation;
	float MaxSwimmingRollRotation;
	float MinimumIdleToJogAnimSpeed;
	float MinStickForIntoJogAnim;
	float MinSwimmingPitchRotation;
	float MinSwimmingRollRotation;
	float MinTurnAngle;
	float NPCActiveListenChance;
	float NPCAnimSpeedMax;
	float NPCAnimSpeedMin;
	float NPCArriveDist;
	float NPCBehaviourTimeModifier;
	float NPCBlockedDestRadius;
	float NPCCamoScanRevealTime;
	float NPCCamoWipeEffectTime;
	float NPCDecelerateStrength;
	float NPCDisplayThoughtsMaxDistance;
	float NPCDisplayThoughtsMaxDuration;
	float NPCDisplayThoughtsProbability;
	float NPCDisplayThoughtsRefreshInterval;
	float NPCFastStaticTurnAngle;
	float NPCFlavourIdleTimeMax;
	float NPCFlavourIdleTimeMin;
	NMS_GameComponents::GcNPCPropType NPCForceProp;
	float NPCHackMoveUpToStopFallingThoughFloor;
	float NPCIKBodyWeightNormal;
	float NPCIKBodyWeightNormalGek;
	float NPCIKBodyWeightSeated;
	float NPCIncreasedSteeringDist;
	float NPCLookAtTerminateAngle;
	float NPCLookAtThingChance;
	float NPCLookAtThingTimeMax;
	float NPCLookAtThingTimeMin;
	float NPCLookAwayTimeMax;
	float NPCLookAwayTimeMin;
	float NPCMaxFreighterInteractionSearchDist;
	float NPCMaxInteractionSearchDist;
	float NPCMaxLookAtAngleMoving;
	float NPCMaxLookAtAngleStatic;
	float NPCMaxRandomNavPathMaxIndoorOffset;
	float NPCMaxRandomNavPathMaxOutdoorOffset;
	float NPCMaxRandomNavPathMinIndoorOffset;
	float NPCMaxRandomNavPathMinOutdoorOffset;
	float NPCMaxSettlementInteractionSearchDist;
	float NPCMaxStaticTurnSpeed;
	float NPCMaxTurnSpeed;
	float NPCMinInteractionSearchDist;
	float NPCMinStaticTurnAngle;
	float NPCMinTurnSpeed;
	float NPCMinTurnSpeedMech;
	float NPCMoodIdleDelayChance;
	float NPCMoodIdleLowIntensityChance;
	int32_t NPCNumNavFailuresUntilNoPhysFallback;
	float NPCPerceptionRadius;
	float NPCPermittedNavigationDelayFactor;
	float NPCPOISelectionNearbyNPCBaseMultiplier;
	float NPCPropScaleTime;
	float NPCReactCooldown;
	float NPCReactionChance;
	float NPCReactToPlayerPresenceDist;
	float NPCReactToPlayerPresenceGloablCooldown;
	float NPCReactToPlayerPresenceIndividualCooldown;
	float NPCReactToPlayerPresenceStaticTimer;
	float NPCRunSpeed;
	float NPCRunSpeedGek;
	float NPCScalingMaxRandomVariance;
	float NPCSeatedLookAtLateralReduction;
	float NPCSlowStaticTurnAngle;
	float NPCSpineAdjustGek;
	float NPCSpineAdjustVykeen;
	float NPCStaticDistance;
	float NPCStaticTimeUntilFail;
	float NPCStaticTurnTime;
	float NPCSteeringAvoidStrength;
	float NPCSteeringCollisionAvoidAngle;
	float NPCSteeringCollisionAvoidStrength;
	float NPCSteeringComingTowardsDegrees;
	float NPCSteeringFollowStrength;
	float NPCSteeringObstacleAvoidStrength;
	float NPCSteeringRadius;
	float NPCSteeringRayLength;
	float NPCSteeringRaySphereSize;
	float NPCSteeringRaySpread;
	float NPCSteeringRepelDist;
	float NPCSteeringSpringTime;
	float NPCTeleportEffectTime;
	float NPCWalkSpeed;
	float NPCWalkSpeedGek;
	float NPCWalkSpeedMech;
	float NPCWithScanEventReactCooldown;
	float NPCWithScanEventReactToPlayerPresenceDist;
	float NPCWithScanEventReactToPlayerPresenceIndividualCooldown;
	float PitchTest;
	float RagdollConeLimit;
	float RagdollDamping;
	float RagdollMotorFadeEnd;
	float RagdollMotorFadeStart;
	float RagdollTau;
	float RagdollTwistLimit;
	float RocketBootsLandedTurnSpeed;
	float RocketBootsTurnSpeed;
	float RollTest;
	float RootedAnimInterpolationTime;
	float RotateToFaceSlopeSpeed;
	float RoughSeaIdleSwimmingPitchRotation;
	float SitPostureChangeTimeMax;
	float SitPostureChangeTimeMin;
	float SlidingBrake;
	float SlopeAngleForDownhillClimb;
	float SlopeAngleForSlide;
	float SlopeAngleForUphillClimb;
	float SmoothVelocitySpeed;
	float SwimmingPitchRotationSurfaceExtra;
	float SwimmingRollSmoothTime;
	float SwimmingRollSmoothTimeWithWeapon;
	float SwimmingSmoothTime;
	float SwimmingSmoothTimeMin;
	float SwimmingSmoothTimeWithWeapon;
	float TimeAfterDeathRagdollIsEnabledBackward;
	float TimeAfterDeathRagdollIsEnabledForward;
	float TimeAfterDeathRagdollIsEnabledWhenBlocked;
	float TimeFallingUntilPanic;
	float TimeNotOnGroundToBeConsideredInAir;
	float TimeNotOnGroundToUseFallingCamera;
	float TimeToShowSplashEffect;
	float TrudgeUphillSpeed;
	float UnderwaterToAirTolerance;
	float UphillSpeedMultiplier;
	float WaterBottomSmoothPushUp;
	float WaterBottomSmoothPushUpDepth;
	float WaterEffectFadeSpring;
	float WaterEffectSpeedFadeMax;
	float WaterEffectSpeedFadeMin;
	float YawPullSpeed;
	bool NPCBehaviourInfo;
	bool NPCLightsAlwaysOn;
	bool NPCLookAtEnabled;
	bool NPCUseBehaviourTree;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcPhotoPlant
struct GcPhotoFlora
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoPlant PlantType;
};

struct GcPhotoCreature
{
	enum class PhotoCreatureTypeEnum : uint32_t
	{
		Ground = 0,
		Water = 1,
		Air = 2,
	};

	NMS_GameComponents::GcPhotoCreature::PhotoCreatureTypeEnum PhotoCreatureType;
};

//Dependency: GcPhotoCreature
struct GcPhotoFauna
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcPhotoCreature CreatureArea;
	bool MustBePet;
};

//Dependency: GcBiomeType
//Dependency: GcPhotoFlora
//Dependency: GcPhotoBuildings
//Dependency: GcPhotoFauna
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForPhoto
{
	std::vector<NMS_GameComponents::GcBiomeType> Biomes;
	std::vector<NMS_GameComponents::GcPhotoBuildings> Buildings;
	NMS::VariableSizeString DebugText;
	std::vector<NMS_GameComponents::GcPhotoFauna> Fauna;
	std::vector<NMS_GameComponents::GcPhotoFlora> Flora;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageSecondary;
	NMS::VariableSizeString MessageSuccess;
	bool TakeAmountFromSeasonData;
};

//Dependency: GcStatsTypes
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForRepair
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcStatsTypes TargetStat;
};

//Dependency: GcScanEventGPSHint
//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct GcMissionSequenceWaitForScanEvent
{
	NMS::NMSString0x20A Event;
	NMS::NMSString0x20A NexusMessage;
	NMS::NMSString0x20A SurveyHint;
	NMS::NMSString0x20A SurveyInactiveHint;
	NMS::NMSString0x20A SurveySwapHint;
	NMS::NMSString0x20A SurveyVehicleHint;
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString GalaxyMapMessage;
	NMS::VariableSizeString GalaxyMapMessageNotSpace;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString TimeoutOSD;
	float Timeout;
	NMS_GameComponents::GcScanEventGPSHint UseGPSInText;
	bool DistanceTimeout;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitForStat
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS::NMSString0x10 Stat;
	NMS::NMSString0x10 StatGroup;
	int32_t Amount;
};

//Dependency: VariableSizeString
struct GcMissionSequenceWaitForWarps
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	int32_t Amount;
};

struct GcWonderCreatureCategory
{
	enum class WonderCreatureCategoryEnum : uint32_t
	{
		HerbivoreSizeMax = 0,
		HerbivoreSizeMin = 1,
		CarnivoreSizeMax = 2,
		CarnivoreSizeMin = 3,
		IntelligenceMax = 4,
		ViciousnessMax = 5,
		Hot = 6,
		Cold = 7,
		Tox = 8,
		Rad = 9,
		Weird = 10,
		Water = 11,
		Robot = 12,
		Flyer = 13,
		Cave = 14,
	};

	NMS_GameComponents::GcWonderCreatureCategory::WonderCreatureCategoryEnum WonderCreatureCategory;
};

struct GcWonderFloraCategory
{
	enum class WonderFloraCategoryEnum : uint32_t
	{
		GeneralFact0 = 0,
		GeneralFact1 = 1,
		GeneralFact2 = 2,
		GeneralFact3 = 3,
		ColdFact = 4,
		HotFact = 5,
		RadFact = 6,
		ToxFact = 7,
	};

	NMS_GameComponents::GcWonderFloraCategory::WonderFloraCategoryEnum WonderFloraCategory;
};

struct GcWonderPlanetCategory
{
	enum class WonderPlanetCategoryEnum : uint32_t
	{
		TemperatureMax = 0,
		TemperatureMin = 1,
		ToxicityMax = 2,
		RadiationMax = 3,
		AnomalyMax = 4,
		RadiusMax = 5,
		RadiusMin = 6,
		AltitudeReachedMax = 7,
		AltitudeReachedMin = 8,
		PerfectionMax = 9,
		PerfectionMin = 10,
	};

	NMS_GameComponents::GcWonderPlanetCategory::WonderPlanetCategoryEnum WonderPlanetCategory;
};

struct GcWonderMineralCategory
{
	enum class WonderMineralCategoryEnum : uint32_t
	{
		GeneralFact0 = 0,
		GeneralFact1 = 1,
		GeneralFact2 = 2,
		MetalFact = 3,
		ColdFact = 4,
		HotFact = 5,
		RadFact = 6,
		ToxFact = 7,
	};

	NMS_GameComponents::GcWonderMineralCategory::WonderMineralCategoryEnum WonderMineralCategory;
};

//Dependency: GcWonderCreatureCategory
//Dependency: VariableSizeString
//Dependency: GcWonderFloraCategory
//Dependency: GcWonderPlanetCategory
//Dependency: GcWonderMineralCategory
//Dependency: GcWonderType
//Dependency: TkEqualityEnum
struct GcMissionSequenceWaitForWonderValue
{
	NMS::VariableSizeString DebugText;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcWonderCreatureCategory CreatureWonderType;
	int32_t Decimals;
	NMS_GameComponents::GcWonderFloraCategory FloraWonderType;
	NMS_GameComponents::GcWonderMineralCategory MineralWonderType;
	NMS_GameComponents::GcWonderPlanetCategory PlanetWonderType;
	NMS_Toolkit::TkEqualityEnum Test;
	float Value;
	NMS_GameComponents::GcWonderType WonderTypeToUse;
	bool TakeAmountFromSeasonalData;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcMissionSequenceWaitRealTimeCombat
{
	NMS::VariableSizeString DebugText;
	NMS::NMSString0x10 DisplayStat;
	NMS::VariableSizeString Message;
	NMS::VariableSizeString MessageCombat;
	uint64_t Time;
	float Randomness;
	bool StatFromNow;
};

//Dependency: GcGenericMissionSequence
struct GcMissionTable
{
	std::vector<NMS_GameComponents::GcGenericMissionSequence> Missions;
};

//Dependency: GcBuildingSpawnData
//Dependency: GcBuildingSpawnSlot
//Dependency: GcBuildingOverrideData
struct GcPlanetBuildingData
{
	std::vector<NMS_GameComponents::GcBuildingSpawnData> Buildings;
	std::vector<NMS_GameComponents::GcBuildingSpawnSlot> BuildingSlots;
	std::vector<NMS_GameComponents::GcBuildingOverrideData> OverrideBuildings;
	float PlanetRadius;
	float Spacing;
	float VoronoiPointDivisions;
	int32_t VoronoiPointSeed;
	int32_t VoronoiSectorSeed;
	bool InitialBuildingsPlaced;
	bool IsPrime;
	bool IsWaterworld;
};

//Dependency: GcInteractionMissionState
struct GcRewardWeapon
{
	float PoolTypeProbabilities[5];
	int32_t ItemLevel;
	NMS_GameComponents::GcInteractionMissionState SetInteractionStateOnSuccess;
	bool ForceFixed;
	bool MarkInteractionComplete;
	bool OnlyUseNextInteractionOnSuccess;
	bool ReinteractOnDecline;
	bool RequeueInteraction;
	bool UsePlanetSeed;
};

//Dependency: TkPaletteTexture
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcModularCustomisationColourGroupPalette
{
	NMS::NMSString0x20A RequiredTextureOption;
	NMS::NMSString0x10 RequiredTextureGroup;
	NMS_Toolkit::TkPaletteTexture Palette;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: VariableSizeString
struct TkFoliageData
{
	NMS::Colour Colour;
	NMS::VariableSizeString Material;
	float AngleMultiplier;
	float Density;
	float DensityVariance;
	float Scale;
	bool AngleExponentially;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemGlobalVariation
{
	NMS::VariableSizeString Model;
	int32_t Variations;
	NMS::NMSString0x20 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcRewardCustomPlayerControl
{
	NMS::NMSString0x10 RequestedMode;
};

//Dependency: GcScannerIconHighlightTypes
//Dependency: TkTextureResource
struct GcScannerIcon
{
	NMS_Toolkit::TkTextureResource Main;
	NMS_Toolkit::TkTextureResource Small;
	NMS_GameComponents::GcScannerIconHighlightTypes Highlight;
};

//Dependency: GcScannerIcon
//Dependency: TkTextureResource
//Dependency: Colour
struct GcScannerIcons
{
	NMS::Colour ScannableColours[75];
	NMS::Colour NetworkFSPlayerColours[4];
	NMS::Colour BuildingColour;
	NMS::Colour GenericColour;
	NMS::Colour RelicColour;
	NMS::Colour SignalColour;
	NMS::Colour UnknownColour;
	NMS_GameComponents::GcScannerIcon ScannableIcons[75];
	NMS_GameComponents::GcScannerIcon ScannableIconsBinocs[75];
	NMS_GameComponents::GcScannerIcon BuildingIcons[35];
	NMS_GameComponents::GcScannerIcon BuildingIconsBinocs[35];
	NMS_GameComponents::GcScannerIcon BuildingIconsHuge[35];
	NMS_GameComponents::GcScannerIcon Vehicles[7];
	NMS_GameComponents::GcScannerIcon GenericIcons[6];
	NMS_GameComponents::GcScannerIcon NetworkFSPlayerMarkers[4];
	NMS_GameComponents::GcScannerIcon NetworkFSPlayerMarkersShip[4];
	NMS_GameComponents::GcScannerIcon NetworkPlayerFreighter[4];
	NMS_Toolkit::TkTextureResource HighlightIcons[5];
	NMS_GameComponents::GcScannerIcon ArrowLarge;
	NMS_GameComponents::GcScannerIcon ArrowSmall;
	NMS_GameComponents::GcScannerIcon BaseBuildingMarker;
	NMS_GameComponents::GcScannerIcon Battle;
	NMS_GameComponents::GcScannerIcon BattleSmall;
	NMS_GameComponents::GcScannerIcon BlackHole;
	NMS_GameComponents::GcScannerIcon Bounty1;
	NMS_GameComponents::GcScannerIcon Bounty2;
	NMS_GameComponents::GcScannerIcon Bounty3;
	NMS_GameComponents::GcScannerIcon BountySmall;
	NMS_GameComponents::GcScannerIcon Checkpoint;
	NMS_GameComponents::GcScannerIcon CircleAnimation;
	NMS_GameComponents::GcScannerIcon CreatureAction;
	NMS_GameComponents::GcScannerIcon CreatureCurious;
	NMS_GameComponents::GcScannerIcon CreatureDanger;
	NMS_GameComponents::GcScannerIcon CreatureDiscovered;
	NMS_GameComponents::GcScannerIcon CreatureFiend;
	NMS_GameComponents::GcScannerIcon CreatureInteraction;
	NMS_GameComponents::GcScannerIcon CreatureMilk;
	NMS_GameComponents::GcScannerIcon CreatureTame;
	NMS_GameComponents::GcScannerIcon CreatureUndiscovered;
	NMS_GameComponents::GcScannerIcon CreatureUnknown;
	NMS_GameComponents::GcScannerIcon DamagedFrigate;
	NMS_GameComponents::GcScannerIcon Death;
	NMS_GameComponents::GcScannerIcon DeathSmall;
	NMS_GameComponents::GcScannerIcon DiamondAnimation;
	NMS_GameComponents::GcScannerIcon EditingBase;
	NMS_GameComponents::GcScannerIcon Expedition;
	NMS_GameComponents::GcScannerIcon Freighter;
	NMS_GameComponents::GcScannerIcon FreighterBase;
	NMS_GameComponents::GcScannerIcon FriendlyDrone;
	NMS_GameComponents::GcScannerIcon Garage;
	NMS_GameComponents::GcScannerIcon HexAnimation;
	NMS_GameComponents::GcScannerIcon MessageBeacon;
	NMS_GameComponents::GcScannerIcon MessageBeaconSmall;
	NMS_GameComponents::GcScannerIcon MissionAbandonedFreighter;
	NMS_GameComponents::GcScannerIcon MissionEnterBuilding;
	NMS_GameComponents::GcScannerIcon MissionEnterFreighter;
	NMS_GameComponents::GcScannerIcon MissionEnterOrbit;
	NMS_GameComponents::GcScannerIcon MissionEnterStation;
	NMS_GameComponents::GcScannerIcon MonumentMarker;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarker;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarkerShip;
	NMS_GameComponents::GcScannerIcon NetworkPlayerMarkerVehicle;
	NMS_GameComponents::GcScannerIcon NPC;
	NMS_GameComponents::GcScannerIcon OtherPlayerSettlement;
	NMS_GameComponents::GcScannerIcon Pet;
	NMS_GameComponents::GcScannerIcon PetActivity;
	NMS_GameComponents::GcScannerIcon PetInteraction;
	NMS_GameComponents::GcScannerIcon PetSad;
	NMS_GameComponents::GcScannerIcon PirateRaid;
	NMS_GameComponents::GcScannerIcon PlanetPoleEast;
	NMS_GameComponents::GcScannerIcon PlanetPoleNorth;
	NMS_GameComponents::GcScannerIcon PlanetPoleSouth;
	NMS_GameComponents::GcScannerIcon PlanetPoleWest;
	NMS_GameComponents::GcScannerIcon PlayerBase;
	NMS_GameComponents::GcScannerIcon PlayerFreighter;
	NMS_GameComponents::GcScannerIcon PlayerSettlement;
	NMS_GameComponents::GcScannerIcon PortalMarker;
	NMS_GameComponents::GcScannerIcon PurchasableFrigate;
	NMS_GameComponents::GcScannerIcon SettlementNPC;
	NMS_GameComponents::GcScannerIcon Ship;
	NMS_GameComponents::GcScannerIcon ShipSmall;
	NMS_GameComponents::GcScannerIcon TaggedBuilding;
	NMS_GameComponents::GcScannerIcon TaggedPlanet;
	NMS_GameComponents::GcScannerIcon TimedEvent;
	NMS_GameComponents::GcScannerIcon VehicleGeneric;
};

//Dependency: GcWeightedResource
//Dependency: NMSString0x10
struct GcModuleOverride
{
	NMS::NMSString0x10 Module;
	std::vector<NMS_GameComponents::GcWeightedResource> Scenes;
	float OriginalSceneProbability;
	float ProbabilityMultiplier;
};

//Dependency: NMSString0x80
struct GcMonthlyRecurrence
{
	int32_t RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;
};

//Dependency: GcColourisePalette
struct GcMultiColouriseComponentData
{
	std::vector<NMS_GameComponents::GcColourisePalette> Palettes;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcNGuiActionData
{
	enum class ActionEnum : uint32_t
	{
		Click = 0,
		Hover = 1,
		ArrowLeft = 2,
		ArrowRight = 3,
	};

	NMS::VariableSizeString Data;
	NMS::NMSString0x10 LayerID;
	NMS_GameComponents::GcNGuiActionData::ActionEnum Action;
};

//Dependency: NMSString0x10
struct GcRewardFreighterSlot
{
	NMS::NMSString0x10 Cost;
};

struct GcRewardSetWeaponSuppressed
{
	bool WeaponSuppressed;
};

//Dependency: GcNGuiElementData
//Dependency: TkNGuiGraphicStyle
//Dependency: VariableSizeString
struct GcNGuiLayerData
{
	enum class AltModeEnum : uint32_t
	{
		None = 0,
		Normal = 1,
		Alt = 2,
		NeverOnTouch = 3,
		OnlyOnTouch = 4,
	};

	NMS_GameComponents::GcNGuiElementData ElementData;
	std::vector<NMSTemplate> Children;
	NMS::VariableSizeString DataFilename;
	NMS::VariableSizeString Image;
	NMS_Toolkit::TkNGuiGraphicStyle Style;
	NMS_GameComponents::GcNGuiLayerData::AltModeEnum AltMode;
};

//Dependency: GcNGuiPresetText
//Dependency: GcNGuiPresetGraphic
//Dependency: GcNGuiLayoutData
//Dependency: VariableSizeString
struct GcNGuiPreset
{
	NMS_GameComponents::GcNGuiPresetText Text[10];
	NMS_GameComponents::GcNGuiPresetGraphic Graphic[10];
	NMS_GameComponents::GcNGuiPresetGraphic Layer[10];
	NMS_GameComponents::GcNGuiLayoutData SpacingLayout;
	NMS::VariableSizeString Font;
};

//Dependency: GcNGuiElementData
struct GcNGuiSpacingData
{
	NMS_GameComponents::GcNGuiElementData ElementData;
};

//Dependency: GcNGuiSpecialTextImageData
struct GcNGuiSpecialTextImages
{
	std::vector<NMS_GameComponents::GcNGuiSpecialTextImageData> SpecialImages;
};

//Dependency: GcNGuiStyleAnimationData
//Dependency: NMSString0x10
struct GcNGuiSpecialTextStyleData
{
	NMS_GameComponents::GcNGuiStyleAnimationData Animation;
	NMS::NMSString0x10 Name;
	std::vector<NMSTemplate> StyleProperties;
};

struct GcSentinelQuadWeaponMode
{
	enum class SentinelQuadWeaponModeEnum : uint32_t
	{
		Laser = 0,
		MiniCannon = 1,
		Grenades = 2,
		Flamethrower = 3,
	};

	NMS_GameComponents::GcSentinelQuadWeaponMode::SentinelQuadWeaponModeEnum SentinelQuadWeaponMode;
};

//Dependency: GcNGuiSpecialTextStyleData
struct GcNGuiSpecialTextStyles
{
	std::vector<NMS_GameComponents::GcNGuiSpecialTextStyleData> SpecialStyles;
};

//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcResourceElement
//Dependency: GcRealityCommonFactions
//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnTrader
{
	NMS_GameComponents::GcPlayerCommunicatorMessage HailingMessage;
	NMS_GameComponents::GcResourceElement CustomShipResource;
	NMS::NMSString0x20A CustomHailOSD;
	NMS_GameComponents::GcRealityCommonFactions ShipTrailFactionOverride;
	bool UseCustomMessage;
	bool UseSentinelCrashedShipResource;
	bool WarpOutOnCombatStart;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcVehicleScanTableEntry
{
	NMS::NMSString0x20A Name;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 RequiredTech;
	std::vector<NMS::NMSString0x20A> ScanList;
};

//Dependency: GcVehicleScanTableEntry
struct GcVehicleScanTable
{
	std::vector<NMS_GameComponents::GcVehicleScanTableEntry> VehicleScanTable;
};

//Dependency: GcCharacterAlternateAnimation
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcNPCComponentData
{
	std::vector<NMS_GameComponents::GcCharacterAlternateAnimation> AlternateAnims;
	NMS::NMSString0x10 HologramEffect;
	std::vector<NMS::NMSString0x10> Tags;
	NMS_GameComponents::GcAlienRace Race;
	bool IsMech;
	bool IsOldStyleNPC;
};

//Dependency: GcNPCHabitationType
//Dependency: NMSString0x10
struct GcNPCHabitationComponentData
{
	NMS::NMSString0x10 NPCSpawnLocator;
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;
};

//Dependency: GcSettlementMaterialData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementColourPalette
{
	NMS_GameComponents::GcSettlementMaterialData UpgradeLevel[4];
	NMS::NMSString0x10 Name;
	float RelativeProbability;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
};

//Dependency: GcSettlementColourPalette
//Dependency: NMSString0x10
struct GcSettlementColourTable
{
	std::vector<NMS::NMSString0x10> DecorationPartIds;
	std::vector<NMS_GameComponents::GcSettlementColourPalette> SettlementColourPalettes;
};

//Dependency: TkAttachmentData
//Dependency: NMSString0x10
struct GcNPCInteractionData
{
	NMS_Toolkit::TkAttachmentData Data;
	NMS::NMSString0x10 ID;
};

//Dependency: GcNPCInteractionData
struct GcNPCInteractionsDataTable
{
	std::vector<NMS_GameComponents::GcNPCInteractionData> NPCInteractions;
};

//Dependency: GcAudioWwiseEvents
//Dependency: Colour
//Dependency: VariableSizeString
//Dependency: TkTextureResource
struct GcRewardOSDMessage
{
	NMS::Colour MessageColour;
	NMS_Toolkit::TkTextureResource Icon;
	NMS::VariableSizeString Message;
	NMS_GameComponents::GcAudioWwiseEvents AudioEvent;
	float Time;
	bool RandomiseMessage;
	bool UseFancyMessage;
	bool UseSpookMessage;
	bool UseTimedMessage;
};

struct GcNPCNavigationAreaComponentData
{
	enum class NavAreaTypeEnum : uint32_t
	{
		Normal = 0,
		BuildingWithExterior = 1,
		Debris = 2,
		Ship = 3,
		Mech = 4,
		PlanetMech = 5,
		Demo = 6,
		WFCBase = 7,
		FreighterBase = 8,
	};

	float ConnectionLengthFactor;
	float MaxNeighbourSlope;
	float MaxRadius;
	float MinRadius;
	NMS_GameComponents::GcNPCNavigationAreaComponentData::NavAreaTypeEnum NavAreaType;
	float NeighbourCandidateDistance;
	float SphereCastHeightClearance;
	bool LimitPOIConnections;
};

struct GcRewardFreighterBaseReset
{
};

//Dependency: GcInteractionType
//Dependency: GcAlienMoodMissionOverride
//Dependency: GcScanToRevealComponentData
//Dependency: GcAlienPuzzleMissionOverride
//Dependency: GcNPCPropType
//Dependency: GcAlienRace
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcTechnologyCategory
//Dependency: NMSString0x20
struct GcNPCPlacementInfo
{
	NMS_GameComponents::GcScanToRevealComponentData ScanToRevealData;
	NMS::NMSString0x20A ForceInteraction;
	std::vector<NMS::NMSString0x10> HideDuringMissions;
	std::vector<NMS_GameComponents::GcAlienMoodMissionOverride> MoodMissionOverrideTable;
	NMS::NMSString0x10 PlacementRuleId;
	std::vector<NMS_GameComponents::GcAlienPuzzleMissionOverride> PuzzleMissionOverrideTable;
	NMS::NMSString0x10 SpawnSpecific;
	NMS_GameComponents::GcNPCPropType DefaultProp;
	float FractionOfNodesActive;
	NMS_GameComponents::GcInteractionType InteractionOverride;
	int32_t MaxNodesActivated;
	NMS_GameComponents::GcAlienRace Race;
	float SpawnChance;
	NMS_GameComponents::GcTechnologyCategory TechShopCategory;
	NMS::NMSString0x20 PlacmentNodeName;
	NMS::NMSString0x20 SpawnUnderNodeName;
	bool CanTurn;
	bool DisableInteraction;
	bool IsMannequin;
	bool MustPlace;
	bool OnlyUsePuzzleOverridesIfPlayerOwned;
	bool PlaceAtLeastOne;
	bool SpawnAnyMajorRace;
	bool SpawnInAbandoned;
	bool SpawnMoving;
	bool UseFreighterNPC;
	bool UseScanToRevealData;
};

//Dependency: GcNPCProbabilityReactionData
//Dependency: NMSString0x10
struct GcNPCReactionEntry
{
	std::vector<NMS_GameComponents::GcNPCProbabilityReactionData> Animations;
	NMS::NMSString0x10 Emote;
	float ReactionChance;
};

//Dependency: GcNPCReactionEntry
struct GcNPCReactionData
{
	std::vector<NMS_GameComponents::GcNPCReactionEntry> Reactions;
};

//Dependency: GcNPCSettlementBehaviourAreaPropertyWeightEntry
//Dependency: GcNPCSettlementBehaviourBuildingClassCapacityEntry
//Dependency: GcNPCSettlementBehaviourBuildingClassWeightEntry
//Dependency: GcNPCSettlementBehaviourObjectTypeWeightEntry
struct GcNPCSettlementBehaviourEntry
{
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourAreaPropertyWeightEntry> AreaPropertyWeights;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourBuildingClassCapacityEntry> BuildingClassCapacities;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourBuildingClassWeightEntry> BuildingClassWeights;
	std::vector<NMS_GameComponents::GcNPCSettlementBehaviourObjectTypeWeightEntry> ObjectTypeWeights;
	float RunWhenOutdoorsProbability;
	bool OnlyUseIndoorPOIs;
};

//Dependency: GcNPCSettlementBehaviourEntry
struct GcNPCSettlementBehaviourData
{
	NMS_GameComponents::GcNPCSettlementBehaviourEntry BehaviourOverrides[5];
	NMS_GameComponents::GcNPCSettlementBehaviourEntry BaseBehaviour;
};

struct GcNameGeneratorSectorTypes
{
	enum class SectorNameEnum : uint32_t
	{
		Generic = 0,
		Elevated = 1,
		Low = 2,
		Trees = 3,
		LushTrees = 4,
		Lush = 5,
		Wet = 6,
		Cave = 7,
		Dead = 8,
		Buildings = 9,
		Water = 10,
		Ice = 11,
	};

	NMS_GameComponents::GcNameGeneratorSectorTypes::SectorNameEnum SectorName;
};

struct GcStormEvent
{
	bool InStorm;
};

struct GcNPCSettlementBehaviourState
{
	enum class NPCSettlementBehaviourStateEnum : uint32_t
	{
		Generic = 0,
		Sociable = 1,
		Productive = 2,
		Tired = 3,
		Afraid = 4,
	};

	NMS_GameComponents::GcNPCSettlementBehaviourState::NPCSettlementBehaviourStateEnum NPCSettlementBehaviourState;
};

//Dependency: GcResourceElement
//Dependency: GcAlienRace
//Dependency: NMSString0x10
struct GcUniqueNPCSpawnData
{
	NMS_GameComponents::GcResourceElement ResourceElement;
	NMS::NMSString0x10 Id;
	NMS::NMSString0x10 PresetId;
	NMS_GameComponents::GcAlienRace Race;
	float Scale;
};

//Dependency: GcNPCPlacementInfo
//Dependency: GcUniqueNPCSpawnData
//Dependency: VariableSizeString
struct GcNPCSpawnTable
{
	NMS::VariableSizeString NPCModelNames[9];
	NMS::VariableSizeString NPCMannequinModelName;
	std::vector<NMS_GameComponents::GcNPCPlacementInfo> PlacementInfos;
	std::vector<NMS_GameComponents::GcUniqueNPCSpawnData> UniqueNPCs;
	float NPCRaceScale[9];
};

//Dependency: GcNPCWordReactionList
struct GcNPCWordReactionCategory
{
	NMS_GameComponents::GcNPCWordReactionList Categories[7];
	NMS_GameComponents::GcNPCWordReactionList Fallback;
};

//Dependency: GcNPCWordReactionCategory
struct GcNPCWordReactionTable
{
	NMS_GameComponents::GcNPCWordReactionCategory Races[9];
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkWaterCondition
{
	enum class WaterConditionEnum : uint32_t
	{
		Absolutely_Tranquil = 0,
		Breezy_Lake = 1,
		Wavy_Lake = 2,
		Still_Pond = 3,
		Agitated_Pond = 4,
		Agitated_Lake = 5,
		Surf = 6,
		Big_Surf = 7,
		Chaotic_Sea = 8,
		Huge_Swell = 9,
		Choppy_Sea = 10,
		Very_Choppy_Sea = 11,
		White_Horses = 12,
		Ocean_Planet = 13,
		Wall_Of_Water = 14,
	};

	NMS_Toolkit::TkWaterCondition::WaterConditionEnum WaterCondition;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcCreaturePetTraits
struct GcPetTraitStaminaModifier
{
	float StaminaDrainModifierMax;
	float StaminaDrainModifierMin;
	float StaminaRechargeModifierMax;
	float StaminaRechargeModifierMin;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	float TraitMax;
	float TraitMin;
};

//Dependency: VariableSizeString
struct GcObjectDefinitionData
{
	enum class SizeClassEnum : uint32_t
	{
		Tiny = 0,
		Small = 1,
		Medium = 2,
		Large = 3,
		Massive = 4,
	};

	enum class ObjectRenderTypeEnum : uint32_t
	{
		Instanced = 0,
		Single = 1,
	};

	enum class ObjectCoverageTypeEnum : uint32_t
	{
		Blanket = 0,
		Cluster = 1,
		Solo = 2,
	};

	enum class ObjectAlignmentEnum : uint32_t
	{
		Upright = 0,
		SlightOffsetFromUpright = 1,
		LargeOffsetFromUpright = 2,
		ToNormal = 3,
		SlightOffsetFromNormal = 4,
		LargeOffsetFromNormal = 5,
	};

	enum class LocationTypeEnum : uint32_t
	{
		AboveGround = 0,
		UnderGround = 1,
		WaterSurface = 2,
		UnderWater = 3,
	};

	enum class LifeTypeEnum : uint32_t
	{
		Rock = 0,
		DryPlant = 1,
		LushPlant = 2,
		Artificial = 3,
	};

	NMS::VariableSizeString Filename;
	NMS_GameComponents::GcObjectDefinitionData::LifeTypeEnum LifeType;
	NMS_GameComponents::GcObjectDefinitionData::LocationTypeEnum LocationType;
	NMS_GameComponents::GcObjectDefinitionData::ObjectAlignmentEnum ObjectAlignment;
	NMS_GameComponents::GcObjectDefinitionData::ObjectCoverageTypeEnum ObjectCoverageType;
	NMS_GameComponents::GcObjectDefinitionData::ObjectRenderTypeEnum ObjectRenderType;
	NMS_GameComponents::GcObjectDefinitionData::SizeClassEnum SizeClass;
	bool AutoCollision;
	bool MatchGroundColour;
};

struct GcObjectPlacementCategory
{
	enum class ObjectPlacementEnum : uint32_t
	{
		None = 0,
		ResourceSmall = 1,
		ResourceMedium = 2,
		ResourceLarge = 3,
		ResourceDebris = 4,
	};

	NMS_GameComponents::GcObjectPlacementCategory::ObjectPlacementEnum ObjectPlacement;
};

struct GcRewardDiscoverRune
{
	bool AllRunes;
};

struct GcOptionsUIHeaderIcons
{
	enum class OptionsUIHeaderIconTypeEnum : uint32_t
	{
		General = 0,
		Ship = 1,
		Cog = 2,
		Scanner = 3,
		Advanced = 4,
		Cloud = 5,
	};

	NMS_GameComponents::GcOptionsUIHeaderIcons::OptionsUIHeaderIconTypeEnum OptionsUIHeaderIconType;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: Colour
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: TkTrophyEntry
//Dependency: TkLocalisationEntry
//Dependency: TkLanguages
//Dependency: Vector3f
//Dependency: Vector4f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: HashedString
//Dependency: LinkableNMSTemplate
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: GcNodeID
//Dependency: NMSString0x20
//Dependency: GcResource
//Dependency: NMSString0x100
//Dependency: NMSString0x800
//Dependency: NMSString0x400
//Dependency: NMSString0x200
//Dependency: NMSString0x80
//Dependency: Colour32
//Dependency: NMSString0x40
struct TkTestMetadata
{
	enum class TestEnumUInt8Enum : uint32_t
	{
		Enum1 = 0,
		Enum2 = 1,
		Enum3 = 2,
	};

	enum class TestInlineEnumEnum : uint32_t
	{
		Default = 0,
		NotDefault = 1,
		Other = 2,
	};

	enum class TestFlagsEnum : uint32_t
	{
		None = 0,
		Flag1 = 1,
		Flag2 = 2,
	};

	enum class TestEnumUInt32BitFieldEnum : uint32_t
	{
		None = 0,
		Enum1 = 1,
		Enum2 = 2,
	};

	enum class TestEnumEnum : uint32_t
	{
		Default = 0,
		Option1 = 1,
		Option2 = 2,
		Option3 = 3,
	};

	enum class DocOptionalEnumEnum : uint32_t
	{
		SomeValue1 = 0,
		SomeValue2 = 1,
		SomeValue3 = 2,
		SomeValue4 = 3,
	};

	enum class TestEnumArrayEnum : uint32_t
	{
		Default = 0,
		Option1 = 1,
		Option2 = 2,
		Option3 = 3,
	};

	NMS::Vector3f DocOptionalVector;
	NMS::Colour TestColour;
	NMS::Vector3f TestVector;
	NMS::Vector4f TestVector4;
	NMS_Toolkit::TkTrophyEntry TestClass;
	std::vector<NMS_Toolkit::TkLocalisationEntry> TestHashMap;
	NMS::NMSString0x20A DocOptionalRenamed;
	NMS::NMSString0x20A TestID256;
	NMS::NMSString0x20A TestLocID;
	NMS::HashedString TestHashedString;
	NMSTemplate TestClassPointer;
	std::vector<float> TestDynamicArray;
	NMS::VariableSizeString TestDynamicString;
	NMS::NMSString0x10 TestID;
	NMS::NMSString0x10 TestIDLookup;
	std::vector<NMS::LinkableNMSTemplate> TestLinkableClassPointerArray;
	NMS::VariableSizeString TestModelFilename;
	NMS::GcSeed TestSeed;
	NMS::VariableSizeString TestTextureFilename;
	int64_t TestInt64;
	uint64_t TestUInt64;
	uint64_t TestUniqueId;
	float TestStaticArray[10];
	float TestExternalEnumArray[5];
	float TestEnumArray[4];
	NMS::Vector2f TestVector2;
	NMS_Toolkit::TkTestMetadata::DocOptionalEnumEnum DocOptionalEnum;
	NMS_GameComponents::GcAudioWwiseEvents TestAudioEvent;
	NMS_Toolkit::TkTestMetadata::TestEnumEnum TestEnum;
	NMS_Toolkit::TkTestMetadata::TestEnumUInt32BitFieldEnum TestEnumUInt32BitField;
	NMS_Toolkit::TkLanguages TestExternalEnum;
	NMS_Toolkit::TkTestMetadata::TestFlagsEnum TestFlags;
	float TestFloat;
	NMS_Toolkit::TkTestMetadata::TestInlineEnumEnum TestInlineEnum;
	int32_t TestInt;
	NMS::GcNodeID TestNodeHandle;
	NMS::GcResource TestResource;
	uint32_t TestUInt32;
	int16_t TestInt16;
	uint16_t TestUInt16;
	NMS::NMSString0x800 TestString2048;
	NMS::NMSString0x400 TestString1024;
	NMS::NMSString0x200 TestString512;
	NMS::NMSString0x100 TestString256;
	NMS::NMSString0x80 TestString128;
	NMS::NMSString0x40 DocRenamedString64;
	NMS::NMSString0x40 TestString64;
	NMS::NMSString0x20 TestString;
	NMS::Colour32 TestColour32;
	bool TestBool;
	uint8_t TestByte;
	NMS_Toolkit::TkTestMetadata::TestEnumUInt8Enum TestEnumUInt8;
	int8_t TestInt8;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPaletteColourAlt
{
	enum class ColourAltNewEnum : uint32_t
	{
		Primary = 0,
		Secondary = 1,
		Alternative3 = 2,
		Alternative4 = 3,
		Alternative5 = 4,
		Unique = 5,
		MatchGround = 6,
		None = 7,
	};

	NMS_GameComponents::GcPaletteColourAlt::ColourAltNewEnum ColourAltNew;
};

//Dependency: GcImpactCombatEffectData
//Dependency: NMSString0x10
struct GcRewardDamage
{
	std::vector<NMS_GameComponents::GcImpactCombatEffectData> CombatEffects;
	NMS::NMSString0x10 PlayerDamage;
};

//Dependency: GcPaletteData
struct GcPaletteList
{
	enum class PalettesEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	NMS_GameComponents::GcPaletteData Palettes[64];
};

//Dependency: GcBroadcastLevel
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcParticleAction
{
	NMS::NMSString0x10 Effect;
	NMS_GameComponents::GcBroadcastLevel FindRange;
	NMS::NMSString0x20 Joint;
	bool Exact;
};

//Dependency: GcPlayerCommunicatorMessageWeighted
struct GcShipDialogue
{
	NMS_GameComponents::GcPlayerCommunicatorMessageWeighted DialogueTree[7];
};

//Dependency: GcPetFollowUpBehaviour
//Dependency: GcPetBehaviourMoodModifier
//Dependency: NMSString0x20A
//Dependency: GcPetBehaviourTraitModifier
struct GcPetBehaviourData
{
	enum class PetBehaviourValidityEnum : uint32_t
	{
		Everywhere = 0,
		OnPlanet = 1,
	};

	NMS::NMSString0x20A LabelText;
	std::vector<NMS_GameComponents::GcPetFollowUpBehaviour> FollowUpBehaviours;
	std::vector<NMS_GameComponents::GcPetBehaviourMoodModifier> MoodBehaviourModifiers;
	std::vector<NMS_GameComponents::GcPetBehaviourTraitModifier> TraitBehaviourModifiers;
	float MoodModifyOnComplete[2];
	float ApproachPlayerDist;
	float ChatChance;
	float CooldownTime;
	float MaxPerformTime;
	float MinPerformTime;
	NMS_GameComponents::GcPetBehaviourData::PetBehaviourValidityEnum PetBehaviourValidity;
	float SearchDist;
	float Weight;
	bool ReactiveBehaviour;
	bool UsefulBehaviour;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: TkModelRendererData
//Dependency: TkMaterialResource
struct GcEffectsGlobals
{
	NMS_Toolkit::TkModelRendererData ResourceRendererData;
	NMS_Toolkit::TkMaterialResource HologramComponentDefaultMaterial;
	float ClickToPlayCameraOffset;
	float ClickToPlayScale;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

//Dependency: GcCreaturePetMood
struct GcPetMoodStaminaModifier
{
	NMS_GameComponents::GcCreaturePetMood Mood;
	float MoodMax;
	float MoodMin;
	float StaminaDrainModifierMax;
	float StaminaDrainModifierMin;
	float StaminaRechargeModifierMax;
	float StaminaRechargeModifierMin;
};

struct GcPetTraitMoodModifier
{
	float MoodIncreaseMultiplierMax;
	float MoodIncreaseMultiplierMin;
	float TraitMax;
	float TraitMin;
};

//Dependency: GcPetTraitMoodModifier
struct GcPetTraitMoodModifierList
{
	NMS_GameComponents::GcPetTraitMoodModifier Modifiers[2];
};

//Dependency: GcPetBehaviourData
//Dependency: GcCreaturePetTraitRanges
//Dependency: GcPetMoodStaminaModifier
//Dependency: GcPetTraitStaminaModifier
//Dependency: GcPetTraitMoodModifierList
//Dependency: GcPetActionMoodModifier
struct GcPetBehaviourTable
{
	NMS_GameComponents::GcPetBehaviourData Behaviours[28];
	std::vector<NMS_GameComponents::GcPetMoodStaminaModifier> MoodStaminaModifiers;
	std::vector<NMS_GameComponents::GcPetTraitStaminaModifier> TraitStaminaModifiers;
	NMS_GameComponents::GcCreaturePetTraitRanges TraitRanges[11];
	NMS_GameComponents::GcPetTraitMoodModifierList TraitMoodModifiers[3];
	NMS_GameComponents::GcPetActionMoodModifier RewardMoodModifier[9];
	float MoodIncreaseTime[2];
	float MoodValuesOnAdopt[2];
	float MoodValuesOnHatch[2];
	float AccessoryGyroDamping;
	float AccessoryGyroFollowMotionStrength;
	float AccessoryGyroStrength;
	float AccessoryGyroToNeutralStrength;
	float GlobalCooldownModifier;
	float PlayerActivityDecreaseTime;
	float PlayerActivityIncreaseTime;
	float UsefulBehaviourLinkedCooldownAmount;
	bool AccessoryGyroActive;
};

struct GcPetChatType
{
	enum class PetChatTypeEnum : uint32_t
	{
		Adopted = 0,
		Hatched = 1,
		Summoned = 2,
		Greeting = 3,
		Hazard = 4,
		Scanning = 5,
		PositiveEmote = 6,
		HungryEmote = 7,
		LonelyEmote = 8,
		Go_There = 9,
		Come_Here = 10,
		Planet = 11,
		Mine = 12,
		Attack = 13,
		Chase = 14,
		ReceivedTreat = 15,
		Tickled = 16,
		Ride = 17,
		Egg_Laid = 18,
		Customise = 19,
		Unsummoned = 20,
	};

	NMS_GameComponents::GcPetChatType::PetChatTypeEnum PetChatType;
};

//Dependency: NMSString0x10
struct GcPetEggSpeciesOverrideData
{
	NMS::NMSString0x10 CreatureID;
	float MaxScaleOverride;
	float MinScaleOverride;
	bool CanChangeAccessories;
	bool CanChangeColour;
	bool CanChangeGrowth;
	bool CanChangeTraits;
};

//Dependency: GcPetEggSpeciesOverrideData
struct GcPetEggSpeciesOverrideTable
{
	std::vector<NMS_GameComponents::GcPetEggSpeciesOverrideData> SpeciesOverrides;
};

//Dependency: GcCreaturePetTraits
//Dependency: NMSString0x10
struct GcPetEggTraitModifierOverrideData
{
	NMS::NMSString0x10 ProductID;
	NMS::NMSString0x10 SubstanceID;
	int32_t BaseValueOverride;
	NMS_GameComponents::GcCreaturePetTraits Trait;
	bool IncreasesTrait;
};

//Dependency: GcPetEggTraitModifierOverrideData
struct GcPetEggTraitModifierOverrideTable
{
	std::vector<NMS_GameComponents::GcPetEggTraitModifierOverrideData> TraitModifiers;
};

struct GcRewardCrashSiteRepair
{
};

//Dependency: NMSString0x10
struct GcStatGroupData
{
	NMS::NMSString0x10 GroupName;
	std::vector<NMS::NMSString0x10> TrackedStats;
};

//Dependency: GcStatGroupData
struct GcStatGroupTable
{
	std::vector<NMS_GameComponents::GcStatGroupData> StatGroupTable;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkNamedAudioIdArray
{
	std::vector<NMS::NMSString0x80> Values;
	NMS::NMSString0x80 Name;
};

struct TkAnimStateMachineBlendTimeMode
{
	enum class TimeModeEnum : uint32_t
	{
		Normalised = 0,
		Seconds = 1,
	};

	NMS_Toolkit::TkAnimStateMachineBlendTimeMode::TimeModeEnum TimeMode;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcPlanetDataResourceHint
{
	NMS::NMSString0x10 Hint;
	NMS::NMSString0x10 Icon;
};

//Dependency: GcPhysicsCollisionGroupCollidesWith
struct GcPhysicsCollisionTable
{
	std::vector<NMS_GameComponents::GcPhysicsCollisionGroupCollidesWith> CollisionTable;
};

//Dependency: NMSString0x100
//Dependency: NMSString0x80
//Dependency: NMSString0x40
struct GcPlayfabMatchmakingAttributes
{
	int32_t gameProgress;
	int32_t isBackfilling;
	int32_t needsSmallLobby;
	NMS::NMSString0x100 lobbyConnectionString;
	NMS::NMSString0x80 gamemode;
	NMS::NMSString0x80 matchmakingVersion;
	NMS::NMSString0x80 platform;
	NMS::NMSString0x40 seasonNumber;
	NMS::NMSString0x40 UA;
};

//Dependency: GcSeed
//Dependency: Vector2f
struct GcPlanetCloudProperties
{
	enum class CloudinessEnum : uint32_t
	{
		CloudyWithClearSpells = 0,
		ClearWithCloudySpells = 1,
	};

	NMS::GcSeed Seed;
	NMS::Vector2f CoverageRange;
	NMS::Vector2f CoverExtremes;
	NMS_GameComponents::GcPlanetCloudProperties::CloudinessEnum Cloudiness;
	float Coverage1;
	float Coverage2;
	float Coverage3;
	float Offset1;
	float Offset2;
	float Offset3;
	float RateOfChange;
	float Ratio;
	float SecondaryRateOfChange;
};

//Dependency: GcColourPaletteData
struct GcPlanetColourData
{
	enum class PalettesEnum : uint32_t
	{
		Grass = 0,
		Plant = 1,
		Leaf = 2,
		Wood = 3,
		Rock = 4,
		Stone = 5,
		Crystal = 6,
		Sand = 7,
		Dirt = 8,
		Metal = 9,
		Paint = 10,
		Plastic = 11,
		Fur = 12,
		Scale = 13,
		Feather = 14,
		Water = 15,
		Cloud = 16,
		Sky = 17,
		Space = 18,
		Underbelly = 19,
		Undercoat = 20,
		Snow = 21,
		SkyHorizon = 22,
		SkyFog = 23,
		SkyHeightFog = 24,
		SkySunset = 25,
		SkyNight = 26,
		WaterNear = 27,
		SpaceCloud = 28,
		SpaceBottom = 29,
		SpaceSolar = 30,
		SpaceLight = 31,
		Warrior = 32,
		Scientific = 33,
		Trader = 34,
		WarriorAlt = 35,
		ScientificAlt = 36,
		TraderAlt = 37,
		RockSaturated = 38,
		RockLight = 39,
		RockDark = 40,
		PlanetRing = 41,
		Custom_Head = 42,
		Custom_Torso = 43,
		Custom_Chest_Armour = 44,
		Custom_Backpack = 45,
		Custom_Arms = 46,
		Custom_Hands = 47,
		Custom_Legs = 48,
		Custom_Feet = 49,
		Cave = 50,
		GrassAlt = 51,
		BioShip_Body = 52,
		BioShip_Underbelly = 53,
		BioShip_Cockpit = 54,
		SailShip_Sails = 55,
		Freighter = 56,
		FreighterPaint = 57,
		PirateBase = 58,
		PirateAlt = 59,
		SpaceStationBase = 60,
		SpaceStationAlt = 61,
		SpaceStationLights = 62,
		DeepWaterBioLum = 63,
	};

	NMS_GameComponents::GcColourPaletteData Palettes[64];
};

struct GcWonderTreasureCategory
{
	enum class WonderTreasureCategoryEnum : uint32_t
	{
		Loot = 0,
		Document = 1,
		BioSample = 2,
		Fossil = 3,
		Plant = 4,
		Tool = 5,
		Farm = 6,
		SeaLoot = 7,
		SeaHorror = 8,
		Salvage = 9,
		Bones = 10,
		SpaceHorror = 11,
		SpaceBones = 12,
	};

	NMS_GameComponents::GcWonderTreasureCategory::WonderTreasureCategoryEnum WonderTreasureCategory;
};

//Dependency: Colour
//Dependency: Vector3f
struct GcPlanetRingData
{
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f Up;
	float AlphaMultiplier;
	float Depth;
	float LargeScale1;
	float LargeScale2;
	float MidScale;
	float MidStrength;
	float Offset;
	float SmallScale;
	bool HasRings;
};

//Dependency: GcHeavyAirColourData
//Dependency: VariableSizeString
struct GcPlanetHeavyAirData
{
	NMS_GameComponents::GcHeavyAirColourData Colours[5];
	NMS::VariableSizeString Filename;
};

//Dependency: GcPlanetHeavyAirData
//Dependency: GcRainbowType
//Dependency: GcScreenFilters
//Dependency: GcWeatherOptions
struct GcPlanetWeatherData
{
	enum class WeatherIntensityEnum : uint32_t
	{
		Default = 0,
		Extreme = 1,
	};

	enum class StormFrequencyEnum : uint32_t
	{
		None = 0,
		Low = 1,
		High = 2,
		Always = 3,
	};

	enum class AtmosphereTypeEnum : uint32_t
	{
		None = 0,
		Normal = 1,
	};

	NMS_GameComponents::GcPlanetHeavyAirData HeavyAir;
	NMS_GameComponents::GcPlanetWeatherData::AtmosphereTypeEnum AtmosphereType;
	int32_t DayColourIndex;
	int32_t DuskColourIndex;
	int32_t NightColourIndex;
	NMS_GameComponents::GcRainbowType RainbowType;
	NMS_GameComponents::GcScreenFilters ScreenFilter;
	NMS_GameComponents::GcPlanetWeatherData::StormFrequencyEnum StormFrequency;
	NMS_GameComponents::GcScreenFilters StormScreenFilter;
	NMS_GameComponents::GcPlanetWeatherData::WeatherIntensityEnum WeatherIntensity;
	NMS_GameComponents::GcWeatherOptions WeatherType;
};

//Dependency: NMSString0x80
struct GcPlanetInfo
{
	NMS::NMSString0x80 SentinelsPerDifficulty[4];
	NMS::NMSString0x80 Fauna;
	NMS::NMSString0x80 Flora;
	NMS::NMSString0x80 PlanetDescription;
	NMS::NMSString0x80 PlanetType;
	NMS::NMSString0x80 Resources;
	NMS::NMSString0x80 Weather;
	bool SentinelHighlightPerDifficulty[4];
	bool IsWeatherExtreme;
	bool SpecialFauna;
};

//Dependency: GcPlanetBuildingData
//Dependency: GcPlanetColourData
//Dependency: GcPlanetCloudProperties
//Dependency: GcEnvironmentSpawnData
//Dependency: GcPlanetRingData
//Dependency: GcPlanetWeatherData
//Dependency: GcPlanetGenerationIntermediateData
//Dependency: GcPlanetDataResourceHint
//Dependency: GcPlanetHazardData
//Dependency: GcPlanetGroundCombatData
//Dependency: GcPlanetWaterData
//Dependency: GcBuildingDensityLevels
//Dependency: GcPlanetLife
//Dependency: GcAlienRace
//Dependency: GcPlanetInfo
//Dependency: TkVoxelGeneratorData
//Dependency: Colour
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct GcPlanetData
{
	enum class ResourceLevelEnum : uint32_t
	{
		Low = 0,
		High = 1,
	};

	NMS_GameComponents::GcPlanetColourData Colours;
	NMS_GameComponents::GcPlanetWeatherData Weather;
	NMS::Colour TileColours[23];
	NMS_GameComponents::GcPlanetRingData Rings;
	NMS_Toolkit::TkVoxelGeneratorData Terrain;
	NMS_GameComponents::GcPlanetGenerationIntermediateData GenerationData;
	NMS_GameComponents::GcEnvironmentSpawnData SpawnData;
	NMS_GameComponents::GcPlanetBuildingData BuildingData;
	NMS_GameComponents::GcPlanetCloudProperties Clouds;
	NMS::NMSString0x10 CommonSubstanceID;
	std::vector<NMS_GameComponents::GcPlanetDataResourceHint> ExtraResourceHints;
	NMS::NMSString0x10 RareSubstanceID;
	NMS::VariableSizeString TerrainFile;
	std::vector<int32_t> TileTypeIndices;
	NMS::NMSString0x10 UncommonSubstanceID;
	NMS_GameComponents::GcPlanetHazardData Hazard;
	NMS_GameComponents::GcPlanetGroundCombatData GroundCombatDataPerDifficulty[4];
	NMS_GameComponents::GcPlanetWaterData Water;
	NMS_GameComponents::GcBuildingDensityLevels BuildingLevel;
	NMS_GameComponents::GcPlanetLife CreatureLife;
	float FuelMultiplier;
	NMS_GameComponents::GcAlienRace InhabitingRace;
	NMS_GameComponents::GcPlanetLife Life;
	int32_t PlanetIndex;
	NMS_GameComponents::GcPlanetData::ResourceLevelEnum ResourceLevel;
	int32_t TileTypeSet;
	NMS_GameComponents::GcPlanetInfo PlanetInfo;
	NMS::NMSString0x80 Name;
	bool InAbandonedSystem;
	bool InEmptySystem;
	bool InGasGiantSystem;
};

//Dependency: GcBiomeType
//Dependency: GcBiomeSubType
//Dependency: NMSString0x10
//Dependency: GcPlanetClass
//Dependency: GcPlanetSize
//Dependency: GcGalaxyStarTypes
//Dependency: GcSeed
struct GcPlanetGenerationInputData
{
	NMS::NMSString0x10 CommonSubstance;
	NMS::NMSString0x10 RareSubstance;
	NMS::GcSeed Seed;
	NMS_GameComponents::GcBiomeType Biome;
	NMS_GameComponents::GcBiomeSubType BiomeSubType;
	NMS_GameComponents::GcPlanetClass Class;
	int32_t PlanetIndex;
	NMS_GameComponents::GcPlanetSize PlanetSize;
	int32_t RealityIndex;
	NMS_GameComponents::GcGalaxyStarTypes Star;
	bool ForceContinents;
	bool HasRings;
	bool InAbandonedSystem;
	bool InEmptySystem;
	bool InGasGiantSystem;
	bool InPirateSystem;
	bool Prime;
};

//Dependency: NMSString0x10
struct GcRewardScan
{
	NMS::NMSString0x10 ScanDataId;
};

//Dependency: GcMissionFaction
struct GcRewardFactionStanding
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcMissionFaction Faction;
	bool SetToMinBeforeAdd;
};

//Dependency: TkTextureResource
//Dependency: NMSString0x40
struct GcTradingCategoryData
{
	NMS_Toolkit::TkTextureResource Icon;
	float ProductMultiplierChangePer100;
	float SubstanceMultiplierChangePer100;
	NMS::NMSString0x40 Name;
};

//Dependency: GcTradeCategory
//Dependency: TkTextureResource
struct GcTradingClassData
{
	NMS_Toolkit::TkTextureResource Icon;
	float MaxBuyingPriceMultiplier;
	float MaxBuyingPriceMultiplierSurge;
	float MaxSellingPriceMultiplier;
	float MinBuyingPriceMultiplier;
	float MinBuyingPriceMultiplierSurge;
	float MinSellingPriceMultiplier;
	NMS_GameComponents::GcTradeCategory Needs;
	NMS_GameComponents::GcTradeCategory Sells;
};

//Dependency: GcTradingCategoryData
//Dependency: GcTradingClassData
struct GcTradingClassTable
{
	NMS_GameComponents::GcTradingCategoryData CategoryData[9];
	NMS_GameComponents::GcTradingClassData TradingClassesData[7];
	float MaxTradingMultiplier;
	float MinTradingMultiplier;
};

//Dependency: TkPaletteTexture
struct GcPlanetTerrainColour
{
	NMS_Toolkit::TkPaletteTexture Palette;
	int32_t Index;
};

struct GcShipWeapons
{
	enum class ShipWeaponEnum : uint32_t
	{
		Laser = 0,
		Projectile = 1,
		Shotgun = 2,
		Minigun = 3,
		Plasma = 4,
		Missile = 5,
		Rocket = 6,
	};

	NMS_GameComponents::GcShipWeapons::ShipWeaponEnum ShipWeapon;
};

//Dependency: GcRewardTableCategory
//Dependency: NMSString0x10
struct GcRewardTableEntry
{
	NMS_GameComponents::GcRewardTableCategory Rarities[3];
	NMS::NMSString0x10 Id;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNavMeshAreaType
//Dependency: NMSString0x10
struct TkNavMeshAreaGroup
{
	std::vector<NMS_Toolkit::TkNavMeshAreaType> Areas;
	NMS::NMSString0x10 GroupId;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcPlanetWeatherColourIndex
{
	enum class WeatherColourSetEnum : uint32_t
	{
		Common = 0,
		Rare = 1,
	};

	int32_t Index;
	NMS_GameComponents::GcPlanetWeatherColourIndex::WeatherColourSetEnum WeatherColourSet;
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardProduct
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory ItemCategory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool AllowedProductTypes[11];
};

//Dependency: GcPlanetaryMappingValues
struct GcPlanetaryMappingTable
{
	NMS_GameComponents::GcPlanetaryMappingValues MappingInfo[5];
};

//Dependency: NMSString0x10
struct GcPlayAnimAction
{
	NMS::NMSString0x10 Anim;
};

//Dependency: NMSString0x80
struct GcPlayAudioAction
{
	float OcclusionRadius;
	NMS::NMSString0x80 Sound;
	bool UseOcclusion;
};

struct GcRewardBuildersKnown
{
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcPlayerControlModeEntry
{
	NMS_Toolkit::TkModelResource ControlModeResource;
	NMS::NMSString0x10 Id;
};

//Dependency: GcCharacterJetpackEffect
//Dependency: NMSString0x10
//Dependency: GcPlayerControlModeEntry
struct GcPlayerCharacterComponentData
{
	NMS::NMSString0x10 IntialPlayerControlMode;
	std::vector<NMS_GameComponents::GcCharacterJetpackEffect> JetpackEffects;
	std::vector<NMS_GameComponents::GcPlayerControlModeEntry> PlayerControlModes;
};

//Dependency: GcInputActions
//Dependency: GcCharacterControlInputValidity
struct GcPlayerControlInputRemap
{
	enum class InputRemapModeEnum : uint32_t
	{
		ReplaceOriginalBinding = 0,
		AdditionalBinding = 1,
	};

	NMS_GameComponents::GcInputActions Action;
	NMS_GameComponents::GcInputActions CanBeTriggeredBy;
	NMS_GameComponents::GcPlayerControlInputRemap::InputRemapModeEnum InputRemapMode;
	NMS_GameComponents::GcCharacterControlInputValidity Validity;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimationNotifyAddEffectGroundInteraction
{
	float FadeOutHeightBegin;
	float FadeOutHeightEnd;
	float TravelSpeed;
	bool ClampToGround;
	bool UseGroundNormal;
	bool UseWaterSurface;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcBreakTechByStatData
//Dependency: GcAudioWwiseEvents
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcPlayerDamageData
{
	enum class PlayerDamageTypeEnum : uint32_t
	{
		Normal = 0,
		Toxic = 1,
		Radioactive = 2,
		Freeze = 3,
		Scorch = 4,
	};

	NMS::NMSString0x20A CriticalHitMessage;
	NMS::NMSString0x20A DeathMessage;
	NMS::NMSString0x20A HitChatMessage;
	NMS::NMSString0x20A HitMessage;
	NMS_Toolkit::TkTextureResource HitIcon;
	NMS::NMSString0x10 CameraShakeNoShield;
	NMS::NMSString0x10 CameraShakeShield;
	std::vector<NMS_GameComponents::GcBreakTechByStatData> DamageTechWithStat;
	NMS::NMSString0x10 DeathStat;
	NMS::NMSString0x10 Id;
	float CameraTurn;
	NMS_GameComponents::GcAudioWwiseEvents CriticalHitMessageAudio;
	float Damage;
	int32_t HazardDrain;
	NMS_GameComponents::GcAudioWwiseEvents HitMessageAudio;
	NMS_GameComponents::GcPlayerDamageData::PlayerDamageTypeEnum PlayerDamageType;
	float PushForce;
	float TechDamageChance;
	bool AllowDeathInInteraction;
	bool ForceDamageInInteraction;
	bool ShowTrackIcon;
};

//Dependency: GcPlayerDamageData
struct GcPlayerDamageTable
{
	std::vector<NMS_GameComponents::GcPlayerDamageData> DamageTable;
};

struct GcPlayerEffectsComponentData
{
	float VehicleInOutDissolveDelay;
	float VehicleInOutEffectDelay;
	float VehicleInOutTime;
};

//Dependency: GcScreenFilterData
struct GcScreenFilterTable
{
	NMS_GameComponents::GcScreenFilterData Filters[84];
};

//Dependency: Vector2f
struct GcThirdPersonAnimParams
{
	NMS::Vector2f AimDirection;
	NMS::Vector2f MoveForce;
	NMS::Vector2f Velocity;
	NMS::Vector2f VelocityXY;
	float AimPitch;
	float AimYaw;
	float DistanceFromGround;
	float Foot;
	float HitFB;
	float HitLR;
	float LeanFB;
	float LeanLR;
	float MoveForceApplied;
	float SlopeAngle;
	float Speed;
	float TimeSinceJetpackEngaged;
	float TurnAngle;
	float Uphill;
	float VelocityY;
	float VelocityZ;
};

//Dependency: GcIKConstraint
//Dependency: GcCharacterLookAtData
//Dependency: GcCreatureIkData
//Dependency: NMSString0x20
struct GcPlayerFullBodyIKComponentData
{
	enum class PlayerHeadUpAxisEnum : uint32_t
	{
		X = 0,
		XNeg = 1,
		Y = 2,
		YNeg = 3,
		Z = 4,
		ZNeg = 5,
	};

	NMS_GameComponents::GcIKConstraint COGConstraint;
	NMS_GameComponents::GcIKConstraint SitConstraint;
	std::vector<NMS::NMSString0x20> CameraNeckBones;
	std::vector<NMS::NMSString0x20> HandBones;
	std::vector<NMS_GameComponents::GcIKConstraint> HeadConstraints;
	std::vector<NMS_GameComponents::GcCreatureIkData> JointDataDeprecated;
	std::vector<NMS_GameComponents::GcIKConstraint> LegConstraints;
	std::vector<NMS_GameComponents::GcIKConstraint> RestrictConstraints;
	NMS_GameComponents::GcCharacterLookAtData LookAtSettings;
	NMS_GameComponents::GcPlayerFullBodyIKComponentData::PlayerHeadUpAxisEnum PlayerHeadUpAxis;
	bool Enabled;
	bool EnableFootRaycasts;
	bool UseFootGlue;
};

//Dependency: GcPlayerHazardData
struct GcPlayerHazardTable
{
	NMS_GameComponents::GcPlayerHazardData Table[7];
};

//Dependency: GcHazardValues
//Dependency: VariableSizeString
struct GcWeatherTable
{
	NMS::VariableSizeString Table[17];
	NMS_GameComponents::GcHazardValues DefaultRadiation[6];
	NMS_GameComponents::GcHazardValues DefaultSpookLevel[6];
	NMS_GameComponents::GcHazardValues DefaultTemperature[6];
	NMS_GameComponents::GcHazardValues DefaultToxicity[6];
};

struct GcWarpAction
{
	enum class WarpTypeEnum : uint32_t
	{
		BlackHole = 0,
		SpacePOI = 1,
	};

	NMS_GameComponents::GcWarpAction::WarpTypeEnum WarpType;
};

struct GcPlayerSpaceshipAim
{
	float AimAngleMin;
	float AimAngleRange;
	float AimDistanceAngleMin;
	float AimDistanceAngleRange;
	float AimDistanceMin;
	float AimDistanceRange;
};

struct GcPlayerSpaceshipClassBonuses
{
	float BoostingTurnDampMax;
	float BoostingTurnDampMin;
	float BoostMaxSpeedMax;
	float BoostMaxSpeedMin;
	float DirectionBrakeMax;
	float DirectionBrakeMin;
	float MaxSpeedMax;
	float MaxSpeedMin;
	float ThrustForceMax;
	float ThrustForceMin;
	float TurnStrengthMax;
	float TurnStrengthMin;
};

//Dependency: GcAISpaceshipModelData
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcPlayerSquadronConfig
{
	NMS::Vector3f CombatFormationOffset;
	NMS::Vector3f CombatFormationOffsetThirdPerson;
	NMS::Vector3f FormationOffset;
	NMS::Vector3f FormationOffsetThirdPerson;
	NMS::NMSString0x10 PilotRankAttackDefinitions[4];
	std::vector<NMS::VariableSizeString> RandomPilotNPCResources;
	std::vector<NMS_GameComponents::GcAISpaceshipModelData> RandomSpaceshipResources;
	NMS::Vector2f PilotRankTraitRanges[4];
	float BreakFormationMaxForce;
	float BreakFormationMaxTurnAngle;
	float BreakFormationMinTurnAngle;
	float BreakFormationTime;
	float CombatFormationOffsetCylinderHeight;
	float CombatFormationOffsetCylinderHeightThirdPerson;
	float CombatFormationOffsetCylinderLength;
	float CombatFormationOffsetCylinderLengthThirdPerson;
	float CombatFormationOffsetCylinderWidth;
	float CombatFormationOffsetCylinderWidthThirdPerson;
	float FormationOffsetCylinderHeight;
	float FormationOffsetCylinderHeightThirdPerson;
	float FormationOffsetCylinderLength;
	float FormationOffsetCylinderLengthThirdPerson;
	float FormationOffsetCylinderWidth;
	float FormationOffsetCylinderWidthThirdPerson;
	float FormationOffsetRotationMaxSpeed;
	float FormationOffsetRotationPeriod;
	float FormationOffsetZOffsetVarianceMax;
	float FormationOffsetZOffsetVarianceMaxSpeedScale;
	float FormationOffsetZOffsetVarianceMin;
	float FormationOffsetZOffsetVarianceMinSpeedScale;
	float FormationOffsetZOffsetVariancePeriod;
	float JoinFormationArrivalTolerance;
	float JoinFormationBoostAlignStrength;
	float JoinFormationBoostMaxDist;
	float JoinFormationBoostMaxSpeed;
	float JoinFormationBoostMinDist;
	float JoinFormationBrakeAlignStrength;
	float JoinFormationBrakeDist;
	float JoinFormationMaxForce;
	float JoinFormationMaxSpeedBrake;
	float JoinFormationMinSpeed;
	float JoinFormationOffset;
	float LeavingForceScaleDistMax;
	float LeavingForceScaleDistMin;
	float LeavingFromPlanetOrbitMaxSpeed;
	float LeavingFromPlanetOrbitMinIncline;
	float LeavingFromPlanetOrbitWarpDist;
	float LeavingFromSpaceAngleFromFwdMax;
	float LeavingFromSpaceAngleFromFwdMin;
	float LeavingFromSpaceWarpDist;
	float LeavingMaxForceMultiplier;
	float MaintainFormationAlignMaxDist;
	float MaintainFormationAlignMaxSpeed;
	float MaintainFormationAlignMinDist;
	float MaintainFormationAlignMinSpeed;
	float MaintainFormationInCombatMaxTime;
	float MaintainFormationInCombatMinTime;
	float MaintainFormationLockAlignStrength;
	float MaintainFormationLockRollAlignStrength;
	float MaintainFormationLockStrength;
	float MaintainFormationLockStrengthBoosting;
	float MaintainFormationLockStrengthCombat;
	float MaintainFormationMaxForce;
	float MaintainFormationPostBoostSmoothTime;
	float MaintainFormationSharpTurnMinSpeed;
	float MaintainFormationSharpTurnMinSpeedForce;
	float MaintainFormationStartSmoothTime;
	float MaintainFormationStrengthVariance;
	int32_t MaxShipsInFormationDuringCombat;
	int32_t MinShipsInFormationDuringCombat;
	float MinSpeedForSummonInMoveDir;
	float MinTimeBetweenFormationBreaks;
	float OutOfFormationMaxTime;
	float OutOfFormationMinTime;
	float SummonArriveTime;
	float SummonArriveTimeIntervalMax;
	float SummonArriveTimeIntervalMin;
	float SummonInFormationFwdOffset;
	float SummonLimitTurningTime;
	float SummonPlanetDistance;
	float SummonPlanetPitchMax;
	float SummonPlanetPitchMin;
	float SummonPlanetYawMax;
	float SummonPlanetYawMin;
	float SummonSpaceSpawnAngleMax;
	float SummonSpaceSpawnAngleMin;
	float SummonSpaceSpawnRangeMax;
	float SummonSpaceSpawnRangeMin;
	float SummonStartSpeed;
	NMS::NMSString0x20 SquadName;
	bool SummonInFormation;
};

struct GcPlayerSurvivalBarType
{
	enum class SurvivalBarEnum : uint32_t
	{
		Health = 0,
		Hazard = 1,
		Energy = 2,
	};

	NMS_GameComponents::GcPlayerSurvivalBarType::SurvivalBarEnum SurvivalBar;
};

//Dependency: GcPlayerTitle
struct GcPlayerTitleData
{
	std::vector<NMS_GameComponents::GcPlayerTitle> Titles;
};

//Dependency: GcWeightedFilename
//Dependency: GcAudioWwiseEvents
//Dependency: VariableSizeString
//Dependency: GcPlayerHazardType
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWeatherEffect
{
	enum class WeatherEffectSpawnTypeEnum : uint32_t
	{
		Single = 0,
		Cluster = 1,
		Patch = 2,
		ClusterPatch = 3,
	};

	enum class WeatherEffectBehaviourEnum : uint32_t
	{
		Static = 0,
		Wander = 1,
		ChasePlayer = 2,
	};

	enum class SpawnConditionsEnum : uint32_t
	{
		Anytime = 0,
		DuringStorm = 1,
		AtNight = 2,
		NotInStorm = 3,
		AtNightNotInStorm = 4,
	};

	NMS::NMSString0x20A OSDMessage;
	NMS::NMSString0x10 BlockedByCluster;
	NMSTemplate EffectData;
	std::vector<NMS_GameComponents::GcWeightedFilename> Effects;
	NMS::NMSString0x10 ForcedOnByHazard;
	NMS::NMSString0x10 Id;
	NMS::VariableSizeString ImpactGift;
	NMS_GameComponents::GcAudioWwiseEvents Audio;
	float ChanceOfPlanetBeingExtreme;
	float ClusterMaxLifetime;
	float ClusterMinLifetime;
	float ClusterSpawnChance;
	float FadeoutStart;
	float ImpactGiftChance;
	int32_t MaxHazardsOfThisTypeActive;
	float MaxLifetime;
	float MaxSpawnDistance;
	float MaxSpawnScale;
	float MinLifetime;
	float MinSpawnDistance;
	float MinSpawnScale;
	float MoveSpeed;
	NMS_GameComponents::GcPlayerHazardType MultiplySpawnChanceByHazardLevel;
	float PatchMaxRadius;
	int32_t PatchMaxSpawns;
	float PatchMaxTimeSpawnOffset;
	float PatchMinRadius;
	int32_t PatchMinSpawns;
	float PatchScaling;
	int32_t SpawnAttemptsPerRegion;
	float SpawnChancePerSecondExtreme;
	float SpawnChancePerSecondPerAttempt;
	NMS_GameComponents::GcWeatherEffect::SpawnConditionsEnum SpawnConditions;
	float WanderMaxArcDeg;
	float WanderMaxRadius;
	float WanderMinArcDeg;
	float WanderMinRadius;
	NMS_GameComponents::GcWeatherEffect::WeatherEffectBehaviourEnum WeatherEffectBehaviour;
	NMS_GameComponents::GcWeatherEffect::WeatherEffectSpawnTypeEnum WeatherEffectSpawnType;
	bool ExclusivePrimaryHazard;
	bool FadeoutAudio;
	bool FadeoutVisuals;
	bool RandomRotationAroundUp;
};

struct GcPowerStateAction
{
	bool SetConnectionEnabled;
	bool SetRateEnabled;
};

//Dependency: GcProductDescriptionOverride
struct GcProductDescriptionOverrideTable
{
	std::vector<NMS_GameComponents::GcProductDescriptionOverride> Table;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkCurveType
struct TkEmitterFloatProperty
{
	enum class AuthoringEnum : uint32_t
	{
		FixedValue = 0,
		RandomRangeFloat = 1,
		Curves = 2,
	};

	NMSTemplate NextStage;
	NMS_Toolkit::TkEmitterFloatProperty::AuthoringEnum Authoring;
	float CurveBlendMidpoint;
	float CurveEndValue;
	float CurveMidValue;
	float CurveStartValue;
	float CurveVariation;
	float FixedValue;
	float MaxRandomValue;
	float MinRandomValue;
	NMS_Toolkit::TkCurveType Curve1Shape;
	NMS_Toolkit::TkCurveType Curve2Shape;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkModelResource
struct GcPulseEncounterSpawnAbandonedFreighter
{
	NMS_Toolkit::TkModelResource AbandonedFreighter;
};

//Dependency: NMSString0x20A
struct GcPulseEncounterSpawnAlienFreighter
{
	NMS::NMSString0x20A HailingPuzzleID;
};

//Dependency: NMSString0x20
struct GcPunctuationDelay
{
	float Delay;
	NMS::NMSString0x20 Punctuation;
};

//Dependency: GcPunctuationDelay
struct GcPunctuationDelayData
{
	std::vector<NMS_GameComponents::GcPunctuationDelay> PunctuationList;
	float DefaultDelay;
};

//Dependency: GcPunctuationDelayData
struct GcPunctuationDelayTable
{
	enum class PunctuationDelaysEnum : uint32_t
	{
		Default = 0,
		Gek = 1,
		Korvax = 2,
		Vykeen = 3,
		FourthRace = 4,
		Builders = 5,
	};

	NMS_GameComponents::GcPunctuationDelayData PunctuationDelays[6];
};

//Dependency: GcBuildingClassification
//Dependency: NMSString0x20A
struct GcSettlementColourUpgradeBuildingOverride
{
	NMS::NMSString0x20A BuildingPalette;
	NMS::NMSString0x20A DecorationPalette;
	NMS_GameComponents::GcBuildingClassification Building;
};

//Dependency: GcBuildingBlueprint
struct GcPurchaseableBuildingBlueprints
{
	std::vector<int32_t> GroupMaxItems;
	std::vector<NMS_GameComponents::GcBuildingBlueprint> Table;
};

//Dependency: NMSString0x10
struct GcQuestItemPlacementRule
{
	NMS::NMSString0x10 MustBeAfterQuestItem;
	NMS::NMSString0x10 MustBeBeforeQuestItem;
	NMS::NMSString0x10 QuestItemID;
	std::vector<NMS::NMSString0x10> ValidRoomIDs;
	int32_t MaxRoomIndex;
	int32_t MinRoomIndex;
};

//Dependency: NMSString0x20
struct GcThereminComponentData
{
	float IgnorePlayerDistance;
	float MaxPitch;
	float MaxVolume;
	float MinPitch;
	float MinVolume;
	float PitchMaxDist;
	float PitchMinDist;
	float VolumeMaxDist;
	float VolumeMinDist;
	NMS::NMSString0x20 PitchEndLocator;
	NMS::NMSString0x20 PitchStartLocator;
	NMS::NMSString0x20 VolumeBBName;
};

struct GcRewardSetNexusExitWarpTargetToFireteamMemberUA
{
	int32_t FireteamMemberIndex;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkNavMeshAreaFlags
{
	enum class NavMeshAreaFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_Toolkit::TkNavMeshAreaFlags::NavMeshAreaFlagsEnum NavMeshAreaFlags;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: TkPaletteTexture
struct GcTileTypeOptions
{
	std::vector<NMS_Toolkit::TkPaletteTexture> Options;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkShearWindOctaveData
{
	float MaxStrength;
	float MinStrength;
	float StrengthVariationFreq;
	float WaveFrequency;
	float WaveSize;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcRefinerRecipeElement
//Dependency: NMSString0x20A
struct GcRefinerRecipe
{
	NMS::NMSString0x20A Id;
	NMS::NMSString0x20A RecipeName;
	NMS::NMSString0x20A RecipeType;
	NMS_GameComponents::GcRefinerRecipeElement Result;
	std::vector<NMS_GameComponents::GcRefinerRecipeElement> Ingredients;
	float TimeToMake;
	bool Cooking;
};

//Dependency: GcRefinerRecipe
struct GcRecipeTable
{
	std::vector<NMS_GameComponents::GcRefinerRecipe> Table;
};

//Dependency: GcMaintenanceComponentData
struct GcRefinerUnitComponentData
{
	NMS_GameComponents::GcMaintenanceComponentData MaintenanceData;
	int32_t NumInputs;
	bool IsCooker;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: VariableSizeString
//Dependency: GcBuildMenuIconSet
//Dependency: Colour
//Dependency: GcBaseBuildingCameraMode
//Dependency: Vector3f
//Dependency: TkTextureResource
//Dependency: TkLODDistances
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcBuildingGlobals
{
	NMS::Vector3f BuildingPartPreviewOffset;
	NMS::Colour MarkerLineColour;
	NMS_GameComponents::GcBuildMenuIconSet Icons[16];
	NMS_GameComponents::GcBuildMenuIconSet IconsTouch[16];
	NMS_Toolkit::TkTextureResource ScreenSpaceRotationGlow;
	NMS_Toolkit::TkTextureResource ScreenSpaceRotationIcon;
	NMS::VariableSizeString FreighterBaseSpawnOverride;
	NMS_Toolkit::TkLODDistances ActiveLodDistances[4];
	NMS_Toolkit::TkLODDistances InactiveLodDistances[4];
	float TotalPlanetFrameTimeForComplexity[4];
	float TotalSpaceFrameTimeForComplexity[4];
	NMS::Vector2f BuildingPlacementScaleMinMax;
	float AddToRadius_DoNotPlaceClose;
	float AmountToMoveMarkerRoundSphere;
	NMS_GameComponents::GcBaseBuildingCameraMode BaseBuildingCamMode;
	float BaseBuildingTerrainEditBaseYOffset;
	float BaseBuildingTerrainEditBoundsScalar;
	float BaseBuildingTerrainEditTopYOffset;
	float BaseBuildingWiringSnappingScaleFactorEasy;
	float BaseBuildingWiringSnappingScaleFactorHard;
	float BaseRadiusExtension;
	float BuildingApproachDistance;
	float BuildingLineAlphaEnd0;
	float BuildingLineAlphaEnd1;
	float BuildingLineAlphaStart;
	int32_t BuildingLineCount;
	float BuildingLineMoveSpeed;
	float BuildingLineOBBShrink;
	float BuildingLineProjectorLength;
	float BuildingLineProjectorWidth;
	float BuildingLineResetTime;
	float BuildingLineWidth;
	float BuildingNearArcDistance;
	float BuildingNearDistance;
	float BuildingPartPreviewPitch;
	float BuildingPartPreviewRadius;
	float BuildingPartPreviewRotateSpeed;
	float BuildingPlacementConeEndDistance;
	float BuildingPlacementConeEndDistanceIndoors;
	float BuildingPlacementConeEndRadius;
	float BuildingPlacementConeEndRadiusIndoors;
	float BuildingPlacementConeStartRadius;
	float BuildingPlacementConeStartRadiusIndoors;
	float BuildingPlacementCursorOffset;
	float BuildingPlacementDefaultMaxMinDistanceVR;
	float BuildingPlacementDefaultMinDistance;
	float BuildingPlacementDefaultMinMinDistanceVR;
	float BuildingPlacementEffectCrossFadeTime;
	float BuildingPlacementEffectDissolveSpeed;
	float BuildingPlacementEffectFadeWaitTime;
	float BuildingPlacementEffectHidePlaceholderDistance;
	float BuildingPlacementEffectHidePlaceholderFadeTime;
	float BuildingPlacementEffectInterpRate;
	float BuildingPlacementEffectInterpRateSlow;
	float BuildingPlacementEffectPostPreviewInterpTime;
	float BuildingPlacementEffectPreviewInterpTime;
	float BuildingPlacementEffectSpringFast;
	float BuildingPlacementEffectSpringSlow;
	float BuildingPlacementFocusModeAttachSnappingDistance;
	float BuildingPlacementFocusModeMaxDistanceScaling;
	float BuildingPlacementFocusModeMinDistance;
	float BuildingPlacementFocusModeSurfaceSnappingDistance;
	float BuildingPlacementGhostHearScaleDistanceMod;
	float BuildingPlacementGhostHeartSizeScale;
	float BuildingPlacementGhostHeartSizeScaleMin;
	float BuildingPlacementGhostHeartSizeSelected;
	float BuildingPlacementGhostHeartWiringSizeOtherSnapped;
	float BuildingPlacementGhostHeartWiringSizeScale;
	float BuildingPlacementGhostHeartWiringSizeScaleMin;
	float BuildingPlacementGhostReductionMaxSize;
	float BuildingPlacementMaxConnectionLength;
	float BuildingPlacementMaxDistance;
	float BuildingPlacementMaxDistanceNoHit;
	float BuildingPlacementMaxDistanceNoHitExtra;
	float BuildingPlacementMaxDistanceScaleExtra;
	float BuildingPlacementMaxDistanceScaleExtraMaxSize;
	float BuildingPlacementMaxDistanceScaleExtraMinSize;
	float BuildingPlacementMinDistanceScaleIncrease;
	float BuildingPlacementMinDistanceScaleIncreaseVR;
	float BuildingPlacementMinDotProductRequiredToSnap;
	float BuildingPlacementNumGhostsMinOffset;
	float BuildingPlacementNumGhostsVolume;
	float BuildingPlacementNumGhostsVRMultiplier;
	float BuildingPlacementNumGhostsVRMultiplierEyeTracking;
	float BuildingPlacementTwistScale;
	float BuildingSelectionFocusModeCursorRadius;
	float BuildingVisitDistance;
	float BuildingWaterMargin;
	float BuildingYOffset;
	float ChanceOfAddingShelter;
	float CompassIconSize;
	float ComplexityDensitySigmaSquared;
	float ComplexityDensityTestRange;
	float DistanceForTooltip;
	float DistanceForVisited;
	float DistanceTagXOffset;
	float DistanceTextXOffset;
	float FadeDistance;
	float FadeStart;
	float FlyingBuildingIconTime;
	float HeightDiffLineAdjustFactor;
	float HeightDiffLineAdjustMax;
	float HeightDiffLineAdjustMin;
	float HologramDistanceMultiplier;
	float HologramDistanceMultiplierAlt;
	float HoverFadeAlpha;
	float HoverFadeAlphaHmd;
	float HoverFadeTime;
	float HoverFadeTimeHmd;
	float HoverInactiveSize;
	float HoverInactiveSizeHmd;
	float HoverLockedActiveTime;
	float HoverLockedActiveTimeHmd;
	float HoverLockedIconScale;
	float HoverLockedIconScaleHmd;
	float HoverLockedInitTime;
	float HoverLockedInitTimeHmd;
	float HoverMinToStayActiveTime;
	float HoverMinToStayActiveTimeHmd;
	float HoverStayActiveTime;
	float HoverStayActiveTimeHmd;
	float HoverTime;
	float HoverTimeHmd;
	float HoverVisibilityTime;
	float HoverVisibilityTimeHmd;
	float IconSpringTime;
	float InactiveVisibleComplexityFactor;
	float InteractMarkerYOffset;
	float LargeIconArrowOffset;
	float LargeIconSize;
	float LineDistanceRange;
	float LineMinDistance;
	float LineScaleFactor;
	float MarkerLineWidth;
	float MarkerTimeIncrease;
	float MarkerTransitionDistance;
	float MaxIconRange;
	float MaximumComplexityDensity;
	float MaxLineLength;
	float MaxLowHeight;
	float MaxRadiusForPlanetBases;
	float MaxRadiusForSpaceBases;
	int32_t MaxShipScanBuildings;
	float MaxTimeBetweenEvents;
	float MinAlpha;
	float MinElevatedHeight;
	float MinLineLength;
	float MinLineLengthShip;
	float MinLoadingPercentageNodesBufferFree;
	float MinPercentageNodesBufferFree;
	float MinRadius;
	float MinRadiusForBases;
	float MinRadiusFromFeaturedBases;
	int32_t MinShipScanBuildings;
	float MinTimeBetweenBuildingEntryMessage;
	float MinTimeBetweenBuildingEntryMessageBase;
	float NearLineScaleFactor;
	float NearMaxLineLength;
	float NearMinAlpha;
	float NearMinLineLength;
	float ObjectFadeRadius;
	float PercentagePhysicsComponentsForComplexity;
	float PowerlineSnapDistance;
	float Radius_DoNotPlaceAnywhereNear;
	float RadiusMultiplier_DoNotPlace;
	float RadiusMultiplier_DoNotPlaceAnywhereNear;
	float RadiusMultiplier_DoNotPlaceClose;
	float RadiusMultiplier_OnlyPlaceAround;
	float SectorMessageCenterDistance;
	float SectorMessageMinTime;
	float SectorMessageReshowDistance;
	float ShowTimeNotDistance;
	float SmallIconArrowOffset;
	float SmallIconSize;
	float SpaceMarkerMaxHeight;
	float SpaceMarkerMinHeight;
	float SpaceMarkerOffset;
	float SpaceMarkerOffsetPlanet;
	float SpaceMarkerOffsetSamePlanet;
	float StartCrashSiteMaxDistance;
	float StartCrashSiteMinDistance;
	float StartShelterMaxDistance;
	float StartShelterMinDistance;
	float TestDistanceForSettlementBaseBufferAlignment;
	float TextStringXOffset;
	float TextTagLength;
	float TextTagWidthOffset;
	float TextTagXOffset;
	float TextTagYOffset;
	float UnknownBuildingRange;
	bool AllowBuildingUsingIntermediates;
	bool BaseBuildingTerrainEditBoundsOverride;
	bool BuildingPlacementEffectEnabled;
	NMS_Toolkit::TkCurveType BuildingPlacementGhostHeartSizeCurve;
	bool DebugForceShowInactives;
	NMS_Toolkit::TkCurveType LineCurve;
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimVectorBlendNodeData
{
	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 WeightIn;
	float WeightRangeBegin;
	float WeightRangeEnd;
	float WeightSpringTime;
	NMS_Toolkit::TkCurveType WeightCurve;
	float InitialWeight;
	NMSTemplate BlendChild;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRegionHotspotTypes
{
	enum class HotspotTypeEnum : uint32_t
	{
		None = 0,
		Power = 1,
		Mineral1 = 2,
		Mineral2 = 4,
		Mineral3 = 8,
		Gas1 = 16,
	};

	NMS_GameComponents::GcRegionHotspotTypes::HotspotTypeEnum HotspotType;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimBlendType
{
	enum class BlendTypeEnum : uint32_t
	{
		Normal = 0,
		MatchTimes = 1,
		MatchTimesAndPhase = 2,
		OffsetByBlendTime = 3,
	};

	NMS_Toolkit::TkAnimBlendType::BlendTypeEnum BlendType;
};

//Dependency: TkAnimBlendType
//Dependency: TkAnimStateMachineBlendTimeMode
//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionData
{
	std::vector<NMSTemplate> Conditions;
	NMS::NMSString0x10 DestinationStateDebugName;
	NMS_Toolkit::TkAnimBlendType BlendType;
	int32_t DestinationState;
	float ExitTime;
	float TransitionTime;
	NMS_Toolkit::TkAnimStateMachineBlendTimeMode TransitionTimeMode;
	bool HasTimedExit;
};

//Dependency: TkAnimStateMachineTransitionData
//Dependency: NMSString0x10
struct TkAnimStateMachineStateData
{
	NMS::NMSString0x10 Anim;
	NMS::NMSString0x10 Name;
	std::vector<NMS_Toolkit::TkAnimStateMachineTransitionData> Transitions;
	int32_t Id;
	int32_t NodePosX;
	int32_t NodePosY;
	float ScrollX;
	float ScrollY;
	float Zoom;
};

//Dependency: TkAnimStateMachineTransitionData
//Dependency: TkAnimStateMachineStateData
//Dependency: NMSString0x10
struct TkAnimStateMachineData
{
	std::vector<NMS_Toolkit::TkAnimStateMachineTransitionData> EntryTransitions;
	NMS::NMSString0x10 LayerId;
	std::vector<NMS_Toolkit::TkAnimStateMachineStateData> States;
	int32_t DefaultState;
	int32_t EntryPosX;
	int32_t EntryPosY;
	float ScrollX;
	float ScrollY;
	float Zoom;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcSpaceshipAvoidanceData
{
	float EndRadiusMultiplier;
	float Force;
	int32_t NumRays;
	float RayMinRange;
	float RaySpeedTime;
	float SpeedInterp;
	float SpeedInterpMinSpeed;
	float SpeedInterpRange;
	float StartRadiusMultiplier;
};

struct GcResetSimpleInteractionAction
{
};

struct GcRewardAbortTakeoff
{
};

//Dependency: NMSString0x20A
struct GcRewardAdvancePortalState
{
	NMS::NMSString0x20A PortalScanEvent;
};

struct GcRewardAssessCookedProduct
{
	int32_t AmountAverage;
	int32_t AmountBad;
	int32_t AmountBest;
	int32_t AmountBestUpper;
	int32_t AmountGood;
	int32_t AmountWorst;
};

struct GcRewardCargo
{
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardCustomExpeditionLogEntry
{
	NMS::NMSString0x20A LocID;
	NMS::NMSString0x10 RewardID;
	bool FromIntervention;
	bool WhaleEvent;
};

//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
struct GcRewardDamageTech
{
	NMS::NMSString0x10 TechToDamage_optional;
	NMS_GameComponents::GcTechnologyCategory Category;
	bool ShowDamageMessage;
};

//Dependency: GcRewardDestructRarities
struct GcRewardDestructTable
{
	NMS_GameComponents::GcRewardDestructRarities Categories[9];
};

//Dependency: NMSString0x10
struct GcRewardDisplayTechWindow
{
	NMS::NMSString0x10 TechID;
	bool Damaged;
	bool FullBox;
	bool NeedsInstall;
};

struct GcRewardEnableInteractionClass
{
};

struct GcRewardEndFrigateFlyby
{
};

struct GcRewardPurpleSystems
{
	bool Allow;
};

//Dependency: NMSString0x20A
struct GcRewardEndScanEvent
{
	NMS::NMSString0x20A EventID;
};

struct GcRewardEndSettlementExpedition
{
	enum class EndTypeEnum : uint32_t
	{
		Debrief = 0,
		Shutdown = 1,
	};

	NMS_GameComponents::GcRewardEndSettlementExpedition::EndTypeEnum EndType;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkMaterialFlags
{
	enum class MaterialFlagEnum : uint32_t
	{
		_F01_DIFFUSEMAP = 0,
		_F02_SKINNED = 1,
		_F03_NORMALMAP = 2,
		_F04_FEATURESMAP = 3,
		_F05_DEPTH_EFFECT = 4,
		_F06 = 5,
		_F07_UNLIT = 6,
		_F08 = 7,
		_F09_TRANSPARENT = 8,
		_F10 = 9,
		_F11_ALPHACUTOUT = 10,
		_F12_BATCHED_BILLBOARD = 11,
		_F13_UV_EFFECT = 12,
		_F14 = 13,
		_F15_WIND = 14,
		_F16_DIFFUSE2MAP = 15,
		_F17 = 16,
		_F18 = 17,
		_F19_BILLBOARD = 18,
		_F20_PARALLAX = 19,
		_F21_VERTEXCUSTOM = 20,
		_F22_OCCLUSION_MAP = 21,
		_F23 = 22,
		_F24 = 23,
		_F25_MASKS_MAP = 24,
		_F26 = 25,
		_F27 = 26,
		_F28 = 27,
		_F29 = 28,
		_F30_REFRACTION = 29,
		_F31_DISPLACEMENT = 30,
		_F32_REFRACTION_MASK = 31,
		_F33_SHELLS = 32,
		_F34 = 33,
		_F35 = 34,
		_F36_DOUBLESIDED = 35,
		_F37_EXPLICIT_MOTION_VECTORS = 36,
		_F38 = 37,
		_F39 = 38,
		_F40 = 39,
		_F41 = 40,
		_F42_DETAIL_NORMAL = 41,
		_F43 = 42,
		_F44_IMPOSTER = 43,
		_F45 = 44,
		_F46 = 45,
		_F47_REFLECTION_PROBE = 46,
		_F48 = 47,
		_F49 = 48,
		_F50_DISABLE_POSTPROCESS = 49,
		_F51 = 50,
		_F52 = 51,
		_F53_COLOURISABLE = 52,
		_F54 = 53,
		_F55_MULTITEXTURE = 54,
		_F56_MATCH_GROUND = 55,
		_F57 = 56,
		_F58_USE_CENTRAL_NORMAL = 57,
		_F59_BIASED_REACTIVITY = 58,
		_F60 = 59,
		_F61 = 60,
		_F62 = 61,
		_F63_DISSOLVE = 62,
		_F64_RESERVED_FLAG_FOR_EARLY_Z_PATCHING_DO_NOT_USE = 63,
	};

	NMS_Toolkit::TkMaterialFlags::MaterialFlagEnum MaterialFlag;
};

//Dependency: Vector4i
//Dependency: VariableSizeString
struct TkMaterialUniform_UInt
{
	NMS::Vector4i Values;
	std::vector<NMS::Vector4i> ExtendedValues;
	NMS::VariableSizeString Name;
};

struct TkMaterialFxFlags
{
	enum class MaterialFxFlagEnum : uint32_t
	{
		_X01_DIFFUSEMAP = 0,
		_X02_SKINNED = 1,
		_X03_NORMALMAP = 2,
		_X04_FEATURESMAP = 3,
		_X05_INVERT_ALPHA = 4,
		_X06_BRIGHT_EDGE = 5,
		_X07_UNLIT = 6,
		_X08_REFLECTIVE = 7,
		_X09_TRANSPARENT = 8,
		_X10_NORECEIVESHADOW = 9,
		_X11_ALPHACUTOUT = 10,
		_X12_BATCHED_BILLBOARD = 11,
		_X13_UVANIMATION = 12,
		_X14_UVSCROLL = 13,
		_X15_WIND = 14,
		_X16_DIFFUSE2MAP = 15,
		_X17_DOUBLESIDED_KEEP_NORMALS = 16,
		_X18_UVTILES = 17,
		_X19_BILLBOARD = 18,
		_X20_PARALLAXMAP = 19,
		_X21_VERTEXCOLOUR = 20,
		_X22_TRANSPARENT_SCALAR = 21,
		_X23_TRANSLUCENT = 22,
		_X24_AOMAP = 23,
		_X25_ROUGHNESS_MASK = 24,
		_X26_IMAGE_BASED_LIGHTING = 25,
		_X27_VBTANGENT = 26,
		_X28_VBSKINNED = 27,
		_X29_VBCOLOUR = 28,
		_X30_REFRACTION = 29,
		_X31_DISPLACEMENT = 30,
		_X32_REFRACTION_MASK = 31,
		_X33_SHELLS = 32,
		_X34_GLOW = 33,
		_X35_GLOW_MASK = 34,
		_X36_DOUBLESIDED = 35,
		_X37_EXPLICIT_MOTION_VECTORS = 36,
		_X38_BENT_NORMALS = 37,
		_X39_METALLIC_MASK = 38,
		_X40_SUBSURFACE_MASK = 39,
		_X41_REFLECTANCE_MASK = 40,
		_X42_DETAIL_NORMAL = 41,
		_X43_NORMAL_TILING = 42,
		_X44_IMPOSTER = 43,
		_X45_VERTEX_BLEND = 44,
		_X46_BILLBOARD_AT = 45,
		_X47_REFLECTION_PROBE = 46,
		_X48_WARPED_DIFFUSE_LIGHTING = 47,
		_X49_DISABLE_AMBIENT = 48,
		_X50_DISABLE_POSTPROCESS = 49,
		_X51_DECAL_DIFFUSE = 50,
		_X52_DECAL_NORMAL = 51,
		_X53_COLOURISABLE = 52,
		_X54_COLOURMASK = 53,
		_X55_MULTITEXTURE = 54,
		_X56_MATCH_GROUND = 55,
		_X57_VERTEXALPHA_AO = 56,
		_X58_USE_CENTRAL_NORMAL = 57,
		_X59_BIASED_REACTIVITY = 58,
		_X60_ACUTE_ANGLE_FADE = 59,
		_X61_CLAMP_AMBIENT = 60,
		_X62_DETAIL_ALPHACUTOUT = 61,
		_X63_DISSOLVE = 62,
		_X64_RESERVED_FLAG_FOR_EARLY_Z_PATCHING_DO_NOT_USE = 63,
	};

	NMS_Toolkit::TkMaterialFxFlags::MaterialFxFlagEnum MaterialFxFlag;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkMaterialSampler
{
	enum class TextureFilterModeEnum : uint32_t
	{
		None = 0,
		Bilinear = 1,
		Trilinear = 2,
	};

	enum class TextureAddressModeEnum : uint32_t
	{
		Wrap = 0,
		WrapUClampV = 1,
		Clamp = 2,
		ClampToBorder = 3,
		Mirror = 4,
	};

	NMS::NMSString0x20A MaterialAlternativeId;
	NMS::VariableSizeString Map;
	NMS::VariableSizeString Name;
	int32_t Anisotropy;
	NMS_Toolkit::TkMaterialSampler::TextureAddressModeEnum TextureAddressMode;
	NMS_Toolkit::TkMaterialSampler::TextureFilterModeEnum TextureFilterMode;
	bool IsCube;
	bool IsSRGB;
	bool UseCompression;
	bool UseMipMaps;
};

//Dependency: Vector4f
//Dependency: VariableSizeString
struct TkMaterialUniform_Float
{
	NMS::Vector4f Values;
	std::vector<NMS::Vector4f> ExtendedValues;
	NMS::VariableSizeString Name;
};

//Dependency: TkMaterialFlags
//Dependency: TkMaterialUniform_UInt
//Dependency: TkMaterialFxFlags
//Dependency: TkMaterialSampler
//Dependency: TkMaterialUniform_Float
//Dependency: NMSString0x20
//Dependency: VariableSizeString
struct TkMaterialData
{
	std::vector<NMS_Toolkit::TkMaterialFlags> Flags;
	std::vector<NMS_Toolkit::TkMaterialFxFlags> FxFlags;
	NMS::VariableSizeString Link;
	NMS::VariableSizeString Metamaterial;
	NMS::VariableSizeString Name;
	std::vector<NMS_Toolkit::TkMaterialSampler> Samplers;
	NMS::VariableSizeString Shader;
	std::vector<NMS_Toolkit::TkMaterialUniform_Float> Uniforms_Float;
	std::vector<NMS_Toolkit::TkMaterialUniform_UInt> Uniforms_UInt;
	int64_t ShaderMillDataHash;
	int32_t TransparencyLayerID;
	NMS::NMSString0x20 Class;
	bool CastShadow;
	bool CreateFur;
	bool DisableZTest;
	bool EnableLodFade;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20
struct GcRewardFillInventoryWithBrokenSlots
{
	enum class InventoryToBreakEnum : uint32_t
	{
		Ship = 0,
		ShipTech = 1,
		Freighter = 2,
		FreighterTech = 3,
		Vehicle = 4,
		VehicleTech = 5,
		Weapon = 6,
	};

	int32_t CustomTechCount;
	int32_t CustomTechOffset;
	float FractionOfInventoryToBreak;
	NMS_GameComponents::GcRewardFillInventoryWithBrokenSlots::InventoryToBreakEnum InventoryToBreak;
	NMS::NMSString0x20 CustomTechFormat;
};

//Dependency: GcItemQuality
struct GcRewardFishRelease
{
	NMS_GameComponents::GcItemQuality Rarity;
};

struct GcRewardForceDiscoverSystem
{
	bool Silent;
};

//Dependency: GcDiscoveryType
//Dependency: GcScannerIconTypes
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcScannableComponentData
{
	enum class ScannableTypeEnum : uint32_t
	{
		Binoculars = 0,
		BinocularsHotspots = 1,
		Scanner = 2,
		Marker = 3,
		SpaceBattleTarget = 4,
		None = 5,
	};

	NMS::NMSString0x20A FreighterObjectAlreadyUsedLocID;
	std::vector<NMS::NMSString0x10> ValidMissionSurveyIds;
	float AlwaysShowRange;
	NMS_GameComponents::GcDiscoveryType BinocsDiscoIconOverride;
	float CompassRangeMultiplier;
	NMS_GameComponents::GcScannerIconTypes Icon;
	float MarkerOffsetOverride;
	float MinDisplayDistanceOverride;
	NMS_GameComponents::GcScannableComponentData::ScannableTypeEnum ScannableType;
	float ScanRange;
	float ScanTime;
	NMS::NMSString0x20 ScanName;
	bool AllowedToMerge;
	bool CanTagIcon;
	bool ClearTagOnArrival;
	bool DisableIfBuildingPart;
	bool DisableIfInBase;
	bool GetIconAndNameFromSettlementBuilding;
	bool IsPlacedMarker;
	bool MarkerActiveWithNodeInactive;
	bool ShowInFreighterBranchRoom;
	bool TellPlayerIfFreighterObjectUsed;
	bool UseModelNode;
};

struct GcRewardForceOpenGalaxyMap
{
	bool BlockWarp;
};

struct GcSolarSystemClass
{
	enum class SolarSystemClassEnum : uint32_t
	{
		Default = 0,
		Initial = 1,
		Anomaly = 2,
		GameStart = 3,
	};

	NMS_GameComponents::GcSolarSystemClass::SolarSystemClassEnum SolarSystemClass;
};

//Dependency: NMSString0x10
struct GcRewardForgetSpecificTechRecipe
{
	std::vector<NMS::NMSString0x10> TechList;
};

struct GcRewardFreighterMegaWarp
{
};

struct GcRewardHealth
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool SilentUnlessShieldAtMax;
};

//Dependency: NMSString0x10
struct GcRewardInteractionSketchBroadcast
{
	NMS::NMSString0x10 BroadcastValue;
};

struct GcRewardInventorySlots
{
	int32_t Amount;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkSceneBoneRemapping
{
	NMS::NMSString0x80 FromBone;
	NMS::NMSString0x80 ToBone;
};

//Dependency: TkSceneBoneRemapping
struct TkSceneBoneRemappingTable
{
	std::vector<NMS_Toolkit::TkSceneBoneRemapping> BoneMappings;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardJetpackBoost
{
	float Duration;
	float ForwardBoost;
	float IgnitionBoost;
	float UpBoost;
};

//Dependency: NMSString0x10
struct GcRewardMissionMessageSeeded
{
	NMS::NMSString0x10 MessageID;
	NMS::NMSString0x10 SpecificMissionID;
	bool BroadcastInMultiplayer;
	bool BroadcastToActiveMultiplayerMission;
};

//Dependency: NMSString0x10
struct GcRewardMissionMessageToMatchingSeeds
{
	NMS::NMSString0x10 MessageID;
	bool BroadcastInMultiplayer;
};

//Dependency: GcCurrency
struct GcRewardMoney
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcCurrency Currency;
	bool RoundNumber;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificProductRecipes
{
	NMS::NMSString0x20A SetName;
	NMS::NMSString0x10 DisplayProductId;
	std::vector<NMS::NMSString0x10> ProductIds;
	bool Silent;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardMultiSpecificProducts
{
	NMS::NMSString0x20A SetName;
	std::vector<NMS::NMSString0x10> ProductIds;
	bool UseListPopup;
};

//Dependency: NMSString0x40
struct GcRewardNetworkPlayer
{
	NMS::NMSString0x40 RewardWord;
};

//Dependency: NMSString0x20A
struct GcRewardOpenFreeFreighter
{
	NMS::NMSString0x20A NextInteractionIfBought;
	NMS::NMSString0x20A NextInteractionIfNotBought;
	bool ReinteractWhenBought;
};

struct GcRewardOverridePulseEncounterChance
{
	float Chance;
};

//Dependency: GcCreaturePetRewardActions
//Dependency: NMSString0x10
struct GcRewardPetAction
{
	NMS::NMSString0x10 EffectID;
	NMS::NMSString0x10 PlayerEmoteID;
	NMS::NMSString0x10 SpecialHarvestID;
	NMS_GameComponents::GcCreaturePetRewardActions PetAction;
	int32_t SpecialHarvestMul;
};

struct GcRewardPetEgg
{
};

struct GcRewardPetEggHatch
{
	int32_t EggIndex;
};

struct GcRewardPlanetSubstance
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool UseFuelMultiplier;
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardSubstance
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcRealitySubstanceCategory ItemCatagory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool DisableMultiplier;
	bool RewardAsBlobs;
	bool UseFuelMultiplier;
};

//Dependency: GcRarity
//Dependency: GcProceduralProductCategory
//Dependency: NMSString0x20A
struct GcRewardProceduralProduct
{
	NMS::NMSString0x20A OSDMessage;
	int32_t FreighterTechQualityOverride;
	NMS_GameComponents::GcRarity Rarity;
	NMS_GameComponents::GcProceduralProductCategory Type;
	bool OverrideRarity;
	bool SubIfPlayerAlreadyHasOne;
};

struct GcRewardProceduralProductFromBiome
{
};

//Dependency: GcRealitySubstanceCategory
//Dependency: GcRarity
struct GcRewardProductRecipe
{
	NMS_GameComponents::GcRealitySubstanceCategory ItemCatagory;
	int32_t ItemLevel;
	NMS_GameComponents::GcRarity ItemRarity;
	bool AllowedProductTypes[11];
	bool IgnoreRarity;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAudioAnimTrigger
//Dependency: NMSString0x10
//Dependency: NMSString0x80
struct TkAudioComponentData
{
	NMS::NMSString0x10 AmbientState;
	std::vector<NMS_Toolkit::TkAudioAnimTrigger> AnimTriggers;
	std::vector<NMSTemplate> Emitters;
	int32_t MaxDistance;
	float OcclusionRadius;
	float OcclusionRange;
	NMS::NMSString0x80 Ambient;
	NMS::NMSString0x80 Shutdown;
	bool LocalOnly;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x20A
struct GcRewardReinitialise
{
	NMS::NMSString0x20A OverrideMessage;
	bool DoIntroNextWarp;
};

struct GcRewardRemoveSettlementJobPerk
{
};

struct GcRewardSalvageMultitool
{
};

struct GcRewardScanEventNearestBuilding
{
	bool DoAerialScan;
	bool IncludeVisited;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkAnimMaskBone
//Dependency: NMSString0x20A
struct TkAnimMask
{
	NMS::NMSString0x20A Id;
	std::vector<NMS_Toolkit::TkAnimMaskBone> Bones;
};

//Dependency: TkAnimMask
struct TkAnimMaskTable
{
	std::vector<NMS_Toolkit::TkAnimMask> Table;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcRewardScanEventOutcome
{
	enum class RewardScanEventOutcomeEnum : uint32_t
	{
		Success = 0,
		Interstellar = 1,
		BadData = 2,
		FailedToFindBase = 3,
		Duplicate = 4,
		NoBuilding = 5,
		NoSystem = 6,
	};

	NMS_GameComponents::GcRewardScanEventOutcome::RewardScanEventOutcomeEnum RewardScanEventOutcome;
};

//Dependency: NMSString0x10
struct GcRewardSecondarySubstance
{
	NMS::NMSString0x10 ID;
	float AmountFactor;
	bool RewardAsBlobs;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSendChatMessage
{
	NMS::NMSString0x20A CustomText;
	NMS::NMSString0x10 StatusMessageId;
};

struct GcSkiffComponentData
{
	float ArrivalTime;
	float MaximumTravelForce;
};

//Dependency: NMSString0x100
//Dependency: NMSString0x20
struct GcShipDataNames
{
	NMS::NMSString0x100 ResourceName;
	NMS::NMSString0x20 DataName;
};

struct GcRewardSetAbandonedFreighterMissionState
{
	enum class AbandonedFreighterMissionStateEnum : uint32_t
	{
		EndRoomComplete = 0,
		CrewManifestRead = 1,
		CaptainsLogRead = 2,
		HazardOn = 3,
		SlowWalkOn = 4,
		OpenDoors = 5,
	};

	NMS_GameComponents::GcRewardSetAbandonedFreighterMissionState::AbandonedFreighterMissionStateEnum AbandonedFreighterMissionState;
	bool Silent;
};

//Dependency: GcInteractionMissionState
//Dependency: GcInteractionType
struct GcRewardSetInteractionMissionState
{
	NMS_GameComponents::GcInteractionMissionState MissionState;
	NMS_GameComponents::GcInteractionType SetForInteractionClassInMyBuilding;
	bool SetForThisInteraction;
};

//Dependency: GcInteractionType
//Dependency: NMSString0x10
struct GcRewardSetInteractionSeenBitmask
{
	NMS::NMSString0x10 Stat;
	NMS_GameComponents::GcInteractionType InteractionType;
	int32_t OverrideIndex;
};

struct GcRewardSettlementJobGift
{
};

//Dependency: GcBuildingClassification
struct GcRewardSettlementProgress
{
	NMS_GameComponents::GcBuildingClassification BuildingType;
	bool UseInteractionBuildingType;
};

//Dependency: GcSettlementStatChange
struct GcRewardSettlementStat
{
	NMS_GameComponents::GcSettlementStatChange StatToAward;
	bool Silent;
};

//Dependency: GcPersistentBaseTypes
struct GcRewardUpgradeBase
{
	enum class UpgradeBaseTypeEnum : uint32_t
	{
		AllMatching = 0,
		NearestMatching = 1,
	};

	std::vector<NMS_GameComponents::GcPersistentBaseTypes> MatchingBaseTypes;
	NMS_GameComponents::GcRewardUpgradeBase::UpgradeBaseTypeEnum UpgradeBaseType;
};

struct GcRewardShield
{
	int32_t AmountMax;
	int32_t AmountMin;
	bool ShowOSDOnFail;
	bool ShowOSDOnSuccess;
};

struct GcRewardShipAssistance
{
	enum class AssistanceTypeEnum : uint32_t
	{
		Police = 0,
		Wingmen = 1,
	};

	NMS_GameComponents::GcRewardShipAssistance::AssistanceTypeEnum AssistanceType;
	float Time;
};

//Dependency: GcShipMessage
struct GcRewardShipMessage
{
	NMS_GameComponents::GcShipMessage ShipMessage;
};

//Dependency: NMSString0x10
struct GcRewardShipSlot
{
	NMS::NMSString0x10 Cost;
	int32_t NumTokens;
	bool AwardCostAndOpenWindow;
	bool FallbackOpenWindowIfBlocked;
	bool IsAlien;
};


} //namespace NMS_GameComponents

namespace NMS_Globals
{

//Dependency: GcPlanetRingData
//Dependency: Vector3f
//Dependency: GcAsteroidSystemGenerationData
//Dependency: GcAISpaceshipWeightingData
//Dependency: NMSString0x10
//Dependency: GcCombatTimerDifficultyOption
//Dependency: TkCurveType
//Dependency: Vector2f
struct GcSolarGenerationGlobals
{
	NMS_GameComponents::GcPlanetRingData PlanetRingsMax;
	NMS_GameComponents::GcPlanetRingData PlanetRingsMin;
	NMS::Vector3f SolarSystemSize;
	std::vector<NMS_GameComponents::GcAsteroidSystemGenerationData> AsteroidSettings;
	NMS::NMSString0x10 CommonAsteroidResourceFuel;
	NMS::NMSString0x10 CommonAsteroidResourceMain;
	NMS::NMSString0x10 CommonAsteroidResourceProduct;
	NMS::NMSString0x10 CommonAsteroidResourceSecondary;
	NMS::NMSString0x10 RareAsteroidDataProduct;
	NMS::NMSString0x10 RareAsteroidResource;
	NMS::NMSString0x10 RareAsteroidResourceFuel;
	std::vector<float> SpaceshipSpawnFreqMultipliers;
	std::vector<NMS_GameComponents::GcAISpaceshipWeightingData> SpaceshipWeightings;
	float AbandonedSystemProbability[5];
	float EmptySystemProbability[5];
	float ExtremePlanetChance[5];
	float PirateSystemProbability[5];
	NMS::Vector2f PerPlanetGenerationAngleChangeDegreesRange;
	NMS::Vector2f PerPlanetGenerationElevationChangeDegreesRange;
	NMS::Vector2f RareAsteroidNoiseRangeLotsOfRares;
	NMS::Vector2f RareAsteroidNoiseRangeSomeRares;
	NMS::Vector2f SpawnPointStationToPlanetInterpRange;
	float AsteroidAnomalyAvoidRadius;
	float AsteroidLotsOfRaresOdds;
	int32_t AsteroidNoiseOctaves;
	float AsteroidSomeRaresOdds;
	float AsteroidSpaceStationAvoidRadius;
	float AsteroidWarpInAreaAvoidRadius;
	float AsteroidCreatureRichSystemProbability;
	int32_t CivilianTraderSpaceshipsCacheCount;
	int32_t CommonAsteroidMaxResources;
	int32_t CommonAsteroidMinResources;
	int32_t CommonAsteroidResourceFuelMultiplier;
	float CommonAsteroidResourceFuelOdds;
	float CommonAsteroidResourceProductOdds;
	float CommonAsteroidResourceSecondaryOdds;
	NMS_GameComponents::GcCombatTimerDifficultyOption CorruptSentinelBuildingCheckDifficulty;
	int32_t FuelAsteroidMultiplier;
	int32_t GenerateForcedNumberPlanets;
	float LargeAsteroidFadeTime;
	int32_t LocatorScatterChanceOfCapitalShips;
	int32_t LocatorScatterChanceOfPirates;
	int32_t LocatorScatterMaxCount;
	float LocatorScatterMaxDistanceFromPlanet;
	int32_t LocatorScatterMinCount;
	int32_t PercentChanceExtraPrime;
	float PirateClassShipOverrideProbability;
	float PirateClassShipOverrideProbabilityPirateSystem;
	float PlanetInvalidAsteroidZone;
	float PlanetRingProbability;
	float RareAsteroidDataProductOdds;
	int32_t RareAsteroidMaxResources;
	int32_t RareAsteroidMinResources;
	float RareAsteroidResourceFuelOdds;
	float RareAsteroidSystemOddsBlue;
	float RareAsteroidSystemOddsGreen;
	float RareAsteroidSystemOddsPurple;
	float RareAsteroidSystemOddsRed;
	float RareAsteroidSystemOddsYellow;
	float SolarSystemMaximumRadius;
	float SolarSystemMaximumRadiusMassive;
	float SparseAsteroidSpread;
	float StationSpawnAvoidRadius;
	NMS_Toolkit::TkCurveType AsteroidScaleVarianceCurve;
	bool AsteroidsCheckNoise;
	bool AsteroidsEnabled;
	bool GenerateMaximumSolarSystem;
	bool MassiveSolarSystems;
	bool UseSingleRacePerSystem;
	bool UseCorruptSentinelLUT;
};


} //namespace NMS_Globals

namespace NMS_GameComponents
{

struct GcRewardSignalScan
{
	enum class SignalScanTypeEnum : uint32_t
	{
		None = 0,
		DropPod = 1,
		Shelter = 2,
		Search = 3,
		Relic = 4,
		Industrial = 5,
		Alien = 6,
		CrashedFreighter = 7,
	};

	NMS_GameComponents::GcRewardSignalScan::SignalScanTypeEnum SignalScanType;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecialFromList
{
	NMS::NMSString0x20A TextFormat;
	std::vector<NMS::NMSString0x10> FallbackList;
	std::vector<NMS::NMSString0x10> PriorityList;
};

//Dependency: GcAlienRace
//Dependency: GcFrigateClass
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificFrigate
{
	NMS::NMSString0x20A NameOverride;
	NMS::NMSString0x10 PrimaryTrait;
	uint64_t FrigateSeed;
	uint64_t SystemSeed;
	NMS_GameComponents::GcAlienRace AlienRace;
	NMS_GameComponents::GcFrigateClass FrigateClass;
	bool FormatAsSeasonal;
	bool IgnoreAndMoveOnIfCannotRecruit;
	bool IsGift;
	bool IsRewardFrigate;
	bool UseSeedFromCommunicator;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificProductRecipe
{
	NMS::NMSString0x20A SeasonRewardFormat;
	NMS::NMSString0x10 ID;
	bool HideInSeasonRewards;
	bool Silent;
};

//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcRewardSpecificSpecial
{
	NMS::NMSString0x20A Message;
	NMS::NMSString0x20A MilestoneRewardOverrideText;
	NMS::NMSString0x10 ID;
	bool FailIfAlreadyKnown;
	bool HideInSeasonRewards;
	bool ShowSpecialProductPopup;
	bool UseSpecialFormatting;
};

//Dependency: GcInventoryContainer
//Dependency: GcExactResource
//Dependency: GcInventoryLayout
//Dependency: GcInventoryLayoutSizeType
//Dependency: GcWeaponClasses
//Dependency: NMSString0x20A
struct GcRewardSpecificWeapon
{
	NMS_GameComponents::GcInventoryContainer WeaponInventory;
	NMS::NMSString0x20A NameOverride;
	NMS_GameComponents::GcExactResource WeaponResource;
	NMS_GameComponents::GcInventoryLayout WeaponLayout;
	NMS_GameComponents::GcInventoryLayoutSizeType InventorySizeOverride;
	NMS_GameComponents::GcWeaponClasses WeaponType;
	bool FormatAsSeasonal;
	bool IsGift;
	bool IsRewardWeapon;
};

//Dependency: GcAlienRace
struct GcRewardStanding
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcAlienRace Race;
	bool UseExpeditionEventSystemRace;
};

struct GcRewardStartPurchase
{
};

//Dependency: NMSString0x10
struct GcRewardStatCompareAndSet
{
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcRewardStatDiff
{
	NMS::NMSString0x10 CompareAndSetStat;
	NMS::NMSString0x10 CoreStat;
	NMS::NMSString0x10 SubstanceID;
	int32_t AmountPerStat;
	NMS_GameComponents::GcCurrency RewardCurrency;
	int32_t StatRewardCap;
	bool OKToGiveZero;
};

//Dependency: GcGenericRewardTableEntry
//Dependency: GcRewardTableEntitlementItem
//Dependency: GcRewardTableEntry
//Dependency: NMSString0x10
struct GcRewardTable
{
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> DestructionTable;
	std::vector<NMS_GameComponents::GcRewardTableEntitlementItem> EntitlementTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> FleetTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> GenericTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> InteractionTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> MissionBoardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> MixerRewardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> NPCPlanetSiteTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> OldInteractionTable;
	std::vector<NMS::NMSString0x10> ProductRewardOrder;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable1;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable10;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable11;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable12;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable13;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable14;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable15;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable16;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable17;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable18;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable19;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable2;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable20;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable3;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable4;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable5;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable6;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable7;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable8;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SeasonRewardTable9;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SettlementTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> ShipSalvageTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> SpecialRewardTable;
	std::vector<NMS_GameComponents::GcRewardTableEntry> Table;
	std::vector<NMS::NMSString0x10> TechRewardOrder;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> TwitchRewardTable;
	std::vector<NMS_GameComponents::GcGenericRewardTableEntry> WikiProgressTable;
};

//Dependency: GcAlienRace
//Dependency: NMSString0x20A
struct GcRewardTeachSpecificWords
{
	NMS::NMSString0x20A CustomOSDMessage;
	std::vector<NMS::NMSString0x20A> SpecificWordGroups;
	float OSDMessageTime;
	NMS_GameComponents::GcAlienRace Race;
	bool SuppressOSDMessage;
};

//Dependency: GcWordCategoryTableEnum
//Dependency: GcAlienRace
struct GcRewardTeachWord
{
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcWordCategoryTableEnum Category;
	NMS_GameComponents::GcAlienRace Race;
	bool UseCategory;
};

//Dependency: GcTechnologyCategory
//Dependency: NMSString0x10
struct GcRewardTechRecipe
{
	NMS::NMSString0x10 RewardGroup;
	NMS_GameComponents::GcTechnologyCategory Category;
};

struct GcRewardTriggerMaintenance
{
};

//Dependency: GcInventoryClass
struct GcRewardUpgradeShipClass
{
	NMS_GameComponents::GcInventoryClass ForceToSpecificClass;
	bool MatchClassToCommunityTier;
	bool Silent;
	bool SilentlyMoveOnAtMaxClass;
};

struct GcVehicleWeaponMode
{
	enum class VehicleWeaponModeEnum : uint32_t
	{
		Laser = 0,
		Gun = 1,
		TerrainEdit = 2,
		StunGun = 3,
		Flamethrower = 4,
	};

	NMS_GameComponents::GcVehicleWeaponMode::VehicleWeaponModeEnum VehicleWeaponMode;
};

//Dependency: NMSString0x10
struct GcRewardWeaponSlot
{
	NMS::NMSString0x10 Cost;
	int32_t NumTokens;
	bool AwardCostAndOpenWindow;
};

//Dependency: GcNPCHabitationType
struct GcRewardWorker
{
	NMS_GameComponents::GcNPCHabitationType NPCHabitationType;
};

//Dependency: NMSString0x10
struct GcRoomSequenceRule
{
	NMS::NMSString0x10 MustBeAfterRoom;
	NMS::NMSString0x10 MustBeBeforeRoom;
	NMS::NMSString0x10 RoomID;
	int32_t MinRoomIndex;
};

struct GcSaveContextDataMask
{
	bool Ammo;
	bool AtlasStations;
	bool Banner;
	bool BaseBuildingObjects;
	bool BuildersKnown;
	bool CharacterCustomisation;
	bool ChestInventories;
	bool ChestMagicInventories;
	bool CookingIngredientsInventory;
	bool DifficultySettings;
	bool FishPlatformInventory;
	bool Fleet;
	bool Freighter;
	bool GalaxyWaypoints;
	bool HotActions;
	bool Interactions;
	bool KnownProducts;
	bool KnownRefinerRecipes;
	bool KnownSpecials;
	bool KnownTech;
	bool KnownWords;
	bool MultiTools;
	bool Nanites;
	bool NexusAccess;
	bool NPCWorkers;
	bool PersistentBases;
	bool Pets;
	bool PlayerInventory;
	bool Portals;
	bool ProcTechIndex;
	bool ProgressionLevel;
	bool RedeemedRewards;
	bool RevealBlackHoles;
	bool RocketLauncherInventory;
	bool SeenBaseObjects;
	bool SeenStories;
	bool SettlementState;
	bool Ships;
	bool ShopTier;
	bool Specials;
	bool SquadronPilots;
	bool Stats;
	bool TeleportEndpoints;
	bool TerrainEdits;
	bool TradingSupply;
	bool Units;
	bool Vehicles;
	bool VisitedSystems;
	bool Wonders;
};

//Dependency: GcSaveContextDataMask
//Dependency: NMSString0x10
struct GcSaveContextDataMaskTableEntry
{
	NMS::NMSString0x10 Id;
	NMS_GameComponents::GcSaveContextDataMask Mask;
};

//Dependency: GcSaveContextDataMaskTableEntry
//Dependency: GcSaveContextDataMask
struct GcSaveContextDataMaskTable
{
	std::vector<NMS_GameComponents::GcSaveContextDataMaskTableEntry> Masks;
	NMS_GameComponents::GcSaveContextDataMask Default;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
//Dependency: NMSString0x80
struct TkResourceDescriptorData
{
	NMS::NMSString0x20A Id;
	std::vector<NMSTemplate> Children;
	std::vector<NMS::VariableSizeString> ReferencePaths;
	float Chance;
	NMS::NMSString0x80 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcTerrainTextureSettings
//Dependency: VariableSizeString
struct GcTerrainTexture
{
	NMS::VariableSizeString DiffuseTexture;
	NMS::VariableSizeString NormalMap;
	NMS_GameComponents::GcTerrainTextureSettings TextureConfig[12];
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkMaterialShaderMillComment
{
	int32_t PosMaxX;
	int32_t PosMaxY;
	int32_t PosMinX;
	int32_t PosMinY;
	NMS::NMSString0x100 Text;
};

//Dependency: NMSString0x20
struct TkMaterialShaderMillFlag
{
	NMS::NMSString0x20 Flag;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct TkMaterialShaderMillLink
{
	NMS::NMSString0x10 InputShuffle;
	NMS::NMSString0x10 OutputShuffle;
	int32_t Count;
	int32_t InputNode;
	int32_t OutputNode;
	NMS::NMSString0x20 InputConnect;
	NMS::NMSString0x20 OutputConnect;
};

//Dependency: TkMaterialShaderMillConnect
//Dependency: NMSString0x40
//Dependency: Colour
//Dependency: NMSString0x80
//Dependency: NMSString0x20
struct TkMaterialShaderMillNode
{
	NMS::Colour ColourValue;
	std::vector<NMS_Toolkit::TkMaterialShaderMillConnect> Inputs;
	std::vector<NMS_Toolkit::TkMaterialShaderMillConnect> Outputs;
	float FValue;
	float FValue2;
	int32_t Id;
	int32_t IValue;
	int32_t IValue2;
	int32_t WindowX;
	int32_t WindowY;
	NMS::NMSString0x80 Value;
	NMS::NMSString0x40 ParameterName;
	NMS::NMSString0x20 Type;
	bool ExposeAsParameter;
};

//Dependency: TkMaterialShaderMillComment
//Dependency: NMSString0x100
//Dependency: TkMaterialShaderMillFlag
//Dependency: TkMaterialShaderMillLink
//Dependency: TkMaterialShaderMillNode
//Dependency: NMSString0x40
struct TkMaterialShaderMillData
{
	std::vector<NMS_Toolkit::TkMaterialShaderMillComment> ShaderMillCmts;
	std::vector<NMS_Toolkit::TkMaterialShaderMillFlag> ShaderMillFlags;
	std::vector<NMS_Toolkit::TkMaterialShaderMillLink> ShaderMillLinks;
	std::vector<NMS_Toolkit::TkMaterialShaderMillNode> ShaderMillNodes;
	int32_t OutputX;
	int32_t OutputY;
	float ScrollX;
	float ScrollY;
	float Zoom;
	NMS::NMSString0x100 Description;
	NMS::NMSString0x100 Filename;
	NMS::NMSString0x40 Name;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcScanEffectData
//Dependency: NMSString0x40
struct GcScanEffectComponentData
{
	std::vector<NMS_GameComponents::GcScanEffectData> ScanEffects;
	NMS::NMSString0x40 NodeName;
};

struct GcScareCreaturesAction
{
	float FleeRadius;
	float HearRadius;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVolumeTriggerType
{
	enum class VolumeTriggerTypeEnum : uint32_t
	{
		Open = 0,
		GenericInterior = 1,
		GenericGlassInterior = 2,
		Corridor = 3,
		SmallRoom = 4,
		LargeRoom = 5,
		OpenCovered = 6,
		HazardProtection = 7,
		Dungeon = 8,
		FieldBoundary = 9,
		Custom_Biodome = 10,
		Portal = 11,
		VehicleBoost = 12,
		NexusPlaza = 13,
		NexusCommunityHub = 14,
		NexusHangar = 15,
		RaceObstacle = 16,
		HazardProtectionCold = 17,
		SpaceStorm = 18,
		HazardProtectionNoRecharge = 19,
		HazardProtectionSpook = 20,
		ForceJetpackIgnition = 21,
	};

	NMS_Toolkit::TkVolumeTriggerType::VolumeTriggerTypeEnum VolumeTriggerType;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSelectableObjectList
struct GcSelectableObjectTable
{
	std::vector<NMS_GameComponents::GcSelectableObjectList> Lists;
};

//Dependency: GcSentinelSpawnSequence
struct GcSentinelSpawnSequenceGroup
{
	NMS_GameComponents::GcSentinelSpawnSequence ExtremeSequence;
	NMS_GameComponents::GcSentinelSpawnSequence Sequence;
};

//Dependency: GcCurrency
//Dependency: NMSString0x10
struct GcSettlementBuildingCostData
{
	std::vector<NMS::NMSString0x10> Products;
	std::vector<NMS::NMSString0x10> Substances;
	int32_t AmountMax;
	int32_t AmountMin;
	NMS_GameComponents::GcCurrency Currency;
};

//Dependency: GcSettlementBuildingCostData
struct GcSettlementBuildingCost
{
	NMS_GameComponents::GcSettlementBuildingCostData StageCosts[9];
};

//Dependency: GcSettlementColourUpgradeData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementColourUpgradeTable
{
	NMS_GameComponents::GcSettlementColourUpgradeData UpgradeLevels[3];
	NMS::NMSString0x10 Name;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
};

struct GcSettlementConstructionLevel
{
	enum class SettlementConstructionLevelEnum : uint32_t
	{
		Start = 0,
		GroundStorey = 1,
		RegularStorey = 2,
		Roof = 3,
		Decoration = 4,
		Upgrade1 = 5,
		Upgrade2 = 6,
		Upgrade3 = 7,
		Other = 8,
	};

	NMS_GameComponents::GcSettlementConstructionLevel::SettlementConstructionLevelEnum SettlementConstructionLevel;
};

//Dependency: GcSettlementJudgementData
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcSettlementCustomJudgement
{
	NMS_GameComponents::GcSettlementJudgementData Data;
	NMS::NMSString0x20A CustomCostText;
	NMS::NMSString0x20A CustomMissionObjectiveText;
	NMS::NMSString0x10 ID;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
struct TkAnimStateMachineComponentData
{
	NMS::NMSString0x20A InitialStateMachine;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSettlementMaterialData
//Dependency: GcBaseBuildingPartStyle
//Dependency: NMSString0x10
struct GcSettlementMaterialTable
{
	NMS_GameComponents::GcSettlementMaterialData UpgradeLevels[4];
	NMS::NMSString0x10 Name;
	float RelativeProbability;
	NMS_GameComponents::GcBaseBuildingPartStyle Style;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkEmitterFloatProperty
struct TkParticleBurstData
{
	NMS_Toolkit::TkEmitterFloatProperty BurstAmount;
	NMS_Toolkit::TkEmitterFloatProperty BurstInterval;
	int32_t LoopCount;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcSettlementStatType
//Dependency: NMSString0x10
struct GcSettlementPerkUsefulData
{
	NMS::NMSString0x10 BaseID;
	uint64_t SeedValue;
	float ChangeStrength;
	NMS_GameComponents::GcSettlementStatType Stat;
	bool IsNegative;
	bool IsProc;
};

struct GcWeatherHazardTornadoData
{
	float SuckInRadius;
	float SuckInStrength;
	float SuckUpHeight;
	float SuckUpHeightCutoff;
	float SuckUpRadius;
	float SuckUpStrength;
};

//Dependency: GcSettlementProductionElementRequirement
//Dependency: NMSString0x10
struct GcSettlementProductionElement
{
	NMS::NMSString0x10 Product;
	std::vector<NMS_GameComponents::GcSettlementProductionElementRequirement> Requirements;
	int32_t ProductionAccumulationCap;
	float ProductionAmountMultiplier;
	float ProductionTimeMultiplier;
};

struct GcSettlementStatStrengthRanges
{
	int32_t AmountMax;
	int32_t AmountMin;
};

//Dependency: GcSettlementStatStrengthRanges
struct GcSettlementStatStrengthData
{
	NMS_GameComponents::GcSettlementStatStrengthRanges PerkStatStrengthValues[7];
};

//Dependency: NMSString0x10
struct GcSpaceshipShieldData
{
	NMS::NMSString0x10 DamageMulOverride;
	NMS::NMSString0x10 Id;
	int32_t Health;
	int32_t LevelledExtraHealth;
	float RechargeDelayTime;
	float RechargeTime;
	bool StartDepletedWhenEnabled;
};

//Dependency: GcShipAIAttackData
//Dependency: GcShipAICombatDefinition
//Dependency: GcSpaceshipTravelData
//Dependency: GcSpaceshipShieldData
//Dependency: NMSString0x10
struct GcShipAIAttackDataTable
{
	NMS::NMSString0x10 TraderAttackLookup[4];
	std::vector<NMS_GameComponents::GcShipAIAttackData> BehaviourTable;
	std::vector<NMS_GameComponents::GcShipAICombatDefinition> Definitions;
	std::vector<NMS_GameComponents::GcSpaceshipTravelData> EngineTable;
	std::vector<NMS_GameComponents::GcSpaceshipShieldData> ShieldTable;
};

//Dependency: GcSpaceshipClasses
//Dependency: TkModelRendererData
//Dependency: VariableSizeString
struct GcSpaceshipComponentData
{
	NMS_Toolkit::TkModelRendererData Renderer;
	NMS::VariableSizeString Cockpit;
	NMS_GameComponents::GcSpaceshipClasses Class;
	int32_t DefaultHealth;
	float FoVFixedDistance;
	float MaxHeadPitchDown;
	float MaxHeadPitchUp;
	float MaxHeadTurn;
	bool Buildable;
};

//Dependency: GcSpaceshipComponentData
struct GcShipOwnershipComponentData
{
	NMS_GameComponents::GcSpaceshipComponentData Data;
};

//Dependency: GcProjectileImpactData
//Dependency: GcProjectileImpactType
//Dependency: GcFiendCrime
//Dependency: NMSString0x10
//Dependency: NMSString0x20
struct GcShootableComponentData
{
	NMS_GameComponents::GcProjectileImpactData ImpactOverrideData;
	NMS::NMSString0x10 DamageMultiplier;
	NMS::NMSString0x10 ImpactShakeEffect;
	NMS::NMSString0x10 RequiredTech;
	float CapHealthForMissingArmour;
	float FiendCrimeModifier;
	NMS_GameComponents::GcFiendCrime FiendCrimeType;
	NMS_GameComponents::GcProjectileImpactType ForceImpactType;
	int32_t Health;
	int32_t IncreaseCorruptSentinelWanted;
	int32_t IncreaseWanted;
	float IncreaseWantedThresholdTime;
	int32_t LevelledExtraHealth;
	int32_t MinDamage;
	float RepairTime;
	NMS::NMSString0x20 NameOverride;
	bool AutoAimTarget;
	bool CouldCountAsArmourForParent;
	bool HitEffectEnabled;
	bool HitEffectEntireModel;
	bool IgnoreHitPush;
	bool IgnorePlayer;
	bool IgnoreTerrainEditKills;
	bool ImpactShake;
	bool IsAffectedByPiercing;
	bool IsArmoured;
	bool IsPiercable;
	bool PlayerOnly;
	bool StaticUntilShot;
	bool UseSpaceLevelForExtraHealth;
};

//Dependency: NMSString0x100
struct GcSimpleIkRecoilComponentData
{
	float ActiveRange;
	float AngleLimit;
	float HitReactDirectedMax;
	float HitReactDirectedMin;
	float HitReactRandomMax;
	float HitReactRandomMin;
	float MinHitReactTime;
	float RecoverTime;
	NMS::NMSString0x100 EndJoint;
};

//Dependency: GcPlanetWeatherColourIndex
//Dependency: Colour
struct GcSpaceSkyProperties
{
	NMS::Colour PlanetHorizonColour;
	NMS::Colour PlanetSkyColour;
	NMS_GameComponents::GcPlanetWeatherColourIndex ColourIndex;
	float AtmosphereThickness;
	float CenterPower;
	float CloudNoiseFrequency;
	float HorizonFadeSpeed;
	float HorizonMultiplier;
	float NebulaBrightness;
	float NebulaCloudStrength;
	float NebulaCloudStrength1;
	float NebulaDistortionStrength;
	float NebulaFBMStrength;
	float NebulaFBMStrength1;
	float NebulaFogAmount;
	float NebulaFrequency;
	float NebulaNoiseFrequency;
	float NebulaSeed;
	float NebulaSparseness;
	float NebulaTendrilStrength;
	float NebulaTurbulenceStrength;
	float NebulaWispyness;
	float NebulaWispyness1;
	float PlanetFogStrength;
	float SpaceFogColour2Strength;
	float SpaceFogColourStrength;
	float SpaceFogMax;
	float SpaceFogPlanetMax;
	float SpaceFogStrength;
	float StarVisibility;
	float SunSize;
	float SunStrength;
};

//Dependency: Vector2f
struct GcSolarSystemTraderSpawnData
{
	NMS::Vector2f SequenceTakeoffDelay;
	int32_t ChanceToDelayLaunch;
	float InitialTakeoffDelay;
	int32_t MaxToSpawn;
};

//Dependency: GcSolarSystemLocator
//Dependency: GcPlanetGenerationInputData
//Dependency: GcPlanetColourData
//Dependency: GcSpaceStationSpawnData
//Dependency: GcSpaceSkyProperties
//Dependency: GcSolarSystemTraderSpawnData
//Dependency: GcLightProperties
//Dependency: GcAISpaceshipPreloadCacheData
//Dependency: GcScreenFilters
//Dependency: GcPlanetTradingData
//Dependency: GcSolarSystemClass
//Dependency: GcPlayerConflictData
//Dependency: GcAlienRace
//Dependency: GcGalaxyStarTypes
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: NMSString0x80
struct GcSolarSystemData
{
	enum class AsteroidLevelEnum : uint32_t
	{
		NoRares = 0,
		SomeRares = 1,
		LotsOfRares = 2,
	};

	NMS_GameComponents::GcPlanetColourData Colours;
	NMS_GameComponents::GcSpaceStationSpawnData SpaceStationSpawn;
	NMS_GameComponents::GcSpaceSkyProperties Sky;
	NMS::Vector3f PlanetPositions[8];
	NMS_GameComponents::GcLightProperties Light;
	NMS::Vector3f SunPosition;
	NMS_GameComponents::GcPlanetGenerationInputData PlanetGenerationInputs[8];
	std::vector<NMSTemplate> AsteroidGenerators;
	NMS::NMSString0x10 AsteroidSubstanceID;
	NMS::VariableSizeString HeavyAir;
	std::vector<NMS_GameComponents::GcSolarSystemLocator> Locators;
	NMS::GcSeed Seed;
	NMS::GcSeed SentinelCrashSiteShipSeed;
	std::vector<NMS_GameComponents::GcAISpaceshipPreloadCacheData> SystemShips;
	int32_t PlanetOrbits[8];
	NMS_GameComponents::GcSolarSystemTraderSpawnData TraderSpawnInStations;
	NMS_GameComponents::GcSolarSystemTraderSpawnData TraderSpawnOnOutposts;
	NMS::Vector2f FlybyTimer;
	NMS::Vector2f FreighterTimer;
	NMS::Vector2f PlanetPirateTimer;
	NMS::Vector2f PoliceTimer;
	NMS::Vector2f SpacePirateTimer;
	NMS_GameComponents::GcPlanetTradingData TradingData;
	NMS_GameComponents::GcSolarSystemData::AsteroidLevelEnum AsteroidLevel;
	NMS_GameComponents::GcSolarSystemClass Class;
	NMS_GameComponents::GcPlayerConflictData ConflictData;
	NMS_GameComponents::GcAlienRace InhabitingRace;
	int32_t MaxNumFreighters;
	int32_t NumTradeRoutes;
	int32_t NumVisibleTradeRoutes;
	int32_t Planets;
	int32_t PrimePlanets;
	NMS_GameComponents::GcScreenFilters ScreenFilter;
	NMS_GameComponents::GcGalaxyStarTypes StarType;
	NMS::NMSString0x80 Name;
	bool StartWithFreighters;
};

//Dependency: GcSolarSystemLocatorChoice
//Dependency: GcSeed
//Dependency: Vector2f
//Dependency: NMSString0x20
//Dependency: GcRealityCommonFactions
//Dependency: GcAISpaceshipRoles
struct GcSolarSystemEventWarpIn
{
	NMS::GcSeed Seed;
	std::vector<int32_t> ShipChoiceSequence;
	NMS_GameComponents::GcSolarSystemLocatorChoice Locator;
	NMS::Vector2f RepeatIntervalRange;
	NMS::Vector2f ShipCountRange;
	NMS::Vector2f SpeedRange;
	NMS::Vector2f WarpIntervalRange;
	NMS_GameComponents::GcRealityCommonFactions Faction;
	int32_t Repeat;
	NMS_GameComponents::GcAISpaceshipRoles ShipRole;
	float Time;
	NMS::NMSString0x20 SquadName;
	bool InstantWarpIn;
	bool InvertDirection;
};

//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcSolarSystemEventWarpOut
{
	NMS::Vector2f WarpIntervalRange;
	float Time;
	NMS::NMSString0x20 SquadName;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkVertexElement
{
	enum class InstancingEnum : uint32_t
	{
		PerVertex = 0,
		PerModel = 1,
	};

	NMS_Toolkit::TkVertexElement::InstancingEnum Instancing;
	int32_t Type;
	uint8_t Normalise;
	uint8_t Offset;
	uint8_t SemanticID;
	uint8_t Size;
};

//Dependency: TkVertexElement
struct TkVertexLayout
{
	std::vector<NMS_Toolkit::TkVertexElement> VertexElements;
	int64_t PlatformData;
	int32_t ElementCount;
	int32_t Stride;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcSpaceStormData
{
	NMS::VariableSizeString File;
	NMS::NMSString0x10 StormId;
};

//Dependency: NMSString0x10
struct GcSpawnAction
{
	NMS::NMSString0x10 Event;
};

struct GcSpecialPetChatType
{
	enum class SpecialPetChatTypeEnum : uint32_t
	{
		Monster = 0,
		Quad = 1,
		MiniRobo = 2,
	};

	NMS_GameComponents::GcSpecialPetChatType::SpecialPetChatTypeEnum SpecialPetChatType;
};

//Dependency: VariableSizeString
struct GcStatIconTable
{
	NMS::VariableSizeString StatIcons[203];
};

struct GcStatsAchievements
{
	enum class StatsAchievementsEnum : uint32_t
	{
		FirstWarp = 0,
		FirstDiscovery = 1,
	};

	NMS_GameComponents::GcStatsAchievements::StatsAchievementsEnum StatsAchievements;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkNGuiEditorSavedTreeNodeModification
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedTreeNodeModification> Children;
	NMS::NMSString0x100 Name;
	bool Modified;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcStatsOneShotTypes
{
	enum class StatsOneShotEnum : uint32_t
	{
		ShipLanded = 0,
		ShipLaunched = 1,
		ShipWarped = 2,
		WeaponFired = 3,
	};

	NMS_GameComponents::GcStatsOneShotTypes::StatsOneShotEnum StatsOneShot;
};

//Dependency: Colour
struct GcStyleProp_Colour
{
	NMS::Colour Colour;
};

struct GcSurvivalBarBoolArray
{
	bool Values[3];
};

//Dependency: TkTextureResource
//Dependency: NMSString0x10
struct GcTechBoxData
{
	NMS_Toolkit::TkTextureResource Icon;
	NMS::NMSString0x10 InstallTechID;
	NMS::NMSString0x10 ProductID;
	bool IsAlien;
};

//Dependency: GcTechBoxData
struct GcTechBoxTable
{
	std::vector<NMS_GameComponents::GcTechBoxData> Table;
};

//Dependency: NMSString0x10
struct GcTechnologyAttachmentComponentData
{
	enum class InventoryEnum : uint32_t
	{
		Vehicle = 0,
	};

	std::vector<NMS::NMSString0x10> Techs;
	NMS_GameComponents::GcTechnologyAttachmentComponentData::InventoryEnum Inventory;
	bool Inverted;
};

//Dependency: GcTechnology
struct GcTechnologyTable
{
	std::vector<NMS_GameComponents::GcTechnology> Table;
};

//Dependency: GcTechnology
struct GcTechnologyTypes
{
	std::vector<NMS_GameComponents::GcTechnology> Technology;
};

struct GcTrackedPosition
{
	enum class TrackedPositionEnum : uint32_t
	{
		GameCamera = 0,
		ActiveCamera = 1,
		DebugCamera = 2,
		Frozen = 3,
	};

	NMS_GameComponents::GcTrackedPosition::TrackedPositionEnum TrackedPosition;
};

//Dependency: GcTextPreset
struct GcTextPresetTable
{
	std::vector<NMS_GameComponents::GcTextPreset> Table;
};

//Dependency: Colour
//Dependency: Vector2f
struct GcTextStyleOutline
{
	NMS::Colour OutlineColour;
	NMS::Vector2f OutlineOffset;
};

//Dependency: Colour
//Dependency: Vector2f
struct GcTextStyleShadow
{
	NMS::Colour ShadowColour;
	NMS::Vector2f ShadowOffset;
};

//Dependency: NMSString0x10
struct GcTorpedoComponentData
{
	NMS::NMSString0x10 DamageProjectileId;
	NMS::NMSString0x10 DamageShieldProjectileId;
	NMS::NMSString0x10 DestroyedEffect;
	float ApproachTime;
	float BrakeForceMax;
	float BrakeForceMin;
	float BrakeTime;
	float ForceMax;
	float ForceMin;
	float HitRadius;
	float MaxLifetime;
	float MaxSpeed;
	float MinCircleTime;
	float NoTargetLife;
	float RotateSpeed;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
struct TkAnimRandomOneShots
{
	std::vector<NMS::NMSString0x10> List;
	NMS::NMSString0x10 Parent;
	float DelayMax;
	float DelayMin;
};

//Dependency: VariableSizeString
struct TkNetEntityRefComponentData
{
	NMS::VariableSizeString Reference;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcActionTriggerState
//Dependency: NMSString0x10
struct GcTriggerActionComponentData
{
	NMS::NMSString0x10 PersistentState;
	std::vector<NMS_GameComponents::GcActionTriggerState> States;
	bool HideModel;
	bool LinkStateToBaseGrid;
	bool Persistent;
	bool ResetShotTimeOnStateChange;
	bool StartInactive;
};

//Dependency: GcInputActions
//Dependency: TkTriggerFeedbackData
//Dependency: NMSString0x10
struct GcTriggerFeedbackState
{
	NMS::NMSString0x10 Id;
	NMS_Toolkit::TkTriggerFeedbackData Data;
	NMS_GameComponents::GcInputActions Action;
};

//Dependency: GcTriggerFeedbackState
struct GcTriggerFeedbackStateTable
{
	std::vector<NMS_GameComponents::GcTriggerFeedbackState> Events;
};

//Dependency: NMSString0x10
struct GcTurretComponentData
{
	enum class TargetFilterEnum : uint32_t
	{
		Any = 0,
		FreightersOnly = 1,
		SmallShipsOnly = 2,
	};

	enum class GunTypeEnum : uint32_t
	{
		Laser = 0,
		Projectile = 1,
		Missile = 2,
	};

	NMS::NMSString0x10 LaserEffectId;
	NMS::NMSString0x10 LaserMuzzleChargeId;
	NMS::NMSString0x10 LaserMuzzleFlashId;
	NMS::NMSString0x10 MissileId;
	NMS::NMSString0x10 ProjectileId;
	NMS::NMSString0x10 ProjectileMuzzleFlashId;
	float BaseRotationAngleThreshold;
	NMS_GameComponents::GcTurretComponentData::GunTypeEnum GunType;
	float LevelledBurstCountExtra;
	float LevelledBurstTimeMultiplier;
	NMS_GameComponents::GcTurretComponentData::TargetFilterEnum TargetFilter;
	float TurrentLaserShootTimeRandomExtraMax;
	float TurretAimOffset;
	float TurretAngle;
	int32_t TurretBurstCount;
	float TurretBurstTime;
	float TurretDispersionAngle;
	float TurretLaserAbortDistance;
	float TurretLaserActiveTime;
	float TurretLaserChargeTime;
	float TurretLaserLength;
	float TurretLaserMoveSpeed;
	float TurretLaserShootTime;
	float TurretMaxDownAngle;
	float TurretMaxPitchTurnSpeedDegPerSec;
	float TurretMaxYawTurnSpeedDegPerSec;
	float TurretMissileLaunchSpeed;
	float TurretMissileLaunchTime;
	float TurretMissileRange;
	float TurretPitchSmoothTurnTime;
	float TurretProjectileRange;
	float TurretRange;
	float TurretShootPauseTime;
	float TurretYawSmoothTurnTime;
	bool CanMoveDuringBurst;
	bool FireInTurretFacing;
	bool HasFreighterAlertLight;
	bool RemotePlayersCanDamage;
};

//Dependency: NMSString0x40
//Dependency: NMSString0x20
struct GcUniqueIdData
{
	enum class UniqueIdTypeEnum : uint32_t
	{
		Invalid = 0,
		Deterministic = 1,
		UserSpawned = 2,
	};

	uint64_t DeterministicSeed;
	uint32_t Iteration;
	NMS_GameComponents::GcUniqueIdData::UniqueIdTypeEnum UniqueIdType;
	NMS::NMSString0x40 OnlineID;
	NMS::NMSString0x20 PlatformID;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkEntitlementListData
{
	NMS::NMSString0x10 EntitlementId;
	NMS::NMSString0x40 ServiceID;
};

//Dependency: TkEntitlementListData
struct TkEntitlementList
{
	std::vector<NMS_Toolkit::TkEntitlementListData> Entitlements;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcValueData
{
};

//Dependency: GcVehicleType
//Dependency: TkModelResource
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcVehicleComponentData
{
	NMS_Toolkit::TkModelResource WheelModel;
	NMS::VariableSizeString Cockpit;
	NMS::NMSString0x10 VehicleType;
	int32_t BaseHealth;
	NMS_GameComponents::GcVehicleType Class;
	float FoVFixedDistance;
	float MaxHeadPitchDown;
	float MaxHeadPitchUp;
	float MaxHeadTurn;
	float MinTurretAngle;
};

//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x100
//Dependency: NMSString0x20
//Dependency: NMSString0x80
struct GcVehicleData
{
	NMS::Vector3f WheelGrassPushers[10];
	NMS::Vector3f WheelLocs[10];
	NMS::Vector3f CollDimensions;
	NMS::Vector3f CollOffset;
	NMS::Vector3f ExtraCollOffset;
	NMS::Vector3f FirstPersonSeatAdjust;
	NMS::Vector3f InertiaDimensions;
	NMS::Vector3f WheelForwardAngularFactor;
	NMS::Vector3f WheelSideAngularFactor;
	NMS::Vector3f WheelSuspensionAngularFactor;
	NMS::Vector3f WheelTurnAngularFactor;
	NMS::NMSString0x10 SuspensionAnimNames[10];
	NMS::NMSString0x10 Name;
	NMS::NMSString0x10 SideSkidParticle;
	NMS::NMSString0x10 SubSplashParticle;
	NMS::NMSString0x10 WheelSpinParticle;
	NMS::NMSString0x10 WheelSplashParticle;
	float WheelRadiusMultiplier[10];
	float WheelRayFakeWidthFactor[10];
	float AudioImpactSpeedMul;
	float AudioImpactSpeedThreshold;
	float CollRadius;
	float CreatureMassScale;
	float HardStopSpeedThreshold;
	float HeadlightIntensity;
	float InertiaMul;
	int32_t NumGrassPushers;
	int32_t NumWheels;
	float SideSkidParticleMaxRate;
	float SideSkidParticleMaxThresh;
	float SideSkidParticleMinRate;
	float SideSkidParticleMinThresh;
	float SteeringWheelPushRange;
	float SteeringWheelSpringMultiplier;
	float SubSplashParticleMaxThresh;
	float SubSplashParticleMinThresh;
	float TopSpeedForward;
	float TopSpeedReverse;
	float TurningWheelForce;
	float TurningWheelForceDamperVR;
	float TurningWheelFrictionBraking;
	float TurningWheelFrictionNonBraking;
	float TurningWheelFrictionOmega;
	float UnderwaterAlignDir;
	float UnderwaterAlignUp;
	float UnderwaterEngineDirectionBrake;
	float UnderwaterEngineDirectionBrakeVertical;
	float UnderwaterEngineFalloff;
	float UnderwaterEngineMaxSpeed;
	float UnderwaterEngineMaxSpeedVR;
	float UnderwaterEnginePower;
	float UnderwaterEnginePowerVR;
	float VehicleAngularDampingAerial;
	float VehicleAngularDampingGround;
	float VehicleAngularDampingWater;
	float VehicleAudioSideSkidMul;
	float VehicleAudioSideSkidThreshold;
	float VehicleAudioSpeedMul;
	float VehicleAudioSpinSkidMul;
	float VehicleAudioSpinSkidThreshold;
	float VehicleAudioSuspensionScale;
	float VehicleAudioSuspensionThreshold;
	float VehicleAudioTorqueMul;
	float VehicleBoostExtraMaxSpeedAir;
	float VehicleBoostForce;
	float VehicleBoostMaxSpeed;
	float VehicleBoostRechargeTime;
	float VehicleBoostSpeedFalloff;
	float VehicleBoostTime;
	float VehicleComCheat;
	float VehicleGravity;
	float VehicleGravityWater;
	float VehicleJumpAirControlForce;
	float VehicleJumpAirMaxTorque;
	float VehicleJumpAirRotateTimeMax;
	float VehicleJumpAirRotateTimeMin;
	float VehicleJumpAirRotateXAmount;
	float VehicleJumpAirRotateZAmount;
	float VehicleJumpForce;
	float VehicleLinearDampingAerial;
	float VehicleLinearDampingGround;
	float VehicleLinearDampingWater;
	float VehicleUnderwaterRotateTime;
	float VisualPitchAmount;
	float VisualRollAmount;
	float VisualRollOffsetY;
	float WheelDragginess;
	float WheelEndHeight;
	float WheelFrontFrictionDynamic;
	float WheelFrontFrictionDynamicThreshold;
	float WheelFrontFrictionOmega;
	float WheelFrontFrictionStatic;
	float WheelFrontFrictionStaticThreshold;
	float WheelGrassPusherFrequency;
	float WheelGrassPusherStrength;
	float WheelGrassPusherWobble;
	float WheelGuardAdjustUpwards;
	float WheelGuardExtraHeight;
	float WheelGuardExtraRadius;
	float WheelGuardMassScaleMax;
	float WheelGuardMassScaleMin;
	float WheelGuardMassScaleMinClamp;
	float WheelGuardPenetrationScaleMax;
	float WheelGuardPenetrationScaleMin;
	float WheelGuardPenetrationScaleMinClamp;
	float WheelGuardVerticalResponseMax;
	float WheelGuardVerticalResponseMin;
	float WheelMaxAccelForceForward;
	float WheelMaxAccelForceReverse;
	float WheelMaxDecelForceBraking;
	float WheelMaxDecelForceNonBraking;
	float WheelRadius;
	float WheelSideFrictionDynamic;
	float WheelSideFrictionDynamicThreshold;
	float WheelSideFrictionOmega;
	float WheelSideFrictionStatic;
	float WheelSideFrictionStaticThreshold;
	float WheelSpinniness;
	float WheelSpinParticleMaxRate;
	float WheelSpinParticleMaxThresh;
	float WheelSpinParticleMinRate;
	float WheelSpinParticleMinThresh;
	float WheelStartHeight;
	float WheelSuspensionAnimMax;
	float WheelSuspensionAnimMin;
	float WheelSuspensionDamping;
	float WheelSuspensionForce;
	float WheelSuspensionlength;
	NMS::NMSString0x100 CockpitHeadlightNames[2];
	NMS::NMSString0x100 HeadlightNames[2];
	NMS::NMSString0x100 VolumetricHeadlightNames[2];
	NMS::NMSString0x20 WheelNames[10];
	NMS::NMSString0x20 WheelSuspensionNames[10];
	NMS::NMSString0x80 AudioBoostStart;
	NMS::NMSString0x80 AudioBoostStop;
	NMS::NMSString0x80 AudioHornStart;
	NMS::NMSString0x80 AudioHornStop;
	NMS::NMSString0x80 AudioIdleExterior;
	NMS::NMSString0x80 AudioImpacts;
	NMS::NMSString0x80 AudioJump;
	NMS::NMSString0x80 AudioStart;
	NMS::NMSString0x80 AudioStop;
	NMS::NMSString0x80 AudioSuspension;
	bool CustomCollision;
	bool DriveOnTopOfWater;
	bool LockVehicleAxis;
	bool UseBuggySuspensionHack;
	bool UseRoverWheelHack;
	bool VehicleAudioSwapSkidAndSpeed;
};

//Dependency: GcVehicleType
struct GcVehicleGarageComponentData
{
	NMS_GameComponents::GcVehicleType Vehicle;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkNamedAudioIdArray
struct TkNamedAudioIdArrayTable
{
	std::vector<NMS_Toolkit::TkNamedAudioIdArray> Array;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcVehicleMuzzleData
{
	NMS::NMSString0x10 MuzzleFlashDataID[5];
};

struct GcVehicleRaceInviteComponentData
{
	float Radius;
};

//Dependency: GcVibrationChannelData
struct GcVibrationDataTable
{
	std::vector<NMS_GameComponents::GcVibrationChannelData> Data;
};

struct GcWeightedBuildingSize
{
	float RelativeProbability;
	int32_t SizeX;
	int32_t SizeY;
	int32_t SizeZ;
	bool CreateSymmetricBuilding;
};

//Dependency: GcWeightedResource
//Dependency: NMSString0x20
//Dependency: GcWeightedBuildingSize
//Dependency: GcFreighterBaseRoom
//Dependency: GcMinimumUseConstraint
//Dependency: GcModuleOverride
//Dependency: GcBaseBuildingPartStyle
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct GcWFCBuilding
{
	NMS::VariableSizeString DecorationSet;
	std::vector<int64_t> FallbackSeeds;
	std::vector<NMS::NMSString0x10> GroupsEnabled;
	std::vector<NMS_GameComponents::GcWeightedResource> Layouts;
	std::vector<NMS_GameComponents::GcMinimumUseConstraint> MinimumUseConstraints;
	std::vector<NMS_GameComponents::GcModuleOverride> ModuleOverrides;
	NMS::VariableSizeString ModuleSet;
	std::vector<NMS::NMSString0x10> NPCs;
	std::vector<int64_t> PresetFallbackSeeds;
	std::vector<NMS_GameComponents::GcFreighterBaseRoom> Rooms;
	std::vector<NMS_GameComponents::GcWeightedBuildingSize> Sizes;
	float InitialUnlockProbability;
	int32_t NumberOfPresetsPerPlanet;
	NMS_GameComponents::GcBaseBuildingPartStyle ReplaceMaterials;
	NMS::NMSString0x20 Name;
	bool DontSpawnNearPlayerBases;
	bool ImprovedCoherence;
	bool RemoveUnreachableBlocks;
	bool RequireNoUnreachableRooms;
};

struct GcWFCDecorationTheme
{
	enum class WFCDecorationThemeEnum : uint32_t
	{
		Default = 0,
		Construction = 1,
		Upgrade1 = 2,
		Upgrade2 = 3,
		Upgrade3 = 4,
	};

	NMS_GameComponents::GcWFCDecorationTheme::WFCDecorationThemeEnum WFCDecorationTheme;
};

struct GcWeaponTerminalInteractionData
{
	int32_t RespawnPeriodInSeconds;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: TkLanguages
//Dependency: VariableSizeString
struct TkLanguageFontTableEntry
{
	NMS::VariableSizeString ConsoleFont;
	NMS::VariableSizeString ConsoleFont2;
	NMS::VariableSizeString GameFont;
	NMS::VariableSizeString GameFont2;
	NMS_Toolkit::TkLanguages Language;
};

//Dependency: TkLanguageFontTableEntry
struct TkLanguageFontTable
{
	std::vector<NMS_Toolkit::TkLanguageFontTableEntry> Table;
};

//Dependency: TkLanguages
struct TkLanguagesAllowedData
{
	std::vector<NMS_Toolkit::TkLanguages> Allowed;
	NMS_Toolkit::TkLanguages Fallback;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: GcPlanetWeatherColourData
struct GcWeatherColourSettingList
{
	std::vector<NMS_GameComponents::GcPlanetWeatherColourData> Settings;
};

//Dependency: GcWeatherColourSettingList
struct GcWeatherColourSettings
{
	NMS_GameComponents::GcWeatherColourSettingList PerBiomeSettings[17];
	NMS_GameComponents::GcWeatherColourSettingList DarkSettings;
	NMS_GameComponents::GcWeatherColourSettingList GenericSettings;
};

struct GcWeatherEffectLightningData
{
};

//Dependency: GcWeatherEffect
struct GcWeatherEffectTable
{
	std::vector<NMS_GameComponents::GcWeatherEffect> Effects;
};

//Dependency: TkModelResource
//Dependency: NMSString0x10
struct GcWeatherHazardMeteorData
{
	NMS_Toolkit::TkModelResource ImpactEffect;
	NMS_Toolkit::TkModelResource ImpactExplode;
	NMS_Toolkit::TkModelResource IndicatorDecal;
	NMS_Toolkit::TkModelResource Meteor;
	NMS_Toolkit::TkModelResource StaticDecal;
	NMS::NMSString0x10 DamageID;
	NMS::NMSString0x10 ImpactParticle;
	NMS::NMSString0x10 ShakeID;
	float DamageRadius;
	float DecalFullGrowthProgress;
	float EarliestImpact;
	float EarliestImpactFirstInstance;
	float FlashStartProgress;
	float FullDamageRadius;
	int32_t MaxMeteors;
	float MaxRadius;
	int32_t MinMeteors;
	float MinRadius;
	float NumFlashes;
	float Speed;
	float StormDuration;
};

//Dependency: GcDay
//Dependency: NMSString0x80
struct GcWeeklyRecurrence
{
	NMS_GameComponents::GcDay RecurrenceDay;
	int32_t RecurrenceHour;
	int32_t RecurrenceMinute;
	NMS::NMSString0x80 DebugText;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x80
struct TkNGuiWindowLayoutData
{
	enum class WindowStateEnum : uint32_t
	{
		Open = 0,
		Minimised = 1,
		Closed = 2,
	};

	int32_t ActiveTabIdx;
	float PositionX;
	float PositionXRelative;
	float PositionY;
	float PositionYRelative;
	float ScrollX;
	float ScrollY;
	float Separator;
	float SizeX;
	float SizeXRelative;
	float SizeY;
	float SizeYRelative;
	NMS::NMSString0x80 Tabs[32];
	NMS::NMSString0x80 Name;
	NMS_Toolkit::TkNGuiWindowLayoutData::WindowStateEnum WindowState;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

//Dependency: NMSString0x10
struct GcWeirdCreatureRewardList
{
	NMS::NMSString0x10 Rewards[32];
};

//Dependency: GcWikiPage
//Dependency: GcActionSetType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWikiTopic
{
	NMS::NMSString0x20A MissionButtonText;
	NMS::NMSString0x20A ShortDescriptionID;
	NMS::NMSString0x20A TopicID;
	NMS_Toolkit::TkTextureResource Icon;
	NMS_Toolkit::TkTextureResource NotifyIcon;
	NMS::NMSString0x10 Mission;
	std::vector<NMS_GameComponents::GcWikiPage> Pages;
	NMS_GameComponents::GcActionSetType ActionSet;
	bool Seen;
	bool Unlocked;
};

//Dependency: GcWikiTopic
//Dependency: GcWikiTopicType
//Dependency: TkTextureResource
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
struct GcWikiCategory
{
	NMS::NMSString0x20A CategoryID;
	NMS::NMSString0x20A CategoryIDUpper;
	NMS_Toolkit::TkTextureResource IconOff;
	NMS_Toolkit::TkTextureResource IconOn;
	std::vector<NMS::NMSString0x10> Items;
	std::vector<NMS_GameComponents::GcWikiTopic> Topics;
	NMS_GameComponents::GcWikiTopicType Type;
	int32_t UnlockedCount;
	int32_t UnseenCount;
};

//Dependency: GcWikiCategory
struct GcWiki
{
	std::vector<NMS_GameComponents::GcWikiCategory> Categories;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

//Dependency: NMSString0x20A
struct TkID256Array
{
	std::vector<NMS::NMSString0x20A> Array;
};


} //namespace NMS_Toolkit

namespace NMS_GameComponents
{

struct GcWiringSocketComponentData
{
	bool Value;
};

struct GcWonderWeirdBasePartCategory
{
	enum class WonderWeirdBasePartCategoryEnum : uint32_t
	{
		EngineOrb = 0,
		BeamStone = 1,
		BubbleCluster = 2,
		MedGeometric = 3,
		Shard = 4,
		StarJoint = 5,
		BoneGarden = 6,
		ContourPod = 7,
		HydroPod = 8,
		ShellWhite = 9,
		WeirdCube = 10,
	};

	NMS_GameComponents::GcWonderWeirdBasePartCategory::WonderWeirdBasePartCategoryEnum WonderWeirdBasePartCategory;
};


} //namespace NMS_GameComponents

namespace NMS_Toolkit
{

struct TkAnimDetailSettingsData
{
	float Distance;
	int32_t NumCulledFrames;
	bool DisableAnim;
};

//Dependency: TkAnimDetailSettingsData
struct TkAnimDetailSettings
{
	std::vector<NMS_Toolkit::TkAnimDetailSettingsData> AnimDistanceSettings;
	float AnimLODDistances[3];
	float MaxVisibleAngle;
};

//Dependency: TkAnimDetailSettings
//Dependency: NMSString0x10
struct TkAnimDetailSettingsTable
{
	NMS_Toolkit::TkAnimDetailSettings Table[4];
	NMS::NMSString0x10 Id;
};

//Dependency: TkAnimDetailSettingsTable
struct TkAnimDetailSettingsTables
{
	std::vector<NMS_Toolkit::TkAnimDetailSettingsTable> Tables;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcSpaceshipTravelData
//Dependency: GcPlayerSquadronConfig
//Dependency: GcShipAIPlanetPatrolData
//Dependency: Vector3f
//Dependency: GcAIShipDebugSpawnData
//Dependency: GcProjectileLineData
//Dependency: GcCombatEffectsComponentData
//Dependency: GcShipAIDeathData
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: NMSString0x100
//Dependency: Colour
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcAISpaceshipGlobals
{
	NMS_GameComponents::GcPlayerSquadronConfig PlayerSquadronConfig;
	NMS::Colour AlertLightColour;
	NMS::Colour FreighterDoorColourActive;
	NMS::Colour FreighterDoorColourInactive;
	NMS::Colour FreighterEngineGlowDefaultColour;
	NMS::Vector3f TurretAlertLightOffset;
	NMS::NMSString0x10 ProjectileWeaponMuzzleFlashes[7];
	NMS::NMSString0x10 WarpArriveEffectIDs[7];
	NMS::NMSString0x10 WarpStartEffectIDs[7];
	NMS_GameComponents::GcSpaceshipTravelData AsteroidMiningPositioningTravelData;
	NMS_GameComponents::GcSpaceshipTravelData AsteroidMiningTravelData;
	NMS_GameComponents::GcSpaceshipTravelData FallbackTravelData;
	NMS_GameComponents::GcSpaceshipTravelData OutpostLanding;
	NMS_GameComponents::GcSpaceshipTravelData PlanetLanding;
	NMS_GameComponents::GcSpaceshipTravelData SlowCombatEffectAttackTravel;
	NMS_GameComponents::GcShipAIPlanetPatrolData WingmanPathData;
	std::vector<NMS_GameComponents::GcAIShipDebugSpawnData> DebugShipSpawns;
	NMS::VariableSizeString EnergyShield;
	NMS::NMSString0x10 EnergyShieldDepletedEffect;
	NMS::NMSString0x10 EnergyShieldStartRechargeEffect;
	NMS::NMSString0x10 EnergyShieldStartRechargeFromDepletedEffect;
	NMS::VariableSizeString HangarFilename;
	NMS::VariableSizeString LegacyHangarFilename;
	std::vector<NMS::Vector2f> SpaceBattleGuardsRange;
	std::vector<NMS::Vector2f> SpaceBattlePirateRange;
	std::vector<NMS::Vector2f> SpaceBattleSpawnAngle;
	std::vector<NMS::Vector2f> SpaceBattleSpawnOffset;
	std::vector<NMS::Vector2f> SpaceBattleSpawnPitch;
	std::vector<NMS::Vector2f> SpaceBattleSpawnRange;
	std::vector<NMS::Vector2f> SpaceBattleSunAroundAngle;
	std::vector<NMS::Vector2f> SpaceBattleSunHeightAngle;
	std::vector<NMS::Colour> TradeRouteColours;
	NMS_GameComponents::GcCombatEffectsComponentData CombatEffectsComponentData;
	NMS_GameComponents::GcProjectileLineData ShipBullet;
	NMS_GameComponents::GcShipAIDeathData Death;
	NMS_Toolkit::TkHitCurveData FreighterLightHitCurve;
	NMS::Vector2f ConeSpawnOffsetFactor;
	NMS::Vector2f FreighterMiniSpeeds;
	NMS::Vector2f PirateFreighterAttackRange;
	NMS::Vector2f PoliceSideOffset;
	NMS::Vector2f PoliceUpOffset;
	float AbandonedSystemShipSpawnProbablity;
	float ArrivalStaggerOffset;
	float AsteroidMiningMaxAsteroidRadius;
	float AsteroidMiningMaxMiningTime;
	float AsteroidMiningMaxViewAnglePitch;
	float AsteroidMiningMaxViewAngleYaw;
	float AsteroidMiningMinDistFromPlayer;
	float AsteroidMiningMinMiningAngle;
	float AsteroidMiningMinViewAnglePitch;
	float AsteroidMiningSearchRadius;
	float AsteroidShootAngle;
	float AtmosphereEffectMax;
	float AtmosphereEffectMin;
	float AtmosphereTerminalSpeed;
	float AttackAfterSpawnTime;
	float AttackAimTime;
	float AttackBuildingApproachDistance;
	float AttackBuildingAttackRunDistTolerance;
	float AttackBuildingBugOutDistance;
	float AttackBuildingBugOutSpeedUp;
	float AttackBuildingBugOutTurnUp;
	float AttackBuildingFiringAngleTolerance;
	float AttackBuildingGetThereBoost;
	float AttackBuildingNextRunAngleDeltaMax;
	float AttackBuildingNextRunAngleDeltaMin;
	float AttackBuildingRunAngleMax;
	float AttackBuildingRunAngleMin;
	float AttackBuildingRunStartDistance;
	float AttackBuildingTargetGroundOffsetScaleEnd;
	float AttackBuildingTargetGroundOffsetScaleStart;
	float AttackFreighterAngle;
	float AttackFreighterApproach;
	float AttackFreighterApproachDistance;
	float AttackFreighterAttackRunStartDistance;
	float AttackFreighterBugOutDistance;
	float AttackFreighterButOutSpeedUp;
	float AttackFreighterButOutTurnUp;
	float AttackFreighterGetThereBoost;
	float AttackFreighterRunOffset;
	float AttackFreighterWingmanAlignMinDist;
	float AttackFreighterWingmanAlignRange;
	float AttackFreighterWingmanLock;
	float AttackFreighterWingmanLockAlign;
	float AttackFreighterWingmanMaxForce;
	float AttackFreighterWingmanOffset;
	float AttackFreighterWingmanRadius;
	float AttackFreighterWingmanStart;
	float AttackMinimumTimeBeforeTargetSwitch;
	float AttackRunSlowdown;
	float AttackShipAvoidStartTime;
	float AttackTooCloseMinRelSpeed;
	float BattleSpawnStationMinDistance;
	float BountySpawnAngle;
	float CircleApproachDistance;
	float CollisionRayLengthMax;
	float CollisionRayLengthMin;
	float CollisionReactionTime;
	float ConeSpawnFlattenDown;
	float ConeSpawnFlattenUp;
	float CrashedShipBrokenSlotChance;
	float CrashedShipBrokenTechChance;
	float CrashedShipGeneralCostDiscount;
	int32_t CrashedShipMinNonBrokenSlots;
	float CrashedShipRepairSlotCostIncreaseFactor;
	float CrashedShipTechSlotsCostDiscount;
	float DirectionBrakeThresholdSq;
	float DistanceFlareFlickerAmp;
	float DistanceFlareFlickerFreq;
	float DistanceFlareMaxScale;
	float DistanceFlareMinDistance;
	float DistanceFlareMinScale;
	float DistanceFlareMinSpeed;
	float DistanceFlareRange;
	float DistanceFlareSpeedRange;
	float DockingLandingBounceHeight;
	float DockingLandingBounceTime;
	float DockingLandingTime;
	float DockingLandingTimeDirectional;
	float DockingRotateSpeed;
	float DockingRotateStartTime;
	float DockingSpringTime;
	float DockingWaitDistance;
	float DockWaitMaxTime;
	float DockWaitMinTime;
	float EnergyShieldFadeInRate;
	float EnergyShieldFadeMinOpacityInCombat;
	float EnergyShieldFadeNonPlayerHitOpacity;
	float EnergyShieldFadeOutRate;
	float EnergyShieldFreighterFadeMinOpacityInCombat;
	float EngineFireSize;
	float EngineFlareAccelMax;
	float EngineFlareAccelMin;
	float EngineFlareOffset;
	float EngineFlareSizeMax;
	float EngineFlareSizeMin;
	float EngineFlareVibrateAmp;
	float EngineFlareVibrateFreq;
	float EscapeRoll;
	float EscapeRollPlanet;
	float EscapeRollTime;
	float EscapeRollTimePlanet;
	float FinalDeathExplosionScale;
	float FinalDeathExplosionTime;
	float FinalDeathFadeTime;
	int32_t FlybyCloseOdds;
	float FlybyHeight;
	float FlybyLength;
	float FlybyOffset;
	float FlybyPlanetLandingProbability;
	float FreighterAlertLightCapitalSize;
	float FreighterAlertLightIntensity;
	float FreighterAlertLightTime;
	float FreighterAlertThreshold;
	float FreighterAlertTimeOutMinTime;
	float FreighterAlertTimeOutRate;
	float FreighterAttackAlertThreshold;
	float FreighterAttackDisengageDistance;
	float FreighterImpactScale;
	float FreighterLaunchStartTime;
	float FreighterLaunchTime;
	int32_t FreighterMaxNumLaunchedShips;
	float FreighterRegisterHitCooldown;
	float FreighterScale;
	float FreighterShipLaunchSpeed;
	float FreighterSpawnMargin;
	float FreighterSpawnRadius;
	float FreighterSpawnRate;
	float FreighterSpawnViewAngle;
	float FreighterSpawnVisibleFreightersDistance;
	float FrigateSpawnMargin;
	float GroundCircleHeight;
	float GroundCircleHeightMax;
	float HeightTestSampleDistance;
	float HeightTestSampleTime;
	float LandingDirectionalHoverPointReachedDistance;
	float LandingHoverPointReachedDistance;
	float LandingLongTipAngle;
	float LandingManeuvreAlignTime;
	float LandingManuevreTime;
	float LandingTipAngle;
	float LaserHitOffset;
	float MaxDifficultySpaceCombatSpeedExtra;
	float MaxDifficultySpaceCombatTurnExtra;
	int32_t MaxNumActivePolice;
	float MaxNumActivePoliceRadius;
	float MaxNumActiveTraderRadius;
	int32_t MaxNumActiveTraders;
	int32_t MaxNumFreighters;
	int32_t MaxNumTurretMissiles;
	float MaxTorque;
	int32_t MinAggroDamage;
	float MinimumCircleTimeBeforeLanding;
	float MinimumTimeBetweenOutpostLandings;
	float MinLaserFireTime;
	float MissileLaunchSpeed;
	float MissileRange;
	float MoveAvoidRange;
	float MoveHeightAdjust;
	float MoveHeightCheckTime;
	int32_t MoveHeightNumSamples;
	float MoveHeightSampleSectionSize;
	float OrbitHeight;
	float OutpostDockAIApproachSpeedForce;
	float OutpostDockAIGetToApproachBrakeForce;
	float OutpostDockAIGetToApproachForce;
	float OutpostDockApproachDistance;
	float OutpostDockApproachRenderFlickerOffset;
	float OutpostDockApproachRenderRadius;
	float OutpostDockApproachSpeedForce;
	float OutpostDockApproachSpeedUpDamper;
	float OutpostDockApproachUpAmount;
	float OutpostDockGetToApproachBrakeForce;
	float OutpostDockGetToApproachExtraBrakeForce;
	float OutpostDockGetToApproachForce;
	float OutpostDockMaxApproachSpeed;
	float OutpostDockMaxForce;
	float OutpostDockMaxTipLength;
	float OutpostDockMinTipLength;
	float OutpostDockOverspeedBrake;
	float OutpostDockUpAlignMaxAngle;
	float OutpostDockUpAlignMaxAngleFirstPerson;
	float OutpostLandingNoiseAmp;
	float OutpostLandingNoiseFreq;
	float OutpostLandingNoiseOffset;
	float OutpostToLandingDistance;
	float PirateArriveTime;
	float PirateBattleInterestTime;
	float PirateBattleMaxTime;
	float PirateBattleStartSpeed;
	float PirateExtraDamage;
	float PirateFlybyLength;
	float PirateFreighterBattleDistance;
	float PirateFreighterSpawnAttackAngle;
	float PirateFreighterSpawnAttackOffset;
	float PirateFreighterSpawnAttackSpread;
	float PirateFreighterWarpOffset;
	float PirateInterestTime;
	float PirateMaintainBuildingTargetTime;
	float PiratePlayerAttackRange;
	float PirateSpawnAngle;
	float PirateSpawnSpacing;
	float PirateStartSpeed;
	float PitchFlip;
	float PlanetaryPirateHostileShipPerceptionRange;
	float PlanetaryPirateRaidFocusBuildingsTime;
	int32_t PlanetaryPirateRaidMaxTradersJoinCombat;
	float PlanetaryPirateRaidTradersEngageTime;
	float PlanetUpAlignTime;
	float PoliceAbortRange;
	float PoliceArriveTime;
	float PoliceEntranceCargoAttackWaitTime;
	float PoliceEntranceCargoOpenCommsWaitTime;
	float PoliceEntranceCargoProbingTime;
	float PoliceEntranceCargoScanHailNotificationWaitTime;
	float PoliceEntranceCargoScanStartTime;
	float PoliceEntranceEscalateIncomingTime;
	float PoliceEntranceEscalateProbingTime;
	float PoliceEntranceProbe;
	float PoliceEntranceStartTime;
	float PoliceEscapeMinTime;
	float PoliceEscapeTime;
	float PoliceFreighterLaserActiveTime;
	float PoliceFreighterLaserRandomExtraPauseMax;
	float PoliceFreighterLaserRange;
	float PoliceFreighterLaserShootTime;
	int32_t PoliceFreighterProjectileBurstCount;
	float PoliceFreighterProjectileBurstTime;
	int32_t PoliceFreighterProjectileModulo;
	float PoliceFreighterProjectilePauseTime;
	float PoliceFreighterProjectileRandomExtraPauseMax;
	float PoliceFreighterProjectileRange;
	float PoliceFreighterWarpOutRange;
	float PoliceLaunchDistance;
	float PoliceLaunchSpeed;
	float PoliceLaunchTime;
	int32_t PoliceNumPerTarget;
	float PolicePauseTime;
	float PolicePauseTimeSpaceBattle;
	float PoliceSpawnViewAngle;
	float PoliceStationEngageRange;
	int32_t PoliceStationNumToLaunch;
	float PoliceStationWaveTimer;
	float PoliceWarnBeaconPulseTime;
	float RewardLootAngularSpeed;
	float RewardLootOffset;
	float RewardLootOffsetSpeed;
	float RollAmount;
	float RollMinTurnAngle;
	float SalvageRemovalTime;
	float SalvageTime;
	float SalvageValueMultiplier;
	float ScaleHeightMax;
	float ScaleHeightMin;
	float Scaler;
	float ScalerMaxDist;
	float ScalerMinDist;
	float ScaleTime;
	float SentinelGunBrokenSlotChance;
	float ShieldCollisionRadiusMultiplier;
	float ShipAlertPirateRange;
	float ShipAngularFactor;
	float ShipEscapeTimeBeforeWarpOut;
	float ShipEscortBackForceTime;
	float ShipEscortForwardOffsetScaleMax;
	float ShipEscortForwardOffsetScaleMin;
	float ShipEscortFwdForceTime;
	float ShipEscortLockOnDistance;
	float ShipEscortPerpForceTime;
	float ShipEscortRadialOffsetScaleMax;
	float ShipEscortRadialOffsetScaleMin;
	float ShipEscortVelocityBand;
	float ShipEscortVelocityBandForce;
	float ShipSpawnAnomalyRadius;
	float ShipSpawnStationRadius;
	float SpaceBattleFlybyTime;
	float SpaceBattleGuardOffset;
	float SpaceBattleGuardUpOffset;
	float SpaceBattleInitialPirateOffset;
	float SpaceBattleInitialPirateUpOffset;
	float SpaceBattleObstructionRadius;
	float SpaceStationTraderRequestTime;
	float TakeOffExitHeightOffset;
	float TakeOffExtraAIHeight;
	float TakeOffHoverPointReachedDistance;
	float TraderArriveSpeed;
	float TraderArriveTime;
	float TraderAtTime;
	float TraderAtTimeBack;
	int32_t TraderIgnoreHits;
	int32_t TradeRouteDivisions;
	float TradeRouteFlickerAmp;
	float TradeRouteFlickerFreq;
	float TradeRouteFollowOffset;
	int32_t TradeRouteMaxNum;
	float TradeRouteSeekOutpostRange;
	float TradeRouteSlowRange;
	float TradeRouteSlowSpeed;
	float TradeRouteSpawnDistance;
	float TradeRouteSpeed;
	float TradeRouteStationRadius;
	float TradeRouteTrailDrawDistance;
	float TradeRouteTrailFadeTime;
	float TradeRouteTrailTimeOffset;
	float TraderPerpTime;
	float TraderPostCombatRequestTime;
	float TraderRequestTime;
	float TraderVelocityBand;
	float TraderVelocityBandForce;
	float TraderWantedTime;
	float TradingPostTraderRange;
	float TradingPostTraderRangeSpace;
	float TradingPostTraderRequestTime;
	float TrailLandingFadeTime;
	float TrailScale;
	float TrailScaleFreighterMaxScale;
	float TrailScaleMaxScale;
	float TrailScaleMinDistance;
	float TrailScaleRange;
	float TrailSpeedFadeFalloff;
	float TrailSpeedFadeMinSpeed;
	float TravelMinBoostTime;
	float TurretAlertLightIntensity;
	float TurretOriginOffset;
	float TurretRandomAIShipOffset;
	float TurretRandomOffset;
	float VisibleDistance;
	float WarpFadeInTime;
	float WarpForce;
	float WarpInAudioFXDelay;
	float WarpInDistance;
	float WarpInPlayerLocatorMinOffset;
	float WarpInPlayerLocatorTime;
	float WarpInPostSpeed;
	float WarpInPostSpeedFreighter;
	float WarpInTime;
	float WarpInTimeFreighter;
	float WarpInVariance;
	float WarpOutDistance;
	float WarpSpeed;
	float WingmanAlign;
	float WingmanAtTime;
	float WingmanAtTimeBack;
	float WingmanHeightAdjust;
	float WingmanLockArriveTime;
	float WingmanLockBetweenTime;
	float WingmanLockDistance;
	float WingmanMinHeight;
	float WingmanOffset;
	float WingmanOffsetStart;
	float WingmanPerpTime;
	float WingmanRotate;
	float WingmanSideOffset;
	float WingmanStartTime;
	float WingmanVelocityBand;
	float WingmanVelocityBandForce;
	float WitnessHearingRange;
	float WitnessSightAngle;
	float WitnessSightRange;
	NMS::NMSString0x100 TradeRouteIcon;
	bool PirateAttackableBuildingClasses[60];
	bool AtmosphereEffectEnabled;
	bool AttackRepositionBoost;
	bool AttackShipsFollowLeader;
	bool DisableTradeRoutes;
	bool DisplayShipAttackTypes;
	bool EnableLoot;
	bool EnergyShieldAlwaysVisible;
	bool EnergyShieldsEnabled;
	bool FillUpOutposts;
	bool FreighterAlertLights;
	bool FreighterIgnorePlayer;
	bool FreightersAlwaysAttackPlayer;
	bool FreightersSamePalette;
	bool GroundEffectEnabled;
	bool PoliceSpawnEffect;
	bool ScaleDisabledWhenOnFreighter;
	bool TradersAttackPirates;
	NMS_Toolkit::TkCurveType TrailScaleCurve;
	NMS_Toolkit::TkCurveType WarpInCurve;
};

//Dependency: GcCameraShakeData
//Dependency: GcScanEffectData
//Dependency: GcSpookFiendSpawnData
//Dependency: GcCreatureFoodList
//Dependency: GcWeirdCreatureRewardList
//Dependency: Vector2f
//Dependency: GcCreatureSubstanceList
//Dependency: GcCreatureAlertData
//Dependency: GcCreatureHarvestSubstanceList
//Dependency: GcFlyingSnakeData
//Dependency: GcPetBehaviours
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct GcCreatureGlobals
{
	NMS_GameComponents::GcCameraShakeData PainShake;
	NMS_GameComponents::GcScanEffectData PetOffPlanetEffect;
	NMS::Colour AllCreaturesDiscoveredColour;
	NMS::Colour JellyBossBroodIdleColour;
	NMS::Colour JellyBossBroodProximityWarningColour;
	NMS::Colour JellyBossIdleColour;
	NMS::Colour JellyBossProjectileAttackWarningColour;
	NMS::Colour JellyBossSpawnBroodWarningColour;
	NMS::Colour PetInteractionLightColour;
	NMS::Colour PetRadialBadColour;
	NMS::Colour PetRadialBoostColour;
	NMS::Colour PetRadialGoodColour;
	NMS::Colour PetRadialNeutralColour;
	NMS::Colour PetThrowArcColour;
	NMS::Colour SpookFiendAggressiveColour;
	NMS::Colour SpookFiendKamikazeColour;
	NMS::Colour SpookFiendPassiveColour;
	NMS::Colour SpookFiendSpitColour;
	NMS::NMSString0x20A WeirdBiomeDescriptions[32];
	NMS::NMSString0x20A BiomeAirDescriptions[17];
	NMS::NMSString0x20A BiomeDescriptions[17];
	NMS::NMSString0x20A BiomeWaterDescriptions[17];
	NMS::NMSString0x20A DietMeat[17];
	NMS::NMSString0x20A DietVeg[17];
	NMS::NMSString0x20A PetBiomeClimates[17];
	NMS_GameComponents::GcWeirdCreatureRewardList WeirdKillingRewards;
	NMS::NMSString0x20A Temperments[11];
	NMS::NMSString0x20A Diets[4];
	NMS::NMSString0x20A WaterDiets[4];
	NMS::NMSString0x20A CreatureFilter;
	NMS::NMSString0x20A PetCarePuzzleOverrideID;
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	NMS::NMSString0x10 AlienShipQuestCreatureWeapon;
	NMS::NMSString0x10 AlienShipQuestKillingSubstance;
	NMS::NMSString0x10 BasicFeedingProduct;
	std::vector<NMS_GameComponents::GcCreatureFoodList> CarnivoreFeedingProducts;
	NMS::NMSString0x10 CreatureDeathEffectBig;
	NMS::NMSString0x10 CreatureDeathEffectMedium;
	NMS::NMSString0x10 CreatureDeathEffectSmall;
	NMS::NMSString0x10 CreatureHugeRunShake;
	NMS::NMSString0x10 CreatureHugeWalkShake;
	NMS::NMSString0x10 CreatureLargeRunShake;
	NMS::NMSString0x10 CreatureLargeWalkShake;
	NMS::GcSeed CreatureSeed;
	NMS::NMSString0x10 DefaultKillingSubstance;
	NMS::NMSString0x10 FishDeathEffect;
	std::vector<NMS_GameComponents::GcCreatureHarvestSubstanceList> HarvestingProducts;
	std::vector<NMS_GameComponents::GcCreatureFoodList> HerbivoreFeedingProducts;
	NMS::NMSString0x10 HorrorPetFeedingProduct;
	std::vector<NMS_GameComponents::GcCreatureSubstanceList> KillingProducts;
	std::vector<NMS::NMSString0x10> KillingSubstances;
	std::vector<NMS::NMSString0x10> LootItems;
	NMS::VariableSizeString PetEggHatchResourceFile;
	NMS::NMSString0x10 PetEggMaxChangeProduct;
	NMS::VariableSizeString PetEggResourceFile;
	NMS::NMSString0x10 PetEggsplosionEffect;
	NMS::NMSString0x10 PetScan;
	NMS::NMSString0x10 RobotFeedingProduct;
	std::vector<float> RockTransformChanceModifiers;
	std::vector<NMS_GameComponents::GcSpookFiendSpawnData> SpookFiendsSpawnData;
	NMS_GameComponents::GcFlyingSnakeData FlyingSnakeData;
	float SpherePusherOffset[4];
	float SpherePusherRadiusMul[4];
	float SpherePusherWeight[4];
	NMS::Vector2f JellyBossBroodMaxChaseTime;
	NMS::Vector2f SpookFiendsSpawnTimer;
	float AdultBabyKilledNoticeDistance;
	float AdultCorrelationValue;
	float AlertDistance;
	int32_t AllCreaturesDiscoveredBonusMul;
	float AngryRockProportionNormal;
	float AngryRockProportionSurvival;
	float AnimationStickToGroundSpeed;
	float AnimChangeCoolDown;
	float AsteroidCreatureRichSystemSpawnPercent;
	float AsteroidCreatureSpawnPercentOverride;
	float AttackPlayerDistance;
	float AttractedMaxAvoidCreaturesDist;
	float AttractedMaxAvoidCreaturesStrength;
	float AttractedMinAvoidCreaturesDist;
	float AttractedMinAvoidCreaturesStrength;
	float AttractMinDistance;
	float AvoidCreaturesWeight;
	float AvoidImpassableWeight;
	float BadTurnPercent;
	float BadTurnWeight;
	float BaseAndTerrainModImpassableStrength;
	float BrakingForce;
	float BrakingForceY;
	int32_t BugFiendHealth;
	int32_t BugQueenHealth;
	float BugQueenSpitballExplosionRadius;
	float BugQueenSpitballSpeed;
	int32_t BugQueenSpitCount;
	float BugQueenSpitRadius;
	float CreatureBlobRidingHugeMinSize;
	float CreatureBlobRidingLargeMinSize;
	float CreatureBlobRidingMedMinSize;
	float CreatureBrakeForce;
	int32_t CreatureHarvestAmountHuge;
	int32_t CreatureHarvestAmountLarge;
	int32_t CreatureHarvestAmountMed;
	int32_t CreatureHarvestAmountSmall;
	float CreatureHearingRange;
	int32_t CreatureHugeHealth;
	float CreatureHugeMinSize;
	float CreatureHugeRunMaxShakeDist;
	float CreatureHugeWalkMaxShakeDist;
	float CreatureIndoorSpeedMultiplier;
	float CreatureInteractBaseRange;
	float CreatureInteractionRangeBoostHuge;
	float CreatureInteractionRangeBoostLarge;
	float CreatureInteractionRangeBoostMedium;
	float CreatureInteractionRangeBoostRun;
	float CreatureInteractionRangeBoostSmall;
	float CreatureInteractionRangeBoostSprint;
	float CreatureInteractionRangeReducePredator;
	int32_t CreatureKillRewardAmountFiend;
	int32_t CreatureKillRewardAmountHuge;
	int32_t CreatureKillRewardAmountLarge;
	int32_t CreatureKillRewardAmountMed;
	int32_t CreatureKillRewardAmountSmall;
	int32_t CreatureLargeHealth;
	float CreatureLargeMinSize;
	float CreatureLargeRunMaxShakeDist;
	float CreatureLargeWalkMaxShakeDist;
	float CreatureLookBeforeFleeingIfShotTime;
	float CreatureLookBeforeFleeingTime;
	float CreatureLookBeforeGoingTime;
	float CreatureLookPlayerForceLookTime;
	float CreatureLookScaryThingTime;
	int32_t CreatureMedHealth;
	float CreatureMedMinSize;
	float CreatureMinAlignSpeed;
	float CreatureMinAnimMoveSpeed;
	float CreatureMinRunTime;
	float CreatureMoveIdle;
	float CreatureRidingHugeMinSize;
	float CreatureRidingLargeMinSize;
	float CreatureRidingMedMinSize;
	float CreatureScaleMangle;
	float CreatureSightRange;
	int32_t CreatureSmallHealth;
	float CreatureSpeedMultiplier;
	float CreatureTurnMax;
	float CreatureTurnMin;
	float CreatureUpdateRateMultiplier;
	float CreatureWaryTime;
	float DefaultRunMoveSpeed;
	float DefaultTrotMoveSpeed;
	float DefaultWalkMoveSpeed;
	float DelayAfterRespawnBeforeAttackable;
	float DespawnDistFactor;
	float DetailAnimBlendInTime;
	float DetailAnimBlendOutTime;
	float DetailAnimMaxPauseTime;
	float DetailAnimMinPauseTime;
	float DroneExplodeRadius;
	float EdgeClosenessPenalty;
	float ExtraFollowFreq1;
	float ExtraFollowFreq2;
	float ExtraFollowStrength;
	float FadeDistance;
	float FadeScaleMultiplier;
	float FadeScalePower;
	float FastSwimSpeed;
	float FeedingFollowTime;
	float FeedingNoticeDistance;
	float FeedingNoticeTime;
	int32_t FeedingTaskAmount;
	float FiendAggroDecreasePerSpawn;
	float FiendAggroIncreaseDamageEgg;
	float FiendAggroIncreaseDestroyEgg;
	float FiendAggroTime;
	float FiendBeingShotMemoryTime;
	float FiendCritAreaSize;
	float FiendDespawnDistance;
	float FiendDistReduceForBeingShot;
	float FiendDistToConsiderTargetSwtich;
	int32_t FiendEggsToUnlockSpit;
	int32_t FiendHealth;
	float FiendHealthLevelMul;
	int32_t FiendMaxAttackers;
	int32_t FiendMaxEngaged;
	float FiendMaxSpawnTime;
	float FiendMaxVerticalForPounce;
	float FiendMinSpawnTime;
	float FiendPerceptionDistance;
	float FiendPounceDistanceModifier;
	float FiendReplicateEndDistance;
	float FiendReplicateStartDistance;
	float FiendSpawnDistance;
	float FiendZigZagSpeed;
	float FiendZigZagStrength;
	float FishBobAmplitude;
	float FishBobFrequency;
	float FishDesiredDepth;
	float FishFiendBigBoostStrength;
	float FishFiendBigBoostTime;
	int32_t FishFiendBigHealth;
	float FishFiendBigScale;
	float FishFiendSmallBoostStrength;
	float FishFiendSmallBoostTime;
	int32_t FishFiendSmallHealth;
	float FishFiendSmallScale;
	float FishMinHeightAboveSeaBed;
	float FishObstacleAvoidStrength;
	float FishPlayerAttractionAhead;
	float FishPlayerAttractionFrontDist;
	float FishPlayerAttractionMaxDist;
	float FishPlayerAttractionMinDist;
	float FishPlayerAttractionStrength;
	float FishPredatorChargeDist;
	float FishPredatorChargeDistScale;
	float FishSeaBedAvoidStrength;
	float FishWaterSurfaceAnticipate;
	float FishWaterSurfaceAvoidStrength;
	float FloaterObstacleAvoidStrength;
	float FloaterSteeringRayLength;
	float FloaterSteeringRaySphereSize;
	float FloaterSteeringRaySpread;
	float FloaterSurfaceAnticipate;
	float FloaterSurfaceAvoidStrength;
	float FlowFieldWeight;
	float FollowLeaderAlignWeight;
	float FollowLeaderCohereWeight;
	float FollowPlayerDistance;
	float FollowRange;
	float FollowRunPlayerDistance;
	float FollowWeight;
	float FootDustGroundTintStrength;
	float FootParticleTime;
	float FootPlantError;
	float FreighterDespawnDist;
	float FreighterJellyBobAmplitude;
	float FreighterJellyBobFrequency;
	float FreighterSpawnDist;
	int32_t FriendlyCreatureLimit;
	float GroundWormScaleMax;
	float GroundWormScaleMin;
	float GroundWormSpawnChance;
	float GroundWormSpawnerActivateRadius;
	float GroundWormSpawnerDestroyRadiusActive;
	float GroundWormSpawnerDestroyRadiusInactive;
	int32_t GroundWormSpawnMax;
	int32_t GroundWormSpawnMin;
	float GroundWormSpawnRadius;
	float GroundWormSpawnSpacing;
	float GroundWormSpawnTimeOut;
	float GroupBabyHealthMultiplier;
	float GroupBabyProportion;
	float GroupBabyRunProbability;
	float GroupBabyScale;
	float GroupFemaleProportion;
	float GroupLookAtDurationMax;
	float GroupLookAtDurationMin;
	float GroupLookAtProbability;
	float GroupRunDurationMax;
	float GroupRunDurationMin;
	float GroupRunProbability;
	float GroupRunStormProbability;
	float HarvestCooldownMax;
	float HarvestCooldownMin;
	float HeightDiffPenalty;
	float HeightLookAhead;
	float HerdGroupSizeMultiplier;
	float ImpassabilityBrakeTime;
	float ImpassabilityTurnSpeedMultiplier;
	float ImpassabilityUnbrakeTime;
	float IndoorObstacleAvoidStrength;
	float IndoorSteeringRayLength;
	float IndoorSteeringRaySphereSize;
	float IndoorSteeringRaySpread;
	float IndoorTurnTime;
	float InfluenceDeflect;
	float InfluenceForce;
	float InfluenceRadius;
	float InfluenceThreshold;
	float JellyBossBroodColourInterpTime;
	float JellyBossBroodSeparateTime;
	float JellyBossBroodWarningRadius;
	float JellyBossColourInterpTime;
	float JellyBossFastSwimSpeed;
	float JellyBossLandAnticipate;
	float JellyBossLandAvoidStrength;
	float LargeCreatureAvoidPlayerDistance;
	float LargeCreatureFleePlayerDistance;
	float largeCreaturePerceptionDistance;
	float LookMaxPitchWhenMoving;
	float LookMaxYawMoving;
	float LookMaxYawStatic;
	float LookPitchAtMaxYaw;
	float LookRollAtMaxYaw;
	float LookRollWhenMoving;
	float LowPerfFlockReduce;
	int32_t MaxAdditionalEcosystemCreaturesForDiscovery;
	float MaxBirdsProportion;
	float MaxCreatureSize;
	int32_t MaxEcosystemCreaturesLow;
	int32_t MaxEcosystemCreaturesNormal;
	float MaxFade;
	int32_t MaxFiendsToSpawn;
	int32_t MaxFiendsToSpawnCarnage;
	int32_t MaxFishFiends;
	float MaxForce;
	float MaxHeightTime;
	int32_t MaxRagdollsBeforeDespawnOffscreen;
	int32_t MaxRagdollsBeforeDespawnOnscreen;
	float MaxRideLeanCounterRotate;
	float MaxSpeed;
	float MaxTorque;
	float MaxTurnRadius;
	float MinFade;
	float MiniDroneEnergyRecoverRate;
	float MiniDroneEnergyUsePerShot;
	float MiniDroneShotDelay;
	float MiniDroneShotMaxAngle;
	float MiningRandomProbability;
	float MinRideSize;
	float MinScaleForNavMap;
	float MinWaterSpawnDepth;
	float NavMapLookAhead;
	int32_t NumCreaturesRequiredForDiscoveryMission;
	int32_t NumWeirdCreaturesRequiredForDiscoveryMission;
	float PassiveFleePlayerDistance;
	float PathOverestimate;
	float PatrolGradientFactor;
	float PatrolHeightOffset;
	float PatrolMaxDist;
	float PatrolMinDist;
	float PatrolSwitchMinTime;
	int32_t PauseBetweenCreatureSpawnRequests;
	float PelvisIkStrength;
	float PercentagePlayerPredators;
	int32_t PerceptionUpdateRate;
	float PetAccessoryMoodDisplayThreshold;
	float PetAccessoryStateInterval;
	float PetAnimSpeedBoostSmallerThan;
	float PetAnimSpeedBoostStrength;
	float PetAnimSpeedMax;
	float PetAnimSpeedMin;
	float PetChatCooldown;
	float PetChatUseTraitTemplateChance;
	float PetEffectSpawnOffsetHuge;
	float PetEffectSpawnOffsetLarge;
	float PetEffectSpawnOffsetMed;
	float PetEffectSpawnOffsetSmall;
	float PetEggAccessoryChanceModifier;
	float PetEggColourChanceModifier;
	int32_t PetEggFirstEggDelay;
	float PetEggHatchColourChangeChance;
	float PetEggHatchOffset;
	float PetEggHatchScale;
	float PetEggHatchScaleChange;
	float PetEggHatchTraitChange;
	float PetEggLayingDuration;
	int32_t PetEggLayingInterval;
	float PetEggMaxAccessoriesChangeChance;
	float PetEggMaxColourChangeChance;
	float PetEggMaxDistStep;
	float PetEggMaxHungry;
	float PetEggMaxLonely;
	float PetEggMaxOverdosage;
	float PetEggMaxTopDescriptorChangeChance;
	float PetEggMinDistStep;
	float PetEggMinGrowthToLay;
	int32_t PetEggModificationItemLimit;
	int32_t PetEggModificationTime;
	float PetEggOverdosageModifier;
	float PetEggScaleRangeMax;
	float PetEggScaleRangeModifier;
	float PetEggSubstanceModifier;
	float PetEggTraitRangeMax;
	float PetEggTraitRangeModifier;
	float PetFollowRange;
	float PetFollowRunPlayerDistance;
	float PetFootShakeModifier;
	NMS_GameComponents::GcPetBehaviours PetForceBehaviour;
	int32_t PetGrowthTime;
	float PetHeartChangePerLayer;
	float PetHeartMaxSize;
	float PetHeartResponseLoopTime;
	float PetHeartResponseTotalTime;
	float PetHeelDistSwitchTimeMax;
	float PetHeelDistSwitchTimeMin;
	float PetHeelLateralShiftTimeMax;
	float PetHeelLateralShiftTimeMin;
	float PetHeelPosSpringTime;
	int32_t PetIncubationTime;
	float PetInteractBaseRange;
	float PetInteractionLightHeight;
	float PetInteractionLightIntensityMax;
	float PetInteractionLightIntensityMin;
	float PetInteractTurnToFaceMinAngle;
	float PetLastActionReportTime;
	float PetMaxSizeOffPlanet;
	float PetMaxSummonDistance;
	float PetMaxTurnRad;
	float PetMinSummonDistance;
	float PetMinTrust;
	float PetMinTurnRad;
	float PetMoodCurvePower;
	float PetMoodSmoothTime;
	float PetNavRadForMaxTurn;
	float PetNavRadForMinTurn;
	float PetOrderMaxRange;
	float PetOrderMinRange;
	float PetPlayerSpeedSmoothTime;
	float PetRadialCentre;
	float PetRadialPulseMul;
	float PetRadialPulseTime;
	float PetRadialRadius;
	float PetRadialWidth;
	float PetRunAtHeelDistMax;
	float PetRunAtHeelDistMin;
	float PetRunAtHeelLateralShiftMax;
	float PetRunAtHeelLateralShiftMin;
	int32_t PetSlotsUnlockedByDefault;
	float PetStickySideBiasAngle;
	float PetSummonRotation;
	float PetTeleportDistOffPlanet;
	float PetTeleportDistOnPlanet;
	float PetTeleportEffectTime;
	float PetThrowArcRange;
	float PetTickleChatChance;
	float PetTreatChatChance;
	int32_t PetTrustChangeInterval;
	float PetTrustDecreaseStep;
	float PetTrustDecreaseThreshold;
	float PetTrustIncreaseStep;
	float PetTrustIncreaseThreshold;
	float PetTrustOnAdoption;
	float PetTrustOnHatch;
	float PetWalkAtHeelChanceDevoted;
	float PetWalkAtHeelChanceIndependent;
	float PetWalkAtHeelDistMax;
	float PetWalkAtHeelDistMin;
	float PetWalkAtHeelLateralShift;
	float PlayerBirdDistance;
	float PlayerDamageTransferScale;
	float PlayerPredatorBoredomDistance;
	float PlayerPredatorHealthModifier;
	float PlayerPredatorRegainInterestTime;
	float PostRideMoveTime;
	float PredatorApproachTime;
	float PredatorBoredomDistance;
	float PredatorChargeDist;
	float PredatorChargeDistScale;
	float PredatorEnergyRecoverRate;
	float PredatorEnergyUseChasing;
	float PredatorFishPerceptionDistance;
	int32_t PredatorHugeHealth;
	int32_t PredatorLargeHealth;
	int32_t PredatorMedHealth;
	float PredatorNoticePauseTime;
	float PredatorPerceptionDistance;
	float PredatorRegainInterestTime;
	float PredatorRoarProbAfterHit;
	float PredatorRoarProbAfterMiss;
	float PredatorRunAwayDist;
	float PredatorRunAwayHealthPercent;
	float PredatorRunMoveSpeed;
	int32_t PredatorSmallHealth;
	float PredatorSpeedMultiplier;
	float PredatorStealthDist;
	float PredatorTrotMoveSpeed;
	float PredatorWalkMoveSpeed;
	float QueenHealthLevelMul;
	float RagdollConeLimit;
	float RagdollDamping;
	float RagdollMotorFadeEnd;
	float RagdollMotorFadeStart;
	float RagdollTau;
	float RagdollTwistLimit;
	float RecoverHealthTime;
	float RemoteSpawnFadeInDelay;
	float RepelAmount;
	float RepelRange;
	float ResourceSpawnTime;
	float RideIdleTime;
	float RiderLeanTime;
	float RideSpeedChangeTime;
	float RideSpeedFast;
	float RideSpeedSlow;
	float RidingFirstPersonOffsetFwd;
	float RidingFirstPersonOffsetUp;
	float RidingReplicationRangeMultiplier;
	float RidingRollAdjustMaxAngle;
	float RidingRollMaxAngleAt;
	float RidingSteerWeight;
	float RockTransformGlobalChance;
	float RoutineOffset;
	float RoutineSpeed;
	float SandWormChangeDirectionTime;
	float SandWormDespawnDist;
	float SandWormJumpHeight;
	float SandWormJumpTime;
	float SandWormMaxHeightAdjust;
	int32_t SandWormMaxJumps;
	float SandWormMaxSteer;
	float SandWormSpawnChanceInfested;
	float SandWormSpawnChanceMax;
	float SandWormSpawnChanceMin;
	float SandWormSpawnTimer;
	float SandWormSteerAdjustTime;
	float SandWormSubmergeDepth;
	float SandWormSubmergeTime;
	float SandWormSurfaceTime;
	float SceneTerrainSpawnMinDistance;
	int32_t ScuttlerHealth;
	float ScuttlerIdleTimeMax;
	float ScuttlerIdleTimeMin;
	float ScuttlerInitialNoAttackTime;
	float ScuttlerMoveTimeMax;
	float ScuttlerMoveTimeMin;
	float ScuttlerSpitChargeTime;
	float ScuttlerSpitDelay;
	float ScuttlerZigZagStrength;
	float ScuttlerZigZagTimeMax;
	float ScuttlerZigZagTimeMin;
	float SearchItemDistance;
	float SearchItemFrequency;
	float SearchItemGiveUpDistance;
	float SearchItemGiveUpTime;
	float SearchItemNotifyTime;
	float SearchSpawnRandomItemProbability;
	float SharkAlignSpeed;
	float SharkAlongPathSpeed;
	float SharkAttackAccel;
	float SharkAttackSpeed;
	float SharkGetToPathSpeed;
	float SharkPatrolEnd;
	float SharkPatrolRadius;
	float SharkPatrolSpeed;
	float SharkToPathYDamp;
	float ShieldFadeTime;
	float SmallCreatureAvoidPlayerDistance;
	float SmallCreatureFleePlayerDistance;
	float SmallCreaturePerceptionDistance;
	float SoftenAvoidanceRadiusMod;
	float SpawnCameraAngleCos;
	float SpawnDistanceModifierForUnderwater;
	float SpawnDistAtMaxSize;
	float SpawnDistAtMinSize;
	float SpawnMinDistPercentage;
	float SpawnOnscreenDist;
	float SpawnsAvoidBaseMultiplier;
	int32_t SpookBossHealth;
	float SpookFiendColourInterpTime;
	float SpookFiendFastSwimSpeed;
	int32_t SpookSquidHealth;
	float SteeringUpdateRate;
	float StickToGroundCastBegin;
	float StickToGroundCastEnd;
	float StickToGroundSpeed;
	float SwarmBrakingForce;
	float SwarmMoveYFactor;
	float TargetReachedDistance;
	float TargetSearchTimeout;
	float TrailHalfLife;
	float TurnInPlaceIdleTime;
	float TurnInPlaceMaxAngle;
	float TurnInPlaceMaxSpeed;
	float TurnInPlaceMaxSpeedIndoor;
	float TurnInPlaceMinTime;
	float TurnRadiusMultiplier;
	float TurnSlowAreaCos;
	float VelocityAlignSpeed;
	float VelocityAlignStrength;
	float VelocityAlignYFactorMax;
	float VelocityAlignYFactorMin;
	float WaterDepthSizeScalingMaxDepth;
	float WaterDepthSizeScalingMaxScale;
	float WaterDepthSizeScalingMinDepth;
	float WaterDepthSizeScalingMinScale;
	float WaterSpawnOffset;
	float WeaponRepelAmount;
	float WeaponRepelRange;
	NMS::NMSString0x20 TempermentDescriptions[11];
	NMS::NMSString0x20 DietDescriptions[4];
	NMS::NMSString0x20 WaterDietDescriptions[4];
	bool AggressiveSharks;
	bool AllBaitIsBasic;
	bool AllowSleeping;
	bool AllowSpawningOnscreen;
	bool CanAlwaysLayEgg;
	bool CreatureInteractWithoutRaycasts;
	bool CreatureRideDirectControl;
	bool DebugDrawTrails;
	bool DebugSearch;
	bool DetailAnimPlayWhileWalking;
	bool DrawRoutineFollowDebug;
	bool DrawRoutineInfo;
	bool EnableFlyingSnakeTails;
	bool EnableMPCreatureRide;
	bool EnableNewStuff;
	bool EnableTrailIk;
	bool EnableVRCreatureRide;
	bool FiendOnscreenMarkers;
	bool FiendsCanAttack;
	bool ForceShowDebugTrails;
	bool ForceStatic;
	bool InstantCreatureRide;
	bool IsHurtingCreaturesACrime;
	bool PetAnimTest;
	bool PetCanSummonOnFreighter;
	bool PetForceSummonFromEgg;
	bool PetsShowTraitClassesAsWords;
	bool PiedPiper;
	bool ProcessPendingSpawnRequests;
	bool RidingPositionTest;
	bool ScuttlersCanAttack;
	bool ShowScale;
	bool StaticCreatureRide;
	bool UncapSpawningforVideo;
	bool UseCreatureAdoptOSD;
	bool UsePetTeleportEffect;
	NMS_Toolkit::TkCurveType WaterDepthSizeScalingCurve;
};

//Dependency: Colour
struct GcDebugEditorGlobals
{
	NMS::Colour AtAxisColour;
	NMS::Colour CentreHandleColour;
	NMS::Colour RightAxisColour;
	NMS::Colour SelectedAxisTint;
	NMS::Colour TransformingAxisTint;
	NMS::Colour UpAxisColour;
	float AxisLength;
	float AxisThickness;
	float CameraDollySpeed;
	float CameraPanSpeed;
	float CameraRotateSpeed;
	float CentrePickingSize;
	float FramingMinOffset;
	float FramingOffsetFactor;
	float LinePickingSize;
	float MaxCameraPivotOffset;
	float MinCameraPivotOffset;
	float PlaneHandleOffset;
	float PlaneHandleSize;
	float ScaleHandleSize;
	float SelectedAxisTintStrength;
	float TransformArrowLength;
	float TransformArrowRadius;
	float TransformingAxisTintStrength;
	float TransformRotationSpeed;
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: NMSString0x100
struct TkGlobals
{
	enum class TrialStatusEnum : uint32_t
	{
		SystemDefault = 0,
		ForceTrial = 1,
		ForceFullGame = 2,
	};

	enum class GameWindowModeEnum : uint32_t
	{
		Bordered = 0,
		Borderless = 1,
		Fullscreen = 2,
		Maximised = 3,
		Minimised = 4,
	};

	enum class ForceGPUPresetToEnum : uint32_t
	{
		PC_Low = 0,
		PC_Medium = 1,
		PC_High = 2,
		PC_Ultra = 3,
		PS4 = 4,
		PS4VR = 5,
		PS4Pro = 6,
		PS4ProVR = 7,
		XB1 = 8,
		XB1X = 9,
		Oberon = 10,
		MacOS = 11,
		iOS = 12,
	};

	enum class EnabledChannelsEnum : uint32_t
	{
		None = 0,
		Default = 1,
		Note = 2,
		Error = 4,
		Warning = 8,
		Info = 16,
		Alt = 32,
		AltWarn = 64,
	};

	enum class AssertsLevelEnum : uint32_t
	{
		Disabled = 0,
		Ignored = 1,
		Skipped = 2,
		Enabled = 3,
	};

	NMS_Toolkit::TkGlobals::AssertsLevelEnum AssertsLevel;
	NMS_Toolkit::TkGlobals::EnabledChannelsEnum EnabledChannels;
	NMS_Toolkit::TkGlobals::ForceGPUPresetToEnum ForceGPUPresetTo;
	int32_t FrameFlipRateDefault;
	int32_t FrameFlipRateGame;
	int32_t FrameFlipRateLoad;
	NMS_Toolkit::TkGlobals::GameWindowModeEnum GameWindowMode;
	int32_t HighlightPlacementIndex;
	int32_t HmdEyeBufferHeight;
	int32_t HmdEyeBufferWidth;
	float HmdEyeScalePos;
	float HmdHeadScalePos;
	float HmdImmersionFactor;
	int32_t HmdMonitor;
	int32_t HmdPreviewScale;
	int32_t LoadBalanceTimeoutMS;
	int32_t LODOverride;
	float MaxFrameRate;
	int32_t Monitor;
	int32_t OctahedralImpostersViewCount;
	int32_t PSVR2LoadBalanceTimeoutMS;
	float ScratchpadInstanceScale;
	int32_t ScratchpadInstancesCap;
	float ScratchpadInstanceSpacing;
	int32_t ScratchpadInstancesPerSide;
	float ScratchpadInstancesRandomness;
	int32_t ScratchpadModelSeed;
	int32_t ScreenHeight;
	int32_t ScreenWidth;
	int32_t TiledWindowsIndex;
	int32_t TiledWindowsSplitCount;
	float TitlebarMenuOffset;
	float TouchScreenSwipeTime;
	float TouchScreenSwipeTravelThreshold;
	NMS_Toolkit::TkGlobals::TrialStatusEnum TrialStatus;
	float UpdatePeriod;
	float UpdatePeriodSteam;
	float VoiceUpdatePeriod;
	float VoiceUpdatePeriodSteam;
	int32_t VRLoadBalanceTimeoutMS;
	int32_t WindowPositionX;
	int32_t WindowPositionY;
	float WwiseVibrationMultiplierPrimary;
	float WwiseVibrationMultiplierSecondary;
	NMS::NMSString0x100 EditorLayout;
	NMS::NMSString0x100 ExcludeLogFilter;
	NMS::NMSString0x100 IncludeLogFilter;
	NMS::NMSString0x100 ScratchpadModel;
	bool AllowInPlaceNGuiElementRenaming;
	bool AutoTabNewlyOpenedWindows;
	bool ColourLODs;
	bool ColourVertexDensity;
	bool CompressImposterTextures;
	bool CrashOnFailedCriticalAssertion;
	bool DefaultSelectIgnoreAsserts;
	bool DisableMultiplayer;
	bool DisableResScaling;
	bool DisableSwitchingAwayFromPad;
	bool DisableUndergrowthInstanceRendering;
	bool DisableVSync;
	bool EnableGpuBreadcrumbs;
	bool EnableNvidiaAftermath;
	bool EnableRenderdoc;
	bool EnableShaderReload;
	bool EnableVirtualTouchScreen;
	bool EnableZstdSaves;
	bool FavouritesAndUndoEnabledByDefault;
	bool FilterTranslatedTextWhenSearching;
	bool ForceGPUPreset;
	bool FreezeCulling;
	bool HideRenderdocOverlay;
	bool HmdDistortionPassthru;
	bool HmdEnable;
	bool HmdFoveated;
	bool HmdStereoRender;
	bool HmdTracking;
	bool LoadRelativeEditorLayouts;
	bool LogInputChanges;
	bool LogInputSetup;
	bool MakeUnusedUniformsNaN;
	bool MinGPUMode;
	bool OctahedralImpostersDisable;
	bool OctahedralImpostersEnable;
	bool OctahedralImpostersViewFromSpace;
	bool SampleCollisionWithCamera;
	bool ScratchpadInstanced;
	bool ScratchpadWind;
	bool ShowPlayerCollisions;
	bool SimulateDisabledParticleRefractions;
	bool SmokeTestSmokeBotAutoStart;
	bool UseDebugScreenSettings;
	bool UseHeavyAir;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcBiomeType
//Dependency: GcBiomeSubType
//Dependency: GcSeasonTransferInventoryConfig
//Dependency: GcBaseBuildingPartStyle
//Dependency: GcGalaxyStarAnomaly
//Dependency: TkGlobals
//Dependency: GcPlanetLife
//Dependency: GcAlienRace
//Dependency: GcAlienPuzzleCategory
//Dependency: NMSString0x20
//Dependency: GcScreenFilters
//Dependency: GcGalaxyStarTypes
//Dependency: GcGameMode
//Dependency: TkLanguages
//Dependency: TkVoxelGeneratorSettingsTypes
//Dependency: VariableSizeString
//Dependency: TkWaterCondition
//Dependency: NMSString0x10
//Dependency: NMSString0x800
//Dependency: NMSString0x400
//Dependency: NMSString0x200
//Dependency: NMSString0x100
//Dependency: NMSString0x80
//Dependency: NMSString0x40
struct GcDebugOptions
{
	enum class UseBanksEnum : uint32_t
	{
		False = 0,
		True = 1,
		Default = 2,
	};

	enum class SolarSystemBootEnum : uint32_t
	{
		FromSettings = 0,
		Generate = 1,
	};

	enum class SmokeTestScenarioEnum : uint32_t
	{
		None = 0,
		TerrainSnapShotFromAltitude = 1,
		BelowCloudLayerSnapShot = 2,
		Flying = 3,
		UltraBiomeSnapShot = 4,
		Walking = 5,
		LeakDetector = 6,
		WalkingSnapshot = 7,
		ModelLoading = 8,
	};

	enum class SmokeTestCycleModeEnum : uint32_t
	{
		None = 0,
		TourPlanet = 1,
		TourSolarSystem = 2,
		TourGalaxy = 3,
		TourUDAs = 4,
		TourShortUDAs = 5,
		TourRandomWarps = 6,
	};

	enum class ShaderPreloadEnum : uint32_t
	{
		Off = 0,
		Full = 1,
	};

	enum class ServerEnvEnum : uint32_t
	{
		Default = 0,
		dev = 1,
		qa = 2,
		prodqa = 3,
		prod = 4,
		custom = 5,
		pentest = 6,
		merged = 7,
		local = 8,
	};

	enum class RecordSettingEnum : uint32_t
	{
		None = 0,
		Record = 1,
		Playback = 2,
	};

	enum class RealityModeEnum : uint32_t
	{
		LoadPreset = 0,
		Generate = 1,
	};

	enum class ProxyTypeEnum : uint32_t
	{
		None = 0,
		ManualURI = 1,
		InetProxy = 2,
	};

	enum class PlayerSpawnLocationOverrideEnum : uint32_t
	{
		None = 0,
		FromSettings = 1,
		Space = 2,
		SpaceStation = 3,
		RandomPlanet = 4,
		GameStartPlanet = 5,
		SpecificLocation = 6,
	};

	enum class GameStateModeEnum : uint32_t
	{
		LoadPreset = 0,
		UserStorage = 1,
		FreshStart = 2,
	};

	enum class BootModeEnum : uint32_t
	{
		MinimalSolarSystem = 0,
		SolarSystem = 1,
		GalaxyMap = 2,
		SmokeTest = 3,
		SmokeTestGalaxyMap = 4,
		Scratchpad = 5,
		UnitTest = 6,
	};

	enum class BootLoadDelayEnum : uint32_t
	{
		LoadAll = 0,
		WaitForPlanet = 1,
		WaitForNothing = 2,
	};

	NMS_GameComponents::GcSeasonTransferInventoryConfig SeasonTransferInventoryConfigOverride;
	NMS::VariableSizeString CrashDumpPath;
	NMS::NMSString0x10 CreateSeasonContextMaskIdOverride;
	NMS::VariableSizeString CursorTexture;
	NMS::VariableSizeString DebugFont;
	NMS::VariableSizeString DebugFontTexture;
	NMS::VariableSizeString DebugScene;
	NMS::NMSString0x10 DefaultAirCreatureTable;
	NMS::NMSString0x10 DefaultCaveCreatureTable;
	NMS::NMSString0x10 DefaultGroundCreatureTable;
	NMS::VariableSizeString DefaultSaveData;
	NMS::NMSString0x10 DefaultWaterCreatureTable;
	NMS::NMSString0x10 ForceBuilderMissionBoardMission;
	std::vector<NMS::NMSString0x20> LocTableList;
	NMS::VariableSizeString PauseTexture;
	NMS::VariableSizeString PipelineFile;
	NMS::VariableSizeString PipelineFileEditor;
	NMS::VariableSizeString PipelineFileFrontend;
	NMS::VariableSizeString PlayTexture;
	NMS::VariableSizeString RealityPresetFile;
	NMS::VariableSizeString RenderToTexture;
	NMS::VariableSizeString SceneSettings;
	NMS::VariableSizeString StepTexture;
	NMS::NMSString0x10 SwitchSeasonContextMaskIdOverride;
	uint64_t ForceTimeToEpoch;
	uint64_t OverrideAbandonedFreighterSeed;
	NMS_Toolkit::TkGlobals ToolkitGlobals;
	float _3dTextDistance;
	float _3dTextMinScale;
	NMS_GameComponents::GcBaseBuildingPartStyle AutomaticPartSpawnStyle;
	float BaseDownloadTimeout;
	uint32_t BasePayloadMultiplier;
	int32_t BootDirectlyIntoSaveSlot;
	NMS_Globals::GcDebugOptions::BootLoadDelayEnum BootLoadDelay;
	float BootLogoFadeRate;
	NMS_Globals::GcDebugOptions::BootModeEnum BootMode;
	NMS_Toolkit::TkLanguages DebugLanguage;
	float DebugMenuAlpha;
	float DebugTextLineHeight;
	float DebugTextSize;
	int32_t DebugTextureSize;
	int32_t DiscoveryAutoSyncIntervalSeconds;
	NMS_GameComponents::GcGalaxyStarAnomaly ForceAnomalyTo;
	int32_t ForceAsteroidSystemIndex;
	NMS_GameComponents::GcBiomeSubType ForceBiomeSubTypeTo;
	NMS_GameComponents::GcBiomeType ForceBiomeTo;
	NMS_GameComponents::GcAlienRace ForceBuildingRaceTo;
	NMS_GameComponents::GcPlanetLife ForceCreatureLifeLevelTo;
	int32_t ForceGrassColourIndex;
	float ForceInitialTimeOfDay;
	int32_t ForceInteractionIndex;
	NMS_GameComponents::GcAlienRace ForceInteractionRaceTo;
	NMS_GameComponents::GcPlanetLife ForceLifeLevelTo;
	NMS_GameComponents::GcAlienPuzzleCategory ForceNPCPuzzleCategory;
	NMS_GameComponents::GcScreenFilters ForceScreenFilterTo;
	float ForceSeaLevel;
	int32_t ForceSkyColourIndex;
	uint32_t ForceSkyColourSeed;
	int32_t ForceSpaceBattleLevel;
	int32_t ForceSpaceSkyColourIndex;
	NMS_GameComponents::GcGalaxyStarTypes ForceStarTypeTo;
	float ForceSunAngle;
	NMS_GameComponents::GcPlanetLife ForceTerrainSettings;
	NMS_Toolkit::TkVoxelGeneratorSettingsTypes ForceTerrainTypeTo;
	float ForceTimeOfDay;
	int32_t ForceWaterColourIndex;
	NMS_Toolkit::TkWaterCondition ForceWaterConditionTo;
	int32_t ForceWaterObjectFileIndex;
	NMS_Globals::GcDebugOptions::GameStateModeEnum GameStateMode;
	float GenerateCostAngle;
	float GenerateCostDistance;
	float GenerateCostLOD;
	float GenerateCostWait;
	int32_t GenerateFarLodBuildingDist;
	int32_t MaxNumDebugMessages;
	int32_t MoveBaseIndex;
	int32_t MultipleFingersSamePressFrameDelta;
	NMS_GameComponents::GcGameMode NewSaveGameMode;
	int32_t OverrideMatchmakingVersion;
	int32_t OverrideServerSeasonEndTime;
	int32_t OverrideServerSeasonNumber;
	float PanDeadzone;
	NMS_Globals::GcDebugOptions::PlayerSpawnLocationOverrideEnum PlayerSpawnLocationOverride;
	int32_t ProceduralModelBatchSize;
	int32_t ProceduralModelFilterMatchretryCount;
	int32_t ProceduralModelsShown;
	int32_t ProceduralModelsThumbnailSize;
	int32_t ProfilerPartIndexPhase;
	int32_t ProfilerPartIndexStride;
	int32_t ProfilerPartIteration;
	NMS_Globals::GcDebugOptions::ProxyTypeEnum ProxyType;
	NMS_Globals::GcDebugOptions::RealityModeEnum RealityMode;
	NMS_Globals::GcDebugOptions::RecordSettingEnum RecordSetting;
	int32_t RecurrenceTimeOffset;
	int32_t ScreenshotForUploadHeight;
	int32_t ScreenshotForUploadWidth;
	NMS_Globals::GcDebugOptions::ServerEnvEnum ServerEnv;
	NMS_Globals::GcDebugOptions::ShaderPreloadEnum ShaderPreload;
	int32_t ShowSpecificGraph;
	int32_t SmokeTestConfigCaptureCycles;
	float SmokeTestConfigCaptureDurationInSeconds;
	int32_t SmokeTestConfigCaptureFolderNameNumberOffset;
	int32_t SmokeTestConfigPlanetPositionCount;
	float SmokeTestConfigScenarioLength;
	float SmokeTestConfigScenarioPreambleLength;
	NMS_Globals::GcDebugOptions::SmokeTestCycleModeEnum SmokeTestCycleMode;
	NMS_Globals::GcDebugOptions::SmokeTestScenarioEnum SmokeTestScenario;
	int32_t SmokeTestSmokeBotTargetWarps;
	NMS_Globals::GcDebugOptions::SolarSystemBootEnum SolarSystemBoot;
	float SunLightScaleGgx;
	int32_t SwipeDetectionMaxFrames;
	float SwipeDetectionNormalizedTravelThreshold;
	int32_t SynergyPort;
	NMS_Globals::GcDebugOptions::UseBanksEnum UseBanks;
	float WeaponScale3P;
	uint16_t RealityGenerationIteration;
	NMS::NMSString0x800 AutoJoinUserNames;
	NMS::NMSString0x400 DebugTwitchRewards;
	NMS::NMSString0x200 LoadToBase;
	NMS::NMSString0x200 SeasonalDataOverrideFile;
	NMS::NMSString0x100 ForceHgAccount;
	NMS::NMSString0x100 ForcePlayerPosition;
	NMS::NMSString0x100 ForceUniverseAddress;
	NMS::NMSString0x100 GOGLogin;
	NMS::NMSString0x100 ShowUniverseAddressOnGalaxyMap;
	NMS::NMSString0x100 WorkingDirectory;
	NMS::NMSString0x80 AuthBaseUrl;
	NMS::NMSString0x80 ProxyURI;
	NMS::NMSString0x40 ForceBaseDownloadUser;
	NMS::NMSString0x40 OverrideSettlementOwnershipOnlineId;
	NMS::NMSString0x40 OverrideSettlementOwnershipUsername;
	NMS::NMSString0x40 ScreenshotForUploadName;
	NMS::NMSString0x20 AllowedLanguagesFile;
	NMS::NMSString0x20 AutomaticPartSpawnID;
	NMS::NMSString0x20 BaseServerPlatform;
	NMS::NMSString0x20 CrashDumpIdentifier;
	NMS::NMSString0x20 OverrideUsernameForDev;
	NMS::NMSString0x20 SaveTestingCommand;
	NMS::NMSString0x20 SmokeTestForcePlanetDetail;
	NMS::NMSString0x20 SmokeTestRunFolder;
	NMS::NMSString0x20 SynergyServer;
	bool ActiveMissionsIgnoreStartCancelConditions;
	bool AllowGalaxyMapRequests;
	bool AllowGlobalPartSnapping;
	bool AllowNGuiVR;
	bool AllowOverrideSettlementOwnership;
	bool AllowPause;
	bool AllowRobotBehaviors;
	bool AllowSavingOnAbandonedFreighters;
	bool AllSeasonMilestonesShowComplete;
	bool AllSettlementsAreCompleted;
	bool AlternateControls;
	bool AlwaysAllowFreighterInventoryAccess;
	bool AlwaysAllowShipOperations;
	bool AlwaysAllowSpookFiends;
	bool AlwaysAllowVehicleOperations;
	bool AlwaysHaveFocus;
	bool AlwaysIncludeLocalPlayerInChatMessage;
	bool AlwaysSaveGameAsClient;
	bool AlwaysShowSaveIds;
	bool AlwaysShowURI;
	bool AlwaysSpaceBattle;
	bool AutoJoinRandomGames;
	bool AutoJoinUserEnabled;
	bool AutomaticPartSpawnInactive;
	bool BaseAdmin;
	bool BlockCommunicatorSignals;
	bool BlockSettlementsNetwork;
	bool BlockSpaceBattle;
	bool BodyTurning;
	bool BootDirectlyIntoLastSave;
	bool BootMusic;
	bool CanLeaveDialogs;
	bool CertificateSecurityBypass;
	bool CheckForMissingLocStrings;
	bool ClothForceAsyncSimulationOff;
	bool ClothForceAsyncSimulationOn;
	bool ClothForcePositionExtrapolationAntiSyncWithFpsLock;
	bool ClothForcePositionExtrapolationBackOn;
	bool ClothForcePositionExtrapolationOff;
	bool ClothForcePositionExtrapolationOn;
	bool ClothForcePositionExtrapolationSyncWithFpsLock;
	bool ClothForcePositionExtrapolationUpdateOrderDependent;
	bool CompressTextures;
	bool CrashDumpFull;
	bool CrashOnF10;
	bool CreatureChatter;
	bool CreatureDrawVocals;
	bool CreatureErrors;
	bool CrossPlatformFeaturedBases;
	bool DChecksEnabled;
	bool DChecksOutputBinary;
	bool DChecksOutputFileLine;
	bool DChecksOutputJson;
	bool DebugBuildingSpawns;
	bool DebugDrawPlayerInteract;
	bool DebugGalaxyMapInQuickMenu;
	bool DebugIBL;
	bool DebugNetworkLocks;
	bool DebugPersistentInteractions;
	bool DebugSpotlights;
	bool DebugTerrainTextures;
	bool DebugThreatLevels;
	bool DeferRegionBodies;
	bool DisableAbandonedFreighterRoomsOptimisation;
	bool DisableBaseBuilding;
	bool DisableBaseBuildingLimits;
	bool DisableBasePowerRequirements;
	bool DisableClouds;
	bool DisableContinuousSaving;
	bool DisableDebugControls;
	bool DisableDiscoveryNaming;
	bool DisableFileWatcher;
	bool DisableHazards;
	bool DisableHeadConstraints;
	bool DisableInvalidSaveVersion;
	bool DisableLeftHand;
	bool DisableLimits;
	bool DisableMissionShop;
	bool DisableMonumentDownloads;
	bool DisableNPCHiddenUntilScanned;
	bool DisableNPCs;
	bool DisableOldMissions;
	bool DisablePartialStories;
	bool DisableProfanityFilter;
	bool DisableSaveSlotSorting;
	bool DisableSaveUploadRateLimits;
	bool DisableSaving;
	bool DisableSettlements;
	bool DisableShadowSwitching;
	bool DisableShipSaveDataRecovery;
	bool DisableSpaceStationSpawnOnJoin;
	bool DisableStorms;
	bool DisableVibration;
	bool DoAlienLanguage;
	bool DrawCreaturesInRoutines;
	bool DumpManifestContents;
	bool EnableAccessibleUI;
	bool EnableBaseBuildingExpandables;
	bool EnableBaseMovingOption;
	bool EnableCloudAnimation;
	bool EnableComputePost;
	bool EnableDayNightCycle;
	bool EnableDebugSceneAutoSave;
	bool EnableEvenOddRender;
	bool EnableFrontendPreload;
	bool EnableGalaxyRecolouring;
	bool EnableGgx;
	bool EnableMemoryPoolAllocPrint;
	bool EnableMomentTransparency;
	bool EnablePhotomodeVR;
	bool EnableSynergy;
	bool EnableTouchScreenDebugging;
	bool EverythingIsFree;
	bool EverythingIsKnown;
	bool EverythingIsStar;
	bool FakeHandsInMultiplayer;
	bool FastAndFrequentFleetInterventions;
	bool FastLoad;
	bool FixedFramerate;
	bool FleetDirectorAutoMode;
	bool ForceAllExhibitsToBeEditable;
	bool ForceBasicLoadScreen;
	bool ForceBinaryStar;
	bool ForceBiome;
	bool ForceBuildersAlwaysKnown;
	bool ForceBuildingRace;
	bool ForceCorruptSentinels;
	bool ForceCreatureLifeLevel;
	bool ForceDefaultCreatureFile;
	bool ForceDisableClothComponent;
	bool ForceDisableNonPlayerRagdollComponents;
	bool ForceDisableRagdollComponent;
	bool ForceDisableSplitIkOptimisation;
	bool ForceDisableSpringComponent;
	bool ForceEnableClothComponent;
	bool ForceEnableRagdollComponent;
	bool ForceEnableSplitIkOptimisation;
	bool ForceEnableSpringComponent;
	bool ForceExtremeSentinels;
	bool ForceExtremeWeather;
	bool ForceFullFeatureMode;
	bool ForceGasGiantSystem;
	bool ForceGiantSystem;
	bool ForceInitialShip;
	bool ForceInitialWeapon;
	bool ForceInteractionToSettings;
	bool ForceLifeLevel;
	bool ForceLoadAllWeather;
	bool ForceNexusInQuickMenu;
	bool ForcePirateSystem;
	bool ForcePlanetsToHaveNoCaves;
	bool ForcePlanetsToHaveNoNoiseLayers;
	bool ForcePlanetsToHaveNoTerrainFeatures;
	bool ForcePlanetsToHaveNoWater;
	bool ForcePlanetsToHaveWater;
	bool ForcePrimeTerrain;
	bool ForcePurpleSystemsToAlwaysBirth;
	bool ForcePurpleSystemsVisibleOnLoad;
	bool ForceRareAsteroidSystem;
	bool ForceScanEventsToGoPrime;
	bool ForceScreenFilter;
	bool ForceSmallLobby;
	bool ForceSpaceSkyColourRare;
	bool ForceStarType;
	bool ForceSunDirectionFromPhotoMode;
	bool ForceTernaryStar;
	bool ForceTerrainType;
	bool ForceTgaDlc;
	bool ForceTinyLobby;
	bool ForceTranslateAllAlienText;
	bool ForceWaterCondition;
	bool FormatDownloadStorageAreaOnBoot;
	bool GodMode;
	bool GraphCommandBuffer;
	bool GraphFPS;
	bool GraphGeneration;
	bool GraphTexStreaming;
	bool HangOnCrash;
	bool HmdFrameShiftEnabled;
	bool HmdUseSolidGuiPointer;
	bool HotReloadModGlobals;
	bool IgnoreFreighterSpawnWarpRequirement;
	bool IgnoreMissionRank;
	bool IgnoreSteamDev;
	bool IgnoreTransactionTimeouts;
	bool InfiniteInteractions;
	bool InfiniteStamina;
	bool InstanceCollision;
	bool InteractionsAllwaysGivesTech;
	bool LimitGlobalBodies;
	bool LimitGlobalInstances;
	bool LimitPerRegionBodies;
	bool LimitPerRegionInstances;
	bool LoadMissions;
	bool LoadShaderSourceIfRenderdocEnabled;
	bool LockAllTitles;
	bool LogMissingLocalisedText;
	bool MapWarpCheckIgnoreDrive;
	bool MapWarpCheckIgnoreFuel;
	bool MaximumFreighterSpawns;
	bool MemCsv;
	bool MissionMessageLoggingEnabled;
	bool MissionNGUIShowsConditionResults;
	bool MissionNGUIShowsTableNames;
	bool MissionSurveyEnabled;
	bool ModifyPlanetsInInitialSystems;
	bool MPMissions;
	bool MPMissionsAlwaysEPIC;
	bool MultiplePlayerFreightersInASystem;
	bool PlaceOnGroundWhenLeavingDebugCamera;
	bool PreloadToolbox;
	bool PrintAvgFrameTimes;
	bool ProceduralModelsDeterministicSequence;
	bool Proto2DevKit;
	bool RecordNetworkStatsOnBoot;
	bool RenderCreatureDetails;
	bool RenderHud;
	bool RenderLowFramerate;
	bool ResetForcedSaveSlotOnLoad;
	bool ResetToSupportedResolution;
	bool RevealAllTitles;
	bool SaveOutModdedMetadata;
	bool ScratchpadPlanetEnvironment;
	bool ScreenshotMode;
	bool ShaderCaching;
	bool ShaderPreloadListExport;
	bool ShaderPreloadListImport;
	bool ShipSalvageGivesAllParts;
	bool ShowDebugMessages;
	bool ShowDynamicResScale;
	bool ShowEditorPlacementPreview;
	bool ShowFireteamMembersUA;
	bool ShowFramerate;
	bool ShowGPUMemory;
	bool ShowGPURenderTime;
	bool ShowGraphs;
	bool ShowHmdHandControllers;
	bool ShowLongestStrings;
	bool ShowMempoolOverlay;
	bool ShowMissionIdInTitle;
	bool ShowMouseSmoothing;
	bool ShowPositionDebug;
	bool ShowRenderStatsDisplay;
	bool ShowTeleportEffectLocally;
	bool SimulateDisabledParticleRefractions;
	bool SimulateNoNetworkConnection;
	bool SkipAbandonedFreighterUnlocking;
	bool SkipIntro;
	bool SkipLogos;
	bool SkipPlanetDiscoverOnBoot;
	bool SkipTutorial;
	bool SkipUITimers;
	bool SmokeTestCameraFly;
	bool SmokeTestConfigRandomizePlanetSeed;
	bool SmokeTestDumpStatsMode;
	bool SmokeTestFastExit;
	bool SmokeTestLegacyOutput;
	bool SmokeTestOutputOnly;
	bool SmokeTestPostBandwidthStats;
	bool SmokeTestPureFlight;
	bool SmokeTestSmokeBotAutoStart;
	bool SmokeTestSmokeBotEnabled;
	bool SpawnPirates;
	bool SpawnPulseEncounters;
	bool SpawnRobots;
	bool SpawnShips;
	bool SpecialsShop;
	bool StartPaused;
	bool StopSwitchingToSecondaryInteractions;
	bool StressTestLongNameDisplay;
	bool SuperKillGuns;
	bool TakeNoDamage;
	bool ThirdPersonIsDefaultCameraForPlayer;
	bool ThirdPersonIsDefaultCameraForShipAndVehicles;
	bool UnlockAllPlatformRewards;
	bool UnlockAllSeasonRewards;
	bool UnlockAllStories;
	bool UnlockAllTitles;
	bool UnlockAllTwitchRewards;
	bool UnlockAllWords;
	bool UseBuildings;
	bool UseClouds;
	bool UseCreatures;
	bool UseElevation;
	bool UseGunImpactEffect;
	bool UseHighlightedOptionStyle;
	bool UseImmediateModeFrontend;
	bool UseInstances;
	bool UseLegacyBuildingTable;
	bool UseLegacyFreighters;
	bool UseMovementStickForRun;
	bool UseObjects;
	bool UseOldTerrainMeshing;
	bool UsePadOnUnfocusedWindow;
	bool UseParticles;
	bool UseProcTextureDebugger;
	bool UseSceneInfoWindow;
	bool UseScreenEffects;
	bool UseSeasonTransferInventoryConfigOverride;
	bool UseTerrain;
	bool UseVolumetrics;
	bool VideoCaptureMode;
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: TkShearWindOctaveData
//Dependency: NMSString0x10
struct TkShearWindData
{
	NMS::NMSString0x10 Name;
	NMS_Toolkit::TkShearWindOctaveData Octave0;
	NMS_Toolkit::TkShearWindOctaveData Octave1;
	NMS_Toolkit::TkShearWindOctaveData Octave2;
	NMS_Toolkit::TkShearWindOctaveData Octave3;
	float LdsWindSpeed;
	float LdsWindStrength;
	float OverallWindStrength;
	float ShearWindSpeed;
	float WindShearGradientStrength;
	float WindShearToDotLdsFactor;
	float WindShearVertpushStrength;
	float WindStrengthToVertpush;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcCloudProperties
//Dependency: GcEnvironmentProperties
//Dependency: Colour
//Dependency: TkShearWindData
//Dependency: TkDynamicTreeWindFrequency
//Dependency: TkLODSettingsData
//Dependency: Vector2f
struct GcEnvironmentGlobals
{
	enum class SwitchTypeEnum : uint32_t
	{
		None = 0,
		Debug = 1,
		Enabled = 2,
	};

	NMS_GameComponents::GcCloudProperties CloudProperties;
	NMS::Colour IndoorAmbientColour;
	std::vector<float> FarBlendHeight;
	std::vector<NMS_Toolkit::TkShearWindData> ShearWindSettings;
	std::vector<float> SkyAtmosphereBlendLength;
	std::vector<float> SkyBlendLength;
	std::vector<float> SpacePlanetFogStrength;
	NMS_Toolkit::TkLODSettingsData LODSettings[4];
	NMS_GameComponents::GcEnvironmentProperties EnvironmentGasGiantProperties;
	NMS_GameComponents::GcEnvironmentProperties EnvironmentPrimeProperties;
	NMS_GameComponents::GcEnvironmentProperties EnvironmentProperties;
	NMS_Toolkit::TkDynamicTreeWindFrequency DynamicTreeWindFrequency;
	NMS::Vector2f ExposureHeightBracket;
	NMS::Vector2f SpaceBuildingTemperature;
	float AbandonedFreighterMaxTemperature;
	float AbandonedFreighterMinTemperature;
	float AsteroidFadeHeightMax;
	float AsteroidFadeHeightMin;
	float AsteroidFieldStableEnterTime;
	float AsteroidFieldStableLeaveTime;
	float AsteroidMaxRotate;
	float AsteroidMinRotate;
	float AsteroidScale;
	float AtmosphereSpaceRadius;
	float CameraLocationStableTime;
	float CreatureFadeTime;
	float DailyTempChangePercent;
	float DeepWaterDepthTransitionMax;
	float DeepWaterDepthTransitionMin;
	float DeepWaterOxygenMultiplier;
	float DistortionStep;
	float DoFHeightMax;
	float DoFHeightMin;
	float DuplicateColourThreshold;
	float ExposureGroundFactorAddMul;
	float ExposureSurfaceContrib;
	float ExposureSurfaceDistMax;
	float FarBlendLength;
	float FloraFadeTimeMax;
	float FloraFadeTimeMin;
	float GrassNormalMap;
	float GrassNormalOffset;
	float GrassNormalSpherify;
	float GrassNormalUpright;
	float HDeform;
	float HeavyAirFadeDistance;
	float HeavyAirFadeInTime;
	float HeavyAirFadeOutTime;
	float HeightFogHeightMin;
	int32_t HotspotsLOD;
	float IblUndergroundFadeSpeed;
	float IblUndergroundLightDirectionHorizonBias;
	float IblUndergroundLightIntensity;
	float IndoorColourBlendTime;
	float IndoorsLightingAbandonedFreighterMax;
	float IndoorsLightingFreighterMax;
	float IndoorsLightingNexusMax;
	float IndoorsLightingPlanetMax;
	float IndoorsLightingSpaceStationAbandonedMax;
	float IndoorsLightingSpaceStationMax;
	float IndoorsLightingSpaceStationPirateMax;
	float IndoorsLightingThreshold;
	float IndoorsLightingTransitionTime;
	float IndoorsLightingWeightAround;
	float IndoorsLightingWeightGround;
	float IndoorsLightingWeightOverhead;
	float IndoorsLightingWeightTowardsSun;
	float InteractionRadius;
	float InterestStableTime;
	float LightColourBlend;
	float LightColourHeight;
	float LightDirectionBlend;
	float LightDirectionHeight;
	float LocationStableTime;
	float MaxElevation;
	float MaxHotspotFalloffDistance;
	float MaxHotspotOffsetDistance;
	float MaxMurkVarianceOverTime;
	float MaxPlacementBlendValuePatch;
	float MinHotspotFalloffDistance;
	float MinPlacementBlendValue;
	float MinPlacementBlendValuePatch;
	float MinPlacementObjectScale;
	float MinWaterReflections;
	float ObjectSpawnDetailRadius;
	float ObjectSpawnFirstDotCheck;
	float ObjectSpawnFirstRadius;
	float PlanetEffectEndDistance;
	float PlanetFlipDistance;
	float PlanetUnwrapMax;
	float PlanetUnwrapMin;
	float ProbeBlendRadiusEdge;
	float RegionHotspotProbability;
	float SDeform;
	float SenseProbingValueSmoothingTime;
	float SenseProbingValueSmoothingTimeMed;
	float SenseProbingValueSmoothingTimeSlow;
	float ShipRadiation;
	float ShipSpookLevel;
	float ShipTemperature;
	float ShipToxicity;
	float SkyAtmospherePower;
	float SmallAsteroidScale;
	float SpaceRadiation;
	float SpaceSpookLevel;
	float SpaceStationStateBoundingBoxScaler;
	float SpaceTemperature;
	float SpaceToxicity;
	float SpawnLowerAtmosphereRadiusMultiplier;
	float SphereLodTextureScale;
	float StandardNearProbeRadius;
	float SunClampHeightMax;
	float SunClampHeightMin;
	float SunFactorMin;
	NMS_Globals::GcEnvironmentGlobals::SwitchTypeEnum SwitchType;
	float TemperatureSmoothTime;
	float TerrainFadeTime;
	float TerrainFadeTimeInShip;
	float TerrainFlattenMax;
	float TerrainFlattenMin;
	float UndergroundFakeSkyFactor;
	float UndergroundNearProbeRadius;
	float VDeform;
	float WaterAlphaHeightMax;
	float WaterAlphaHeightMin;
	int32_t WaterChangeTime;
	float WaterConditionTransitionTime;
	float WaterFogHeightMax;
	float WaterMurkMaxPlayerDepth;
	float WaterMurkMinPlayerDepth;
	float WaterMurkVariancePeriod;
	bool EnableWind;
	bool ForceAddCaveProps;
	bool ForceAddUnderwaterProps;
	bool MatchPlantPalettes;
};

//Dependency: GcCompositeCurveData
//Dependency: GcFishSizeProbabilityBiomeOverride
//Dependency: Colour
//Dependency: GcFishSizeProbability
//Dependency: GcGaussianCurveData
//Dependency: TkCurveType
//Dependency: Vector3f
struct GcFishingGlobals
{
	NMS::Vector3f CastLaunchOffset;
	NMS::Colour LineColourBite;
	NMS::Colour LineColourChase;
	NMS::Colour LineColourDefault;
	NMS::Colour LineColourFail;
	NMS::Colour LineColourLand;
	NMS::Colour LineColourNibble;
	NMS::Vector3f RodFirstPersonOffset;
	NMS::Vector3f RodFirstPersonOffsetReelIn;
	NMS::Vector3f VRRodOffset;
	NMS::Vector3f VRRodRotation;
	NMS_GameComponents::GcCompositeCurveData BaitFlickBobCurve;
	NMS_GameComponents::GcCompositeCurveData BaitFlickLineCurve;
	std::vector<NMS_GameComponents::GcFishSizeProbabilityBiomeOverride> SizeWeightsBiomeOverrides;
	NMS_GameComponents::GcFishSizeProbability SizeWeights[4];
	NMS_GameComponents::GcGaussianCurveData FishMass[4];
	float BaitRarityBoostTotalScoreQualityScaling[5];
	int32_t MaxSeaHarvesterCaughtFish[5];
	int32_t QualityWeights[5];
	float BaitSizeBoostTotalScoreQualityScaling[4];
	float ChaseTimes[4];
	float MysteryFishScales[4];
	float BaitCookingValueMin;
	float BaitFlickBobHeight;
	float BaitFlickBobHeightLean;
	float BaitFlickBobTime;
	float BaitFlickBobTimeLean;
	float BaitFlickBobTimeOffset;
	float BaitFlickEffectTime;
	float BaitRandScoreCookingValueFactor;
	float BaitRarityBoostTotalScoreMax;
	float BaitRarityBoostTotalScoreMin;
	float BaitSizeBoostTotalScoreMax;
	float BaitSizeBoostTotalScoreMin;
	float BaitWeatherBoostScoreThresholdForNotes;
	float CastGravity;
	float CastLaunchAngle;
	float CastLaunchDelayTime;
	float CastVelocityBlendFactor;
	float DebugSceneCastDist;
	float DebugSceneFlicktimeMax;
	float DebugSceneFlicktimeMin;
	float FirstPersonMaxTurnAngle;
	float FirstPersonPitchMaxSpeedScaling;
	float FirstPersonPitchMaxSpeedYawAngle;
	float FirstPersonPitchMinSpeedScaling;
	float FirstPersonPitchMinSpeedYawAngle;
	float FirstPersonPullBackAngle;
	float FirstPersonPullBackSpeedScaling;
	float FirstPersonTurnSpeedBaseScaling;
	float FishCatchAfterBiteTime;
	float FishingRange;
	float FishingRangeVRMultiplier;
	float FishMouthOffset;
	float FishNibbleOffset;
	float FishWaterDisplacementSmoothTime;
	float FloatTiltAmount;
	float FloatTiltIntoTime;
	float FloatTiltOutOfTime;
	float FloatTiltThreshold;
	float LandTimeBegin;
	float LandTimeEnd;
	float LeanCausesBobThreshold;
	float LineAttachmentOffset;
	float LineBiteSag;
	float LineBrightness;
	float LineColourChangeRate;
	float LineColourChangeRateBite;
	float LineColourChangeRateNibble;
	float LineFlickSag;
	float LineNibbleSag;
	float LineWaitSag;
	float LineWidth;
	float MaxWaitTime;
	float MinVelocityToCast;
	float MinWaitTime;
	float ReelHoldTime;
	float RequiredBackCastAngleDegrees;
	float RequiredCastAngleDegrees;
	float SeaHarvesterAverageCatchTimeSeconds;
	float StormThreshold;
	float ThirdPersonLeanMaxAngle;
	float ThirdPersonLeanMidpointAngle;
	float ThirdPersonLeanTime;
	float VRCastStrength;
	float WaveStrengthBite;
	float WaveStrengthBob;
	float WaveStrengthLand;
	bool EnableFirstPersonPitchSpeedScaling;
	bool EnableFirstPersonYawPullback;
	bool EnableFirstPersonYawTurnSpeedScaling;
	NMS_Toolkit::TkCurveType FirstPersonPitchSpeedCurve;
	NMS_Toolkit::TkCurveType FirstPersonPullBackSpeedCurve;
	NMS_Toolkit::TkCurveType FirstPersonTurnSpeedCurve;
	NMS_Toolkit::TkCurveType LineSagCurve;
	bool LineUsesLineRenderer;
};

//Dependency: GcFreighterNPCSpawnPriority
//Dependency: GcFreighterRoomNPCData
//Dependency: GcNPCNavSubgraphNodeTypeConnectivity
struct GcFreighterBaseGlobals
{
	NMS_GameComponents::GcFreighterNPCSpawnPriority NPCTypeSpawnPriorities[5];
	std::vector<NMS_GameComponents::GcFreighterRoomNPCData> FreighterRoomNPCData;
	int32_t MaxTotalCapacityOfNPCTypes[5];
	NMS_GameComponents::GcNPCNavSubgraphNodeTypeConnectivity NPCNavNodeConnectivity;
	int32_t MaxTotalNPCCount;
	float MinTotalRoomsRequiredPerNPC;
	float NPCSpawnIntervalTime;
	float NPCStartSpawnDelayTime;
};

//Dependency: GcGalaxyCameraData
//Dependency: GcGalaxyStarColours
//Dependency: GcGalaxyMarkerSettings
//Dependency: GcGalaxyRenderSetupData
//Dependency: GcInWorldUIScreenData
//Dependency: GcGalaxyGenerationSetupData
//Dependency: GcGalaxyRenderAnostreakData
//Dependency: GcGalaxySolarSystemParams
//Dependency: GcGalaxyAudioSetupData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcGalaxyGlobals
{
	NMS_GameComponents::GcGalaxyMarkerSettings MarkerSettings[16];
	NMS_GameComponents::GcGalaxyRenderSetupData DefaultRenderSetup;
	NMS_GameComponents::GcGalaxyRenderSetupData FinalAnimationRenderSetup;
	NMS_GameComponents::GcGalaxyGenerationSetupData DefaultGeneration;
	NMS_GameComponents::GcGalaxyGenerationSetupData FinalAnimationGeneration;
	NMS::Colour RaceFilterDefaultColours[9];
	NMS::Colour RaceFilterDeuteranopiaColours[9];
	NMS::Colour RaceFilterProtanopiaColours[9];
	NMS::Colour RaceFilterTritanopiaColours[9];
	NMS::Colour EconomyFilterDefaultColours[7];
	NMS::Colour EconomyFilterDeuteranopiaColours[7];
	NMS::Colour EconomyFilterProtanopiaColours[7];
	NMS::Colour EconomyFilterTritanopiaColours[7];
	NMS::Colour GalacticWaypointDefaultColours[7];
	NMS::Colour GalacticWaypointDeuteranopiaColours[7];
	NMS::Colour GalacticWaypointProtanopiaColours[7];
	NMS::Colour GalacticWaypointTritanopiaColours[7];
	NMS_GameComponents::GcGalaxyStarColours BaseStarDefaultColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarDeuteranopiaColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarProtanopiaColours;
	NMS_GameComponents::GcGalaxyStarColours BaseStarTritanopiaColours;
	NMS::Colour ConflictFilterDefaultColours[4];
	NMS::Colour ConflictFilterDeuteranopiaColours[4];
	NMS::Colour ConflictFilterProtanopiaColours[4];
	NMS::Colour ConflictFilterTritanopiaColours[4];
	NMS_GameComponents::GcGalaxyRenderAnostreakData AnostreakAway;
	NMS_GameComponents::GcGalaxyRenderAnostreakData AnostreakFacing;
	NMS_GameComponents::GcInWorldUIScreenData HandMenuOffset;
	NMS::Colour HandGizmoColourAt;
	NMS::Colour HandGizmoColourInner;
	NMS::Colour HandGizmoColourRight;
	NMS::Colour HandGizmoColourUp;
	NMS::Vector3f HandGizmoHeadOffset;
	NMS::Colour SelectionTreeColour;
	NMS::VariableSizeString MarkerDefaultHex;
	NMS_GameComponents::GcGalaxyCameraData Camera;
	NMS_GameComponents::GcGalaxySolarSystemParams SolarSystemParameters;
	NMS_GameComponents::GcGalaxyAudioSetupData Audio;
	NMS::Vector2f ClickToSelectIconOffset;
	NMS::Vector2f GoalDistanceRange;
	NMS::Vector2f SolarInfoPanelAlignment;
	NMS::Vector2f SolarInfoPanelLineOffset;
	NMS::Vector2f SolarInfoPanelOffset;
	NMS::Vector2f SolarInfoPanelOffsetVR;
	NMS::Vector2f SolarMarkerAlignmentVR;
	NMS::Vector2f SolarMarkerOriginOffsetVR;
	NMS::Vector2f SolarMarkerOriginOffsetVRPS4;
	NMS::Vector2f SolarMarkerSizeVR;
	NMS::Vector2f SolarMarkerSizeVRPS4;
	float AnostreakAlpha;
	float ClickToSelectIconScale;
	float DistanceComputerScale;
	float EarlyStageMultiplier;
	float FadeGameInTime;
	float FadeGameOutTime;
	float FadeMapInTime;
	float FadeMapOutTime;
	float FadeGameOutTimeCentreJourney;
	float FadeMapInTimeCentreJourney;
	float FinalFadedTime;
	float FinalFadeInRate;
	float FinalFadeOutRate;
	float FinalHoldTime;
	float FinalHoldTowardsCenterTime;
	float FinalTransitionAcceleration;
	float FinalTransitionInterpolationValue;
	float FinalTransitionMaxSpeed;
	float GalacticPathMaximumJumpDistanceLightyears;
	float GalacticPathPreferGuideStarsTillJump;
	float HandControlDefaultOffset;
	float HandControlFreeMoveAngleOffset;
	float HandControlFreeMoveMaxOffset;
	float HandControlGizmoScale;
	float HandControlMaxLockDistance;
	float HandControlMaxOffset;
	float HandControlMinLockDistance;
	float HandControlMoveBlendRate;
	float HandControlMoveSpeed;
	float HandControlMoveSpeedTurbo;
	float HandControlPitchSpeed;
	float HandControlPointerLength;
	float HandControlPointerLengthMini;
	float HandControlRotateBlendRate;
	float HandControlRotateSpeed;
	float HandControlWarpSelectAngle;
	float HandControlZoomSpeed;
	float HandGizmoInnerRadius;
	float HandGizmoInnerThickness;
	float HandGizmoLineThickness;
	float HandGizmoMinAlpha;
	float HandGizmoRadius;
	float HandPitchFactorMin;
	float HandPitchFactorRange;
	float HandPitchMaxDistance;
	float HandTurnFactorMin;
	float HandTurnFactorRange;
	float HandZoomFactorMin;
	float HandZoomFactorRange;
	float HexMarkerOuterWidth;
	float HexMarkerRadius;
	float HexMarkerRotation;
	float HexMarkerWidth;
	float HexStackOffsetX;
	float HexStackOffsetXOdd;
	float HexStackOffsetY;
	float IntroCameraLookSmoothRate;
	float IntroFadeInRate;
	float IntroFadeOutRate;
	float IntroTitleFadeTrigger;
	float IntroTitleHoldTime;
	float IntroTitleTextureScale;
	float LargeAreaColourScale;
	float LastSelectedPathAlphaMul;
	float MarkerDropShadowMult;
	float MarkerDropShadowSize;
	float MenuCursorRadiusHmd;
	float MenuOffsetHmd;
	float MenuRotateHmd;
	float MenuScaleHmd;
	float MenuSideOffsetHmd;
	float OffWorldDistance;
	float PathRenderingSelectedEndAlpha;
	float PathRenderingSelectedStartAlpha;
	float PathRenderingSelectedStepAlpha;
	float PathRenderingUnselectedEndAlpha;
	float PathRenderingUnselectedStartAlpha;
	float PathRenderingUnselectedStepAlpha;
	float PathToTargetIndicatorTimeFactor;
	float PathToTargetLineTimeFactor;
	float PathUIAlpha;
	float PathUIConfirmSelectionMultiplier;
	float PathUIDotLength;
	float PathUIGapLength;
	float PathUIHeight;
	float PathUISelectionGenerosity;
	float PathUISelectionHandInvalidLength;
	float PathUISelectionHandLineSelectAngle;
	float PathUISelectionHandSystemSelectAngle;
	float PathUISelectionMouseDeadZone;
	float PathUISelectionMouseSmoothRate;
	float PathUISelectionMultiplierMouse;
	float PathUISelectionMultiplierPad;
	float PathUISelectionMultiplierPushing;
	float PathUISlotRadiusInner;
	float PathUISlotRadiusOuter;
	float PathUISlotRadiusRing;
	float PathUISlotSpacing;
	float PathUISlotWidthRing;
	float PathUIWidth;
	float PathUIXOffset;
	float PathUIYOffset;
	float PlanetUIIconLargeScale;
	float PlanetUIIconMediumScale;
	float PlanetUIIconSmallScale;
	float PurpleRevealFixedZoom;
	float PurpleStarRevealAnimTime;
	float SelectionTreeAlpha;
	float ShowPopupAtCameraMinDistance;
	float ShowUIHelpDuration;
	int32_t SolarInfoPanelHeight;
	float SolarInfoPanelScaleVR;
	int32_t SolarInfoPanelWidth;
	float SolarLabelScaleDistanceVR;
	float SolarMarkerPanelScaleVR;
	float StarBlurIntroMultiplier;
	float StarBlurLineWidth;
	float StarBlurMaxBlurLength;
	float StarBlurMaxDistanceFromCamera;
	float StarBlurSizeMultiplier;
	float StarPathUIWidth;
	float SystemInfoPanelGeneralAlpha;
	float TimeForGalmapAutoNavModeSelectionInSeconds;
	float TransitionTime;
	NMS_Toolkit::TkCurveType AnostreakAlphaCurve;
	NMS_Toolkit::TkCurveType AnostreakValueCurve;
	bool GizmoOnHand;
	NMS_Toolkit::TkCurveType MarkerPulseEndCurve;
	NMS_Toolkit::TkCurveType MarkerPulseStartCurve;
	bool NewStyleLookAtCamera;
	NMS_Toolkit::TkCurveType TransitionOutCurve;
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

//Dependency: NMSString0x40
struct TkAnimNodeData
{
	int32_t RotIndex;
	int32_t ScaleIndex;
	int32_t TransIndex;
	NMS::NMSString0x40 Node;
};


} //namespace NMS_Toolkit

namespace NMS_Globals
{

//Dependency: GcLightShaftProperties
//Dependency: Vector2f
//Dependency: TkImGuiSettings
//Dependency: TkGraphicsDetailPreset
//Dependency: Vector4f
//Dependency: Colour
struct GcGraphicsGlobals
{
	NMS_Toolkit::TkImGuiSettings ImGui;
	NMS::Vector4f ShellsSettings[4];
	NMS::Vector4f TessSettings[4];
	NMS_GameComponents::GcLightShaftProperties LightShaftProperties;
	NMS_GameComponents::GcLightShaftProperties StormLightShaftProperties;
	NMS::Vector4f LensParams;
	NMS::Vector4f MipLevelDebug;
	NMS::Colour ScanColour;
	NMS::Vector4f ShadowBias;
	NMS::Vector4f ShadowSplit;
	NMS::Vector4f ShadowSplitCameraView;
	NMS::Vector4f ShadowSplitShip;
	NMS::Vector4f ShadowSplitSpace;
	NMS::Vector4f ShadowSplitStation;
	NMS::Vector4f TaaSettings;
	NMS::Vector4f TerrainMipDistanceHigh;
	NMS::Vector4f TerrainMipDistanceLow;
	NMS::Vector4f TerrainMipDistanceMed;
	NMS::Vector4f TerrainMipDistanceUlt;
	NMS::Colour UIColour;
	NMS::Colour UIShipColour;
	NMS::Colour VerticalColourBottom;
	NMS::Colour VerticalColourTop;
	NMS::Vector4f VerticalGradient;
	std::vector<int32_t> CascadeRenderSequence;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetsPC[4];
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetiOS;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetMacOS;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetNX64Handheld;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetOberon;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4Pro;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4ProVR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS4VR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS5;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetPS5VR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetSwitch2Handheld;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetTrinity;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetTrinityVR;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetXB1;
	NMS_Toolkit::TkGraphicsDetailPreset GraphicsDetailPresetXB1X;
	float VariableUpdatePeriodModifers[4];
	NMS::Vector2f WindDir1;
	NMS::Vector2f WindDir2;
	float AlphaCutoutMax;
	float AlphaCutoutMin;
	float AtmosphereSize;
	float Brightness;
	float Contrast;
	float DirectionLightFOV;
	float DirectionLightRadius;
	float DirectionLightShadowBias;
	float DOFAmountManual;
	float DOFAmountManualFull;
	float DOFAmountManualFullIndoor;
	float DOFAmountManualLight;
	float DOFAmountManualLightIndoor;
	float DOFAutoFarAmount;
	float DOFAutoFarFarPlane;
	float DOFAutoFarFarPlaneFade;
	float DOFAutoFarNearPlane;
	float DOFFarFadeDistance;
	float DOFFarFadeDistanceCave;
	float DOFFarFadeDistanceInteraction;
	float DOFFarFadeDistanceManual;
	float DOFFarFadeDistanceManualIndoor;
	float DOFFarFadeDistanceSpace;
	float DOFFarFadeDistanceWater;
	float DOFFarPlane;
	float DOFFarPlaneCave;
	float DOFFarPlaneInteraction;
	float DOFFarPlaneManual;
	float DOFFarPlaneSpace;
	float DOFFarPlaneWater;
	float DOFFarStrengthWater;
	float DOFNearAdjustInteraction;
	float DOFNearFadeDistance;
	float DOFNearFadeDistanceManual;
	float DOFNearMinInteraction;
	float DOFNearPlane;
	float FarClipDistance;
	float FoliageSaturationMax;
	float FoliageSaturationMin;
	float FoliageValueMax;
	float FoliageValueMin;
	float FrustumJitterAmount;
	float FrustumJitterAmountDLSS;
	float GrassSaturationMax;
	float GrassSaturationMin;
	float GrassValueMax;
	float GrassValueMin;
	float HBAOBias;
	float HBAOIntensity;
	float HBAORadius;
	float HDRExposure;
	float HDRExposureCave;
	float HDRGamma;
	float HDRLutExposure;
	float HDRLutGamma;
	float HDRLutToe;
	float HDROffset;
	float HDROffsetCave;
	float HDRThreshold;
	float HDRThresholdCave;
	float HUDDistance;
	float HUDMotionPos;
	float HUDMotionPosSpring;
	float HUDMotionX;
	float HUDMotionXSpring;
	float HUDMotionY;
	float HUDMotionYSpring;
	float HueVariance;
	float LensDirt;
	float LensDirtCave;
	float LensOffset;
	float LensOffsetCave;
	float LensScale;
	float LensScaleCave;
	float LensThreshold;
	float LensThresholdCave;
	float LowHealthDesaturationIntensityMax;
	float LowHealthDesaturationIntensityMin;
	float LowHealthDesaturationIntensityTimeSinceHit;
	float LowHealthFadeInTime;
	float LowHealthFadeOutTime;
	float LowHealthOverlayIntensity;
	float LowHealthPulseRateFullShield;
	float LowHealthPulseRateLowShield;
	float LowHealthStrengthFullShield;
	float LowHealthStrengthLowShield;
	float LowHealthVignetteEnd;
	float LowHealthVignetteStart;
	float LUTDistanceFlightMultiplier;
	float MaxParticleRenderRange;
	float MaxParticleRenderRangeSpace;
	float MaxSpaceFogStrength;
	float MinPixelSizeOfObjectsInShadowsCockpitOnPlanet;
	float MinPixelSizeOfObjectsInShadowsPlanet;
	float MinPixelSizeOfObjectsInShadowsSpace;
	float ModelRendererLightIntensity;
	float MotionBlurShutterAngle;
	float MotionBlurShutterSpeed;
	float MotionBlurThresholdDefault;
	float MotionBlurThresholdInVehicle;
	float MotionBlurThresholdOnFoot;
	float MotionBlurThresholdSpace;
	float NearClipDistance;
	float New_BounceLightIntensity;
	float New_BounceLightPower;
	float New_BounceLightWarp;
	float New_SideRimColourMixer;
	float New_SideRimWarp;
	float New_SkyLightIntensity;
	float New_SkyLightPower;
	float New_SkyLightWarp;
	float New_TopRimColourMixer;
	float New_TopRimIntensity;
	float New_TopRimPower;
	float New_TopRimWarp;
	float NoFocusMaxFPS;
	float Old_BounceLightIntensity;
	float Old_BounceLightPower;
	float Old_BounceLightWarp;
	float Old_SideRimColourMixer;
	float Old_SideRimWarp;
	float Old_SkyLightIntensity;
	float Old_SkyLightPower;
	float Old_SkyLightWarp;
	float Old_TopRimColourMixer;
	float Old_TopRimIntensity;
	float Old_TopRimPower;
	float Old_TopRimWarp;
	float PetModelRendererLightIntensity;
	float PhotoModeBloomGainMax;
	float PhotoModeBloomGainMedium;
	float PhotoModeBloomGainMin;
	float PhotoModeBloomThresholdMax;
	float PhotoModeBloomThresholdMedium;
	float PhotoModeBloomThresholdMin;
	float PhotoModeDefaultBloomValue;
	float PhotoModeMediumValue;
	float QuantizeTime;
	float QuantizeTimeCameraView;
	float QuantizeTimeShip;
	float QuantizeTimeSpace;
	float Redo_BounceIntensity;
	float Redo_LightIntensity;
	float Redo_SkyIntensity;
	float ReflectionStrength;
	float RingAvoidanceSphereInterpTime;
	float RingRadius;
	float RingSize;
	float Saturation;
	float SaturationVariance;
	float ScanAlpha;
	float ScanBandWidth;
	float ScanClamp;
	float ScanDistance;
	float ScanEffectSpeed;
	float ScanFadeInTime;
	float ScanFadeOutTime;
	float ScanFresnel;
	float ScanHeightScale;
	float ScanHorizontalScale;
	float ScanObjectFade;
	float ShadowBillboardOffset;
	float ShadowLength;
	float ShadowLengthCameraView;
	float ShadowLengthFreighter;
	float ShadowLengthFreighterAbandoned;
	float ShadowLengthShip;
	float ShadowLengthSpace;
	float ShadowLengthStation;
	int32_t ShadowMapSize;
	float SharpenFilterAmount;
	float SharpenFilterDepthFactorEnd;
	float SharpenFilterDepthFactorStart;
	float ShieldDownScanlineTime;
	float Single1ScanBandWidth;
	float Single1ScanEffectSpeed;
	float Single1ScanHeightScale;
	float Single1ScanHorizontalScale;
	float Single1ScanObjectFade;
	float Single1ScanTime;
	float Single2ScanBandWidth;
	float Single2ScanEffectSpeed;
	float Single2ScanHeightScale;
	float Single2ScanHorizontalScale;
	float Single2ScanObjectFade;
	float Single2ScanTime;
	float SkySaturationMax;
	float SkySaturationMin;
	float SkyValueMax;
	float SkyValueMin;
	float SpaceIBLBlendDistance;
	float SpaceIBLBlendStart;
	float SpaceMieFactor;
	float SpaceScale;
	float SpaceSunFactor;
	float SunLightBlendTime;
	float SunLightIntensity;
	float SunRayDecay;
	float SunRayDensity;
	float SunRayExposure;
	float SunRayWeight;
	int32_t SupersamplingLevel;
	float TaaAccumDelay;
	float TaaHighFreqConstant;
	float TaaLowFreqConstant;
	int32_t TargetTextureMemUsageMB;
	float TeleportFlashTime;
	int32_t TerrainAnisoHi;
	int32_t TerrainAnisoLow;
	int32_t TerrainAnisoMed;
	int32_t TerrainAnisoUlt;
	int32_t TerrainBlocksPerFrameHi;
	int32_t TerrainBlocksPerFrameLow;
	int32_t TerrainBlocksPerFrameMed;
	int32_t TerrainBlocksPerFrameOberon;
	int32_t TerrainBlocksPerFramePs430;
	int32_t TerrainBlocksPerFramePs460;
	int32_t TerrainBlocksPerFrameUlt;
	int32_t TerrainBlocksPerFrameXb130;
	int32_t TerrainBlocksPerFrameXb160;
	int32_t TerrainDroppedMipsLow;
	int32_t TerrainDroppedMipsMed;
	float TerrainMipBiasLow;
	float TerrainMipBiasMed;
	float ToneMapExposure;
	float ToneMapExposureCave;
	float ValueVariance;
	float VignetteEnd;
	float VignetteEndMoveVR;
	float VignetteEndMoveVRShip;
	float VignetteEndRidingVR;
	float VignetteEndTurnRidingVR;
	float VignetteEndTurnVR;
	float VignetteEndTurnVRShip;
	float VignetteStart;
	float VignetteStartMoveVR;
	float VignetteStartMoveVRShip;
	float VignetteStartRidingVR;
	float VignetteStartTurnRidingVR;
	float VignetteStartTurnVR;
	float VignetteStartTurnVRShip;
	float VignetteVRMoveInterpTime;
	float VignetteVRMoveInterpTimeShip;
	float VignetteVRRidingInterpTime;
	float VignetteVRTurnInterpTime;
	float VignetteVRTurnInterpTimeShip;
	float VignetteVRTurnRidingInterpTime;
	float WarpK;
	float WarpKCube;
	float WarpKDispersion;
	float WarpScale;
	float WaterHueShift;
	float WaterSaturation;
	float WaterValue;
	float WonderModelRendererLightIntensity;
	bool AllowPartialCascadeRender;
	bool ApplyTaaTest;
	bool CenterRenderSpaceOffset;
	bool DebugLinesDepthTest;
	bool DOFEnableBokeh;
	bool DOFEnableNewBokehShader;
	bool DOFEnablePhysCamera;
	bool EnableCrossPipeSharing;
	bool EnableSSR;
	bool EnableTerrainCachePs4Base;
	bool EnableTerrainCachePs4Pro;
	bool EnableTerrainCacheXb1Base;
	bool EnableTerrainCacheXb1X;
	bool EnableTextureStreaming;
	bool EnableVariableUpdate;
	bool ForceCachedTerrain;
	bool ForceEvictAllTextures;
	bool ForceStreamAllTextures;
	bool ForceUncachedTerrain;
	bool FullscreenScanEffect;
	bool IBLReflections;
	bool Redo_On;
	bool ShadowQuantized;
	bool ShowReflectionProbes;
	bool ShowTaaBuf;
	bool ShowTaaCVarianceBuf;
	bool ShowTaaNVarianceBuf;
	bool ShowTaaVarianceBuf;
	bool TonemapInLuminance;
	bool UseImposters;
	bool UseTaaResolve;
};

struct GcPlacementGlobals
{
	float LodDistancesDetail[5];
	float LodDistancesDistant[5];
	float LodDistancesLandmark[5];
	float LodDistancesObject[5];
	float AddToLodDistance;
	float HighInterpValue;
	float InterpValueVariance;
	float LowInterpValue;
	float MaxDensity;
	float MaxFrequency;
	float MaxPatchSize;
	int32_t MaxPatchVariance;
	float MidInterpValue;
	float MinDensity;
	float MinFrequency;
	float MinPatchSize;
	int32_t MinPatchVariance;
	float MultiplyLodDistance;
};

//Dependency: GcInWorldUIScreenData
//Dependency: GcProjectorOffsetData
//Dependency: GcShipDialogue
//Dependency: GcScanEffectData
//Dependency: GcCameraAnomalySetupData
//Dependency: GcCreatureAlertData
//Dependency: GcPlayerCommunicatorMessage
//Dependency: GcCameraSpawnSetupData
//Dependency: GcResourceCollectEffect
//Dependency: GcBoidData
//Dependency: GcProjectileLineData
//Dependency: GcPlayerStickData
//Dependency: GcInventoryValueData
//Dependency: GcJourneyMedalTiers
//Dependency: VariableSizeString
//Dependency: GcShipDialogueTreeEnum
//Dependency: TkCurveType
//Dependency: Vector3f
//Dependency: Colour
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSeed
//Dependency: Vector2f
struct GcPlayerGlobals
{
	enum class MouseSmoothModeEnum : uint32_t
	{
		Off = 0,
		Sprung = 1,
	};

	enum class ControlModesEnum : uint32_t
	{
		Normal = 0,
		FlightStick = 1,
		Inverted = 2,
	};

	NMS_GameComponents::GcProjectorOffsetData LargeWeaponMenuTransforms;
	NMS_GameComponents::GcProjectorOffsetData QuickMenuLauncherTransforms;
	NMS_GameComponents::GcProjectorOffsetData QuickMenuLauncherTransformsNoBuildMenu;
	NMS_GameComponents::GcProjectorOffsetData WeaponMenuTransforms;
	NMS_GameComponents::GcScanEffectData ArmourHighlightScanEffect;
	NMS_GameComponents::GcScanEffectData HolsterHighlightEffect;
	NMS_GameComponents::GcScanEffectData InteractHighlightEffect;
	NMS_GameComponents::GcScanEffectData MeleeHitEffect;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyAtlasStationSpawnData;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyBlachHoleSpawnData;
	NMS_GameComponents::GcCameraAnomalySetupData AnomalyMiniStationSpawnData;
	NMS_GameComponents::GcInWorldUIScreenData BinocularInfoScreenOffset;
	NMS_GameComponents::GcInWorldUIScreenData BinocularInfoScreenOffsetGun;
	NMS_GameComponents::GcInWorldUIScreenData DefaultLeftHandTransform;
	NMS_GameComponents::GcInWorldUIScreenData DefaultLeftHandTransformVehicle;
	NMS_GameComponents::GcInWorldUIScreenData FrontendBaseScreenshotVROffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendMessagesOffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendOffset;
	NMS_GameComponents::GcInWorldUIScreenData FrontendOffsetV2;
	NMS_GameComponents::GcInWorldUIScreenData FrontendPhotoModeVROffset;
	NMS_GameComponents::GcInWorldUIScreenData InventoryOffset;
	NMS_GameComponents::GcInWorldUIScreenData InventoryOffsetV2;
	NMS_GameComponents::GcInWorldUIScreenData InWorldCompass;
	NMS_GameComponents::GcInWorldUIScreenData QuickMenuOffset;
	NMS_GameComponents::GcInWorldUIScreenData QuickMenuOffsetV2;
	NMS::Vector3f BinocularScopeOffset;
	NMS::Colour DefaultMuzzleColour;
	NMS::Colour DefaultMuzzleLaserColour;
	NMS::Vector3f HandScreenRoboOnScreenOffset;
	NMS::Vector3f HolsterHeadOffset;
	NMS::Colour InteractionLineActiveColour;
	NMS::Colour InteractionLineBaseColour;
	NMS::Vector3f LeftHandModeFishingRodAttachSocketCorrection;
	NMS::Vector3f LeftHandModeWeaponAttachSocketCorrection;
	NMS::Vector3f PointingWristAngles;
	NMS::Colour SearchGroupIconColour;
	NMS::Colour StarFieldColour;
	NMS::Colour TerrainEditorMuzzleColourAdd;
	NMS::Colour TerrainEditorMuzzleColourFlatten;
	NMS::Colour TerrainEditorMuzzleColourSubtract;
	NMS::Colour TerrainEditorMuzzleColourUndo;
	NMS::Vector3f TraderStayCloseLockBaseOffset;
	NMS::Vector3f WeaponBarrelOffset;
	NMS::Vector3f WeaponOffset;
	NMS_GameComponents::GcShipDialogue TraderHailMessages;
	NMS_GameComponents::GcPlayerCommunicatorMessage PirateHailMessage;
	NMS_GameComponents::GcPlayerCommunicatorMessage PoliceScanHailMessage;
	NMS::NMSString0x20A TraderHailReceiveOSDLoc;
	NMS::NMSString0x20A TraderHailRefusedOSDLoc;
	std::vector<NMS_GameComponents::GcCreatureAlertData> AlertTable;
	NMS::NMSString0x10 DebugSearchGroup;
	NMS::VariableSizeString DefaultShipFilename;
	NMS::GcSeed DefaultShipSeed;
	NMS::NMSString0x10 ExosuitUpgradeProduct;
	NMS::NMSString0x10 ExperienceDefeatBugQueenRewardID;
	NMS::NMSString0x10 ExperienceDefeatBugQueenRewardIDProduct;
	NMS::NMSString0x10 ExperienceDefeatJellyBossRewardID;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsCorrupt;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsNearHiveReward;
	NMS::NMSString0x10 ExperienceDefeatLevel5SentinelsReward;
	NMS::NMSString0x10 ExperienceDefeatLevel5SpaceSentinelsReward;
	std::vector<NMS_GameComponents::GcCameraSpawnSetupData> FirstSpawnDataTable;
	NMS::NMSString0x10 FootDustEffect;
	NMS::VariableSizeString Gun;
	NMS::VariableSizeString NoShadowMaterial;
	NMS::NMSString0x10 PulseEncounterSpaceEggID;
	std::vector<float> TechLearningProbabilities;
	std::vector<float> TechRarityData;
	std::vector<float> WantedEscalateTime;
	std::vector<float> WantedExtremeEscalateTime;
	std::vector<float> WantedTimeout;
	uint64_t AutoSaveMaxTime;
	uint64_t AutoSaveMinTime;
	uint64_t PointingWristAdjustmentTimeMilliseconds;
	NMS_GameComponents::GcResourceCollectEffect CrystalResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect FishingResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect ShardResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceMeleeCollect;
	NMS_GameComponents::GcResourceCollectEffect TerrainResourceMiniCollect;
	NMS_GameComponents::GcBoidData MissileSwarm;
	NMS_GameComponents::GcProjectileLineData PlayerBullet;
	NMS_GameComponents::GcProjectileLineData RobotBullet;
	NMS_GameComponents::GcProjectileLineData ShipBullet;
	NMS_GameComponents::GcPlayerStickData AmbientModeLookStickData;
	NMS_GameComponents::GcInventoryValueData FreighterValueData;
	NMS_GameComponents::GcPlayerStickData LookStickData;
	NMS_GameComponents::GcInventoryValueData ShipValueData;
	NMS_GameComponents::GcPlayerStickData StickData;
	NMS_GameComponents::GcInventoryValueData WeaponValueData;
	NMS_GameComponents::GcJourneyMedalTiers MedalTiers;
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailReceiveRegular[4];
	NMS::Vector2f ExperienceFlybyStartAngle;
	NMS::Vector2f FingerButtonQuickMenuButtonSize;
	NMS::Vector2f MouseSpringStrength;
	NMS::Vector2f MouseSpringStrengthMaxDelta;
	NMS::Vector2f MouseSpringStrengthMinDelta;
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailReceiveFight[2];
	NMS_GameComponents::GcShipDialogueTreeEnum TraderHailSend[2];
	float AbandonedFreighterRechargeMod;
	float AbandonedFreighterStaminaRate;
	float AbandonedFreighterStaminaRecoveryMod;
	float AimDecay;
	float AimDisperseCooldownFactor;
	float AimDisperseCooldownTime;
	float AimDisperseMinTime;
	float AimDisperseTime;
	float AimDistanceShip;
	float AimMinWeight;
	float AimOffset;
	float AimShootableTargetAngle;
	float AimSpeed;
	float AimWeightAdd;
	float AlienPodAggroDecay;
	float AlienPodAggroSpring;
	float AnimRunBlendPoint;
	float AnimRunSpeed;
	float AnimWalkBlendPoint;
	float AnimWalkSpeed;
	float AnimWalkToRunSpeed;
	float AtmosphereEffectOffset;
	float AtmosphereEffectTime;
	float AutoAimFixedInterceptSpeed;
	float AutoAimMaxAccelFactor;
	float AutoAimMaxAngle;
	float AutoAimMinScreenDistance;
	float AutoAimRadiusExtra;
	float AutoAimStickyMax;
	float AutoAimStickyMin;
	float AutoAimStickyRailgun;
	float AutoAimTimeOut;
	float AutoLandRange;
	float AutoLandTime;
	float AutoSaveRangeInSpace;
	float AutoSaveRangeInVehicle;
	float AutoSaveRangeOnFoot;
	float BalanceSpeed;
	float BalanceStrength;
	float BaseUnderwaterDepth;
	float BeaconActivateRange;
	float BeamRecoil;
	int32_t BestGuildRank;
	float BincoularRayThickness;
	float BinocularAimOffset;
	float BinocularCreatureCastSphereSize;
	float BinocularRangePlanet;
	float BinocularRangeSpace;
	float BinocularRayThicknessVR;
	float BinocularScopeScale;
	float BinocularScopeSmoothing;
	float BinocularsHUDDistanceVR;
	float BinocularsHUDScaleVR;
	float BlastRecoilSpring;
	float BodyRealignmentDelay;
	float BulletBend;
	int32_t BulletClipMultiplier;
	int32_t BulletCostReducer;
	float CannonRecoilSpring;
	int32_t ChanceHighGradeIllegal;
	float ChargedEnergyBallSpeed;
	float ChargeMeleeCooldown;
	float ChargeTime;
	float ClimbableStickinessAngle;
	float ClingAngleThreshold;
	float ClingBrakeMultiplier;
	float ClingSpeedThreshold;
	float CockpitEjectFirstPersonOffset;
	float CockpitEjectFirstPersonOffsetTime;
	float CockpitEjectSideTestRange;
	float CockpitEjectTestEndHeightOffset;
	float CockpitEjectTestRadius;
	float CockpitEjectTestSphereRadius;
	float CockpitEjectTestSphereRange;
	float CockpitEjectTestStartHeightOffset;
	float CombatEscalateTime;
	float CombatEscapeRadius;
	float CombatEscapeTime;
	float CombatSpawnMinWantedTime;
	float CommunicatorSpeed;
	NMS_Globals::GcPlayerGlobals::ControlModesEnum ControlModes;
	float CreativeModeDeathFadeInTime;
	float CreativeModeDeathFadeOutTime;
	float CreatureRideFadeInTime;
	float CreatureRideFadeOutTime;
	float CriticalHitDesatFreq;
	float CriticalHitDesatTime;
	float CriticalHitTime;
	float CrosshairTime;
	float CrouchHeightToDisableLegBlendingVR;
	float DamageRateWhenUnderNoGravity;
	float DamageRepairFactor;
	float DeathDamageDrainChargeFactor;
	int32_t DeathDamageTechBrokenPercent;
	float DeathScreenFadeInThirdPerson;
	float DeathScreenFadeInTime;
	float DeathScreenFadeInUnderwaterThirdPerson;
	float DeathScreenFadeOutTime;
	float DeathScreenMaxRegenWaitTime;
	float DeathScreenMinRegenWaitTime;
	float DeathScreenPauseTime;
	float DeathScreenShipFadeInTime;
	float DeepWaterDepth;
	int32_t DefaultHealthPips;
	int32_t DefaultHitPoints;
	int32_t DefaultShipHealthPips;
	float DestroyEffectFinalDelay;
	float DroneProbeScanTime;
	float DroneScanTimeToForget;
	float DroneSpawnAccelerator;
	float DroneStartLocationRadius;
	float EarlyHazardTimeMultiplier;
	float EnergyBallSpeed;
	float EnergyDamageMinTime;
	float EnergyDischargeRateDeepWater;
	float EnergyDischargeRateFloatingInSpace;
	float EnergyDischargeRateHigh;
	float EnergyDischargeRateLow;
	float EnergyDischargeRateMedium;
	float EnergyPainRate;
	float ExertionFromPainTime;
	float ExertionSmoothTime;
	float ExperienceAlertRange;
	float ExperienceAlertSightAngle;
	float ExperienceAlertSightRange;
	float ExperienceDefeatBugQueenFiendSplatDelay;
	float ExperienceDefeatBugQueenRewardChance;
	float ExperienceDefeatBugQueenRewardDelay;
	float ExperienceDefeatLevel5SentinelsDisableWantedTime;
	float ExperienceDefeatLevel5SentinelsRewardDelay;
	float ExperienceDefeatLevel5SpaceSentinelsMessageDelay;
	float ExperienceDefeatLevel5SpaceSentinelsRewardDelay;
	float ExperienceDefeatLevel5SpaceSentinelsWarpDelay;
	float ExperienceDroneSpawnAngle;
	float ExperienceDroneSpawnOffset;
	float ExperienceDroneTimeMax;
	float ExperienceDroneTimeMin;
	float ExperienceFlybyScareRadius;
	float ExperienceFlybyScareTime;
	float ExperienceHardPiratesDamageMaxOdds;
	float ExperienceInterestingDroneDistance;
	float ExperienceInterestingFreighterDistance;
	float ExperienceInterestingPoliceDistance;
	float ExperienceInterestingShipDistance;
	int32_t ExperienceMaxCivilianShipSpawnsInSpace;
	int32_t ExperienceMaxCivilianShipSpawnsOnPlanet;
	float ExperienceMediumPiratesDamageMaxOdds;
	float ExperienceMessageBroadcastNearbyDistance;
	int32_t ExperiencePirateCloseAttackPercentage;
	float ExperiencePirateFreighterAttackRange;
	float ExperiencePiratesDifficultyVariance;
	float ExperiencePirateTimeMax;
	float ExperiencePirateTimeMin;
	float ExperienceShipTimeMax;
	float ExperienceShipTimeMin;
	float ExperienceWalkerSize;
	float ExplodeShakeMaxDist;
	float ExplodeShakeMaxDistSpace;
	float ExplodeShakeStrength;
	float ExplosionBoundingInset;
	float ExplosionBoundingInsetRange;
	float ExplosionScaleVariance;
	float ExplosionTimePerEffect;
	float ExplosionTimeVariance;
	float FingerButtonClickSize;
	float FingerButtonClickTime;
	float FingerButtonQuickMenuOffset;
	float FingerButtonRadiusOffset;
	float FingerTipOffset;
	float FistClenchBlendInTime;
	float FistClenchBlendOutTime;
	float FlamethrowerDispersion;
	float FlashGrow;
	float FlashPosX;
	float FlashPosY;
	float FlashPosZ;
	float FlashPulse;
	float FlashSize;
	float FlashSpeed;
	float FoodValueThresholdAverage;
	float FoodValueThresholdBad;
	float FoodValueThresholdBest;
	float FoodValueThresholdGood;
	float FoodValueThresholdWorst;
	float FootDustScale;
	float FootOffset;
	float FreeJetpackRange;
	float FreeJetpackRangeNonTerrain;
	float FreeJetpackRangePrime;
	float FreeJetpackSlopeAngle;
	float FreeJetpackSlopeAnglePrime;
	float FreighterAbandonedHazardTimeMultiplier;
	float FreighterCoolFactor;
	float FreighterPriceExp2;
	float FreighterProbeScanTime;
	float FreighterSpawnedOnYouFadeInTime;
	float FrigateFlybyMarkerAlwaysHideDistance;
	float FrigateFlybyMarkerAlwaysShowDistance;
	float FrontShieldOffsetOff;
	float FrontShieldOffsetOffVR;
	float FrontShieldOffsetOn;
	float FrontShieldOffsetOnVR;
	float FrontShieldScaleVR;
	float FrontShieldSlerpTime;
	float FrontShieldSlerpTimeVR;
	float FrontShieldSpeedSlowdown;
	float FrontShieldUpOffsetVR;
	float FullClipReloadSpeedMultiplier;
	float GhostbusterAmp1;
	float GhostbusterAmp2;
	float GhostbusterAmp3;
	float GhostbusterFreq1;
	float GhostbusterFreq2;
	float GhostbusterFreq3;
	float GhostbusterSpeed1;
	float GhostbusterSpeed2;
	float GhostbusterSpeed3;
	float GhostbusterStart1;
	float GhostbusterStart2;
	float GhostbusterStart3;
	float GhostbusterStartLength;
	float GrassPushDistance;
	float GrassPushDistanceFeet;
	int32_t GrenadeBaseClipSize;
	float GrenadeBounceDamping;
	float GrenadeBounceMaxSpeed;
	float GrenadeCarveRadius;
	float GrenadeRecoil;
	float GrenadeStopExplodeTime;
	float GrenadeTerrainDeformRadius;
	float GroundRunSpeed;
	float GroundRunSpeedLowG;
	float GroundWalkBrake;
	float GroundWalkBrakeWhileMoving;
	float GroundWalkForceMultiplier;
	float GroundWalkRecoverySpeedDamper;
	float GroundWalkSpeed;
	float GroundWalkSpeedLowG;
	float GroundWalkSpeedTeleportHmd;
	int32_t GunBaseClipSize;
	float GunRecoil;
	float GunRecoilMax;
	float GunRecoilMin;
	float GunRecoilSettleSpring;
	float GunRecoilSpring;
	float GunRightOffset;
	float GunUpOffset;
	float HandHoldInteractAngleRate;
	float HandHoldInteractDistanceRate;
	float HandInteractionFresnel;
	float HandInteractionFresnelMax;
	float HandInteractionLightIntensity;
	float HandInteractionLightIntensityMax;
	float HandInteractionLightOffset;
	float HandInteractionLightOffsetAt;
	float HandInteractionLightTime;
	float HandScreenActivationAngle;
	float HandScreenActivationAngleDown;
	float HandScreenActivationAngleOffset;
	float HandScreenActivationRange;
	float HandScreenAngleRange;
	float HandScreenLookActiveAngle;
	float HandScreenMinAngle;
	float HandScreenMinAngleWithPoint;
	float HandScreenPenetration;
	float HandScreenRestingTurnAngle;
	float HandSmoothAngleRange;
	float HandSmoothMinAngle;
	float HandSwimDecayTime;
	float HandSwimForce;
	float HandSwimMax;
	float HandSwimMaxForce;
	float HandSwimMin;
	float HardLandMax;
	float HardLandMin;
	float HardLandPainTime;
	float HardLandTime;
	float HardModeHazardDamageRateMultiplier;
	float HardModeHazardDamageWoundRateMultiplier;
	float HardModeHazardRechargeUnderground;
	float HardModeHazardTimeMultiplier;
	float HazardDamageMinTime;
	float HeadBinocularsOffset;
	float HeadBinocularsRadius;
	float HealthPipRechargeRate;
	float HealthRechargeMinTimeSinceDamage;
	float HeatShieldTime;
	float HelmetBob;
	float HelmetLag;
	float HelmetMaxLag;
	int32_t HighGuildRank;
	float HitReactBlendOutSpeedMax;
	float HitReactBlendOutSpeedMin;
	float HitReactNoiseAmount;
	float HmdResetButtonTime;
	float HMDResetFlashTime;
	float HmdTurnAngle;
	float HmdTurnAnglePad;
	float HmdTurnSpeed;
	float HmdTurnSpeedPad;
	float HmdTurnThreshold;
	float HoldActionDistX;
	float HoldActionDistY;
	float HoldActionDistZ;
	float HoldDistX;
	float HoldDistY;
	float HoldDistZ;
	float HoldForce;
	float HoldMaxForce;
	float HoldRotate;
	float HoldTime;
	float HolsterGrabFrontOffset;
	float HolsterGrabRadius;
	int32_t HUDHeightPosX;
	int32_t HUDHeightPosY;
	float InteractionAimOffset;
	float InteractionButtonRange;
	float InteractionButtonRangeVehicle;
	float InteractionFocusIncrease;
	float InteractionFocusIncreaseCreature;
	float InteractionFocusIncreasePet;
	float InteractionFocusTime;
	float InteractionFocusTimeCreature;
	float InteractionFocusTimePet;
	float InteractionFocusTimeShootable;
	float InteractionLineCircleOffsetMax;
	float InteractionLineCircleOffsetMin;
	float InteractionLineCircleRadius;
	float InteractionLineCircleSpeed;
	float InteractionLineCircleThickness;
	float InteractionLineNumCirclesPerMetre;
	float InteractionLineSplineMinDistance;
	float InteractionLineSplineOffset;
	float InteractionLineSplineOffsetMin;
	float InteractionLineSplineOffsetRange;
	float InteractionScanRange;
	float InteractionSubstanceRange;
	float InteractNearbyRadius;
	float JetpackBrake;
	float JetpackDrainHorizontalFactor;
	float JetpackFillRate;
	float JetpackFillRateFleetMultiplier;
	float JetpackFillRateMidair;
	float JetpackFillRateNexusMultiplier;
	float JetpackFillRateSpaceStationMultiplier;
	float JetpackForce;
	float JetpackForceDeadPlanetExtra;
	float JetpackHelmetBob;
	float JetpackIgnitionForce;
	float JetpackIgnitionForceDeadPlanetExtra;
	float JetpackIgnitionTime;
	float JetpackJetAnimateInTime;
	float JetpackJetAnimateOutTime;
	float JetpackMaxSpeed;
	float JetpackMaxUpSpeed;
	float JetpackMinIgnitionTime;
	float JetpackMinLevel;
	float JetpackUnderwaterDrainRate;
	float JetpackUnderwaterFillRate;
	float JetpackUpForce;
	float JetpackUpForceDeadPlanetExtra;
	float JoystickOrientationTrimAltOc;
	float JoystickOrientationTrimAltOp;
	float LabelOffset;
	float LabelSpringTime;
	float LaserBeamAmmoUseTime;
	float LaserBeamCore;
	float LaserBeamFlickerAmp;
	float LaserBeamFlickerFreq;
	float LaserBeamMineRate;
	float LaserBeamTerrainDeformRadius;
	float LaserBeamTerrainDeformVariance;
	float LaserEndOffset;
	float LaserMiningDamageMultiplier;
	float LaserPlayerOffset;
	float LaserRecoil;
	float LaserShakeMax;
	float LaserShakeMin;
	float LaserShipRange;
	float LaserWeaponRange;
	float LeanAmount;
	float LeanAmountFwd;
	float LeanBackMaxAngle;
	float LeanFwdMaxAngle;
	float LeanLeftMaxAngle;
	float LeanRightMaxAngle;
	float LookRayRadius;
	float LootForceMultiplier;
	int32_t LowGuildRank;
	int32_t LowHealthEffectPips;
	int32_t LowHealthEffectShield;
	float MaxArmExtension;
	int32_t MaxBuildHeight;
	float MaxClingableSlopeAngle;
	float MaxFallSpeed;
	int32_t MaxHealthPips;
	float MaximumCrouchVR;
	float MaximumHeadHeightIncreaseVR;
	float MaximumHorizontalOffsetVR;
	int32_t MaxNumDestroyEffects;
	int32_t MaxNumShipsAttackingPlayer;
	float MaxProjectileRadiusMultiplier;
	float MaxResource;
	float MaxSlopeAngle;
	float MaxSpidermanSlopeAngle;
	float MaxTimeAfterMeleeBeforeBoost;
	float MaxTimeInMeleeBoost;
	float MaxWalkableSlopeAngle;
	int32_t MaxWordCategoriesToSayPerNPC;
	int32_t MedGuildRank;
	float MeleeBoostAirForce;
	float MeleeCooldown;
	float MeleeCooldownAlt;
	float MeleeDamageScale;
	float MeleeDistance;
	float MeleeDistance3P;
	float MeleeDistanceAlt;
	float MeleeForcePush;
	float MeleeHitTime;
	float MeleeOffset;
	float MeleePosDelta;
	float MeleeRadius;
	float MeleeRadiusAlt;
	float MeleeRange;
	float MeleeSpeedBoost;
	float MeleeSpeedBoostRangeMultiplier;
	float MeleeSpeedDamageBoost;
	float MeleeStaminaDrain;
	float MeleeTime;
	float MeleeToAirBoostInitialImpulse;
	float MinArmExtension;
	float MinBinocActiveTime;
	float MinDistanceToCommunicatorTarget;
	float MinEnergyPercentOnRespawn;
	float MinimumPushOffForceToSlide;
	float MiniportalAppearEffectTime;
	float MiniportalDisappearEffectTime;
	int32_t MinNumDestroyEffects;
	float MinRespawnCharge;
	float MinSlideTime;
	float MinSpidermanSlopeAngle;
	float MinTimeAfterMeleeBeforeBoost;
	float MinTimeToHoldSpidermanPose;
	float MinUpAmount;
	float MouseAimZone;
	float MouseCrosshairAlphaFade;
	float MouseCrosshairAlphaFadeSpeed;
	float MouseCrosshairLineAlpha;
	float MouseCrosshairLineWidth;
	float MouseCrosshairMaxAlpha;
	float MouseCrosshairMultiplier;
	float MouseCrosshairShipStrength;
	float MouseCrosshairShipStrengthOld;
	float MouseDeadZone;
	float MouseDeadZoneOld;
	float MouseDeadZoneVehicle;
	float MouseFlightCorrectionBrakeMultiplier;
	float MouseFlightCorrectionMultiplier;
	float MouseMaxLength;
	float MouseMaxLengthOld;
	float MouseMaxLengthVehicle;
	NMS_Globals::GcPlayerGlobals::MouseSmoothModeEnum MouseSmoothMode;
	float MoveStickHighRangeLimit;
	float MoveStickRunLimit;
	float MultiplayerMinWanteEscalationTime;
	float MuzzleFlashMulThirdPerson;
	float NormalModeHazardDamageRateMultiplier;
	float NormalModeHazardDamageWoundRateMultiplier;
	float NormalModeHazardRechargeUnderground;
	float NormalModeHazardTimeMultiplier;
	float NoStickTeleportDirectionChangeDeadzoneAngle;
	int32_t NumberOfWarpsRequiredForFreightersToSpawn;
	int32_t NumTechShopSlots;
	float ObjectScanTime;
	float OtherPlayerTrackArrowRange;
	float PainColourSeperateAmount;
	float PainFlickerAmount;
	float PainTime;
	float PassiveWeaponZoomFOV;
	float PassiveWeaponZoomFOVThirdPerson;
	float PickRange;
	float PirateBattleMarkerRange;
	float PirateBattleMarkerTime;
	float PirateBattleMaxTime;
	float PirateBattleWarnTime;
	float PirateBountyInitTime;
	float PirateBountyMaxDistance;
	float PirateBountyTimeoutTime;
	float PirateFlybyAttackDistancePastPlayer;
	float PirateFlybyAttackMaxTime;
	float PirateFlybyAttackMinTime;
	float PirateFlybyAttackProbability;
	int32_t PirateHailPercent;
	float PirateProbeAttackWaitTime;
	float PirateProbeAttackWarnTime;
	float PirateProbeHailPause;
	float PirateProbeInitTime;
	float PirateProbeScanTime;
	float PirateProbeScanTotalTime;
	float PirateRaidMaxTime;
	float PirateRaidMinTime;
	float PlayerSpaceTransferRange;
	float PlayerTransferRange;
	float PlayerViewTargetRange;
	float PointDownToMoveAngle;
	float PointDownToMoveBackAngle;
	float ProjectileDamageFalloff;
	float ProjectileEndTime;
	float PulseEncounterMarkerAlwaysHideDistance;
	float PulseEncounterMarkerAlwaysShowDistance;
	float PulseEncounterMarkerShowAngle;
	float PulseEncounterMinTimeInPulse;
	float PulseEncounterProbeTime;
	float PulseEncounterProbeTimeRare;
	float PulseRecoilSpring;
	float PushForceAirFactor;
	float PushForceDecay;
	float QuadAutoAimOffset;
	float RailRecoilSpring;
	float ReloadButtonHoldTimeToHolster;
	float ReloadTapButtonSpeedIncrease;
	float ResourceBlobFinalScaleDistance;
	float RespawnOnPadRadius;
	int32_t RobotMultiplierWithFriends;
	float RocketBootsActivationWindow;
	float RocketBootsBoostForce;
	float RocketBootsBoostOffTime;
	float RocketBootsBoostOnTime;
	float RocketBootsBoostTankDrainSpeed;
	float RocketBootsDoubleTapTime;
	float RocketBootsDriftBraking;
	float RocketBootsDriftDownwardForce;
	float RocketBootsDriftEndTime;
	float RocketBootsDriftForce;
	float RocketBootsDriftTankDrainSpeed;
	float RocketBootsForceDuration;
	float RocketBootsForceStartTime;
	float RocketBootsHeightAdjustDownStrength;
	float RocketBootsHeightAdjustTime;
	float RocketBootsHeightAdjustUpStrength;
	float RocketBootsImpulse;
	float RocketBootsJetpackMinLevel;
	float RocketBootsMaxDesiredHeight;
	float RocketBootsMaxSpeed;
	float RocketBootsMinDesiredHeight;
	float RocketBootsWindUpBraking;
	float RocketBootsZigZagForceDuration;
	float RocketBootsZigZagStrength;
	float ScanBeamMainWidth;
	float ScanBeamWidth;
	float ScanFadeInTime;
	float ScanFadeOutTime;
	float ScanLabelTime;
	float ScanRotate;
	float ScanRotateBeamWdith;
	float ScanRotateDist;
	float ScanRotateWobbleAmp;
	float ScanWobbleAmp;
	float ScanWobbleAmp2;
	float ScanWobbleFreq;
	float ScanWobbleFreq2;
	int32_t ShieldMaximum;
	float ShieldRechargeMinTimeSinceDamage;
	float ShieldRechargeRate;
	float ShieldRestoreDelay;
	float ShieldRestoreSpeed;
	float ShipCameraLag;
	float ShipCoolFactor;
	float ShipPriceExp2;
	float ShipSummonLastSafeMargin;
	float ShootOffset;
	float ShootPrepTime;
	float ShootSizeBase;
	float ShootSizeMaxXY;
	float ShootSizeMaxZ;
	float ShootSizeMinXY;
	float ShootSizeMinZ;
	float ShootSizeTime;
	float ShotgunDispersion;
	float SleepFadeTime;
	float SlopeSlideBrake;
	float SlopeSlidingSpeed;
	float SolarRegenFactor;
	float SpaceJetpackDrainRate;
	float SpaceJetpackForce;
	float SpaceJetpackIgnitionForce;
	float SpaceJetpackMaxSpeed;
	float SpaceJetpackUpForce;
	float SpaceMaxGravityDist;
	float SpaceMinGravityDist;
	float SpawningDistanceBetweenPlayersAfterWarp;
	float SpawningSpaceBattleLookOffset;
	float SpawningSpaceBattleLookOffsetUp;
	float SpeedLinesLength;
	float SpeedLinesMaxAlpha;
	float SpeedLinesMinAlpha;
	float SpeedLinesOffset;
	float SpeedLinesRadiusIncrement;
	float SpeedLinesRadiusStartMax;
	float SpeedLinesRadiusStartMin;
	float SpeedLinesSpeedMax;
	float SpeedLinesSpeedMin;
	float SpeedLinesStartFade;
	float SpeedLinesTotalLength;
	float SpeedLinesWidthMax;
	float SpeedLinesWidthMin;
	float StaminaRate;
	float StaminaRecoveredFactor;
	float StaminaRecoveryRate;
	float StarFieldDensity;
	float StarFieldRadius;
	float StarFieldStarSize;
	float StartHazardTimeMultiplier;
	float StartSpookTimeMultiplier;
	int32_t StealthBaseCharge;
	float StealthDrainRate;
	float StealthMinLevel;
	float StealthRechargeRate;
	float StickDeadZoneMax;
	float StickDeadZoneMin;
	float StickYDampingThreshold;
	int32_t SuitInventoryStartSeed;
	float SummonArcRange;
	float SummonShipDirectionChangeDeadZoneAngle;
	float SurfaceSwimForce;
	float SurfaceSwimMaxSpeed;
	float TakeDamageImpulse;
	float TargetDistance;
	float TargetRadius;
	float TeleportAppearEffectSpeed;
	float TeleportArcLengthMultiplier;
	float TeleportArcRadius;
	float TeleportArcRadiusInner;
	float TeleportBallCompletionFactorFadeout;
	float TeleportBallDistanceFadeAlpha;
	float TeleportBallFadeMinDistance;
	float TeleportBallFadeRange;
	float TeleportBallRadius;
	float TeleportBeamAnimHeight;
	float TeleportBeamAnimSpeed;
	float TeleportBeamGravity;
	float TeleportBeamGravityMax;
	float TeleportChargeFadeInTime;
	float TeleportChargeMaxDistance;
	float TeleportChargeMinDistance;
	float TeleportChargeMinTime;
	float TeleportChargeMoveSpeed;
	float TeleportDirectionAltHandRange;
	float TeleportDisappearEffectSpeed;
	float TeleportHmdMaxFade;
	float TeleportHmdMinFade;
	float TeleportHmdOutFactor;
	float TeleportInitiateThreshold;
	float TeleportInstantTravelDistance;
	float TeleportLastKnownThreshold;
	float TeleportLineBezierDistanceFactor;
	float TeleportLineBezierOffset;
	float TeleportLineEndFadeEnd;
	float TeleportLineEndFadeStart;
	float TeleportLineFadeRange;
	float TeleportLineFadeStart;
	float TeleportMaxTravelDistance;
	float TeleportMaxTravelDistanceVertical;
	float TeleportMotionOffsetAmount;
	float TeleportMotionOffsetUp;
	float TeleportStrafeDistance;
	float TeleportTotalTime;
	float TeleportTravelSurfaceAngle;
	float TemperatureDisplaySampleTime;
	float TerrainLaserRange;
	float ThirdPersonRecoilMultiplier;
	float ThirdPersonWeaponAttachRotationCorrectionAngle;
	float ThirdPersonWeaponXOffset;
	float TimeHoldDownAccelerateToLaunchFromOutpost;
	float TrackArrowStaticTargetOffsetMultiplier;
	float TraderApproachDistance;
	float TraderApproachTime;
	int32_t TraderCommunicationBanMaxTime;
	int32_t TraderCommunicationBanMinTime;
	float TraderHailDistance;
	float TraderHailTime;
	float TraderHealthFightThreshold;
	float TraderSpamTimeWait;
	float TraderStayCloseLockOffset;
	float TraderStayCloseLockSin1Coeff;
	float TraderStayCloseLockSin1Offset;
	float TraderStayCloseLockSin2Coeff;
	float TraderStayCloseLockSin2Offset;
	float TraderStayCloseLockSinsAdd;
	float TraderStayCloseLockSpread;
	float TraderStayCloseLockSpreadAdd;
	float TraderStayCloseLockSpreadTime;
	float UnderwaterBrake;
	float UnderwaterCurrentStrengthHorizontalMax;
	float UnderwaterCurrentStrengthHorizontalMin;
	float UnderwaterCurrentStrengthVertical;
	float UnderwaterFloatRange;
	float UnderwaterFluidDensity;
	float UnderwaterForce;
	float UnderwaterImpact;
	float UnderwaterJetpackEscapeForce;
	float UnderwaterJetpackForce;
	float UnderwaterMargin;
	float UnderwaterMaxJetpackEscapeSpeed;
	float UnderwaterMaxJetpackSpeed;
	float UnderwaterMaxSpeedTotal;
	float UnderwaterMaxSpeedTotalJetpacking;
	float UnderwaterMinDepth;
	float UnderwaterPlayerMass;
	float UnderwaterPlayerSphereDepthOffsetFirstPerson;
	float UnderwaterPlayerSphereDepthOffsetMax;
	float UnderwaterPlayerSphereDepthOffsetMin;
	float UnderwaterPlayerSphereDepthOffsetPitchedExtra;
	float UnderwaterPlayerSphereOffsetMaxPitch;
	float UnderwaterPlayerSphereOffsetMinPitch;
	float UnderwaterPlayerSphereRadius;
	float UnderwaterSurfaceForceFlattenAngleMin;
	float UnderwaterSurfaceForceFlattenAngleRange;
	float UnderwaterSwimMaxSpeed;
	float UtilityWeaponRange;
	float VehicleHazardDampingModifier;
	float VehicleLaserRange;
	float VehicleRaceResultsHintTime;
	float VRModeHazardTimeMultiplier;
	float VRStartHazardTimeMultiplier;
	float WalkerAlertRange;
	float WalkerSightAngle;
	float WalkerSightRange;
	float WantedDroneEventRadius;
	float WantedEnemyAttackAmount;
	float WantedLevelDelay;
	float WantedLevelPlayerRange;
	float WantedLevelPlayerRangeSpace;
	float WantedMinorCrimeAmount;
	float WantedMinPlanetTime;
	float WantedMinSpaceTime;
	float WantedTimeoutAggressive;
	float WantedWitnessFuzzyTime;
	float WantedWitnessTimer;
	float WeaponBobBlendTime;
	float WeaponBobFactorRun;
	float WeaponBobFactorWalk;
	float WeaponBobFactorWalkDeadZone;
	float WeaponCannonMinUnchargedShotThreshold;
	float WeaponCannonMinUnchargedShotTime;
	float WeaponCannonMinWeaponTimer;
	float WeaponChangeModeTime;
	float WeaponCoolFactor;
	float WeaponGrenadeTime;
	float WeaponGunTime;
	float WeaponHolsterDelay;
	float WeaponLag;
	float WeaponLowerDelay;
	float WeaponPriceExp2;
	float WeaponRailFireTime;
	float WeaponRailRechargeTime;
	float WeaponShotgunSlowdown;
	float WeaponZoomFOV;
	float WeaponZoomHorzRotation;
	float WeaponZoomRecoilMultiplier;
	float WeaponZoomVertRotation;
	float WitnessAIDamageAngle;
	float WitnessAIDamageDistance;
	float WitnessSenseEnhancement;
	float WitnessSenseEnhancementTime;
	int32_t WordCategoriesRequiredToConverse;
	float WoundDamageDecayTime;
	float WoundDamageLimit;
	float WoundDamageLimitShip;
	float WoundTimeMinimum;
	NMS_Toolkit::TkCurveType AimDisperseCurve;
	bool AutoAim;
	NMS_Toolkit::TkCurveType AutoAimCentreOffsetCurve;
	NMS_Toolkit::TkCurveType AutoAimDotCurve;
	bool BoltcasterHasTracer;
	bool ClampPitch;
	bool CreatureRideFade;
	bool DoPlayerAppearInVehicleEffect;
	bool EnableHeadMovements;
	bool EnableLeaning;
	bool EnablePointDownToSmoothMove;
	bool FireButtonReloadsWeapon;
	bool ForceFreighterProcTechRandom;
	bool FrontShieldEnabled;
	bool HandSwimEnabled;
	bool HideHazardPanel;
	bool HmdSmoothTurnAlways;
	bool InteractNearbyRadiusEnabled;
	bool InventoryDamage;
	bool LuckyWithTech;
	bool MouseCrosshairVisible;
	NMS_Toolkit::TkCurveType MouseFlightCurve;
	bool MultiplayerShareWanted;
	bool NeverPreyedOn;
	bool PassiveLook;
	bool PermanantAltFire;
	bool PermanantFire;
	bool RecenterViewWhenEnteringShip;
	bool ReportAllProjectileDamage;
	bool RequireHandsOnShipControls;
	bool RocketBootsEnabled;
	bool RocketBootsUseCustomCamera;
	bool ShowFirstPersonCharacterShadowPCVR;
	bool ShowFirstPersonCharacterShadowPSVR;
	bool ShowLowAmmoWarning;
	NMS_Toolkit::TkCurveType StickCurve;
	bool TeleportRecentre;
	NMS_Toolkit::TkCurveType UnderwaterBuoyancyDepthCurve;
	bool UpgradeExosuitWithProduct;
	bool UseEnergy;
	bool UseHazardProtection;
	bool UseLargeHealthBar;
	NMS_Toolkit::TkCurveType WeaponBobBlendCurve;
	bool WeaponZoomEnabled;
};

struct GcRichPresenceGlobals
{
	float EvaluationPeriod;
	int32_t GameModePriority;
	float IdleThreshold;
	int32_t PlanetLocationPriority;
	float PublishPeriod;
	int32_t SpaceCombatPriority;
	int32_t SpaceLocationPriority;
	int32_t StormLocationPriority;
	bool ShowOnScreen;
};

//Dependency: GcDroneWeaponData
//Dependency: GcCamouflageData
//Dependency: GcScanEffectData
//Dependency: GcRobotLaserData
//Dependency: GcSentinelDamagedData
//Dependency: GcSentinelQuadWeaponData
//Dependency: GcSentinelResource
//Dependency: GcSentinelPounceBalance
//Dependency: GcDroneDataWithId
//Dependency: GcSentinelMechWeaponData
//Dependency: GcMechTargetSelectionWeightingSettings
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: NMSString0x20
//Dependency: Vector2f
struct GcRobotGlobals
{
	NMS_GameComponents::GcScanEffectData DroneScanEffect;
	NMS_GameComponents::GcRobotLaserData QuadLaser;
	NMS_GameComponents::GcRobotLaserData WalkerLaser;
	NMS::Vector3f DroneCriticalOffset;
	NMS::Vector3f DroneRepairOffset;
	NMS::Vector3f QuadCriticalOffset;
	NMS::Vector3f WalkerGunOffset1;
	NMS::Vector3f WalkerGunOffset2;
	NMS::Vector3f WalkerHeadEyeOffset;
	NMS_GameComponents::GcSentinelDamagedData DamageData[13];
	NMS_GameComponents::GcSentinelQuadWeaponData QuadWeapons[4];
	NMS_GameComponents::GcSentinelResource SentinelResources[13];
	NMS_GameComponents::GcCamouflageData RobotCamoData;
	NMS::NMSString0x10 AttackScan;
	std::vector<NMS_GameComponents::GcDroneDataWithId> DroneControlData;
	std::vector<NMS_GameComponents::GcDroneWeaponData> DroneWeapons;
	NMS::NMSString0x10 ForceDroneWeapon;
	NMS::NMSString0x10 RepairEffect;
	std::vector<NMS::NMSString0x10> SentinelMechAvailableWeapons;
	std::vector<NMS_GameComponents::GcSentinelMechWeaponData> SentinelMechWeaponData;
	std::vector<NMS::NMSString0x10> StoneMechAvailableWeapons;
	NMS::NMSString0x10 SummonerDroneBuildupEffect;
	NMS::NMSString0x10 SummonerDroneSpawnEffect;
	std::vector<NMS::NMSString0x20> WalkerLeftLegArmourNodes;
	std::vector<NMS::NMSString0x20> WalkerRightLegArmourNodes;
	NMS::NMSString0x10 WalkerTitanFallEffect;
	NMS::NMSString0x10 WalkerTitanFallShake;
	NMS_GameComponents::GcSentinelPounceBalance PounceData[13];
	float FireRateModifierScores[13];
	int32_t SentinelSpawnLimits[13];
	NMS_GameComponents::GcMechTargetSelectionWeightingSettings MechTargetSelectionWeightingSettings;
	NMS::Vector2f MechPatrolPauseTime;
	NMS::Vector2f QuadAttackTurnSpeeds;
	NMS::Vector2f QuadLookTurnSpeeds;
	NMS::Vector2f QuadPatrolPauseTime;
	float AttackMoveArrivalDistance;
	float AttackMoveMaxTime;
	int32_t AttackSentinelWantedValue;
	float CollisionDistance;
	float CombatSpawnSquadRadiusDrones;
	float CombatSpawnSquadRadiusRobots;
	float CombatWaveSpawnTime;
	float CorruptedDroneRepairInteruptCooldownTime;
	float CriticalHitSizeDrone;
	float CriticalHitSizeMech;
	float CriticalHitSizeQuad;
	float CriticalHitSizeWalker;
	float DroneAggressiveInvestigateAttackTime;
	int32_t DroneAggroDamage;
	float DroneAttackGetInRangeBoost;
	float DroneAttackMaxAngleDownFromPlayer;
	float DroneAttackPlayerHeightOffset;
	float DroneCombatSpawnAngle;
	float DroneCrimeCooldown;
	float DroneCrimeCooldownWaitTime;
	float DroneCrimeCooldownWaitTimeAtMax;
	float DroneCrimePostInvestigateWaitTime;
	float DroneCrimeWitnessInvestigateDistance;
	float DroneCriminalScanTime;
	float DroneDecisionTime;
	float DroneHeightAngle;
	float DroneHitImpulseCooldown;
	float DroneHitImpulseFlipForceDownBound;
	float DroneHitImpulseLaserMultiplier;
	float DroneHitImpulseMinVerticalComponentScale;
	float DroneHitImpulseMultiplier;
	float DroneInvestigateMaxPositionAngle;
	float DroneInvestigateMinChaseRange;
	float DroneInvestigateMinCrimeInterval;
	float DroneInvestigateMinPositionAngle;
	float DroneInvestigateMinScanTime;
	float DroneInvestigateMinWitnessRange;
	float DroneInvestigateMinWitnessRangeCantSee;
	float DroneInvestigateMinWitnessTime;
	float DroneInvestigateRepositionTime;
	float DroneInvestigateSpeedBoost;
	float DroneInvestigateSpeedBoostRange;
	float DroneInvestigateSpeedBoostStartDistance;
	float DroneMaxScanAngle;
	float DroneMaxScanLength;
	float DroneMoveDistancePlayerMechMultiplier;
	float DronePatrolAttackSightTime;
	float DronePatrolInvestigateSpeedBoost;
	float DronePatrolSearchTime;
	float DronePerceptionMinHearingSpeed;
	float DronePerceptionRange;
	float DronePerceptionRangeHostile;
	float DronePerceptionSightAngle;
	float DronePerceptionSightRange;
	float DronePerceptionSightRangeHostile;
	float DronePushLaserForce;
	float DronePushMaxSpeed;
	float DronePushMaxTurn;
	float DroneRadius;
	float DroneReAttackTime;
	float DroneScale;
	float DroneScanMinPerpSpeed;
	float DroneScanRadius;
	float DroneScanWaitTime;
	float DroneSearchLookDistance;
	float DroneSearchLookSpeed;
	float DroneSearchPickNearbyAngleMax;
	float DroneSearchPickNearbyAngleMin;
	float DroneSearchPickNearbyTime;
	float DroneSpawnFadeTime;
	float DroneSpawnHeight;
	float DroneSpawnTime;
	float DroneSquadSpawnRadius;
	float DroneUpdateDistForMax;
	float DroneUpdateDistForMin;
	float DroneUpdateFPSMax;
	float DroneUpdateFPSMin;
	float EncounterRangeToAllowPulledIntoFight;
	float EncounterRangeToBlockWantedSpawns;
	float EnergyExplodeTime;
	float ExoMechJumpCooldownTimeInCombat;
	float ExoMechJumpCooldownTimeOutOfCombat;
	float FakeQuadGuard;
	float FireRateLastHitBypassTime;
	float FireRateModifierMax;
	float FireRateModifierMin;
	float FollowRoutineArriveRadius;
	float FriendlyDroneBeepReplaceChatChance;
	float FriendlyDroneChatChanceBecomeWanted;
	float FriendlyDroneChatChanceIdle;
	float FriendlyDroneChatChanceLoseWanted;
	float FriendlyDroneChatChanceSummoned;
	float FriendlyDroneChatChanceUnsummoned;
	float FriendlyDroneChatCooldown;
	float FriendlyDroneDissolveTime;
	float GrenadeLaunchFlightTime;
	float HeightTestSampleDistance;
	float HeightTestSampleTime;
	int32_t HitsToCancelStealth;
	int32_t HitsToCancelStealthSmall;
	float LabelOffsetDrone;
	float LabelOffsetMech;
	float LabelOffsetQuad;
	float LabelOffsetSpiderQuad;
	float LabelOffsetWalker;
	float LaserFadeTime;
	float LaserFadeTime2;
	float LineOfSightReturnCheckMinDistance;
	float LineOfSightReturnCheckRadius;
	float LineOfSightReturnRange;
	int32_t MaxNumInvestigatingDrones;
	int32_t MaxNumPatrolDrones;
	float MechAlertRange;
	float MechAttackMoveAngleToleranceDeg;
	float MechAttackMoveFacingAngleTolerance;
	float MechAttackMoveHoldPositionTime;
	float MechAttackMoveMaxOffsetRotation;
	float MechAttackMoveMinOffsetRotation;
	float MechAttackRange;
	float MechAttackRate;
	float MechEndJumpMinDistanceInCombat;
	float MechEndJumpMinDistanceOutOfCombat;
	float MechFadeInDistance;
	float MechFadeInTime;
	float MechFadeOutTime;
	float MechHearingRange;
	float MechMinMaintainFireTargetTime;
	float MechMinMaintainTargetTime;
	float MechMinTurretAngle;
	float MechPatrolRadius;
	float MechSightAngle;
	float MechSightRange;
	float MechStartJumpMinDistanceInCombat;
	float MechStartJumpMinDistanceOutOfCombat;
	float MedicDroneMinHealTime;
	float MinInvestigateMessageTime;
	int32_t MinRobotKillsForHint;
	float QuadAlertRange;
	float QuadAttackMinMoveTime;
	float QuadAttackMoveMinDist;
	float QuadAttackMoveMinRange;
	float QuadAttackMoveRange;
	float QuadAttackRate;
	float QuadAttackTurnAngleMax;
	float QuadAttackTurnAngleMin;
	float QuadCannotSeeTargetRepositionTime;
	int32_t QuadDamageMoveThreshold;
	float QuadEvadeCooldown;
	float QuadEvadeFacingAngle;
	float QuadHearingRange;
	float QuadHeight;
	float QuadJumpBackCheckRange;
	float QuadJumpBackDoFlipDistance;
	float QuadJumpBackFacingAngle;
	float QuadJumpBackHeightRange;
	float QuadJumpBackJumpDistance;
	float QuadJumpBackJumpMinLength;
	float QuadJumpBackMinTime;
	float QuadJumpBackRange;
	float QuadJumpBackRecoveryTime;
	float QuadJumpBackTestHeightOffset;
	float QuadJumpBackTestRadius;
	float QuadLaserSpringMax;
	float QuadLaserSpringMin;
	float QuadLookAngleMax;
	float QuadLookAngleMin;
	float QuadMinStationaryTime;
	float QuadNavRadius;
	float QuadObstacleSize;
	float QuadPatrolRadius;
	float QuadPounceDamageRadius;
	float QuadPounceOffset;
	float QuadRepositionHealthThresholdPercent;
	float QuadRepositionMaxTimeSinceHit;
	float QuadRepositionMinMoveDist;
	float QuadRepositionMinTargetDist;
	float QuadRepositionTargetDist;
	float QuadRepositionTimeout;
	float QuadSightAngle;
	float QuadSightRange;
	float QuadStealthCooldown;
	float QuadStealthRepositionHealthThresholdPercent;
	float QuadStealthRepositionHealthThresholdPercentSmall;
	float QuadStealthRepositionMaxTimeSinceHit;
	float QuadTurnBlendTime;
	float RepairChargeTime;
	float RepairCheckForTargetCooldownTime;
	float RepairEffectScaleDrone;
	float RepairEffectScaleQuad;
	float RepairOffset;
	float RepairOffsetChangeTime;
	float RepairRate;
	float RepairScanArriveDistance;
	float RepairScanRadius;
	float RobotHUDMarkerFalloff;
	float RobotHUDMarkerRange;
	float RobotMapScale;
	float RobotSightAngle;
	float RobotSightTimer;
	float RobotSteeringAvoidCreaturesWeight;
	float RobotSteeringAvoidDangerWeight;
	float RobotSteeringAvoidTurnWeight;
	float RobotSteeringFollowWeight;
	int32_t ScoreForMaxFireRateModifier;
	int32_t ScoreForMinFireRateModifier;
	float SentinelMechJumpCooldownTimeInCombat;
	float SentinelMechJumpCooldownTimeOutOfCombat;
	float SpiderPounceAngle;
	float SpiderPounceMinRange;
	float SpiderPounceRange;
	float SpiderQuadHeadTrackSmoothTime;
	float SpiderQuadHeight;
	float SpiderQuadMiniHeight;
	float SpiderQuadMiniNavRadius;
	float SpiderQuadMiniObstacleSize;
	float SpiderQuadNavRadius;
	float StoneEnemyTrackArrowOffsetMultiplier;
	float SummonerDroneBeginTime;
	float SummonerDroneBuildupTime;
	float SummonerDroneCooldown;
	float SummonerDroneCooldownOffset;
	int32_t SummonerDroneResummonThreshold;
	float SummonPreviewInterpSpeedMax;
	float SummonPreviewInterpSpeedMin;
	float SummonRadius;
	float SummonVerticalOffset;
	float TrackArrowOffsetMultiplier;
	float UnderwaterPerceptionMargin;
	float WalkerAttackAngle;
	float WalkerAttackRange;
	float WalkerAttackRate;
	float WalkerClosingRange;
	float WalkerEnergyLength;
	float WalkerEnergyMaxAlpha;
	float WalkerEnergyMinAlpha;
	float WalkerEnergyRadiusStartMax;
	float WalkerEnergyRadiusStartMin;
	float WalkerEnergySpeedMax;
	float WalkerEnergySpeedMin;
	float WalkerFastMoveFactor;
	float WalkerGuardAlertRange;
	float WalkerGunChargeTime;
	float WalkerGunRate;
	float WalkerGunShootTime;
	float WalkerHeadMaxPitch;
	float WalkerHeadMaxYaw;
	float WalkerHeadMoveTimeActive;
	float WalkerHeadMoveTimeIdle;
	float WalkerHeight;
	float WalkerLaserBodyOffset;
	float WalkerLaserOvershootEnd;
	float WalkerLaserOvershootStart;
	float WalkerLaserOvershootVehicleReducer;
	float WalkerLegShotDefendTime;
	float WalkerLegShotEnrageShotInterval;
	int32_t WalkerLegShotEnrageShotsPerVolley;
	float WalkerLegShotEnrageShotSpreadMax;
	float WalkerLegShotEnrageShotSpreadMin;
	float WalkerLegShotEnrageVolleyInterval;
	float WalkerMoveSpeed;
	float WalkerNavRadius;
	float WalkerObstacleSize;
	float WalkerPauseTime;
	float WalkerPushRadius;
	float WalkerPushTime;
	float WalkerTitanFallEffectScale;
	float WalkerTitanFallHeight;
	float WalkerTitanFallSpeed;
	bool DisableDronePerception;
	bool DroneChatter;
	bool DroneClickToMove;
	bool DroneEnableVariableUpdate;
	bool DroneHitImpulseEnabled;
	bool DronePatrolScanPlayer;
	bool DronesUseEscalationTimer;
	bool ForceShowDebugMoveTrail;
	bool SpawnFriendlyDrone;
	bool SummonerTestSummonEffects;
	bool WalkerLegShotDefendEnabled;
	bool WalkerLegShotEnrageEnabled;
};

//Dependency: GcSettlementProductionElement
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: GcSettlementBuildingCost
//Dependency: GcSettlementBuildingContribution
//Dependency: GcScanToRevealComponentData
//Dependency: GcSettlementGiftDetails
//Dependency: GcSettlementCustomJudgement
//Dependency: GcSettlementJudgementData
//Dependency: GcSettlementJobDetails
//Dependency: GcSettlementStatStrengthData
//Dependency: Colour
struct GcSettlementGlobals
{
	NMS::Colour NegativeStatColour;
	NMS::Colour PositiveStatColour;
	NMS_GameComponents::GcSettlementBuildingCost SettlementBuildingCosts[60];
	NMS_GameComponents::GcSettlementBuildingContribution SettlementBuildingContributions[60];
	NMS::NMSString0x20A BuildingProductionNotes[60];
	NMS::NMSString0x20A BuildingUpgradePageNames[60];
	NMS::NMSString0x20A SettlementBuildingClassGenericRequirement[60];
	NMS::NMSString0x20A SettlementBuildingClassGenericTitle[60];
	uint64_t SettlementBuildingTimes[60];
	NMS::NMSString0x20A JudgementMissionObjectives[12];
	NMS::NMSString0x20A JudgementUpdateMainText[12];
	NMS::NMSString0x20A JudgementUpdateSubtitles[12];
	NMS::NMSString0x20A JudgementUpdateTitles[12];
	NMS::NMSString0x20A LongAltResearchLocIDs[8];
	NMS::NMSString0x20A LongPolicyLocIDs[8];
	NMS::NMSString0x20A LongResearchLocIDs[8];
	NMS::NMSString0x20A NegativeFakePerkOSDLocIDs[8];
	NMS::NMSString0x20A NegativeStatChangeOSDLocIDs[8];
	NMS::NMSString0x20A PositiveFakePerkOSDLocIDs[8];
	NMS::NMSString0x20A PositiveStatChangeOSDLocIDs[8];
	NMS::NMSString0x20A ProcPerkDescriptions[8];
	NMS::NMSString0x20A ShortAltResearchLocIDs[8];
	NMS::NMSString0x20A ShortPolicyLocIDs[8];
	NMS::NMSString0x20A ShortResearchLocIDs[8];
	NMS::NMSString0x10 AltResearchPerks[8];
	NMS::NMSString0x10 NegativeStatChangeSubstances[8];
	NMS::NMSString0x10 PolicyPerks[8];
	NMS::NMSString0x10 PositiveStatChangeSubstances[8];
	NMS::NMSString0x10 ResearchPerks[8];
	NMS_GameComponents::GcScanToRevealComponentData BuilderNPCScanToRevealData;
	uint64_t TowerPowerRechargeTime[4];
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> AutophageGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> AutophageProductionElementsSelectable;
	std::vector<NMS_GameComponents::GcSettlementCustomJudgement> CustomJudgements;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> GekGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> GekProductionElementsSelectable;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> Gifts;
	std::vector<NMS_GameComponents::GcSettlementJobDetails> JobTypes;
	std::vector<NMS_GameComponents::GcSettlementJudgementData> Judgements;
	NMS::NMSString0x10 JudgementTextHashID;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> KorvaxGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> KorvaxProductionElementsSelectable;
	NMS::NMSString0x10 MiniMissionFailJudgement;
	NMS::NMSString0x10 MiniMissionSuccessJudgement;
	std::vector<NMS::NMSString0x20A> ScanEventsThatPreventSentinelAlert;
	NMS::NMSString0x10 SettlementCostAutophage;
	NMS::NMSString0x10 SettlementCostGek;
	NMS::NMSString0x10 SettlementCostKorvax;
	NMS::NMSString0x10 SettlementCostVykeen;
	NMS::NMSString0x10 SettlementMiniExpeditionMissionID;
	std::vector<NMS::NMSString0x10> TechGiftPerks;
	std::vector<NMS_GameComponents::GcSettlementGiftDetails> VykeenGifts;
	std::vector<NMS_GameComponents::GcSettlementProductionElement> VykeenProductionElementsSelectable;
	uint64_t AlertCycleDurationInSeconds;
	uint64_t BugAttackCycleDurationInSeconds;
	uint64_t BuildingFreeUpgradeTimeInSeconds;
	uint64_t BuildingUpgradeTimeInSeconds;
	uint64_t ProductionCycleDurationInSeconds;
	uint64_t ProductionSlotTimerOffsetInSeconds;
	uint64_t TowerRechargeTime;
	NMS_GameComponents::GcSettlementStatStrengthData PerkStatStrengthValues[8];
	float JudgementSelectionWeights[12];
	int32_t InitialStatsMaxValues[8];
	int32_t InitialStatsMinValues[8];
	float NormalisedStatBadThresholds[8];
	float NormalisedStatGoodThresholds[8];
	int32_t StatProductivityContributionModifiers[8];
	int32_t StatsMaxValues[8];
	int32_t StatsMinValues[8];
	int32_t AlertUnitsPerCycleRateModifier;
	int32_t BugAttackUnitsPerCycleRateModifier;
	float BuildingRevealCutsceneLength;
	int32_t DailyDebtPaymentModifier;
	int32_t InitialBuildingCountMax;
	int32_t InitialBuildingCountMin;
	int32_t InitialDebtCycles;
	float JudgementSpecificRacePartyChance;
	int32_t JudgementWaitTimeMax;
	int32_t JudgementWaitTimeMin;
	int32_t MaxInitialNegativePerksCount;
	int32_t MaxInitialPositivePerksCount;
	int32_t MaxNPCPopulation;
	int32_t MaxPerksCount;
	int32_t MinInitialNegativePerksCount;
	int32_t MinInitialPositivePerksCount;
	int32_t PopulationGrowthRatePerDayBad;
	int32_t PopulationGrowthRatePerDayGood;
	int32_t PopulationGrowthRatePerDayNeutral;
	float PopulationGrowthRateThresholdBad;
	float PopulationGrowthRateThresholdGood;
	float ProductionBoostConversionRate;
	int32_t ProductUnitsPerCycleRateModifier;
	float SettlementEntryMessageDistance;
	float SettlementMiniExpeditionSuccessChance;
	int32_t SettlementMiniExpeditionTime;
	float StartingPopulationScalar;
	int32_t SubstanceUnitsPerCycleRateModifier;
	bool StatIsGoodWhenPositive[8];
	bool StatProductionIsNegativeWhenBad[8];
	bool DebugForceShowHiddenPerks;
};

//Dependency: GcSpaceStormData
//Dependency: GcMultitoolPoolData
//Dependency: VariableSizeString
struct GcSimulationGlobals
{
	NMS::VariableSizeString AbandonedSpaceStationFile;
	std::vector<NMS::VariableSizeString> AtlasStationAnomalies;
	std::vector<NMS::VariableSizeString> BlackHoleAnomalies;
	NMS::VariableSizeString BlackHoleTunnelFile;
	NMS::VariableSizeString HeavyAirAbandonedFreighter;
	NMS::VariableSizeString HeavyAirCave;
	NMS::VariableSizeString HeavyAirSpaceStormDefault;
	std::vector<NMS_GameComponents::GcSpaceStormData> HeavyAirSpaceStormList;
	NMS::VariableSizeString HeavyAirUnderwater;
	std::vector<NMS_GameComponents::GcMultitoolPoolData> MultitoolPool;
	NMS::VariableSizeString NexusExteriorFile;
	NMS::VariableSizeString NexusFile;
	NMS::VariableSizeString None;
	NMS::VariableSizeString PirateSystemSpaceStationFile;
	NMS::VariableSizeString PlaceMarkerFile;
	NMS::VariableSizeString PlacementDroneFile;
	NMS::VariableSizeString PlanetAtmosphereFile;
	NMS::VariableSizeString PlanetAtmosphereMaterialFile;
	NMS::VariableSizeString PlanetGasGiantAtmosphereFile;
	NMS::VariableSizeString PlanetGasGiantAtmosphereMaterialFile;
	NMS::VariableSizeString PlanetMaterialFile;
	NMS::VariableSizeString PlanetRingFile;
	NMS::VariableSizeString PlanetRingMaterialFile;
	std::vector<NMS::VariableSizeString> PlanetTerrainMaterials;
	NMS::VariableSizeString PortalStoryTunnelFile;
	NMS::VariableSizeString PortalTunnelFile;
	std::vector<NMS::VariableSizeString> PrefetchMaterialResources;
	std::vector<NMS::VariableSizeString> PrefetchScenegraphResources;
	std::vector<NMS::VariableSizeString> PrefetchTextureResources;
	NMS::VariableSizeString SpaceStationFile;
	NMS::VariableSizeString StartingSceneFile;
	NMS::VariableSizeString TeleportTunnelFile;
	NMS::VariableSizeString WarpTunnelFile;
	uint64_t ProceduralBuildingsGenerationSeed;
	float GasGiantFadeDistanceEnd;
	float GasGiantFadeDistanceStart;
	float GasGiantFlowSpeed;
	float GasGiantFlowStrength;
	float WarpTunnelScale;
};

//Dependency: GcPlanetCloudProperties
//Dependency: GcPlanetWeatherColourData
//Dependency: GcPlanetSkyProperties
//Dependency: GcFogProperties
//Dependency: GcPhotoModeAdjustData
//Dependency: GcSpaceSkyColours
//Dependency: GcSpaceSkyProperties
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: Vector2f
struct GcSkyGlobals
{
	NMS_GameComponents::GcPlanetSkyProperties PlanetGasGiantProperties;
	NMS_GameComponents::GcPlanetSkyProperties PlanetPrimeProperties;
	NMS_GameComponents::GcPlanetSkyProperties PlanetProperties;
	NMS_GameComponents::GcFogProperties AbandonedFreighterFog;
	NMS_GameComponents::GcPlanetWeatherColourData NightSkyColours;
	NMS_GameComponents::GcSpaceSkyProperties SpaceSkyMax;
	NMS_GameComponents::GcSpaceSkyProperties SpaceSkyMin;
	NMS::Colour AbandonedFreighterFogColour;
	NMS::Colour AsteroidColour;
	NMS::Colour DayLightColour;
	NMS::Colour DuskLightColour;
	NMS::Colour HeavyAirColour1;
	NMS::Colour HeavyAirColour2;
	NMS::Colour NightFogColour;
	NMS::Colour NightHeightFogColour;
	NMS::Colour NightHorizonColour;
	NMS::Colour NightLightColour;
	NMS::Colour NightSkyColour;
	NMS::Vector3f SleepSunFromSettingsPos;
	NMS::Colour SpaceLightColour;
	NMS::Vector3f SunPosition;
	NMS::Vector3f SunRotationAxis;
	NMS_GameComponents::GcPlanetCloudProperties PlanetCloudsMax;
	NMS_GameComponents::GcPlanetCloudProperties PlanetCloudsMin;
	std::vector<NMS_GameComponents::GcSpaceSkyColours> SpaceSkyColours;
	NMS_GameComponents::GcPhotoModeAdjustData CloudAdjust;
	NMS_GameComponents::GcPhotoModeAdjustData FogAdjust;
	NMS_GameComponents::GcPhotoModeAdjustData VignetteAdjust;
	NMS::Vector2f PhotoModeVignette;
	float AmbientFactor;
	float BinaryStarChance;
	float CloudColourH;
	float CloudColourS;
	float CloudColourV;
	float CloudCoverSmoothTime;
	float CloudRatioSmoothTime;
	float CreatureStormThreshold;
	int32_t DayLength;
	float DayLengthSpookMultiplier;
	float ExtremeAudioLevel;
	float ForceFlightStrength;
	float ForceNightBlendValue;
	float ForceStormStrength;
	float FreshStartTimeOfDay;
	float HeavyAirScale;
	float InFlightStormStrength;
	float LowFlightFogThreshold;
	float MaxCloudCover;
	float MaxColourS;
	float MaxColourV;
	float MaxFogSaturation;
	float MaxFogValue;
	float MaxNightFade;
	float MaxRainWetness;
	float MaxSaturation;
	float MaxStormCloudCover;
	float MaxStormLengthHigh;
	float MaxStormLengthLow;
	float MaxSunsetAtmosphereFade;
	float MaxSunsetColourFade;
	float MaxSunsetFade;
	float MaxSunsetFogFade;
	float MaxSunsetHorizonFade;
	float MaxSunsetPosFade;
	float MaxTimeBetweenStormsExtremeFallback;
	float MaxTimeBetweenStormsHigh;
	float MaxTimeBetweenStormsLow;
	float MaxValue;
	float MidColourH;
	float MidColourS;
	float MidColourV;
	float MinColourS;
	float MinColourV;
	float MinFogSaturation;
	float MinFogValue;
	float MinNightFade;
	float MinSaturation;
	float MinStormLengthHigh;
	float MinStormLengthLow;
	float MinSunsetAtmosphereFade;
	float MinSunsetColourFade;
	float MinSunsetFade;
	float MinSunsetFogFade;
	float MinSunsetHorizonFade;
	float MinSunsetPosFade;
	float MinTimeBetweenStormsExtremeFallback;
	float MinTimeBetweenStormsHigh;
	float MinTimeBetweenStormsLow;
	float MinValue;
	float MulticolourH;
	float NebulaColour1S;
	float NebulaColour1V;
	float NebulaColour2S;
	float NebulaColour2V;
	float NebulaColourH;
	float NightHorizonBlendMax;
	float NightHorizonBlendMin;
	float NightLightBlendMax;
	float NightLightBlendMin;
	float NightSkyBlendMax;
	float NightSkyBlendMin;
	float NightThreshold;
	float NoAtmosphereColourMax;
	float NoAtmosphereColourStrength;
	float NoAtmosphereFogMax;
	float NoAtmosphereFogStrength;
	float PhotoModeMacroMaxDOFAngle;
	float PhotoModeMacroMaxDOFAperture;
	float PhotoModeSunSpeed;
	float RainbowAlpha;
	float RainbowDistance;
	float RainbowFadeWidth;
	float RainbowScale;
	float RainbowStormAlpha;
	float RainbowWidth;
	float RainWetnessFadeInTime;
	float RainWetnessFadeOutTime;
	float SpaceAtmosphereThickness;
	float StormAudioLevel;
	float StormCloudBottomColourMaxBlend;
	float StormCloudBottomColourMinBlend;
	float StormCloudSmoothTime;
	float StormCloudTopColourMaxBlend;
	float StormCloudTopColourMinBlend;
	float StormScreenFilterDistance;
	float StormScreenFilterFadeTime;
	float StormTransitionTime;
	float StormWarningTime;
	float SunClampAngle;
	float TakeoffStormThreshold;
	float TernaryStarChance;
	float ToFlightFadeTime;
	float ToFootFadeTime;
	float WaterHeavyAirAlpha;
	float WeatherBloomGain;
	float WeatherBloomGainSpeed;
	float WeatherBloomImpulseSpeed;
	float WeatherBloomThreshold;
	float WeatherBloomThresholdSpeed;
	float WeatherFilterSpaceTransitionChangeTime;
	NMS_Toolkit::TkCurveType DoFAdjustMagnitudeMaxCurve;
	bool ForceFlightSetting;
	bool ForceNightBlend;
	bool ForceStormSetting;
	bool SleepSunFromSettings;
	bool UpdateWeatherWhenSunLocked;
	NMS_Toolkit::TkCurveType WeatherBloomCurve;
};

//Dependency: GcScanEffectData
//Dependency: GcShipDataNames
//Dependency: GcPlayerSpaceshipControlData
//Dependency: GcPlayerSpaceshipAim
//Dependency: GcPlayerSpaceshipClassBonuses
//Dependency: GcSpaceshipAvoidanceData
//Dependency: GcPlayerStickData
//Dependency: GcPlayerSpaceshipWarpData
//Dependency: TkHitCurveData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x10
//Dependency: VariableSizeString
//Dependency: Vector2f
struct GcSpaceshipGlobals
{
	NMS_GameComponents::GcScanEffectData ShieldEffectScanData;
	NMS::Colour AlarmLightColour;
	NMS::Colour AlarmLightColourHostile;
	NMS::Vector3f AtmosphereLightOffset;
	NMS::Vector3f CockpitScale;
	NMS::Colour DamageLightColour;
	NMS::Colour DamageLightColourShield;
	NMS::Vector3f DamageLightOffsetLeft;
	NMS::Vector3f DamageLightOffsetRight;
	NMS::Vector3f DamageLightOffsetTop;
	NMS::Vector3f DefaultCentreOffset;
	NMS::Vector3f DefaultCentreOffsetDropship;
	NMS::Vector3f DefaultCentreOffsetRoyal;
	NMS::Vector3f DefaultCentreOffsetSail;
	NMS::Vector3f DefaultCentreOffsetScientific;
	NMS::Colour DirectionDockingInRangeColour;
	NMS::Colour DirectionDockingOutRangeColour;
	NMS::Colour GroundEffectBuildingColour;
	NMS::Colour GroundEffectWaterColour;
	NMS::Vector3f GunOffset3rdPersonLeft;
	NMS::Vector3f GunOffset3rdPersonRight;
	NMS::Vector3f GunOffsetLeft;
	NMS::Vector3f GunOffsetLeft2;
	NMS::Vector3f GunOffsetRight;
	NMS::Vector3f GunOffsetRight2;
	NMS::Vector3f HandControllerDeadZone;
	NMS::Vector3f HandControllerExtents;
	NMS::Vector3f HandControllerValueMultiplier;
	NMS::Vector3f HandControllerValueMultiplierSpace;
	NMS::Colour LandingEffectSpaceColourOverride;
	NMS::Colour MuzzleLightColour;
	NMS::Vector3f PostCollisionAngularFactor;
	NMS::Vector3f StickAnimationDamping;
	NMS::Colour TargetLockDangerColour;
	NMS::Colour TargetLockPassiveColour;
	std::vector<NMS::Vector3f> AlarmLightOffsets;
	std::vector<NMS_GameComponents::GcPlayerSpaceshipAim> GunAimArray;
	std::vector<NMS_GameComponents::GcPlayerSpaceshipAim> LaserAimArray;
	NMS::NMSString0x10 SailShipCoreTechID;
	std::vector<NMS::VariableSizeString> ShipModels;
	NMS::NMSString0x10 WaterEffectID;
	NMS::NMSString0x10 WaterJetHoverEffectID;
	NMS::NMSString0x10 WaterJetLandingEffectID;
	NMS::NMSString0x10 WaterJetTakeoffEffectID;
	NMS_GameComponents::GcPlayerSpaceshipControlData Control;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHeavy;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHeavyHover;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlHover;
	NMS_GameComponents::GcPlayerSpaceshipControlData ControlLight;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusA;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusB;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusC;
	NMS_GameComponents::GcPlayerSpaceshipClassBonuses ControlBonusS;
	NMS_GameComponents::GcSpaceshipAvoidanceData Avoidance;
	NMS_GameComponents::GcSpaceshipAvoidanceData AvoidanceLowAltitude;
	NMS_GameComponents::GcPlayerStickData StickData;
	NMS_GameComponents::GcPlayerSpaceshipAim MissileAim;
	NMS_GameComponents::GcPlayerSpaceshipWarpData Warp;
	NMS_Toolkit::TkHitCurveData DamageLightCurve;
	NMS_Toolkit::TkHitCurveData MuzzleLightCurve;
	NMS::Vector2f DeathSpinPitch;
	NMS::Vector2f DeathSpinRoll;
	float _3rdPersonAngleMinSpeed;
	float _3rdPersonAngleSpeedRangePitch;
	float _3rdPersonAngleSpeedRangeYaw;
	float _3rdPersonAngleSpringTime;
	float _3rdPersonAvoidanceAdjustPitchFactor;
	float _3rdPersonAvoidanceAdjustRollFactor;
	float _3rdPersonAvoidanceAdjustYawFactor;
	float _3rdPersonFlashDuration;
	float _3rdPersonFlashIntensity;
	float _3rdPersonHeightForceAdjustPitchFactor;
	float _3rdPersonLowHeightMax;
	float _3rdPersonLowHeightMin;
	float _3rdPersonLowHeightOffsetVertRotationY;
	float _3rdPersonLowHeightOffsetY;
	float _3rdPersonLowHeightSpringTime;
	float _3rdPersonPitchAngle;
	float _3rdPersonRollAngle;
	float _3rdPersonRollAngleAlien;
	float _3rdPersonRollAngleDropship;
	float _3rdPersonRollAngleScience;
	float _3rdPersonTransitionTime;
	float _3rdPersonUpOffsetRollChangeSpeed;
	float _3rdPersonWarpWanderSpring;
	float _3rdPersonWarpWanderStartTime;
	float _3rdPersonWarpWanderTimeX;
	float _3rdPersonWarpWanderTimeY;
	float _3rdPersonWarpWanderTimeZ;
	float _3rdPersonWarpXWander;
	float _3rdPersonWarpYWander;
	float _3rdPersonWarpZWander;
	float _3rdPersonYawAngle;
	float _3rdPersonYawAngleLateralExtra;
	float AcrobaticLowFlightLevel;
	float AimCritAngle;
	float AimCritBehindAngle;
	float AimCritMinFwdAngle;
	float AimFoVBoost;
	float AimFoVBoostTime;
	float AimFoVBoostTimeAuto;
	float AimMaxAutoAngle;
	float AimSpeedTrackDistance;
	float AimSpeedTrackForce;
	float AimTurnSlower;
	float AlarmLastHitTime;
	float AlarmLightIntensity;
	float AlarmLightIntensityHostile;
	float AlarmRate;
	float AlarmRateHostileMax;
	float AlarmRateHostileMin;
	float AngularDamping;
	float AnomalyStationMaxApproachSpeed;
	float AsteroidHitAngle;
	float AsteroidHitAngleBoosting;
	float AtmosphereAngle;
	float AtmosphereCombatHeight;
	float AtmosphereLightIntensity;
	float AtmosphereSpeed;
	float AutoLevelMaxAngle;
	float AutoLevelMaxPitchAngle;
	float AutoLevelMinAngle;
	float AutoLevelMinPitchAngle;
	float AutoLevelPitchCorrectMargin;
	float AutoLevelWaterAngle;
	float AutoLevelWaterMargin;
	float AutoLevelWaterTorque;
	float AutoPilotAlignStrength;
	float AutoPilotCallAngle;
	float AutoPilotCallAngleGhost;
	float AutoPilotCallAngleVertical;
	float AutoPilotCallAngleVerticalGhost;
	float AutoPilotCallDistance;
	float AutoPilotCallDistanceGhost;
	float AutoPilotCallDistanceSpacePOI;
	float AutoPilotPositionAlignStrength;
	float AutoPilotSmallShipAlignStrength;
	float AvoidanceDistancePower;
	float AvoidancePower;
	float BoostChargeRate;
	float BoostNoAsteroidRadius;
	float CameraPostWarpFov;
	float CameraPostWarpFovTime;
	float CockpitDriftAngle;
	float CockpitDriftAngleHmd;
	float CockpitExitAnimMul;
	float CockpitExitAnimOffset;
	float CockpitExitAnimTime;
	float CockpitPitchCorrectAngle;
	float CockpitPitchCorrectAngleHmd;
	float CockpitRollAngle;
	float CockpitRollAngleExtra;
	float CockpitRollAngleHmd;
	float CockpitRollMultiplierCentre;
	float CockpitRollMultiplierOpposite;
	float CockpitRollTime;
	float CollisionAlignStrength;
	float CollisionAsteroidDamp;
	float CollisionDeflectDamping;
	float CollisionDeflectForce;
	float CollisionDeflectNormalFactor;
	float CollisionDeflectTime;
	float CollisionDistance;
	float CollisionDistanceAsteroid;
	float CollisionDistanceAsteroidSide;
	float CollisionDistanceGround;
	float CollisionDistanceSpaceships;
	float CollisionGroundDamp;
	float CollisionRadiusMultiplier;
	float CollisionSpeedDamageAmount;
	float CombatBoostMultiplier;
	float CombatBoostTurnDamp;
	float ContrailDefaultAlpha;
	float ContrailSpeedDamping;
	float CruiseForce;
	float CruiseHeight;
	float CruiseHeightRange;
	float CruiseOffAngle;
	float CruiseOffAngleRange;
	float DamageFlashMin;
	float DamageFlashScale;
	float DamageLightIntensity;
	float DamageMaxHitTime;
	float DamageMinHitTime;
	float DamageMinWoundTime;
	float DefaultTrailInitialSpeed;
	float DefaultTrailMinForwardSpeed;
	float DefaultTrailSpeedDamping;
	float DeflectAlignTimeMax;
	float DeflectAlignTimeMin;
	float DeflectDistance;
	float DirectionBrakeVerticalMultiplier;
	float DirectionBrakeVRBoost;
	float DirectionDockingAlignmentAngle;
	float DirectionDockingAngle;
	float DirectionDockingCircleOffset;
	float DirectionDockingCircleOffsetExtra;
	float DirectionDockingCircleRadius;
	float DirectionDockingCircleRadiusExtra;
	float DirectionDockingCircleWidth;
	float DirectionDockingIndicatorAngleRange;
	float DirectionDockingIndicatorClearAngleRange;
	float DirectionDockingIndicatorMaxHeight;
	float DirectionDockingIndicatorMinHeight;
	float DirectionDockingIndicatorRange;
	float DirectionDockingIndicatorSpeed;
	float DirectionDockingInfoRange;
	float DirectionDockTime;
	float DistanceFromShipToAllowSpawningOnFreighter;
	float DockingApproachActiveRange;
	float DockingApproachBrakeHmdMod;
	float DockingApproachRollHmdMod;
	float DockingApproachSpeedHmdMod;
	float DockingRotateSpeed;
	float DockingRotateSpeedVR;
	float DrawLineLockTargetLineWidth;
	float DriftEffectIntensity;
	float DriftSpring;
	float DriftTurnBrakeMultiplier;
	float DriftTurnStrengthMultiplier;
	float DroneAlertAngle;
	float DroneAlertRange;
	float DroneAlignUpTime;
	float DroneDustHeight;
	float DroneHeightAdjust;
	float DroneMinHeight;
	float DroneMoveArrivedRange;
	float DronePatrolRadius;
	float DronePatrolTime;
	float DronePlanetAttackMinRange;
	float DronePlanetAttackRange;
	float DroneShootTime;
	float DroneWarpMaxForce;
	float DroneWarpMinForce;
	float DroneWarpTime;
	float EjectAnimSpeedFactor;
	float EjectAnimSwitchPoint;
	float EngineEffectsThrustContribution;
	float EngineJetLightIntensityMultiplier;
	float ExhaustSpeed;
	float ExplorerTakeOffMod;
	float FighterTakeOffMod;
	float FreighterApproachCombatDistanceMax;
	float FreighterApproachCombatDistanceMin;
	float FreighterApproachCombatMinSpeedFactor;
	float FreighterApproachDistanceMax;
	float FreighterApproachDistanceMin;
	float FreighterApproachExtraMargin;
	float FreighterApproachExtraMarginCombat;
	float FreighterApproachExtraMarginPirate;
	float FreighterApproachSpeedDamper;
	float FreighterBattleIgnoreFriendlyFireDistance;
	float FreighterBattleRangeBoost;
	float FreighterCombatBoostMul;
	float FreighterCombatSpeedMul;
	float FreighterSpeed;
	float FrigateTargetLockRange;
	float GravityDropForce;
	float GravityDropMaxForceHeight;
	float GravityDropMaxHeight;
	float GravityDropMinHeight;
	float GroundHeightBrakeMultiplier;
	float GroundHeightDownSpeedMultiplier;
	float GroundHeightHard;
	float GroundHeightHardHorizontal;
	float GroundHeightHardOverWater;
	float GroundHeightHardTimeMax;
	float GroundHeightHardTimeMin;
	int32_t GroundHeightNumRays;
	float GroundHeightPostCollisionDamper;
	float GroundHeightPostCollisionMultiplier;
	float GroundHeightPostCollisionMultiplierTime;
	float GroundHeightSmoothTime;
	float GroundHeightSoft;
	float GroundHeightSoftForce;
	float GroundHeightSoftHorizontal;
	float GroundHeightSpeedAngle;
	float GroundHeightSpeedAngleRange;
	float GroundHeightSpeedLength;
	float GroundNearEffectBuildingFade;
	float GroundNearEffectHeight;
	float GroundNearEffectLightFactor;
	float GroundNearEffectNormalOffset;
	float GroundNearEffectRange;
	float GroundNearEffectWaterLightFactor;
	float GroundWaterSpeedFactor;
	int32_t GunAimLevel;
	int32_t GunAmmoMultiplier;
	float GunOffset3rdPersonMultiplier;
	float HandControllerActiveBlendMinTime;
	float HandControllerActiveBlendTime;
	float HandControllerDirOffsetAngle;
	float HandControllerDirOffsetAngleMove;
	float HandControllerThrottleDeadZone;
	float HandControllerThrottleDistance;
	float HandControllerThrottleRange;
	float HandControllerXReorientation;
	float HandControllerXReorientationMove;
	float HandControllerZReorientation;
	float HandControllerZReorientationMove;
	float HaulerTakeOffMod;
	int32_t HitAsteroidDamage;
	float HoverAlignTime;
	float HoverAlignTimeAlt;
	float HoverBrakeStrength;
	float HoverHeightFactor;
	float HoverLandManeuvreBrake;
	float HoverLandManeuvreTimeHmdMax;
	float HoverLandManeuvreTimeHmdMin;
	float HoverLandManeuvreTimeMax;
	float HoverLandManeuvreTimeMin;
	float HoverLandManeuvreTimeWaterMultiplier;
	float HoverLandReachedDistance;
	float HoverLandReachedMinTime;
	float HoverMaxSpeed;
	float HoverMinSpeed;
	float HoverSpeedFactor;
	float HoverStopTime;
	float HoverTakeoffHeight;
	float HoverTime;
	float HoverTimeAlt;
	float HUDBoostUpgradeMultiplier;
	float KBThrustSmoothTime;
	float LandGroundTakeOffTime;
	float LandHeightThreshold;
	float LandingAreaFloorOffset;
	float LandingAreaRadius;
	float LandingButtonMinTime;
	float LandingCheckBuildingRadiusFactor;
	int32_t LandingCost;
	float LandingDirectionalSideOffsetFactor;
	float LandingHelperMinAngle;
	float LandingHelperRollTime;
	float LandingHelperTurnTime;
	float LandingHoverOffset;
	float LandingMargin;
	float LandingMaxAngle;
	float LandingMaxSpeed;
	float LandingObstacleMinHeight;
	float LandingOnGroundTip;
	float LandingPushNoseUpFactor;
	float LandingTooManyLowPointsFraction;
	float LandingWaterHoverHeight;
	float LandingWaterHoverOffset;
	float LandLookingForward;
	float LandOffset;
	float LandSlopeMax;
	float LandWidthThreshold;
	int32_t LaserAimLevel;
	float LaserCoolFactor;
	float LaserFireTime;
	float LaserOverheatDownTime;
	float LaserOverheatTime;
	float LaserWaitTime;
	float LateralDriftRange;
	float LateralDriftRollAmount;
	float LaunchThrustersMinimumSummonPercentage;
	float LaunchThrustersRegenTimePeriod;
	float LaunchThrustersSummonCostMultiplier;
	float LinearDamping;
	float LockTargetMaxScale;
	float LockTargetMinDistance;
	float LockTargetMinScale;
	float LockTargetRange;
	float LootAttractDistance;
	float LootAttractTime;
	float LootCollectDistance;
	float LootDampForce;
	float LowAltitudeAnimationHeight;
	float LowAltitudeAnimationHysteresisTime;
	float LowAltitudeAnimationTime;
	float LowAltitudeContrailFadeAtAnimProgress;
	float MarkerEventTime;
	float MaximumDistanceFromShipWhenExiting;
	float MaximumHeightWhenExitingShip;
	float MaxOverspeedBrake;
	float MaxSpeedUpDistance;
	float MaxSpeedUpVelocity;
	float MiniWarpAlignSlerp;
	float MiniWarpAlignStrength;
	float MiniWarpChargeTime;
	float MiniWarpCooldownTime;
	float MiniWarpExitSpeed;
	float MiniWarpExitSpeedStation;
	float MiniWarpExitTime;
	float MiniWarpFlashDelay;
	float MiniWarpFlashDuration;
	float MiniWarpFlashIntensity;
	float MiniWarpFuelTime;
	float MiniWarpHUDArrowAttractAngle;
	float MiniWarpHUDArrowAttractAngleDense;
	float MiniWarpHUDArrowAttractAngleOtherPlayerStuff;
	float MiniWarpHUDArrowAttractAngleSaveBeacon;
	float MiniWarpHUDArrowAttractAngleStation;
	int32_t MiniWarpHUDArrowNumMarkersToBeDense;
	float MiniWarpLinesHeight;
	int32_t MiniWarpLinesNum;
	float MiniWarpLinesOffset;
	float MiniWarpLinesSpacing;
	float MiniWarpMarkerAlignSlowdown;
	float MiniWarpMarkerAlignSlowdownRange;
	float MiniWarpMarkerApproachSlowdown;
	float MiniWarpMinPlanetDistance;
	float MiniWarpNoAsteroidRadius;
	float MiniWarpPlanetRadius;
	float MiniWarpShakeStrength;
	float MiniWarpSpeed;
	float MiniWarpStationRadius;
	float MiniWarpStoppingMarginDefault;
	float MiniWarpStoppingMarginLong;
	float MiniWarpStoppingMarginPlanet;
	float MiniWarpTime;
	float MiniWarpTopSpeedTime;
	float MiniWarpTrackingMargin;
	float MissileLockSpeedUp;
	float MissileLockTime;
	float MissileShootTime;
	float MuzzleAnimSpeed;
	float MuzzleLightIntensity;
	float NearGroundPitchCorrectMinHeight;
	float NearGroundPitchCorrectMinHeightRemote;
	float NearGroundPitchCorrectRange;
	float NearGroundPitchCorrectRangeRemote;
	float NetworkDockSearchRadius;
	float NoBoostAnomalyDistance;
	float NoBoostCombatEventMinBattleTime;
	float NoBoostCombatEventMinFreighterBattleTime;
	float NoBoostCombatEventTime;
	float NoBoostFreighterAngle;
	float NoBoostFreighterDistance;
	float NoBoostShipDistance;
	float NoBoostShipLastHitTime;
	float NoBoostShipNearMinTime;
	float NoBoostSpaceAnomalyDistance;
	float NoBoostStationDistance;
	float OutpostDockSpeedAlignMinDistance;
	float OutpostDockSpeedAlignRange;
	float PadThrustSmoothTime;
	float PadTurnSpeed;
	float PitchCorrectCockpitSpring;
	float PitchCorrectDownSpeedHeightMax;
	float PitchCorrectDownSpeedHeightMin;
	float PitchCorrectDownSpeedMaxDownAngle;
	float PitchCorrectDownSpeedMinSpeed;
	float PitchCorrectDownSpeedRange;
	float PitchCorrectDownSpeedSoftAngle;
	float PitchCorrectHeightMax;
	float PitchCorrectHeightMin;
	float PitchCorrectHeightSpring;
	float PitchCorrectMaxDownAngle;
	float PitchCorrectMaxDownAnglePostCollision;
	float PitchCorrectMaxDownAngleWater;
	float PitchCorrectSoftDownAngle;
	float PitchCorrectSoftDownAnglePostCollision;
	float PitchCorrectSoftDownAngleWater;
	float PitchCorrectTimeHeight;
	float PitchCorrectTimeMax;
	float PitchCorrectTimeMin;
	float PlayerFreighterClearSpaceRadius;
	float PostFreighterWarpTransitionTime;
	float PostWarpSlowDownTime;
	float PowerSettingEngineDamper;
	float PowerSettingEngineMul;
	float PowerSettingShieldDamper;
	float PowerSettingShieldMul;
	float PowerSettingWeaponDamper;
	float PowerSettingWeaponMul;
	int32_t ProjectileClipSize;
	float ProjectileFireRate;
	float ProjectileOverheatTime;
	float ProjectileReloadTime;
	float PulseDriveBoostDoubleTapTime;
	float PulseDrivePlanetApproachHeight;
	float PulseDrivePlanetApproachMaxAngle;
	float PulseDrivePlanetApproachMinAngle;
	float PulseDriveStationApproachAngleMin;
	float PulseDriveStationApproachAngleRange;
	float PulseDriveStationApproachOffset;
	float PulseDriveStationApproachPerpAngleMin;
	float PulseDriveStationApproachPerpAngleRange;
	float PulseDriveStationApproachSlowdown;
	float PulseDriveStationApproachSlowdownRange;
	float PulseDriveStationApproachSlowdownRangeMin;
	float RemotePlayerLockTimeAfterShot;
	float ResetTargetLockAngle;
	float ResourceCollectOffset;
	float RoyalTakeOffMod;
	float RudderToRollAngleDownMax;
	float RudderToRollAngleDownMin;
	float RudderToRollAngleUpMax;
	float RudderToRollCutoffRotation;
	float RudderToRollMultiplierLow;
	float RudderToRollMultiplierMax;
	float RudderToRollMultiplierMin;
	float RudderToRollMultiplierOpposite;
	float RudderToRollMultiplierSpace;
	float RudderToRollUpsideDownRotation;
	float ShakeAlignBrake;
	float ShakeMaxPower;
	float ShakeMaxSpeed;
	float ShakePowerScaler;
	float ShakeSpeed;
	float ShieldEffectHitTime;
	float ShieldLeechMul;
	float ShieldRechargeMinHitTime;
	float ShieldRechargeRate;
	float ShipDifferentRepelAmount;
	float ShipDifferentRepelRange;
	float ShipEnterAngle;
	float ShipEnterMinTime;
	float ShipEnterRange;
	float ShipEnterSpeed;
	float ShipEnterTransitionTime;
	float ShipHeatAlertTime;
	float ShipMotionDeadZone;
	float ShipThrottleBrakeVibrationStrength;
	float ShipThrottleNotchVibrationStrength;
	float ShipThrustReverseThreshhold;
	float ShuttleTakeOffMod;
	float SpaceBrakeAngularRange;
	float SpaceBrakeMinAngularSpeed;
	float SpaceCombatFollowModeAimTime;
	float SpaceCombatFollowModeBrakeBehindAngle;
	float SpaceCombatFollowModeEvadeRoll;
	float SpaceCombatFollowModeEvadeThrust;
	float SpaceCombatFollowModeEvadeTime;
	float SpaceCombatFollowModeMaxBrakeBehind;
	float SpaceCombatFollowModeMaxBrakeHeadOn;
	float SpaceCombatFollowModeMaxTorque;
	float SpaceCombatFollowModeTargetDistance;
	float SpeedCoolNormalSpeedAmount;
	float SpeedCoolOffset;
	float SpeedUpDistanceFadeThreshold;
	float SpeedUpDistanceThreshold;
	float SpeedUpVelocityCoeff;
	float SpeedUpVelocityThreshold;
	float SpringSpeedBoosting;
	float SpringSpeedBraking;
	float SpringSpeedDefault;
	float SpringSpeedRolling;
	float SpringSpeedSpringSpeedIn;
	float SpringSpeedSpringSpeedOut;
	float StickLandThreshold;
	float StickPulseThreshold;
	float StickyStickAngle;
	float StickyTurnAngleRange;
	float StickyTurnHigh;
	float StickyTurnLow;
	float StickyTurnMinAngle;
	float SummonShipAnywhereFwdOffset;
	float SummonShipAnywhereHeightOffset;
	float SummonShipAnywhereRangeMax;
	float SummonShipAnywhereRangeMin;
	float SummonShipApproachOffset;
	float SummonShipHeightOffset;
	int32_t TakeOffCost;
	float TakeOffSphereCastLength;
	float TakeOffSphereCastRadiusMul;
	float TargetLockAngleTorpedo;
	float TargetLockChangeTime;
	float TargetLockLoseTime;
	float TargetLockNearestAngle;
	float TargetLockRange;
	float TargetLockTime;
	float TestJetsBoost;
	float TestJetsStage1;
	float TestJetsStage2;
	float TestShieldEffect;
	float TestShipAnimLowAltitude;
	float TestShipAnimPulse;
	float TestShipAnimRoll;
	float TestShipAnimSpace;
	float TestShipAnimThrust;
	float TestTrailRadius;
	float TestTrailSpeed;
	float TestTrailThreshold;
	float ThrustDecaySpring;
	float ThrustDecaySpringCombat;
	int32_t TrailMaxNumPointsPerFrameOverride;
	float TrailVelocityFactor;
	float TurnRudderStrength;
	float VignetteAmountAcceleration;
	float VignetteAmountTurning;
	float WarpAnimMaxSpeed;
	float WarpAnimMinSpeed;
	float WarpFadeInTime;
	float WarpInFlashTime;
	float WarpInFlashTimeFreighter;
	float WarpInFlashTimeNexus;
	float WarpInLineWidth;
	float WarpInRange;
	float WarpInRangeFreighter;
	float WarpInRangeNexus;
	float WarpInTime;
	float WarpInTimeFreighter;
	float WarpInTimeNexus;
	float WarpNexusDistance;
	float WarpNexusPitch;
	float WarpNexusRotation;
	float WarpOutRange;
	float WarpOutTime;
	float WarpScale;
	float WarpScaleFreighter;
	float WarpScaleNexus;
	float WaterEffectScaler;
	float WeaponDamagePotentialReferenceRange;
	float WingmanAlign;
	float WingmanAngle;
	float WingmanAngle2;
	float WingmanAttackAimAngle;
	float WingmanAttackAngle;
	float WingmanAttackCoolTime;
	float WingmanAttackMinRange;
	float WingmanAttackOffset;
	float WingmanAttackRange;
	float WingmanAttackTime;
	float WingmanAttackTimeout;
	float WingmanAtTime;
	float WingmanAtTimeBack;
	float WingmanAtTimeStart;
	float WingmanFwd1;
	float WingmanFwd2;
	float WingmanPerpTime;
	float WingmanRadius;
	float WingmanSpawnDist;
	float WingmanSpeedApproachSpeed;
	float WingmanSpeedApproachSpeedSpace;
	float WingmanSpeedTrackDistance;
	float WingmanSpeedTrackForceMax;
	float WingmanSpeedTrackForceMin;
	float WingmanSpeedTrackOffset;
	float WingmanViewerAngle;
	NMS_GameComponents::GcShipDataNames HoverShipDataNames;
	NMS_GameComponents::GcShipDataNames HoverShipDataNamesSpecial;
	NMS_GameComponents::GcShipDataNames SpookShipDataNames;
	bool _3rdPersonShipEnabled;
	NMS_Toolkit::TkCurveType _3rdPersonWarpWanderCurve;
	bool AddShipToCollectionOnEnter;
	bool AimZoomAuto;
	bool AllowSideScreenPointing;
	bool AltAtmosphere;
	bool AltControls;
	bool ApplyHeightAlign;
	bool ApplyHeightForce;
	bool AutoEjectOnLanding;
	NMS_Toolkit::TkCurveType CockpitExitAnimCurve;
	bool CritsFromBehind;
	NMS_Toolkit::TkCurveType DeflectCurve;
	NMS_Toolkit::TkCurveType DirectionDockingIndicatorCurve;
	bool DoPreCollision;
	bool DrawLineLockTarget;
	bool EnableDepthTestedCrosshairSections;
	bool EnablePulseDriveSpaceStationOrient;
	NMS_Toolkit::TkCurveType GroundHeightHardCurve;
	NMS_Toolkit::TkCurveType GroundHeightSoftCurve;
	bool LandedCockpitFreeLook;
	bool LandingCheckBuildings;
	NMS_Toolkit::TkCurveType LandingCurve;
	NMS_Toolkit::TkCurveType LandingCurveHeavy;
	NMS_Toolkit::TkCurveType LandingCurveWater;
	NMS_Toolkit::TkCurveType MiniWarpCurve;
	NMS_Toolkit::TkCurveType PitchCorrectHeightCurve;
	NMS_Toolkit::TkCurveType RudderToRollCurve;
	NMS_Toolkit::TkCurveType ShieldEffectHitCurve;
	bool SpaceCombatFollowModeUseBoost;
	bool SpaceCombatFollowModeUseEvadeTarget;
	bool SpaceMapInWorld;
	bool SpeedTrackModeEnabled;
	bool SpringSpeedSpringEnabled;
	bool TestShipAnims;
	NMS_Toolkit::TkCurveType WarpInCurve;
};

//Dependency: GcExoMechWeaponData
//Dependency: GcMechMeshPartTable
//Dependency: GcVehicleMuzzleData
//Dependency: GcVehicleWeaponMuzzleData
//Dependency: GcMechAudioEventTable
//Dependency: GcMechEffectTable
//Dependency: GcSpaceshipAvoidanceData
//Dependency: GcVehicleData
//Dependency: TkCurveType
//Dependency: Colour
//Dependency: Vector3f
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: Vector2f
//Dependency: NMSString0x20
struct GcVehicleGlobals
{
	NMS::Colour CheckpointBeamColourActive;
	NMS::Colour CheckpointBeamColourNormal;
	NMS::Colour DefaultBoosterColour;
	NMS::Vector3f MechCrouchOffset;
	NMS::Vector3f MechWalkBackwardsCoGOffset;
	NMS_GameComponents::GcMechMeshPartTable MechMeshPartsTable;
	NMS_GameComponents::GcExoMechWeaponData MechWeaponData[5];
	NMS_GameComponents::GcVehicleMuzzleData VehicleWeaponMuzzleFlash[7];
	NMS_GameComponents::GcMechAudioEventTable MechAudioEventTable;
	NMS_GameComponents::GcMechEffectTable MechEffectTable;
	NMS::NMSString0x20A BugMechRightArmTechNameOverride;
	NMS::NMSString0x20A SentinelRightArmTechNameOverride;
	NMS::NMSString0x10 BugMechLeftArmTech;
	NMS::NMSString0x10 BugMechRightArmTech;
	std::vector<NMS::NMSString0x10> DefaultBikeLoadout;
	std::vector<NMS::NMSString0x10> DefaultBuggyLoadout;
	std::vector<NMS::NMSString0x10> DefaultTruckLoadout;
	NMS::NMSString0x10 MechArmPitchAnimLeft;
	NMS::NMSString0x10 MechArmPitchAnimRight;
	NMS::NMSString0x10 MechStrongLaser;
	NMS::NMSString0x10 SentinelLeftArmTech;
	NMS::NMSString0x10 SentinelRightArmTech;
	NMS::NMSString0x10 SentinelRightLeftArmLaserData;
	std::vector<NMS::Vector3f> UnderwaterBubbleOffset;
	std::vector<NMS_GameComponents::GcVehicleData> VehicleDataTable;
	NMS::NMSString0x10 VehicleLocalScan;
	NMS::NMSString0x10 VehicleScan;
	NMS::NMSString0x10 VehicleStrongLaser;
	std::vector<NMS_GameComponents::GcVehicleWeaponMuzzleData> VehicleWeaponMuzzleDataTable;
	NMS_GameComponents::GcSpaceshipAvoidanceData UnderwaterAvoidance;
	NMS::Vector2f MechLookStickSpeedLimit;
	NMS::Vector2f MechMovementStickSpeedLimit;
	float AIMechFlamethrowerFireInterval;
	int32_t AIMechFlamethrowerNumShotsMax;
	int32_t AIMechFlamethrowerNumShotsMin;
	float AIMechGunExplosionRadius;
	float AIMechGunFireInterval;
	float AIMechGunInheritVelocity;
	int32_t AIMechGunNumShotsMax;
	int32_t AIMechGunNumShotsMin;
	float AIMechLaserFireDurationMax;
	float AIMechLaserFireDurationMin;
	float AIMechStunGunFireInterval;
	int32_t AIMechStunGunNumShotsMax;
	int32_t AIMechStunGunNumShotsMin;
	float AttractAlign;
	float AttractAmount;
	float AttractDirectionBrakeThresholdSq;
	float AttractMaxSpeed;
	float BoostPadStrength;
	float BoostPadTime;
	float BuoyancyMaxDownForce;
	float BuoyancyMaxUpForce;
	float BuoyancySurfaceFudge;
	float BuoyancySurfacingTime;
	float BuoyancyUnderwaterSphereRadius;
	float CheckpointBeamOffset;
	float CheckpointBeamSizeActive;
	float CheckpointBeamSizeNormal;
	float CheckpointDeleteAngle;
	float CheckpointDeleteDistance;
	float CheckpointFlashDuration;
	float CheckpointFlashIntensity;
	float CheckpointPlacementOffset;
	float CheckpointPlacementRayLength;
	float CheckpointRadius;
	float ControlStickRecenterSpeedDegPerSec;
	float DamageTechMinHitIntervalSeconds;
	int32_t DamageTechNumHitsRequired;
	float DisablePhysicsRange;
	float ExitStopForce;
	float ExitStopTime;
	float FirstPersonSteeringAdditionalForward;
	float FirstPersonSteeringAdditionalForwardThreshold;
	float FirstPersonSteeringAdditionalReverseThreshold;
	float FirstPersonSteeringLowSpeedTurnDamping;
	float FirstPersonSteeringMinThrottleHardLeftRight;
	int32_t GunBaseDamage;
	int32_t GunBaseMiningDamage;
	float GunFireRate;
	float HeadlightIntensitySpringTime;
	float HornScareFleeRadius;
	float HornScareRadius;
	float HornScareTime;
	float LevelVehicleCameraFactor;
	float MechAIGroundTurnSpeed;
	float MechAIResummonMinSpawnDistance;
	float MechAIResummonMinSpeedForVelBasedSpawnPos;
	float MechAIResummonTriggerDistance;
	float MechAIResummonVelBasedSpawnSpeedMultiplier;
	float MechArmPitchAngleMax;
	float MechArmPitchAngleMin;
	float MechArmPitchLerpSpeed;
	float MechArmSwingAngleFastWalk;
	float MechArmSwingAngleWalk;
	float MechArmSwingPhaseFastWalk;
	float MechArmSwingPhaseWalk;
	float MechCameraOffsetAmount;
	float MechCameraOffsetTime;
	float MechCockPitBobPitch;
	float MechCockPitBobRoll;
	float MechCockPitBobX;
	float MechCockPitBobY;
	float MechCockPitBobYaw;
	float MechCockPowerDownY;
	float MechCoGAdjustTimeAir;
	float MechCoGAdjustTimeLand;
	float MechCoGAdjustTimeWindUp;
	float MechContrailAlpha;
	float MechCrouchTime;
	float MechDefaultBlendTime;
	float MechFirstPersonCrouchAmount;
	float MechFirstPersonDamping;
	float MechFirstPersonIgnoreReverseThreshold;
	float MechFirstPersonMaxLookTurret;
	float MechFirstPersonMaxTurnTurret;
	float MechFirstPersonStickXModerator;
	float MechFirstPersonTurretAngleThrottleStrength;
	float MechFirstPersonTurretAngleThrottleThreshold;
	float MechFirstPersonTurretBaseThrottleThreshold;
	float MechFirstPersonTurretBaseTurnThreshold;
	float MechFirstPersonTurretPitchModerator;
	float MechFirstPersonTurretShootTimer;
	float MechFirstPersonTurretThrottleLookThreshold;
	float MechFirstPersonTurretTurnModerator;
	float MechFootprintFadeDist;
	float MechFootprintFadeTime;
	float MechIdleLowBlendTime;
	float MechIdleLowDelay;
	float MechIdleStopDelay;
	float MechJetpackAvoidGroundForce;
	float MechJetpackAvoidGroundProbeLength;
	float MechJetpackBrake;
	float MechJetpackDrainRate;
	float MechJetpackFallForce;
	float MechJetpackFillRate;
	float MechJetpackForce;
	float MechJetpackIgnitionForce;
	float MechJetpackIgnitionTime;
	float MechJetpackJetScaleTime;
	float MechJetpackLandTime;
	float MechJetpackMaxCoGAdjustX;
	float MechJetpackMaxSpeed;
	float MechJetpackMaxUpSpeed;
	float MechJetpackStrafeStrength;
	float MechJetpackTurnSpeed;
	float MechJetpackUpForce;
	float MechJumpBlendTime;
	float MechJumpDownBlendTime;
	float MechJumpFlyBlendTime;
	float MechLandBlendTime;
	float MechLandBrake;
	float MechLandCameraShakeDist;
	float MechMaxTurnAngleWhileStationary;
	float MechPlayerGroundTurnSpeed;
	float MechPowerUpTime;
	float MechSpawnRotation;
	float MechSpeedBlendTime;
	float MechTitanFallCameraShakeDist;
	float MechTitanFallHeight;
	float MechTitanFallLandIdleTime;
	float MechTitanFallLandIntroTime;
	float MechTitanFallTerrainEditOffset;
	float MechTitanFallTerrainEditSize;
	float MechTurretMaxAngleAir;
	float MechTurretMaxAngleGround;
	float MechTurretTimeVRModifier;
	float MechTurretTurnTimeAir;
	float MechTurretTurnTimeGround;
	float MechTurretTurnTimeGroundPlayerCombat;
	float MechWalkToRunTimeIdle;
	float MechWalkToRunTimeSkid;
	float MechWeaponInterpSpeed;
	int32_t MiningLaserDamage;
	float MiningLaserDrainSpeed;
	int32_t MiningLaserMiningDamage;
	float MiningLaserRadius;
	float MiningLaserSpeed;
	float ProjectileDrainPerShot;
	float RaceCooldown;
	float RaceInteractRespawnOffset;
	float RaceInteractRespawnUpOffset;
	float RaceMultipleStartCaptureRange;
	float RaceMultipleStartOffset;
	float RaceResetFlashDuration;
	float RaceResetFlashIntensity;
	float RaceStartSpawnUpOffset;
	float RemoteBoostingEffectTimeout;
	float ResourceCollectOffset;
	float SpawnRotation;
	float SteeringWheelCentreOffset;
	float SteeringWheelPitchAngle;
	float SteeringWheelPushRange;
	float SteeringWheelSpringBothHands;
	float SteeringWheelSpringOneHand;
	float StickReverseTurnStiffness;
	float StickReverseTurnThreshold;
	float StickTurnReducer;
	float StickTurnReducerAltNonVR;
	float StickTurnReducerVR;
	float StickTurnReducerWater;
	int32_t StunGunBaseDamage;
	float StunGunFireRate;
	float SubmarineEjectDownOffset;
	float SubmarineEjectRadius;
	float SubmarineFirstPersonSteeringSensitivity;
	float SubmarineMinSummonDepth;
	float SummoningRange;
	float SuspensionDamping;
	float SuspensionDampingAngularFactor;
	float TestAnimBoost;
	float TestAnimThrust;
	float TestAnimTurn;
	float TestFrictionStat;
	float TestSkidFrictionStat;
	float TravelSpeedReportReducer;
	float UnderwaterBuoyancyRangeMax;
	float UnderwaterBuoyancyRangeMin;
	float UnderwaterDiveForce;
	float UnderwaterFlattenMinDepth;
	float UnderwaterFlattenRange;
	float UnderwaterJumpForce;
	float UnderwaterScannerIconRangeBoost;
	float UnderwaterSummonSurfaceOffset;
	float UnderwaterSurfaceForceFlatteningAngleMin;
	float UnderwaterSurfaceForceFlatteningAngleRange;
	float UnderwaterSurfaceOffset;
	float UnderwaterSurfaceSplashdownForce;
	float UnderwaterSurfaceSplashdownMinSpeed;
	float VehicleAltControlStickSmoothInTime;
	float VehicleAltControlStickSmoothOutTime;
	float VehicleBoostFuelRate;
	float VehicleBoostFuelRateSurvival;
	float VehicleBoostSpeedMultiplierPercent;
	float VehicleCollisionScaleFactor;
	float VehicleDeactivateRange;
	float VehicleFadeTime;
	float VehicleFuelRate;
	float VehicleFuelRateTruckMultiplier;
	float VehicleGarageHologramFadeRange;
	float VehicleGarageHologramMinFadeRange;
	float VehicleJumpCooldown;
	float VehicleJumpTimeMax;
	float VehicleJumpTimeMin;
	float VehicleMaxSummonDistance;
	float VehicleMaxSummonDistanceUnderwater;
	float VehicleMinSummonDistance;
	float VehicleMotionDeadZone;
	float VehicleSolarRegenFactor;
	float VehicleSuspensionAudioDelay;
	float VehicleSuspensionAudioScale;
	float VehicleSuspensionAudioSpacing;
	float VehicleSuspensionAudioTrigger;
	float VehicleTextSize;
	float VehicleWheelNoise;
	float VehicleWheelNoiseScale;
	float VignetteAmountAcceleration;
	float VignetteAmountTurning;
	float VisualRollUnderwaterSpring;
	float VisualTurnSpring;
	float VisualTurnUnderwaterSpring;
	float WeaponInterpSpeed;
	float WheelDustColourLightFactor;
	float WheelForceHalflife;
	float WheelSideVerticalFactor;
	NMS::NMSString0x20 MechWeaponLocatorNames[5];
	bool MechAltJumpMode;
	NMS_Toolkit::TkCurveType MechArmSwingCurveFastWalk;
	NMS_Toolkit::TkCurveType MechArmSwingCurveWalk;
	bool MechCanUpdateMeshWhileMaintenanceUIActive;
	bool MechFirstPersonTurretTweaksEnabled;
	bool MechStrafeEnabled;
	bool MechTitanFallTerrainEditEnabled;
	bool RaceFinishAtStart;
	bool ShowAllCheckpoints;
	bool ShowTempVehicleMesh;
	bool ShowVehicleDebugging;
	bool ShowVehicleParticleDebug;
	bool ShowVehicleText;
	bool ShowVehicleWheelGuards;
	NMS_Toolkit::TkCurveType SteeringWheelOutputCurve;
	bool TestAnims;
	bool ThrottleButtonCamRelative;
	NMS_Toolkit::TkCurveType UnderwaterBuoyancyDepthCurve;
	bool UseFirstPersonCamera;
	bool VehicleAltControlScheme;
	bool VehicleDrawAudioDebug;
};


} //namespace NMS_Globals

namespace NMS_Toolkit
{

struct TKNGuiEditorComponentSize
{
	enum class NGuiEditorComponentSizeEnum : uint32_t
	{
		WindowResize = 0,
		WindowButton = 1,
		MinimumWindowHeight = 2,
		MinimumWindowWidth = 3,
		Indent = 4,
		SeparatorHeight = 5,
		SeparatorWidth = 6,
		TreeNodeExpander = 7,
		CheckBox = 8,
		Adjuster = 9,
		Cursor = 10,
		TextEditSeparator = 11,
		DefaultLineHeight = 12,
		ColourEditHeight = 13,
		ColourEditWidth = 14,
		FileBrowser = 15,
		EditorResize = 16,
		EditorMove = 17,
		IconButton = 18,
		SliderKnob = 19,
		SliderBarWidth = 20,
		SliderBarHeight = 21,
		CategoryHeight = 22,
		WindowTitle = 23,
		MinimumTabWidth = 24,
		ScrollSpeed = 25,
		ComboBox = 26,
		Taskbar = 27,
		IconListItem = 28,
		StartBarWindowButton = 29,
		StartBarWindowListItem = 30,
		StartBarWindowSeparatorWidth = 31,
		StartBarWindowChildOffset = 32,
		Toolbar = 33,
		ToolbarOptions = 34,
		GlobalSearchBox = 35,
		SearchBox = 36,
		StartBarWindowWidth = 37,
		StartBarHeight = 38,
		StartBarWindowSearchWidth = 39,
		GlobalsMenuWidth = 40,
		TreeNodeSpacing = 41,
		VectorSpacing = 42,
		SliderMinSpacing = 43,
		VectorMinSpacing = 44,
		ColourAlphaMinsize = 45,
		SpacingGap = 46,
		Scroll = 47,
		TextLabelSeparator = 48,
		AlignmentAnchor = 49,
		MinimiseHighlightHeight = 50,
		TableButtonSpacing = 51,
		TableHeaderHeight = 52,
		TreeNodeHeight = 53,
		ScrollMargin = 54,
		ScrollIncrement = 55,
		EditorPin = 56,
		DynamicPanelTitle = 57,
		FavouriteValueStar = 58,
		ShortcutBar = 59,
		RevertButton = 60,
		ToolbarItemPadding = 61,
		ContextMenuWidth = 62,
		TooltipButtonSize = 63,
		TooltipMaxWidth = 64,
	};

	NMS_Toolkit::TKNGuiEditorComponentSize::NGuiEditorComponentSizeEnum NGuiEditorComponentSize;
};

struct TKNGuiEditorTextType
{
	enum class NGuiEditorTextEnum : uint32_t
	{
		Text = 0,
		Button = 1,
		WindowTab = 2,
		WindowTabInactive = 3,
		TreeNode = 4,
		CheckBox = 5,
		TextInput = 6,
		TextInputLabel = 7,
		TextInputLabelHeader = 8,
		Category = 9,
		TaskBar = 10,
		GroupTitle = 11,
		TreeNodeSelected = 12,
		DynamicPanelTitle = 13,
		ContextMenuButton = 14,
	};

	NMS_Toolkit::TKNGuiEditorTextType::NGuiEditorTextEnum NGuiEditorText;
};

//Dependency: TkActionButtonMap
struct TkActionButtonLookup
{
	std::vector<NMS_Toolkit::TkActionButtonMap> Lookup;
};

//Dependency: TkCurveType
//Dependency: NMSString0x20
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimAnimNode
{
	enum class SyncGroupRoleEnum : uint32_t
	{
		CanBeLeader = 0,
		AlwaysLeader = 1,
		NeverLeader = 2,
	};

	NMS::NMSString0x20 DisplayName;
	NMS::NMSString0x10 AnimId;
	NMS::NMSString0x40 PhaseIn;
	NMS_Toolkit::TkCurveType PhaseCurve;
	float PhaseRangeBegin;
	float PhaseRangeEnd;
	NMS::NMSString0x10 SyncGroup;
	NMS_Toolkit::TkAnimAnimNode::SyncGroupRoleEnum SyncGroupRole;
};

//Dependency: TkCurveType
//Dependency: NMSString0x10
//Dependency: NMSString0x40
struct TkAnimBlendNode
{
	NMS::NMSString0x10 NodeId;
	NMS::NMSString0x40 WeightIn;
	float WeightRangeBegin;
	float WeightRangeEnd;
	float WeightSpringTime;
	NMS_Toolkit::TkCurveType WeightCurve;
	float InitialWeight;
	NMSTemplate BlendLeft;
	NMSTemplate BlendRight;
};

//Dependency: halfVector4
struct TkAnimNodeFrameHalfData
{
	std::vector<uint16_t> Rotations;
	std::vector<NMS::halfVector4> Scales;
	std::vector<NMS::halfVector4> Translations;
};

//Dependency: TkAnimNodeFrameHalfData
//Dependency: TkAnimNodeData
struct TkAnimCompactMetadata
{
	NMS_Toolkit::TkAnimNodeFrameHalfData StillFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeFrameHalfData> AnimFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeData> NodeData;
	int32_t FrameCount;
	int32_t NodeCount;
	bool Has30HzFrames;
};

//Dependency: Quaternion
//Dependency: Vector3f
struct TkAnimNodeFrameData
{
	std::vector<NMS::Quaternion> Rotations;
	std::vector<NMS::Vector3f> Scales;
	std::vector<NMS::Vector3f> Translations;
};

//Dependency: TkAnimNodeFrameData
//Dependency: TkAnimNodeData
struct TkAnimMetadata
{
	NMS_Toolkit::TkAnimNodeFrameData StillFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeFrameData> AnimFrameData;
	std::vector<NMS_Toolkit::TkAnimNodeData> NodeData;
	int32_t FrameCount;
	int32_t NodeCount;
	bool Has30HzFrames;
};

//Dependency: TkAnimStateMachineData
//Dependency: NMSString0x10
struct TkAnimStateMachineLayerData
{
	NMS_Toolkit::TkAnimStateMachineData StateMachineContainer;
	NMS::NMSString0x10 Id;
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterBool
{
	NMS::NMSString0x10 Name;
	bool Default;
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterFloat
{
	NMS::NMSString0x10 Name;
	float Default;
};

//Dependency: NMSString0x10
struct TkAnimStateMachineParameterInt
{
	NMS::NMSString0x10 Name;
	int32_t Default;
};

//Dependency: TkAnimStateMachineData
//Dependency: NMSString0x20A
struct TkLayeredAnimStateMachineData
{
	NMS::NMSString0x20A Id;
	std::vector<NMS_Toolkit::TkAnimStateMachineData> Layers;
	std::vector<NMSTemplate> Parameters;
};

//Dependency: TkLayeredAnimStateMachineData
struct TkAnimStateMachineTable
{
	std::vector<NMS_Toolkit::TkLayeredAnimStateMachineData> Table;
};

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionFloatData
{
	enum class FloatComparisonModeEnum : uint32_t
	{
		LessThan = 0,
		LessThanEqual = 1,
		GreaterThanEqual = 2,
		GreaterThan = 3,
	};

	NMS::NMSString0x10 Parameter;
	float CompareValue;
	NMS_Toolkit::TkAnimStateMachineTransitionConditionFloatData::FloatComparisonModeEnum FloatComparisonMode;
};

//Dependency: NMSString0x10
struct TkAnimStateMachineTransitionConditionIntData
{
	enum class IntComparisonModeEnum : uint32_t
	{
		LessThan = 0,
		LessThanEqual = 1,
		Equal = 2,
		GreaterThanEqual = 3,
		GreaterThan = 4,
	};

	NMS::NMSString0x10 Parameter;
	int32_t CompareValue;
	NMS_Toolkit::TkAnimStateMachineTransitionConditionIntData::IntComparisonModeEnum IntComparisonMode;
};

struct TkAnimStateMachineTransitionConditionStateTimeData
{
	float MaxTime;
	float MinTime;
};

//Dependency: TkAnimVectorBlendNodeData
//Dependency: NMSString0x10
struct TkAnimVectorBlendNode
{
	enum class BlendOperationEnum : uint32_t
	{
		Blend = 0,
		Add = 1,
	};

	std::vector<NMS_Toolkit::TkAnimVectorBlendNodeData> BlendChildren;
	NMS::NMSString0x10 NodeId;
	NMS_Toolkit::TkAnimVectorBlendNode::BlendOperationEnum BlendOperation;
};

//Dependency: NMSString0x20
struct TkDynamicChainComponentData
{
	std::vector<NMS::NMSString0x20> IgnoreJoints;
	float AirThickness;
	float AngularDamping;
	float AngularLimit;
	float BodyMassChange;
	float Gravity;
	float InitialBodyMass;
	float LinearDamping;
	float MaxMotorForce;
	float MotorStrengthCone;
	float MotorStrengthTwist;
	float TwistLimit;
	float VertAirThickness;
	float WindStrength;
	bool WeightByJointLength;
};

//Dependency: TkAnimationData
//Dependency: TkAnimJointLODData
//Dependency: TkAnimRandomOneShots
//Dependency: TkAnimBlendTree
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkAnimationComponentData
{
	NMS_Toolkit::TkAnimationData Idle;
	NMS::NMSString0x10 AnimGroup;
	std::vector<NMS::VariableSizeString> AnimLibraries;
	std::vector<NMS_Toolkit::TkAnimationData> Anims;
	std::vector<NMS_Toolkit::TkAnimJointLODData> JointLODOverrides;
	std::vector<NMS_Toolkit::TkAnimRandomOneShots> RandomOneShots;
	std::vector<NMS_Toolkit::TkAnimBlendTree> Trees;
	bool NetSyncAnimations;
};

//Dependency: TkAnimationData
struct TkAnimationDataTable
{
	std::vector<NMS_Toolkit::TkAnimationData> Table;
};

//Dependency: NMSString0x10
struct TkAnimationNotifyGeneric
{
	NMS::NMSString0x10 Id;
};

//Dependency: Vector3f
struct TkAudioEmitterLine
{
	NMS::Vector3f End;
	NMS::Vector3f Start;
	float Spacing;
};

//Dependency: TkAxisPathMapping
struct TkAxisImageLookup
{
	std::vector<NMS_Toolkit::TkAxisPathMapping> Lookup;
};

//Dependency: NMSString0x10
struct TkBehaviourTreeConcurrentSelectorData
{
	enum class SucceedWhenEnum : uint32_t
	{
		AllChildrenSucceed = 0,
		AnyChildSucceeds = 1,
	};

	enum class FailWhenEnum : uint32_t
	{
		AnyChildFails = 0,
		AllChildrenFail = 1,
	};

	std::vector<NMSTemplate> Children;
	NMS::NMSString0x10 Name;
	NMS_Toolkit::TkBehaviourTreeConcurrentSelectorData::FailWhenEnum FailWhen;
	NMS_Toolkit::TkBehaviourTreeConcurrentSelectorData::SucceedWhenEnum SucceedWhen;
};

//Dependency: NMSString0x10
struct TkBehaviourTreeSequentialSelectorData
{
	std::vector<NMSTemplate> Children;
	NMS::NMSString0x10 Name;
	bool FailWhenAnyChildFails;
	bool Looping;
};

struct TkBehaviourTreeSucceedDecoratorData
{
	NMSTemplate Child;
};

//Dependency: TkLSystemInnerRule
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkLSystemRule
{
	enum class RuleTypeEnum : uint32_t
	{
		Default = 0,
		BaseRule = 1,
	};

	NMS::VariableSizeString Model;
	std::vector<NMS_Toolkit::TkLSystemInnerRule> Rules;
	NMS_Toolkit::TkLSystemRule::RuleTypeEnum RuleType;
	NMS::NMSString0x20 Name;
};

//Dependency: TkLSystemGlobalRestriction
//Dependency: TkLSystemGlobalVariation
//Dependency: TkLSystemRule
//Dependency: TkLSystemRuleTemplate
struct TkLSystemRulesData
{
	std::vector<NMS_Toolkit::TkLSystemGlobalRestriction> GlobalRestriction;
	std::vector<NMS_Toolkit::TkLSystemGlobalVariation> GlobalVariation;
	std::vector<NMS_Toolkit::TkLSystemRule> Rules;
	std::vector<NMS_Toolkit::TkLSystemRuleTemplate> Templates;
};

struct TkBlackboardType
{
	enum class BlackboardTypeEnum : uint32_t
	{
		Invalid = 0,
		Float = 1,
		Integer = 2,
		Bool = 3,
		Id = 4,
		Vector = 5,
		Attachment = 6,
	};

	NMS_Toolkit::TkBlackboardType::BlackboardTypeEnum BlackboardType;
};

//Dependency: NMSString0x10
struct TkBlackboardValueBool
{
	NMS::NMSString0x10 Key;
	bool Value;
};

//Dependency: NMSString0x10
struct TkBlackboardValueId
{
	NMS::NMSString0x10 Key;
	NMS::NMSString0x10 Value;
};

//Dependency: Vector3f
struct TkBoundingBoxData
{
	NMS::Vector3f Max;
	NMS::Vector3f Min;
};

struct TkCameraAttachmentData
{
	float BaseOffset;
	float OffsetScaler;
};

//Dependency: TkInputEnum
//Dependency: NMSString0x20A
//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkChordPathMapping
{
	NMS::NMSString0x20A Name;
	std::vector<NMS_Toolkit::TkInputEnum> ButtonIds;
	NMS::VariableSizeString OverlayIcon;
	NMS::VariableSizeString SolidIcon;
	NMS::VariableSizeString SpecialIcon;
	NMS::NMSString0x10 TextTag;
};

//Dependency: TkChordPathMapping
struct TkChordsImageLookup
{
	std::vector<NMS_Toolkit::TkChordPathMapping> Lookup;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkControllerButtonLookup
{
	NMS::VariableSizeString ButtonImageLookupFilename;
	NMS::NMSString0x10 Id;
};

//Dependency: TkControllerButtonLookup
struct TkControllerList
{
	std::vector<NMS_Toolkit::TkControllerButtonLookup> Controllers;
};

//Dependency: TkAxisImageLookup
//Dependency: TkButtonImageLookup
//Dependency: TkChordsImageLookup
//Dependency: NMSString0x10
struct TkControllerSpecification
{
	NMS_Toolkit::TkAxisImageLookup AxisImageLookup;
	NMS_Toolkit::TkButtonImageLookup ButtonImageLookup;
	NMS_Toolkit::TkChordsImageLookup ChordsImageLookup;
	NMS::NMSString0x10 Id;
};

//Dependency: NMSString0x20
struct TkCreatureTailJoints
{
	float InterpSpeedHead;
	float InterpSpeedTail;
	float PullSpeedMax;
	float PullSpeedMin;
	float StrengthX;
	float StrengthY;
	float StrengthZ;
	float SwimPhaseOffset;
	NMS::NMSString0x20 EndJoint;
	NMS::NMSString0x20 StartJoint;
};

//Dependency: TkCreatureTailJoints
//Dependency: NMSString0x20A
struct TkCreatureTailParams
{
	NMS::NMSString0x20A PartName;
	std::vector<NMS_Toolkit::TkCreatureTailJoints> Joints;
	std::vector<float> PerBoneSwimStrength;
	float AnimationMix;
	float MaxTurnForSwim;
	float MinSwimStrength;
	float SwimBlendInTime;
	float SwimBlendOutTime;
	float SwimFallOffBegin;
	float SwimFallOffEnd;
	float SwimMagnitude;
	float SwimReps;
	float SwimRollMagnitude;
	float SwimSpeed;
	float SwimTurn;
	bool HorizontalStrokes;
};

//Dependency: GcPrimaryAxis
//Dependency: TkCreatureTailParams
struct TkCreatureTailComponentData
{
	NMS_Toolkit::TkCreatureTailParams DefaultParams;
	std::vector<NMS_Toolkit::TkCreatureTailParams> ParamVariations;
	NMS_GameComponents::GcPrimaryAxis LengthAxis;
	bool CanUseDefaultParams;
};

struct TkEmitFromParticleInfo
{
	enum class EmissionRateTypeEnum : uint32_t
	{
		PerParticle = 0,
		Distance = 1,
	};

	NMS_Toolkit::TkEmitFromParticleInfo::EmissionRateTypeEnum EmissionRateType;
	int32_t OtherEmitterIndex;
};

struct TkEmitterBillboardAlignment
{
	enum class BillboardAlignmentEnum : uint32_t
	{
		Screen = 0,
		XLocal = 1,
		YLocal = 2,
		ZLocal = 3,
		NegativeXLocal = 4,
		NegativeYLocal = 5,
		NegativeZLocal = 6,
		ScreenWorld = 7,
	};

	NMS_Toolkit::TkEmitterBillboardAlignment::BillboardAlignmentEnum BillboardAlignment;
	bool CameraFacing;
};

struct TkEngineSettingTypes
{
	enum class EngineSettingEnum : uint32_t
	{
		FullScreen = 0,
		Borderless = 1,
		ResolutionWidth = 2,
		ResolutionHeight = 3,
		ResolutionScale = 4,
		RetinaScaleIOS = 5,
		Monitor = 6,
		FoVOnFoot = 7,
		FoVInShip = 8,
		VSync = 9,
		TextureQuality = 10,
		AnimationQuality = 11,
		ShadowQuality = 12,
		ReflectionProbesMultiplier = 13,
		ReflectionProbes = 14,
		ScreenSpaceReflections = 15,
		ReflectionsQuality = 16,
		PostProcessingEffects = 17,
		VolumetricsQuality = 18,
		TerrainTessellation = 19,
		PlanetQuality = 20,
		WaterQuality = 21,
		BaseQuality = 22,
		UIQuality = 23,
		DLSSQuality = 24,
		FFXSRQuality = 25,
		FFXSR2Quality = 26,
		XESSQuality = 27,
		DynamicResScaling = 28,
		EnableTessellation = 29,
		AntiAliasing = 30,
		AnisotropyLevel = 31,
		Brightness = 32,
		VignetteAndScanlines = 33,
		AvailableMonitors = 34,
		MaxFrameRate = 35,
		NumLowThreads = 36,
		NumHighThreads = 37,
		NumGraphicsThreads = 38,
		TextureStreaming = 39,
		TexturePageSizeKb = 40,
		MotionBlurStrength = 41,
		ShowRequirementsWarnings = 42,
		AmbientOcclusion = 43,
		MaxTextureMemoryMb = 44,
		FixedTextureMemory = 45,
		UseArbSparseTexture = 46,
		UseTerrainTextureCache = 47,
		AdapterIndex = 48,
		UseHDR = 49,
		MinGPUMode = 50,
		MetalFXQuality = 51,
		DLSSFrameGeneration = 52,
		NVIDIAReflexLowLatency = 53,
	};

	NMS_Toolkit::TkEngineSettingTypes::EngineSettingEnum EngineSetting;
};

struct TkEngineSettingsMapping
{
	int32_t CloudsMaxIterations[4];
	float CloudsResolutionScale[4];
	float IKFullBodyIterations[4];
	float ReflectionProbesMultiplier[4];
	float ShadowMultiplier[4];
	bool NeedsGameRestart[54];
};

struct TkFeaturesEnum
{
	enum class FeatureTypesEnum : uint32_t
	{
		River = 0,
		Crater = 1,
		Arches = 2,
		ArchesSmall = 3,
		Blobs = 4,
		BlobsSmall = 5,
		Substance = 6,
	};

	NMS_Toolkit::TkFeaturesEnum::FeatureTypesEnum FeatureTypes;
};

struct TkFloatRange
{
	float Maximum;
	float Minimum;
};

struct TkFoamProperties
{
	float FoamBlurFactor;
	float FoamFadeRate;
	float ShorelineFoamFadeDepth;
	float ShorelineFoamMidpointDepth;
	float ShorelineFoamSaturateDepth;
	float WaveFoamBase;
	float WaveFoamGenerationStrength;
	float WaveFoamSensitivity;
};

struct TkTrailData
{
	float DistanceThreshold;
	int32_t FrontPoints;
	float FrontUvEnd;
	int32_t MaxPointsPerFrame;
	float PointLife;
	int32_t Points;
	float Width;
};

struct TkPadEnum
{
	enum class PadEnum : uint32_t
	{
		None = 0,
		XInput = 1,
		GLFW = 2,
		XBoxOne = 3,
		XBox360 = 4,
		DS4 = 5,
		DS5 = 6,
		Move = 7,
		SteamInput = 8,
		Touch = 9,
		OpenVR = 10,
		SwitchPro = 11,
		SwitchHandheld = 12,
		GameInput = 13,
		SwitchDebugPad = 14,
		SwitchJoyConDual = 15,
		VirtualController = 16,
	};

	NMS_Toolkit::TkPadEnum::PadEnum Pad;
};

//Dependency: GcInputActionMapping
//Dependency: GcInputActionMapping2
//Dependency: TkPadEnum
struct TkGameSettings
{
	std::vector<NMS_GameComponents::GcInputActionMapping> KeyMapping;
	std::vector<NMS_GameComponents::GcInputActionMapping2> KeyMapping2;
	NMS_Toolkit::TkPadEnum LastKnownPadType;
};

//Dependency: VariableSizeString
struct TkMeshMetaData
{
	NMS::VariableSizeString IdString;
	uint64_t Hash;
	int32_t IndexDataOffset;
	int32_t IndexDataSize;
	int32_t VertexDataOffset;
	int32_t VertexDataSize;
	int32_t VertexPositionDataOffset;
	int32_t VertexPositionDataSize;
	bool DoubleBufferGeometry;
};

struct TkJointMirrorAxis
{
	int32_t MirrorAxisMode;
	float RotAdjustW;
	float RotAdjustX;
	float RotAdjustY;
	float RotAdjustZ;
	float RotMirrorAxisX;
	float RotMirrorAxisY;
	float RotMirrorAxisZ;
	float TransMirrorAxisX;
	float TransMirrorAxisY;
	float TransMirrorAxisZ;
};

//Dependency: TkVertexLayout
//Dependency: TkMeshMetaData
//Dependency: TkJointBindingData
//Dependency: VariableSizeString
//Dependency: TkJointExtentData
//Dependency: Vector4f
//Dependency: TkJointMirrorAxis
struct TkGeometryData
{
	NMS_Toolkit::TkVertexLayout PositionVertexLayout;
	NMS_Toolkit::TkVertexLayout VertexLayout;
	std::vector<int32_t> BoundHullVertEd;
	std::vector<NMS::Vector4f> BoundHullVerts;
	std::vector<int32_t> BoundHullVertSt;
	std::vector<int32_t> IndexBuffer;
	std::vector<NMS_Toolkit::TkJointBindingData> JointBindings;
	std::vector<NMS_Toolkit::TkJointExtentData> JointExtents;
	std::vector<NMS_Toolkit::TkJointMirrorAxis> JointMirrorAxes;
	std::vector<int32_t> JointMirrorPairs;
	std::vector<NMS::Vector4f> MeshAABBMax;
	std::vector<NMS::Vector4f> MeshAABBMin;
	std::vector<int32_t> MeshBaseSkinMat;
	std::vector<int32_t> MeshVertREnd;
	std::vector<int32_t> MeshVertRStart;
	std::vector<NMS::VariableSizeString> ProcGenNodeNames;
	std::vector<int32_t> ProcGenParentId;
	std::vector<int32_t> SkinMatrixLayout;
	std::vector<NMS_Toolkit::TkMeshMetaData> StreamMetaDataArray;
	int32_t CollisionIndexCount;
	int32_t IndexCount;
	int32_t Indices16Bit;
	int32_t VertexCount;
};

//Dependency: TkEmitterWindDrift
//Dependency: Vector3f
//Dependency: Colour
//Dependency: VariableSizeString
struct TkHeavyAirData
{
	enum class EmitterShapeEnum : uint32_t
	{
		Sphere = 0,
		UpperHalfSphere = 1,
		BottomHalfSphere = 2,
	};

	NMS::Vector3f AmplitudeMax;
	NMS::Vector3f AmplitudeMin;
	NMS::Colour Colour1;
	NMS::Colour Colour2;
	NMS::Vector3f MajorDirection;
	NMS::Vector3f RotationSpeedRange;
	NMS::Vector3f ScaleRange;
	NMS::Vector3f TwinkleRange;
	NMS::VariableSizeString Material;
	NMS_Toolkit::TkEmitterWindDrift WindDrift;
	NMS_Toolkit::TkHeavyAirData::EmitterShapeEnum EmitterShape;
	float FadeTime;
	float MaxParticleLifetime;
	float MaxVisibleSpeed;
	float MinParticleLifetime;
	float MinVisibleSpeed;
	int32_t NumberOfParticles;
	float Radius;
	float RadiusY;
	float SoftFadeStrength;
	float SpawnRotationRange;
	float SpeedFadeInTime;
	float SpeedFadeOutTime;
	bool VelocityAlignment;
};

//Dependency: TkHeavyAirData
struct TkHeavyAirCollection
{
	std::vector<NMS_Toolkit::TkHeavyAirData> HeavyAirSystems;
};

//Dependency: TkGraphicsSettings
//Dependency: NMSString0x100
struct TkIOSDevicePreset
{
	NMS_Toolkit::TkGraphicsSettings DefaultGraphicsSettings;
	std::vector<NMS::NMSString0x100> ModelIdentifiers;
	NMS::NMSString0x100 DeviceName;
};

//Dependency: TkIOSDevicePreset
struct TkIOSPerDeviceSettings
{
	std::vector<NMS_Toolkit::TkIOSDevicePreset> DevicePresets;
};

//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkIdSceneFilename
{
	NMS::VariableSizeString Filename;
	NMS::NMSString0x10 Id;
};

//Dependency: TkInputFrame
struct TkInputFrameArray
{
	NMS_Toolkit::TkInputFrame Array[20000];
};

struct TkInstanceWindComponentData
{
	float BaseMass;
	float BaseSpring;
	float LinearDamping;
	float MassReduction;
	float SpringLengthFactor;
	float SpringNonDirFactor;
	float SpringReduction;
	bool EnableLdsWind;
};

struct TkNavMeshPolyFlags
{
	enum class NavMeshPolyFlagsEnum : uint32_t
	{
		None = 0,
	};

	NMS_Toolkit::TkNavMeshPolyFlags::NavMeshPolyFlagsEnum NavMeshPolyFlags;
};

//Dependency: TkLocalisationEntry
struct TkLocalisationTable
{
	std::vector<NMS_Toolkit::TkLocalisationEntry> Table;
};

//Dependency: NMSString0x20A
//Dependency: VariableSizeString
struct TkMaterialAlternative
{
	enum class TextureTypeEnum : uint32_t
	{
		Diffuse = 0,
		Normal = 1,
		Ambient = 2,
		Environment = 3,
	};

	NMS::NMSString0x20A MaterialAlternativeId;
	NMS::VariableSizeString File;
	NMS_Toolkit::TkMaterialAlternative::TextureTypeEnum TextureType;
};

//Dependency: TkMaterialShaderMillData
//Dependency: Vector3f
//Dependency: VariableSizeString
//Dependency: NMSString0x20
struct TkMaterialMetaData
{
	enum class ShaderEnum : uint32_t
	{
		UberShader = 0,
		Sky = 1,
		Screen = 2,
		UberHack = 3,
		UIScreen = 4,
		Decal = 5,
		ShaderMillParticle = 6,
		ShaderMillUber = 7,
		ShaderMillDecal = 8,
	};

	NMS::Vector3f WaveOneAmplitude;
	NMS::Vector3f WaveOneFallOff;
	NMS::Vector3f WaveOneFrequency;
	NMS::Vector3f WaveTwoAmplitude;
	NMS::Vector3f WaveTwoFallOff;
	NMS::Vector3f WaveTwoFrequency;
	NMS_Toolkit::TkMaterialShaderMillData ShaderMillData;
	NMS::VariableSizeString DetailNormal;
	NMS::VariableSizeString ExternalMaterial;
	NMS::VariableSizeString ForceDiffuse;
	NMS::VariableSizeString ForceFeature;
	NMS::VariableSizeString ForceMask;
	NMS::VariableSizeString ForceNormal;
	float BillboardSphereFactor;
	float BranchHSwing;
	float BranchTrunkAnim;
	float BranchVSwing;
	float DetailHeightBlend;
	float DetailHeightBoost;
	float FurNoiseScale;
	float FurNoiseThickness;
	float FurNoiseTurbulence;
	float FurTurbulenceScale;
	float Glow;
	float HeightScale;
	float IBLWeight;
	float LeafNoise;
	float LeafSwing;
	float NormalTiling;
	int32_t NumSteps;
	float ParallaxDepth;
	float ParticleRefractionBrightnessMultiplier;
	float ParticleRefractionStrengthX;
	float ParticleRefractionStrengthY;
	float ParticleRefractionTint;
	float ReactivityBias;
	float Reflectance;
	float Refraction;
	float RefractionIndex;
	float Roughness;
	NMS_Toolkit::TkMaterialMetaData::ShaderEnum Shader;
	float ShadowFactor;
	float ShellsHeight;
	float SoftFadeStrength;
	float Subsurface;
	float TerrainNormalFactor;
	float TessellationHeight;
	int32_t TransparencyLayerID;
	float TrunkBend;
	float UVFrameTime;
	float UVNumTilesX;
	float UVNumTilesY;
	float UVScrollNormalX;
	float UVScrollNormalY;
	float UVScrollX;
	float UVScrollY;
	float WaveOneSpeed;
	float WaveTwoSpeed;
	NMS::NMSString0x20 MaterialClass;
	bool Additive;
	bool AlphaCutout;
	bool AlwaysOnTopUI;
	bool AnisotropicFilter;
	bool AOMap;
	bool BeforeUI;
	bool BentNormals;
	bool Billboard;
	bool BrightEdge;
	bool CameraRelative;
	bool CastShadow;
	bool Colourisable;
	bool ColourMask;
	bool CreateFur;
	bool DecalNormalOnly;
	bool DecalTerrainOnly;
	bool DepthMaskUI;
	bool DisablePostProcess;
	bool DisableZTest;
	bool DisplacementPositionOffset;
	bool DisplacementWave;
	bool Dissolve;
	bool DoubleBufferGeometry;
	bool DoubleSided;
	bool DoubleSidedKeepNormals;
	bool DrawToBloom;
	bool DrawToLensFlare;
	bool EnableLodFade;
	bool FeatureMap;
	bool FullPrecisionPosition;
	bool GlowMask;
	bool HighQualityParticle;
	bool ImageBasedLighting;
	bool Imposter;
	bool InvertAlpha;
	bool MatchGroundColour;
	bool MergedMeshBillboard;
	bool Metallic;
	bool MetallicMask;
	bool Multitexture;
	bool ParallaxMapped;
	bool ReceiveShadow;
	bool ReflectanceMask;
	bool ReflectionProbe;
	bool RefractionMask;
	bool RotateAroundAt;
	bool RoughnessMask;
	bool ScanEffect;
	bool ScreenSpaceReflections;
	bool SelfShadow;
	bool ShadowOnly;
	bool SimulatedCloth;
	bool SubsurfaceMask;
	bool Transparent;
	bool UISurface;
	bool Unlit;
	bool UVAnimation;
	bool UVScrolling;
	bool UVTileAlts;
	bool VertexAlphaAO;
	bool VertexColour;
	bool VertexDetailBlend;
	bool Wind;
	bool WriteLogZ;
};

struct TkWaterMeshConfig
{
	float BaseScale;
	int32_t DynamicWaveScale;
	int32_t FoamScale;
	int32_t GeometryDownSampleFactor;
	int32_t LodCount;
	int32_t LodDataResolution;
	int32_t MaxHorizontalScaleMultiplier;
	int32_t MinHorizontalScaleMultiplier;
	bool DisableSkirtGeneration;
};

//Dependency: TkWaterMeshConfig
struct TkMeshWaterQualitySettingData
{
	NMS_Toolkit::TkWaterMeshConfig WaterMeshConfig;
	bool EnableDetailNormals;
	bool EnableDynamicWaves;
	bool EnableFoam;
	bool EnableLocalTerrain;
	bool PostProcessWater;
	bool RainDropEffect;
};

struct TkMeshWaterReflectionQualitySettingData
{
	enum class ScreenSpaceReflectionsEnum : uint32_t
	{
		Off = 0,
		On = 1,
	};

	enum class PlanarReflectionsEnum : uint32_t
	{
		Off = 0,
		TerrainOnly = 1,
		TerrainAndScreenspace = 2,
	};

	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData::PlanarReflectionsEnum PlanarReflections;
	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData::ScreenSpaceReflectionsEnum ScreenSpaceReflections;
};

//Dependency: TkMeshWaterQualitySettingData
//Dependency: TkMeshWaterReflectionQualitySettingData
struct TkMeshWaterQualitySettings
{
	NMS_Toolkit::TkMeshWaterQualitySettingData MeshWaterQualitySettings[4];
	NMS_Toolkit::TkMeshWaterReflectionQualitySettingData MeshWaterReflectionQualitySettings[4];
};

struct TkMetadataReadMask
{
	enum class MetadataReadMaskEnum : uint32_t
	{
		None = 0,
		Default = 1,
		SaveWhenMultiplayerClient = 2,
		SavePlayerPosition = 4,
		SavePlayerInventory = 8,
	};

	NMS_Toolkit::TkMetadataReadMask::MetadataReadMaskEnum MetadataReadMask;
};

//Dependency: TkResourceDescriptorData
//Dependency: NMSString0x10
struct TkResourceDescriptorList
{
	std::vector<NMS_Toolkit::TkResourceDescriptorData> Descriptors;
	NMS::NMSString0x10 TypeId;
};

//Dependency: TkResourceDescriptorList
struct TkModelDescriptorList
{
	std::vector<NMS_Toolkit::TkResourceDescriptorList> List;
};

struct TkNGuiEditorGraphicType
{
	enum class NGuiEditorGraphicEnum : uint32_t
	{
		Panel = 0,
		Button = 1,
		Text = 2,
		Graphic = 3,
		WindowTitleBar = 4,
		WindowTitleBarInactive = 5,
		WindowTabActiveActive = 6,
		WindowTabInactiveActive = 7,
		WindowTabActiveInactive = 8,
		WindowTabInactiveInactive = 9,
		WindowTabsSeparator = 10,
		WindowBacking = 11,
		Window = 12,
		WindowPane = 13,
		WindowResize = 14,
		WindowClose = 15,
		WindowMinimize = 16,
		WindowMaximize = 17,
		ScrollBarBackground = 18,
		ScrollBarForeground = 19,
		TreeNodeCollapsed = 20,
		TreeNodeExpanded = 21,
		CheckBoxTrue = 22,
		CheckBoxFalse = 23,
		TextInput = 24,
		Increment = 25,
		Decrement = 26,
		Cursor = 27,
		TextSelection = 28,
		Separator = 29,
		EditorResize = 30,
		EditorMove = 31,
		EditorOverlay = 32,
		FileBrowser = 33,
		ColourEdit = 34,
		IconButton = 35,
		SliderKnob = 36,
		SliderBar = 37,
		IconButtonText = 38,
		TextInputLabel = 39,
		Category = 40,
		Taskbar = 41,
		TaskbarItem = 42,
		TaskbarShortcutButton = 43,
		StartBarWindow = 44,
		StartBarWindowButton = 45,
		StartBarWindowPane = 46,
		StartBarWindowListItem = 47,
		MenuSearchBox = 48,
		SearchBox = 49,
		ComboBox = 50,
		ComboBoxWindow = 51,
		IconListItem = 52,
		IconListItemSelected = 53,
		ImageButton = 54,
		Toolbar = 55,
		ToolbarGraphic = 56,
		ToolbarOptions = 57,
		Rectangle = 58,
		TreeNodeBorder = 59,
		Background = 60,
		GroupTitle = 61,
		TextLabelSeparator = 62,
		AlignmentAnchor = 63,
		MinimiseHighlight = 64,
		Table = 65,
		TableBorder = 66,
		TableFolderButton = 67,
		TableAddEntryButton = 68,
		TreeNode = 69,
		CategoryCollapsed = 70,
		CategoryExpanded = 71,
		WindowTitleBarDragTarget = 72,
		IconButtonSelected = 73,
		Line = 74,
		LightLine = 75,
		TreeNodeBackground = 76,
		TreeNodeCategoryBackground = 77,
		SceneNodeBackground = 78,
		PinChildren = 79,
		UnpinChildren = 80,
		DynamicPanel = 81,
		DynamicPanelTitle = 82,
		DynamicPanelCustomToolbar = 83,
		Favourite = 84,
		FavouriteSelected = 85,
		FavouriteValue = 86,
		FavouriteValueSelected = 87,
		RevertButton = 88,
		TreeNodeCustomPanel = 89,
		IconButtonBordered = 90,
		IconButtonBorderedSelected = 91,
		Tooltip = 92,
		TooltipButton = 93,
		ContextMenuButton = 94,
	};

	NMS_Toolkit::TkNGuiEditorGraphicType::NGuiEditorGraphicEnum NGuiEditorGraphic;
};

//Dependency: NMSString0x100
struct TkNGuiEditorSavedFavourite
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedFavourite> Children;
	NMS::NMSString0x100 Name;
	bool AddedManually;
};

//Dependency: TkNGuiEditorSavedFavourite
//Dependency: TkNGuiEditorSavedTreeNodeModification
//Dependency: NMSString0x100
//Dependency: TkNGuiWindowLayoutData
struct TkNGuiEditorLayout
{
	std::vector<NMS_Toolkit::TkNGuiEditorSavedFavourite> FavouriteData;
	std::vector<int32_t> FavouriteTreeNodeChildCounts;
	std::vector<NMS::NMSString0x100> FavouriteTreeNodes;
	std::vector<NMS_Toolkit::TkNGuiEditorSavedTreeNodeModification> TreeNodeModificationData;
	NMS_Toolkit::TkNGuiWindowLayoutData Windows[256];
};

//Dependency: TkNGuiEditorStyleColour
//Dependency: TkNGuiLayoutShortcut
//Dependency: VariableSizeString
//Dependency: TkNGuiGraphicStyle
//Dependency: TkNGuiTextStyle
struct TkNGuiEditorStyleData
{
	NMS_Toolkit::TkNGuiEditorStyleColour SkinColours[8];
	NMS::VariableSizeString Font;
	std::vector<NMS_Toolkit::TkNGuiLayoutShortcut> LayoutShortcuts;
	std::vector<float> SnapSettings;
	NMS_Toolkit::TkNGuiGraphicStyle GraphicStyles[95];
	NMS_Toolkit::TkNGuiTextStyle TextStyles[15];
	float Sizes[65];
	float SkinFontHeight;
};

//Dependency: TkNGuiLayoutListData
struct TkNGuiLayoutList
{
	std::vector<NMS_Toolkit::TkNGuiLayoutListData> Layouts;
};

//Dependency: NMSString0x10
//Dependency: NMSString0x80
//Dependency: NMSString0x100
struct TkNGuiUserSettings
{
	NMS::NMSString0x10 AnimationViewerRecents[10];
	NMS::NMSString0x10 AnimationViewerRecentWindows[10];
	float FileBrowserThumbnailSize;
	float NguiScale;
	NMS::NMSString0x80 FavouriteWindows[20];
	NMS::NMSString0x100 FileBrowserFavourites[10];
	NMS::NMSString0x100 FileBrowserRecents[10];
	NMS::NMSString0x100 LastActiveLayout;
	NMS::NMSString0x100 LastLoadedModel;
	bool CanSelectRegionDecoratorNodesInDebugEditor;
	bool DebugEditorDebugDrawInPlayMode;
	bool FileBrowserAutoBuildTree;
};

struct TkNavMeshAreaNavigability
{
	float EntryCost;
	float TravelCost;
	bool IsNavigable;
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: TkNavMeshAreaFlags
struct TkNavMeshAreaFlagNavigability
{
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;
	NMS_Toolkit::TkNavMeshAreaFlags AreaFlag;
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: NMSString0x10
struct TkNavMeshAreaGroupNavigability
{
	NMS::NMSString0x10 AreaGroupId;
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;
};

//Dependency: TkNavMeshAreaNavigability
//Dependency: TkNavMeshAreaType
struct TkNavMeshAreaTypeNavigability
{
	NMS_Toolkit::TkNavMeshAreaNavigability Navigability;
	NMS_Toolkit::TkNavMeshAreaType AreaType;
};

//Dependency: NMSString0x80
struct TkNetReplicatedEntityComponentData
{
	enum class SpawnTypeEnum : uint32_t
	{
		Basic = 0,
		Creature = 1,
	};

	enum class ReplicationRangeEnum : uint32_t
	{
		NotSet = 0,
		System = 1,
		SystemLocal = 2,
		Planet = 3,
		PlanetLocal = 4,
		Space = 5,
		SpaceStation = 6,
		Nexus = 7,
	};

	std::vector<NMS::NMSString0x80> ReplicaComponentMask;
	NMS_Toolkit::TkNetReplicatedEntityComponentData::ReplicationRangeEnum ReplicationRange;
	NMS_Toolkit::TkNetReplicatedEntityComponentData::SpawnTypeEnum SpawnType;
	bool IgnoreComponents;
};

//Dependency: TkProceduralInstanceData
struct TkProceduralInstance
{
	NMS_Toolkit::TkProceduralInstanceData Data[16];
};

//Dependency: TkNoiseFlattenOptions
struct TkNoiseFlattenPoint
{
	NMS_Toolkit::TkNoiseFlattenOptions FlattenType;
	int32_t Classification;
	float Density;
	float FlattenRadius;
	int32_t Placement;
	float TurbulenceAmplitude;
	float TurbulenceFrequency;
	int32_t TurbulenceOctaves;
	bool AddLandingPad;
	bool AddShelter;
	bool AddWaypoint;
};

//Dependency: TkNoiseFlattenPoint
//Dependency: Vector3f
struct TkNoiseFlattenFixedPosition
{
	NMS::Vector3f Position;
	NMS_Toolkit::TkNoiseFlattenPoint FlattenPoint;
};

struct TkNoiseLayersEnum
{
	enum class NoiseLayerTypesEnum : uint32_t
	{
		Base = 0,
		Hill = 1,
		Mountain = 2,
		Rock = 3,
		UnderWater = 4,
		Texture = 5,
		Elevation = 6,
		Continent = 7,
	};

	NMS_Toolkit::TkNoiseLayersEnum::NoiseLayerTypesEnum NoiseLayerTypes;
};

struct TkWaterRequirement
{
	enum class WaterRequirementEnum : uint32_t
	{
		NoStorm = 0,
		Storm = 1,
	};

	NMS_Toolkit::TkWaterRequirement::WaterRequirementEnum WaterRequirement;
};

//Dependency: TkEmitterFloatProperty
struct TkParticleSize
{
	NMS_Toolkit::TkEmitterFloatProperty GeneralSize;
	float PointAmplitudes[16];
	float PointRotations[16];
	float PointTimes[16];
	int32_t CurvePointCount;
	float CurveStrength;
	float Max;
	float Min;
	bool ManualSketchCurve;
};

//Dependency: TkParticleSize
//Dependency: TkCurveType
//Dependency: TkCoordinateOrientation
//Dependency: TkParticleBurstData
//Dependency: TkEmitterFloatProperty
//Dependency: TkFloatRange
//Dependency: TkEmitterWindDrift
//Dependency: TkEmitterBillboardAlignment
//Dependency: TkEmitFromParticleInfo
//Dependency: NMSString0x10
//Dependency: Colour
//Dependency: Vector3f
//Dependency: VariableSizeString
struct TkParticleData
{
	enum class SpawnOffsetTypeEnum : uint32_t
	{
		Sphere = 0,
		Box = 1,
		Disc = 2,
		Cone = 3,
		Donut = 4,
		Point = 5,
	};

	enum class OnRefractionsDisabledEnum : uint32_t
	{
		Hide = 0,
		AlphaBlend = 1,
	};

	enum class FlipbookPlaybackRateEnum : uint32_t
	{
		Absolute = 0,
		RelativeToMax = 1,
		OnceToCompletion = 2,
		Random = 3,
	};

	enum class EmitterQualityLevelEnum : uint32_t
	{
		All = 0,
		Low = 1,
		High = 2,
	};

	enum class DragTypeEnum : uint32_t
	{
		IgnoreGravity = 0,
		PhysicallyBased = 1,
		ApplyWind = 2,
	};

	enum class AlignmentEnum : uint32_t
	{
		Rotation = 0,
		Velocity = 1,
		VelocityScreenSpace = 2,
	};

	NMS::Colour ColourEnd;
	NMS::Colour ColourMiddle;
	NMS::Colour ColourStart;
	NMS::Vector3f EmitterDirection;
	NMS::Vector3f RotateAroundEmitterAxis;
	NMS::Vector3f RotationAxis;
	NMS::Vector3f RotationPivot;
	NMS::Vector3f SpawnOffsetParams;
	NMS_Toolkit::TkParticleSize ParticleSize;
	NMS_Toolkit::TkParticleBurstData BurstData;
	NMS_Toolkit::TkEmitterFloatProperty AlphaThreshold;
	NMS_Toolkit::TkEmitterFloatProperty EmissionRate;
	NMS_Toolkit::TkEmitterFloatProperty EmitterLife;
	NMS_Toolkit::TkEmitterFloatProperty ParticleDamping;
	NMS_Toolkit::TkEmitterFloatProperty ParticleDrag;
	NMS_Toolkit::TkEmitterFloatProperty ParticleGravity;
	NMS_Toolkit::TkEmitterFloatProperty ParticleLife;
	NMS_Toolkit::TkEmitterFloatProperty ParticleSizeY;
	NMS_Toolkit::TkEmitterFloatProperty ParticleSpeedMultiplier;
	NMS_Toolkit::TkEmitterFloatProperty Rotation;
	NMS::VariableSizeString _3DGeom;
	NMS::VariableSizeString TrailPath;
	NMS::NMSString0x10 UserColour;
	NMS_Toolkit::TkEmitterWindDrift WindDrift;
	NMS_Toolkit::TkEmitterBillboardAlignment BillboardAlignment;
	NMS_Toolkit::TkFloatRange CameraDistanceFade;
	NMS_Toolkit::TkEmitFromParticleInfo EmitFromParticleInfo;
	NMS_Toolkit::TkParticleData::AlignmentEnum Alignment;
	float AlphaVariance;
	uint32_t AudioEvent;
	float Delay;
	NMS_Toolkit::TkParticleData::DragTypeEnum DragType;
	float EmitterMidLifeRatio;
	NMS_Toolkit::TkParticleData::EmitterQualityLevelEnum EmitterQualityLevel;
	float EmitterSpreadAngle;
	float EmitterSpreadAngleMin;
	NMS_Toolkit::TkParticleData::FlipbookPlaybackRateEnum FlipbookPlaybackRate;
	float HueVariance;
	float LightnessVariance;
	float LimitLifetimeOnMove;
	int32_t MaxCount;
	float MaxRenderCameraHeight;
	float MaxRenderDistance;
	float MaxSpawnDistance;
	NMS_Toolkit::TkParticleData::OnRefractionsDisabledEnum OnRefractionsDisabled;
	float RotateAroundEmitter;
	float SaturationVariance;
	float SoftFadeStrength;
	NMS_Toolkit::TkParticleData::SpawnOffsetTypeEnum SpawnOffsetType;
	float StartOffset;
	float StartRotationVariation;
	float SurfaceDistanceFadeStrength;
	float TrackEmitterPosition;
	float TrailRatio;
	NMS_Toolkit::TkCoordinateOrientation UCoordinate;
	NMS_Toolkit::TkCoordinateOrientation VCoordinate;
	float Variation;
	float VelocityInheritance;
	NMS_Toolkit::TkCurveType EmitterLifeCurve1;
	NMS_Toolkit::TkCurveType EmitterLifeCurve2;
	bool FadeRefractionsAtScreenEdge;
	bool Oneshot;
	bool StartEnabled;
	bool TrailIsRibbon;
};

//Dependency: TkPhysicsData
//Dependency: TkNavMeshInclusionParams
//Dependency: TkVolumeTriggerType
struct TkPhysicsComponentData
{
	enum class SurfacePropertiesEnum : uint32_t
	{
		None = 0,
		Glass = 1,
	};

	enum class ModelOwnershipEnum : uint32_t
	{
		Model = 0,
		MasterModel = 1,
		None = 2,
	};

	NMS_Toolkit::TkPhysicsData Data;
	NMS_Toolkit::TkNavMeshInclusionParams NavMeshInclusion;
	NMS_Toolkit::TkPhysicsComponentData::ModelOwnershipEnum ModelOwnership;
	float SimpleCharacterCollisionFwdOffset;
	float SimpleCharacterCollisionHeight;
	float SimpleCharacterCollisionHeightOffset;
	float SimpleCharacterCollisionRadius;
	float SpinOnCreate;
	NMS_Toolkit::TkPhysicsComponentData::SurfacePropertiesEnum SurfaceProperties;
	NMS_Toolkit::TkVolumeTriggerType TriggerVolumeType;
	bool AllowedDefaultCollision;
	bool AllowTeleporter;
	bool Animated;
	bool BlocksInteract;
	bool BlockTeleporter;
	bool CameraInvisible;
	bool Climbable;
	bool DisableGravity;
	bool Floor;
	bool IgnoreAllCollisions;
	bool IgnoreModelOwner;
	bool InvisibleForInteraction;
	bool IsTransporter;
	bool NoFallDamage;
	bool NoFireCollide;
	bool NoPlayerCollide;
	bool NoTerrainCollide;
	bool NoVehicleCollide;
	bool RotateSimpleCharacterCollisionCapsule;
	bool ScaleAffectsMass;
	bool TriggerVolume;
	bool UseBasePartOptimisation;
	bool UseSimpleCharacterCollision;
	bool Walkable;
};

struct TkPlatformGroup
{
	enum class PlatformMaskEnum : uint32_t
	{
		None = 0,
		Playfab = 1,
		Steam = 2,
		Playstation = 4,
		XBox = 8,
	};

	NMS_Toolkit::TkPlatformGroup::PlatformMaskEnum PlatformMask;
};

struct TkPostProcessData
{
	float BrightnessDepth;
	float BrightnessFinal;
	float ContrastDepth;
	float ContrastFinal;
	float DOFFarAmount;
	float DOFFarPlane;
	float DOFNearAmount;
	float DOFNearPlane;
	float SaturationDepth;
	float SaturationFinal;
};

struct TkWaveInputData
{
	int32_t Count;
	float Strength;
	float Variance;
};

struct TkProbability
{
	enum class ProbabilityEnum : uint32_t
	{
		Common = 0,
		Uncommon = 1,
		Rare = 2,
		Extraordinary = 3,
	};

	NMS_Toolkit::TkProbability::ProbabilityEnum Probability;
};

//Dependency: VariableSizeString
struct TkProceduralModelComponentData
{
	std::vector<NMS::VariableSizeString> List;
};

//Dependency: NMSString0x20
struct TkRagdollData
{
	std::vector<NMS::NMSString0x20> ChainEnds;
	std::vector<NMS::NMSString0x20> ExcludeJoints;
};

//Dependency: VariableSizeString
struct TkReferenceComponentData
{
	NMS::VariableSizeString LSystem;
	NMS::VariableSizeString Reference;
};

//Dependency: TkReplacementResource
struct TkReplacementResourceTable
{
	std::vector<NMS_Toolkit::TkReplacementResource> Data;
};

//Dependency: Vector3f
struct TkRotationComponentData
{
	NMS::Vector3f Axis;
	float Speed;
	int32_t SyncGroup;
	bool AlwaysUpdate;
};

//Dependency: NMSString0x10
//Dependency: VariableSizeString
struct TkSceneNodeAttributeData
{
	NMS::NMSString0x10 Name;
	NMS::VariableSizeString Value;
};

struct TkTransformData
{
	float RotX;
	float RotY;
	float RotZ;
	float ScaleX;
	float ScaleY;
	float ScaleZ;
	float TransX;
	float TransY;
	float TransZ;
};

//Dependency: TkSceneNodeAttributeData
//Dependency: TkTransformData
//Dependency: VariableSizeString
//Dependency: NMSString0x10
struct TkSceneNodeData
{
	std::vector<NMS_Toolkit::TkSceneNodeAttributeData> Attributes;
	std::vector<NMS_Toolkit::TkSceneNodeData> Children;
	NMS::VariableSizeString Name;
	NMS::NMSString0x10 Type;
	NMS_Toolkit::TkTransformData Transform;
	uint32_t NameHash;
	int8_t PlatformExclusion;
};

struct TkSketchConditions
{
	enum class ConditionEnum : uint32_t
	{
		Equal = 0,
		NotEqual = 1,
		Greater = 2,
		Less = 3,
		GreaterEqual = 4,
		LessEqual = 5,
	};

	NMS_Toolkit::TkSketchConditions::ConditionEnum Condition;
};

//Dependency: TkPhysicsData
//Dependency: TkNavMeshInclusionParams
//Dependency: TkVolumeTriggerType
struct TkStaticPhysicsComponentData
{
	NMS_Toolkit::TkPhysicsData Data;
	NMS_Toolkit::TkNavMeshInclusionParams NavMeshInclusion;
	NMS_Toolkit::TkVolumeTriggerType TriggerVolumeType;
	bool AddToWorldImmediately;
	bool AddToWorldOnPrepare;
	bool CameraInvisible;
	bool Climbable;
	bool NoPlayerCollide;
	bool NoTerrainCollide;
	bool NoVehicleCollide;
	bool TriggerVolume;
};

struct TkTrophyEnum
{
	enum class TrophyEnum : uint32_t
	{
		None = 4294967295,
		Trophy0 = 0,
		Trophy1 = 1,
		Trophy2 = 2,
		Trophy3 = 3,
		Trophy4 = 4,
	};

	NMS_Toolkit::TkTrophyEnum::TrophyEnum Trophy;
};

//Dependency: TkSaveID
struct TkUniqueSyncKey
{
	uint64_t Index;
	NMS_Toolkit::TkSaveID OwnerID;
};

//Dependency: TkPlatformGroup
//Dependency: NMSString0x40
struct TkUserAccount
{
	NMS_Toolkit::TkPlatformGroup PlatformGroup;
	NMS::NMSString0x40 OnlineID;
};

struct TkUserServiceAuthProvider
{
	enum class AuthProviderEnum : uint32_t
	{
		Null = 0,
		PSN = 1,
		Steam = 2,
		Galaxy = 3,
		Xbox = 4,
		WeGame = 5,
		NSO = 6,
		GameCenter = 7,
	};

	NMS_Toolkit::TkUserServiceAuthProvider::AuthProviderEnum AuthProvider;
};

//Dependency: TkNoiseFlattenPoint
struct TkVoxelGeneratorRegionData
{
	std::vector<NMS_Toolkit::TkNoiseFlattenPoint> FlattenTerrainPoints;
	std::vector<float> FlattenTypeChances;
	int32_t ShelterIndices[3];
	float AddShelterChance;
	int32_t LandingPadIndex;
	int32_t NumShelters;
	float PlanetRadius;
	float VoronoiPointDivisions;
	int32_t VoronoiPointSeed;
	int32_t VoronoiSectorSeed;
	int32_t WaypointIndex;
};

//Dependency: TkVoxelGeneratorSettingsElement
struct TkVoxelGeneratorSettingsArray
{
	NMS_Toolkit::TkVoxelGeneratorSettingsElement TerrainSettings[31];
};

//Dependency: TkWaveInputData
//Dependency: TkFoamProperties
struct TkWaterConditionData
{
	std::vector<NMS_Toolkit::TkWaveInputData> Waves;
	NMS_Toolkit::TkFoamProperties FoamProperties;
	float DetailNormalsStrength;
	float WaveRTPCStrength;
};

//Dependency: TkWaterConditionData
//Dependency: TkBiomeSpecificWaterConditions
//Dependency: TkAllowedWaterConditions
struct TkWaterData
{
	NMS_Toolkit::TkWaterConditionData WaterConditions[15];
	NMS_Toolkit::TkBiomeSpecificWaterConditions BiomeSpecificUsage[17];
	NMS_Toolkit::TkAllowedWaterConditions WaterConditionUsage[2];
	float MinimumWavelength;
};

struct TkWaveSpectrumData
{
	float Chop;
	float Wavelength;
};

//Dependency: TkWeightedAnim
//Dependency: NMSString0x10
struct TkWeightedAnimLibrary
{
	std::vector<NMS_Toolkit::TkWeightedAnim> Anims;
	NMS::NMSString0x10 Id;
};


} //namespace NMS_Toolkit
